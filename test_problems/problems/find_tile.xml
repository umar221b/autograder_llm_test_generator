<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 308207  -->
  <question type="coderunner">
    <name>
      <text>Ex 5 - Part 1 - FindTile</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p>For this exercise - <b>ONLY SUBMIT THE SINGLE FUNCTION</b> called <b>FindTile</b>()</p><p>This function should <i>locate the tile of interest</i> (which is specified in the <b>tile</b> parameter) and then set the two
pointers (rowPos and colPos) to store the row and column position of the tile.&nbsp; The function prototype declaration for this function is:</p><pre>void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)<br></pre><p><br></p><p><br></p>]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>c_function</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
#define SEPARATOR "#<ab@17943918#@>#"

/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4


{{ STUDENT_ANSWER }}

int main() {
{% for TEST in TESTCASES %}
   {
    {{ TEST.testcode }};
   }
    {% if not loop.last %}printf("%s\n", SEPARATOR);{% endif %}
{% endfor %}
    return 0;
}]]></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	// Find the position of the tile
	int i, j, row, col;

	// Locate the tile to move
	row = 0;
	col = 0;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				row = i;
				col = j;
			}
		}
	}
	*rowPos = row;
	*colPos = col;
}]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>twig</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald></templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int board[NUM_ROWS][NUM_COLS] = {
	{1, 2, 3, 4},
	{5, 6, 7, 8},
	{9, 10, 11, 12},
	{-1, 13, 14, 15}
};
int row, col;

FindTile(board, -1, &row, &col);

printf("Found at %d, %d", row, col);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Found at 3, 0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int board[NUM_ROWS][NUM_COLS] = {
	{1, 2, 3, 4},
	{5, 6, 7, 8},
	{9, 10, -1, 12},
	{13, 14, 15, 16}
};
int row, col;
FindTile(board, -1, &row, &col);
printf("Found at %d, %d", row, col);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Found at 2, 2</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="1" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int board[NUM_ROWS][NUM_COLS] = {
	{-1, 2, 3, 4},
	{5, 6, 7, 8},
	{9, 10, 11, 12},
	{1, 13, 14, 15}
};
int row, col;

FindTile(board, -1, &row, &col);

printf("Found at %d, %d", row, col);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Found at 0, 0</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int board[NUM_ROWS][NUM_COLS] = {
	{1, 2, 3, 4},
	{5, 6, 7, -1},
	{9, 10, 11, 12},
	{8, 13, 14, 15}
};
int row, col;

FindTile(board, -1, &row, &col);

printf("Found at %d, %d", row, col);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Found at 1, 3</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int board[NUM_ROWS][NUM_COLS] = {
	{1, 2, 3, 4},
	{5, 6, 7, 8},
	{9, -1, 11, 12},
	{10, 13, 14, 15}
};
int row, col;

FindTile(board, -1, &row, &col);

printf("Found at %d, %d", row, col);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Found at 2, 1</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int board[NUM_ROWS][NUM_COLS] = {
	{1, 2, 3, 4},
	{5, 6, -1, 8},
	{9, 7, 11, 12},
	{10, 13, 14, 15}
};
int row, col;

FindTile(board, -1, &row, &col);

printf("Found at %d, %d", row, col);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Found at 1, 2</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int board[NUM_ROWS][NUM_COLS] = {
	{1, 2, 3, 4},
	{5, 6, 15, 8},
	{9, 7, 11, 12},
	{10, 13, 14, -1}
};
int row, col;

FindTile(board, -1, &row, &col);

printf("Found at %d, %d", row, col);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Found at 3, 3</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int board[NUM_ROWS][NUM_COLS] = {
	{1, 2, 3, 4},
	{5, 6, 14, 8},
	{9, 7, 11, 12},
	{10, 13, -1, 15}
};
int row, col;

FindTile(board, -1, &row, &col);

printf("Found at %d, %d", row, col);]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>Found at 3, 2</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
    </testcases>
  </question>

</quiz>