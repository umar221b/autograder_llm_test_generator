<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 311759  -->
  <question type="coderunner">
    <name>
      <text>Text histogram</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[<p></p><p><span lang="EN-US"></span></p><h5><em>[This
 is a challenge exercise - good practice if you would like a slightly more 
difficult exercise to try, however it is only worth 0.5 marks out of 
the 10 marks for this lab; that is the equivalent of 0.1% contribution 
towards your final grade... good luck!]</em></h5><p><br></p>Let’s say that we have the following 6
data values representing frequencies of some measurement:<p></p>

<p><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3,
1, 2, 0, 4, 1</span></p>

<p><span lang="EN-US">&nbsp;and we now would like to plot these on a
histogram.&nbsp; We could do this easily using
many graphical plotting programs such as Excel:</span></p><p><span lang="EN-US">&nbsp;&nbsp;&nbsp; <img src="@@PLUGINFILE@@/image.png" alt="" role="presentation" class="img-fluid"><br></span></p><p><span lang="EN-US"></span></p><p><span lang="EN-US">We could also represent the same data
using a textual representation, where the bars are represented by “X”
characters:</span></p>

<pre><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; X&nbsp; <br></span><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; X&nbsp;&nbsp; X <br></span><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; X X X<br></span><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; XXX XX</span></pre><p></p><p><span lang="EN-US">And to make this look a little nicer, we could
surround the bars with a border of ‘</span><span lang="EN-US">*</span><span lang="EN-US">’ characters:</span></p>

<p><span lang="EN-US"></span></p><pre><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; ********<br></span><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; *&nbsp;&nbsp;&nbsp; X * <br></span><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; *X&nbsp;&nbsp; X *<br></span><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; *X X X *<br></span><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; *XXX XX*<br></span><span lang="EN-US">&nbsp;&nbsp;&nbsp;&nbsp; ********</span></pre><p><span lang="EN-US">Define a function
called <b>Histogram()</b> that takes an array
of integers representing the data to be plotted, and generates a string (representing
the histogram) in precisely the format described above. &nbsp;Please take note of the following:</span></p><p><span lang="EN-US"></span></p><ul><li><span lang="EN-US">each line of text in the string ends with
a new line (‘\n’) <i>except</i> for the very
last line</span></li><li>

<span lang="EN-US">there must be <i>no extra space characters</i> anywhere at the beginning or end of a
line</span></li></ul><p><span lang="EN-US"></span></p><p><span lang="EN-US">The <b>Histogram()</b>
function should take three input values.&nbsp;
The second and third input values represent the data to be plotted.&nbsp; This is stored as an array of integers, and
the number of elements in the array.&nbsp; The
first input to the function is the string into which you should store the
resulting histogram.&nbsp; </span></p><br><p></p><br><p></p><p></p><p><span lang="EN-US"><br></span></p><p><span lang="EN-US"><br></span></p><br>]]></text>
<file name="image.png" path="/" encoding="base64"></file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>c_function</coderunnertype>
    <prototypetype>0</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0, 0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>18</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload></answerpreload>
    <globalextra></globalextra>
    <useace></useace>
    <resultcolumns></resultcolumns>
    <template></template>
    <iscombinatortemplate></iscombinatortemplate>
    <allowmultiplestdins></allowmultiplestdins>
    <answer><![CDATA[int MaxArrayValue(int *values, int numValues)
{
	int i, max = values[0];
	for(i = 1; i < numValues; i++){
		if(values[i] > max){
			max = values[i];
		}
	}
	return max;
}

void Histogram(char *result, int *values, int numValues)
{
	int maxValue = MaxArrayValue(values, numValues);
	int i, j;
	result[0] = 0; //reset the results array
	for(i = 0; i < numValues + 2; i++){
		strcat(result, "*");
	}
	strcat(result, "\n");
	for(i = maxValue; i > 0; i--){
		strcat(result, "*");
		for(j = 0; j < numValues; j++){
			if(values[j] >= i){
				strcat(result, "X");
			} else {
				strcat(result, " ");
			}
		}
		strcat(result, "*\n");
	}
	for(i = 0; i < numValues + 2; i++){
		strcat(result, "*");
	}
	strcat(result, "\0");
}
]]></answer>
    <validateonsave>1</validateonsave>
    <testsplitterre></testsplitterre>
    <language></language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader></grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>twig</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin></uiplugin>
    <uiparameters></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra></prototypeextra>
    <testcases>
      <testcase testtype="0" useasexample="1" hiderestiffail="0" mark="1.0000000" >
      <testcode>
                <text><![CDATA[int values1[10] = {1, 0, 3, 1, 2, 4, 5, 6, 2, 2};
int values2[3] = {1, 0, 1};
char formatted[1000];
char example[1000] = "*****\n*X X*\n*****";

Histogram(formatted, values1, 10);
printf("%s\n\n", formatted);

Histogram(formatted, values2, 3);
printf("%s\n", formatted);
if (strcmp(example, formatted) == 0) {
    printf("This matches EXACTLY and is correct");
}
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>************
*       X  *
*      XX  *
*     XXX  *
*  X  XXX  *
*  X XXXXXX*
*X XXXXXXXX*
************

*****
*X X*
*****
This matches EXACTLY and is correct
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {1, 2, 3, 4, 5};
Histogram(result, values, 5);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>*******
*    X*
*   XX*
*  XXX*
* XXXX*
*XXXXX*
*******</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {5};
Histogram(result, values, 1);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>***
*X*
*X*
*X*
*X*
*X*
***</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {2, 1};
Histogram(result, values, 2);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>****
*X *
*XX*
****
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {7, 0, 7, 0, 7, 0, 7, 0, 7, 0, 7};
Histogram(result, values, 11);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>*************
*X X X X X X*
*X X X X X X*
*X X X X X X*
*X X X X X X*
*X X X X X X*
*X X X X X X*
*X X X X X X*
*************</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {1, 2, 4, 8, 16, 32, 32, 32, 32, 32, 32, 30, 25, 20, 15, 10, 5, 5, 5, 5};
Histogram(result, values, 20);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>**********************
*     XXXXXX         *
*     XXXXXX         *
*     XXXXXXX        *
*     XXXXXXX        *
*     XXXXXXX        *
*     XXXXXXX        *
*     XXXXXXX        *
*     XXXXXXXX       *
*     XXXXXXXX       *
*     XXXXXXXX       *
*     XXXXXXXX       *
*     XXXXXXXX       *
*     XXXXXXXXX      *
*     XXXXXXXXX      *
*     XXXXXXXXX      *
*     XXXXXXXXX      *
*    XXXXXXXXXX      *
*    XXXXXXXXXXX     *
*    XXXXXXXXXXX     *
*    XXXXXXXXXXX     *
*    XXXXXXXXXXX     *
*    XXXXXXXXXXX     *
*    XXXXXXXXXXXX    *
*    XXXXXXXXXXXX    *
*   XXXXXXXXXXXXX    *
*   XXXXXXXXXXXXX    *
*   XXXXXXXXXXXXX    *
*   XXXXXXXXXXXXXXXXX*
*  XXXXXXXXXXXXXXXXXX*
*  XXXXXXXXXXXXXXXXXX*
* XXXXXXXXXXXXXXXXXXX*
*XXXXXXXXXXXXXXXXXXXX*
**********************</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6, 5, 6, 7, 6, 7, 8, 7, 8};
Histogram(result, values, 20);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>**********************
*                 X X*
*              X XXXX*
*           X XXXXXXX*
*        X XXXXXXXXXX*
*     X XXXXXXXXXXXXX*
*  X XXXXXXXXXXXXXXXX*
* XXXXXXXXXXXXXXXXXXX*
*XXXXXXXXXXXXXXXXXXXX*
**********************</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2};
Histogram(result, values, 20);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>**********************
*  X   X   X   X   X *
* XXX XXX XXX XXX XXX*
*XXXXXXXXXXXXXXXXXXXX*
**********************</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {0, 1, 3, 1, 0};
Histogram(result, values, 5);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>*******
*  X  *
*  X  *
* XXX *
*******</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {1};
Histogram(result, values, 1);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>***
*X*
***</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {1, 1, 1, 1, 1, 1, 1, 1};
Histogram(result, values, 8);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>**********
*XXXXXXXX*
**********</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {4, 4, 4, 4, 4};
Histogram(result, values, 5);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>*******
*XXXXX*
*XXXXX*
*XXXXX*
*XXXXX*
*******</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {0, 4, 4, 9, 0};
Histogram(result, values, 5);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>*******
*   X *
*   X *
*   X *
*   X *
*   X *
* XXX *
* XXX *
* XXX *
* XXX *
*******</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 1};
Histogram(result, values, 10);

printf("%s", result);
]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>************
*         X*
************</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0};
Histogram(result, values, 10);

printf("%s", result);

]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>************
*X         *
*X         *
************
</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>HIDE</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {6, 3, 2, 4, 8, 7, 1, 9};
Histogram(result, values, 8);

printf("%s", result);

]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>**********
*       X*
*    X  X*
*    XX X*
*X   XX X*
*X   XX X*
*X  XXX X*
*XX XXX X*
*XXXXXX X*
*XXXXXXXX*
**********</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {8, 7, 6, 5, 4, 3, 2, 1};
Histogram(result, values, 8);

printf("%s", result);

]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>**********
*X       *
*XX      *
*XXX     *
*XXXX    *
*XXXXX   *
*XXXXXX  *
*XXXXXXX *
*XXXXXXXX*
**********</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
      <testcase testtype="0" useasexample="0" hiderestiffail="1" mark="1.0000000" >
      <testcode>
                <text><![CDATA[char result[1000];

int values[100] = {1, 2, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 2, 1};
Histogram(result, values, 15);

printf("%s", result);

]]></text>
      </testcode>
      <stdin>
                <text></text>
      </stdin>
      <expected>
                <text>*****************
*       X       *
*       X       *
*       X       *
* X     X     X *
*XXXXXXXXXXXXXXX*
*****************</text>
      </expected>
      <extra>
                <text></text>
      </extra>
      <display>
                <text>SHOW</text>
      </display>
    </testcase>
    </testcases>
  </question>

</quiz>