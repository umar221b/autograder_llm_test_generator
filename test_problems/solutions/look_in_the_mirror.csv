upi,time,try,answer,rawfraction
aahk798,1695782698,1,"void ReverseArray(int *values, int length)
{  int tempvalues;
	int i,j; 
	for (i=0; i<=length/2; i ++) { 
		tempvalues=values[i];
		values[i]= values[length-i-1]; 
		values[length-i-1]=tempvalues; 
	}

}

",0
aahk798,1695783706,2,"void ReverseArray(int *values, int length)
{  int tempvalues;
	int i; 
	for (i=0; i<=length/2; i ++) { 
		tempvalues=values[i];
		values[i]= values[length-i-1]; 
		values[length-i-1]=tempvalues; 
	}

}
",0
aahk798,1695783922,3,"void ReverseArray(int *values, int length)
{  int tempvalues;
	int i; 
	for (i=0; i<length/2; i ++) { 
		tempvalues=values[i];
		values[i]= values[length-i-1]; 
		values[length-i-1]=tempvalues; 
	}

}",1
aakm278,1696226391,1,"int ReverseArray(int values[],int length)
{
		int i = 0;
		int RArray[length];
	//printf(""RArray is %d"", &RArray);
	
	/*while (i < length)
	{
		//stuff
		RArray[i] = values[length -1 -i];

		i++;
	}*/
    //printf(""Rarray is: "");
	for (i = 0; i < length; i++)
	{
		RArray[i] = values[length - 1 - i];
		printf(""%d "", RArray[i]);
	}
	
}",0
aakm278,1696227076,2,"int ReverseArray(int values[],int length)
{
		int i = 0;
		int RArray[100];
	//printf(""RArray is %d"", &RArray);
	
	/*while (i < length)
	{
		//stuff
		RArray[i] = values[length -1 -i];

		i++;
	}*/

	for (i = 0; i < length; i++)
	{
		RArray[i] = values[length - 1 - i];
		printf(""%d "", RArray[i]);
	}
	
}",0
aakm278,1696227088,3,"int ReverseArray(int values[],int length)
{
		int i = 0;
		int RArray[100];
	//printf(""RArray is %d"", &RArray);
	
	/*while (i < length)
	{
		//stuff
		RArray[i] = values[length -1 -i];

		i++;
	}*/

	for (i = 0; i < length; i++)
	{
		RArray[i] = values[length - 1 - i];
		printf(""%d "", RArray[i]);
	}
	return 0;
}",0
aakm278,1696227645,4,"int ReverseArray(int values[],int length)
{
		int i = 0;
		int RArray[100];
	//printf(""RArray is %d"", &RArray);
	
	/*while (i < length)
	{
		//stuff
		RArray[i] = values[length -1 -i];

		i++;
	}*/

	for (i = 0; i < length; i++)
	{
		RArray[i] = values[length - 1 - i];
		//printf(""%d "", RArray[i]);
	}
	printf(""\n"");
	
	for (i = 0; i < length; i++)
	{
		values[i] = RArray[i];
	}
}",0
aakm278,1696227657,5,"int ReverseArray(int values[],int length)
{
		int i = 0;
		int RArray[100];
	//printf(""RArray is %d"", &RArray);
	
	/*while (i < length)
	{
		//stuff
		RArray[i] = values[length -1 -i];

		i++;
	}*/

	for (i = 0; i < length; i++)
	{
		RArray[i] = values[length - 1 - i];
		//printf(""%d "", RArray[i]);
	}
	printf(""\n"");
	
	for (i = 0; i < length; i++)
	{
		values[i] = RArray[i];
	}
	return 0;
}",0
aakm278,1696227669,6,"int ReverseArray(int values[],int length)
{
		int i = 0;
		int RArray[100];
	//printf(""RArray is %d"", &RArray);
	
	/*while (i < length)
	{
		//stuff
		RArray[i] = values[length -1 -i];

		i++;
	}*/

	for (i = 0; i < length; i++)
	{
		RArray[i] = values[length - 1 - i];
		//printf(""%d "", RArray[i]);
	}
	//printf(""\n"");
	
	for (i = 0; i < length; i++)
	{
		values[i] = RArray[i];
	}
	return 0;
}",1
aana675,1696123444,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        
        start++;
        end--;
    }
}
",1
aaza463,1695611984,1,"// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int temp[length];
	int i;

	for (i = 0; i < length; i++){
		temp[i] = values[length-1-i];
	}

	for (i = 0; i < length; i++){
		values[i] = temp[i];
	}
}",1
aazh582,1696238319,1,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    int temp;
    for(int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
int main() {
    int array[] = {1, 2, 3, 4, 5, 6, 7};
    int length = sizeof(array) / sizeof(array[0]);

    ReverseArray(array, length);

    for(int i = 0; i < length; i++) {
        printf(""%d "", array[i]);
    }

    return 0;
}",0
aazh582,1696238518,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for(int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
int main() {
    int array[] = {1, 2, 3, 4, 5, 6, 7};
    int length = sizeof(array) / sizeof(array[0]);

    ReverseArray(array, length);

    for(int i = 0; i < length; i++) {
        printf(""%d "", array[i]);
    }

    return 0;
}",0
aazh582,1696238656,3,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    int temp;
    for(int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
int main() {
    int array[] = {1, 2, 3, 4, 5, 6, 7};
    int length = sizeof(array) / sizeof(array[0]);
    ReverseArray(array, length);
    for(int i = 0; i < length; i++) {
        printf(""%d "", array[i]);
    }
    return 0;
}",0
abha257,1695899414,1,"void ReverseArray(int *values, int length)
{
	int temp;
	for (int i = 0; i < length / 2; i++) {
		temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
	}
}",1
abro522,1695600555,1,"void ReverseArray(int *values, int length) {
    for (int i = 0; i < length / 2; i++) {
        int v_i = values[i];
        int v_ni = values[length-i-1];
        values[i] = v_ni;
        values[length-i-1] = v_i;
    }
}",1
acam267,1695785057,1,"void ReverseArray(int *array, int length) {
    int temporaryArray[length];
    int index;
    for(int i = 0; i < length; i++) {
        temporaryArray[i] = array[i];
    }
    
    for(int i = length-1; i >= 0; i--) {
        array[index] = temporaryArray[i];
        index++;
    }
}",0
acam267,1695857043,2,"void ReverseArray(int *array, int length) {
    int temporaryArray[length];
    int index;
    for(int i = 0; i < length; i++) {
        temporaryArray[i] = array[i];
    }

    for(int i = length-1; i >= 0; i--) {
        array[index] = temporaryArray[i];
        index++;
    }
}",0
acam267,1696228505,3,"void ReverseArray(int *array, int length) {
    int temporaryArray[length];
    int index = 0;
    for(int i = 0; i < length; i++) {
        temporaryArray[i] = array[i];
    }

    for(int i = length-1; i >= 0; i--) {
        array[index] = temporaryArray[i];
        index++;
    }
}",1
ache725,1696151770,1,"void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions 'i' and 'length - 1 - i'
        int temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
achi359,1695685676,1,"#include <stdio.h>
void ReverseArray(int *values, int length){
for (int i = 0; i < length/2; i++){
// create a temporary variable 
int temp = values[i];
values[i] = values[length - i - 1];
values[length - i - 1] = temp;}",0
achi359,1695685738,2,"void ReverseArray(int *values, int length){
    for (int i = 0; i < length/2; i++){
    // create a temporary variable 
    int temp = values[i];
    values[i] = values[length - i - 1];
    values[length - i - 1] = temp;
    }
}",1
acoc261,1695691915,1,"void ReverseArray(int *values, int length)
{
    int i;
    int j;
    int storage[length];
    for (i = 0; i < length; i++){
        storage[i] = values[i];
    }
    for (j = 0; j < length; j++){
        values[length - j - 1] = storage[j];
    }
}",1
adav221,1695986057,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
    int temp = values[start];
    values[start] = values[end];
    values[end] = temp;
    start++;
 end--;
    }
}
",1
adey750,1696039047,1,"#include <stdio.h>
void ReverseArray(int *values, int length)
{ 
   int i;
   int newLength; 
   newLength = length + 1; 
   length  = length + 1;
   
    for (i = 0; i < newLength; i++) { 

         length--;
         values[i] = length;
   }
    
}",0
adey750,1696057104,2,"void ReverseArray(int *values, int length)
{ 
   int i;
   int pos;
   

    for (i = 0; i < length; i++) { 
         length--;
         
         pos = values[i];// storing element 1 in pos 
         values[i] = values[length]; // changing element 1 with last element 
         
         values[length] = pos;
         
    }
    
}",1
afal438,1695632103,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int ReverseArray(int *values, int numElements)
{
	int count = 0;
	int i;
	for (i = numElements; i > -1; i = i--)
	{
		values[count] = i;
		count++;
	}
}",0
afal438,1695632381,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int ReverseArray(int *values, int numElements)
{
	int count = 0;
	int i;
	for (i = numElements; i > 0; i = i--)
	{
		values[count] = i;
		count++;
	}
}",0
afal438,1695646509,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int ReverseArray(int *values, int numElements)
{
	int count = 0;
	int i;
	for (i = numElements; i > 0; i--)
	{
		values[count] = i;
		count++;
	}
}",0
afal438,1695692039,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int numElements)
{
	int start = 0;
	int end = numElements - 1;

	int position;

	while (start<end)
	{
		position = values[start];

		values[start] = values[end];

		values[end] = position;

		start++;
		end--;
	}
}",1
afit324,1696146135,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{ 
    int p = length - 1;
    int valuesend;
    
    for (int i = 0; i < length/2; i++) {
        valuesend = values[i];
        values[i] = values[p - i];
        values[p-i] = valuesend;
    }
}",1
agan859,1695722772,1,"void ReverseArray(int* values, int length)
{
	
	int i;
	int p;
	int count = length - 1;

	for (i = 0; i < (length/2); i++) {

		p = values[count];
		values[count] = values[i];
		values[i] = p;
		count = count - 1;
	}

	


}",1
agay279,1695865396,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{

    for ( int i=0; i<length/2; i++){
        int temp;
        temp=values[i];
         values[i]=values[length-1-i];
        values[length-1-i]=temp;
    }
       



}
",1
agou682,1696234064,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start =0;
    int end =length-1;
    while (start<end) {
       
        int temp=values[start];
        values[start]=values[end];
        values[end]=temp;

        
        start++;
        end--;
    }
}
int main() {
    int array[]={1, 2, 3, 4, 5};
    int length=sizeof(arr)/sizeof(arr[0]);

    printf(""Original Array:"");
    for (int i = 0;i<length; i++) {
        printf(""%d "", array[i]);
    }

    ReverseArray(ar,length);

    printf(""\nReversed Array: "");
    for (int i = 0; i<length; i++) {
        printf(""%d "", array[i]);
    }

    return 0;
}
",0
agou682,1696234197,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start=0;
    int end=length - 1;
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}

int main() {
    int array[]={1, 2, 3, 4, 5};
    int length=sizeof(array) / sizeof(array[0]);

    printf(""Original Array: "");
    for (int i=0; i<length; i++) {
        printf(""%d "", array[i]);
    }
    ReverseArray(array, length);
    printf(""\nReversed Array: "");
    for (int i = 0;i<length; i++) {
        printf(""%d "", array[i]);
    }
    return 0;
}

",0
agou682,1696234309,3,"#include <stdio.h>

void ReverseArray(int *values,int length) {
    int start = 0;
    int end = length - 1;
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}

int main() {
    int array[]={1, 2, 3, 4, 5};
    int length=sizeof(array) / sizeof(array[0]);

    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", array[i]);
    }

    ReverseArray(array, length);

    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", array[i]);
    }

    return 0;
}


",0
agou682,1696237334,4,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    int start=0;
    int end=length - 1;

    while (start<end) {
       
        temp = values[start];
        values[start] =values[end];
        values[end] =temp;

        
        start++;
        end--;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr)/sizeof(arr[0]);

    printf(""Original Array: "");
    for (int i = 0; i<length; i++) {
        printf(""%d "", arr[i]);
    }

    ReverseArray(arr,length);

    printf(""\nReversed Array: "");
    for (int i = 0; i<length; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}


",0
agou682,1696237653,5,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    int start=0;
    int end=length - 1;

    while (start<end) {
       
        temp = values[start];
        values[start] =values[end];
        values[end] =temp;

        
        start++;
        end--;
    }
}




",1
ahac139,1695763763,1,"void ReverseArray(int *values, int length){

    // Copy one array into other
    int store[length];
    for (int i = 0; i < length; i++)
    {
        store[i] = values[i];
    }

    int x = 0;

    for (int i = length-1; i >= 0; i--)
    {
        values[x] = store[i];
        x++;
    }
    

}",1
ahac223,1696165918,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    for (start = 0; start <= end; start++) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        end--;
    }
}",1
ahac223,1696166099,2,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while(start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        end--;
    }
}",0
ahac223,1696169807,3,"void ReverseArray(int *values, int length) {
    //int n = length;
    int temp[length];
    int a = 0;
    int b = 0;
    
    for (int i = length - 1; i >= 0; i--){
        
        temp[a] = values[i];
        a++;
    }
    for(int j = 0; j < length; j++){
        values[b] = temp[j];
        b++;
    }
    
    
}
",1
ahai431,1696129767,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int save;
	int i;

	for (i = 0; i < (length / 2); i++) {
		save = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = save;
	}
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = { 1, 2, 3, 4, 5, 6, 7 };

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
		printf(""%d "", values[i]);
	}

	return 0;
}",0
ahai431,1696129784,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int save;
	int i;

	for (i = 0; i < (length / 2); i++) {
		save = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = save;
	}
}",1
ahas673,1695856601,1,"#include <stdio.h>

void ReverseArray(int *values, int length){

int *start;
int *end;
int temp;

start = values;
end = values + length - 1;

while (start < end){
    temp = *start;
    *start = *end;
    *end = temp;
    start++;
    end--;
}

}",1
ahij206,1696227151,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}
",1
ahua579,1695701251,1,"void ReverseArray(int* values, int length)
{
	int temp;
	for (int i = 0; i < length / 2; i++) {
		temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}
}",1
ahus071,1696151963,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int temp;
	for (int i=0; i <length/2; i++){
		temp = values[i];
		values[i] = values[length-1-i];
		values[length-1-i] = temp;
	}
}",1
ajam744,1695790310,1,"void ReverseArray(int *values, int length)
{
    int temp;
    
    for (int i = 0; i < length; i++) 
    {
        if (i >= (length - i - 1)) 
        {
            break;
        }
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}
",1
ajeo563,1695804341,1,"void ReverseArray(int *values, int length)
{

	int start = 0;
	int finish = length - 1;

	while (start < finish){

		int x = values[start];
		values[start] = values[finish];
		values[finish] = x;
		
		start++;
		finish--;
		
			
	}

}",1
ajhz010,1695698504,1,"void ReverseArray(int *values, int length)
{
    int i;
    int valuesCopy[1000] = {0};
    for (i = 0; i < length; i++) {
        valuesCopy[i] = values[i];
    }
        for (i = 0; i < length; i++) {
        values[i] = valuesCopy[length - i - 1];
    }
}",1
ajhz011,1695614702,1,"#include <stdio.h>

void ReverseArray(int* values, int length)

{
	int i, j = length - 1;
	int storedValues[2] = { 0 };

	for (i = 0; i < length / 2; i++) {
		storedValues[0] = values[i];
		storedValues[1] = values[j];

		values[i] = storedValues[1];
		values[j] = storedValues[0];

			j--;
	}
}",1
ajhz216,1695866114,1,"void ReverseArray(int *values, int length)
{	
	int x;
	x = (length/2) + 1;
	for (int i = 0; i < x; i++) {
		int temp = values[i];
		values[i] = values[length-1-i];
		values[length-1-i] = temp;
	}
}",0
ajhz216,1695866431,2,"void ReverseArray(int *values, int length)
{	
	int x;
	if (length%2 == 0) {
		x = length / 2;
	}
	else {
		x = (length / 2) + 1;
	}
	
	for (int i = 0; i < x; i++) {
		int temp = values[i];
		values[i] = values[length-1-i];
		values[length-1-i] = temp;
	}
}",1
ajhz318,1695629908,1,"void ReverseArray(int *values, int length)
{	
	int temp[1] = {0};
	int i;
	int j = 0;

	for (i = 0; i < length; i++) {
		temp[1] = values[i];
		values[i] = values[length - j];
		values[length - j] = temp[1];
		j++;
	}
}",0
ajhz318,1695631412,2,"void ReverseArray(int *values, int length)
{	
	int temp;
	int i;
	int j = 0;

	for (i = 0; i < length/2; i++) {
		temp = values[i];
		printf(""TEMEP: %d\n"",temp);
		values[i] = values[length - 1 - j];
		values[length - 1 - j] = temp;
		j++;
	}
}",0
ajhz318,1695631505,3,"void ReverseArray(int *values, int length)
{	
	int temp;
	int i;
	int j = 0;

	for (i = 0; i < length/2; i++) {
		temp = values[i];
		values[i] = values[length - 1 - j];
		values[length - 1 - j] = temp;
		j++;
	}
}",1
ajhz444,1695778226,1,"void ReverseArray(int* values, int length)
{
	for (int i = 0; i < length / 2; i++) {
		int temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}
}",1
ajhz488,1696217619,1,"void ReverseArray(int *values, int length)
{
	int i, temp, count;
	count = 0;
	for  (i = length; i > length/2; i--) {
		temp = values[0 + count];
		values[0 + count] = values[length-1 - count];
		values[length-1 - count] = temp;
		count++;
	}
}",1
ajin489,1695786422,1,"void ReverseArray(int *values, int length){
    int i = 0;
    int temp;
    for (i = 0; i < length/2; i++){
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
ajoh511,1695702221,1,"void ReverseArray(int *values, int length)
{
	int *start = values; // pointer to the first element
	int *end = values + length -1; // pointer to the last element

	while (start < end) {
		// swap the values pointed to by start and end
		int temp = *start;
		*start = *end;
		*end = temp;

		// move pointers
		start++;
		end--;
	}

}",1
akam256,1696239431,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions i and length - 1 - i
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    
    ReverseArray(values, 7);

    printf(""\nReversed Array: "");
    for (int i = 0; i < 7; i++) {
        printf(""%d "", values[i]);
    }

    return 0;
}",0
akam256,1696239439,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions i and length - 1 - i
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}

",1
akam677,1696214337,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int mula = 0;
    int akhir = length - 1;
    int temp;

    while (mula < akhir)
    {
        // Swap the elements at the mula and akhir indices
        temp = values[mula];
        values[mula] = values[akhir];
        values[akhir] = temp;

        // Move the indices towards the center of the array
        mula++;
        akhir--;
    }
}

int main(void)
{
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

    ReverseArray(values, 7);

    for (int i = 0; i < 7; i++) {
       printf(""%d "", values[i]);
    }

    return 0;
}
",0
aker238,1695606960,1,"void ReverseArray (int *values, int length){
    
    int rvalues[length];
    int i;
    int j=(length-1);
    for (i=0;i<=length;i++){
        rvalues[i] = values[(j-i)];
    }
    for (i=0;i<length;i++){
        values[i] = rvalues[i];
    }
    
}",1
akin699,1695883827,1,"void ReverseArray(int *values, int length)
{
	int i;
	int j;
	int *p; // Assign pointer 1
	int *q; // Assign pointer 2
	int values_i;
	int values_j;
	int half_length;
	half_length = length/2;

	for (i = 0; i < half_length; i++) {
		j = length - i-1;
		// printf(""%d "", j);
		values_i = values[i];
		values_j = values[j];

		p = &values[i];
		*p = values_j;

		q = &values[j];
		*q = values_i;

	}
}",1
akmu146,1696147303,1,"void ReverseArray(int *values, int length) {
    
    for (int i = 0; i < length - 1; i++) {
        
        for (int j = 0; j < length - i - 1; j++) {
            
            if (values[j] < values[j+1]) {
                int temp = values[j];
                values[j] = values[j+1];
                values[j+1] = temp;
            }
            
        }
        
    }
    
}",0
akmu146,1696147843,2,"void ReverseArray(int *values, int length) {
    
    int initial = 0;
    int final = length - 1;

    while (initial < final) {
        int temp = values[initial];
        values[initial] = values[final];
        values[final] = temp;
        initial++;
        final--;
    }
    
}",1
akod059,1696055207,1,"void ReverseArray(int *values, int length)
{
	int index;
	int tempstorage;
	for (index = 0; index < length/2; index++) {
		tempstorage = values[index];
		values[index] = values[length - index - 1];
		values[length - index - 1] = tempstorage;
	}
}",1
akri368,1696233077,1,"void ReverseArray(int *values, int length)
{
	int i:
	int x:
	int y:

	for (i = 0; i < length / 2; i++) {
		x = values[i];
		y = length - (i + 1);
		values[i] = values[y];
		values[y] = x;
	}
}",0
akri368,1696233132,2,"void ReverseArray(int *values, int length)
{
	int i;
	int x;
	int y;

	for (i = 0; i < length / 2; i++) {
		x = values[i];
		y = length - (i + 1);
		values[i] = values[y];
		values[y] = x;
	}
}",1
akwo440,1696163801,1,"void ReverseArray(int *values, int length){
    int initial = 0;
    int final = length - 1;

    while (initial < final) {
        int tempValue = values[initial];
        values[initial] = values[final];
        values[final] = tempValue;
        initial++;
        final--;
    }
}",1
ali867,1696234452,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        temp = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
    for (int i = 0; i < length; i++) {
        printf(""%d "", values[i]);
        return 0
    }
}",0
ali867,1696234467,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
    for (int i = 0; i < length; i++) {
        printf(""%d "", values[i]);
        return 0
    }
}",0
ali867,1696234477,3,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
    for (int i = 0; i < length; i++) {
        printf(""%d "", values[i]);
    }
}",0
ali867,1696234586,4,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
    for (int i = 0; i < length; i++) {
        printf(""%d "", values[i]);
    }
}
int main() 
{
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    int length = 7;

    ReverseArray(values, length);

    return 0;
}",0
ali867,1696234621,5,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
        printf(""%d "", temporary);
    }
}",0
ali867,1696234650,6,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
        printf(""%d "", temporary);
}",0
ali867,1696234764,7,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 1, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
        printf(""%d "", temporary);
}",0
ali867,1696234785,8,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 7, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
        printf(""%d "", temporary);
}",0
ali867,1696234795,9,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = -1, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
        printf(""%d "", temporary);
}",0
ali867,1696234807,10,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 6, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
        printf(""%d "", temporary);
}",0
ali867,1696234851,11,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 1, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
        printf(""%d "", temporary[]);
}",0
ali867,1696234866,12,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 1, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
        printf(""%d "", temporary);
}",0
ali867,1696234976,13,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    for (int i = 0; i < length; i++) 
    {
        printf(""%d "", values[i]);
    }
}
",0
ali867,1696234998,14,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
    
        printf(""%d "", values[i]);
    
}
",0
ali867,1696235015,15,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
    
        printf(""%d "", values);
    
}
",0
ali867,1696235021,16,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) 
    {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
    
    
        printf(""%d "", temporary);
    
}
",0
ali867,1696235062,17,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temporary;
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
    }
}

void PrintArray(int *values, int length) {
    for (int i = 0; i <= length; i++) {
        printf(""%d "", values[i]);
    }
}",1
alum086,1695756250,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;           // Start index of the array
    int end = length - 1;    // End index of the array
    int temp;                // Temporary variable for swapping

    while (start < end) {
        // Swap the elements at the start and end positions
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start index forward and the end index backward
        start++;
        end--;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);

    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    ReverseArray(arr, length);

    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0
alum086,1695757150,2,"#include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);

    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    ReverseArray(arr, length);

    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
void ReverseArray(int *values, int length) {
    int start = 0;           // Start index of the array
    int end = length - 1;    // End index of the array
    int temp;                // Temporary variable for swapping

    while (start < end) {
        // Swap the elements at the start and end positions
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start index forward and the end index backward
        start++;
        end--;
    }
}
",0
alum086,1695761109,3,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap the elements at start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start and end pointers towards each other
        start++;
        end--;
    }
}

int main(void) {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);

    printf(""Original array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    ReverseArray(arr, length);

    printf(""\nReversed array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0
alum086,1695761135,4,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap the elements at start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start and end pointers towards each other
        start++;
        end--;
    }
}

int main(void) {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);

    printf(""Original array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    ReverseArray(arr, length);

    printf(""\nReversed array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0
alum086,1696196178,5,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions i and (length - 1 - i)
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);
    
    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    ReverseArray(arr, length);
    
    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    return 0;
}
",0
alum086,1696196371,6,"#include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);
    
    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    // Call the ReverseArray function to reverse the elements of the array
    for (int i = 0; i < length / 2; i++) {
        int temp = arr[i];
        arr[i] = arr[length - 1 - i];
        arr[length - 1 - i] = temp;
    }
    
    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    return 0;
}
",0
alum086,1696196462,7,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions i and (length - 1 - i)
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);
    
    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    // Call the ReverseArray function to reverse the elements of the array
    ReverseArray(arr, length);
    
    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    return 0;
}
",0
alum086,1696196500,8,"#include <stdio.h>

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);
    
    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    // Call the ReverseArray function to reverse the elements of the array
    ReverseArray(arr, length);
    
    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    return 0;
}
void ReverseArray(int *values, int length) {
    int temp;
    
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions i and (length - 1 - i)
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
",0
alum086,1696196553,9,"#include <stdio.h>

// Declare the ReverseArray function
void ReverseArray(int *values, int length);

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);
    
    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    // Call the ReverseArray function to reverse the elements of the array
    ReverseArray(arr, length);
    
    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    return 0;
}

// Define the ReverseArray function
void ReverseArray(int *values, int length) {
    int temp;
    
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions i and (length - 1 - i)
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
",0
alum086,1696196639,10,"#include <stdio.h>

// Declare the ReverseArray function
void ReverseArray(int *values, int length);

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);
    
    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    // Call the ReverseArray function to reverse the elements of the array
    ReverseArray(arr, length);
    
    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
}

// Define the ReverseArray function
void ReverseArray(int *values, int length) {
    int temp;
    
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions i and (length - 1 - i)
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
    return 0;
}
",0
alum086,1696196650,11,"#include <stdio.h>

// Declare the ReverseArray function
void ReverseArray(int *values, int length);

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);
    
    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    // Call the ReverseArray function to reverse the elements of the array
    ReverseArray(arr, length);
    
    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }
    
    return 0;
}

// Define the ReverseArray function
void ReverseArray(int *values, int length) {
    int temp;
    
    for (int i = 0; i < length / 2; i++) {
        // Swap the elements at positions i and (length - 1 - i)
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
",0
amac853,1695703336,1,"void ReverseArray(int *values, int length)
{
    int newValues[length];
    int i = 0;
    for (i=0; i<length; i++)
    {
        newValues[i] = values[i];
    }
    
    int startI = 0;
    int endI = length-1;
    while (startI < length)
    {
        values [startI] = newValues [endI];
        
        startI++;
        endI--;
        
    }
    
}",1
amag544,1695973735,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    
    int first = 0;
    int final = length - 1;
    int newvalue;

    while (first < final) {
        
        newvalue = values[first];
        values[first] = values[final];
        values[final] = values[first] 
        
        first++;
        final--;
    }
}",0
amag544,1695973867,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    
    int first = 0;
    int final = length - 1;
    int newvalue;

    while (first < final) {
        
        newvalue = values[first];
        values[first] = values[final];
        values[final] = newvalue; 
        
        first++;
        final--;
    }
}",1
amah664,1696207300,1,"void ReverseArray(int *values, int length)
{
	int i; 
	int var; // setting integer variable ""var""

	for (i = 0; i < length/2; i++) { 
		var = values[i]; // setting var to store the value of index number we are going to manipulate in the array value 
		values[i] = values[length - 1 - i];  // storing the max index value in the aray in the reverse index position 
		values[length - 1 - i] = var; // storing our temporary var variable into its new ""reversed"" index position 
	}

	return; 
}",1
amal783,1695860697,1,"void ReverseArray(int* values, int length) {
	int start = 0;
	int end = length - 1;

	while (start < end) {
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}
}",1
amar516,1695695988,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
int i;
int reverse[length];
int x = 0;

for (i = length - 1; i >= 0; i--){
	reverse[x] = values[i];
	x = x + 1;
	}

for (i = 0; i > length; i++){
	values[i] = reverse[i];
	}
}",0
amar516,1695696388,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
int i;
int reverse[length];
int x = 0;

for (i = length - 1; i >= 0; i--){
	reverse[x] = values[i];
	x = x + 1;
	}

for (i = 0; i < length; i++){
	values[i] = reverse[i];
	}
}",1
amar704,1695623087,1,"void ReverseArray(int *values, int length)
{
    int new_array[length];

    for (int i = 0; i < (length/2); i ++) {
        int temporary_value = values[i];
        values[i] = values[(length - i - 1)];
        values[(length - i - 1)] = temporary_value;
    }

}",0
amar704,1695623176,2,"void ReverseArray(int *values, int length)
{
    for (int i = 0; i < (length/2); i ++) {
        int temporary_value = values[i];
        values[i] = values[(length - i - 1)];
        values[(length - i - 1)] = temporary_value;
    }

}",1
amar768,1696131575,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
amat407,1695711510,1,"void ReverseArray(int *values, int length)
{
  int temp;
  int a=0;
  if (length%2==0) {
   for (int i=length-1; i>=length/2; i--) {
       temp=values[a];
       values[a]=values[i];
       values[i]=temp;
       a++;
   }
  } else {
     for (int i=length-1; i>=length/2+1; i--) {
       temp=values[a];
       values[a]=values[i];
       values[i]=temp;
       a++;
     }
    }
}",1
amcm539,1696056813,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
//Need to swap the first and last values of the array, and work in towards the centre of the array.
int i=0;
int temporary = 0;
for (i=0; i< length *0.5; i++){
	//temp integer value for element i
	temporary = values[i];
	
	//now move the end element into element i
	values[i] = values[length-1-i];

	//now put the temporary element back in
	values[length-1-i] = temporary;
}
}",1
amhk647,1695695095,1,"void ReverseArray(int* values, int length) {

	for (int i = 0; i < length / 2; i++) { // swap corresponding larger and smaller element values 
		int temp = values[length - 1 - i]; // store temporary larger element value
		values[length - 1 - i] = values[i]; // assign smaller element value to larger element
		values[i] = temp; // assign temporary value to smaller element
	}
}",1
amok249,1695605295,1,"#include <stdio.h>
void ReverseArray(int *values, int length)
{   int i;
    for (i = 0;i < length; i++) {
        values[i] = length + 1 - values[i];
    }
}",0
amok249,1695606884,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{   
    int i; 
    int j;
    int original[length];
    
    for (i = 0; i < length; i++) {
        original[i] = values[length -1 -i];
    }
    
    for (j = 0 ;j < length; j++) {
         values[j] = original[j];
        }
    
}",1
amur986,1696157796,1,"void ReverseArray(int* values, int length) {
	int i;

	for (i = 0; i < length/2; i++) {
		int a;
		a = values[i];
		int b;
		b = values[length - i-1];
		values[i] = b;
		values[length - i-1] = a;
		
	}
}",1
anig922,1696151612,1,"#include <stdio.h>


void ReverseArray(int* values, int length) {
    
    
int c;

for (c = 0; c < length * 0.5 ; c++) {
   
   
        int a = values[c];
        
        
        values[c] = values[length - c - 1];
        
        
        values[length - c - 1] = a;
        
}

}
   
",1
aosm976,1696241342,1,"// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int currentValue;
	int first = 0;
	int last = length - 1;

	while (first < last)
	{
		currentValue = values[first];
		//printf(""%d lol"", currentValue);
		values[first] = values[last];
		values[last] = currentValue;

		first ++;
		last = last - 1;
	}
	
	
}",1
apan786,1696212198,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;

    while (start < end) {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
apat750,1696139563,1,"void ReverseArray(int *values, int length){
int startofarray= 0;
int endofarray = length-1;


for (; startofarray < endofarray ; startofarray++, endofarray--){
    int temp= values[startofarray];
    values[startofarray]= values[endofarray];
    values[endofarray]= temp;
    
}
}",1
apat824,1695894526,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{

    int x = length - 1;
    int temp;

for(int i =0; i < length/2; i++){
    temp = values[i];
    values[i] = values[x];
    values[x] = temp;
   
    x--;
    
} 
}",1
apen181,1695984213,1,"void ReverseArray(int* values, int length) {
	int first = 0;
	int last = length - 1;
	int i;
	for (i = 0; i < length / 2 ; i++) {
	    
        int x = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = x;
}
}",0
apen181,1695984242,2,"#include <stdio.h>


void ReverseArray(int* values, int length) {
	int first = 0;
	int last = length - 1;
	int i;
	for (i = 0; i < length / 2 ; i++) {
	    
        int x = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = x;
}
}",0
apen181,1695984272,3,"#include <stdio.h>


void ReverseArray(int* values, int length) {
	int i;
	for (i = 0; i < length / 2 ; i++) {
	    
        int x = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = x;
}
}",1
apre444,1696231084,1,"#include <stdio.h>

/*The function, ReverseArray, takes two inputs, an array of integers and 
the elements in the array, then reverses the elements in the array so that the 
array is in reverse order.
Author: Amy Prebble */
void ReverseArray(int *values, int length)
{
        int startnum=0;
        int endnum=length-1;
        /*Setting up a while loop using temporary variables to reverse each element*/
        while (startnum<endnum) {
            int temp=values[startnum];
            values[startnum]=values[endnum];
            values[endnum]=temp;

            /*Incrementing to the centre of the array after each iteration of the loop*/
            startnum++;
            endnum--;
        }
        return 0;
}",0
apre444,1696231091,2,"#include <stdio.h>

/*The function, ReverseArray, takes two inputs, an array of integers and 
the elements in the array, then reverses the elements in the array so that the 
array is in reverse order.
Author: Amy Prebble */
void ReverseArray(int *values, int length)
{
        int startnum=0;
        int endnum=length-1;
        /*Setting up a while loop using temporary variables to reverse each element*/
        while (startnum<endnum) {
            int temp=values[startnum];
            values[startnum]=values[endnum];
            values[endnum]=temp;

            /*Incrementing to the centre of the array after each iteration of the loop*/
            startnum++;
            endnum--;
        }
}",1
apur448,1696102273,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i, j, holdValue;

    for (i = 0; i<length/2; i++) {
        j = length - 1 - i;
        holdValue = values[i];
        values[i] = values[j];
        values[j] = holdValue;
    }
}",1
aqu284,1696142758,1,"#include <stdio.h>

void ReverseArray(int array[], int length) {
    int start;
    int end;

    for(int i = 0; i < length/2; i++){
        start = array[i];
        end = array[length - i -1];
        array[i] = end;
        array[length - i -1] = start;
    }
}",1
arah160,1696230290,1,"#include <stdio.h>
/*ReverseArray is a function that takes a given array and reverses the order of its elements*/


void ReverseArray(int *values, int length) {
    for (int i=0; i<(length/2); i++){
        int original = values[i];
        values[i]=values[(length-1)-i];
        values[(length-1)-i] = original;
    }
}",1
arus530,1695618813,1,"void ReverseArray(int values[], int length)
{
    int count = length-1;
    int temp;

    for (int i = 0; i < length/2; i++) {
        temp = values[i];
        values[i] = values[count];
        values[count] = temp;
        count--;
    }
}",1
aryu462,1696232250,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    for (int start = 0; start < length 2; start ++) {
        int end = length -1 - start; 
        
    // swapping elements at the start and end positions
    int temp = values[start];
    values[start] = values[end]; 
    values[end] = temp; 
    }
}
int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int lenth = sizeof(arr) / sizeof(arra[0]); 
    
    ReverseArray(arr, length); 
    
    for (int i = 0; i < length; i++) {
        printf(""%d"", arr[i]);
    }
    return 0;
}
",0
aryu462,1696232421,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {\
int temp;
    for (int i= 0; i < length 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[elngth - 1 -i] = temp;
    }
}
int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int lenth = sizeof(arr) / sizeof(arra[0]); 
    
    ReverseArray(arr, length); 
    
    for (int i = 0; i < length; i++) {
        printf(""%d"", arr[i]);
    }
    return 0;
}
",0
aryu462,1696232552,3,"#include <stdio.h>

void ReverseArray(int *values, int length) {\
int temp;
    for (int i= 0; i < length 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 -i] = temp;
    }
}
int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arra[0]); 
    
    ReverseArray(arr, length); 
    
    for (int i = 0; i < length; i++) {
        printf(""%d"", arr[i]);
    }
    return 0;
}
",0
aryu462,1696232844,4,"#include <stdio.h>

void ReverseArray(int *values, int length) {
int temp;
    for (int i= 0; i < length 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 -i] = temp;
    }
}
int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arra[0]); 
    
    ReverseArray(arr, length); 
    
    for (int i = 0; i < length; i++) {
        printf(""%d"", arr[i]);
    }
    return 0;
}
",0
aryu462,1696233224,5,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
int temp;
    for (int i= 0; i < length 2; i++) 
    {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 -i] = temp;
    }
}
int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arra[0]); 
    
    ReverseArray(arr, length); 
    
    for (int i = 0; i < length; i++) {
        printf(""%d"", arr[i]);
    }
    return 0;
}
",0
asaa285,1695912436,1,"// Online C compiler to run C program online
#include <stdio.h>

void ReverseArray(int *values, int length) {
    // Write C code here
    for (int j = 0; j < length; j++){
    for (int i = 0; i < length-1; i++)
    {
        int a = values[i];
        values[i] = values[i+1];
        values[i+1] = a;
    }
    }

}",0
asaa285,1695912483,2,"// Online C compiler to run C program online
#include <stdio.h>

void ReverseArray(int *values, int length) {
    // Write C code here
    for (int j = 0; j < length; j++){
    for (int i = 0; i < length-1-j; i++)
    {
        int a = values[i];
        values[i] = values[i+1];
        values[i+1] = a;
    }
    }

}",1
asah845,1695717313,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int counter, i;
	int arr[100];


	for (i = 0; i < length; i++) {
		counter = length - 1 - i;
		arr[i] = values[counter];
		
	}

	for (i = 0; i < length; i++) {
        	values[i] = arr[i];
    }

}
",1
ashe298,1695692084,1,"void ReverseArray(int *values, int length)
{
for (int i = 0; i < length; i++) {
	   printf(""%d "", values[length - i]);
	}
}
",0
ashe298,1695692954,2,"void ReverseArray(int *values, int length)
{
for (int i = 1; i <= length; i++) {
	   printf(""%d "", values[length - i]);
	}
}

",0
ashe298,1696218541,3,"void ReverseArray(int *values, int length)
{
    int i;
    for (int i = 0; i <= length / 2; i++) {
        
        int val;
        values[length - i - 1] = val;
        
	}
}

",0
ashe298,1696229548,4,"void ReverseArray(int *values, int length)
{
    int i;
    for (int i = 0; i <= length/2; i++) {
        int val = values[i];
        values[i] = values[length-1-i];
        values[length-1-i]=val;
	}
}
",0
ashe298,1696229679,5,"void ReverseArray(int *values, int length)
{
    for (int i = 0; i <= length/2; i++) {
        int val = values[i];
        values[i] = values[length-1-i];
        values[length-1-i]=val;
	}
}
",0
ashe298,1696230074,6,"void ReverseArray(int *values, int length)
{
    for (int i = 0; i <= length/2; i++) {
        int temp = values[i];
        values[i] = values[length-1-i];
        values[length-1-i]=temp;
	}
}
",0
ashe298,1696230316,7,"void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length/2; i++) {
        int temp = values[i];
        values[i] = values[length-1-i];
        values[length-1-i]=temp;
	}
}
",1
ashi565,1695604081,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;

    while (start < end) {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        
        start++;
        end--;
    }
}

int main() {
    int myArray[] = {1, 2, 3, 4, 5};
    int length = sizeof(myArray) / sizeof(myArray[0]);

    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", myArray[i]);
    }
    printf(""\n"");

    ReverseArray(myArray, length);

    printf(""Reversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", myArray[i]);
    }
    printf(""\n"");

    return 0;
}
",0
ashi565,1695604318,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    if (values == NULL || length <= 1) {
        
        return;
    }

    int start = 0;            // Index of the first element
    int end = length - 1;     // Index of the last element

    while (start < end) {
        
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        
        start++;
        end--;
    }
}

return 0;

}",0
ashi565,1695693921,3,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    if (values == NULL || length <= 1) {
        
        return;
    }

    int start = 0;            
    int end = length - 1;    
    while (start < end) {
        
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        
        start++;
        end--;
    }
}",1
asim819,1695883825,1,"void ReverseArray(int *values, int length)
{
	
	//Initialise variables for lower element, upper element and temp
	int lower = 0;
	int upper = length - 1;
	int temp;

	while (lower < upper) {
		
		//Swap lower val and upper val
		temp = values[upper];
		values[upper] = values[lower];
		values[lower] = temp;

		//Increment lower and upper towards center of array
		lower++;
		upper--;

	}

}",1
aski294,1695719811,1,"int ReverseArray(int values[64], int length)
{
	int result[64], x = 0;

	for (int i = length-1; i >= 0; i--) {
		result[x] = values[i];
		x++;
	}

	for (int i = 0; i < 7; i++) {
		values[i] = result[i];
	}
}",0
aski294,1695720840,2,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
	int result[16] = { 0 }, x = 0;

	for (int i = length - 1; i >= 0; i--) {
		result[x] = values[i];
		x++;
	}

	for (int i = 0; i < length; i++) {
		values[i] = result[i];
	}

	return 0;
}
",1
asmi629,1696223241,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    while (start < end) {
        int x = values[start];
        values[start] = values[end];
        values[end] = x;
        start++;
        end--;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    int length = 7;

    ReverseArray(values, length);

    for (int i = 0; i < length; i++) {
        printf(""%d "", values[i]);
    }

    return 0;
}",0
asmi629,1696240328,2,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    while (start < end) {
        int x = values[start];
        values[start] = values[end];
        values[end] = x;
        start++;
        end--;
    }
}

",1
atay777,1696055895,1,"void ReverseArray(int *values, int length)
{
	int Reversed[length], i;
	for (i = 0; i < length; i++)
	{
		Reversed[length-i-1]=values[i];
	}
	for (i = 0; i < length; i++)
	{
		values[i]=Reversed[i];
	}
	
}",1
atee059,1695604085,1,"void ReverseArray(int* values, int length) {

int newarray[length];
int i;
int j = 0;

for (i = length - 1; i >= 0; i--) {
newarray[j] = values[i];
j++;
}

for (int i = 0; i < length; i++) {
values[i] = newarray[i];
}

}",1
atho643,1695856938,1,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int front = 0;
    int back = length-1; 
        
    for (int i = 0; i<length/2; i++) {
        
        int set = values[front];
        values[front] = values[back];
        values[back] = set;
        front++;
        back--;
        
    }
    
    return values;

}",0
atho643,1695857067,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int front = 0;
    int back = length-1; 
        
    for (int i = 0; i<length/2; i++) {
        
        int set = values[front];
        values[front] = values[back];
        values[back] = set;
        front++;
        back--;
        
    }
    

}",1
athu157,1695698115,1,"void ReverseArray(int* values, int length)
{
	int start = 0;
	int end = length - 1;
	int x;

	while (start < end) {
		x = values[start];
		values[start] = values[end];
		values[end] = x;
		start++;
		end--;
	}
}",1
atup175,1696234358,1,"void ReverseArray(int *values, int length){
    int start = 0;
    int stop = length - 1;
    
    while(start < stop){
        int temp = values[start];
        values[start] = values[stop];
        values[stop] = temp;
        start++;
        stop--;
    }
}",1
avan381,1695979323,1,"void ReverseArray(int values[], int length)
{
    int cake[length];
    int k = 0;
    
    for (int i = (length - 1); i >= 0; i--){
        cake[k] = values[i];
        k++;
    }
    
    k = 0;
    for (int i = 0; i < length; i++){
        values[k] = cake[i];
        k++;
    }
    
}",1
awal599,1695869500,1,"void ReverseArray(int *values, int length)
{
   int x;
   int i=0;
    for (i = 0; i < length/2; i++){
        x=values[i];
       values[i]=values[length-1-i];
       values[length-i-1]=x;
}

}",1
awar747,1696233213,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;

    while (start < end) {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
awil907,1695691276,1,"#include <stdio.h>
int ReverseArray(int *values, int length) {
    int *starterblock = values;
    int *enderblock = (values+length)-1;
    int originalplace;
// While loop using pointers to iterate through and update values from left side to right side
    while (starterblock < enderblock) {
        originalplace = *starterblock; // derefrerence the starter value
        *starterblock = *enderblock; // Swap the start pointer to be the value at the end
        *enderblock = originalplace; // Swap the ender to be the start value to reverse it.
        starterblock += 1; // Move the start one up while reducing the ender point to iterate through everything
        enderblock -= 1;
    };

    return 0;
}",1
awri757,1695698238,1,"void ReverseArray(int *values, int length)
{
    int left = 0;
    int right = length - 1;
    int temp;

    while (left < right) {
        temp = values[left];
        values[left] = values[right];
        values[right] = temp;

        left++;
        right--;
    }
}",1
ayan607,1696131830,1,"void ReverseArray(int *values, int length)
{	int pairs = length / 2;
	int i;
	int tempNum;

	for (i = 0; i <= pairs; i++ ){
		tempNum = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = tempNum;
	}

}
",0
ayan607,1696132164,2,"int main(void)
{
	int values[7] = {2, 1, 1, 2, 2, 1, 2};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}",0
ayan607,1696132170,3,"
{
	int values[7] = {2, 1, 1, 2, 2, 1, 2};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}",0
ayan607,1696132192,4,"void ReverseArray(int *values, int length)
{	int pairs = (length - 1) / 2;
	int i;
	int tempNum;

	for (i = 0; i <= pairs; i++ ){
		tempNum = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = tempNum;
	}

}",1
ayou303,1695695584,1,"#include <stdio.h>

void  ReverseArray(int array[], int n) {
	int j = 0;
	int result[n];
	for (int i = n-1; i >= 0; i--) {
		result[j] = array[i];
		j++;
	}
    for (int i = 0; i < n; i++) {
        array[i] = result[i];
    }
}",1
ayou533,1696190742,1,"void ReverseArray(int *values, int length) {
    for (int i = 0; i < length / 2; i++) {
        int temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
ayua214,1696227878,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);

    printf(""Original array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    ReverseArray(arr, length);

    printf(""\nReversed array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0
ayua214,1696227888,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}",1
bate521,1696223768,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;
    
    while (start < end) {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        end--;
        start++;
    }
}
",1
bcar662,1696085056,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int *p;
	int pos;
	int value;
	int RevValues[100];

	for (int i = 0; i < length; i++) {
		pos = (length - i - 1);
		value = values[pos];
		RevValues[i] = value;
	}
	for (int i = 0; i < length; i++) {
		values[i] = RevValues[i];
	}
}",0
bcar662,1696085115,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int pos;
	int value;
	int RevValues[100];

	for (int i = 0; i < length; i++) {
		pos = (length - i - 1);
		value = values[pos];
		RevValues[i] = value;
	}
	for (int i = 0; i < length; i++) {
		values[i] = RevValues[i];
	}
}",1
bcha389,1695715977,1,"void ReverseArray(int *values, int length)
{
	int tempvalues[100];
	for (int i = 0; i < length; i++) {
		tempvalues[i] = values[i];

	}
	for (int i = 0; i < length; i++) {
		values[i] = tempvalues[length - i - 1];

	}

}",1
bcha726,1695614354,1,"#include <stdio.h>

void ReverseArray(int *values, int length){

int i, x;

for (i = 0; i < length/2; i++){
    x = values[i];
    values[i] = values[length - 1 - i];
    values[length - 1 - i] = x;
}

}",1
bcos422,1695635263,1,"void ReverseArray(int* values, int length)
{
	int i;
	for (i = 0; i < length; i++) {
		values[i] = length-i;
	}
}",0
bcos422,1695636791,2,"void ReverseArray(int* values, int length)
{
	int i;
	int bruh[7] = { 0 };
	for (i = 0; i < 7; i++) {
		bruh[i] = values[i];
	}
	for (i = 0; i < 7; i++) {
		values[i] = bruh[6-i];
	}
}",0
bcos422,1695637276,3,"void ReverseArray(int* values, int length)
{
	int i;
	int bruh[100] = { 0 };
	for (i = 0; i < length; i++) {
		bruh[i] = values[i];
	}
	for (i = 0; i < length; i++) {
		values[i] = bruh[length-1-i];
	}
}",1
bcru157,1695693576,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int i;
	int temp;
	for (i = 0; i < length / 2; i++) {
	    temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}

}",1
besk864,1695940657,1,"void ReverseArray(int *values, int length) {
        
    int y[length];
    int x = (length-1);
    
    for (int i = 0; i <= x; i++) {
        y[i] = values[i];
    }
    
    for (int i = 0; i <= x; i++) {
        values[i] = y[x - i];
    }
    
    }",1
bfis965,1695719868,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int hold;
    for (int i = 0; i < length / 2; i++) {
        hold = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = hold;
    }
}
",1
bfla774,1695880797,1,"void ReverseArray(int* values, int length)
{
	int p;
	int i;
	for (i = 0; i < (length)/2; i++) {
		p = values[i];
		values[i] = values[length -1 -i];
		values[length - i- 1] = p;
		
	}
	

} ",1
bgib630,1695792724,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;

	while (start < end)	
	{
		int storeValue = values[start];
		values[start] = values[end];
		values[end] = storeValue;

		start++;
		end--;
	}
}",1
bgru726,1695949968,1,"void ReverseArray(int values[], int length)
{
	for (int i = 0; i < length/2; i++) {
		//assign temp variables in order to swap values without losing data
		int tempBot = values[i];
		int tempTop = values[length - i - 1];
		//swap the values, assigning them as the temps.
		values[i] = tempTop;
		values[length - i - 1] = tempBot;
	}
}",1
bguo360,1695614628,1,"void ReverseArray(int *values, int length)
{
	int temp[100], i;;
	for (i = 0; i < length; i++) {
		temp[i] = values[i];
	}
	for (i = 0; i < length; i++) {
		values[i] = temp[length - i - 1];
	}
}",1
bhua898,1695602928,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;

	while (start < length / 2) {
		int startValue = values[start];
		values[start] = values[end];
		values[end] = startValue;

		start++;
		end--;
	}
}",1
bjin223,1696042501,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
for (int i=length-1; i>=0; i--){
    printf(""%d "",values[i]);
}
}


",0
bjin223,1696046575,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int start=0;
    int end=length-1;
for (;start<=end; start++,end--){
    int temp=values[start];
    values[start]=values[end];
    values[end]=temp;
}
}


",1
bjin223,1696049660,3,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
void ReverseArray(int *values, int length)
{
    int temp[length];

for (int i=0; i<=length-1; i++){
    temp[i]=values[i];
}
for (int i=0; i<=length-1; i++){
    values[i]=temp[length-1-i];
    }
}

",1
bjon836,1695693319,1,"#include <stdio.h>

void ReverseArray(int array[], length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        int temp = array[start];
        array[start] = array[end];
        array[end] = temp;
        
        
    start++;
    end--;
    }
}",0
bjon836,1695693648,2,"#include <stdio.h>

void ReverseArray(int values[], int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        int temp = values[start];
        values[start] = array[end];
        values[end] = temp;
        
    start++;
    end--;
    }
}",0
bjon836,1695693667,3,"#include <stdio.h>

void ReverseArray(int values[], int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
    start++;
    end--;
    }
}",1
bkho028,1695692888,1,"#include <stdio.h>

void ReverseArray(int values[], int length)
{
    int reversed[length];

    for (int i = length - 1, j = 0; i >= 0; i--, j++)
    {
        reversed[j] = values[i];
    }
    for (int i = 0; i < length; i++)
    {
        values[i] = reversed[i];
    }
}
",1
blar030,1695768880,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int startpos = 0;
    int i =0;
    int temparray [length];
    
    while (i < length) 
        {
            temparray[i] = values[length-1-i];
            i++;
        }
    
    
    i=0;
    while (i < length)
        {
            values[i] = temparray[i];
            i++;
        }
    
    
    }

",0
blar030,1695769735,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i =0;
    int temparray [length];
    
    while (i < length) 
        {
            temparray[i] = values[length-1-i];
            i++;
        }
    
    
    i=0;
    while (i < length)
        {
            values[i] = temparray[i];
            i++;
        }
    
    
    }
",1
bli482,1695639720,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int record[length];
	int j;
	for (int j = 0; j < 7; j++) {
	    record[j] = values[j];
	}
	int i;
	for (i = 0; i < 7; i++) {
		values[i] = record[length - 1 - i];
	}

}
",0
bli482,1695700716,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int record[length];
	int i;

	for (i = 0; i < 7; i++) {
		record[i] = values[i];
	}

	for (i = 0; i < 7; i++) {
		values[i] = record[length - 1 - i];
	}

}
",0
bli482,1695700774,3,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int record[length];
	int i;

	for (i = 0; i < length; i++) {
		record[i] = values[i];
	}

	for (i = 0; i < length; i++) {
		values[i] = record[length - 1 - i];
	}

}
",1
bli775,1695647933,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
// Author: bei
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;
	int temp;

	while (start < end) {
		temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}

}",1
bli775,1695648046,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
// Author: bei
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int temp;
	for (int i = 0; i < length / 2; i++) {
		temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
	}
}",1
blin888,1696029075,1,"void ReverseArray(int *values, int length)
{
	int i;
	int temporary;
	for (i = 0; i < length; i++) {
		temporary = values[i];
		values[i] = values [length - i - 1];
		values[length -i - 1] = temporary;
	}
}",0
blin888,1696029129,2,"void ReverseArray(int *values, int length)
{
	int i;
	int temporary;
	for (i = 0; i < length / 2; i++) {
		temporary = values[i];
		values[i] = values [length - i - 1];
		values[length -i - 1] = temporary;
	}
}",1
bmac148,1695862142,1,"void ReverseArray(int *values, int length)
{
 int first = 0;
 int last = length - 1;
 int reversed;
 
 while (first < last) {
     reversed = values[first];
	 values[first] = values[last];
	 values[last] = reversed;
	 
	 first++;
	 last--;
	}
}",1
bora417,1695790751,1,"void ReverseArray(int *values, int length)
{

// Create temporary array
int temp[100];
int i;

	for (i = (length - 1); i >= 0; i--) {
    temp[(length - 1) - i] = values[i]; // reverses the order
	}
    for (i = 0; i < length; i++) {
        values[i] = temp[i];
    }
}",1
bpak212,1696217976,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    for (int i = 0; i < length / 2; i++) 
    {
        // make sure to swap the values at positions (i) and (length - i - 1)
        int temp = values[i];
        values[i] = values[length - i - 1];
        temp = values[length - i - 1];
    }
}
",0
bpak212,1696218027,2,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    for (int i = 0; i < length / 2; i++) 
    {
        // make sure to swap the values at positions (i) and (length - i - 1)
        int temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}
",1
bpat907,1695954702,1,"void ReverseArray(int *values, int length)
{
	int i;
	int temp;

	for (i = 0; i < (0.5*length); i++) {
		temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}
	return;
}",1
bril841,1696217941,1,"#include <stdio.h>

void ReverseArray(int values, int length) 
{
    int holder;

    for (i = 0; i < length/2; i++) 
    {
        holder = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = holder; 
    }
}",0
bril841,1696217997,2,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int holder;
    int i;
    
    for (i = 0; i < length/2; i++) 
    {
        holder = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = holder; 
    }
}",1
bsil719,1695773373,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int temp;
    for (int i = 0; i < length; i++){
        if (i < (length/2)){
            temp = values [i];
            values[i] = values[length - (i+1)];
            values[length - (i+1)] = temp;
        }
    }

}
",1
bvau704,1695774374,1,"void ReverseArray(int *values, int length)
{
    int j = 0;
    int temp;

    for(int i = length - 1; i >= length / 2; i--) {
        // Swap values[i] and values[j]
        temp = values[i];
        values[i] = values[j];
        values[j] = temp;
        
        j = j + 1;
    }
}
",1
bwil199,1695686205,1,"#include <stdio.h>

int ReverseArray(int *values[], int length)
{
    int count = 0;
    int array = *values[];
    
    for (int i = 0; i < (length - 5); i++) {
        
        int currentvalue = array[i];
        array[i] = array[length - i - 1];
        array[length - i - 1] = currentvalue;
    }

    return values;
}",0
bwil199,1695686976,2,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
    int count = 0;
    int array[99];
    
    for (int i = 0; i < (length - 5); i++) {
        
        array[i] = values[i];
        int currentvalue = array[i];
        array[i] = array[length - i - 1];
        array[length - i - 1] = currentvalue;
    }

    return array[length];
}",0
bwil199,1695686989,3,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
    int array[99];
    
    for (int i = 0; i < (length - 5); i++) {
        
        array[i] = values[i];
        int currentvalue = array[i];
        array[i] = array[length - i - 1];
        array[length - i - 1] = currentvalue;
    }

    return array[length];
}",0
bwil199,1695687114,4,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
    int array[99];
    
    for (int i = 0; i < (length - 5); i++) {
        
        array[i] = values[i];
        int currentvalue_1 = array[i];
        int currentvalue_2 = array[length - i - 1];
        array[length - i - 1] = currentvalue_1;
        array[i] = currentvalue_2;
    }

    return array[length];
}",0
bwil199,1695687294,5,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
    
    
    for (int i = 0; i < (length - 5); i++) {
        
        int currentvalue_1 = values[i];
        int currentvalue_2 = values[length - i - 1];
        values[length - i - 1] = currentvalue_1;
        values[i] = currentvalue_2;
    }

    return *values;
}",0
bwil199,1695687409,6,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
    
    
    for (int i = 0; i < (((double)length / 2) - 1); i++) {
        
        int currentvalue_1 = values[i];
        int currentvalue_2 = values[length - i - 1];
        values[length - i - 1] = currentvalue_1;
        values[i] = currentvalue_2;
    }

    return *values;
}",0
bwil199,1695687449,7,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
    
    
    for (int i = 0; i < (((double)length / 2)); i++) {
        
        int currentvalue_1 = values[i];
        int currentvalue_2 = values[length - i - 1];
        values[length - i - 1] = currentvalue_1;
        values[i] = currentvalue_2;
    }

    return *values;
}",1
bwis161,1695626421,1,"void ReverseArray(int* values, int length)
{
	int *p1, *p2, temp;
	p1 = values; // point to first element of array
	p2 = values + (length - 1); // point to last element of array

	while (p1 < p2 ) { // loop to swap elements
		temp = *p1;
		*p1 = *p2;
		*p2 = temp;
		p1++;
		p2--;
	}
}",1
bwoo348,1696039606,1,"void ReverseArray(int *values, int el) {
    int spare[el];
    for (int a = 0; a < el; a++) { 
        spare[a] = values[a];
    }
    int count = el/2;
    for (int i = 1; i < count; i++) { 
        values[i-1] = spare[el-i];
        values[el-i] = spare[i-1];
    }
}",0
bwoo348,1696039790,2,"void ReverseArray(int *values, int el) {
    int spare[el];
    for (int a = 0; a < el; a++) { 
        spare[a] = values[a];
    }
    int count = el/2 +1;
    for (int i = 1; i < count; i++) { 
        values[i-1] = spare[el-i];
        values[el-i] = spare[i-1];
    }
}",1
byiu331,1695764133,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int i;
	int temp;
	for (i = 0; i < (length/2); i++) {
		temp = values[length - (i + 1)];
		values[length - (i + 1)] = values[i];
		values[i] = temp;
	}
}",1
byul423,1695702027,1,"void ReverseArray(int* values, int length)
{
	int current;
	for (int i = 0; i < length / 2; i++) {
		int* first = values + i;
		int* last = values + length - 1 - i;
		current = *first;
		*first = *last;
		*last = current;
	}
}",1
cada577,1695877671,1,"
#include <stdio.h>

void ReverseArray(int *values, int length)

{

    int temp, i, j;

    for (i = 0, j = length - 1; i< length / 2 && j>-1; i++, j--) {

        temp = values[i];
        values[i] = values[j];
        values[j] = temp;
    }
}",1
cana544,1695715780,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length) {
    int i;
    int copyArray[length];
    for (i = 0; i < length; i++) {
        copyArray[i] = values[i];
    }
    for (i = 0; i < length; i++) {
        values[i] = copyArray[length - 1 - i];
    }

}
",1
cang688,1695898773,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int startPos = 0;
    int endPos = length - 1;

    //iterate while loop to swap position of start and end elements in array
    while (startPos < endPos) {
        int endVal = values[startPos];
        values[startPos] = values[endPos];
        values[endPos] = endVal;
        
        //start and end parameters are brought closer together, hence the next ""start"" and ""end"" are swapped
        startPos++;
        endPos--;
    }
}",1
cbee072,1695692406,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{ 
    int i;
    int j;
    int StoreArray[length];
    for (i = 0; i < length; i++) {
        StoreArray[i] = values[i];
    }
    
    for (i = 0; i < length; i++) {
        values[length - (i+1)] = StoreArray[i];
    }
    
}
",0
cbee072,1695692475,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{ 
    int i;
    int StoreArray[length];
    for (i = 0; i < length; i++) {
        StoreArray[i] = values[i];
    }
    
    for (i = 0; i < length; i++) {
        values[length - (i+1)] = StoreArray[i];
    }
    
}
",1
cben375,1696048840,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
	for (int start = 0, end = length - 1; start < end; start++, end--) {
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;
	}
}",1
cbro223,1695613729,1,"void ReverseArray(int *values, int length)
{
	for (int i = 0; i<length/2; i++) {
		int tmp = values[i];
		int endSwap = length - 1 -i;
		values[i] = values[endSwap];
		values[endSwap] = tmp;
	}
}",1
cbro435,1695765044,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{   int last = length-1;
  	for (int i = 0; i < length-1-i; i++) {
  	   int array= values[i];
  	  values[i]=values[last];
  	  values[last] = array;
  	  last--;
  	}
}",1
cbro989,1695694922,1,"void ReverseArray(int *values, int length)
{
    int start = 0;
    int end = length - 1;
    int EmptVar;
    /* idea of using start++ and end-- in a while loop I got from https://www.youtube.com/watch?v=qUPXsPtWGoY */
    while(start<end)
    { /* idea of swapping the start and end of the array using pointers came from https://www.youtube.com/watch?v=2GDiXG5RfNE at the 14-15 min mark */
    EmptVar = values[start];
    values[start] = values [end];
    values[end] = EmptVar;
    start++;
    end--;
    }
}",1
cbur703,1695890453,1,"void ReverseArray(int *values, int length)
{
   int i, temp;
   for (i=0; i < length/2; i++) {
       temp = values[i];
       values[i] = values[length - i - 1];
       values[length - i - 1] = temp;
   }
}",1
ccha663,1695634760,1,"void ReverseArray(int *values, int length) {
    int s = 0;
    int e = length - 1;
    
    while (s < e) {
        // Swap the elements at 'start' and 'end'
        int temp = values[s];
        values[s] = values[e];
        values[e] = temp;
        
        // Move the pointers towards each other
        s++;
        e--;
    }
}",1
ccha854,1695976739,1,"void ReverseArray(int *values, int length)
{
  for (int i = 0; i < length / 2; i++)
    {
      int temp = values[i];
      values[i] = values[length - i - 1];
      values[length - i - 1] = temp;
    }
}",1
cche441,1695606923,1,"void ReverseArray(int *values, int length)
{
    int *p, i, temp;
    
    for (i = 0; i < length/2; i++)
    {
        //Define p as the location of data.
        p = &values[length-1-i];
        //Temporary variable to store data.
        temp = values[i];
        values[i] = *p;
        values[length-1-i] = temp;

    }
}",1
cche873,1695803659,1,"void ReverseArray(int* values, int length)
{
    int* start = values;
    int* end = values + length - 1;

    while (start < end) {
        int temp = *start;
        *start = *end;
        *end = temp;

        start++;
        end--;
    }
}
",1
cdel568,1695695409,1,"void ReverseArray(int *values, int length)
{
	int i;
	int subarray[length];
	for (i = 0; i < length; i++) {
		subarray[i] = values[length - 1 - i];
	}
	for (i = 0; i < length; i++) {
		values[i] = subarray[i];
	}

}",1
cdin152,1695987980,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
	void ReverseArray(int* values, int length)
	{
		int i, j, hold;
		int* p1, * p2;

		for (i = 0, j = length - 1; i < j; i++, j--) {
			p1 = &values[i];
			p2 = &values[j];
			hold = *p1;
			*p1 = *p2;
			*p2 = hold;
		}
	}",1
cdin268,1695625689,1,"void ReverseArray(int *values, int length) {
    int count = 0;
    int i;
    int array[100] = {0};
    
    for(i = 0; i < length; i++) { 
        array[i] = values[i]; 
    }
    
    for(i = length-1; i>=0; i--) {
        values[i] = array[count];
        count++;
    }
}",1
cdsi208,1695972465,1,"void ReverseArray(int *values, int length){
    
    int arr[length];
    int i;
    for (i = 0; i < length; i++)
    {
        arr[i] = values[length - i - 1];
    }
    
    int j;
    for (j = 0; j < length; j++)
    {
        values[j] = arr[j];
    }
}",1
cgal160,1696149574,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int temp;
	for (int i = 0; i <= (length - 1)/2; i++) {
		temp = values[i];
		values[i] = values[length - (i + 1)];
		values[length - (i + 1)] = temp;
	}
}",1
cgaz516,1695611796,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	// pointer1 points to the 1st element, while 
	// pointer 2 points to last element
	int *pointer1 = &values[0];
	int *pointer2 = &values[length - 1];

	// Addreses of variables in an array increase so we can do it 
	// until pointer 1 index overtakes pointer 2
	while (pointer1 < pointer2)
	{
		// declare a temporary 'x' variable that will 
		// store variables in ascending order
		int x = *pointer1;
		*pointer1 = *pointer2;
		*pointer2 = x;
		pointer1 = pointer1 + 1;
		pointer2 = pointer2 - 1;
	}
}",1
chua804,1696210400,1,"#include <stdio.h>


void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        
        start++;
        end--;
    }
}",1
civa625,1695778270,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int j = 0;
    for (i = length; i >= 0; i--) {
        values[j] = i;
        j++;
    }
}",0
civa625,1696145550,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    // *values = values[]
    int *p1 = values; // Set a pointer to the first address of the array.
    int *p2 = values + length - 1; // Set a pointer to the last address of the array.
    
    while (p1 < p2) {
        int temp = *p1;
        *p1 = *p2;
        *p2 = temp;
        p1++; // Move the index one to the right.
        p2--; // Move the index one to the left.
    }
}",1
cjun818,1696222905,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int start;
	int finish;
	int x;

	start = 0;
	finish = length - 1;

	while (start < finish)
	{
		x = values[start];
		values[start] = values[finish];
		values[finish] = x;

		start++;
		finish--;
	}
}",1
clee482,1696166134,1,"void ReverseArray(int *values, int length)
{
    int j,k;
    int copyvalues[length];
    int Numlength = length-1;
    
    
    for(j = 0; j < length; j++)
    {
        copyvalues[j] = values[j];
    }
    
    for(k=0; k < length; k++)
    {
        values[k]=copyvalues[Numlength];
        Numlength--;
    }
}",1
cleu746,1695868510,1,"void ReverseArray(int *values, int length)
{
    int copyValues[100];
    int i;
    int j = length - 1;
    
    for (i = 0; i < length; i++) {
        copyValues[i] = values[j];
        j--;
    }
    
    for (i = 0; i < length; i++) {
        values[i] = copyValues[i];
    }
    
}",1
cli942,1696240973,1,"int ReverseArray(int values[], int length) 
   int i;
   int value[];
   
   for (i=1;i<length;i++)
   value[i]=values[length-i+1];
   
   return value[];",0
clob269,1695730504,1,"void ReverseArray(int *values, int length) {
	
	int temp;

	for (int i = 0; i <= (length / 2); i++) {
		temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
		
		
	}
}
",0
clob269,1695731127,2,"void ReverseArray(int *values, int length) {
	
	int temp;
	if (length % 2 == 1) {
		for (int i = 0; i <= (length / 2); i++) {
			temp = values[i];
			values[i] = values[length - 1 - i];
			values[length - 1 - i] = temp;
		}
		
	} else {
		for (int i = 0; i <= (length / 2) - 1; i++) {
			temp = values[i];
			values[i] = values[length - 1 - i];
			values[length - 1 - i] = temp;
		}
	}
}",1
cmac377,1696044582,1,"#include <stdio.h>

void ReverseArray (int *values, int length){
    
    int ReversedArray[length];
    
    for (int k = 0; k < length; k++){
        ReversedArray[k] = 0;
    }
    
    int element = length - 1;
    
    for (int i = 0; i < length; i++){
        
        
        ReversedArray[i] = values[element];
        element = element - 1;
    }
    
    
    for (int j; j < length; j++){
        
        values[j] = ReversedArray[j];
    }
    
}",0
cmac377,1696044999,2,"#include <stdio.h>

void ReverseArray (int *values, int length){
    
    int ReversedArray[length];
    
    for (int k = 0; k < length; k++){
        ReversedArray[k] = 0;
    }
    
    int element = length - 1;
    
     for (int i = 0; i < length; i++){
        
        
        ReversedArray[i] = values[element];
        element = element - 1;
    }
    
    
    for (int j; j < length; j++){
        
        values[j] = ReversedArray[j];
    }
    
}",0
cmac377,1696045410,3,"#include <stdio.h>

void ReverseArray (int *values, int length){
    
    int ReversedArray[length];
    
    for (int k = 0; k < length; k++){
        ReversedArray[k] = 0;
    }
    
    int element = length - 1;
    
     for (int i = 0; i < length; i++){
        
        
        ReversedArray[i] = values[element];
        element = element - 1;
    }
    
    
    for (int j = 0; j < length; j++){
        
        values[j] = ReversedArray[j];
    }
    
}",1
cmad989,1695770078,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i = 0;
	int store;
	for (i = 0 ; i < length/2; i++) {
		store= values[i] ;
		values[i] = values[length - 1 - i];
		values[length- 1 - i]= store;
	}

}",1
cmas527,1695873383,1,"void ReverseArray(int *values, int length)
{
int i;
int f;
int random;
for(i=0,f=length-1;i<length/2, f>length/2;i++,f--)
{
random=values[i];
values[i]=values[f];
values[f]=random;
}
}",0
cmas527,1695873494,2,"void ReverseArray(int *values, int length)
{
int i;
int f;
int random;
for(i=0,f=length-1;i<length/2 && f>length/2;i++,f--)
{
random=values[i];
values[i]=values[f];
values[f]=random;
}
}",0
cmas527,1695873907,3,"void ReverseArray(int *values, int length)
{
int i;
int f;
int random;
for(i=0,f=length-1;i<f;i++,f--)
{
random=values[i];
values[i]=values[f];
values[f]=random;
}
}",1
cmcm317,1696161899,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

#define MAX 100
// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i;
	int numbers[MAX];
	for (i=0; i<length; i++) {
		numbers[i] = values[length-i-1];
	}
	for (i=0; i<length; i++) {
		values[i] = numbers[i];
	}
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}

",0
cmcm317,1696162021,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

#define MAX 100
// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i;
	int numbers[MAX];
	for (i=0; i<length; i++) {
		numbers[i] = values[length-i-1];
	}
	for (i=0; i<length; i++) {
		values[i] = numbers[i];
	}
}



",1
cmia215,1695683214,1,"void ReverseArray(int *values, int length)
{
	int i;
	int temp[length];
	for (i = 0; i < length; i++) {
		temp[i] = values[length - i -1];
	}
	for (i = 0; i < length; i++) {
		values[i] = temp[i];
	}
}
",1
cmot464,1695605301,1,"void ReverseArray(int *values, int length)
{
    int cloneArr[length];
    int count = 0; // iterator through clone array
    int i;

    for(i = length-1; i >= 0; i--){
        cloneArr[count] = values[i];
        count += 1;
    }

    for(i = 0; i < length; i++){
        values[i] = cloneArr[i];
    }

}",1
cnai408,1695984969,1,"void ReverseArray(int *values, int length) {
    int i; 
    
    for (i = 0; i < length/2; i++) {
        
        int end = length - 1 - i;
        int *p;
        int *q;
        
        int a = values[i];
        int b = values[end];
        
        p = &a;
        *p = values[end];
        
        q = &b;
        *q = values[i];
        
        values[i] = *p;
        values[end] = *q;
    }
}",1
cnie825,1696164439,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}",1
coli772,1695607932,1,"void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}
",1
couy656,1695613329,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
int i, end;
i = 0;
end = length - 1;


while (i < end){
	int temp = values[i];
	values[i]=values[end];
	values[end] = temp;

	i++;
	end--;
}

}",1
csan114,1695775435,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length) {
    int i = 0;
    int j = length - 1;

    while (i < j) {
        int temp = values[i];
        values[i] = values[j];
        values[j] = temp;

        i++;
        j--;
    }
}",1
cset571,1695608927,1,"void ReverseArray(int* values, int length)
{
	// initilising the inex and temperary array.
	int i;
	int array[100] = { 0, 0 };

	// A for loop to reverse the array.
	for (i = 0; i < length; i++) {
		array[i] = values[length - 1 - i];

	}

	// Making values equal to the temperary array.
	for (i = 0; i < length; i++) {
		values[i] = array[i];
	}
}",1
csin574,1695852330,1,"void ReverseArray(int *values, int length)
{
int i;
int temp;
for (i = 0; i < length/2; i++) {
	temp = values[i];
	values[i] = values[(length-1)-i];
	values[(length-1)-i] = temp;
}
}",1
cste189,1695766841,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i, hold, j = (length-1);

	for (i = 0; i < (length/2)+1; i++) {
		hold = values[i];
		values[i] = values[j];
		values[j] = hold;
		j--;
	}
}",0
cste189,1695767158,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i, hold, depend, j = (length-1);
	if (!length % 2) {
		depend = (length / 2) + 1;
	}
	else {
		depend = length / 2;
	}
	
	for (i = 0; i < depend; i++) {
		hold = values[i];
		values[i] = values[j];
		values[j] = hold;
		j--;
	}
}",1
ctof106,1695691434,1,"
void ReverseArray(int *values, int length)
{
    int i;
    
    for(i = (length-1), i >= 0, i--)
    {
        printf(""%d "", values[i]);
    }
}",0
ctof106,1695691472,2,"
void ReverseArray(int *values, int length)
{
    int i;
    
    for(i = (length-1); i >= 0; i--;)
    {
        printf(""%d "", values[i]);
    }
}",0
ctof106,1695691604,3,"
void ReverseArray(int *values, int length)
{
    int i;
    
    for(i = (length-1); i >= 0; i--)
    {
        printf(""%d "", values[i]);
    }
}",0
ctof106,1695728028,4,"void ReverseArray(int *values, int length)
{
    int i;
    int filler;
    
    for(i = 0; i < length/2; i++)
    {
        filler = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = filler;
        
    }

}",1
ctub889,1696129549,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int i;
    for (i = 0; i < length / 2; i++) {
        int temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}",1
cugn667,1696063480,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
  int begin;
  int end;
  
  
  begin = 0;
  end = length - 1;
  
  while ( begin < end ){
    int temp;
    temp = values[begin];
    values[begin] = values[end];
    values[end] = temp;
    
    begin = begin + 1;
    end = end - 1;

 }
 
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}

",0
cugn667,1696063490,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
  int begin;
  int end;
  
  
  begin = 0;
  end = length - 1;
  
  while ( begin < end ){
    int temp;
    temp = values[begin];
    values[begin] = values[end];
    values[end] = temp;
    
    begin = begin + 1;
    end = end - 1;

 }
 
}


",1
cwei506,1695698455,1,"void ReverseArray(int* values, int length)
{
	int i;
	int temp[length];

	for (i = 0; i < length; i++)  {
		temp[i] = values[i];
	}

	for (i = 0; i < length; i++) {
		values[i] = temp[length - i];
	}
}
",0
cwei506,1695698490,2,"void ReverseArray(int* values, int length)
{
	int i;
	int temp[length];

	for (i = 0; i < length; i++)  {
		temp[i] = values[i];
	}

	for (i = 0; i < length; i++) {
		values[i] = temp[length - 1 - i];
	}
}",1
cwu200,1695951662,1,"#include <stdio.h>
void ReverseArray(int values[], int length){
  int i;
  for(i = 0; i <= length / 2; i++){
    int temp = values[i];
    values[i] = values[length - 1 - i];
    values[length - 1 -i] = temp;
  }
}",0
cwu200,1695951970,2,"#include <stdio.h>
void ReverseArray(int values[], int length){
  int start = 0;
  int end = length - 1;
  
  while (start < end){
    int temp = values[start];
    values[start] = values[end];
    values[end] = temp;
    start++;
  }
}
",0
cwu200,1695951987,3,"#include <stdio.h>
void ReverseArray(int values[], int length){
  int start = 0;
  int end = length - 1;
  
  while (start < end){
    int temp = values[start];
    values[start] = values[end];
    values[end] = temp;
    start++;
    end--;
  }
}
",1
cyan312,1695725215,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;
	int storedValue;
	while (start < end) {
		storedValue = values[start];
		values[start] = values[end];
		values[end] = storedValue;
		start = start + 1;
		end = end - 1;
	}
}",1
cyiu210,1695768136,1,"#include <stdio.h>

void ReverseArray (int *values, int length)
{
    int i;
    int storearray[length];
    
    for (i = 0; i < length; i++)  {
    storearray[i] = values[((length-1)-i)];
    }
    
    for(i = 0; i < length; i++)  { 
    values[i] = storearray[i];
    }
    
}",1
dbar153,1695710336,1,"void ReverseArray(int* values, int length)
{
	int i;
	int a;
	a = 0;

	for (i = length - 1; i > ((length) / 2); i--) {

		double b;
		b = values[a];
		values[a] = values[i];
		values[i] = b;
		a++;

	}
}",0
dbar153,1695710617,2,"void ReverseArray(int* values, int length)
{
	int i;
	int a;
	a = 0;

	for (i = length - 1; i > ((length-1) / 2); i--) {

		double b;
		b = values[a];
		values[a] = values[i];
		values[i] = b;
		a++;

	}
}
",1
dcha468,1696207910,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {

        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
     
        start++;
        end--;
    }
}
",1
dche306,1695777236,1,"#include <stdio.h>

void ReverseArray(int *values, int x)
{
    int start = 0;
    int end = x-1;
    
    while (start < x){
        values[start]=values[end];
        start++
        end--
    }

}",0
dche306,1695777251,2,"#include <stdio.h>

void ReverseArray(int *values, int x)
{
    int start = 0;
    int end = x-1;
    
    while (start < x){
        values[start]=values[end];
        start++;
        end--;
    }

}",0
dche306,1695777539,3,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap the elements at the start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start and end positions inward
        start++;
        end--;
    }
}",1
deri361,1695614297,1,"void ReverseArray(int * values, int length)
{
	int i, temp;
	for (i = 0; i < length/2; i++)
	{
		temp = values[i];
		values[i] = values[length-i-1];
		values[length-i-1] = temp;
	}
}",1
dfor626,1695701252,1,"  void ReverseArray(int values[], int n)
{
    int i = 0;
    int end = n - 1;
    int storage;
    
    while (i < end) {
    storage = values[i];
    values[i] = values[end];
    values[end] = storage;
    i++;
    end--;
}",0
dfor626,1695765604,2,"void ReverseArray(int values[], int n)
{
    int i;
    int j = n - 1;
    int storage;
    
    for (i = 0; i < j; i++) {
    storage = values[i];
    values[i] = values[j];
    values[j] = storage;
    j--;
    }
}",1
dgal735,1695621096,1,"#include <stdio.h>

int ReverseArray(int* values, int length) {
    int start = 0;
    int end = length - 1;

    while (start <= end) {
        // Swap the start and end position values
        int t = values[start];
        values[start] = values[end];
        values[end] = t;
// Keep going...
        start++;
        end--;
    }
}",0
dgal735,1695687226,2,"int ReverseArray(int* values, int length) {
    int start = 0;
    int end = length - 1;

    while (start <= end) {
        // Swap the start and end position values
        int t = values[start];
        values[start] = values[end];
        values[end] = t;
        // Keep going...
        start++;
        end--;
    }
    return values;
}",0
dgal735,1695687313,3,"void ReverseArray(int* values, int length) {
    int start = 0;
    int end = length - 1;

    while (start <= end) {
        // Swap the start and end position values
        int t = values[start];
        values[start] = values[end];
        values[end] = t;
        // Keep going...
        start++;
        end--;
    }
}",1
dha524,1695702707,1,"void ReverseArray(int *values, int length)
{
	int store = values;
	int x;

	x = 1;

	for (int *i = length + 1; i > 0; i--) {
		values[x] = &store[i];
		x++;
	}
	values = store;",0
dha524,1695769795,2,"void ReverseArray(int* values, int length) {
    int store[100];
    int x = 0;

    for (int i = length - 1; i >= 0; i--) {
        store[x] = values[i];
        x++;
    }

    for (int i = 0; i < length; i++) {
        values[i] = store[i];
    }
}",1
dhah941,1696141265,1,"void ReverseArray(int *values, int length)
{
	int temp_i;
	int temp_j;
	int i, j;
	i = 0;
	j = (length-1);

	while (i != j)
	{
		temp_i = values[i];
		temp_j = values[j];
		values[i] = temp_j;
		values[j] = temp_i;
		i++;
		j--;
	}
}",0
dhah941,1696141576,2,"void ReverseArray(int *values, int length)
{
	int temp_i;
	int temp_j;
	int i, j;
	i = 0;
	j = (length-1);

	while (i <= j)
	{
		temp_i = values[i];
		temp_j = values[j];
		values[i] = temp_j;
		values[j] = temp_i;
		i++;
		j--;
	}
}
",1
dhar714,1695619102,1,"void ReverseArray(int *values, int length)
{
int lengthNew = length + 1 ;
while (lengthNew > 1) {
	lengthNew--;

	int temp = values[length - 1];
	for (int j = length - 1; j > length - lengthNew; j--) {
		values[j] = values[j - 1];
	}
	values[length - lengthNew] = temp;
}
}",1
dhen760,1695624186,1,"
int ReverseArray(int *values, int length)
{
    int newArray[100000] = {0};
    for (int i = 0; i < length; i++) {
        newArray[i] = values[i];
    }
    
    int counter;
    counter = length-1;
    for (int i = 0; i < length; i++) {
        values[i] = newArray[counter];
        counter--;
    }

    return 0;
}",1
dhua391,1696233548,1," int main() {
    return 0;
}

void ReverseArray(int X[], int Y) {
    int z;
    for (int i = 0; i < Y / 2; i++) {
        z = X[i];
        X[i] = X[Y - i - 1];
        X[Y - i - 1] = z;
    }
    
    for (int i = 0; i < Y; i++) {
        printf(""%d "", X[i]);
    }
}",0
dhua391,1696233564,2,"#include <stdio.h>



int main() {
    return 0;
}

void ReverseArray(int X[], int Y) {
    int z;
    for (int i = 0; i < Y / 2; i++) {
        z = X[i];
        X[i] = X[Y - i - 1];
        X[Y - i - 1] = z;
    }
    
    for (int i = 0; i < Y; i++) {
        printf(""%d "", X[i]);
    }
}",0
dhua391,1696233581,3,"#include <stdio.h>


void ReverseArray(int X[], int Y);
int main() {
    return 0;
}

void ReverseArray(int X[], int Y) {
    int z;
    for (int i = 0; i < Y / 2; i++) {
        z = X[i];
        X[i] = X[Y - i - 1];
        X[Y - i - 1] = z;
    }
    
    for (int i = 0; i < Y; i++) {
        printf(""%d "", X[i]);
    }
}",0
dhua391,1696233639,4,"#include <stdio.h>


void ReverseArray(int X[], int Y);
int main(void) {
    return 0;
}

void ReverseArray(int X[], int Y) {
    int z;
    for (int i = 0; i < Y / 2; i++) {
        z = X[i];
        X[i] = X[Y - i - 1];
        X[Y - i - 1] = z;
    }
    
    for (int i = 0; i < Y; i++) {
        printf(""%d "", X[i]);
    }
}",0
dhua391,1696234607,5,"#include <stdio.h>

void ReverseArray(int X[], int Y) {
    int z;
    for (int i = 0; i < Y / 2; i++) {
        z = X[i];
        X[i] = X[Y - i - 1];
        X[Y - i - 1] = z;
    }
    
    for (int i = 0; i < Y; i++) {
        printf(""%d "", X[i]);
    }
}",0
dhua391,1696235228,6,"#include <stdio.h>

void ReverseArray(int X[], int Y) {
    int z;
    for (int i = 0; i < Y / 2; i++) {
        z = X[i];
        X[i] = X[Y-i];
        X[Y - i] = z;
    }
    
    for (int i = 0; i < Y; i++) {
        printf(""%d "", X[i]);
    }
}",0
dhua391,1696235249,7,"#include <stdio.h>

void ReverseArray(int X[], int Y) {
    int z;
    for (int i = 0; i < Y / 2; i++) {
        z = X[i];
        X[i] = X[Y-i-1];
        X[Y - i-1] = z;
    }
 
}",1
dhul688,1695691913,1,"void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    for (i = 0; i < ((length - length%2)/2); i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}
",1
dkha055,1695629459,1,"void ReverseArray(int *value, int length) {
    
    int temp_value[length];
    int i = 0;
    
    for (int i = 0; i < length; i++) {
        temp_value[i] = value[i];
    }
    
    for (int j = length - 1; j > -1; j--) {
        value[i] = temp_value[j];
        i++;
    }
    
}",1
dkim848,1695692808,1,"void ReverseArray(int *values, int length)
{
    int temp1, temp2;
    
    for (int i = 0; i <= length/2; i++) {
        temp1 = values[i];
        temp2 = values[length- i -1];
        values[i] = temp2;
        values[length - i - 1] = temp1;
    }
}",0
dkim848,1695692962,2,"void ReverseArray(int *values, int length)
{
    int temp1, temp2;
    
    for (int i = 0; i <= (length - 1)/2; i++) {
        temp1 = values[i];
        temp2 = values[length- i -1];
        values[i] = temp2;
        values[length - i - 1] = temp1;
    }
}
",1
dkur670,1696100569,1,"void ReverseArray(int *values, int length)
{
	int step = 0;
	for (int i = 0; i < (length / 2); i++){
		step = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = step;
	}
		
	
}",1
dli630,1696128299,1,"void Swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void ReverseArray(int *value, int length) {
    int i = 0;
    int x = 0;

    for(i = 0; i < length/2; i++) {
        Swap(&value[i], &value[length - 1 - i]);
    }
}",0
dli630,1696128314,2,"void Swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void ReverseArray(int *value, int length) {
    int i = 0;

    for(i = 0; i < length/2; i++) {
        Swap(&value[i], &value[length - 1 - i]);
    }
}",1
dlob194,1695708014,1,"void ReverseArray(int *values, int length)
{
    for (int i = length - 1; i>=0; i--) {
    printf(""%d "", values[i]);
    }
}
",0
dlob194,1695720882,2,"void ReverseArray(int *values, int length)
{
	int start;
	int end;
	int swap;

    for (start = 0, end = length - 1; start < end; start++, end--) {
        swap = values[start];
        values[start] = values [end];
        values [end] = swap;
    }
}",1
dma765,1695635855,1,"void ReverseArray(int *values, int length){
	int i;
	for (i = length - 1; i >= 0; i--) {
		printf(""%d "", values[i]);
}
}",0
dma765,1696066141,2,"void ReverseArray(int *values, int length)
{
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap the elements at the start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the indices toward the center
        start++;
        end--;
    }
}",1
dmar494,1695687412,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    
    int reverse[length];
    
    for (int i = 0; i < length; i++) {
        reverse[i] = values[i];
    }
    
    for (int i = 0; i < length; i++) {
        values[i] = reverse[(length- 1 - i)];
    }
}",1
dmcn107,1695891896,1,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
    int i = length;
    while (i>=0) {
        values[length - i]= i;
        i--;
    }

    return 0;
}",0
dmcn107,1696049676,2,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
    int i = length-1;
    int j = 0;
    while (i>j) {
        int temp = values[i];
        values[i] = values[j];
        values[j] = temp;
        i--;
        j++;
    }

    return 0;
}",1
dmun793,1696172538,1,"void ReverseArray(int* values, int length)
{
	for (int i = 0; i < length / 2; i++)
	{
		int firstIndex = i;
		int lastIndex = length - i - 1;

		int firstValue = values[firstIndex];
		int lastValue = values[lastIndex];

		values[firstIndex] = lastValue;
		values[lastIndex] = firstValue;
	}
}",1
dosb979,1695620551,1,"int ReverseArray (int *values, int length)
{
    // Initialises reversed array
    int copyvalues[length];
    
    //Changes length variable from number of total slots to maximum array slot
    length = length - 1;
    
    //For loop to make copyvalues equal to values
    for (int i = 0; i <= length; i++){
        copyvalues[i] = values[i];
    }

  // For loop to reverse the order of the array
  for (int i = 0; i <= length; i++)
    {
      values[i] = copyvalues[length - i];
    }
}
",0
dosb979,1695687120,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    // Initialises reversed array
    int copyvalues[length];
    
    //Changes length variable from number of total slots to maximum array slot
    length = length - 1;
    
    //For loop to make copyvalues equal to values
    for (int i = 0; i <= length; i++){
        copyvalues[i] = values[i];
    }

  // For loop to reverse the order of the array
  for (int i = 0; i <= length; i++)
    {
      values[i] = copyvalues[length - i];
    }
}
         ",1
dpar783,1696059042,1,"void ReverseArray(int *values, int length) {
	int j, k, index;
	int temp[100001];

	for (j = 0; j < length; j++) {
		index = (length - j) - 1;
		temp[j] = values[index];
	}
	for (k = 0; k < length; k++) {
		values[k] = temp[k];
	}
}",1
dpat391,1695682451,1,"#include <stdio.h>

int ReverseArray (int *values, int length) {
  int NewArray[length];
  for (int i = 0;i < length; i++) {
      NewArray[i] = values[i];
      values[i] = NewArray[length-1-i];
  }
}",0
dpat391,1696205549,2,"
void ReverseArray(int *values, int length)
{
    int j;
    int i;
    int array1[length];
    j=0;

    for (i=length-1; i>=0; i--) {
        array1[j] = values[i];
        j = j+1;
    }
    for (i=0; i <length; i++) {
        values[i] = array1[i];
    }
     

}",1
dpat674,1696221570,1,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    int i;
    int reversedArray[length];
    int newArray[length];
    for (i = 0; i < length; i = i + 1) {
        reversedArray[i] = values[i];
        newArray[i] = reversedArray[i];
    }
    for (i = 0; i < length; i = i + 1) {
        values[i] = newArray[length - i - 1];
    }
}
",1
dpat674,1696221649,2,"#include <stdio.h>
void ReverseArray(int *values,int length){
int i;
int reversedArray[length];
int newArray[length];
for (i=0;i<length;i=i+1){
    reversedArray[i]=values[i];
    newArray[i]=reversedArray[i];
}
for (i=0;i<length;i=i+1){
    values[i]=newArray[length-i-1];
}
}
",1
dpet289,1695852723,1,"void ReverseArray(int* values, int length)
{
	int i, temp;
	for (i = 0; i < length/2; i++) {
		temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;

	}
}",1
dric234,1695714477,1,"void ReverseArray(int* values, int length)
{
	int a = 0;
	int i;
	int b;
	for (i = length - 1; i >= length/2; i--) {
		b = values[a];
		values[a] = values[i];
		values[i] = b;
		a++;
	}

}",1
drob588,1696218017,1,"void ReverseArray(int* values, int length)
{
	// creating pointers for the first value and the last value in the given array
	int* frontArray = values;
	int* backArray = values + length - 1;

	// creating iterator and storage variable
	int i = 0;
	int storage;

	while (i < length / 2) {
		// get the current front value to be stored and store it in the storage for later
		storage = *frontArray;

		// swap the front and end values using the end value and stored front value
		*frontArray = *backArray;
		*backArray = storage;

		// iterate both front and end positions and make it so that they get closer to the centre every time
		frontArray++;
		backArray--;

		// iterate for while loop
		i++;
	}
}",1
droj056,1696217701,1,"void ReverseArray(int *values, int length)
{
	int newArray;
	for (int i = 0; i < length / 2; i++) {
		newArray = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = newArray;

	}
}",1
dryu303,1695969004,1,"void ReverseArray(int *values, int length)

{
    int i;
    int a=0;
    int tempvalues[length];
    for (i=length-1; i>-1; i--)  {
        tempvalues[a]=values[i];
        a++;
    }
    for (i=0; i<length; i++){
        values[i]=tempvalues[i];
    }
}
",1
dsan845,1696160422,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length) {
    

    for(int start = 0,  end = length - 1 ; start<end ; start++, end--); {
      
       int first = values[start] ; 
       values[start] = values[end] ; 
       values[end] = first ; 

    }
}",0
dsan845,1696160432,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length) {
    

    for(int start = 0,  end = length - 1 ; start<end ; start++, end--) {
      
       int first = values[start] ; 
       values[start] = values[end] ; 
       values[end] = first ; 

    }
}",1
dsaw164,1695695089,1,"void ReverseArray(int *values, int length){
    int a = 0;
    int i;
    int dupe[length];
    
    for(i = length - 1; i > -1;i--){
        dupe[a] = values[i];
        a++;
    }
    
    for(i = 0; i < length; i++){
        values[i] = dupe[i];
    }
}",1
dsin316,1695725238,1,"void ReverseArray(int *values, int length)
{
	int i;
	int j;
	int counter;
	int array[length];

	counter = 0;

	for (i = 0; i < length; i++ ) {
		array[i] = values[i];
	}
	
	for (j = length-1; j >= 0; j -= 1){
		values[counter] = array[j];
		counter++;
	}

}",1
dstr542,1695866655,1,"#include <stdio.h>
void ReverseArray(int *values, int length){
   
    int i;
    
for (i=0;i<(length/2);i++){
    
    int temp1, temp2;

    temp1 = values[i];
    temp2 = values[length-i-1];
    
    values[i] = temp2;
    values[length-i-1] = temp1;
    }
}",1
dsut709,1696030761,1,"void ReverseArray(int* values, int length)
{
	int temp;
	int n = 0;
	int m = length - 1;

	while (n < length/2) {
		temp = values[n];
		values[n] = values[m];
		values[m] = temp;
		n++;
		m--;
	}
}",1
dtem664,1696228006,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{

	int *ptr1,*ptr2, temp;
	ptr1 = values;
	ptr2 = values + N;

	while (ptr1 < ptr2)
	{
		temp = *ptr1;
		*ptr1 = *ptr2;
		*ptr2 = temp;
		ptr1++;
		ptr2--;
	}
}



",0
dtem664,1696228021,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{

	int *ptr1,*ptr2, temp;
	ptr1 = values;
	ptr2 = values + 6;

	while (ptr1 < ptr2)
	{
		temp = *ptr1;
		*ptr1 = *ptr2;
		*ptr2 = temp;
		ptr1++;
		ptr2--;
	}
}



",0
dtem664,1696228061,3,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{

	int *ptr1,*ptr2, temp;
	ptr1 = values;
	ptr2 = values + length;

	while (ptr1 < ptr2)
	{
		temp = *ptr1;
		*ptr1 = *ptr2;
		*ptr2 = temp;
		ptr1++;
		ptr2--;
	}
}



",0
dtem664,1696228318,4,"#include <stdio.h>


void ReverseArray(int *values, int length)
{

	int *ptr1,*ptr2, temp;
	ptr1 = values;
	ptr2 = values + length - 1;

	while (ptr1 < ptr2)
	{
		temp = *ptr1;
		*ptr1 = *ptr2;
		*ptr2 = temp;
		ptr1++;
		ptr2--;
	}
}




",1
dten781,1696195200,1,"void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length/2; i++) {
        int temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
    
}",1
dtie151,1695707337,1,"void ReverseArray(int values[], int length)
{	
	int temp;

	for (int i = 0; i < (length/2); i++) {
		temp = values[i];
		values[i] = values[(length - 1 - i)];
		values[(length - 1 - i)] = temp;
	}
}",1
dtol781,1695749900,1,"void ReverseArray(int *values, int length)
{
	int l = length - 1;
	int i;
	int order;
	int latter;
	for(i = 0; i < length; i++) {
	    if(l >= i) {
		order = values[i];
		latter = values[l];
		values[i] = latter;
		values[l] = order;
		l = l-1;
	    }
	}
}",1
dtua408,1696235027,1,"#include <stdio.h>

void ReverseArray(int values[], int length) 
{
        for (int i = 0; i < length/2; i++) {
             int number = values[(length-1-i)];
             values[(length-1-i)] = values[i];
             values[i] = number;
        }

        return 0;
}",0
dtua408,1696235080,2,"#include <stdio.h>

void ReverseArray(int values[], int length) 
{
        for (int i = 0; i < length/2; i++) {
             int number = values[(length-1-i)];
             values[(length-1-i)] = values[i];
             values[i] = number;
        }

        return;
}",1
dver839,1696203994,1,"void ReverseArray(int* values, int length);
for (i=0;i<length;i++) 
{
    values[i] = values[(length-1)-i];
}",0
dver839,1696204110,2,"void ReverseArray(int* values, int length);
for (int i=0;i<length;i++) 
{
    values[i] = values[(length-1)-i];
}",0
dver839,1696206445,3,"void ReverseArray(int* values, int length)
{
	for (int i = 0; i < length / 2; i++)
	{
		int temporaryArray = values[i];
		values[i] = values[(length - 1) - i];
		values[(length - 1) - i] = temporaryArray; 

	}
}",1
dvu878,1696134671,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS


void ReverseArray(int* values, int length)
{
	// iterate through array
	int j = length - 1;
	for (int i = 0; i < length/2; i++) {

		// temporarily store value at j
		int k = values[i];

		// rewrite the values in array
		values[i] = values[j];
		values[j] = k;
		
		// iterating j backwards
		j = j - 1;
	}
}",1
dwar594,1695719788,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i, temp;
    for (i = 0 ; i < length / 2 ; i++){
     temp = values[i]; 
     values[i] = values[length - i - 1];
     values[length - i - 1] = temp;
    }
    
}

",1
dwu617,1695960095,1,"void ReverseArray(int values[], int length)
{
	int i;

	for (i = 0; i < (length / 2); i++) {
		int swappedValue = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i ] = swappedValue;
	}
}",1
dyad002,1696232306,1,"int ReverseArray(int values[], int length) {
    int i;
    int max = values[0];
    for (i = 1; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    printf(""%d "", values[i]); 
} ",0
dyu343,1695610596,1,"void ReverseArray(int* values, int length)
{
	int halflength = length / 2; // gets rounded down if odd. Checks out.

	for (int i = 0; i < halflength; i++)
	{
		int mirror_index = length - 1 - i; // gets corresponding index on the other half of array.
		
		// perform a swap with the mirror index.
		int temp = values[i];
		values[i] = values[mirror_index];
		values[mirror_index] = temp;
	}
}",1
dzha497,1695790734,1,"void ReverseArray(int *values, int length)

{
    int i;
    int temp[length];
    
    for (i = 0; i < length; i++) {
        temp[i] = values[i];
    }
    
        for (i = 0; i < length; i++) {
        values[i] = temp[length - i - 1];
        }
}",1
ealg928,1696232888,1,"#include <stdio.h>

void ReverseArray(int*values, int length) 
{
    int start = 0;
    int end = length - 1;

    while (start < end) 
    {
        int variableTemporary = values[start];
        values[start] = values[end];
        values[end] = variableTemporary;

        start++;
        end--;
    }
}",1
eara128,1695797765,1,"void ReverseArray(int *values, int length)
{
	int temp;
	int leftP = 0;
	int rightP = length -1 ;
	while ( leftP < rightP) {
		temp = values[leftP];
		values[leftP] = values[rightP];
		values[rightP] = temp;
		leftP++; 
		rightP--;
	}
	
}
",1
earn712,1695871410,1,"void ReverseArray(int *values, int length)
{
    
    int first = 0;
    int last = length-1; 
    
    while (first < last) {
        int temp = values[first];
        values[first] = values[last];
        values[last] = temp;
        first ++;
        last --;
        
    }
}",1
ebar824,1695747075,1,"void ReverseArray(int *values, int length)
{
    int placeHolder[length];
    for (int i = 0; i < length; i++)
    {
       placeHolder[i] = values[i];         
    }
    for (int i = 0; i < length; i++)
    {
       values[i] = placeHolder[length-1-i];         
    }
    
    
}
",1
echa931,1696204795,1,"void ReverseArray(int *values, int length) {
    int values_1[100000000];
    for (int i = 0; i < length; i++) {
        values_1[i] = values[length - 1 - i];
    }
    for (int i = 0; i < length; i++) {
        values[i] = values_1[i];
    }
}",0
echa931,1696204948,2,"void ReverseArray(int *values, int length) {
    int values_1[1000];
    for (int i = 0; i < length; i++) {
        values_1[i] = values[length - 1 - i];
    }
    for (int i = 0; i < length; i++) {
        values[i] = values_1[i];
    }
}",1
eche101,1695873056,1,"#include <stdio.h>


void ReverseArray(int *values, int length) {

int start = 0;
int end = length - 1;
int x ;
while (start < end) {
    x = values[start]; 
    values[start] = values[end];
    values[end] = x;
    
    start++;
    end--;
    
}
}",1
eejl688,1696219995,1,"void ReverseArray(int *values, int length) 
{
    int placeholder;
    int final = length - 1;

    for (int i = 0; i < final; i++) {
        placeholder = values[i];
        values[i] = values[final];
        values[final] = placeholder;
        final--;
    }
}",1
eejl932,1695779163,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap the elements at the start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the indices toward the center of the array
        start++;
        end--;
    }
}",1
efra318,1695715682,1,"void ReverseArray(int* values, int length)
{
	int i = 0;
	int store = 0;

	for (i; i <(length/2); i++) {
		store = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = store;	
	}

}",0
efra318,1695715923,2,"void ReverseArray(int* values, int length)
{
	int i;
	int store = 0;

	for (i=0; i <(length/2); i++) {
		store = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = store;	
	}

}",1
egem265,1696233735,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}

int main() {
    int arr[100]; // Assuming a maximum array size of 100, you can adjust this as needed
    int length;

    printf(""Enter the number of elements in the array: "");
    scanf(""%d"", &length);

    printf(""Enter the elements of the array:\n"");
    for (int i = 0; i < length; i++) {
        scanf(""%d"", &arr[i]);
    }

    printf(""Original Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    ReverseArray(arr, length);

    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
",0
egho902,1695791732,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int beginning = 0;
    int end = length - 1;
    
    while (start < end)
    {
        int x = values[beginning];
        values[end] = x;
        
        beginning++;
        end--;
    }
}",0
egho902,1695791757,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int beginning = 0;
    int end = length - 1;
    
    while (beginning < end)
    {
        int x = values[beginning];
        values[end] = x;
        
        beginning++;
        end--;
    }
}",0
egho902,1695791899,3,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int beginning = 0;
    int end = length - 1;
    
    while (beginning < end)
    {
        int x = values[beginning];
        values[beginning] = values[end];
        values[end] = x;
        
        beginning++;
        end--;
    }
}",1
ehan360,1695694169,1,"// Online C compiler to run C program online
#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    int loop2;
    
    for (int i = length-1; i >= 0; i--) { 
        // Set the temporary value to the correct index value
        loop2 = length-values[i];
        temp = values[i];
        values[i] = values[loop2];
        // Set the '7' value to the temp value.
        values[loop2] = temp;
    }
}



int main() {
int values[8] = {1, 2, 3, 4, 5, 6, 7, 8}; 

ReverseArray(values, 8); 

for (int i = 0; i < 8; i++) { 
   printf(""%d "", values[i]); 
}
}",0
ehan360,1695694191,2,"void ReverseArray(int *values, int length) {
    int temp;
    int loop2;
    
    for (int i = length-1; i >= 0; i--) { 
        // Set the temporary value to the correct index value
        loop2 = length-values[i];
        temp = values[i];
        values[i] = values[loop2];
        // Set the '7' value to the temp value.
        values[loop2] = temp;
    }
}",0
ehan360,1696240803,3,"void ReverseArray(int *values, int length) {
    int temp;
    int loop2;
    int counter;
    counter = 0;
    
    for (int i = length-1; i >= length/2; i--) { 
    temp = values[i]; // Last value into temp
    values[i] = values[counter]; // Replace last value with first value
    values[counter] = temp; // Replace first value with temp value
    counter++; // Index counter
    }
}",0
ehan360,1696240822,4,"void ReverseArray(int *values, int length) {
    int temp;
    int counter;
    counter = 0;
    
    for (int i = length-1; i >= length/2; i--) { 
    temp = values[i]; // Last value into temp
    values[i] = values[counter]; // Replace last value with first value
    values[counter] = temp; // Replace first value with temp value
    counter++; // Index counter
    }
}",1
ehua682,1696212199,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        
        
        // Swaping the elements at the beginning and at the end of the positions.
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        
        // Moving the beginning and the end positions towards each other.
        start++;
        end--;
    }
}",1
ejeo051,1695884305,1,"void ReverseArray(int *values, int length)
{
    int i;
    int j = 0;
    int high_num;
    int low_num;

    
    for (i = length-1; i > length/2; i--) {
        high_num = values[i];
        low_num = values[j];
        values[j] = high_num;
        values[i] = low_num;
        j++;
    }
    
}",0
ejeo051,1695884395,2,"void ReverseArray(int *values, int length)
{
    int i;
    int j = 0;
    int high_num;
    int low_num;

    
    for (i = length-1; i >= length/2; i--) {
        high_num = values[i];
        low_num = values[j];
        values[j] = high_num;
        values[i] = low_num;
        j++;
    }
    
}",1
ekmu195,1695633456,1,"void ReverseArray(int *values, int length)
{
	int reversedArray[length];
	int i;

	for (i = 0; i < length; i++) {
		reversedArray[i] = values[(length - 1 - i)];
	}
	
	for (i = 0;i < length; i++) {
		values[i] = reversedArray[i];
	}

}",1
elau447,1696093408,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i = length - 1;
	while (i >= 0) {
		int array = values[i];
		printf(""%d "", array);
		i--;
	}
	printf(""\n"");
}
",0
elau447,1696097708,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int j = length - 1;
	int* p;
	int* q;
	for (int i = 0; i <= j; i++ ) {
		q = &values[j]; 
		p = &values[i]; 
		int a = *p; 
		*p = *q; 
		*q = a;
		j--;
	}
}
",1
eles952,1696201582,1,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void ReverseArray(int *values, int length)
    
    for (int i=length; i > 0; i--){
        printf( ""%d "", values[i]);
        
    }
    return 0;
}

",0
eles952,1696201699,2,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int main(void)
{

int ReverseArray(int values[], int length){
    
    for (int i=length; i > 0; i--){
        printf( ""%d "", values[i]);
        
    }
    return 0;
}
}

",0
eles952,1696202015,3,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int ReverseArray(int values[], int length){
    
    for (int i=length; i > 0; i--){
        printf( ""%d "", values[i]);
        
    }
    return 0;
}


",0
eles952,1696202139,4,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int ReverseArray(int values[], int length){
    
    for (int i=length-1; i > 0; i=i-1){
        printf( ""%d "", values[i]);
        
    }
    return 0;
}


",0
eles952,1696202154,5,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int ReverseArray(int values[], int length){
    
    for (int i=length-1; i > -1; i=i-1){
        printf( ""%d "", values[i]);
        
    }
    return 0;
}


",0
eles952,1696202317,6,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int ReverseArray(int values[], int length){
    int x = 1
    for (int i=length-1; x < length; i=i-1){
        printf( ""%d "", values[i]);
        x = x + 1;
        
    }
    return 0;
}


",0
eles952,1696202370,7,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int ReverseArray(int values[], int length){
    
    for (int i=length-1; i > -1; i=i-1){
        printf( ""%d "", values[i]);
        
        
    }
    return 0;
}


",0
eles952,1696202461,8,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


int PrintArray(int values[], int length){
    
    for (int i=length-1; i>0; i=i-1){
        printf( ""%d "", values[i]);
        
    }
    return 0;
}

",0
eles952,1696202480,9,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


int ReverseArray(int values[], int length){
    
    for (int i=length-1; i>0; i=i-1){
        printf( ""%d "", values[i]);
        
    }
    return 0;
}

",0
eles952,1696202547,10,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


int ReverseArray(int values[], int length){
    
    for (int i=length-1; i>-1; i--){
        printf( ""%d "", values[i]);
        
    }
    return 0;
}

",0
eles952,1696202959,11,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>



int ReverseArray(int values[], int length){
    
    int first = 0;
    int last = length -1;
    
    while(first<last){
    int FirstPlaceholder = values[first];
        values[first] = values[last];
        values[last] = FirstPlaceholder;
    first++;
    last--;
        
    }
     for (int i=0; i < length; i++){
        printf( ""%d "", values[i]);
        
    }
    return 0;
    
}


",0
eles952,1696203058,12,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>



void ReverseArray(int values[], int length){
    
    int first = 0;
    int last = length -1;
    
    while(first<last){
    int FirstPlaceholder = values[first];
        values[first] = values[last];
        values[last] = FirstPlaceholder;
    first++;
    last--;
        
    }
     for (int i=0; i < length; i++){
        printf( ""%d "", values[i]);
        
    }
    return 0;
    
}


",0
eles952,1696203076,13,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>



void ReverseArray(int values[], int length){
    
    int first = 0;
    int last = length -1;
    
    while(first<last){
    int FirstPlaceholder = values[first];
        values[first] = values[last];
        values[last] = FirstPlaceholder;
    first++;
    last--;
        
    }
     for (int i=0; i < length; i++){
        printf( ""%d "", values[i]);
        
    }
    
    
}


",0
eles952,1696203281,14,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>



void ReverseArray(int values[], int length){
    
   
     for (int i=0; i < length; i++){
        int x = i - length*-1;
        printf( ""%d "", values[x]);
        
    }
    
    
}


",0
eles952,1696203411,15,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>



void ReverseArray(int values[], int length){
    
   
     for (int i=0; i < length; i++){
        int x = -length + i;
        x = x*-1;
        printf( ""%d "", values[x]);
        
    }
    
    
}


",0
eles952,1696236512,16,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void ReverseArray(int *values, int length)
{

int beginning = 0;          
    int end = length - 1;  

    while (beginning < end) {
        int temp = values[beginning];
        values[beginning] = values[end];
        values[end] = temp;

      beginningt++;
        end--;
    }
    return 0;
    }",0
eles952,1696236523,17,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void ReverseArray(int *values, int length)
{

int beginning = 0;          
    int end = length - 1;  

    while (beginning < end) {
        int temp = values[beginning];
        values[beginning] = values[end];
        values[end] = temp;

      beginning++;
        end--;
    }
    return 0;
    }",0
eles952,1696236535,18,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void ReverseArray(int *values, int length)
{

int beginning = 0;          
    int end = length - 1;  

    while (beginning < end) {
        int temp = values[beginning];
        values[beginning] = values[end];
        values[end] = temp;

      beginning++;
        end--;
    }
    return;
    }",1
elia955,1696238772,1,"void ReverseArray(int* values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
        start++;
        end--;
    }
}",1
else264,1695865383,1,"#include <stdio.h>
//me giving up writing comments
void ReverseArray(int *values, int length) {
    
    for (int i=0;i<(length/2);i++) {
        
        int a=values[i];
        values[i]=values[length-i-1];
        values[length-i-1]=a;
    }
} ",1
ely207,1695631802,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	for (int i = 0; i < length; i++)
	{
		values[i] = length - i;
	}
}",0
ely207,1695637178,2,"// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{	
	int n; // to assign last number with first number
	//Creating reverse array
	for (int i = 0; i < (int)(length / 2); i++)
	{
		n = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = n;
	}
}
",1
ema340,1695988401,1,"void ReverseArray(int *values, int length)
{
	int startIndex = 0;
	int endIndex = length -1;

	while (startIndex < endIndex) {
		int reserveElement = values[startIndex];
		values[startIndex] = values[endIndex];
		values[endIndex] = reserveElement;

		startIndex++;
		endIndex--;
	}
}",1
emah834,1695850130,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i; 
    int initialValue;
    for (i = 0; i < length/2; i++){
        initialValue = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = initialValue; 
    }
}
",1
emah921,1696113955,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int temp;
    for(int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}
",1
emar189,1696124567,1,"void ReverseArray(int *values,int length) {

	int TemporaryArray;
	int i;
	int x;

	i=0;
	x=length-1;

	while (i<x) {
		TemporaryArray=values[i];
		values[i]=values[x];
		values[x]=TemporaryArray;
		i=i+1;
		x=x-1;
	}
}",1
eqiu349,1695692003,1,"void ReverseArray(int array[], int length)
{
	int i;
	int a;

	for (i = 0; i < length/2; i++) {
			a = array[i];
			array[i] = array[length - i - 1];
			array[length - i - 1] = a;
		}
}",1
esia821,1695780008,1,"// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int count = 0;
	for (int i = length; i >= 0; i--) {
		values[count] = i;
		count = count + 1;
	}
}",0
esia821,1695780833,2,"// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int temp;
	for (int i = 0; i < length/2; i++) {
		temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
	}
}
",1
eteo952,1695780938,1,"void ReverseArray(int *values, int length)
{
	int i;
	int temp[length];

	for (i = 0; i < length; i++) {
		temp[i] = *(values + length - 1 - i);
	}

	for (i = 0; i < length; i++) {
		values[i] = temp[i];
	}

}",1
etri556,1695876607,1,"void ReverseArray(int arr[], int array_size) {
    int index = 0;
    int original_array[60000];
    for(int i = 0; i < array_size; i++) {
        original_array[i] = arr[i];
        // Creating the whole new array that has the same exact the values for each element.
    }
    //printf(""The array size is %d\n"", array_size);
    for(int i = array_size; i-- > 0;) {
        // The for loop starts at the last elmeent of the array and then go backwards when processing each element until it reaches 
        // the last element.
        arr[index] = original_array[i];
        index = index + 1;
    }
}",1
evic904,1696124422,1,"#include <stdio.h>
// This function passes an array of integers, and the number of elements in that array, and it 
// will reverse the order of the array and return it 

void ReverseArray(int *values, int length)
{
	int start = 0;
	int finish = length - 1;

	while (start < finish)
	{
		int a = values[start];
		values[start] = values[finish];
		values[finish] = a;

		start++;
		finish--;
	}
}",1
ewil853,1695918544,1,"#include <stdio.h>

void ReverseArray(int *array, int size)
{
    int temp[size];
for(int i =0;i<size;i = i+1){
    temp[i] = array[size - 1 - i];

}
for(int i = 0;i<size;i++){
    array[i] = temp[i];
}

}

int main(void)
{
    int values[7] = {1,2,3,4,5,6,7};
    ReverseArray(values,7);
    for (int i = 0; i < 7; i++) { 
   printf(""%d "", values[i]);
    }
    printf(""\n"");
   return 0;
}",0
ewil853,1695918594,2,"void ReverseArray(int *array, int size)
{
    int temp[size];
for(int i =0;i<size;i = i+1){
    temp[i] = array[size - 1 - i];

}
for(int i = 0;i<size;i++){
    array[i] = temp[i];
}",0
ewil853,1695919638,3,"void ReverseArray(int *values, int length)
{
    int temp[length];
for(int i =0;i<length;i = i+1){
    temp[i] = values[length - 1 - i];

}
for(int i = 0;i<length;i++){
    values[i] = temp[i];
}

}",1
exu922,1696238275,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp, i;
    for (i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7}; 

    ReverseArray(values, 7); 

    for (int i = 0; i < 7; i++) { 
       printf(""%d "", values[i]); 
    }

    return 0;
}
",0
exu922,1696238409,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp, i;
    for (i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}
",1
eyeo346,1695787746,1,"#include <stdio.h>

// The ReverseArray function will modify the array so the elements are in reverse order.
void ReverseArray(int *values, int length)
{
    int i;
    int j = 0;
    int copy[length];
    
    for (i = 0; i < length; i++) {
        copy[i] = values[i];
    }
    
    for (i = length; i>= 0; i--) {
        if (copy[i] != 0) {
            values[j] = copy[i];
            j++;
        }
    }
 
}",0
eyeo346,1695990023,2,"#include <stdio.h>

// The ReverseArray function will modify the array so the elements are in reverse order.
void ReverseArray(int *values, int length)
{
    int i;
    int j = 0;
    int copy[length];
    
    for (i = 0; i < length; i++) {
        copy[i] = values[i];
    }
    
    for (i = 0; i < length; i++) {
        
        values[i] = copy[length - i - 1];
        
    }
 
}
",0
eyeo346,1695990037,3,"#include <stdio.h>

// The ReverseArray function will modify the array so the elements are in reverse order.
void ReverseArray(int *values, int length)
{
    int i;
    int copy[length];
    
    for (i = 0; i < length; i++) {
        copy[i] = values[i];
    }
    
    for (i = 0; i < length; i++) {
        
        values[i] = copy[length - i - 1];
        
    }
 
}
",1
fcoo305,1696151448,1,"void ReverseArray(int values[], int length)
{
    int newValues[length];
    for (int i = 0; i < length; i++) {
        newValues[i] = values[length - 1 - i];
    }
    values = newValues;
}",0
fcoo305,1696153935,2,"void ReverseArray(int values[], int length)
{
	int newValues[7];
	for (int i = 0; i < length; i++) {
		newValues[i] = values[length - 1 - i];
	}

	for (int i = 0; i < length; i++) {
		values[i] = newValues[i];
	}

}",0
fcoo305,1696157429,3,"void ReverseArray(int values[], int length)
{

	int temp = 0;
	for (int i = 0; i < length / 2; i++) {
		temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;

	}
}",1
fesp714,1695718494,1,"void ReverseArray(int *values, int length)
{
    // initialising beginning and end of the array index
    int begin = 0;
    int end = length - 1; 
    
    while ( begin < end) {
        int temparr = values[begin];
        // swapping end values to start values
        values[begin] = values[end];
        values[end] = temparr;
        // making sure that the loop goes through each element in the array.
        begin++;
        end--; 
        }
}",1
fgor787,1696202951,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int first = 0;
    int last = length - 1;

    while (first < last)
    {
        
        int placeholder = values[first];
        
        values[first] = values[last];
        values[last] = placeholder;

        first = first + 1;
        last = last - 1;
    }
}
",1
fkee774,1695703590,1,"#include <stdio.h>

void ReverseArray(int* values, int length) 
{
    for (int i = 0; i < length / 2; i++) 
    {
        values[i] = values[length - 1 - i];      
        
    }
}
",0
fkee774,1695703702,2,"#include <stdio.h>

void ReverseArray(int* values, int length) 
{
    for (int i = 0; i < length / 2; i++) 
    {
        int temp_value = values[i];
        values[i] = values[length - 1 - i];      
        values[length - 1 - i] = temp_value;
    }
}
",1
fobr691,1696212041,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    int length = 7;

    ReverseArray(values, length);

    for (int i = 0; i < length; i++) {
        printf(""%d "", values[i]);
    }

    return 0;
}",0
fobr691,1696212632,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}

",1
fwij709,1695621171,1,"#include <stdio.h>
void ReverseArray(int *values, int length)
{
	for (int i = 0; i < (length/2); i++) {
		int tmp;
		tmp = values[i];
		values[i] = values[length - 1 -i];
		values[length - 1 -i] = tmp;
	}

}",1
fwil727,1696109598,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap elements at start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move towards the center of the array
        start++;
        end--;
    }
}

int main() {
    

    ReverseArray(values, length);

    printf(""Reversed array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", values[i]);
    }
    printf(""\n"");

    return 0;
}",0
fwil727,1696110299,2,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap the elements at the start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start and end positions towards the center
        start++;
        end--;
    }
}",1
fyan180,1696144485,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int count;
    for (int i = 0; i < length / 2; i++)
    {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = count;
    }
}",0
fyan180,1696144510,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int count;
    for (int i = 0; i < length / 2; i++)
    {
        count = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = count;
    }
}",1
gcha636,1695963248,1,"void ReverseArray (int *values, int length){

    int i;
    int temp[length];

    for (i=0; i < length; i++)
    {
        temp[i] = values[i];
    }


    for (i=0; i < length; i++) {
        values[i] = temp[length - 1 - i];
    }
}",1
ggao363,1695621953,1,"void ReverseArray(int *values, int n){
    for (int i = 0; i < n/2; i++) {
        int temp = values[i];
        values[i] = values[n - (1 + i)];
        values[n - (1 + i)] = temp;
    }

}",1
gge561,1695708711,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length) {
	int i;
	int j;
	int p;
	int s;

	for (i = 0; i < length/2; i++){
		j = length - 1 - i;
		p = values[i];
		s = values[j];
		values[i] = s;
		values[j] = p;
	}

			

}",1
gjom886,1696109753,1,"#include <stdio.h>

// The following should reverse the elements in an array
void ReverseArray(int *values, int length) // This function takes a integer of array and its length.
{
    int j; // initialize j variable
    for (j = length - 1; j >= 0; j--) {  //This code creates a for loop which decrements the j variable which go through each value in array.
        printf(""%d "", values[j]); // This prints the values in reverse order
    }
    

}",0
gjom886,1696126316,2,"#include <stdio.h>

// The following should reverse the elements in an array
void ReverseArray(int *values, int length) // This function takes a integer of array and its length.
{
    
    int j; // Initialise j variable which will increment
    int HalfArray = length/2; // This gives variable which will help to iterate through half of the array
    int Var; //Initialise variable to store values within in the array.
    int variable;
    variable = length - 1;
 
 while (j < HalfArray)
 {
   Var = values[j]; // This code stores the value with j index in the values array
   // The following code swaps the elements of the values array
     values[j] = values[length - 1 - j]; 
    values[length - 1 - j] = Var;
    // Increment the j variable
    j = j + 1;
 variable--; //decrement the variable
}",0
gjom886,1696126369,3,"#include <stdio.h>

// The following should reverse the elements in an array
void ReverseArray(int *values, int length) // This function takes a integer of array and its length.
{
    
    int j; // Initialise j variable which will increment
    int HalfArray = length/2; // This gives variable which will help to iterate through half of the array
    int Var; //Initialise variable to store values within in the array.
    int variable;
    variable = length - 1;
 
 while (j < HalfArray)
 {
   Var = values[j]; // This code stores the value with j index in the values array
   // The following code swaps the elements of the values array
     values[j] = values[length - 1 - j]; 
    values[length - 1 - j] = Var;
    // Increment the j variable
    j = j + 1;
 variable--; //decrement the variable
}
}",0
gjom886,1696127136,4,"#include <stdio.h>

// The following should reverse the elements in an array
void ReverseArray(int *values, int length) // This function takes a integer of array and its length.
{
    
    int j; // Initialise j variable which will increment
    int HalfArray = length/2; // This gives variable which will help to iterate through half of the array
    int Var; //Initialise variable to store values within in the array.
    int variable;
    variable = length - 1;
 
 while (j < HalfArray)
 {
   Var = values[variable];
   // The following code swaps the elements of the values array
     values[variable] = values[j];
    values[j] = Var;
    // Increment the j variable
    j = j + 1;
 variable= variable - 1; //decrement the variable
}
}",0
gjom886,1696128614,5,"#include <stdio.h>

// The following should reverse the elements in an array
void ReverseArray(int *values, int length) // This function takes a integer of array and its length.
{
    
    int j = 0; // Initialise j variable which will increment
    
    int Var; //Initialise variable to store values within in the array.
    int variable;
    variable = length - 1;
 
 while (j < variable)
 {
   Var = values[j];
   // The following code swaps the elements of the values array
     values[j] = values[variable];
    values[variable] = Var;
    // Increment the j variable
    j = j + 1;
 variable= variable - 1; //decrement the variable
}
}
",1
gmal045,1695676636,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int j = 0, valuesReverse[length];
    for (int i=length-1;i>-1;i--)
    {
        valuesReverse[j] = values[i];
        j++;
    }
    for (int i=0;i < 7;i++)
    {
        values[i] = valuesReverse[i];
    }
}",0
gmal045,1695676729,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int j = 0, valuesReverse[length];
    for (int i=length-1;i>-1;i--)
    {
        valuesReverse[j] = values[i];
        j++;
    }
    for (int i=0;i < length;i++)
    {
        values[i] = valuesReverse[i];
    }
}",1
gmoh887,1695691861,1,"#include <stdio.h>
void ReverseArray(int *values, int length)
{
	for (int i = 0; i < length / 2; i++) {
		int copy = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = copy;
	}
}",1
gpen695,1695866528,1,"void ReverseArray(int *values, int length)
{
    int placeHolder;
    int i;
    int lastValue = length-1;
    
    for(i=0;i<length/2;i++)
    {
        placeHolder = values[i];
        values[i] = values[lastValue];
        values[lastValue] = placeHolder;
        
        lastvalue--;
    }
}",0
gpen695,1695866548,2,"void ReverseArray(int *values, int length)
{
    int placeHolder;
    int i;
    int lastValue = length-1;
    
    for(i=0;i<length/2;i++)
    {
        placeHolder = values[i];
        values[i] = values[lastValue];
        values[lastValue] = placeHolder;
        
        lastValue--;
    }
}",1
gren419,1696233740,1,"void ReverseArray(int *values, int length)
{
    int half;
    int i;
    int value;
   
    
    if(length%2 == 0){
        half = length/2;
    }else{
        half = (length-1)/2;
    }
    
    i = 0;
    while(i<half){
        value = values[length-1-i];
        values[length-1-i] = values[0+i];
        values[0+i] = value;
        i++;
    }
    
    
}
",1
gvan573,1696202051,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
	//find the number of positions in the array minus the position 0
	int a = length - 1;
	//point to the first value of the array, the pointer is already pointing at the first position
	int *firstValue = values;
	//point to the last value of the array by adding a, this moves the pointer to the last position
	int *lastValue = values + a;

	//to stop when they meet in the middle, else they reverse again
	while (firstValue < lastValue) {

		//initialise the value in question
		int value; 

		//set value to the value of what firstValue is pointing at
		value = *firstValue; 

		//switch the positions around so what would be the firstValue becomes the lastValue
		*firstValue = *lastValue;

		//set the value of the first position to the value of the last position
		*lastValue = value;

		//move firstValue along one position in the array
		firstValue++;

		//move lastValue along one position in the array toward the start
		lastValue--; 

	}
}
",1
gxu660,1695700620,1,"void ReverseArray(int *values, int length)
{
	int first_num;
	for (int i = 0; i <= (length - 1) / 2; i++) {
		first_num = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = first_num;
	}
}
",1
gzho986,1695805206,1,"#include <stdio.h>

void ReverseArray ( int values[], int length){
    int i = 0;
    int end = length - 1;

    while (i<end) {
        int temp = values[i];
        values[i]= values[end];
        values[end]= temp;

        i++;
        end--;
    } 
}",1
hama210,1695782560,1,"void ReverseArray(int values[], int length)

{
	int i; 
	int temp; 
	for (i = 0; i < length; i++) {
		temp = values[i]; 
		values[i] = values[length - i - 1]; 
		values[length - i - 1] = temp; 
	}
}",0
hama210,1695782910,2,"void ReverseArray(int values[], int length)

{
	int i; 
	int temp; 
	for (i = 0; i < length / 2; i++) {
		temp = values[i]; 
		values[i] = values[length - i - 1]; 
		values[length - i - 1] = temp; 
	}
}",1
haus879,1695861221,1,"void ReverseArray(int* values, int length)
{
	for (int i = 0; i < length * 0.5; i++) {
		int temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;


	}
}",1
hbas168,1696053645,1,"int ReverseArray(int values[], int length) {
    for (int i = 0; i < length / 2; i++) {
        int initial = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = initial;
    }

    return 0;
}",1
hber510,1695802526,1,"void ReverseArray(int *values, int length)
{
    int i;
    for (i=0; i<=(length/2 - 1); i++) {
        int valA = values[i];
        int valB = values[length - 1 - i];
        values[i] = valB;
        values[length - 1 - i] = valA;
    }
}",1
hbhe454,1696241837,1,"int ReverseArray(int*values,int length)
{
    int ()
    int start=0, end=length-1;
    
    while(start<end){
        ()=values[start];
         values[start]=values[end];
         values[end]=() ;
         start++
         end-- ;
         
    }
    retun* values;
     
       
       
    }",0
hbhe454,1696241917,2,"int ReverseArray(int*values,int length)
{
    int placeholder
    int start=0, end=length-1;
    
    while(start<end){
        placeholder=values[start];
         values[start]=values[end];
         values[end]=placeholder ;
         start++
         end-- ;
         
    }
    retun* values;
     
       
    }",0
hbhe454,1696241981,3,"int ReverseArray(int *values,int length)
{
    int placeholder;
    int start=0, end=length-1;
    
    while(start<end){
        placeholder=values[start];
         values[start]=values[end];
         values[end]=placeholder ;
         start++
         end-- ;
         
    }
    return* values;
     
       
    }",0
hbhe454,1696242043,4,"int ReverseArray(int *values,int length)
{
    int placeholder;
    int start=0, end=length-1;
    
    while(start<end){
        placeholder=values[start];
         values[start]=values[end];
         values[end]=placeholder ;
         start++;
         end-- ;
         
    }
    return* values;
     
       
    }",1
hbhe454,1696779428,1,"int ReverseArray(int *values,int length)
{
    int placeholder;
    int start=0, end=length-1;
    
    while(start<end){
        placeholder=values[start];
         values[start]=values[end];
         values[end]=placeholder ;
         start++;
         end-- ;
         
    }
    return* values;
     
       
    }",1
hbou314,1695802914,1,"void ReverseArray(int *values, int length)
{
	int temp[1000];
	int count, i;

	count = length - 1;

	for (i = 0; i < length; i++) {
		temp[i] = values[count];
		count--;
	}

	for (i = 0; i < length; i++) {
		values[i] = temp[i];
	}
}",1
hcha410,1695786260,1,"#include <stdio.h>



// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
     int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }

}
",1
hche410,1696216576,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    if (values == NULL || length <= 1) {
        return;
    }

    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
hche864,1695696044,1,"void ReverseArray(int *values, int length)
{
	int i;
	int j;
	int temp;
	for (i = 0; i < length/2; i++) {
		
		temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
		
		
		
		
	}


}",0
hche864,1695696094,2,"void ReverseArray(int *values, int length)
{
	int i;
	int temp;
	for (i = 0; i < length/2; i++) {
		
		temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
		
		
		
		
	}


}",1
hcop563,1695701669,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i;
	int tempValue;
	i = 0;
	
	while (i < length / 2){
		tempValue = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = tempValue;
		i++;
	}
}",1
hcro730,1695636494,1,"void ReverseArray(int *values, int length)
{
	int valuesRev[1000];
	for (int i = length-1; i >= 0; i--) {
		valuesRev[length-1-i] = values[i];
	};
	for (int i = 0; i < length; i++) {
		values[i] = valuesRev[i];
	}
}
",1
hcro730,1695697011,2,"void ReverseArray(int* values, int length)
{
	for (int i = 0; i < length/2; i++) {
		int low = values[length - 1 - i];
		int high = values[i];
		values[i] = low;
		values[length - 1 - i] = high;
	};
}",1
hdeg917,1696212089,1,"int ReverseArray(int values[], int length)
{
    int hold;
	int i; 
	for (i = 0; i < (length/2); i++)
	{
	hold = values[i];
	values[i] = values[length-i-1];
	values[length-i-1] = hold;
		
	}
	
	return values;
}",0
hdeg917,1696212321,2,"void ReverseArray(int values[], int length)
{
    int hold;
	int i; 
	for (i = 0; i < (length/2); i++)
	{
	hold = values[i];
	values[i] = values[length-i-1];
	values[length-i-1] = hold;
		
	}
}",1
hgao080,1695615684,1,"void ReverseArray(int* values, int length)
{
	int index = length - 1; int temp;

	for (int i = 0; i < length / 2; i++) {
		temp = values[i];
		values[i] = values[index];
		values[index] = temp;
		index--;
	}
}",1
hgou636,1695869265,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int *firstvalue = values;
    int *lastvalue = length + values- 1;
    
    for (int i = 0; i < length / 2; i++) {
        int newvalue = *firstvalue;
        *firstvalue = *lastvalue;
        *lastvalue = newvalue;
        firstvalue = firstvalue + 1;
        lastvalue = lastvalue - 1;
    }
}",1
hhil451,1696232411,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void ReverseArray(int* values, int length)
{
    int i;
    int array;

    for (i = 0; i < length / 2; i++)
    {
        
        array = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = array;
    }
}
",1
hjoo911,1695696064,1,"#include <stdio.h>

//Define this function, which should reverse the elements in an array 

void ReverseArray(int *values, int length)
{
    int i = length;
    int temporary[length];
    
    for (int i = 0; i < length ; i++) {
        temporary[i] = values[i];
}

    for (int i = length - i; i >= 0; i--) {
            values[i] = temporary[length - values[i]];
        
    }
 
}",0
hjoo911,1695696686,2,"#include <stdio.h>

//Define this function, which should reverse the elements in an array 

void ReverseArray(int *values, int length)
{
    int temporary[length];
    
    for (int i = 0; i < length ; i++) {
        temporary[i] = values[i];
}

    for (int i = length - i; i >= 0; i--) {
            values[i] = temporary[length - i - 1];
        
    }
 
}",0
hjoo911,1695696747,3,"#include <stdio.h>

//Define this function, which should reverse the elements in an array 

void ReverseArray(int *values, int length)
{
    int i;
    int temporary[length];
    
    for (int i = 0; i < length ; i++) {
        temporary[i] = values[i];
}

    for (int i = length - i; i >= 0; i--) {
            values[i] = temporary[length - i - 1];
        
    }
 
}",0
hjoo911,1695698079,4,"#include <stdio.h>

//Define this function, which should reverse the elements in an array 

void ReverseArray(int *values, int length)
{
    int i=0;
    int j=0;
    int temporary[length];
    
    for (i = 0; i < length ; i++) {
        temporary[i] = values[i];
}

    for (j = length ; j >= 0; j--) {
            values[j] = temporary[length - j - 1];
        
    }
 
}",1
hkah523,1696141383,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
/*author: Harshdeep Kahlon*/

void ReverseArray(int *values, int length) {
    if (values == NULL || length <= 1) {
        // No need to reverse if the array is empty or has only one element
        return;
    }

    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap the elements at start and end positions

        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start and end pointers towards each other
        start++;
        end--;
    }
}

",1
hkee941,1696228929,1,"void ReverseArray(int *values, int length) {
    int n;
    for (int i = 0; i < length / 2; i++) {
        n = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = n;
    }
}",1
hkim807,1696049034,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;

	for (start = 0; start < end; start++) {
		int number = values[start];
		values[start] = values[end];
		values[end] = number;
		end = end - 1;
	}

}",1
hkon883,1696217401,1,"#include <stdio.h>  
  
void ReverseArray(int *values, int length) {  
    int temp, i;  
    for (i = 0; i < length / 2; i++) {  
        temp = values[i];  
        values[i] = values[length - 1 - i];  
        values[length - 1 - i] = temp;  
    }  
}  
int main() {  
    int arr[] = {1, 2, 3, 4, 5};  
    int size = sizeof(arr) / sizeof(arr[0]);  
    for (int i = 0; i < size; i++) {  
        printf(""%d "", arr[i]);  
    }  
    ReverseArray(arr, size);  
    printf(""\nReversed Array: "");  
    for (int i = 0; i < size; i++) {  
        printf(""%d "", arr[i]);  
    }  
    return 0;  
}",0
hkon883,1696231920,2,"#include <stdio.h>  
  
void ReverseArray(int *values, int length) {  
    int temp, i;  
    for (i = 0; i < length; i++) {  
        temp = values[i];  
        values[i] = values[length - i];  
        values[length - i] = temp;  
    }  
}  
",0
hkon883,1696232590,3,"#include <stdio.h>  
  
void ReverseArray(int *values, int length) {  
    int i;  
    for (i = 0; i < length; i++) {  
        values[i] = values[length - i];  
    }  
}  
",0
hkon883,1696232719,4,"#include <stdio.h>  
  
void ReverseArray(int *values, int length) {  
    int i;  
    for (i = 1; i < length; i++) {  
        values[i+1] = values[length - i];  
    }  
}  
",0
hkon883,1696234002,5,"#include <stdio.h>  
void ReverseArray(int *values, int length) {  
	int temp, i;  
    for (i = 0; i < length/2; i++) {  
        temp = values[i];  
        values[i] = values[length - i- 1];  
        values[length - 1- i] = temp;
    }  
}  ",1
hlee999,1695610373,1,"void ReverseArray(int *values, int length)
{
	int i;
	for (i = 0; i < length / 2; i++) {
		int temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}
}",1
hleu459,1695693437,1,"void ReverseArray(int values[], int length)
{
    int i;
    for (i = 0; i < length; i++) {
        printf(""%d "", values[length - 1 - i]);
    }
    return;
}",0
hleu459,1695713930,2,"void ReverseArray(int values[], int length)
{
    int temp;
    int i;
    for (i = 0; i < length/2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
    return;
}",1
hliu836,1695905612,1,"void ReverseArray(int *values, int length)
{
    int j;
    int i;
    int temp;
    j=length-1;

    for (i=0; i<j; i++, j--) {
        temp = values[i];
        values[i] = values[j];
        values[j] = temp;
    }
}



",1
hliu836,1695905923,2,"void ReverseArray(int *values, int length)
{
    int j;
    int i;
    int array1[length];
    j=0;

    for (i=length-1; i>=0; i--) {
        array1[j] = values[i];
        j = j+1;
    }
    for (i=0; i <length; i++) {
        values[i] = array1[i];
    }
     

}


",1
hly852,1695866847,1,"void ReverseArray(int *values, int length)
{   
    int i = 0;
    int j = 0;
    int new_arr[length];
    
    for (i = 0; i < length; i++){
        new_arr[i] = values[length-1-i];
    }
    for (j = 0; j < length; j++){
        values[j] = new_arr[j];
    }
}",1
hma481,1695999982,1,"void ReverseArray(int* values, int length)
{
	for (int i = 0; i <= length / 2; i++) {
		int temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}
}",0
hma481,1696000221,2,"void ReverseArray(int* values, int length)
{
	for (int i = 0; i < length / 2; i++) {
		int temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}
}",1
hmcm582,1695680566,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;

    while (start < end) {
        
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
hmel649,1695626427,1,"void ReverseArray(int arr[], int num) {

for (int i = num - 1; i > -1; i--) { 
   printf(""%d "", arr[i]); 
}
}",0
hmel649,1695631697,2,"void ReverseArray(int arr[], int num) {
    for (int i = 0; i < num/2; i++) {
        int val = arr[i];
        arr[i] = arr[num - 1 - i];
        arr[num - 1 - i] = val;
    }
}",1
hmof971,1695876499,1,"void ReverseArray(int *values, int length)
{
	int i;
	int middle;
	i = 0;
	while (i < (length / 2)) {
		middle = values[i];
	values[i] = values[(length-1)-i];
	values[(length-1) -i]=middle;
	i++;
}
}",1
hnew638,1695615368,1,"void ReverseArray(int *values, int length)
{
	int newArray[length];

	for(int i = 0; i < length; i++)
	{
		newArray[i] = values[length - (i + 1)];
	};
	for (int i = 0; i < length; i++)
	{
		values[i] = newArray[i];
	};
	

}",1
hpan363,1696132676,1,"void ReverseArray(int values[], int length) 
{
    int i, j;
    for (i = 0; i < length; i++) 
    {
        j = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = values[length];
    }
}",0
hpan363,1696134017,2,"void ReverseArray(int values[], int length) 
{
    int i;
    for (i = 0; i < length; i++) 
    {
        values[i] = values[i] + values[length - i - 1];
        values[length - i - 1] = values[i] - values[length - i -1];
        values[i] = values[i] - values[length - i - 1]; 
    }
}",0
hpan363,1696134099,3,"void ReverseArray(int values[], int length) 
{
    int i;
    for (i = 0; i < length / 2; i++) 
    {
        values[i] = values[i] + values[length - i - 1];
        values[length - i - 1] = values[i] - values[length - i -1];
        values[i] = values[i] - values[length - i - 1]; 
    }
}",1
hpat916,1695634096,1,"void ReverseArray(int *values, int length)
{
	/* Initialise variables to be used later on. */
	int position = 0;
	int tempValue;
	int i;

	/* For loop to run through the array in reverse order and swap values as you descend. */
	for (i = length-1; i >= length/2; i--) {
		tempValue = values[position];
		values[position] = values[i];
		values[i] = tempValue;
		position += 1;
	}
}",1
hpir641,1695856955,1,"#include <stdio.h>
#include <math.h>
void ReverseArray(int* values, int length) {
	int temp, i, j;
	for (i = 0; i < ceil((length - 1) / 2); i++) {
		temp = values[i];
		j = length - 1 - i;
		values[i] = values[j];
		values[j] = temp;
	}
}",0
hpir641,1695857348,2,"#include <stdio.h>
#include <math.h>
void ReverseArray(int* values, int length) {
	int temp, i, j;
	for (i = 0; i < ceil((length) / 2); i++) {
		temp = values[i];
		j = length - 1 - i;
		values[i] = values[j];
		values[j] = temp;
	}
}",1
hrob997,1696153038,1,"void ReverseArray(int *values, int length)
{
	int i; 
	int j = 0;
	int tempi; 
	int tempj;
	int stop; 

	if (length % 2 == 0) {
		stop = length / 2;
	}
	else {
		stop = (length - 1) / 2;
	}

	for (i = length - 1; i >= stop; i--) {
		tempi = values[i]; 
		tempj = values[j];
		values[i] = tempj; 
		values[j] = tempi; 
		j += 1; 
	}
}",1
hsan267,1695864672,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int i;
	int temp;
	double newlength;

	newlength = (double)length / 2;

	for (i=0; i<newlength; i++) {
		temp = values[i];
		values[i] = values[length - (1+i)];
		values[length - (1+i)] = temp;
	}
	
}",1
hson435,1696232937,1,"void ReverseArray(int *values, int length) {
    int i;
    int begin = 0;
    int end = length - 1;
    int temp;
    while (begin < end) {
        temp = values[begin];
        values[begin] = values[end];
        values[end] = temp;
        begin++;
        end--;
    }
}",0
hson435,1696233044,2,"void ReverseArray(int *values, int length) {
    int begin = 0;
    int end = length - 1;
    int temp;
    while (begin < end) {
        temp = values[begin];
        values[begin] = values[end];
        values[end] = temp;
        begin++;
        end--;
    }
}",1
htew916,1695786773,1,"#define _CRT_NO_WARNINGS
#include <stdio.h>

// The function, ReverseArray passes two inputs, an array of integers, and the number of elements in the array, which should modify the array so that the elements are arranged in the reverse order to their original order.

// Define the function, ReverseArray.

void ReverseArray(int *values, int size) 
{
    int start = 0;
    int end = size - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}",1
htho943,1695626314,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
   author hamish thompson
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int start = 0;
    int end = length - 1;   

    while (start < end) {
        int starter = values[start];
        values[start] = values[end];
        values[end] = starter;

        start++;
        end--;
    }
}",1
htyl682,1696233504,1,"#include <stdio.h>
#include <math.h>
#include <string.h>

int ReverseArray(int *values, int a){
    int storevalue;
    for (int i = 0; i < a/2; i++){
        storevalue=values[i];
        values[i]=values[a-i-1];
        values[a-i-1]=storevalue;
    }
}",0
htyl682,1696233561,2,"#include <stdio.h>
#include <math.h>
#include <string.h>

void ReverseArray(int *values, int a){
    int storevalue;
    for (int i = 0; i < a/2; i++){
        storevalue=values[i];
        values[i]=values[a-i-1];
        values[a-i-1]=storevalue;
    }
}",1
hugn924,1696232678,1,"#include <stdio.h>

void ReverseArray(int values[], int size)
{
    int i = 0;

    for (i = size-1; i>=0; i--) {

        printf(""%d "", values[i]);
    }
}",0
hugn924,1696237450,2,"#include <stdio.h>

void ReverseArray(int values[], int size)
{

    for (int i = 0; i < size/2 ; i++) {

        int tempvalue = values[i];
        values[i] = values[size - i - 1];
        values[size - i - 1] = tempvalue;

    }
}",1
hwen116,1695633682,1,"void ReverseArray(int *values, int length) 
//Arrays automatically have pointers and *values means values[]
//Need 2 arrays: one is original and one is the reversed otherwise it will keep overwriting it
{
    //Storing the original array
    int i;
    int original[length];
    for (i=0; i<length; i++){
        original[i]=values[i];
    }

    //Reversing the array
    for (i=0;i<length; i++){
        values[i]=original[length-i-1];
    }
}",1
hwin877,1695688153,1,"void ReverseArray(int* values, int length)
{
	int up_counter = 0;
	int x;
	int counter = length - 1;
	while (up_counter <= counter)
	{
		x = values[up_counter];
		values[up_counter] = values[counter];
		values[counter] = x;
		counter--;
		up_counter++;
	}
}",1
hyan713,1695680807,1,"void ReverseArray(int *values, int length)
{
    int i,j,temp;
    j = 0;
    
    for (i = length-1; i>length/2; i--){
        temp = values[i];
        values[i] = values[j];
        values[j] = temp;
        j++;
    }
}",0
hyan713,1695681043,2,"void ReverseArray(int *values, int length)
{
    int i,j,temp;
    j = 0;
    
    for (i = length-1; i>length/2-1; i--){
        temp = values[i];
        values[i] = values[j];
        values[j] = temp;
        j++;
    }
}",1
hye071,1695741745,1,"/******************************************************************************

LAB 9(question 1)
*******************************************************************************/
#include <stdio.h>

void ReverseArray(int array[], int length){

int temp_reversed[length];

for(int i=length-1, j=0; i>=0; i=i-1, j=j+1) {

temp_reversed[j]=array[i];

}

for (int i=0; i<length; i=i+1) {
    array[i]=temp_reversed[i];
    
}
}",1
ibha186,1695695971,1,"void ReverseArray(int *values, int length) {
    int i = 0;
    int index;
    for (i = 0; i <length; i++) {
        index = length-i;
        values[i] = index;
    }
}",0
ibha186,1695696548,2,"void ReverseArray(int *values, int length) {
    int i = 0;
    int index;
    int arr[length];
    for (i = 0; i <length; i++) {
        index = length-1-i;
        arr[i] = values[index];
    }
    for (i = 0; i <length; i++) {
        values[i] = arr[i];
    }
}",1
ibur427,1695684417,1,"void ReverseArray(int *values, int length)
{
	int toswitch;

	for (int i = 0; i < length/2; i++) {
	   toswitch = values[i];
	   values[i] = values[(length - i - 1)];
	   values[(length - i - 1)] = toswitch;
	}
}",1
iche428,1696074910,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int *pos;
	int reverse[length];
	
	int k = 0;
	for (int i=length-1; i>=0; i--) {
		pos = &values[i];
		reverse[k] = *pos;
		k = k+1;
	}
	
	for (int i=0; i<length; i++) {
    	values[i] = reverse[i];
	}
}",1
ihoo440,1695958087,1,"void ReverseArray(int *values, int length)
{
	int x;
	for (int i = 0; i < length/2; i++) {
		
		x = values[i];
		values[i] = values[length - i];
		values[length - i] = x;
	}
}",0
ihoo440,1695958306,2,"void ReverseArray(int *values, int length)
{
	int p;
	int x;
	for (int i = 0; i < length/2; i++) {
		
		p = length - 1;
		x = values[i];
		values[i] = values[p - i];
		values[p - i] = x;
	}
}",1
ikis164,1695966934,1,"#include <stdio.h>
#include <math.h>

void ReverseArray(int *arr, int size)
{
   for (int i = 0; i < size / 2; i++) {
       int temp = arr[i];
       arr[i] = arr[size - i - 1];
       arr[size - i - 1] = temp;
   }
}",1
iko203,1695764550,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
    int* StartValue = values;
    int* EndValue = values + length - 1;
    int Temp;

    while (StartValue < EndValue) {
    
        Temp = *StartValue;
        *StartValue = *EndValue;
        *EndValue = Temp;

        StartValue++;
        EndValue--;
    }
}
",1
ilee973,1696043074,1,"#include <stdio.h>
void ReverseArray(int *values, int length)
{
    int i;
    int S;
  
  for (i = 0; i < length/2; i++){
  

  S= values[i];
  values[i] = values[length-i-1];
  values[length-i-1] = S;
  }
}",1
imac384,1695780996,1,"void ReverseArray(int *values, int length)
{
	int end = length - 1;
	for (int i = 0; i < length; i++) {
		while (i < end) {
			int temp = values[i];
			values[i] = values[end];
			values[end] = temp;
			i++;
			end--;
		}
		}

}",1
imoh000,1695629416,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int start = 0; //initialisation
    int end = length - 1; //last index of the array
    while (start < end)
    {
        int temporary = values[start];
        values[start] = values[end];
        values[end] = temporary; //using a temporary variable to swap the starting and ending value(s)
        start++; //incremeanting the start value by 1
        end--; //decremeanting the end value by 1
    }
}",1
iwes050,1695692729,1,"#include <stdio.h>
void ReverseArray(int *values, int length)
{
    int i;
    int store;
    for (i = 0; i < length/2; i++) {
    store = values[length - i - 1];
    values[length - i - 1] = values[i];
    values[i] = store;

    }
}
",1
iwil997,1696216996,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    //i = start of array
    //j = end of array 
    
    int i;
    int j = length - 1;
    int position;
    
    for (i = 0; i < length; i++) {
        position = values[i];
        values[i] = values[j];
        values[j] = position;
      
        j--;
        
        printf(""%d "", values[i]);
    }
}



",0
iwil997,1696228789,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int j = length -1;
    int position;
    
    for (i = 0; i < j; i++, j--) {
        position = values[i];
        values[i] = values[j];
        values[j] = position;
    }
}

",1
iwoo382,1695630972,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int result[length];
	for (int i = 0; i < length; i++) {
		result[i] = values[length-1-i];
	}

	for (int j = 0; j < length; j++) {
		values[j] = result[j];
	}

}",1
ixia229,1695726408,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i, j, k;
	for (i = 0; j = length - 1; i < j; i++; j--)
	k = values[i];
	values[i] = values[j];
	values[j] = k;
}",0
ixia229,1696156342,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int i, j, TempVal;
	j = length - 1;
	
	for(i = 0, j; i < j; i++, j--){
		TempVal = values[i];
		values[i] = values[j];
		values[j] = TempVal;
	}
}
",0
ixia229,1696160291,3,"void ReverseArray(int *values, int length)
{
    int i, j, TempVal;
    j = length - 1;

    for(i = 0; i < length/2; i++){
        TempVal = values[i];
        values[i] = values[j - i];
        values[j - i] = TempVal;
    }
}",1
ixu871,1695852125,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int *beginning = values;            
    int *end = values + length - 1; // point to the begginning and end  of array

    while (beginning < end) {
       
        int Array2 = *beginning;
        *beginning = *end;
        *end = Array2;

        // Move the start and end pointers in the loop 
        beginning++;
        end--;
    }
}

",1
jahn224,1695633785,1,"void ReverseArray(int values[], int length)
{
    int save_value;
    int i, end = length - 1;
    
    for (i = 0; i < length /2; i++) {
        save_value = values[i];
        values[i] = values[end];
        values[end] = save_value;
        end--;
    }
}",1
jaus241,1695765092,1,"void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    int times;
    
    times = length / 2;
    
    
    
    for (i = 0; i < times; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
jbag235,1696229649,1,"void ReverseArray(int *values, int length)
{
	int i = 0;
	length = length - 1;
	while (i < length) {
		int temp = values[i];
		values[i] = values [length];
		values[length] = temp;
		i++;
		length--;
	}
}",1
jbam701,1696199125,1,"void ReverseArray(int* values, int length)
{
    int i;
    int value;
    int numbers[30];

    for (i = 0; i < length; i = i + 1) {
        value = values[(length-1) - i];
        numbers[i] = value;
    }
    for (i = 0; i < length; i = i + 1) {
        values[i] = numbers[i];
    }
}",1
jbam753,1696150811,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;
	
	while (start < end) {
		int store = values[start];
		values[start] = values[end];
		values[end] = store;

		start++;
		end--;
	}

}",1
jbis394,1695913268,1,"void ReverseArray(int *values, int length)
{
for (int i = 0; i < length/2; i++)
{
int a=values[i];
values[i]=values[length - i - 1];
values[length - i - 1] = a; }
}
",1
jbro301,1695699931,1,"#include <stdio.h>

// Reverse array takes as its inputs an array and the array length. It outputs an array with the elements in reverse order

void ReverseArray(int *values, int length)
{
int i;
int j;
int temp[length];

// Find the midpoint position of the array
if ((length % 2)==0) {
j=length/2;
}else {
j=(length+1)/2;
}

//Create a temporary array as a replica of the original array
for (i=0;i<length;i++) {
temp[i]=values[i];
}

// Replace first half of values array with mirrored values of the values
for (i=0;i<j;i++) {
    values[i]=values[length-(i+1)];
}
// Replace the second half of the array with the mirrored values of the temporary array
for (i=j;i<length;i++) {
    values[i]=temp[length-(i+1)];
}

}",1
jbru537,1696208273,1,"void ReverseArray(int *values, int length)

{
   int leftside = 0;
   int arrlength = length - 1;
   int lefthold;

   while (leftside<length/2) 
   {
     lefthold = values[leftside];
     values[leftside] = values[arrlength - leftside];
     values[arrlength - leftside] = lefthold;
    
    leftside++;
    }


}",1
jbuc296,1696159525,1,"void swap(int * number_1, int * number_2) {
  int temp = * number_1;
  * number_1 = * number_2;
  * number_2 = temp;
}

void ReverseArray(int * values, int length) {
  int remainder = length % 2;
  int remainder_2 = length / 2;
  int counter = length - 1;
  int i;
  printf(""remainder :%d, remainder_2 :%d"", remainder, remainder_2);
  if (remainder == 0) {
    for (i = 0; i < remainder_2; i++) {

      swap( & values[i], & values[counter]);
      counter = counter - 1;
    }
  } else {
    for (i = 0; i < remainder_2; i++) {

      swap( & values[i], & values[counter]);
      counter = counter - 1;
    }
  }

}",0
jbuc296,1696159681,2,"void swap(int * number_1, int * number_2) {
  int temp = * number_1;
  * number_1 = * number_2;
  * number_2 = temp;
}

void ReverseArray(int * values, int length) {
  int remainder = length % 2;
  int remainder_2 = length / 2;
  int counter = length - 1;
  int i;

  if (remainder == 0) {
    for (i = 0; i < remainder_2; i++) {

      swap( & values[i], & values[counter]);
      counter = counter - 1;
    }
  } else {
    for (i = 0; i < remainder_2; i++) {

      swap( & values[i], & values[counter]);
      counter = counter - 1;
    }
  }

}
",1
jcha513,1695986801,1,"void ReverseArray(int *values, int length)
{
    int reversedValues[length];
    int i;
    for(i=0; i<length; i++) {
        reversedValues[i]=values[length-1-i];
    }
    
    for(i=0; i<length; i++) {
        values[i] = reversedValues[i];
    }
}",1
jcha574,1695606396,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int newarray[length];
    for (i=0;i<length;i++) {
    newarray[i] = values[((length-1)-i)];
}
    for (int i = 0; i < length; i++)
    values[i]=newarray[i];
}",1
jcha972,1695701334,1,"void ReverseArray(int *values, int length)
{
    int t;
    
    for (int j = 0; j < (length - 1)/2; j++) {
        t = values[length - 1 - j];
        values[length - 1 - j] = values[j];
        values[j] = t;
    }
}",0
jcha972,1695701467,2,"void ReverseArray(int *values, int length)
{
    int t;
    
    for (int j = 0; j < (length + 1)/2; j++) {
        t = values[length - 1 - j];
        values[length - 1 - j] = values[j];
        values[j] = t;
    }
}",1
jche456,1696230270,1,"void ReverseArray(int *values, int length)
{
	int i, j, placeholder;
	for (i = 0, j = length - 1; i < j; i++, j--) {
		placeholder = values[i];
		values[i] = values[j];
		values[j] = placeholder;
	}
}",1
jchi648,1696029134,1,"void ReverseArray(int *values, int length) {
    int i, temp;
    while (i < length-1) {
        if (i == length -1) {
            values[i] = values[length-1];
        } else {

            temp = values[i];
            values[i] = values[length-1];
            values[length-1] = temp;
            i++;
            length--;
        }
    }
}",0
jchi648,1696029585,2,"void ReverseArray(int *values, int length) {
    int i, temp;
    while (i < length-1) {
        if (i == length-1) {
            values[i] = values[length-1];
        } else {
            temp = values[i];
            values[i] = values[length-1];
            values[length-1] = temp;
            i++;
            length--;
        }
    }
}",0
jchi648,1696145263,3,"void ReverseArray(int *values, int length) {
    int i, temp = 0;
    while (i < length-1) {
        if (i == length-1) {
            values[i] = values[length-1];
        } else {
            temp = values[i];
            values[i] = values[length-1];
            values[length-1] = temp;
            i++;
            length--;
        }
    }
}",0
jchi648,1696146087,4,"void ReverseArray(int *values, int length)
{
    int i, temp = 0;
        while (i < length-1) {
            if (i == length-1) {
                values[i] = values[length-1];
            } else {
                temp = values[i];
                values[i] = values[length-1];
                values[length-1] = temp;
                i++;
                length--;
            }
        }
}",0
jchi648,1696146509,5,"void ReverseArray(int *values, int length) {
    int i, temp = 0;
    int b = length-1;
        while (i < b) {
            if (i == b) {
                values[i] = values[b];
            } else {
                temp = values[i];
                values[i] = values[b];
                values[b] = temp;
                i++;
                length--;
            }
        }
}",0
jchi648,1696146527,6,"void ReverseArray(int *values, int length) {
    int i, temp = 0;
    int b = length-1;
        while (i < b) {
            if (i == b) {
                values[i] = values[b];
            } else {
                temp = values[i];
                values[i] = values[b];
                values[b] = temp;
                i++;
                b--;
            }
        }
}",0
jchi648,1696146574,7,"void ReverseArray(int *values, int length) {
    int i, temp = 0;
    int b = length-1;
        while (i < b) {
            if (i == b || i == b+1) {
                values[i] = values[b];
            } else {
                temp = values[i];
                values[i] = values[b];
                values[b] = temp;
                i++;
                b--;
            }
        }
}",0
jchi648,1696146788,8,"void ReverseArray(int *values, int length) {
    int i, temp = 0;
    int b = length-1;
        while (i < b) {
            if (i == b || i == b+1) {
                values[i] = values[b];
            } else {
                temp = values[i];
                printf(""%d "", temp);
                values[i] = values[b];
                values[b] = temp;
                i++;
                b--;
            }
        }
}",0
jchi648,1696146799,9,"void ReverseArray(int *values, int length) {
    int i, temp = 0;
    int b = length-1;
        while (i < b) {
            if (i == b) {
                values[i] = values[b];
            } else {
                temp = values[i];
                printf(""%d "", temp);
                values[i] = values[b];
                values[b] = temp;
                i++;
                b--;
            }
        }
}",0
jchi648,1696227205,10,"void ReverseArray(int *values, int length) {
    int i, temp = 0;
    int z = floor(length/2);
    int b = length-1;
        for (int y = 0; y < z; y++) {
            if (i == b) {
                values[i] = values[b];
            } else {
                temp = values[i];
                values[i] = values[b];
                values[b] = temp;
                i++;
                b--;
            }
        }
}",0
jchi648,1696227913,11,"void ReverseArray(int *values, int length) {
    int i, temp = 0;
        for (int i = 0; i < length; i++) {
                temp = values[i];
                values[i] = values[length-1];
                values[length-1] = temp;
                length--;
        }
}",0
jchi648,1696227931,12,"void ReverseArray(int *values, int length) {
    int temp = 0;
        for (int i = 0; i < length; i++) {
                temp = values[i];
                values[i] = values[length-1];
                values[length-1] = temp;
                length--;
        }
}",1
jchu579,1695719330,1,"void ReverseArray(int* values, int length)
{
	int temp; 
	int count = 0; 
	for (int i = length-1; i >= (length)/2; i--)
	{
	    temp = values[i]; // 7
		values[i] = values[count];   // 0
		values[count] = temp; //  
		count++;
	}
}
",1
jcla431,1695695955,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int i;
	int temp;

	for (i = 0; i < length/2; i++)
	{
		temp = values[length - i - 1];
		values[length - i - 1] = values[i];
		values[i] = temp;
	}
}",1
jcla755,1695687364,1,"void ReverseArray(int *values, int length)
{
    // Swap 0,L-1, 1, L-2, 2, L-3, ... L/2
    for(int i = 0; i < length/2; i++)
    {
        int temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}",1
jdal353,1696219983,1,"#include <stdio.h>


void ReverseArray(int *values, int length) {

    int memory;
    int start = 0;
    int end = length - 1;

    while(start < end) {

    memory = values[start];
    values[start] = values[end];
    values[end] = memory;

    start++;
    end--;
    }
    
    return 0;
}",0
jdal353,1696220087,2,"#include <stdio.h>


void ReverseArray(int *values, int length) {

    int memory;
    int start = 0;
    int end = length - 1;

    while(start < end) {

    memory = values[start];
    values[start] = values[end];
    values[end] = memory;

    start++;
    end--;
    }
    
}",1
jdea126,1695966670,1,"void ReverseArray(int *values, int length)
{
	int k = length-1;
	int temp;
	for (int j = 0; j < (length/2); j++) {
		temp = values[j];
		values[j] = values[k];
		values[k] = temp;
		k--;
	}
}",1
jdu853,1695696790,1,"void ReverseArray(int *values, int length)
{

// create start values
int start = 0;
int end = length - 1;

// swap start and end values stop swapping once the middle is reached.
while(start < end){
	int temp = values[start]; 
	values[start] = values[end]; 
	values[end] = temp;
	start++;
	end--;
}

}",1
jear460,1696118341,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
jfen705,1695943611,1,"void ReverseArray(int *values, int length)
{
    int i;
    int a;
    int b;
    for (i = 0; i < length/2; i++) {
        a = values[i];
        b = length - i - 1;
        values[i] = values[b];
        values[b] = a;
    }
    
}",1
jfet156,1695989052,1,"void ReverseArray(int values[], int length) {


int throwArray[length];

for (int j = 0; j < length; j++) {
    throwArray[j] = values[j];
}

for (int i = 0; i < length; i++) {
    values[i] = throwArray[length-1-i];
}

}
",1
jgeo610,1695889458,1,"void ReverseArray(int *values, int length)
{
	int store;

	for (int i = 0; i < (length/2); i++) {
		store = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1- i] = store;
	}
}",1
jgol495,1695615369,1,"void ReverseArray(int *values, int length){
    for(int i = 0; i < length/2; i++){
        int cache = values[i];
        values[i] = values[length-i];
        values[length - i] = cache;
    }
}",0
jgol495,1695615552,2,"void ReverseArray(int *values, int length){
    for(int i = 0; i < length/2; i++){
        int cache = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = cache;
    }
}",1
jgre894,1696201766,1,"void ReverseArray(int *values, int length){
    int iterate_number = length; 
    for (int i = length-1; i >= 0; i--) {     
        printf(""%d "", values[i]);     
    }      
}",0
jgre894,1696201811,2,"void ReverseArray(int *values, int length){
    for (int i = length-1; i >= 0; i--) {     
        printf(""%d "", values[i]);     
    }      
}",0
jgre894,1696205044,3,"void ReverseArray(int *values, int length){
    
    for (int i = length-1; i >= 0; i--) {     
         
        values[i] = values[i];  
          
    }      
}",0
jhor229,1696142805,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
  int i = 0;
  int end = length - 1;
  int temp;

  while (i < end) {
    temp = values[i];
    values[i] = values[end];
    values[end] = temp;
    i++;
    end--;
  }
}

int main() 
{
  int values[0];
  int length;
  ReverseArray(values, length);

  printf(""\nReversed array: "");
  for (int i = 0; i < length; i++) 
  {
    printf(""%d "", values[i]);
  }
  return 0;
}",0
jhor229,1696142818,2,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
  int i = 0;
  int end = length - 1;
  int temp;

  while (i < end) {
    temp = values[i];
    values[i] = values[end];
    values[end] = temp;
    i++;
    end--;
  }
}
",1
jhwa027,1696158505,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;          // pointing to the start of the array
    int end = length - 1;   // pointing to the end of the array
    
    while(start < end) {
        // Swap the elements at start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        // Move pointers toward each other
        start++;
        end--;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7}; 
    ReverseArray(values, 7); 
    
    for (int i = 0; i < 7; i++) { 
        printf(""%d "", values[i]); 
    }
    
    return 0;
}
",0
jhwa027,1696158632,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int start = 0;          // pointing to the start of the array
    int end = length - 1;   // pointing to the end of the array
    
    while(start < end) {
        // Swap the elements at start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        // Move pointers toward each other
        start++;
        end--;
    }
}

",1
jjeo627,1696046185,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int posvalue;
	int newarray[length];

	for (int i = 0; i < length; i++) {
		posvalue = values[length - i -1];
		newarray[i] = posvalue;

}
	for (int i = 0; i < length; i++) {
		values[i] = newarray[i];
	}
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}

",0
jjeo627,1696046215,2,"void ReverseArray(int *values, int length)
{
	int posvalue;
	int newarray[length];

	for (int i = 0; i < length; i++) {
		posvalue = values[length - i -1];
		newarray[i] = posvalue;

}
	for (int i = 0; i < length; i++) {
		values[i] = newarray[i];
	}
}

",1
jjon350,1696068518,1,"void ReverseArray(int *values, int length)
{ int *first;
  int *last;
  int temporary;

  first=values;
  last= &values[length-1];

  while(first <= last) {
	temporary= *first;
	*first= *last;  
	*last= temporary;
     
	 first++;
	 last--;
} 

}
",1
jjos057,1696148168,1,"void ReverseArray(int *values, int length)
{
	int i;
	int j;
	int tempVals[length];

	for (i = length - 1, j = 0; i >= 0; i--, j++) {
		tempVals[j] = values[i];
	}
	for (int i = 0; i < length; i++) {
		values[i] = tempVals[i];
	}
}",1
jjun879,1695823157,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i;
	int t;

	for (i = 0; i < length/2; i++) {
		t = values[i];

		values[i] = values[length - 1 - i];
		values[length - 1 - i] = t ;
	}
}",1
jkah253,1695976256,1,"void ReverseArray(int *values, int length)
{
    int hold;

    for(int i = 0; i < length/2; i++) {
        hold = values[i];

        values[i] = values[length-i-1];
        // length-i-1, to find the element i spaces in from the RIGHT.

        values[length-i-1] = hold;
    }
}",1
jkan172,1695802745,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    
    int n, i;
    
    int ipos1, ipos2;
    
    for(i = 0; i < length/2; i++) {
        ipos1 = values[i];
        ipos2 = values[length - i -1];
        
        values[i] = ipos2;
        values[length - i - 1] = ipos1;
    }
}
",0
jkan172,1695802783,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    
    int i, ipos1, ipos2;
    
    for(i = 0; i < length/2; i++) {
        ipos1 = values[i];
        ipos2 = values[length - i -1];
        
        values[i] = ipos2;
        values[length - i - 1] = ipos1;
    }
}",1
jkim828,1695702099,1,"void ReverseArray(int *values, int length)
{
	int i;
	int temp = 0;

	for (i = 0; i < length; i++) {
		temp = values[i];

		values[i] = values[(length - 1 - i)];
		values[(length - 1 - i)] = temp;

		if ((values[i] - temp) <= 1) {
			return;
		}
	}
}",0
jkim828,1695702576,2,"void ReverseArray(int *values, int length)
{
	int i;
	int array[length];

	for (i = 0; i < length; i++) {
        array[i] = values[i];
    }

    for (i = 0; i < length; i++) {
        values[i] = array[(length - 1 - i)];
    }
}",1
jkim837,1695947963,1,"void ReverseArray(int *values, int length)
{

	for (int i = 0; i < length / 2; i++)
	{
		int backup = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = backup;
	}

}",1
jkim933,1695700977,1,"void ReverseArray(int *values, int length)
{
	int copied[length];
	
	int x;
	for (x = 0; x < length; x++) {
		copied[x] = values[x];
	}
	
	int i;
	for (i = 0; i < length; i++) {
		values[i] = copied[length - 1 - i];
	}
}",1
jkim960,1695768413,1,"/*Reverse array function modifies the array so that the elements are arranged in the reverse order to their original order. */
void ReverseArray(int* values, int length)
{
	int i, j, new[length];
	j = 0;
	for (i = (length - 1); i >= 0; i--) {
		new[j] = values[i];
		j = j + 1;
	}
	for (i = 0; i < length; i++) {
		values[i] = new[i];
	}
}",1
jlah077,1696197396,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int arrCopy[length];
    int counter = length - 1;
    for (int i = 0; i <= length - 1; i++)
    {
        arrCopy[i] = *(values + i);
    }
    for (int i = 0; i <= length - 1; i++)
    {
        *(values + i) = arrCopy[counter];
        counter--;
    }
}",1
jlal056,1695793516,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i, x;
	i = 0;
	x = 0;

	while (i < length/2 ){
		x = values[i];
		values[i] = values [length-i-1];
		values[length-i-1] = x;
		i++;
	}

}",1
jlew699,1695789126,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	// iterate thru the array indexing value
	for (int i = 0; i < length / 2; i++) {
	    int n = values[i];
	    values[i] = values[length - i - 1];
	    values[length - i - 1] = n;
	}

}",1
jli463,1695786153,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int index;
	int reverseIndex;

	index = 0;
	reverseIndex = length - 1;
	
	while (index < length/2) {
		int placeholder = values[index];
		values[index] = values[reverseIndex];
		values[reverseIndex] = placeholder;

		index = index + 1;
		reverseIndex = reverseIndex - 1;
	}
	return values;
}",0
jli463,1695786317,2,"#include <stdio.h>

int ReverseArray(int* values, int length)
{
	int index;
	int reverseIndex;

	index = 0;
	reverseIndex = length - 1;
	
	while (index < length/2) {
		int placeholder = values[index];
		values[index] = values[reverseIndex];
		values[reverseIndex] = placeholder;

		index = index + 1;
		reverseIndex = reverseIndex - 1;
	}
	return values;
}",0
jli463,1695786892,3,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int index;
	int reverseIndex;

	index = 0;
	reverseIndex = length - 1;
	
	while (index < length/2) {
		int placeholder = values[index];
		values[index] = values[reverseIndex];
		values[reverseIndex] = placeholder;

		index = index + 1;
		reverseIndex = reverseIndex - 1;
	}
}",1
jli876,1695601058,1,"void ReverseArray(int *values, int length) {
    int ref_array[length];
    for (int i = 0; i < length; i++) ref_array[i] = values[i];
    int count = 0;
    for (int i = length - 1; i > -1; i--) {
        values[count] = ref_array[i];
        count += 1;
    }

}",1
jli917,1696219003,1,"void ReverseArray(int *values, int length)
{
    int a ;
    int start = 0 ;
    int end = length - 1 ; 
    while (start < end) 
    { 
        a = values[start];
        values[start] = values[end];
        values[end] = a;
        
        start++;
        end--;
}
}",1
jlia486,1695888085,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    // For loop iterates over the first half of the array
    for (int i = 0; i < length / 2; i++) {
    // Store element value at position i of the array in the variable x
    int x = values[i];
    // Replace the element at position i of the array with the element in the mirror position of i
    values[i] = values[length - i - 1];
    // Bring back the element from position i stored in x
    values[length - i - 1] = x;
    }
}",1
jlia948,1695981991,1,"void ReverseArray(int *values, int length)
{
    int start = 0;
    int temp = 0;
    length--;
    while (length > start)
    {
        temp = values[start];
        values[start] = values[length];
        values[length] = temp;
        length--;
        start++;
    }
}",1
jliu295,1695877303,1,"
void ReverseArray(int *values, int length) {
    int start;
    int end;
    start = 0;
    end = length - 1;
    while (start < end){
        int swapValue = values[start];
        values[start] = values[end];
        values[end] = swapValue;
        start ++;
        end --;
        
    }
}",1
jliu778,1695612241,1,"void ReverseArray(int *values, int length)
{
	int values2[length];
	for (int i = 0; i < length; i++)
	{
		values2[i]=values[length-1-i];
	}
	for (int i = 0; i < length; i++)
	{
		values[i]=values2[i];
	}
}",1
jluo379,1695878990,1,"void ReverseArray(int *values, int length)
{
	int a[length];
	for (int i = 0; i < length; i ++) {
		a[i] = values[length - i - 1];
	}

	for (int i = 0; i < length; i++) {
		values[i] = a[i];
	}
	return;
}",1
jmak320,1696154591,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start = 0, end = length - 1;
	int temp;
	while(start < end) {
		temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}
}",1
jmat941,1696217710,1,"#include <stdio.h>

void reverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        values[start] = values[start] + values[end];
        values[end] = values[start] - values[end];
        values[start] = values[start] - values[end];
        
        start = start + 1;;
        end = end - 1;
    }
}",0
jmat941,1696217743,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        values[start] = values[start] + values[end];
        values[end] = values[start] - values[end];
        values[start] = values[start] - values[end];
        
        start = start + 1;;
        end = end - 1;
    }
}",1
jmei608,1696159101,1,"void ReverseArray(int *values, int length) {
	int i, end;
	end = length - 1;

	for (i = 0; i < length / 2; i++) {
		int placeholder = values[i];
		values[i] = values[end];
		values[end] = placeholder;
		end--;
	}
}",1
jmil737,1695628487,1,"#include <stdio.h>

void ReverseArray(int *values, int length){


    
for(int i = 0; i < length/2; i++){  


int temp = values[i];
values[i] = values[length - 1 - i];
values[length - 1 - i] = temp;


}
    
}
",1
jmul290,1695618602,1,"void ReverseArray(int *values, int length)
{
    
    int temp;
    int reversed [length];
    int j;
    int i;
    
    j = -1;
    
    for(i = length - 1; i > -1; i--) {
        
        j++;
        reversed [j] = values [i];
    }
    

    for(i = 0; i < length; i++) {
        
        values [i] = reversed [i];
        j++;
    }

}
",0
jmul290,1695618624,2,"void ReverseArray(int *values, int length)
{
    
    int reversed [length];
    int j;
    int i;
    
    j = -1;
    
    for(i = length - 1; i > -1; i--) {
        
        j++;
        reversed [j] = values [i];
    }
    

    for(i = 0; i < length; i++) {
        
        values [i] = reversed [i];
        j++;
    }

}
",1
joka775,1696219161,1,"void ReverseArray(int *values, int length)
{ 
	for (int i = 0;i<length;i++){
		values[i] = values[length-i-1];
	}

}",0
joka775,1696221379,2,"void ReverseArray(int *values, int length)
{ 
	for (int i = 0;i<length/2;i++){
	    int old = values[i];
		values[i] = values[length-i-1];
		values[length-i-1] = old;
	}

}",1
jpar523,1696035844,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void ReverseArray(int *values, int length) {
    
    int number[length];
    int i;
    for (i = 0; i < length; i++) {
        number[i] = values[length - i - 1];
    }
        for (i = 0; i < length; i++) {
        values[i] = number[i];
    }
    
}",1
jpar611,1696147507,1,"void ReverseArray(int *values, int length)
{
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
jpat915,1695851169,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{   
    int start;
    int end;
    
    for (start = 0, end = length - 1; start < end; start++, end--) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
    }
}",1
jpau410,1695715730,1,"#include <stdio.h>
void ReverseArray(int *values, int length)
{
    int output[length];
    int count = 0;
    int i;
    for (i = length - 1; i >= 0; i--) {
        output[count] = values[i];
        count++;
    }
    for (i = 0; i < length; i++) {
    values[i] = output[i];
    }
}",1
jpaz106,1696221360,1,"void ReverseArray(int *values, int length)
{
    int *start;
    start = &values[0];
    int *end;
    end = &values[length - 1];
    
    while (start < end) {
        int temp = *start;
        *start = *end;
        *end = temp;
        
        start++;
        end--;
    }
}",1
jpud993,1695700962,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int Temp;
	for (i = 0; i <= length / 2; i++) {
		Temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = Temp;
	}
	return;
}
",0
jpud993,1695701129,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int Temp;
	for (i = 0; i < length / 2; i++) {
		Temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = Temp;
	}
	return;
}
",1
jros811,1695768806,1,"void ReverseArray(int *values, int length)
{
    int hold;
    
    for (int i = 0; i<= length/2; i++) {
        hold = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = hold;
    
        
    }
}",0
jros811,1695769171,2,"void ReverseArray(int *values, int length)
{
    int hold;
    
    for (int i = 0; i < length/2; i++) {
        hold = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = hold;
    
        
    }
}",1
jsan813,1696218133,1,"void ReverseArray(int* values, int length)
{
    int i, temp1, temp2;

    for (i = 0; i < (length/2); i++) {
        temp1 = values[length - (i + 1)];
        temp2 = values[i];

        values[i] = temp1;
        values[length - (i + 1)] = temp2;
    }
}",1
jsch842,1696033423,1,"#include <stdio.h>
void ReverseArray(int values, int length)
{
    int start = 0;
    int end = length - 1;
    int temp;
    
    while (start < end)
    {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
    
}",0
jsch842,1696033489,2,"#include <stdio.h>
void ReverseArray(int values[], int length)
{
    int start = 0;
    int end = length - 1;
    int temp;
    
    while (start < end)
    {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
    
}",1
jshe464,1695695104,1,"void ReverseArray(int* values, int length)
{
	int i;
	int a = length - 1;
		for (i = 0; i < length / 2 ; i++)
		{
			int b;
			b = values[a];
			values[a] = values[i];
			values[i] = b;
			a--;
		}
}",1
jshi444,1695722973,1,"void ReverseArray(int* values, int length)
{
	int start_counter = length - 1;
	int temp = 0;

	for (int i = 0; i < (length/2) + 1; i++) {
		temp = values[i];
		values[i] = values[start_counter];
		values[start_counter] = temp;
		start_counter--;
	}
}",0
jshi444,1695723176,2,"void ReverseArray(int* values, int length)
{
	int start_counter = length - 1;
	int temp = 0;

	for (int i = 0; i < (length/2); i++) {
		temp = values[i];
		values[i] = values[start_counter];
		values[start_counter] = temp;
		start_counter--;
	}
}",1
jshr431,1696141697,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;

	for (i = 0; i < length; i++) {
		printf(""%d "", values[length - (i + 1)]);
	}
}",0
jshr431,1696145267,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int save = values[0];
	int Hold[length];

	for (i = 0; i < length; i++) {
		Hold[i] = values[length - (i + 1)];
	}

	for (i = 0; i < length; i++) {
		values[i] = Hold[i];
	}
	values[length - 1] = save;
}",1
jsim418,1695619117,1,"#include <stdio.h>

void ReverseArray(int *values, int length){
    int temp[length];
    
    for (int i = length;i>=0;i--) {
        temp[i-1] = values[length-i];
    }
    
    for (int i = 0; i<length;i++) {
        values[i] = temp[i];
    }
    
}
",1
jsim643,1695684892,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}",1
jsta466,1695631148,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length -1;
	for (int i = 0; i < length/2; i++)
	{
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;
		start++;
		end--;
	}
}",1
jsun284,1696131753,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
    int start = 0;
    int end = length - 1;
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}",1
jvil318,1696113293,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int i;
    int j;
    int SIZE = 0;
    int temp[length];

    for (i = length - 1; i >= 0; i--) {
        temp[SIZE] = values[i];
        SIZE++;
    }

    for (j = 0; j<length; j++) {
        values[j] = temp[j];
    }
}",1
jwed606,1695774082,1,"
void ReverseArray(int *array, int length)
{
    int tmp = 0;

    for (int i = 0; i <= length / 2; ++i)
    {
        int end = length - i - 1;
        if (i == end)
            break;

        tmp = array[end];
        array[end] = array[i];
        array[i] = tmp;
    }
}",0
jwed606,1695774291,2,"
void ReverseArray(int *array, int length)
{
    int tmp = 0;

    for (int i = 0; i <= length / 2; ++i)
    {
        int end = length - i - 1;
        if (i >= end)
            break;

        tmp = array[end];
        array[end] = array[i];
        array[i] = tmp;
    }
}",1
jwil813,1695720569,1,"void ReverseArray(int *values,int index)
{
	int stored;
	int end;
		end = index - 1;

	for (int i = 0; i < index/2; i++)
	{ 
		int oppindex;

		oppindex = end - i;
		stored = values[oppindex];



		values[oppindex] = values[i];
		values[i] = stored;

	}
	
}",1
jwon248,1695705367,1,"void ReverseArray(int *values, int length)
{
	int min = 0;
	int max = length - 1;
	int temp;

	while (min < max)
	{
		/* code */
		temp = values[min];
		values[min] = values[max];
		values[max] = temp;

		min++;
		max--;
	}
}",1
jwon253,1696046319,1,"void ReverseArray(int *values, int length)
{
	int *start = values;
	int *end = values + length - 1;
	int temp;

	while (start < end) 
	{
		// Reversing the array by swapping
		temp = *start;
		*start = *end;
		*end = temp;

		// Go through array start and end
		start++;
		end--;
	}
}",1
jwon323,1695691602,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    for (i = length - 1; i >= 0; i--) {
        values[i] = length - i;
    }
}",0
jwon323,1695694138,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int t[length];
    for (int i = 0; i < 7; i++) {
        t[i] = values[i];
    }
    for (i = length - 1; i >= 0; i--) {
        values[i] = t[length - 1 - i];
    }
}
",0
jwon323,1695694299,3,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int t[length];
    for (int i = 0; i < length; i++) {
        t[i] = values[i];
    }
    for (i = length - 1; i >= 0; i--) {
        values[i] = t[length - 1 - i];
    }
}
",1
jyan420,1695690570,1,"void ReverseArray(int *values, int length)
{
	for (int i = 0; i < length / 2; i++) {
		int value1 = values[i];
		int value2 = values[length - i - 1];
		values[i] = value2;
		values[length - i - 1] = value1;
	}
}",1
jyua529,1695703665,1,"#include <stdio.h>

void ReverseArray(int *array, int length)
{
    int i, a, b; 

    for(i = 0; i < length/2; i++) {
    a = array[i];
    b = array[(length - 1-i)];

    array[i] = b;
    array[(length - 1-i)] = a;

    }

    return;


}",1
jzho786,1695636294,1,"void ReverseArray(int *values, int length){
    int start = 0;
    int end = length - 1;
    
    while (start < end){
        
        int tempValues = values[start];
        values[start] = values[end];
        values[end] = tempValues;
        
        start ++;
        end--;
    }
}",1
kabb319,1695933466,1,"void ReverseArray(int *values, int length)
{
    int a, indexlength = (length - 1);

    for (int i = 0; i < indexlength; i++, indexlength--){
        a = values[i];
        values[i] = values[indexlength];
        values[indexlength] = a;
    }
    
}",1
kahk161,1695692321,1,"void ReverseArray(int *values, int length)
{
	int* end;
	int* start;
	int i;
	int j = -1;
	for (i = length - 1; i >= (int)(length / 2); i--) {
		j++;
		start = &values[j];
		end = &values[i];

		int x = *end;
		*end = *start;
		*start = x;
	}
}",1
kbar402,1696167389,1,"void ReverseArray(int values[], int length) {
    int i, x;

    for (i = 0; i < length / 2; i++) {
        
        x = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = x;
    }
}",1
kbar402,1696174643,2,"void ReverseArray(int *values, int length) {
    int i, x;

    for (i = 0; i < length / 2; i++) {
        
        x = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = x;
    }
}",1
kbha969,1695764796,1,"
#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int end = length-1;
    for (i=0;i<end; i++) {
        int start = values[i];
        values[i] = values[end];
        values[end] = start;
        end--;
        
    }

}",1
kcao565,1696058843,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;
	
	while (start < end) {
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}

}",1
kcao565,1696059405,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;
	
	while (start < end) {
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}

}",1
kcao657,1696091900,1,"void ReverseArray(int *values, int length)
{
	int *first = values;
	int *last = values + (length - 1);
	int reverse = 0;

	while (first < last) {
		reverse = *first;
		*first = *last;
		*last = reverse;

		first = first +1;
		last = last - 1;
	}

	values = reverse;

}",0
kcao657,1696091920,2,"void ReverseArray(int *values, int length)
{
	int *first = values;
	int *last = values + (length - 1);
	int reverse = 0;

	while (first < last) {
		reverse = *first;
		*first = *last;
		*last = reverse;

		first = first +1;
		last = last - 1;
	}

}",1
kfep063,1696154882,1,"void ReverseArray(int *values, int length) {
    
    for (int i = 0; i < 7; i++) {
       
            values[i] = values[6]  - i;
            
    }
    
}",0
kfep063,1696157089,2,"void ReverseArray(int *values, int length) {
    
    int count = 6;
    
    int x = values[0];
    int y = values[1];
    int z = values[2];
    for (int i = 0; i < 3; i++) {
      
        values[i] = values[count];
        count--;
    }
    values[4] = z;
    values[5] = y;
    values[6] = x;
}
",0
kfep063,1696166054,3,"void ReverseArray(int *values, int length) {
    
    
    int temporaryValue;
    int start;
    int end = length - 1;
    
    for (start = 0; start < end; start++) {
        temporaryValue = values[start];
        values[start] = values[end];
        values[end] = temporaryValue;
        end--;
    }
    
}",1
kfer833,1696209956,1,"#include <stdio.h>


void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    while (start < end) {
     
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}


int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    int length = 7;

    ReverseArray(values, length);

    for (int i = 0; i < length; i++) {
        printf(""%d "", values[i]);
    }
    

    return 0;
}
",0
kfer833,1696210577,2,"#include <stdio.h>


void ReverseArray(int *values, int length) 
{
    int start = 0;
    int end = length - 1;
    while (start < end) {
     
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}",1
kgra470,1695681949,1,"void ReverseArray(int *values, int length){
int counter = length-1;
int temp_val[length];
for (int i = 0; i < length; i++) {
        temp_val[i] = values[counter];
        counter--;
}
for (int i = 0; i < length; i++) {
        values[i] = temp_val[i];
}
}",1
khew624,1696152340,1,"void ReverseArray(int* values, int length) 
{
    int start = 0;
    int end = length - 1;
    while (start < end) 
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
}",0
khew624,1696152572,2,"void ReverseArray(int* values, int length) 
{
    int start = 0;
    int end = length - 1;
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}",1
kjoe685,1695988411,1,"// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i, temp;
	double loops = length/2.0;
	for (i = 0; i < loops; i++) {
		temp = values[i];
		values[i] = values[length - (i+1)];
		values[length - (i+1)] = temp;
	}
	return;
}",1
kjun638,1695991194,1,"#include <stdio.h>

void ReverseArray (int *values, int length)
{
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int val = values[start];
        values[start] = values[end];
        values[end] = val;

        start++;
        end--;

    }
}",1
kkha484,1695866346,1,"#define _CRT_SECURE_NO_WARNINGS 
#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int NewLength = length - 1;
    for (int i = 0; i < length / 2; i++)
    {
        int NewPosition = values[i];
        values[i] = values[NewLength - i];
        values[NewLength - i] = NewPosition;
    }
}",1
kkim985,1695778495,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start, end;

	start = 0;
	end = length-1;

	while (start < end) {
		int x = values[start];
		values[start] = values[end];
		values[end] = x;

		start++;
		end--;
	}

}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}",0
kkim985,1695778693,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start, end;

	start = 0;
	end = length-1;

	while (start < end) {
		int x = values[start];
		values[start] = values[end];
		values[end] = x;

		start++;
		end--;
	}

}",1
klam376,1695972091,1,"void ReverseArray(int *values, int length)
{
	for (int i = 0; i<length/2; i++) {
		int temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
	}
}",1
kluc619,1696214588,1,"void ReverseArray(int *values, int length) {
 int temp;
 for (int i = 0; i < length/2; i++) {
   temp = values[i];
   values[i] = values[length-i-1];
   values[length-i-1] = temp;
 }
}
",1
kmag441,1695787726,1,"include <stdio.h>

void ReverseArray(int values[], int length)
{
    int i;
    int output;
    for(i = 0; i < length; i++){
        output = values[length - 1 - i];
        values[i] = output;
        printf(""%d "", values[i]);
    }
    
}",0
kmag441,1695787749,2,"#include <stdio.h>

void ReverseArray(int values[], int length)
{
    int i;
    int output;
    for(i = 0; i < length; i++){
        output = values[length - 1 - i];
        values[i] = output;
        printf(""%d "", values[i]);
    }
    
}",0
kmag441,1696144805,3,"#include <stdio.h>

void ReverseArray(int values[], int length)
{
    int i;
    int temp;
    for(i = 0; i < length; i++){
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
        printf(""%d "", values[i]);
    }
    
}",0
kmag441,1696226608,4,"#include <stdio.h>
void ReverseArray(int values[], int length)
{
    int ST = 0;
    int ED = length - 1;
    
    while (ST < ED)
    {
        int temp = values[ST];
        values[ST] = values[ED];
        values[ED] = temp;
        
        ST++;
        ED--;
    }
    for (int i = 0; i < length; i++){
        printf(""%d "", values[i]);
    }
}
 ",0
kmag441,1696229197,5,"#include <stdio.h>
void ReverseArray(int values[], int length)
{
    int ST = 0;
    int ED = length - 1;
    
    while (ST < ED)
    {
        int temp = values[ST];
        values[ST] = values[ED];
        values[ED] = temp;
        
        ST++;
        ED--;
    }
}
 ",1
kmal768,1695779417,1," ReverseArray(int* values, int length)
{
	// initialise the variables 
	int i;
	int temp;
	int pos = 0;
	int a = 1;

	for (i = length/2; i > -1; i--) { // this loops through half the # of values in the array
		temp = values[pos]; // temporary value stored before the value in that position is changed
		values[pos] = values[length - a]; //changes the nth value with the nth to last value
		values[length - a] = temp; //puts the temporary value back into the array

		// moves onto the next position for the temporary and array value associated to it
		a++;
		pos++;
	}
}",0
kmal768,1695779990,2," void ReverseArray(int* values, int length)
{
	// initialise the variables 
	int i;
	int temp;
	int pos = 0;
	int a = 1;

	for (i = length/2; i > -1; i--) { // this loops through half the # of values in the array
		temp = values[pos]; // temporary value stored before the value in that position is changed
		values[pos] = values[length - a]; //changes the nth value with the nth to last value
		values[length - a] = temp; //puts the temporary value back into the array

		// moves onto the next position for the temporary and array value associated to it
		a++;
		pos++;
	}
}",0
kmal768,1695781490,3," void ReverseArray(int* values, int length)
{
	// initialise the variables 
	int i;
	int temp;
	int pos = 0;
	int a = 1;

	for (i = length/2; i > 0; i--) { // this loops through half the # of values in the array
		temp = values[pos]; // temporary value stored before the value in that position is changed
		values[pos] = values[length - a]; //changes the nth value with the nth to last value
		values[length - a] = temp; //puts the temporary value back into the array

		// moves onto the next position for the temporary and array value associated to it
		a++;
		pos++;
	}
}",1
kmck133,1695610378,1,"void ReverseArray(int *values, int length) {
	int temp;
	for (int i = 0; i < (length/2); i++) {
		temp = values[length - i - 1];
		values[length - i - 1] = values[i];
		values[i] = temp;
	}
}
",1
kmck133,1695635107,2,"void ReverseArray(int *values, int length) {
	int temp;
	for (int i = 0; i < (length/2); i++) {
		temp = values[length - i - 1];
		values[length - i - 1] = values[i];
		values[i] = temp;
	}
}",1
kmcv530,1695779063,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    length = length -1;

    for (i = 0; i <= (length / 2); i++) {
    temp = values[i];
    values[i] = values[(length - i)];
    values[(length - i)] = temp;
    }

   

}",1
kng361,1696225320,1,"// Lab9ex1
// Function that flip an array backwards
// Author: Kai Ng
#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int bruh;

    while (start < end) {
        bruh = values[start];
        values[start] = values[end];
        values[end] = bruh;

        start++;
        end--;
    }
}",1
kpat303,1695608453,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap the elements at the start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the indices towards the center
        start++;
        end--;
    }
}",1
kpau893,1695628117,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start;
	int end;

	for ( start = 0, end = length - 1; start < end; start++, end--) {
		int temp = values[start];
			values[start] = values[end];
			values[end] = temp;
	}

}",1
kpay633,1695694432,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
	int i;
	int temp;
	for (i = 0; i < length/2; i++) {
		temp = values[length - 1 - i];
		values[length - 1 - i] = values[i];
		values[i] = temp;
	}
	return;",0
kpay633,1695696002,2,"#include <stdio.h>


void ReverseArray(int *values, int length) {
	int i;
	int temp;
	for (i = 0; i < length/2; i++) {
		temp = values[length - 1 - i];
		values[length - 1 - i] = values[i];
		values[i] = temp;
	}
}

",1
kpir468,1695778661,1,"void ReverseArray(int* values, int length)
{
	int start = 0;
	int end = length - 1;
	while (start < end) {
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}
}",1
kpla566,1695852300,1,"void ReverseArray(int array[], int length){

int temp; 
  for (int i = 0; i< length/2 ; i++){
  temp = array[i];
  array[i] = array[length-i-1];
array[length-i-1] = temp;

  }
}
  ",1
kqua446,1696174546,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i, start = 0, end = length, start_value, end_value, j = 0;

    for (i = 0; start < end; i++) {
        end = length - 1 - i;
        start = i;
        start_value = values[start];
        end_value = values[end];
        values[i] = end_value;
        values[length - 1 - i] = start_value;
    }
}
",0
kqua446,1696174581,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i, start = 0, end = length, start_value, end_value;

    for (i = 0; start < end; i++) {
        end = length - 1 - i;
        start = i;
        start_value = values[start];
        end_value = values[end];
        values[i] = end_value;
        values[length - 1 - i] = start_value;
    }
}
",0
kqua446,1696175323,3,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i, start = 0, end = length, start_value, end_value;

    for (i = 0; start < end; i++) {
            end = length - 1 - i;
            start = i;
        if (start < end) {
            start_value = values[start];
            end_value = values[end];
            values[i] = end_value;
            values[length - 1 - i] = start_value;
        }
    }
}
",1
kraj720,1696145821,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    for (int i = 0; i < length / 2; i++) 
    {
        int swap_values = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = swap_values;
    }
}",1
kraw552,1695714437,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;

	while (start < end) 
	{
		int temporary = values[start];
		values[start] = values[end];
		values[end] = temporary;

		start++;
		end--;
	}
}",1
krec980,1695700134,1,"void ReverseArray(int* values, int length)
{
	int i;
	int first;
	int last;
	int a;

	first = values[0];
	last = values[length - 1];
	values[0] = last;
	values[length - 1] = first;

	for (i = 1; i < length/2; i++) {
		a = values[i];
		values[i] = values[(length - 1 - i)];
		values[(length - 1 - i)] = a;		
	}
	return;
}",1
ksai757,1695684637,1,"void ReverseArray(int *values, int length)
{
	int index = length;
	int temp, i;

	index = length - 1;
	
	for (i = 0; i < length / 2; i++) {
		temp = values[i];
		values[i] = values[index - i];
		values[index - i] = temp;
	}
}",1
ksik996,1695619904,1,"void ReverseArray(int values[], int length){
    int k = length - 1;
    int t;
    for(int i = 0; i < length/2; i++){
       
        t = values[i];
        values[i] = values[k];
        values[k] = t;
        k--;
        
    }
}",1
kwan244,1695951447,1,"void ReverseArray(int* values, int length)
{
	int i = 0;
	int placeholder;

	for (int i = 0, j = length - 1; i < j; i++, j --) {
		placeholder = values[i];
		values[i] = values[j];
		values[j] = placeholder;
	}
}",0
kwan244,1695952344,2,"void ReverseArray(int* values, int length)
{
	int placeholder;

	for (int i = 0, j = length - 1; i < j; i++, j --) {
		placeholder = values[i];
		values[i] = values[j];
		values[j] = placeholder;
	}
}",1
kwan797,1695688591,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
    int NewArray[length];

    for (int i = length - 1, j = 0; i >= 0; i--, j++) {
        NewArray[j] = values[i];
    }
    
    for (int i=0;i<length;i++){
        values[i]=NewArray[i];
    }
    
}",1
kyoo839,1695869424,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int i;
    int last;
    int first;
    
    for (i = 0; i <= length / 2; i++) {
        first = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = first;
    }
    
}",0
kyoo839,1695869524,2,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int i;
    int first;
    
    for (i = 0; i <= length / 2; i++) {
        first = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = first;
    }
    
}
",0
kyoo839,1695869853,3,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int i;
    int first;
    
    for (i = 0; i < length / 2; i++) {
        first = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = first;
    }
    
}
",1
kzha391,1696121883,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int temp = 0;
    
    for (int i = 0; i < (length / 2); i++)
    {
        temp = values[i];
        values[i] = values[length - i -1];
        values[length - i -1] = temp;
    }
}

int main(void)
{
	int values[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};

	ReverseArray(values, 9);

	for (int i = 0; i < 9; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}
",0
kzha391,1696121974,2,"#include <stdio.h>

void ReverseArray(int *values, int length);

void ReverseArray(int *values, int length)
{
    int temp = 0;
    
    for (int i = 0; i < (length / 2); i++)
    {
        temp = values[i];
        values[i] = values[length - i -1];
        values[length - i -1] = temp;
    }
}

int main(void)
{
	int values[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};

	ReverseArray(values, 9);

	for (int i = 0; i < 9; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}
",0
kzha391,1696227048,3,"void ReverseArray(int *values, int length)
{
    int temp = 0;
    
    for (int i = 0; i < (length / 2); i++)
    {
        temp = values[i];
        values[i] = values[length - i -1];
        values[length - i -1] = temp;
    }
}
",1
kzhu796,1695693185,1,"void ReverseArray(int* values, int length)
{
	int i;
	int temp;

	for (i = 0; i < length / 2; i++) {
		temp = values[i]; //storing values into a temporary array
		values[i] = values[-1 + length - i]; //replacing elements at corresponding positions from the end of the array
		values[-1 + length - i] = temp; //inserting original numbers back into values array
	}

}",1
laba812,1696156680,1,"#include <stdio.h>

void ReverseArray(int *values,int length)

{
    int i;
    int result [length];
    
for (i=0 ; i<length ; i++){
        result[i] = values [ length - 1 - i];
    }
    
    for (i=0 ; i<length ; i++){
        values [i] = result [i];
    }
}",1
lazz729,1695805970,1,"void ReverseArray(int *values, int length)
{

	for (int j = 0; j <= length/2; j++) {
		int temp = values[j];
		values[j] = values[length - j - 1];
		values[length - j - 1] = temp;
	}

}",0
lazz729,1695806285,2,"void ReverseArray(int *values, int length)
{

	for (int j = 0; j <= (length - 1)/2; j++) {
		int temp = values[j];
		values[j] = values[length - j - 1];
		values[length - j - 1] = temp;
	}

}",1
lbla772,1696210604,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
   int i = 0;
   int end = length - 1;
   int var;
   
   while (i < end) 
   {
       var = values[i];
       values[i] = values[end];
       values[end] = var;
       i++;
       end--;
   }
}
",1
lbou433,1695695728,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int i;
	int j=length-1;
	int output[100];
	for (i = 0; i < length; i++) {
		output[i] = values[j];
		j=j-1;
	}
	for (i = 0; i < length; i++) {
		values[i] = output[i];
	}
}",1
lbyr117,1695788057,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int temp;
    int i;
    int n = length / 2;
    for(i=0;i<n;i++)
    {
        temp = values[i];
        values[i]=values[length-1-i];
        values[length-1-i] = temp;
    }
}",1
lcam453,1696202622,1," #include <stdio.h>

void ReverseArray(int values[], int length) {
    for (int i = 0; i < length / 2; i++) {
        int temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
        
    }
}",1
lcan243,1695850607,1,"void ReverseArray(int values[], int length)
{
    int array[length];
    int x;
    for (x = 0; x < length; x++){
        array[x] = values[x];
    }
    
	int j = 0;
		for (int i = length - 1; i >= 0; i--)
		{
		    
			values[i] = array[j];
			j++;
		}	
	
}",1
lche668,1696054342,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i;
	int s = length-1;
	int r_array[length];
	for (i = 0; i < length; i++) {
		r_array[i] = values[s];
		s = s - 1;
	}
	for (i = 0; i < length; i++) {
		values[i] = r_array[i];
	}
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}",0
lche668,1696054365,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i;
	int s = length-1;
	int r_array[length];
	for (i = 0; i < length; i++) {
		r_array[i] = values[s];
		s = s - 1;
	}
	for (i = 0; i < length; i++) {
		values[i] = r_array[i];
	}
}",1
lchu848,1696076028,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
int i = 0;
int L = length - 1;

while (L > i); {
int V = values[i];
values[i] = values[L];
values[L] = V;
L--, i++;

}


}
",0
lchu848,1696130874,2,"
void ReverseArray(int *values, int length)
{
int B = 0;
int L = length - 1;

if (L > B) {
int V = values[B];
values[B] = values[L];
values[L] = V;
L--;
B++;

}


}
",0
lchu848,1696130927,3,"
void ReverseArray(int *values, int length)
{
int B = 0;
int L = length - 1;

while (L > B) {
int V = values[B];
values[B] = values[L];
values[L] = V;
L--;
B++;

}


}
",1
ldam917,1695788807,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int array[length];
    for (int i=0;i<length;i++)
    {
        array[i]=values[length-i-1];
    }
    for (int i=0;i<length;i++)
    {
        values[i]=array[i];
    }
}",1
ldea753,1695848684,1,"void ReverseArray(int *values, int length)
{
    int temp[length];
    int j = 0;
    for (int i = length - 1; i >= 0; i--) {
        temp[j] = values[i];
        j++;
    }

    j = 0;

    for (int i = 0; i < length; i++) {
        values[i] = temp[j];
        j++;
    }
}",1
ldou101,1695948497,1,"void ReverseArray(int *values, int length)
{
int *arr[length];
int a = 0;
	for (int i = length; i >= 0; i=i-1)
	{
	    arr[a] = values[i-1];
	    a=a+1;
	}
		for (int i = 0; i < 7; i++)
	{
	    {
	        values[i]=arr[i];
	}
}
}",0
ldou101,1695949248,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
int arr[length];
int a = 0;
	for (int i = length-1; i >= 0; i--)
	{
	    arr[a] = values[i];
	    a++;
	}
		for (int i = 0; i < 7; i++)
	{
	    {
	        values[i]=arr[i];
	}
}
}",0
ldou101,1695949414,3,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
int arr[length];
int a = 0;
	for (int i = length-1; i >= 0; i--)
	{
	    arr[a] = values[i];
	    a++;
	}
		for (int i = 0; i < length; i++)
	{
	    {
	        values[i]=arr[i];
	}
}
}",1
lfan827,1696206910,1,"void ReverseArray(int *values, int length)
{
    int i;
    int q;
    for (i = 0; i < length/2; i++){
        q = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = q;
    }
}",1
lgan833,1695850000,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int values[], int length)
{
	for (int i = length - 1; i > -1; i--) {
		printf(""%d "", values[i]);
	}
}",0
lgan833,1695855028,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
void ReverseArray(int values[], int length)
{
    int i;
    for (i = 0; i < length / 2; i++) {
        int temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}",1
lhal844,1695600668,1,"void ReverseArray(int* ar, int len)
{
	int i;
	int temp;
	for (i = 0;i <= (len - 2) / 2; i++)
	{
		temp = ar[i];
		ar[i] = ar[len - 1 - i];
		ar[len - 1 - i] = temp;
	}
}",1
lhua313,1696154606,1,"void ReverseArray(int *values, int length)
{
    
int start = 0;
int end = length - 1;

    while (start < end) 
    {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
ljer106,1696072991,1,"void ReverseArray(int *values, int length) {
    
    int temp;
    for (int i = 0; i < length/2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp; 
    }
    
}
    ",1
ljon623,1696038780,1,"void ptrSwap(int *p1, int *p2) {
	int temp = *p1;
	*p1 = *p2; 
	*p2 = temp;
}

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int loopV = length/2;
	
	for(int i=0; i < loopV; i++) {

		ptrSwap(&values[i], &values[length - i - 1]);
		
	}
}

",1
ljun123,1696220777,1,"#include <stdio.h>
// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
    int first = 0;
    int last = length - 1;
    int temp;

    while (first < last) {
        temp = values[first];
        values[first] = values[last];
        values[last] = temp;

        first++;
        last--;
    
    }
}",1
lkel942,1695858742,1,"void ReverseArray(int *values, int length)
{
	int temparray[length];

	for (int i = 0; i < 7; i++) {
		temparray[7 - (i + 1)] = values[i];
	}

	for (int i = 0; i < 7; i++) {
		values[i] = temparray[i];
	}
}",0
lkel942,1695858995,2,"void ReverseArray(int *values, int length)
{
	int temparray[length];

	for (int i = 0; i < length; i++) {
		temparray[length - (i + 1)] = values[i];
	}

	for (int i = 0; i < length; i++) {
		values[i] = temparray[i];
	}
}",1
llat663,1695778113,1,"void ReverseArray(int* values, int length) {
	
	int* first = values;
	int* last = values + length - 1;
	int point;
	
	while (first < last) {

		point = *first;
		*first = *last;
		*last = point;

		first++;
		last--;
	}

	return 0;
}",0
llat663,1695778336,2,"void ReverseArray(int* values, int length) {
	
	int* first = values;
	int* last = values + length - 1;
	int point;
	
	while (first < last) {

		point = *first;
		*first = *last;
		*last = point;

		first++;
		last--;
	}
}",1
llei074,1695869272,1,"void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length; i++) {
        values[i] = length - i;
    }
    
}",0
llei074,1695870487,2,"void ReverseArray(int *values, int length)
{
    
    int array[length];
    int count = length - 1;
    
    for (int j = 0; j < length; j++) {
        array[j] = values[count];
        count--;
    }
    
    count = 0;
    for (int i = 0; i < length; i++) {
        values[i] = array[count];
        count++;
        
    }
    
}",1
lli393,1695697055,1,"void ReverseArray(int *values, int length)
{
	int i;
	int store;
	for (i = 0; i < length / 2; i++){
		store=values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i]=store;
	}	
}",1
llia622,1695874480,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int array[length];
    for(int i = 0; i < length; i++){
        array[i] = values[i];
    }
    for (int j = 0; j < length; j++){
        values[j] = array [length-1-j];
    }
}",1
llig859,1696214547,1,"// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int startval = 0;
    int endval = length - 1;
    
    while (startval<endval) {
        int originalstart = values[startval];
        values[startval] = values[endval];
        values[endval] = originalstart;
        startval++;
        endval--;
    }
}
",1
lliu182,1696069379,1,"#include <stdio.h>
void ReverseArray(int *values, int length) {

	int end = length - 1;
	for (int i = 0; i < end; i++) {
		int y = values[i];
		values[i] = values[end];
		values[end] = y;
		end--;
	}
}",1
lliu848,1696055308,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int j;
	int storage;

	// iterate along half of the array so that it doesn't reverse the entire thing twice and return the same array
	for (int i = 0; i < length / 2; i++) {
		// store first value in storage
		storage = values[i];
		// first value in array = last position in array
		values[i] = values[length - i - 1];
		// last position in array = value of first number in array (storage)
		values[length - i - 1] = storage;
	}
}
",0
lliu848,1696055988,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int storage;

	// iterate along half of the array so that it doesn't reverse the entire thing twice and return the same array
	for (int i = 0; i < length / 2; i++) {
		// store first value in storage
		storage = values[i];
		// first value in array = last position in array
		values[i] = values[length - i - 1];
		// last position in array = value of first number in array (storage)
		values[length - i - 1] = storage;
	}
}
",1
llu744,1696227452,1,"void ReverseArray(int *values, int length)
{
    int i = 0;
    int j = length - 1;

    while (i < j) {
        int temp = values[i];
        values[i] = values[j];
        values[j] = temp;
        i++;
        j--;
    }
}",1
lmen032,1696212481,1,"#include <stdio.h>
void ReverseArray (int *values, int length){
    int i;
    int *p;
    int *s;
    int end = length - 1;

    for (i = 0; i < length / 2; i++){
        
        p = &values[i];
        s = &values[end - i];
        
        
        int temp = *p;
        *p = *s;
        *s = temp;
    }
}",1
lmor438,1695712359,1,"//AUTHOR:Lukem
#include <stdio.h>
void ReverseArray(int *values, int length){
   
   
   int i;
   int A;
   int B;
   int k=length-1;
   
   for(i=0;i<length/2;i++){
       
       
       A=values[i];
       B=values[k];
       
       values[i]=B;
       values[k]=A;
      
       
       k=k-1;

       
   }
    
}",1
lpry623,1695611511,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int start = 0;
    int end = length - 1;

    while (end > start) {
        int store = values[start];
        values[start] = values[end];
        values[end] = store;
        start ++;
        end --;
    }   
}",1
lrei069,1695797541,1,"void ReverseArray(int values[], int length) {
int temp, i, j;
i = 0;
j = length - 1;

while (i < j) {
    temp = values[i];
    values[i] = values[j];
    values[j] = temp;
    i++;
    j--;
}
}",1
lros711,1695640179,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int temp[length];
	int i;
	int end_i;
	int j;

	j = 0;
	end_i = length - 1;
	
	for (i=0;i<length;i++)
	{
	    temp[i] = values[i];
	}


	for (i = 0; i <length ; i++)
	{
		values[i] = temp[end_i-i];
		
	}


}
",0
lros711,1695700826,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int temp[length];
	int i;
	int end_i;

	end_i = length - 1;

	for (i = 0; i < length; i++)
	{
		temp[i] = values[i];
	}


	for (i = 0; i < length; i++)
	{
		values[i] = temp[end_i - i];
	}


}

",1
lrya284,1696145773,1,"void ReverseArray(int *values, int length) {
    int temp
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length -i - 1] = temp;
    }
}",0
lrya284,1696145798,2,"void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length -i - 1] = temp;
    }
}",1
lsal082,1696231543,1,"void ReverseArray(int *values, int length){
    
    int start = 0;
    int end = length - 1;
    
    while (start < end){
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    
    }
    
    
}",1
lsen376,1695875663,1,"void ReverseArray(int *values, int length)
{
    int rValues[length];
    int i = 0;
    int j = 0;
    int backCount = length - 1;
    
    while (j < length) { 
        rValues[j] = values[j];
        j++;
    }
    
	while (i < length) { 
	    values[i] = rValues[backCount];
	    i++;
	    backCount--;
	}
}",1
lsha172,1696212596,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

void ReverseArray(int *values, int length) {
    for (int i = 0; i < length / 2; i++) {

        int j = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = j;
    }
}",1
lspu128,1695695835,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    //initialise values of the array
    int start = 0;
    int end = length - 1;
    int x; //tempoary number
    
        while(start < end)
        {
        x = values[start]; //stores the starting value into the tempoary number
        values[start] = values[end];//switch end value so its at the start of the array
        values[end] = x;//end value now equals starting number in the array
        
        start++;
        end--;
        //Than goes to the number next to them from both the end and the start and does the same process
        //This results in the array being switched
        }

    
}",1
lsu376,1695681668,1,"#include <stdio.h>

void ReverseArray (int* values, int length)
{
	int start = 0;
	int end = length - 1;
	int temp;

	while (start < end) {
		temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}
}",1
lsua311,1696240685,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap elements at the start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move indices towards the center
        start++;
        end--;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

    ReverseArray(values, 7);

    for (int i = 0; i < 7; i++) {
        printf(""%d "", values[i]);
    }

    return 0;
}
",0
lsua311,1696240721,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap elements at the start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move indices towards the center
        start++;
        end--;
    }
}

",1
lsua311,1696241154,3,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
       
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

      
        start++;
        end--;
    }
}

",1
ltan813,1696209892,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    
    int reversed[length]; 
    int i;
    int j;
    
    for ( i = length - 1, j = 0; i >= 0; i--, j++) {
        reversed[j] = values[i];
    }
    
    for ( i = 0; i < length; i++) {
        values[i] = reversed[i];
    }
}",1
lvan346,1696054887,1,"void ReverseArray(int *array, int length)
{
	int counter;
	int z;
	int x;
	int y;
	double w;


	counter = length - 1;
	z = (length - 1) / 2;
	w = (double)(length - 1) / 2;


	if (w - z == 0.5) {
		z = z + 1;
	}

	for (int i = 0; i < z; i++) {
		x = array[i];
		y = array[counter];

		array[i] = y;	
		array[counter] = x;

		counter = counter - 1;

	}
}",1
lvin900,1695955696,1,"#include<stdio.h>

void ReverseArray(int *array, int elements) {
	
	int i = 0;
	int j = 1;
	while (i < (elements - j)) {
		int left = array[i];
		array[i] = array[elements - j];
		array[elements - j] = left;
		i++;
		j++;
	}
}",1
lwer802,1696242619,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;          // starting index
    int end = length - 1;   // ending index

    // Continue swapping until the starting index is less than or equal to the ending index
    while(start < end) {
        // Swap the elements at the start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the indices towards the center
        start++;
        end--;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

    ReverseArray(values, 7);

    for (int i = 0; i < 7; i++) { 
       printf(""%d "", values[i]); 
    }

    return 0;
}
",0
lwer802,1696242646,2,"void ReverseArray(int *values, int length) {
    int start = 0;          // starting index
    int end = length - 1;   // ending index

    // Continue swapping until the starting index is less than or equal to the ending index
    while(start < end) {
        // Swap the elements at the start and end indices
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the indices towards the center
        start++;
        end--;
    }
}
",1
lwon290,1695862975,1,"#include <stdio.h>

ReverseArray(int *values, int length)
{
    for (int i = 0; i < length / 2; i++) {
        int store = values[i];

        values[i] = values[length - i - 1];
        values[length - i - 1] = store;
    }
}",0
lwon290,1695870926,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length / 2; i++) {
        int store = values[i];

        values[i] = values[length - i - 1];
        values[length - i - 1] = store;
    }
}",1
lyou975,1696034109,1,"void ReverseArray(int *values, int length)
{
	 
	int hold;
	
	for (int i = 0;i < length/2; i++ ) {
		hold = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = hold;
	}

}",1
mabb997,1695609294,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int newarray[length], i, j, k;
	j = 0;
	k = 0;
	for (i = length - 1; i >= 0; i--) {
		newarray[j] = values[i];
		j = j + 1;
	}
	for (k = 0; i <= length; i++) {
		values[i] = newarray[i];
	}
}",0
mabb997,1695609538,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int newarray[length], i, j, k;
	j = 0;
	for (i = length - 1; i >= 0; i--) {
		newarray[j] = values[i];
		j = j + 1;
	}
	for (k = 0; k <= length; k++) {
		values[k] = newarray[k];
	}
}",1
mahu925,1695627240,1,"#include <stdio.h>
void ReverseArray(int *values, int length){
    int newArray[length];
    int i = 0;
    for (i=0; i < length; i++){
        newArray[length-i-1] = values[i];
    }
     for (i=0; i < length; i++){
        values[i] = newArray[i];
    }
}",1
mala824,1695893562,1,"void ReverseArray(int *arr, int length) {
    int left = 0;
    int right = length - 1;

    while (left < right) {
        int temp = arr[left];
        arr[left] = arr[right];
        arr[right] = temp;

        left++;
        right--;
    }
}",1
mbah279,1696018022,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
mbal759,1695691695,1,"void ReverseArray(int *values, int length)
{
    int new_array[length];
    int index = 0;
    int i;

    for (i = length-1; i >= 0; i--) {
        new_array[index] = values[i];
        index += 1;
    }

    for (i=0; i<length; i++)
    {
        values[i] = new_array[i];
    }
}",1
mboy221,1695601648,1,"#include <stdio.h>

void ReverseArray(int arr[], int len)
{
    int new[len];

    for (int i = 0; i < len; i++) {
        new[i] = arr[len-1-i];
        printf(""%d "", new[i]); 
    }
    for (int j = 0; j < len; j++) {
        int *p = &arr[j];
        *p = new[j];
    }
}",0
mboy221,1695601790,2,"#include <stdio.h>

void reversed(int arr[], int len)
{
    int new[len];

    for (int i = 0; i < len; i++) {
        new[i] = arr[len-1-i];
    }
    for (int j = 0; j < len; j++) {
        int *p = &arr[j];
        *p = new[j];
    }
}",0
mboy221,1695601812,3,"#include <stdio.h>

void ReverseArray(int arr[], int len)
{
    int new[len];

    for (int i = 0; i < len; i++) {
        new[i] = arr[len-1-i];
    }
    for (int j = 0; j < len; j++) {
        int *p = &arr[j];
        *p = new[j];
    }
}",1
mbut885,1695878693,1,"void ReverseArray(int* values, int length) {

    int i, swapsy;

    for (int i = 0; i < (length/2); i++) {
        swapsy = values[(length - 1) - i];
        values[(length - 1) - i] = values[i];
        values[i] = swapsy;
    }

    return 0;
}",0
mbut885,1695878930,2,"void ReverseArray(int* values, int length) {

    int i, swapsy;

    for (int i = 0; i < (length/2); i++) {
        swapsy = values[(length - 1) - i];
        values[(length - 1) - i] = values[i];
        values[i] = swapsy;
    }

    return;
}",0
mbut885,1695878944,3,"void ReverseArray(int* values, int length) {

    int i, swapsy;

    for (i = 0; i < (length/2); i++) {
        swapsy = values[(length - 1) - i];
        values[(length - 1) - i] = values[i];
        values[i] = swapsy;
    }

    return;
}",1
mcam799,1696231644,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int placeholder;
	int *values2;

	for (int i = 0; i < (length/2); i++) {
		values = &values[i]; //Adds direction to value 1 (leftmost values)
		placeholder = values [i]; //Gives placeholder  the same value as value 1
		values2 = &values[length - (1 + i)]; //Adds direction to value 2 (righmost value)
		*values = *values2; //Turns leftmost value into rightmost
		*values2 = placeholder; //Uses placeholder to turn rightmost to leftmost

	}

}
",0
mcha833,1695696223,1,"void ReverseArray(int *values, int length){
    int result[length];
    int i;
    
    for(i=length; i>0;i--){
        result[length-i] = values[i-1];
    }
    for(i=0; i<length;i++){
        values[i] = result[i];
    }
}",1
mcha876,1696147903,1,"#include <stdio.h>

void ReverseArray (int array[], int length) {
    int start, end, temp;
    start = 0;
    end = length - 1;
    
    while (start < end) {
        temp = array[start];
        array[start] = array[end];
        array[end] = temp;
        start++;
        end--;
    }
    
}",1
mche403,1695887593,1,"//  this function reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;
	while (start < end) {
		int var = values[start];
		values[start] = values[end];
		values[end] = var;
			start++;
		end--;
	}
}
",1
mcro807,1696243367,1,"void ReverseArray(int values[], int length)
{
int lastchar = length - 1;
int firstchar = 0;
   while (firstchar < lastchar) {
    values[firstchar] = values[lastchar] + values[firstchar];
    values[lastchar] = values[firstchar] - values[lastchar];
    array[firstchar] = array[lastchar];
    
    first++;
    last--;
}
}",0
mcro807,1696243419,2,"void ReverseArray(int values[], int length)
{
int lastchar = length - 1;
int firstchar = 0;
   while (firstchar < lastchar) {
    values[firstchar] = values[lastchar] + values[firstchar];
    values[lastchar] = values[firstchar] - values[lastchar];
    values[firstchar] = values[lastchar];
    
    firstchar++;
    lastchar--;
}
}",0
mcro807,1696243452,3,"void ReverseArray(int values[], int length)
{
int lastchar = length - 1;
int firstchar = 0;
   while (firstchar < lastchar) {
    values[firstchar] = values[lastchar] + values[firstchar];
    values[lastchar] = values[firstchar] - values[lastchar];
    values[firstchar] = values[firstchar] - values[lastchar];
    
    firstchar++;
    lastchar--;
}
}",1
mdav506,1695609939,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
    //first value in array is represented as a 0
    int arraystartvalue = 0;
    //last value in array is represented as one less than the number of
    //values in the array as we count from 0 upwards
    int arrayendvalue = length - 1;
    int replacevalue;

    while (arraystartvalue < arrayendvalue) {
        replacevalue = values[arraystartvalue];
        values[arraystartvalue] = values[arrayendvalue];
        values[arrayendvalue] = replacevalue;

        arraystartvalue++;
        arrayendvalue--;
    }
}",1
mdea492,1696126368,1,"void ReverseArray(int *values, int length)
{   
    for (int i=0;i<length/2;i++){
        int tempo = (values)[i];
      
        values[i]=values[length-i-1];
        values[length-i-1] = tempo;
        
    }
}",1
mfle888,1696231248,1,"void ReverseArray(int *values, int length) {

int i;

    for (int i = length - 1; i >= 0; i--) {
		printf(""%d\n"",values[i]);
		}
}
",0
mfle888,1696235716,2,"void ReverseArray(int *values, int length) {
	
    for (int i = 0; i < length / 2; i++) {
		int place_holder = values[i];
		values[i] = values[length - 1 - i]; 
		values[length - 1 - i] = place_holder;
		}
}

",1
mfuj750,1695689221,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	for (int i = 0; i < length/2; i++) {
		int a = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = a;
	}
}",1
mger154,1695948308,1,"void ReverseArray(int *values, int length)
{
	int i;
	int final = length - 1;
	int temp;
	
	for (i = 0; i < length/2; i++) {
		temp = values[i];
		values[i] = values[final-i];
		values[final-i] = temp;
	}
}",1
mgoy303,1695629126,1,"void ReverseArray(int *values, int length) {
    for (int i = 0; i < length / 2; i++) {
        int header = values[i];
        int footer = values[length - i - 1];
        values[i] = footer;
        values[length - i - 1] = header;
    }
}",1
mgua740,1696036281,1,"void ReverseArray(int* values, int length)
{
	for (int i = 0; i < length/2; i++) {
		int original = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = original;
	}

}",1
mhua821,1696157033,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start, end;
	int a, b;

	start = 0;
	end = length - 1;

	while (start < end) {
		a = values[start];
		b = values[end];
		values[start] = b;
		values[end] = a;
		
		start = start + 1;
		end = end - 1;
	}
} 
		",1
mjun868,1695782339,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{ 
	for (int i = length - 1; i >= 0; i--) {
	printf(""%d "", values[i]); 
	}

}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);
	return 0;
}
",0
mjun868,1695783680,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{ 
	for (int i = length - 1; i >= 0; i--) {
	printf(""%d "", values[i]); 
	}

}



",0
mjun868,1696030999,3,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{ 
	int result;
	int k = 0;	
	int temp_array[length];
	for (int i = length - 1; i >= 0; i--){
		temp_array[k] = values[i];
		k++;
	}
	for (int i = 0; i < length; i++){
	values[i] = temp_array[i];
	}
}
",0
mjun868,1696031020,4,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{ 

	int k = 0;	
	int temp_array[length];
	for (int i = length - 1; i >= 0; i--){
		temp_array[k] = values[i];
		k++;
	}
	for (int i = 0; i < length; i++){
	values[i] = temp_array[i];
	}
}
",1
mkab524,1696148808,1,"void ReverseArray(int* values, int length)
{
	// Creating a temporary variable to store values to swap
	int temp_store;

	// We only need half the length (x.5 rounds down to x bcz of the way c works)
	for (int i = 0; i < (length / 2); i++)
	{
		// the value[i] starting from the left gets stored in the temp_store variable
		temp_store = values[i];
		// length - 1 - i basically is the number to swap with
		values[i] = values[length - 1 - i];
		// and then swapping the right number with the left number that was stored in the temp_store variable
		values[length - 1 - i] = temp_store;
	}
}",1
mkaj411,1695696811,1,"void ReverseArray(int* values, int length)
{
	int start = 0;
	int end = length - 1; 
	while (start < end) {
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;
		start++;
		end--;
	} 

	
}",1
mkee115,1695693552,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int start = 0;
    int end = length - 1;
    int startval;
    
    while (start<end)
    {
        startval = values[start];
        values[start] = values[end];
        values[end] = startval;
        
        start++;
        end--;
        
    }
}",1
mken566,1695792384,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i = 0;
    int j = length - 1;
    
    while (i < j) {
        int reverse = values[i];
        values[i] = values[j];
        values[j] = reverse;
        
        i++;
        j--;
    }
}",1
mket106,1696158641,1,"void ReverseArray(int *values, int length)
{ 
	int temporary;
	for (int x = 0, y = length - 1; x < y; x++, y--) 
	{
		temporary = values[x];
		values[x] = values[y];
		values[y] = temporary;
	}
}",1
mkim670,1695714259,1,"void ReverseArray(int *values, int length)
{
	int temp;
	int pair;
	int i;

	pair = length / 2;

	for (i = 0; i < pair; i++) {
		temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}
}",1
mkim719,1695961752,1,"void ReverseArray(int values[], int length)
{
    int start = 0;
    int end = length-1;
    
    while (start < end)
    {
        int temp = values[start];
        values[start] = values [end];
        values[end] = temp;
        
        start++;
        end --;
    }
}",1
mlal864,1696230467,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;

    while (start < end) {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
mlaw649,1696238270,1,"void ReverseArray(int *values, int length) 

{
    // set counter
    int i = 0;


    while (i < length / 2) {
        // goes through loop backwards
        int reverseIndex;
        reverseIndex = length - 1 - i;

        // Swap elements (positions i with reverseIndex)
        values[i] = values[i] + values[reverseIndex];
        
        values[reverseIndex] = values[i] - values[reverseIndex];
        
        values[i] = values[i] - values[reverseIndex];

        i++;
    }
}",1
mle063,1695779989,1,"void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    for (i = 0; i < length; i++){
         
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
        
        if (i == length - 1 - i){
            return;
        }
        
    }
}
",0
mle063,1695780409,2,"void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    for (i = 0; i < length; i++){
         
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
        
        if (i == length/2 - 1){
            return;
        }
        
    }
}
",1
mlin729,1695630779,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {

        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
mloh302,1695604810,1,"#include <stdio.h>
#include <math.h>

void ReverseArray(int *inputArray, int sizeOfArray)
{
    for(int i = 0; i<floor(sizeOfArray/(double)2); i++) {
        int temp = inputArray[i];
        inputArray[i] = inputArray[sizeOfArray-i-1];
        inputArray[sizeOfArray-i-1] = temp;
    }
}",1
mmak111,1696218455,1,"void ReverseArray(int *values, int length)
{
	int a = 0, b = length-1;
	int x;
	while (a < b) {
		x = values[a];
		values[a] = values[b];
		values[b] = x;
		a++;
		b--;
	}
}",1
mman402,1696033310,1,"void ReverseArray(int *values, int length)
{
int i,maxI=length-1;
int temp;

if (length%2==1)
{
for(i=0;i<length/2;i++)
{
temp= values[i];
values[i]=values[maxI];
values[maxI]=temp;
maxI--;
}
}
else
{
for (i = 0; i < (length / 2)-1; i++)
{
temp = values[i];
values[i] = values[maxI];
values[maxI] = temp;
maxI--;
}
}",0
mman402,1696033445,2,"void ReverseArray(int *values, int length)
{
int i,maxI=length-1;
int temp;

if (length%2==1)
{
for(i=0;i<length/2;i++)
{
temp= values[i];
values[i]=values[maxI];
values[maxI]=temp;
maxI--;
}
}
else
{
for (i = 0; i < (length / 2)-1; i++)
{
temp = values[i];
values[i] = values[maxI];
values[maxI] = temp;
maxI--;
}
}

}",0
mman402,1696033621,3,"void ReverseArray(int *values, int length)
{
int i,maxI=length-1;
int temp;


for(i=0;i<length/2;i++)
{
temp= values[i];
values[i]=values[maxI];
values[maxI]=temp;
maxI--;

}

}",1
mman808,1696226269,1,"void ReverseArray(int *values, int length)
{
int start = 0;
int end = length - 1; 
int temp;
while (start < end){
	temp = values[start];
	values[start] = values[end];
	values[end] = temp;
	
	start++;
	end--;
}
}",1
mmas199,1696209689,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int firstIndex;
    int lastIndex;

    for (firstIndex = 0, lastIndex = length - 1; firstIndex < lastIndex; firstIndex++, lastIndex--) 
    {
        int temp = values[firstIndex];
        values[firstIndex] = values[lastIndex];

        values[lastIndex] = temp;
    }
}",1
mmca276,1695655264,1,"void ReverseArray(int *values, int length)
{
	// initialize the count 'i' and the value x which is half the
	// length of the array, and the temporary value that we need to assing the array values
    int i;
	double x = length/2;
	int temporary_value;
	// starts the for loop to reverse the order of the array
    for (i=0; i < x; i++) {
		// assigns the values of the array to itself in reverse order
		temporary_value = values[i];
		values[i] = values[(length-i-1)];
		values[(length-i-1)] = temporary_value;
	}",0
mmca276,1695893117,2,"void ReverseArray(int *values, int length)
{
	// initialize the count 'i' and the value x which is half the
	// length of the array, and the temporary value that we need to assing the array values
    int i;
	double x = length/2;
	int temporary_value;
	// starts the for loop to reverse the order of the array
    for (i=0; i < x; i++) {
		// assigns the values of the array to itself in reverse order
		temporary_value = values[i];
		values[i] = values[(length-i-1)];
		values[(length-i-1)] = temporary_value;
	}
	
}",1
mmcg745,1696061048,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        
        int x = values[start];
        values[start] = values[end];
        values[end] = x;

        start++;
        end--;
    }
    
}
",1
mmoh314,1696233902,1,"void ReverseArray(int *values, int length)
{
	int i;
	i = 0;
	length--;
	int temp;

	while ((length - i) >= i)
	{
		temp = values[i];
		values[i] = values[length - i];
		values[length - i] = temp;
	}
}",0
mmoh314,1696235005,2,"void ReverseArray(int *values, int length)
{
	int i = 0;
	length--;
	int temp;

	while ((length-i) >= i)
	{
		temp = values[i];
		values[i] = values[(length-i)];
		values[(length-i)] = temp;
		i++;
	}
}",1
mmoh456,1695860993,1,"#include <stdio.h>
void ReverseArray(int* values, int length) {

	int start = 0;
	int end = length - 1;
	int holder;

	while (start < end) {
		holder = values[start];
		values[start] = values[end];
		values[end] = holder;
		start = start + 1;
		end = end - 1;
	}

}",1
mnay503,1695980528,1,"#include <stdio.h>
void ReverseArray(int *values, int length)
{
    int first = 0;
    int last = length - 1;
    int temp;
     
    while (first < last) 
    {
        temp = values[first];
        values[first] = values[last];
        values[last] = temp;
        first++;
        last--;
    }
}",1
mnic190,1696225749,1,"#include <stdio.h>

int ReverseArray(values[], length);
{
    int reversed_values[length];
    for (int i = 1; i <= length; i++) { 
        reversed_values[i] = values[length-i];
    }
     for (int i = 1; i <= length; i++) { 
        values[i] = reversed_values[i];
    }
    return 0;
}
",0
mnic190,1696225869,2,"#include <stdio.h>

int ReverseArray(int values[], int length);
{
    int reversed_values[length];
    for (int i = 1; i <= length; i++) { 
        reversed_values[i] = values[length-i];
    }
     for (int i = 1; i <= length; i++) { 
        values[i] = reversed_values[i];
    }
    return 0;
}
",0
mnic190,1696225991,3,"#include <stdio.h>

int ReverseArray(int values[], int length){
    int reversed_values[length];
    for (int i = 1; i <= length; i++) { 
        reversed_values[i] = values[length-i];
    }
     for (int i = 1; i <= length; i++) { 
        values[i] = reversed_values[i];
    }
    return 0;
}
",0
mnic190,1696228599,4,"#include <stdio.h>

int ReverseArray(int values[], int length){
    int reversed_values[length];
    for (int i = 0; i <= length; i++) { 
        reversed_values[i] = values[length-1-i];
    }
     for (int i = 0; i <= length; i++) { 
        values[i] = reversed_values[i];
    }
    return 0;
}
",1
moco678,1695849405,1,"*******************************************************************************/
#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",0
moco678,1695849466,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
mpar342,1696230744,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int start = 0;
    int end = length - 1;
    
    while (start < end) 
    {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}",1
mpat501,1695640578,1,"int ReverseArray(int *values, int length)
{
	int placeholder ;
	int start=0, end=length-1 ;
	
	while (start<end) {
		placeholder=values[start] ;
		values[start] = values[end] ;
		values[end] = placeholder ;
		start++ ;
		end-- ;
		
	}
}",0
mpat501,1695640902,2,"int ReverseArray(int *values, int length)
{
	int placeholder ;
	int start=0, end=length-1 ;
	
	while (start<end) {
		placeholder=values[start] ;
		values[start] = values[end] ;
		values[end] = placeholder ;
		start++ ;
		end-- ;
		
	}
	return *values ;
}",1
mpey262,1695679076,1,"void ReverseArray(int *values, int length)
{
    
    for (int i = 0; i < length / 2; i++) {
        int reverse = values[length - i - 1];
        values[length - i - 1] = values[i];
	    values[i] = reverse; 
	}
}
",1
mran851,1695762765,1,"void ReverseArray(int *values, int length)
{
	int min = 0;
	int max = length - 1;
	int t;

	while (min < max) {
		t = values[min];
		values[min] = values[max];
		values[max] = t;
		min++;
		max--

	}
		
}",0
mran851,1695762788,2,"void ReverseArray(int *values, int length)
{
	int min = 0;
	int max = length - 1;
	int t;

	while (min < max) {
		t = values[min];
		values[min] = values[max];
		values[max] = t;
		min++;
		max--;

	}
		
}",1
mris618,1696025368,1,"void ReverseArray(int* values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        // Swap elements at the beginning and end of the array
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}",1
mrog757,1695952895,1,"void ReverseArray(int *values, int length)
{
    int numfactors = length - 1;
    int count = 0;
    int x;
    int y;
    while (numfactors > count)
    {
        x = values[numfactors];
        y = values[count];
        values[numfactors] = y;
        values[count] = x;
        numfactors--;
        count++;
    }
}",1
mron793,1695961850,1,"void ReverseArray(int *values, int length)
{
	int temp;
	int j = length-1;

	for (int i = 0; i < length/2; i++)
	{
		temp = values[j];

		values[j] = values[i];
		values[i] = temp;
		j--;
		
	}
	

}",1
mshi672,1696112512,1,"void ReverseArray(int *values, int length)
{
	for (int i = 0; i < (length/(int)2); i++)
	{
		int original_value = values[i];
		values[i] = values[(length - 1) - i];
		values[(length - 1) - i] = original_value;
	}
}",1
msil440,1696240176,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 

{
    int left = 0;
    int right = length - 1;

    while (left < right) 
    {
        // Swapping the elements at the left and right positions: 
        int temp = values[left];
        values[left] = values[right];
        values[right] = temp;

        // Moving the exponent towards the center
        left++;
        right--;
    }
}",1
msin609,1696131617,1,"void ReverseArray(int *values, int length)
{
	int swap;
	int i;
	int halflength;
	halflength = length / 2;
	for (i = 1; i <= halflength; i++) {
		swap = values[i - 1];
		values[i - 1] = values[length - i];
		values[length - i] = swap;
	}
}",1
msu975,1696048026,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array */
   #include <stdio.h>

   // Define this function, which should reverse the elements in an array
   void ReverseArray(int* values, int length)
   {
	   int i_0;
	   int backupValue;
	   int i_1 = length;

	   for (i_0 = 0; i_0 < length/2; i_0++) {
		   i_1 = i_1 - 1;
		   backupValue = values[i_0];

		   values[i_0] = values[i_1];

		   values[i_1] = backupValue;
	   }
   }",1
msuv992,1695849723,1,"#include <stdio.h>

// This function shoudl reverse the input array.
void ReverseArray(int *values, int length)
{
    int i;
    int start;
    
    
    for ( i = 0; i < length/2 ;i++ ) {
        start = values[i]; 
        values[i] = values[length - i - 1];
        values[length - i - 1] = start;
       
    }
        
        
    
}
",1
mtam709,1695848244,1,"void ReverseArray(int *values, int length) {
    int temp = 0;
for (int i = 0; i < (length/2); i++) { 
    temp = values[i];
    values[i] = values[length - i - 1];
    values[length - i - 1] = temp;
}
}",1
mtha724,1695956156,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length / 2; i++ )
    {
        int temp = *( values + i );
        *( values + i ) = *( values + length - i - 1 );
        *( values + length - i - 1 ) = temp;
    }
}",1
mtob213,1696133152,1,"void ReverseArray(int *values, int length)
{ 
	int i, end = length - 1, temp;
    for (i = end; i > length / 2; i--) {
        temp = values[i];
        values[i] = values[end - i];
        values[end - i] = temp;
    }
}",0
mtob213,1696133384,2,"void ReverseArray(int *values, int length)
{ 
	int i, end = length - 1, temp;
    for (i = end; i >= length / 2; i--) {
        temp = values[i];
        values[i] = values[end - i];
        values[end - i] = temp;
    }
}",1
mwan364,1695707926,1,"void ReverseArray(int *values, int length)
{
	int i;
	int temp = 0;

	for (i = 0; i < (floor(length / 2)); i++) {
		temp = values[i];
		values[i] = values[length - (i + 1)];
		values[length - (i + 1)] = temp;
	}
}",1
myou984,1695680555,1,"void ReverseArray(int *values, int length)
{
	int temp[length];
	for (int i=0; i<length; i++) {
		temp[i] = values[i];
	}
	int reverse = length - 1;
	for (int i = 0; i < length; i++) {
		values[i] = temp[reverse];
		reverse--;
	}
}",1
nabr105,1695699342,1,"void ReverseArray(int *values, int length)
{
	int i; 
	int j = 0; 
	int value_change, value_change2;
	for (int i = (length-1); i > length/2; i--) {
		value_change = values[i]; 
		value_change2 = values[j]; 
		values[i] = value_change2; 
		values[j] = value_change;
		j++;
	}
}",0
nabr105,1695699393,2,"void ReverseArray(int *values, int length)
{
	int i; 
	int j = 0; 
	int value_change, value_change2;
	for (i = (length-1); i > length/2; i--) {
		value_change = values[i]; 
		value_change2 = values[j]; 
		values[i] = value_change2; 
		values[j] = value_change;
		j++;
	}
}",0
nabr105,1695769960,3,"void ReverseArray(int *values, int length)
{
	int i = (length-1); 
	int j = 0; 
	int value_change, value_change2;
	while(j < i){ 
		value_change = values[i]; 
		value_change2 = values[j]; 
		values[i] = value_change2; 
		values[j] = value_change;
		i--;
		j++;
	}",0
nabr105,1695769986,4,"void ReverseArray(int *values, int length)
{
	int i = (length-1); 
	int j = 0; 
	int value_change, value_change2;
	while(j < i){ 
		value_change = values[i]; 
		value_change2 = values[j]; 
		values[i] = value_change2; 
		values[j] = value_change;
		i--;
		j++;
	}
}",1
nalg484,1695700559,1,"#include <stdio.h>
int main() {
void ReverseArray(int *values, int length) {
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        int result = values[start];
        values[start] = values[end];
        values[end] = result;
    }
}
}",0
nalg484,1695701420,2,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        int result = values[start];
        values[start] = values[end];
        values[end] = result;
    }
}
 ReverseArray(arr, length);

    printf(""\nReversed Array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    return 0;
}
}",0
nalg484,1695705745,3,"#include <stdio.h>
void ReverseArray(int array[], int size) {
    int start = 0;
    int end = size - 1;
    while (start < end) {
        int result = arr[start];
        array[start] = array[end];
        array[end] = result;
        start++;
        end--;
    }
}",0
nalg484,1695708265,4,"include <stdio.h>
void ReverseArray(int array[], int size) {
    int result;
    for (int i = 0; i < size / 2; i++) {
        result = array[i];
        array[i] = array[size - 1 - i];
        array[size - 1 - i] = result;
    }
}
int main {
    int values[7] = {1, 2, 3, 4, 5, 6, 7}; 

ReverseArray(values, 7); 

for (int i = 0; i < 7; i++) { 
   printf(""%d "", values[i]); 
}
printf(""\n"");
return 0;
}",0
nalg484,1695708277,5,"include <stdio.h>
void ReverseArray(int array[], int size) {
    int result;
    for (int i = 0; i < size / 2; i++) {
        result = array[i];
        array[i] = array[size - 1 - i];
        array[size - 1 - i] = result;
    }
}
int main {
printf(""\n"");
return 0;
}",0
nalg484,1695708302,6,"include <stdio.h>
void ReverseArray(int array[], int size) {
    int result;
    for (int i = 0; i < size / 2; i++) {
        result = array[i];
        array[i] = array[size - 1 - i];
        array[size - 1 - i] = result;
    }
}
int main(ReverseArray) {
printf(""\n"");
return 0;
}",0
nalg484,1695708308,7,"include <stdio.h>
void ReverseArray(int array[], int size) {
    int result;
    for (int i = 0; i < size / 2; i++) {
        result = array[i];
        array[i] = array[size - 1 - i];
        array[size - 1 - i] = result;
    }
}
int main() {
printf(""\n"");
return 0;
}",0
nalg484,1695708421,8,"include <stdio.h>
void ReverseArray(int array[], int size) {
    int result;
    for (int i = 0; i < size / 2; i++) {
        result = array[i];
        array[i] = array[size - 1 - i];
        array[size - 1 - i] = result;
    }
}
int main(void) {
printf(""\n"");
return 0;
}",0
nalg484,1695712991,9,"#include <stdio.h>
void ReverseArray(int array[], int size) {
    int result;
    for (int i = 0; i < size / 2; i++) {
        result = array[i];
        array[i] = array[size - 1 - i];
        array[size - 1 - i] = result;
    }
return result;
}",0
nalg484,1696053505,10,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    for (int start = 0, end = length - 1; start < end; start++, end--) {
        int x = values[start];
        values[start] = values[end];
        values[end] = x;
    }
}",1
nask472,1695865190,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int i;

    if (length % 2 == 0){
        for ( i = 0; i < length/2 ; i++ ) {
        int temp = values[i];
        values[i] = values[length-1-i];
        values[length-1-i] = temp; 
        }
    }

    if (length % 2 != 0){
        for ( i = 0; i < length/2 + 1 ; i++ ) {
            int temp = values[i];
            values[i] = values[length-1-i];
            values[length-1-i] = temp; 
        }
     }
        
}",1
ncha509,1695606870,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int a;
    int b;
    int array_two[length];
    for (a=0;a<length;a++) {
    array_two[a]=values[((length-1)-a)];
    }
    
    for (b=0;b<length;b++){
    values[b]=array_two[b];
    }
}",1
ndas832,1695793405,1,"#include <stdio.h>

void ReverseArray (int *values, int length)
{
    int i; 
    for (i=0 ; i<length/2; i++) {
        int replacing = values[i]; 
        values[i] = values[length - 1 - i]; 
        values[length - 1 - i]= replacing; 
    }
}
",1
ndso791,1696053273,1,"# include <stdio.h>

void PrintArray(int values[], int length)
{
	int i;
	for (i = 0; i < length; i++)
	{
		printf(""%d "", values[i]);
	}
}",0
ndso791,1696053342,2,"# include <stdio.h>

void ReverseArray(int *values, int length)
{
	for (int i = 0; i < length; i++)
	{
		int *temp;
		temp[i] = values[length-i];
		values[i] = temp[i];
	}
}",0
ndso791,1696120716,3,"# include <stdio.h>

void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length/2; i++)
    {
        int temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
ngam724,1695819058,1,"void ReverseArray(int* values, int length)
{	
	for (int i = 0; i < length / 2; i++)
	{
		int temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
	}
}",1
ngan146,1696207308,1,"void ReverseArray(int *values, int length) {
    int k = 0;
    int tempVal[7];
    for (int i = length; i > 0; i--) {
        tempVal[k] = values[i-1];
        k++;
        
    }   

    for (int j = 0; j < length; j++) {
        values[j] = tempVal[j];
        
    }

}",0
ngan146,1696207605,2,"void ReverseArray(int *values, int length) {
    int k = 0;
    int tempVal[length];
    for (int i = length; i > 0; i--) {
        tempVal[k] = values[i-1];
        k++;
        
    }   

    for (int j = 0; j < length; j++) {
        values[j] = tempVal[j];
        
    }

}",1
ngna565,1695769893,1,"void ReverseArray(int *values, int length) {
    int first = 0;
    int last = length - 1;
    
    while (first<last) {
        int store = values[first];
    
        values[first] = values[last];
        values[last] = store;
        
        first ++;
        last --;
    }
    
}
   ",1
nhar865,1695727397,1,"void ReverseArray(int elements[], int length) {
    for (int i = 0; i < (length >> 1); i++) {
        int x = elements[i];
        int y = elements[length - i - 1];

        elements[length - i - 1] = x;
        elements[i] = y;
    }
}",1
nhrs452,1695728204,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1; // -1 since postions are 0 to 6 (7 values)
	int temp; //temporary variable to hold values

	while(start<end){
		temp = values[start];
		values[start] = values[end];
		values[end] = temp;
		start++; //start = start + 1
		end--; //end = end - 1
	}

}",1
nhua986,1695694517,1,"void ReverseArray(int *values, int length)
{
    int a;
    int b;
    for (int i = 0; i < length / 2; i++) { 
        
     
        {
            a = values[i];
            b = values[length-i-1];
            values[i] = b;
            values[length - i - 1] = a;
            
        } 
        
    
    }
    return;
}",1
nhut042,1695780158,1,"void ReverseArray(int *values, int length)
{
    int placeholder;
    for (int count = 0; count < length / 2; count++)
    {
        placeholder = values[count];
        values[count] = values[length - (count + 1)];
        values[length - (count + 1)] = placeholder;
    }
    return 0;
}
",0
nhut042,1695780377,2,"void ReverseArray(int *values, int length)
{
    int placeholder;
    for (int count = 0; count < length / 2; count++)
    {
        placeholder = values[count];
        values[count] = values[length - (count + 1)];
        values[length - (count + 1)] = placeholder;
    }
    
}
",1
nisa397,1695767779,1,"void ReverseArray(int *values, int length)
{
	int i;
	int temp;
	
	for (i =0; i <length/2 ; i++) {
		temp=values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
	}
}
",1
njon803,1695875330,1,"void ReverseArray(int *values, int length)
{
	int count = 0;
	int store;

	for (int i = length-1; i >= length / 2; i--) {
		store = values[i];
		values[i] = values[count];
		values[count] = store;
		count++;
	}

}",1
nlal162,1695722915,1,"void ReverseArray(int *values, int length)
{
	int order;
	int start = 0;
	int end = length - 1;

	while (start < end) {
		order = values[start];
		values[start] = values[end];
		values[end] = order;

		start++;
		end--;


	}

}",1
nmah920,1696080717,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int temp;
    for (int i = 0; i < length/2; i++)
    {
        temp =  values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
nqua370,1696239139,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;

        start++;
        end--;
    }
}",1
nren130,1696039196,1,"#include <stdio.h>

void ReverseArray(int values[], int length) {
for (int i = length - 1; i >= 0; i--) {
printf(""%d "", values[i]); 
    }
}

",0
nren130,1696051891,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
int temp;
for (int i = 0; i < length/2; i++) {
     temp = values[i];
     values[i] = values[length - 1 - i];
     values[length - 1 - i] = temp;
}
     
}",1
nrub019,1695686960,1,"#include <stdio.h>

void ReverseArray(int values[], int n) {

    int temp[n] ={};
    
    for (int i = 0; i < n; i++){

        temp[i] = values[n-i-1];
    }
    
    for (int i = 0; i < n; i++) {

        values[i] = temp[i];
    }
}",0
nrub019,1695687542,2,"#include <stdio.h>

void ReverseArray(int values[], int n) {

    int m;
    int holder;

    n = n-1;
    m  = n/2;

    for (int i = 0 ; i < m ; i++) {

    holder = values[i];
    values[i] = values[n-i];
    values[n-i] = holder;

    }

}",0
nrub019,1695687764,3,"#include <stdio.h>

void ReverseArray(int values[], int n) {

    int j;
    int m;
    int holder;

    j = n-1;
    m  = n/2;

    for (int i = 0 ; i < m ; i++) {

    holder = values[i];
    values[i] = values[j-i];
    values[j-i] = holder;

    }

}",1
nthe160,1696133659,1,"void ReverseArray(int *values, int length)
{
	int orinalvalue;
	int	lastvalue;
	int firstvalue;

	for (firstvalue = 0, lastvalue = length-1; firstvalue < lastvalue; firstvalue++, lastvalue--) { // loop to swap elements
		orinalvalue = values[firstvalue];
		values[firstvalue] = values[lastvalue];
		values[lastvalue] = orinalvalue;
	}
}",1
ntia856,1695985673,1,"#include <stdio.h>

void ReverseArray(int* values, int amount) {
    int left = 0;
    int right = amount - 1;

    while (left < right) {
        int array = values[left];
        values[left] = values[right];
        array = values[right];
        left++;
        right--;   
    }
}",0
ntia856,1695986224,2,"#include <stdio.h>

void ReverseArray(int* values, int amount) {
    int left = 0;
    int right = amount - 1;

    while (left < right) {
        int array = values[left];
        values[left] = values[right];
        values[right] = array;
        left++; 
        right--;  
    }
}",1
ntur101,1695687052,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int end = length-1;
	

	for (int i = 0; i < (length/2); i++) {
		int temp = values[i];			
		values[i] = values[end];
		values[end] = temp;
		
		end--;
	}


}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}

",0
ntur101,1695687073,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int end = length-1;
	

	for (int i = 0; i < (length/2); i++) {
		int temp = values[i];			
		values[i] = values[end];
		values[end] = temp;
		
		end--;
	}


}
",1
nwei818,1695678009,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
	int temp, i;
		for (i = 0; i < length / 2; i++) {
			temp = values[i];
			values[i] = values[length - i - 1];
			values[length - i - 1] = temp;
	}
}",1
nwil850,1695800020,1,"#include <stdio.h>

void ReverseArray (int values[], int x) 
{
    for (int i = 0, j = x-1; i < j; i++, j--) {
        int n = values[i];
        values[i] = values[j];
        values[j] = n;
        }
}
",1
nyua944,1695608256,1,"#include <stdio.h>

void ReverseArray(int values[], int num) {
    int start = 0;
    int end = num - 1;
    int temp;
    
    while (start < end) {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}",1
obar199,1696210972,1,"void ReverseArray(int *values, int length) {
    int a[length];
    for (int j = 0;j<length;j++){
    a[j] = values[j];
        
    }
    for (int i = 0;i < length;i++) {
    values[i] = a[length-1-i];}
    
    
} ",1
ogab251,1695872823,1,"#include <stdio.h>

int ReverseArray(int array[], int numValues)
{
    int first = 0;
    int last = numValues - 1;
    
    while (first < last) {
        array[first] = array[first] + array[last];
        array[last] = array[first] - array[last];
        array[first] = array[first] - array[last];
        
        first++;
        last--;
    }
}",0
ogab251,1695873007,2,"#include <stdio.h>

void ReverseArray(int array[], int numValues)
{
    int first = 0;
    int last = numValues - 1;
    
    while (first < last) {
        array[first] = array[first] + array[last];
        array[last] = array[first] - array[last];
        array[first] = array[first] - array[last];
        
        first++;
        last--;
    }
}",1
ogan176,1696043538,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;
	int temp = 0;

	while (start < end) {
		temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}
}",1
ogar584,1695689465,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int newarray[length];
    for (i = 0; i < length; i++)
    {
        newarray[i] =  values[length - (i + 1)];
    }
    for (i = 0; i < length; i++)
    {
        values[i] = newarray[i];
    }
}",1
oguo680,1695973963,1,"void ReverseArray(int *values, int length)
{
    int index;
    int index_two = 0;
    int values_two[length];

    for (index = length - 1; index >= 0; index--) {
        values_two[index_two] = values[index];
        index_two++;
    }

    for (index = 0; index < length; index++) {
        values[index] = values_two[index];
    }
}
",1
oko158,1695727519,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
    int*first = values;
    int*last = length - 1 + values;

    for (int i = 0; i < length / 2; i++) {
        
        int temp = *(first + i);
        *(first + i) = *(last - i);
        *(last - i) = temp;
    }
}",1
onic423,1696237734,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
int temp;
    for (int i = 0; i < length / 2; i++) {
        // Swap elements at positions i and length - 1 - i
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    
    // Call the ReverseArray function
    ReverseArray(values, 7);
    
    // Print the reversed array
    for (int i = 0; i < 7; i++) {
        printf(""%d "", values[i]);
}
",0
onic423,1696237763,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
int temp;
    for (int i = 0; i < length / 2; i++) {
        // Swap elements at positions i and length - 1 - i
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    
    // Call the ReverseArray function
    ReverseArray(values, 7);
    
    // Print the reversed array
    for (int i = 0; i < 7; i++) {
        printf(""%d "", values[i]);
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}",0
opat597,1696220366,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {

        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
opre469,1696042435,1,"//ReverseArray reverses the order of an array//
void ReverseArray(int* values, int length)
{
	int start, end;

	//for loop to replace reverse the order of the array
	for (int i = 0; i < length/2; i++) {

		//finds the first value of the two values being switched//
		start = values[i];

		//finds the end value of the two values being switched// 
		end = values[length - i - 1];

		//switches the two numbers//
		values[i] = end;
		values[length - i - 1] = start;
	}

}",1
orow585,1695888667,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
	int width = length - 1;
	int front;
	int back;

	for (int i = 0; i < length / 2; i++) {
		front = *(values + i);
		back = *(values + width - i);
		*(values + i) = back;
		*(values + width - i) = front;
	}
}",1
osca399,1695696557,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int hold;
	for (i = 0; i < length / 2; i++) {
	hold = values[i];
	values[i] = values[length - 1 - i];
	values[length - 1 - i] = hold;
	
	}

}



/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = { 1, 2, 3, 4, 5, 6, 7 };

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
		printf(""%d "", values[i]);
	}

	return 0;
}

// Authored by Olano Scarlett",0
osca399,1695696636,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int hold;
	for (i = 0; i < length / 2; i++) {
	hold = values[i];
	values[i] = values[length - 1 - i];
	values[length - 1 - i] = hold;
	
	}

}


",1
oshi740,1695849100,1,"#include<stdio.h>
void ReverseArray(int* values, int length) {
	int startV, endV;
	startV = 0;
	endV = length - 1;

	while (startV < endV) {
		values[startV] = values[startV] + values[endV];
		values[endV] = values[startV] - values[endV];
		values[startV]= values[startV] - values[endV];
		startV++;
		endV--;
	}
}",1
osko432,1696045341,1,"#include <stdio.h>
#define Deez_Nuts
void ReverseArray(int *stunny, int kung){
int ynnuts[kung];
for (int hung=0; hung<kung; hung++){
    ynnuts[hung]=stunny[hung];
}
for (int hung=0; hung<kung+1/2; hung++){
    ynnuts[hung]=stunny[kung-1-hung];
    ynnuts[kung-1-hung]=stunny[hung];
}
for (int hung=0; hung<kung; hung++){
    printf(""%d "",ynnuts[hung]);
}
}",0
osko432,1696045591,2,"#include <stdio.h>
#define Deez_Nuts
void ReverseArray(int *stunny, int kung){
int ynnuts[kung];
for (int hung=0; hung<kung; hung++){
    ynnuts[hung]=stunny[hung];
}
for (int hung=0; hung<kung+1/2; hung++){
    ynnuts[hung]=stunny[kung-1-hung];
    ynnuts[kung-1-hung]=stunny[hung];
}
for (int hung=0; hung<kung; hung++){
    stunny[hung]=ynnuts[hung];
}
}",1
pchh683,1695817249,1,"void ReverseArray(int *values, int length)
{
    int new[length];
    for (int i = 0; i < length; i++)
    {
        new[i] = values[length-i-1];
    }
    for (int i = 0; i < length; i++)
    {
        values[i] = new[i];
    }
}
",1
pchh683,1696205749,2,"void ReverseArray(int *values, int length)
{
    int new[length];
    for (int i = 0; i < length; i++)
    {
        new[i] = values[length-i-1];
    }
    for (int i = 0; i < length; i++)
    {
        values[i] = new[i];
    }
}",1
pfil701,1696057417,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    
    int start = 0;

    while (start < length) {
        length--;
        int swtch = values[start]; 
        values[start] = values[length];
        values[length] = swtch;

        start++;
    }
} ",1
pfon568,1695704232,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length / 2; i++) 
    { 
        int num = values[i];
        values[i] = values[(length - 1) - i];
        values[(length - 1) - i] = num;
        
    }
    
}",1
phao209,1696230967,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        // Swap elements at index i and length - 1 - i
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
",1
pkim777,1695676719,1,"void ReverseArray(int *values, int length) 
{
    int i, j, copy[length];
    int count = 0;
    for (i = (length - 1); i >= 0; i--) {
        copy[count] = values[i];
        count++;
    }
    for (j = 0; j < length; j++) {
        values[j] = copy[j];
    }
}",1
plah275,1695700259,1,"#include <stdio.h>

void ReverseArray(int inptar[],int values)
{
    int newar[values];
    
    int i;
    int j;
   
    
    for(i = (values-1);i >= 0;i--) {
        
        newar[(values-1)-i] = inptar[i];
        
    } 
    for(j = 0;j < values;j++) {
        
        inptar[j] = newar[j];
    }
    
    return; 
}",1
plan310,1695772213,1,"void ReverseArray(int* values, int length)
{
    int i;
    int fixed;

    for (i = 0; i < length / 2; i++) {
        fixed = values[length - i - 1];
        values[length - i - 1] = values[i];
        values[i] = fixed;
    }
}",1
ppax865,1696232023,1,"#include <stdio.h>

void ReverseArray(int values[], int length) {
    
    int tempnum;
    for (int i = 0; i < length/2; i++) {
        tempnum = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = tempnum;
    }
}",1
pper327,1696111455,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int temp, i, j; 

	j = length - 1;
	for (i = 0; i <= ((length-1)/2); i++) {
		temp = values[i];
		values[i] = values[j];
		values[j] = temp;
		j--;
	}

}
",1
ppra303,1696182212,1,"#include <stdio.h>


void ReverseArray(int *values, int length) // Function prototype declaration
{
    for (int left = 0, right = length - 1; left < right; left++, right--) {
        
        /* Here swap elements at the left and right positions, bascially just assigning values */
        int temp = values[left];
        values[left] = values[right];
        values[right] = temp;
    }
}

int main() 
{ 
    // Initialise an array of integers
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    int length = 7;

    ReverseArray(values, length);

    for (int i = 0; i < length; i++)
    {
        printf(""%d "", values[i]); // The array will be printed reversed here
    }

    return 0;
}",0
ppra303,1696182425,2,"
#include <stdio.h>


void ReverseArray(int *values, int length) // Function prototype declaration
{
    for (int left = 0, right = length - 1; left < right; left++, right--) {
        
        /* Here swap elements at the left and right positions, bascially just assigning values */
        int temp = values[left];
        values[left] = values[right];
        values[right] = temp;
    }
}

int main() 
{ 
    // Initialise an array of integers
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    int length = 7;

    ReverseArray(values, length);

    for (int i = 0; i < length; i++)
    {
        printf(""%d "", values[i]); // The array will be printed reversed here
    }

    return 0;
}",0
ppra303,1696182444,3,"
#include <stdio.h>


void ReverseArray(int *values, int length) // Function prototype declaration
{
    for (int left = 0, right = length - 1; left < right; left++, right--) {
        
        /* Here swap elements at the left and right positions, bascially just assigning values */
        int temp = values[left];
        values[left] = values[right];
        values[right] = temp;
    }
}

int main(void) 
{ 
    // Initialise an array of integers
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    int length = 7;

    ReverseArray(values, length);

    for (int i = 0; i < length; i++)
    {
        printf(""%d "", values[i]); // The array will be printed reversed here
    }

    return 0;
}",0
ppra303,1696182454,4,"
#include <stdio.h>


void ReverseArray(int *values, int length) // Function prototype declaration
{
    for (int left = 0, right = length - 1; left < right; left++, right--) {
        
        /* Here swap elements at the left and right positions, bascially just assigning values */
        int temp = values[left];
        values[left] = values[right];
        values[right] = temp;
    }
}

int() 
{ 
    // Initialise an array of integers
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    int length = 7;

    ReverseArray(values, length);

    for (int i = 0; i < length; i++)
    {
        printf(""%d "", values[i]); // The array will be printed reversed here
    }

    return 0;
}",0
ppra303,1696197252,5,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    for (int left = 0, right = length - 1; left < right; left++, right--) {
     /* Here swap elements at the left and right positions, bascially just assigning values */
    int temp = values[left];
    values[left] = values[right];
    values[right] = temp;
    }
}
// Initialise an array of integers
int main(void)
{
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

    ReverseArray(values, 7);

    for (int i = 0; i < 7; i++) 
    {
       printf(""%d "", values[i]);// The array will be printed reversed here
    }

    return 0;
}",0
ppra303,1696198717,6,"#include <stdio.h>

 ReverseArray(int *values, int length)
{
    
    for (int left = 0, right = length - 1; left < right; left++, right--) {
        //Here swap elements at the left and right positions, bascially just assigning values
      
        int temp = values[left];
        values[left] = values[right];
        values[right] = temp;
    }
}

int main()
{
    // Initialise an array of integers
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

  
    ReverseArray(values, 7);

    
    for (int i = 0; i < 7; i++) {
       printf(""%d "", values[i]); // Print the reversed array
    }

    return 0;
}
",0
ppra303,1696198866,7,"#include <stdio.h>

 void ReverseArray(int *values, int length)
{
    
    for (int left = 0, right = length - 1; left < right; left++, right--) {
        //Here swap elements at the left and right positions, bascially just assigning values
      
        int temp = values[left];
        values[left] = values[right];
        values[right] = temp;
    }
}

int main()
{
    // Initialise an array of integers
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

  
    ReverseArray(values, 7);

    
    for (int i = 0; i < 7; i++) {
       printf(""%d "", values[i]); // Print the reversed array
    }

    return 0;
}
",0
ppra303,1696200509,8,"#include <stdio.h>

ReverseArray(int *values, int length)
{
    
    for (int left = 0, right = length - 1; left < right; left++, right--) {
        //Here swap elements at the left and right positions, bascially just assigning values
      
        int temp = values[left];
        values[left] = values[right];
        values[right] = temp;
    }
}


",0
ppra303,1696230166,9,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    // Initialise two pointers
    int start = 0;
    int end = length - 1;

   
    while (start < end) {
        // Here swap the elements at the start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start pointer forward and the end pointer backward
        start++;
        end--;
    }
}

/* Here is the main function for the program. You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

    // Call the ReverseArray function to reverse the 'values' array
    ReverseArray(values, 7);

   
    for (int i = 0; i < 7; i++) {
       printf(""%d "", values[i]); // Print the reversed array
    }

    return 0;
}
",0
ppra303,1696231354,10,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    // Initialise two pointers
    int start = 0;
    int end = length - 1;

   
    while (start < end) {
        // Here swap the elements at the start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start pointer forward and the end pointer backward
        start++;
        end--;
    }
    return 0;
}

",0
ppra303,1696234357,11,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    // Initialise two pointers
    int start = 0;
    int end = length - 1;

   
    while (start < end) {
        // Here swap the elements at the start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start pointer forward and the end pointer backward
        start++;
        end--;
    }
}

",1
pshe539,1695696037,1,"void ReverseArray(int *values, int length)
{
	int temp = 0;
	int i;
	
	for (i = 0; i < length; i++){
		
		temp = values[i];

		values[i] = values[(length - 1 - i)];
		values[length - 1 - i] = temp;

		if (i == (length - 1 - i) || i == (length - 2 - i)){
			break;
		}
	}
}",1
psin207,1696024243,1,"void ReverseArray(int *values, int length)
{
    int y;
    int i = 0;
    int x=length-1;
    int z=length/2;

    for (i = 0; i<z; i++) {
        y=values[i];
        values[i] = values[x];
        values[x]=y;
        x--;
    }

}",1
pwat943,1695637519,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
    
    // Temporary Storage
    int temp;

    for (int i = 0; i < length / 2; i++) {
        // Swap elements at positions i and length - 1 - i
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
pwil422,1696220427,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
     int left=0;
     int right=length-1;

    while (left<right) {
        int temp=values[left];
        values[left]=values[right];
        values[right]=temp;
        left++;
        right--;
    }
}",1
pwu278,1695868789,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int i;
	int j;
	int x;
	int y;

	j = length;
	for (i = 0; i < (length / 2); i++) {
		j--;
		x = values[i];
		y = values[j];
		values[i] = y; 
		values[j] = x;
	}
}",1
pxie161,1695627827,1,"void ReverseArray(int *values, int length)
{	
	int *pointer1, *pointer2, temp;
    pointer1 = values; // point to first element of array
    pointer2 = values + length -1; // point to last element of array
    
    while (pointer1 < pointer2) { // loop to swap elements
        temp = *pointer1;
        *pointer1 = *pointer2;
        *pointer2 = temp;
        pointer1++;
        pointer2--;
    }
}",1
pyou182,1695774453,1,"void ReverseArray(int *values, int length)
{
    //Create temp array
   int i;
   int *p;
   int temp[1000] = {0};

   //Make temp and values similar
   for (i = 0; i < length; i++) {
      temp[i] = values[i];
   }

   //Reverse Array
   for(i = 0; i < length; i++){
    p = &values[i];
   *p = temp[length - 1 - i];
}

}",1
qche619,1696241770,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int start = 0;
    int end = length - 1;
    
    while (start < end) 
    {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start = start + 1;
        end = end - 1;
    }
}",1
qkan386,1695871208,1,"void ReverseArray(int *values, int length) {

	int j = length - 1;
	int arr[1000];
	
	for (int i = 0; i < length; i++) {
		arr[i] = values[i];
	}

	for (int i = 0; i < length; i++) {
		values[i] = arr[j];
		j = j --;	
	}

}",0
qkan386,1695872563,2,"void ReverseArray(int* values, int length) {

	int i = 0;
    int j = length - 1;
	int value;

	for (i; i < j; i++) {

		value = values[i];
		values[i] = values[j];
		values[j] = value;

		j = j - 1;
	}
}",0
qkan386,1695983755,3,"void ReverseArray(int* values, int length) {

	int start = 0;
	int end = length - 1;
	int value;

	while (start < length / 2) {
		value = values[start];
		values[start] = values[end];
		values[end] = value;
		start = start + 1;
		end = end - 1;
	}
}",1
qmcc945,1695704694,1,"void ReverseArray(int *values, int length)
{
	int i, tempArray[length], count;
	count = 0;
	
	for (i = (length-1); i > -1; i--) {
		tempArray[count] = values[i];
		count++;
	}
	for (i = 0; i < length; i++) {
		values[i] = tempArray[i];
	}
	
}",1
qtra338,1695603920,1,"#include <stdio.h>

// the array and the length of the array is passed into the function
// for the array, it's called by reference 
void ReverseArray(int *values, int length) {
    int i, j, starting_index, inter_values[100] = {0};

    starting_index = length - 1;
    j = 0;

    for (i = starting_index; i >= 0; i--) {
        inter_values[j] = values[i];
        j++;
    }

    for (int i = 0; i < length; i++) { 
        values[i] = inter_values[i];
    }
}",1
qwu129,1696241116,1,"
#include <stdio.h>

void ReverseArray(int *values, int length) {
    int i, temp;
    for (i = 0; i < length / 2; i++) {
        // Swap the values
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
qzho943,1695687907,1,"#include <stdio.h>
void ReverseArray(int values[], int elements){
    int i;
    int start = 0;
    int final = elements-1;
    
    while (start <= final ){
        int a = values[start];
        int b = values[final];
        
       values[start] = b;
       values[final] = a;
       
       start = start + 1;
       final = final - 1;
    }
}",0
qzho943,1695688483,2,"#include <stdio.h>
void ReverseArray(int *values, int length){
    
    int start = 0;
    int final = length-1;
    
    while (start <= final ){
        int a = values[start];
        int b = values[final];
        
       values[start] = b;
       values[final] = a;
       
       start = start + 1;
       final = final - 1;
    }
}",1
raic989,1695681809,1,"#include <stdio.h>

void ReverseArray (int *values, int length)
{
    int temp [length-1];
    int i,j;
    
    for (i=0; i<length; i++) {
    temp[i] = values[i];
    } 
    
    for (j=0; j<length; j++) {
        values[j] = temp [length-1-j];
    }
    
}",1
rand321,1695622696,1,"
void ReverseArray(int *values, int length)
{
    int i;
    int j = 0;
    int NewValues[length];
    for (i=(length-1); i>=0; i--){
       NewValues[j] = values[i];
       j++; 
    }
    
    for (i=0; i<=length; i++){
    values[i] = NewValues[i];
    }
    
    
}",1
rbaj698,1696199715,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray (int *values,int length)
{
	int i;
	for (i = length - 1; i>=0 ; i--) {
		printf(""%d"", values[i]);
	}

return 0;

}",0
rbaj698,1696199867,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray (int *values,int length)
{
	int i;
	for (i = length - 1; i>=0 ; i--) {
		printf(""%d"", values[i]);
	}

}",0
rbaj698,1696211342,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray (int *values,int length)
{
	int i;
	int temp;
	for (i = 0; i<length / 2 ; i++) {
		temp = values [i];
		values [i] = values [length - 1 - i];
		values [length - 1 - i] = temp;
	}

}
",1
rbat374,1695694010,1,"void ReverseArray(int *values, int length)
{
    for (int i = 0; i<length/2; i++){
      int temporary = values[i];
      values[i] = values[length-i-1];
      values[length-i-1] = temporary;
    }
    
}",1
rbat561,1695610942,1,"void ReverseArray(int *values, int length)
{	
	int temp, rvalues[length];
	for (int i = 0; i < length; i++)
	{
		rvalues[i] = values[length - i - 1];
	}

	for (int i = 0; i < length; i++)
	{
		values[i] = rvalues[i];
	}
	
}",0
rbat561,1695610981,2,"void ReverseArray(int *values, int length)
{	
	int rvalues[length];
	for (int i = 0; i < length; i++)
	{
		rvalues[i] = values[length - i - 1];
	}

	for (int i = 0; i < length; i++)
	{
		values[i] = rvalues[i];
	}
	
}",1
rbui853,1695623671,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;

	while(start < end) {
		int temporary = values[start];
		values[start] = values[end];
		values[end] = temporary;
		
		start++;
		end--;
	}
}",1
rbus291,1695786312,1,"#include<stdio.h>
void ReverseArray(int values[], int length) {
	int i;
	int s;
	
	for (i = length ; i >= length/2; i--) {
		s = values[i];
		values[i] = values[length -i - 1];
		values[length - i - 1] = s;

	}
	}",1
rchi339,1696047982,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int tempValues[length];
    
	for (int i = 0; i < length; i++) {
		tempValues[i] = *values;
		values++;
	}
    values = values - 1;
    
	for (int i = 0; i < length; i++) {
		values[0] = tempValues[i];
		values = values - 1;
	}
}
",1
rcou530,1695714357,1,"#include <stdio.h>


void ReverseArray(int *values, int length){
	int i=0;
	int *start = values;
	int *end = values + length-1;


	for (i = 0; i<length; i++){
		while(start<end){
			int temp = *start;
			*start = *end;
			*end = temp;

			*start++;
			*end--;
		}
	}

return;
}",0
rcou530,1695714603,2,"#include <stdio.h>


void ReverseArray(int *values, int length){
	int *start = values;
	int *end = values + length-1;

	while(start<end){
		int temp = *start;
		*start = *end;
		*end = temp;

		start++;
		end--;
		}
return;
}",1
rdas322,1696210529,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
    int b,d;
    
    for ( b = 0; b < length * 0.5; b++) {
        d = values[b];
        
        values[b] = values[length - b - 1];
        values[length - c - 1] = d;
    }
}",0
rdas322,1696210542,2,"#include <stdio.h>

void ReverseArray(int* values, int length) {
    int b,d;
    
    for ( b = 0; b < length * 0.5; b++) {
        d = values[b];
        
        values[b] = values[length - b - 1];
        values[length - b - 1] = d;
    }
}",1
rdic384,1696242165,1,"void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}",1
rdon807,1695696850,1,"#include <stdio.h>


void ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length -1;
    int c;
    
    while (a<b){
        c=values[a];
        values[a]=values[b];
        values[b]=c;
        a++;
        b--;
    }
}",1
rdun690,1695706152,1,"void ReverseArray(int *values, int length)
{
    int i = 0;
    int j = length - 1;
    while (i < j){
        int val = values[i];
        values[i] = values[j];
        values[j] = val;
        
        i++;
        j--;
    }
    
}",1
rger104,1695773545,1,"void ReverseArray(int *values, int length)
{
	int tempvalue=-1;
	int i;
	for (i = 0; i < length/2; i++) {
		tempvalue= values[i];
		values[i] = values[length- (1+i)];
		values[length - (1+i)] = tempvalue;
	}
}",1
rgre692,1696236803,1,"void ReverseArray(int *values, int length) {
    int number;
    for (int i = 0; i < length / 2; i++) {
        number = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = number;
    }
}",1
rhen291,1696243149,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length) 
{
	int Reverse[length];
	int RAIndex = length;
	for (int i = 0; i < 7; i++) {
		Reverse = values[RAIndex];
		RAIndex = RAIndex - 1;
	}
	for (int i = 0; i < 7; i++) {
		values[i] = Reverse;
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}",0
rhua827,1696243537,1,"void ReverseArray (int *values, int length)
{
    int temp;
    for (int i = 0; i < length / 2; i++) { 
        temp = values[i]; 
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}",1
rkan756,1695702580,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;

	for (start = 0; start < end; start++, end--) {
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;
	}
}",1
rkar406,1695628272,1,"void ReverseArray(int *values, int length)
{
	int initial = 0;
	int final = length - 1;
	while (initial<final)
	{
		int tempvar = values[initial];
		values[initial] = values[final];
		values[final] = tempvar;

		initial++;
		final--;
	}
}",1
rkha931,1695766140,1,"#include <stdio.h>

void ReverseArray(int *values, int length){


for (int i = 0, end = length - 1; i < end; i++, end--) {
        // Swap elements at start and end indices
        int temp = values[i]; // Storing iterated array value into temporary storage space to avoid rewriting of values
        values[i] = values[end];
        values[end] = temp;
    }


}",1
rkir245,1696200107,1,"void ReverseArray(int *values, int length)
{
	int i, len, temp_val;

	len = length / 2;

	for (i = 0; i < len; i++)
	{
		temp_val = values[i];
		values[i] = values[length - 1 - i]; 
		values[length - 1 - i] = temp_val;
	}

}",1
rleg709,1695768346,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i, x, array[length];
    x = 0;
    for (i = (length - 1); i >= 0; i--) {
        array[x] = values[i];
        x = x + 1;
    }
        for (i = 0; i < length; i++) {
            values[i] = array[i];
            }
} ",1
rlin108,1695721316,1,"void ReverseArray(int* values, int length)
{
	int i;
	int store;

	for (i = 0; i < length/2; i++) {
		store = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = store;
	}
}",1
rmar633,1695977541,1,"void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    length = length - 1;
    for (i=0; i < length/2; i++){
        temp = values[i];
        values[i] = values[length-i];
        values[length-i] = temp;
    }
    
}",0
rmar633,1695977712,2,"void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    length = length - 1;
    for (i=0; i <= length/2; i++){
        temp = values[i];
        values[i] = values[length-i];
        values[length-i] = temp;
    }
    
}",1
rmur989,1696053898,1,"#include <stdio.h>


void ReverseArray(int *values, int length){
    int values2[length];
    for (int i = 0; i < length; i++) { 
        
        values2[i] = values[i];
        
}
    
    for (int i = 0; i < length; i++) { 
        
        values[i] = values2[length-1-i];
        
}

}",1
rnga701,1695702009,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int temp;
	int i; 
	
	for (i=0;  i<length/2; i++){
		temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
	}	
}",1
rnig735,1695945559,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    length = length-1;
    int copy;
    for (int i=length; (i>=0 && i != length-i); i--) {
        copy = values[i];
        values[i] = values[length-i];
        values[length-i] = copy;
    }
}",0
rnig735,1695960299,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    length = length-1;
    int copy;
    
    for (int i=length/2; i>=0; i--) {
        copy = values[i];
        values[i] = values[length-i];
        values[length-i] = copy;
    }
}",1
rpar376,1695870417,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int oldvalues[40];
	for (int i = 0; i < length; i++) {
		oldvalues[i] = values[length - 1 - i];
	}
	for (int i = 0; i < length; i++) {
		values[i] = oldvalues[i];
	}
}",1
rpat943,1695798378,1,"#include <stdio.h>

void ReverseArray(int array[], int n) {
    int element[n];
    int i;
    /*
    for loop creates a new array which is the same as the input array to store elements 
    */
    for (i = 0; i < n; i++) {
        element[i] = array[i];
    }
   
    /*
    for loop reverses the array 
    */
    
    for (i = 0; i < n; i++) {
        array[i] = element[(n - 1) - i];
    }
}
",1
rraj313,1695613039,1,"void ReverseArray(int *values, int length)
{
	int i, swapValue;

	for(i = 0; i < length / 2; i++) {
        swapValue = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = swapValue;
    }
}",1
rroz381,1695765417,1,"void ReverseArray(int values[], int length)
{
    int i;
    int k;
    int new[length];
    int j = length-1;
   
   /*Duplicate array*/
   for (k = 0; k < length; k++) {
       new[k] = values[k];
   }
   
   /* Begin for loop*/
   for (i = 0; i < length; i++) {
      values[i] = new[j];
      j--;
   }
}",1
rsha769,1695690965,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	

	int temp;   
	for (int i = 0; i<length/2; i++) {   
        temp = values[i];   
        values[i] = values[length-1-i];   
        values[length-1-i] = temp;   
    }
}",1
rsha970,1695801167,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length / 2; i++) {
        // Swaps the numbers at positions i and ""length - 1 - i""
        int temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}",0
rsha970,1695802401,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    for (int i = 0; i < length / 2; i++) {
        
        int temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
rsin531,1696216657,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    
    ReverseArray(values, 7);

    for (int i = 0; i < 7; i++) {
        printf(""%d "", values[i]);
    }
}

    ",0
rsin531,1696219188,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}

    ",1
rsin719,1696061319,1,"void ReverseArray(int *values, int length) {
    
    int temp;
    
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
rsmi948,1695619851,1,"void ReverseArray(int *values, int length)
{
    int Large;
    int Small;
    int i;

     for (i = 0; i < ceil((double)length / 2); i++){ 
        Small = values[i];
        Large = values[length - 1 - i];
        values[i] = Large;
        values[length - 1 - i] = Small;
    }
}",1
rsta265,1695721392,1,"#define _CRT_SECURITY_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int end = length - 1;
    for (i = 0; i < end; i++ ){
        int start = values[i];
        values[i] = values[end];
        values[end] = start;
        end--;
    }
}",1
rtan654,1695693888,1,"void ReverseArray(int *values, int length)
{
	int k = 0;
	int storedvalue;
	for (int i = length - 1; i >= (length/2); i--){
		storedvalue = values[k];
		values[k] = values[i];
		values[i] = storedvalue;
		k = k + 1;
	}
}",1
rtap592,1696144925,1,"void ReverseArray(int *values, int length)
{
	int start = 0;
	int end = length - 1;

	while (start < end) {

		int swap = values[start];
		values[start] = values[end];
		values[end] = swap;

		start++;
		end--;

	}

}",1
rvog842,1696224022,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int stored;
    
    for (int i = 0; i < length / 2; i++) {
        stored = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = stored;
    }
}

/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}",0
rvog842,1696224061,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int stored;
    
    for (int i = 0; i < length / 2; i++) {
        stored = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = stored;
    }
}

",1
rwar748,1695787388,1,"void ReverseArray(int *values, int length)
{
	int i;
	
	for (i = length; i == 0; i--) {
	values[i] = values[(length-i)];
	}

}",0
rwar748,1695788558,2,"void ReverseArray(int *values, int length)
{
	int end = length - 1;
	int start = 0; 
	int store;
	while(start<end) {
		store = values[start];
		values[start] = values[end];
		values[end] = store;

		start ++;
		end --;
	}
	
}",1
rzha972,1695770031,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i;
	int temp;
    int index = length - 1;
	temp = values[index];

	for (i = index; i >= length/2; i--){
        temp = values[i];
		values[i] = values[index - i];
        values[index - i] = temp;
	}

}",1
sabo272,1695694504,1,"/* ENGGEN131 (2023) - Lab 9 
   EXERCISE ONE - Reverse Array
   This function takes an input array and reverses the order of the elements.
*/
#include <stdio.h>

// Define the function, which will reverse the elements in the array
void ReverseArray(int *originalVals, int length)
{
	// loop through all the values in the array
	for (int i = 0; i < length/2; i++) {
	    int temp = originalVals[i]; // Store current index in a temporary variable so that it can be swapped back to the end value.
	    originalVals[i] = originalVals[length-(i+1)]; // Swap beginning values with ending values.
	    originalVals[length-(i+1)] = temp;

	}
	return;
}
",1
sali153,1695787803,1,"void ReverseArray(int *values, int length)
{	
	int temp = 0;
	for(int i = 0; i < (length-1)/2; i++)
	{
		temp = values[length - 1 - i];
		values[length -1 - i] = values[i];
		values[i] = temp;
	}

}",0
sali153,1696208184,2,"void ReverseArray(int *values, int length)
{	
	int temp = 0;
	for(int i = 0; i <= (length-1)/2; i++)
	{
		temp = values[length - 1 - i];
		values[length -1 - i] = values[i];
		values[i] = temp;
	}

}",1
sban919,1695620393,1,"#include <stdio.h>

/* ReverseArray function takes an input of an integer array and the length of it
and returns the reverse order of the original order of the array. */

/* Author: Subeen Ban */

void ReverseArray(int *values, int length)
{
    int startIdx = 0, endIdx = length - 1;
    
    while (startIdx < endIdx)
    {
        int reverse = values[startIdx];
        values[startIdx] = values[endIdx];
        values[endIdx] = reverse;
        
        startIdx++;
        endIdx--;
    }
}",1
sbas887,1695982584,1,"int ReverseArray(int array[], int arrayLength) {
    int overallLength = arrayLength;
    int overallCounter = arrayLength - 1;
    int newArray[overallLength];

    for (int i = 0; i < overallLength; i++){
        newArray[i] = array[overallCounter];
        overallCounter--;
    }
    
    for (int i = 0; i < overallLength; i++){
        array[i] = newArray[i];
    }
}",0
sbas887,1695982725,2,"void ReverseArray(int array[], int arrayLength) {
    int overallLength = arrayLength;
    int overallCounter = arrayLength - 1;
    int newArray[overallLength];

    for (int i = 0; i < overallLength; i++){
        newArray[i] = array[overallCounter];
        overallCounter--;
    }
    
    for (int i = 0; i < overallLength; i++){
        array[i] = newArray[i];
    }
}",1
sben564,1696047117,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void ReverseArray(int *values, int length){
    
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        
        int temporary = values[start];
        values[start] = values[end];
        values[end] = temporary;
        
        start++;
        end--;
        
    }
    
    
}",1
sbha564,1696233347,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

    ReverseArray(values, 7);

    for (int i = 0; i < 7; i++) {
        printf(""%d "", values[i]);
    }

    return 0;
}
",0
sbha564,1696233361,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
sbou664,1696054943,1,"#include <stdio.h>
int ReverseArray(int *values, int length);

int ReverseArray(int *values, int length){
int temp;
int temp2;
int j;
int i;
if(length % 2 != 0){
length = length - 1;}
for(i = length; i > (length/2);){
    for(j = 0; j < (length/2);){
    temp2 = values[i]; 
    temp = values[j];
    values[i] = temp;
    values[j] = temp2;
    i--;
    j++;


}
    }

    
return *values;
}",0
sbou664,1696224205,2,"#include <stdio.h>
int ReverseArray(int *values, int length);

int ReverseArray(int *values, int length){
    int *temp;
    int i;
    int j;

    for(i = 0; i < length; i++){
        temp[i] = values[length - i - 1];
    }
    for(j = 0; j < length; j++){
        values[j] = temp[j];
    }
    return *values;
}",0
sbou664,1696227137,3,"#include <stdio.h>
int ReverseArray(int *values, int length){
int temp[length];
for(int i = 0; i < length; i++) {
    temp[i] = values[length - i - 1];
}
for(int j = 0; j < length; j++) {
    values[j] = temp[j];
}
return *values;
}

",1
sbro373,1695682134,1,"void ReverseArray(int *values, int lengthOfArray) {

    int temp;
    int lastIndex = lengthOfArray - 1;

    for (int i = 0; i < lastIndex; i++) {
        temp = values[i];
        values[i] = values[lastIndex];
        values[lastIndex] = temp;
        lastIndex--;
    }  
}",1
scar362,1696046166,1,"void ReverseArray(int *values, int length) {
    int output[length];
     for (int i=0; i<length; i++) {
        output[i]=values[length-1-i];
        
    }

for (int i = 0; i < length; i++) {
        values[i] = output[i];
    }
}",1
sche525,1695622586,1,"void ReverseArray(int *values, int length)
{
    int array[length];
    for(int i = 0; i < length; i++){
        array[i] = values[(length - 1) - i];
    }
    for(int i = 0; i < length; i++){
        values[i] = array[i];
    }
}",1
scho575,1696033032,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap elements 
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int length = sizeof(arr) / sizeof(arr[0]);

    printf(""Original array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    // Reverse 
    ReverseArray(arr, length);

    printf(""\nReversed array: "");
    for (int i = 0; i < length; i++) {
        printf(""%d "", arr[i]);
    }

    printf(""\n"");

    return 0;
}
",0
scho575,1696033063,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Swap elements 
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}


",1
schu718,1695950784,1,"void ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    int b;
    for(int i = 0; i < length/2; i++)
    {
        a = values[i];
        b = values[length - 1 - i];
        values[i] = b;
        values[length - 1 - i]= a;
    }
}
",0
schu718,1695950985,2,"void ReverseArray(int *values, int length)
{
    int a;
    int b;
    for(int i = 0; i < length/2; i++)
    {
        a = values[i];
        b = values[length - 1 - i];
        values[i] = b;
        values[length - 1 - i]= a;
    }
}
",1
schu800,1696233334,1,"void ReverseArray(int *values, int length){
    int x[length];
    for (int i = 0; i < length; i++){
        x[i] = values[(length - i - 1)];
        
    }
    for (int i = 0; i < 7; i++) { 
    printf(""%d "", x[i]); 
    }

}",0
schu800,1696233693,2,"void ReverseArray(int *values, int length) {
    int temp;
    int start = 0;
    int end = length - 1;

    while (start < end) {
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}",1
sdal739,1695866962,1,"void ReverseArray(int* values, int length)
{
    int i;
    int j;
    int temp;

    for (i = 0, j = length - 1; i < length/2; i++) {

        temp = values[i];
        values[i] = values[j];
        values[j] = temp;
        j--;
    }
}",1
sden589,1696239681,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int place_holder = values[start];
        values[start] = values[end];
        values[end] = place_holder;

        start++;
        end--;
    }
}",1
sekb555,1695625038,1,"#include <stdio.h>
//Author: Shrirang Ekbote
// Defines this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	//initalises a variable for half of length to be used in the for loop
	int maxval = length/2;
	//switches the first and last values of the array untill it reaches the middle
	for(int i = 0; i < maxval; i++)
	{
		//gets the first unchanged value of the array before it is changed
		int first = values[i];
		int last = values[length - i - 1];
		//changes the first unchanged value with the last
		values[i] = last;
		//changes last unchaged value with the first
		values[length - i - 1] = first;
	}

}",1
sfry192,1696064782,1,"#include <stdio.h>


// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
   int i,temp;
   
   for(i = 0;i < length/2;i++)
   {
       temp = values[i];
       values[i] = values[length - 1 -i];
       values[length - 1 -i] = temp;
    
   }
   
}",1
sgal263,1696216016,1,"void ReverseArray(int *values, int length)
{
for (int i = 0; i <(length/2 + 1); i++) {
int A = values[i];
values[i] = values[length - 1 - i];
values[length - 1 - i] = A;
} 
	
return;",0
sgal263,1696216602,2,"void ReverseArray(int *values, int length)
{
for (int i = 0; i <(length/2 + 1); i++) {
int A = values[i];
values[i] = values[length - 1 - i];
values[length - 1 - i] = A;
} 
	
return;

}",0
sgal263,1696217099,3,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
for (int i = 0; i <(length/2); i++) {
int A = values[i];
values[i] = values[length - 1 - i];
values[length - 1 - i] = A;
} 
	
return;

}",1
sgib237,1696049890,1,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int x = values[start];
        values[start] = values[end];
        values[end] = x;

        start++;
        end--;
    }
}",1
shan333,1696221785,1,"void ReverseArray(int *values, int length)
{
	int temp[length];
	int i;
	for (i=0; i < length; i++) {
		temp[i] = values[i];
	}

	int count = 0;

	for (i = length - 1; i > -1; i--) {
		values[i] = temp[count];
		count++;
	}
}",1
shan790,1695889994,1,"void ReverseArray(int *values, int length)
{	
	int tempValue;
	int max = length / 2;
	for (int i = 0; i <= max; i++) {
		tempValue = values[i];
		values[i] = values[length - (i + 1)];
		values[length - (i + 1)] = tempValue;
	}
}
",0
shan790,1695890464,2,"void ReverseArray(int* values, int length)
{
	int tempValue;
	int max = length / 2;
	for (int i = 0; i < max; i++) {
		tempValue = values[i];
		values[i] = values[length - (i + 1)];
		values[length - (i + 1)] = tempValue;
	}
}",1
she940,1695698149,1,"void ReverseArray(int *values, int length)
{
	int i;
	int lastvalue;
	int firstvalue;
	int values2;
	lastvalue = values[length - 1]; //7
	firstvalue = values[0];
	for (i = 1; i < ((length - 1) / 2); i++) {
		values2 = values[i];
		values[i] = values[(length - 1) - i];	
		values[(length - 1) - i] = values2;
		
	}
	values[0] = lastvalue;
	values[length - 1] = firstvalue;

	
}",0
she940,1695698805,2,"void ReverseArray(int *values, int length)
{
	int i;
	//int lastvalue;
	//int firstvalue;
	int values2;
	//lastvalue = values[length - 1]; //7
	//firstvalue = values[0];
	for (i = 0; i < (length / 2); i++) {
		values2 = values[i];
		values[i] = values[(length - 1) - i];	
		values[(length - 1) - i] = values2;
		
	}
	/*values[0] = lastvalue;
	values[length - 1] = firstvalue;*/

	
}",1
shsa718,1695706945,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int* pointer2;
	int placeholder;

	//Replace values to rearrange input array backwards
	for (int i=0; i<=((length-1)/2); i++) {

		/* For arrays with an odd number of elements, 
		escape from function when we reach the 'middle'
		index*/
		if ((length % 2 != 0)&&(i == length/2)) {
			return;
		}
        
		// Make switches
		pointer2 = &values[length-1-i]; 
		placeholder = *pointer2;
		*pointer2 = *(values+i); 
		*(values+i)=placeholder;
	} 

	return;
}
",1
shua365,1695630927,1,"void ReverseArray(int* array, int n){
    int temp[n],i ,count=0;
    for (i=n-1; i>-1; i--){
        temp[count]= array[i];
        count++;
    }
    for (i=0; i<n;i++){
        array[i]=temp[i];
    }
    
}",1
shum116,1695674805,1,"void ReverseArray(int* values, int length)
{
	
	for (int i = length-1; i >=0; i--) {
	
		printf(""%d"", values[i]);
	
	}
	printf(""\n"");
}",0
shum116,1695675660,2,"void ReverseArray(int* values, int length)
{
	int first, last;
	int stored;
	for (first = 0, last = length - 1; first < last; first++, last--) 
	{

		stored = values[first];
		values[first] = values[last];
		values[last] = stored;
	}
	
}",1
sike083,1695706777,1,"void ReverseArray(int *values, int length){
     int temp;
     for (int i = 0; i < length / 2; i++) {
         temp = values[i];
         values[i] = values[length - 1 - i];
         values[length - 1 - i] = temp;
    }
}",1
sjaf029,1695852449,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int a = 0;
	int b = length - 1;

	while (a < b) {
		int temp = values[a];
		values[a] = values[b];
		values[b] = temp;

		a++;
		b--;
	}
}

",1
sjai563,1695909944,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int firstValue = 0 ;
    int lastValue = length - 1 ;

    for (firstValue; firstValue < length / 2; firstValue++) {
        int reverseValues = values[firstValue] ;
        values[firstValue] = values[lastValue - firstValue] ;
        values[lastValue - firstValue] = reverseValues ;
    }
}
",0
sjai563,1695910251,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
    for (firstValue = 0; firstValue < length / 2; firstValue++) {
        int reverseValues = values[firstValue];
        values[firstValue] = values[length - 1 - firstValue];
        values[length - 1 - firstValue] = reverseValues;
    }
}",0
sjai563,1695910285,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
    for (int firstValue = 0; firstValue < length / 2; firstValue++) {
        int reverseValues = values[firstValue];
        values[firstValue] = values[length - 1 - firstValue];
        values[length - 1 - firstValue] = reverseValues;
    }
}",1
sjam309,1695873643,1,"void ReverseArray(int *values, int length)
{
	int x;
	int temp;
	int array[length];
	
	x = length;

	for (int i = 0; i < length; i++)
	{
		temp = values[i];
		array[i] = values[length - 1 - i];
		array[length - 1 - i] = temp;
		x--;
	}

    for (int i = 0; i < length; i++){
        values[i] = array[i];
    }
}
",1
sjob296,1696214517,1,"void MakeMove(int board[NUM_ROWS][NUM_], int tileToMove)
{ 
    int tileRowIdx, tileColIdx;
    int emptyRowIdx, emptyColIdx; 
    
    FindTile(board, tileToMove, &tileRowIdx, &tileColIdx);
    FindTile(board, -1, &emptyRowIdx, &emptyColIdx);
    
    if((abs(tileRowIdx - emptyRowIdx) == 1 && tileColIdx == emptyColIdx) || 
    (abs(tileColIdx - emptyColIdx) == 1 && tileRowIdx == emptyRowIdx)) 
    { 
        board[emptyRowIdx][emptyColIdx] = tileToMove;
        board[tileRowIdx][tileColIdx] = -1;
    }
}",0
sjob296,1696215196,2,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int start = 0;
    int end = length - 1;

    while (start < end) 
    {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
skan221,1696214472,1,"void ReverseArray(int *values, int length) 
{
   int start = 0;
   int end = length - 1;
   while (start < end) {
       
         int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
         start = start + 1;
        end = end - 1;
    }
}
",1
skea516,1695695957,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int i;
	int temp = 0;
	int counter = 0;
	
	for (i = length - 1; i >= (length/2); i--) {
	    temp = values[counter];
		values[counter] = values[i];
		values[i] = temp;
		counter = counter + 1;
	}
}
",1
skmu887,1696199767,1,"#include <stdio.h>

void ReverseArray(values, length) {
    int values;
    int length;
    int start;
    int end ;
    int temp;
    end = length -1;
    start = 0;
    
    // Swap the elements at the start of the array to end 
    // of the array throught the use of a while loop
    while (start < end) {

        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}",0
skmu887,1696199986,2,"#include <stdio.h>

void ReverseArray(int *values, length) {
    int length;
    int start;
    int end ;
    int temp;
    end = length -1;
    start = 0;
    
    // Swap the elements at the start to end of the array
    while (start < end) {

        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        // Move the start index forward and end index backward
        start++;
        end--;
    }
}

int main() {",0
skmu887,1696199995,3,"#include <stdio.h>

void ReverseArray(int *values, length) {
    int length;
    int start;
    int end ;
    int temp;
    end = length -1;
    start = 0;
    
    // Swap the elements at the start to end of the array
    while (start < end) {

        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        // Move the start index forward and end index backward
        start++;
        end--;
    }
}
",0
skmu887,1696200014,4,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;
    
    // Swap elements from start to end of the array
    while (start < end) {
        // Swap elements at start and end indices
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        // Move the start index forward and end index backward
        start++;
        end--;
    }
}

int main() {",0
skmu887,1696200019,5,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;
    
    // Swap elements from start to end of the array
    while (start < end) {
        // Swap elements at start and end indices
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        // Move the start index forward and end index backward
        start++;
        end--;
    }
}

",1
skop291,1696133294,1,"void ReverseArray(int *values, int length) 
{
    int temp;
    for(int i = 0; i < length/2; i++) 
    {
        // Swap the current element with the element at the mirrored position
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
",1
skul970,1695681173,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    
    int end = length - 1;
    int index = 0;
    
    int array[length];
    
    for (int count = 0; count < length; count++) {
        array[count] = values[count];
    }
    
    for (int i = end; i >= 0; i--) {
        values[index] = array[i];
        index++;
    }
    
}
",1
slam669,1695863805,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void ReverseArray(int *values, int length)
{
    int start = 0;
    int end = length - 1;

    while (start<end) { 
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
        
    }
    
}
",1
slie508,1696212667,1,"void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    for (i = 0; i < (length/2); i++) {
    temp = values[i];
    values[i] = values[length-1-i];
    values[length-1-i] = temp;
    }
}",1
sluo487,1696205199,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i = 0;
    while (i < length/2) {
        Swap(values, i, length-1-i);
        i++;
    }
}

void Swap(int *values, int i , int j)
{
    int temp = values[i];
    values[i] = values[j];
    values[j] = temp;
}",0
sluo487,1696205348,2,"#include <stdio.h>

void Swap(int *values, int i, int j)
{
    int temp = values[i];
    values[i] = values[j];
    values[j] = temp;
}

void ReverseArray(int *values, int length)
{
    int i = 0;
    while (i < length/2) {
        Swap(values, i, length-1-i);
        i++;
    }
}",1
smac708,1695695929,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{ 
	int i; 
	int array[length]; 

// set new temp array so that when accessing the ith value doesn't update the array 
	for (i= 0; i<length; i++) {
	array[i] = values[i]; 
	}

// point the pointer (*values) toward the last value in the array and store it in the first value of the array 
	for (i = 0; i < length; i++) {
	values[i] = array[(length-1)-i]; 
	}

}",1
sman821,1695777993,1,"void ReverseArray(int *values, int length)
{
	int i;
	int newValues[99];

	for (i = 0; i < length; i++) {
		newValues[i] = values[length-i-1];
	}

	for (i = 0; i < length; i++) {
		values[i] = newValues[i];
	}

}",1
sman833,1695697428,1,"void ReverseArray(int *values, int length)
{
   int start = 0;
   int end = length - 1;

   while (start < end) {
    int temp = values[start];
    values[start] = values[end];
    values[end] = temp;

    start++;
    end--;
   }
}",1
smck855,1695809246,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        
        start++;
        end--;
    }
}",1
smou122,1695778803,1,"void ReverseArray(int *values, int length){
    int up_to;
    up_to = length/2;

    int i;
    int placeholder;
    for (i = 0; i <= (up_to-1); i++){
        placeholder = values[(length-i-1)];
        values[(length-i-1)] = values[i];
        values[i] = placeholder;
        
    }
}",1
smun623,1696133012,1,"#include <stdio.h>


void ReverseArray(int *values, int length)
{ 
    int i;
   for ( i = length - 1; i >= 0 ; i--) {
        printf(""%d"", values[i]);
        
        if (i > 0) {
            printf("" "");
        }
    }
    printf(""\n"");
}



",0
smun623,1696134373,2,"
void ReverseArray(int *values, int length) {

	int  i;
	for (i = 0; i < length / 2; i++) {

		int tempValue;
			tempValue = values[i];
			values[i] = values[length - i - 1];
			values[length - i - 1] = tempValue; 
	}

}
",1
snas404,1696212362,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int ReverseArray(int values[], int length)
{
	int i = 0;
	int j = length - 1;
	int T[100] = {0};


	while (i <= length - 1 && j >= 0) {
		T[j] = values[i];
		i++;
		j--;
	}
	int k = 0;
	while (k <= length - 1) {
		values[k] = T[k];
		k++;
	}
	return values;
}",0
snas404,1696212988,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int values[], int length)
{
	int i = 0;
	int j = length - 1;
	int T[100] = {0};


	while (i <= length - 1 && j >= 0) {
		T[j] = values[i];
		i++;
		j--;
	}
	int k = 0;
	while (k <= length - 1) {
		values[k] = T[k];
		k++;
	}
	return;
}",1
span558,1695610678,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
while (start < end) {
    int temp = values[start];
    values[start] = values[end];
    values[end] = temp;
    start++;
    end--;
}
}",1
spar473,1695644876,1,"void ReverseArray(int *values, int length)
{

    for(int i = 0; i<length/2; i++)
    {
        int temp = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = temp;
    }
}",1
spar820,1696217712,1,"void ReverseArray(int *values, int length)
{
        
        int a = 0;
        int i, j;
        int temp[length];
        
        for (i=0; i<length; i++){
            temp[i]=values[i];
        }
        
        for (j=length-1; j>=0; j--){
            values[a]=temp[j];
            a++;
        }
        
}
",1
srak374,1696234570,1,"void ReverseArray(int *values, int length){
    int first = 0;
    int last = length -1;
    int swap;
    
    while(first < last){
        swap = values[first];
        values[first] = values[last];
        values[last] = swap;
        
        first++;
        last--;
    
    
        
    }
}",1
sran136,1696154724,1,"#include <stdio.h>;

void ReverseArray(int* values, int length)
{
	for (int i = (length - 1); i >= 0; i--) {
		printf(""%d "", values[i]);
	}
}",0
sran136,1696154735,2,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	for (int i = (length - 1); i >= 0; i--) {
		printf(""%d "", values[i]);
	}
}",0
sran136,1696161734,3,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
    int b = 0;
    int new_values[values]; // Create a new array to store reversed values

    for (int i = (length - 1); i >= 0; i--) {
        new_values[b] = values[i];
        b++;
    }

    // Copy the reversed values back to the original array
    for (int i = 0; i < length; i++) {
        values[i] = new_values[i];
    }
}
",0
sran136,1696197194,4,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int b = 0;
    int new_values[20] = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

    for (int i = (length - 1); i >= 0; i--) {
        new_values[b] = values[i];
        b++;
    }

    for (int i = 0; i < length; i++) {
        values[i] = new_values[i];
    }
}",1
srou953,1695867216,1,"void ReverseArray(int *values, int length)
{
    for(int i = length-1; i>-1; i--)
    {
        
    }

}",0
srou953,1695869220,2,"int ReverseArray(int *values, int length)
{
int temp = 0;

    for(int i=0; i<length/2; i++)
       {
        temp = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = temp;
        
       }
 
}",0
srou953,1695869514,3,"int ReverseArray(int *values, int length)
{
int temp = 0;

    for(int i=0; i<length/2; i++)
       {
        temp = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = temp;
        
       }
 
",0
srou953,1695870513,4,"void ReverseArray(int *values, int length)
{
int temp = 0;

    for(int i=0; i<length/2; i++)
       {
        temp = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = temp;
        
       }
 
}
 
",1
ssan467,1696129060,1,"#include <stdio.h>

// Function to reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int j = 0;
	int value;

	for (i = length - 1; i >= length/2; i--) {
		value = values[i];
		values[i] = values[j];
		values[j] = value;
		j++;
	}
}",1
ssan467,1696129149,2,"#include <stdio.h>

// Function to reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int j = 0;
	int value;

	for (i = length - 1; i > length/2; i--) {
		value = values[i];
		values[i] = values[j];
		values[j] = value;
		j++;
	}
}",0
ssan467,1696129158,3,"#include <stdio.h>

// Function to reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int j = 0;
	int value;

	for (i = length - 1; i >= length/2; i--) {
		value = values[i];
		values[i] = values[j];
		values[j] = value;
		j++;
	}
}",1
ssco465,1695792709,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length) {
    int tempval;
    for (int i = 0; i < length / 2; i++)
    {
        tempval = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = tempval;
    }
}
",1
ssey266,1696053631,1,"void ReverseArray(int *values, int length) 
{    
for (int i = 0, j = length - 1; i < j; i++, j--) {
int temp = values[i];
values[i] = values[j];
values[j] = temp;
    }
    
}",1
ssiv093,1696239164,1,"void ReverseArray(int* values, int length)
{
int start = 0;
int end = length - 1;
while (start < end) {
int temp = values[start];
values[start] = values[end];
values[end] = temp;

start++;
end--;
}
}
",1
sson972,1695625760,1,"void ReverseArray(int* values, int length)
{
	int end = 6;
	for (int i = 0; i <= length - 1; i++)
	{
		int tempValue = values[end];
		values[i] = tempValue;
		end--;
		
		
	}
	
}",0
sson972,1695629195,2,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int end = length - 1;
	int start = 0;
	for (int i = 0; i < length / 2; i++)
	{
		
		int tempValue = values[start];
		values[i] = values[end];
		values[end] = tempValue;
		end--;
		start++;
	}
	
}",1
sspa275,1695625440,1,"#include <stdio.h>

int ReverseArray(int array[], int length)
{
    int reverseArray[length];
    length++;
    int i;
    for (i = 0; i < length; i++) {
        reverseArray[length-i-2] = array[i];
    }
    for (i = 0; i < length - 1; i++) {
        printf(""%i "", i);
        printf(""%i "", array[i]);
        printf(""%i\n"", reverseArray[i]);
    }
    return reverseArray;
}",0
sspa275,1695701050,2,"void ReverseArray(int *array, int length)
{
    int reverseArray[length];
    length++;
    int i;
    for (i = 0; i < length; i++) {
        reverseArray[length-i-2] = array[i];
    }
    for (i = 0; i < length; i++){
        array[i] = reverseArray[i];
    }
}
",1
ssri357,1695695969,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int i;
	int temp;
	
	for (i = 0; i < length/2; i++) {

		temp = values[length - i - 1];
		values[length - i - 1] = values[i];
		values[i] = temp;
		
	}
	

}",1
steb012,1695692282,1,"void ReverseArray(int *values, int length){
    int temp;
    int i;
    for (i = 0; i<length/2; i++){
        temp = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = temp;
    }
}
",1
stia357,1695847455,1,"void ReverseArray(int* values, int length) 
{
    int temp[length];
    int i;

    for (i = 0; i < length; i++) {
        temp[i] = values[length - i - 1];
    }

    for ( i = 0; i < length; i++) {
        values[i] = temp[i];
    }
}",1
sum778,1695969152,1,"void ReverseArray(int* values, int length)
{
	int index = length - 1;
	int LeftPoint;
	int RightPoint;

	for (int i = 0; i < length/2; i++) {
		LeftPoint = values[i];
		RightPoint = values[index - i];
		values[i] = RightPoint;
		values[index - i] = LeftPoint;
	}
}",1
sval918,1696206984,1,"#include <stdio.h>

void ReverseArray(int values[], int length){
    int array[length]; //this array will hold the reverses array of the array values
    
    for (int i = 0; i < length; i++){
        array[i] = values[length -1 -i]; 
    }
    
    for (int i = 0; i < length; i++){
        values[i] = array [i]; 
    }
}
    ",1
swan472,1695632399,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 

{
    int start = 0;
    int end = length - 1;

    while (start < end) 
    
    {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}",1
sweb390,1695631313,1,"void ReverseArray(int *values, int length)
{
	int hold;
	int i;
	int lastSpot; 
	lastSpot = length / 2; 

	for (i = 0; i < lastSpot; i++) {
		hold = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = hold;
	}
}",1
swil676,1695608558,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	for (int i = 0; i < length; i++) {
		values[i] = length - i;
	}


}",0
swil676,1696208791,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int end = length - 1;
	
	for (int i = 0; i < end; i++, end--) {
		int array = values[i];
		values[i] = values[end]; 
		values[end] = array;
		
	}
	

}",1
syok443,1695634414,1,"    #define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length){

    int i, j = 0;
    int originalValues[50] = {0};


    for(i = 0; i < length; i++){
        //create a new array that stores the original order
        int *original;
        original = &values[i];
        originalValues[i] = *original;
    }

    for(i = length - 1; i >= 0; i--){

        //creates a pointer
        int *endVal;
        int *strtVal;
        
        //endVal points to the new array and strtVal points to the reference array
        //by doing this we can make values opposite index without messing up values in the array
        endVal = &originalValues[i];
        strtVal = &values[j];

        //end points to the start
        *strtVal = *endVal;
        j++;
    }
}
",1
syua841,1696217087,1,"#include <stdio.h>


void ReverseArray(int values[], int length){
    
    int high = length - 1;
    int low = ;
    
    while (high>low){
        int position = values[low];
        values[low] = values[high];
        values[high] = values[position];
        low++;
        high--;
    }

}",0
syua841,1696217118,2,"#include <stdio.h>


void ReverseArray(int values[], int length){
    
    int high = length - 1;
    int low = 0;
    
    while (high>low){
        int position = values[low];
        values[low] = values[high];
        values[high] = values[position];
        low++;
        high--;
    }

}",0
syua841,1696217879,3,"#include <stdio.h>


void ReverseArray(int values[], int length){
    
    int high = length - 1;
    int low = 0;
    
    while (high>low){
        int position = values[low];
        values[low] = values[high];
        values[high] = position;
        low++;
        high--;
    }

}",1
szen566,1695695345,1,"// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;
	int tempstart, tempend;

	for (i = 0; i <= (length - 1)/2; i++) {
		tempstart = values[i];
		tempend = values[length - 1 - i];

		values[i] = tempend;
		values[length - 1 - i] = tempstart;	
	}
}",1
szho466,1696225485,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int i;
    int valuesc;
    valuesc=values;
    for (i=0; i<length; i++){
        if (length%2!=0){
        values[i]=length-i;
        }
    }
    

}",0
szho466,1696225530,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int i;

    for (i=0; i<length; i++){
        if (length%2!=0){
        values[i]=length-i;
        }
    }
    

}",0
szho466,1696226195,3,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int i=0;
    int f=length-1;

    while (i<f){
        int temp=values[i];
        values[i]=values[f];
        values[f]=temp;
        
        i++;
        f--;
    }
}",1
tais804,1695690586,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
int i;
for (i = 0; i<(length/2); i++) {
	int value1 = values[i];
	int value2 = values[length-1-i];
	values[i] = value2;
	values[length-1-i] = value1;
	}
return;
}
",1
tbad483,1695709650,1,"#include <stdio.h>

void ReverseArray(int array[], int b){
    int re, i, jay;
    re = b - 1;
    for (i = 0; i<b/2; i++){
        jay = array[i];
        array[i] = array[re];
        array[re] = jay;
        re--;
        
    }
}",1
tbar968,1695866684,1,"void ReverseArray(int* values, int length)
{
	int i;
	i = 0;
	int temp;
	length = length - 1;

	for (i = 0; i < ((length / 2)+1); i++)
	{
	temp = values[i];
	values[i] = values[length - i];
	values[length-i] = temp;
}
}",1
tbar971,1695692251,1,"void ReverseArray(int *values, int length)
{
	for (int i = 0; i < (length / 2); i++) {
		int temporarypos;
		int* pos1 = &values[i];
		int* pos2 = &values[length - i - 1];
		temporarypos = *pos1;

		*pos1 = *pos2;
		*pos2 = temporarypos;
	}
}",1
tbas606,1696220113,1,"#include <stdio.h>

/* The function ReverseArray has two inputs passed: an array of integers, and the number of elements in the array. The function modifies the array so that the 
   elements are in reversed order 
   Author: Taha Basar
*/
void ReverseArray(int* values, int length){
	int start = 0;
	int end = length - 1;
	int array;

	while (start < end) {
		array = values[start];
		values[start] = values[end];
		values[end] = array;
		start++;
		end--;
	}	
}",1
tbed601,1695940879,1,"#include <stdio.h>
void ReverseArray(int* values, int length)
{
	int i = 0;
	int j = (length - 1);

	// By creating a temporary variable we create a local variable that can then be swapped or changed //
	while (i < j) {
		int temp = values[i];
		values[i] = values[j];
		values[j] = temp;

		i++;
		j--;
	}
}",1
tbri557,1696233569,1,"void ReverseArray(int *values, int length) {
    int start_pos = 0;
    int end_pos = length - 1;

    while (start_pos < end_pos) {
        int temp_val = values[start_pos];
        
        values[start_pos] = values[end_pos];
        values[end_pos] = temp_val;
        start_pos++;
        end_pos--;
    }
}",1
tche867,1695946464,1,"void ReverseArray(int array[],int number_of_element)
{

	int j = number_of_element-1;
	int half = number_of_element / 2;
	int swap;
	for (int i = 0; i <=half;i++)
	{
		// perform swap
		swap = array[i];
		array[i] = array[j];
		array[j] = swap;
		j--;
	}
}",0
tche867,1695946975,2,"void ReverseArray(int array[],int number_of_element)
{

	int j = number_of_element-1;
	int half = number_of_element / 2;
	int swap;
	if (number_of_element % 2 == 0)
	{
		half = half -1;
	}
	for (int i = 0; i <=half;i++)
	{
		// perform swap
		swap = array[i];
		array[i] = array[j];
		array[j] = swap;
		j--;
	}
}",1
tcoo725,1695891861,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int i;
    int temp;
    
    for (i = 0; i <= length/2; i++){
        temp = values[i];
        values[i] = values[length - i -1];
        values[length - i - 1] = temp;
        
    }

    
  
    
}
",0
tcoo725,1695971481,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int i;
    int t;
    

    i = 0;
    t = length - 1;
    while (i < t)
    {
        int r;
        r = values[i];
        values[i] = values[t];
        values[t] = r;
        
        i++;
        t--;
    }
}   
",1
tden200,1695866521,1,"#include <stdio.h>

int ReverseArray(int values[], int length)
{
	int j;
	int Old[length];
	for (j = 0; j < length; j++) {
		Old[j] = values[j];
	}



	int i;
	int count = 1;
	for (i = 0; i < length; i++) {
		int position = length - count;
		values[i] = Old[position];
		count += 1;
	}

}",0
tden200,1695866758,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int j;
	int Old[length];
	for (j = 0; j < length; j++) {
		Old[j] = values[j];
	}



	int i;
	int count = 1;
	for (i = 0; i < length; i++) {
		int position = length - count;
		values[i] = Old[position];
		count += 1;
	}

}",1
tdha392,1695818352,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int ReverseArray(int values[], int length)
{
    int x[length];
    x[length] = 0;
}

int main(void) {
    
    int i;
    int j = 0;
    int x[length];
    
    for (i = (length-1); i >= 0; i--) {
        x[j] = values[i];
        printf(""%d"", x[j]);
    }
    
    return 0;
}",0
tdha392,1695818674,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int ReverseArray(int values[], int length)
{
    int x[length];
    x[length] = 0;
    
    int i;
    int j = 0;
    
    for (i = (length-1); i >= 0; i--) {
        x[j] = values[i];
        printf(""%d"", x[j]);
    }
    
    return 0;
}
",0
tdha392,1695856005,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>



int ReverseArray(int values[], int length)
{
    int x[length];

    int i;
    int j = 0;

    for (i = (length - 1); i >= 0; i--) {
        x[j] = values[i];
        j = j + 1;
    }
    for (int i = 0; i < length; i++) {
        values[i] = x[i];
    }
    return 0;
}",1
tdic873,1695610551,1,"void ReverseArray(int *values, int length)
{
	int a, b;
	for (int i = 0; i < length / 2; i++)
	{
		a = values[i];
		b = values[length - 1 - i];
		values[length - 1 - i] = a;
		values[i] = b;
	}
	
}",1
tdon950,1695874601,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {

        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}",1
tdu824,1696230685,1,"void ReverseArray(int *values, int length)
 {
 int reverse[length];
 int i;
 int index;

 index = length - 1;
 for (i = 0; i < length; i++) {
	reverse[i]=values[i];
 } 

i=0;

  for (i = 0; i < length; i++) {
    values[i] = reverse[index - i];
 } 
return;

} ",1
tfai092,1695763928,1,"void ReverseArray(int values[], int length) {
    
    int i, j, x;
    int orig[length];
    
    x = length - 1;
    
    for (i=0; i < length; i++) {
        orig[i] = values[i];
    }
    
    for (j=0; j < length; j++) {
        values[j] = orig[x];
        x--;
    }
    
}",1
tfai653,1695692021,1,"#include <stdio.h>

// Function that reverses the elements in an array
void ReverseArray(int *values, int length)
{
	// Define variables.
	int i;
	int num1;
	int num2;
	int count = 1;
	
	// Switch the positions (and values) in the array.
	for (i = 0; i < (length/2); i++) {
		num1 = values[i];
		num2 = values[length - count];
		values[i] = num2;
		values[length - count] = num1;
		count++;
	}
}",1
tfru173,1696238067,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int tempArray;
    for (int i = 0; i < length/2; i++) 
    {
        tempArray = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = tempArray;
    }
}",1
thal182,1695606949,1,"void ReverseArray(int array[], int size) {
    int i;
    int j = 0;
    int temp[size];

    for (i = size - 1; i >= 0; i--) {
        temp[j] = array[i];
        j++;
    }

    for (i = 0; i < size; i++) {
        array[i] = temp[i];
    }
}",1
thar970,1695639357,1,"
void ReverseArray(int *arr,int length){
    int arr_copy[length];
    for(int i=0;i<length;i++){
        arr_copy[i]=arr[i];
    }
    for(int i=0;i<length;i++){
        arr[i]=arr_copy[length-i-1];
    }

}",1
thid924,1695941616,1,"void ReverseArray(int *values, int length)
{

	for (int i = 0, end = length -1; i < end; i++, end--) {
	    
int newValue = values[i];
		values[i] = values[end];
		
		values[end] = newValue;

	}

}",1
thua238,1695821777,1,"void ReverseArray(int *values, int length)
{
	//pointer i moves forward from 1st element
	int *i = &values[0];
	//pointer j moves backward from last element
	int *j = &values[length-1];

	//swaps values of each pointer until mid-point
	int hold;
	while (i < j) {
		hold = *i;
		*i = *j;
		*j = hold;
		//move pointers
		i++; 
		j--;
	}
}",1
thut580,1695698968,1,"void ReverseArray(int* values, int length)
{
	int TempValue;

	for (int i = 0; i < (length / 2); i++) {
		TempValue = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = TempValue;
	}
}",1
tkan918,1695782385,1,"void ReverseArray(int *values, int length)
{
	int i;
	int x[length+1];
	i = 0;
	for (i = 0; i<=length; i++) {
		x[i] = values[length - i];
	}
	i = 0;
	for (i = 0; i<=length; i++) {
		values[i] = x[i+1];
	}

}",1
tlal352,1696219536,1,"void ReverseArray(int *values, int length)
{
    int first = 0;
    int last = length - 1;
    int x;

    while (first < last) {
        x = values[first];
        values[first] = values[last];
        values[last] = x;
        first++;
        last--;
    }
}",1
tlin438,1695810445,1,"void ReverseArray(int *values, int length)
{
  int temp;
  int start;
  int end=length-1;
  
  for (start=0;start<end;start++,end--) {
     temp=values[start];
     values[start]=values[end];
     values[end]=temp;
   }
     
}
  ",1
tlu253,1695697192,1,"void ReverseArray(int *values, int length)
{
	int i;
	int array[length];
	for (i=0; i<length; i++) {
		array[length-1-i] = values[i];
	}
	
	for (i=0; i<length; i++) {
		values[i] = array[i];
	}
}",1
tluu816,1695767069,1,"void ReverseArray(int *values, int length)
{	
	//making an intiger which will continiously be changed 
	int stored;
	//for loop which only goes to half of the array (since it changes 2 with one step)
	for (int i = 0; i < length/2 + 1; i++) {
		// saves the current value to be used to replace the last value 
		stored = values[i];
		// makes the first value the same as the last value
		values[i] = values[length - 1 -i];
		// changes the last value to be the same as the stored value
		values[length - 1- i] = stored;

	}
}",0
tluu816,1695767307,2,"void ReverseArray(int *values, int length)
{	
	//making an intiger which will continiously be changed 
	int stored;
	//for loop which only goes to half of the array (since it changes 2 with one step)
	for (int i = 0; i < length/2; i++) {
		// saves the current value to be used to replace the last value 
		stored = values[i];
		// makes the first value the same as the last value
		values[i] = values[length - 1 -i];
		// changes the last value to be the same as the stored value
		values[length - 1- i] = stored;

	}
}",1
tman942,1696212120,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;

    while (start < end) {
        // Swap the elements at start and end positions
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start and end positions inward
        start++;
        end--;
    }
}

int main() {
    int n;

    // Prompt the user to enter the number of elements
    printf(""Enter the number of elements: "");
    scanf(""%d"", &n);

    int numbers[n];

    // Input the numbers from the user
    printf(""Enter %d numbers:\n"", n);
    for (int i = 0; i < n; i++) {
        scanf(""%d"", &numbers[i]);
    }

    // Call the ReverseArray function to reverse the array
    ReverseArray(numbers, n);

    // Print the reversed array
    printf(""Reversed array:\n"");
    for (int i = 0; i < n; i++) {
        printf(""%d\n"", numbers[i]);
    }

    return 0;
}",0
tman942,1696214232,2,"#include <stdio.h>

// Function to reverse an array of integers
void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int temp;

    while (start < end) {
        // Swap the elements at start and end positions
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        // Move the start and end positions inward
        start++;
        end--;
    }
}",1
tmcl219,1695867296,1,"/*This code modifies an input array on any length so that the elements are in 
the reverse order then prints out the reversed array.*/
void ReverseArray(int values[], int length)
{
    int halflength = length/2;
    int start = 0;
    int end = length - 1;
    int holder;
    
    for (int i = 0; i <= halflength; i++) { 
        holder = values[start];  
        values[start] = values[end];
        values[end] = holder;
        start = start + 1;
        end = end - 1;
    }
    return;
}",0
tmcl219,1695869499,2,"/*This code modifies an input array on any length so that the elements are in 
the reverse order then prints out the reversed array.*/
void ReverseArray(int values[], int length)
{
    int a, b;
   
    for (int i = 0; i < length/2; i++) { 
        a = values[i];
        b = values[length - 1 - i];
        values[i] = b;
        values[length - 1 - i] = a;
        
    }
    return;
}",1
tmen190,1695622706,1,"//	ReverseArray reverses the order of the elements within the array
//
//	Input:
//	values = An array of integer
//	length = The number of elements in the array
// 
//	Output:
//	Modify the contents of the array to be the reversed order

void ReverseArray(int *values, int length) {
	// Declare variables
	int reversedArray[100] = { 0 };

	// Find the reversed array
	for (int i = 0; i < length; i++)
	{
		reversedArray[i] = values[length - i - 1];
	}

	// Apply to the initial variable
	for (int j = 0; j < length; j++)
	{
		values[j] = reversedArray[j];
	}
}",1
tmir110,1696143509,1,"// Online C compiler to run C program online
#include <stdio.h>

void ReverseArray(int values[], int length) {
    int i = 0;
    int end = length - 1;
    int swap;
    
    
    while (i < end) 
    {
        swap = values[i];
        values[i] = values[end];
        values[end] = swap;
         i ++;
         end --;
    }
}",1
tmun974,1695792396,1,"void ReverseArray(int *values, int length)

{  for (int i=0; i<length/2; i++){
	int x =values[i];
	values[i]=values[length -i-1];
	values[length-i-1]=x;

}

}",1
tpan328,1695693834,1,"#include <stdio.h>

void ReverseArray(int values[], int length)
{
    int reversedValues[length-1];
    int j = 0;
    int p;

    for (int k = length - 1; k >= 0; k--) {
        p = values[k];
        reversedValues[j] = p;
        j++;
    }
    
    for (int i = 0; i < length; i++) {
        values[i] = reversedValues[i];
    }
}",1
tpat456,1695622915,1,"void ReverseArray(int *values, int length)
{
int i,j,z;
j = length - 1;
for (i = 0; i < length/2; i++) {
  z = values[i];
  values[i] = values[j];
  values[j] = z;
  j = j - 1;
}

}",1
tpil529,1695689328,1,"void ReverseArray(int *values, int length)
{
  int runner;
  int numbers[100] = {0};

  runner = length - 1;

  for (int i = 0; i < length; i++)
  {
      numbers[i] = values[i];
  }
for (int i = 0; i < length; i++)
  {
    values[i] = numbers[runner];
        runner = runner - 1;
  }
  return;
}",1
tpil529,1695689437,2,"void ReverseArray(int *values, int length)
{
  int runner;
  int numbers[length] = {0};

  runner = length - 1;

  for (int i = 0; i < length; i++)
  {
      numbers[i] = values[i];
  }
for (int i = 0; i < length; i++)
  {
    values[i] = numbers[runner];
        runner = runner - 1;
  }
  return;
}",0
tpil529,1695689485,3,"void ReverseArray(int *values, int length)
{
  int runner;
  int numbers[length];

  runner = length - 1;

  for (int i = 0; i < length; i++)
  {
      numbers[i] = values[i];
  }
for (int i = 0; i < length; i++)
  {
    values[i] = numbers[runner];
        runner = runner - 1;
  }
  return;
}",1
tpra228,1696232164,1,"void ReverseArray(int* values, int length){
    int s = 0;
    int e = length - 1;
    int temp;
    
    while (s < e){
        
        temp = values[e];
        values[s] = values[e];
        values[e] = temp;
        
        s++;
        e--;
    }
}",0
tpra228,1696232346,2,"void ReverseArray(int* values, int length) {
    for (int s = 0, e = length - 1; s < e; s++, e--) {
        int temp = values[s];
        values[s] = values[e];
        values[e] = temp;
    }
}",1
tpur744,1695785036,1,"#include <stdio.h>

void ReverseArray(int *values, int length){
    int startIndex = 0;
    int endIndex= length - 1;
    
    while(startIndex <= endIndex){
        int number = values[startIndex];
        values[startIndex] = values[endIndex];
        values[endIndex] = number;
        startIndex++;
        endIndex--;
    }
}",1
tqhu735,1695625495,1,"void ReverseArray(int* values, int length)
{
	int i;

	for (i = 0; i < length/2; i++) {
		int start = values[i];
		int final = values[(length - 1 - i)];

		values[i] = final;
		values[(length - 1 - i)] = start;
	}
}",1
tron042,1695701591,1,"void ReverseArray(int *values, int length)
{
    int i; 
    for(i = 0; i<length; i++) { 
        values[i]= length - i; 
    } 
}",0
tron042,1695702196,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int F = 0;      
    int L = length - 1;  
    while (first < last) {
        
        int temp = values[F];
        values[F] = values[L];
        values[L] = temp;

        F++;
        L--;
        }
}
",0
tron042,1695702236,3,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int F = 0;      
    int L = length - 1;  
    while (F < L) {
        
        int temp = values[F];
        values[F] = values[L];
        values[L] = temp;

        F++;
        L--;
        }
}
",1
tron042,1695719565,4,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    int temp;
    int i; 
    for (i = 0; i < length / 2; i++) {
        temp = values[i];
        length = length - i - 1; 
        values[i] = values[length];
        values[length] = temp;
    }
}",0
tron042,1695719624,5,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    int temp;
    int i; 
    for (i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}
",1
tsan986,1695789303,1,"void ReverseArray(int values[], int length)
{
    int temp;
    int i;
    temp = values[length-1];
    int endarray[length/2];
    int j;
    int k; 
    k = 0;
    j = 0;
    

    
    for (i = 0; i < length/2; i++) {
        endarray[i] = values[i];
    }
    
    printf(""Temp: %d\n"", temp); // delete
    
    
    for (i = 0; i < length / 2 ; i++) {
        values[i] = values[length-(i+1)];
    }
    
    if (length % 2 == 1){
        k = 1;
    }
    
    for (i = length/2 + k; i < length; i++) {
        values[i] = endarray[length/2 -j - 1];
        j = j + 1;
    }
    
    
}",0
tsan986,1695789348,2,"void ReverseArray(int values[], int length)
{
    int temp;
    int i;
    temp = values[length-1];
    int endarray[length/2];
    int j;
    int k; 
    k = 0;
    j = 0;
    

    
    for (i = 0; i < length/2; i++) {
        endarray[i] = values[i];
    }
    
    
    for (i = 0; i < length / 2 ; i++) {
        values[i] = values[length-(i+1)];
    }
    
    if (length % 2 == 1){
        k = 1;
    }
    
    for (i = length/2 + k; i < length; i++) {
        values[i] = endarray[length/2 -j - 1];
        j = j + 1;
    }
    
    
}",0
tsan986,1695789420,3,"void ReverseArray(int values[], int length)
{
    int i;
    int endarray[length/2];
    int j;
    int k; 
    k = 0;
    j = 0;
    

    
    for (i = 0; i < length/2; i++) {
        endarray[i] = values[i];
    }
    
    
    for (i = 0; i < length / 2 ; i++) {
        values[i] = values[length-(i+1)];
    }
    
    if (length % 2 == 1){
        k = 1;
    }
    
    for (i = length/2 + k; i < length; i++) {
        values[i] = endarray[length/2 -j - 1];
        j = j + 1;
    }
    
    
}",1
tsin304,1695796469,1,"void ReverseArray(int *values, int length)
{
    int halflength = length/2;
    
    printf(""%d\n"",halflength);
    
    for (int i = 0; i<halflength; i++)
    {
    int x = values[i];
    int y = values[length - 1 - i];
    
    values[i]=y;
    values[length-1-i]=x;
    
    }
    
}",0
tsin304,1695796485,2,"void ReverseArray(int *values, int length)
{
    int halflength = length/2;
    
    for (int i = 0; i<halflength; i++)
    {
    int x = values[i];
    int y = values[length - 1 - i];
    
    values[i]=y;
    values[length-1-i]=x;
    
    }
    
}",1
ttho505,1695766665,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int temp;
	int* x = values; // initial position of x pointed to first value in array
	int*y = values + (length - 1); // initial position of y pointed to the last value in array

	// swaps each value while moving x and y together to swap inner values.
	while (x < y) { 
		temp = *x;
		*x = *y;
		*y = temp;

		x++;
		y--;
	}

}",1
ttho743,1695693242,1,"#include <stdio.h>
void ReverseArray(int *values, int length) {
    int arr[length];
    int k = 0;
    int i;
    for(i = length - 1; i>=0; i--){
       arr[k] = values[i];
       k++;
    }
    
    for (i = 0; i < length; i++){
    values[i] = arr[i];
}
}",1
twad520,1696157982,1,"void ReverseArray(int* values, int length) {


    int end = length;

    for (int i = 0; i < 3; i++) {
        int temp = values[i];
        values[i] = values[end];
        values[end] = temp;

        end--;
    }
}
",0
twad520,1696158075,2,"void ReverseArray(int* values, int length) {


    int end = length - 1;

    for (int i = 0; i < 3; i++) {
        int temp = values[i];
        values[i] = values[end];
        values[end] = temp;

        end--;
    }
}
",0
twad520,1696239746,3,"#include <stdio.h>

void ReverseArray(int* values, int length) {

    int start = 0;  
    int end = length - 1;

    while (start < end) {

        int val = values[start];

        values[start] = values[end];
        values[end] = val;

        start++;
        end--;
    }
}
",1
twol698,1695789767,1,"void ReverseArray(int *values, int length){;
    int new[length];
    for (int i=0; i<length; i++){
        new[i] = values[-i-1+length];
    }
    for (int i=0; i<length; i++){
        values[i] = new[i]; 
    }
}",1
tyou333,1695605736,1,"void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[length - (i + 1)];
        values[length - (i + 1)] = values[i];
        values[i] = temp;
    }
}",1
tyou421,1695889504,1,"void ReverseArray(int* values, int length)
{
	/*This function takes an array of integers and the number of elements
	 in the array as the first and second function inputs, respectively.
	 The function arranges the array's elements in reverse order.

	 Inputs:
			values: An array of integers.
			length: An integer denoting the number of elements in the array.
	 Outputs:
			None.

	 Author: Toma Yousif*/


	// Declare the iterator and placeholder variable.
	int iterator;
	int placeholder;

	// Iterate through half of the array, since we are swapping 2 numbers at a time.
	// Iterating through the entire array would reverse the order twice, resulting in
	// the original array order.
	for (iterator = 0; iterator < (length / 2); iterator++)
	{
		// Store the indexed value in the placeholder variable as it will
		// be overwritten. It needs to be stored in some place so we can
		// access it after it gets overwritten in the array.
		placeholder = values[iterator];

		// Assign the last element of the first array to the first index.
		values[iterator] = values[length - (1 + iterator)];

		// Assign the element in the placeholder array to the last index.
		values[length - (1 + iterator)] = placeholder;
	}
}",1
tyou421,1695928477,2,"void ReverseArray(int* values, int length)
{
	/*This function takes an array of integers and the number of elements
	 in the array as the first and second function inputs, respectively.
	 The function arranges the array's elements in reverse order.

	 Inputs:
			values: An array of integers.
			length: An integer denoting the number of elements in the array.
	 Outputs:
			None.

	 Author: Toma Yousif*/


	// Declare the iterator and placeholder variable.
	int iterator;
	int placeholder;
	int halfLength;

	// Calculate half of the array's length.
	halfLength = length / 2;

	// Iterate through half of the array, since we are swapping 2 numbers at a time.
	// Iterating through the entire array would reverse the order twice, resulting in
	// the original array order.
	for (iterator = 0; iterator < halfLength; iterator++)
	{
		// Store the indexed value in the placeholder variable as it will
		// be overwritten. It needs to be stored in some place so we can
		// access it after it gets overwritten in the array.
		placeholder = values[iterator];

		// Assign the last element of the first array to the first index.
		values[iterator] = values[length - (1 + iterator)];

		// Assign the element in the placeholder array to the last index.
		values[length - (1 + iterator)] = placeholder;
	}
}",1
tzha578,1695608730,1,"#include <stdio.h>
void ReverseArray(int *inputarray, int length){
    int outputarray[length];
    for(int i = 0;i<length;++i){
        outputarray[i] = inputarray[length - i - 1];
        
    }
    for(int i = 0;i<length;++i){
        inputarray[i] = outputarray[i];
    }
}",1
tzho903,1696207898,1,"void ReverseArray(int *values, int length)
{
    int temp[length];
    temp[length] = values;
    for (int i = 0; i < length; i++) 
    {
        temp[i] = values[i];
    }
    
    for (int i = 0; i < length; i++) 
    { 
     values[i] = temp[length - i - 1];
    }
}
",0
tzho903,1696207926,2,"void ReverseArray(int *values, int length)
{
    int temp[length];
    for (int i = 0; i < length; i++) 
    {
        temp[i] = values[i];
    }
    
    for (int i = 0; i < length; i++) 
    { 
     values[i] = temp[length - i - 1];
    }
}
",1
uali517,1695768221,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int* array, int length)
{
	int s = 0;
	int e = length - 1;
	while (s < e) {
		int temp = array[s];
		array[s] = array[e];
		array[e] = temp;
		s++;
		e--;
	}
}",1
ujai264,1695780078,1,"void ReverseArray(int *values, int length)
{
int temp;


	for (int i = (length-1)/2; i > -1; i--){
		temp = values[i];
		values[i] = values[(length-1) - i];
		values[(length - 1) - i] = temp;

	
	}
	
}
",1
vbar374,1696221698,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    for (int i = 0; i < length / 2; i++) {
        int temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}
",1
vkap589,1695724787,1,"void ReverseArray(int *values, int length)
{
    int reversevalues[100] = {0};
    int *s;
    int *a;
    int i = 0;
    
    for (int j = length-1; j >= 0; j--) {
        s = &reversevalues[j];
        *s = values[i];
        i++;
        continue;
    }
    for (int f = 0; f < length; f++) {
        a = &values[f];
        *a = reversevalues[f];
        
    }

}",1
vlai276,1695897581,1,"void ReverseArray (int values[], int length) {
    
    
  int x = 0;
  int z = length - 1;

  while (x < z) {
      
      int temparray = values[x];
      
      values[x] = values[z];
      
      values[z] = temparray;


      x++;
      z--;
    }
}",1
vpat188,1695883812,1,"#include <stdio.h>


void ReverseArray(int *values, int length){
    
    int ArrayHolder[length];
    int i;
    
    for (i = 0; i < length; i++) {
        ArrayHolder[i] = values[length - i - 1];

    }
    
    for (i = 0; i < length; i++) {
        values[i] = ArrayHolder[i];
        
    }

}",1
vpol480,1696143715,1,"void ReverseArray(int *values, int length)
{
        int i;
        int start = 0;
        int end = length - 1;

        while (start < end) {
            int temp = values[start];
            values[start] = values[end];
            values[end] = temp;
            start++;
            end--;
        }
}",0
vpol480,1696143994,2,"void ReverseArray(int *values, int length)
{       
        int start = 0;
        int end = length - 1;

        while (start < end) {
            int temp = values[start];
            values[start] = values[end];
            values[end] = temp;
            start++;
            end--;
        }
}",1
vwon573,1696125367,1,"#include <stdio.h>

void ReverseArray(int* values, int length) {
	int start = 0;
	int end = length - 1;

	while (start < end) {
		int temp = values[start];
		values[start] = values[end];
		values[end] = temp;

		start++;
		end--;
	}

}",1
vwu693,1696210512,1,"#define _CRT_SECURE_NO_WARNINGS_
#include <stdio.h>
// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int start, end, refer_num;
	start = 0;
	end = length - 1;
	while (start < end){
		refer_num = values[start];
		values[start] = values[end];
		values[end] = refer_num;
		start++;
		end--;
	}
}",1
vxie208,1695779445,1,"void ReverseArray(int *values, int length)
{
	int i;
	int j;
	int tempStorage;
	for (i = 0 ; i < length; i++) {
		tempStorage = values[length - 1];
		for (j = length-1; j > i; j--) {
			values[j] = values[j-1];
		}
		values[i] = tempStorage;
	}

}",1
wany079,1695812413,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i;

	for (i = 0; i < length/2; i++) {
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = i + 1;
	}
}",0
wany079,1695814117,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int i;
	int a; 

	for (i = 0; i < length/2; i++) {
		a = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = a;
	}
}",1
wany722,1695690976,1,"#include<stdio.h>
void ReverseArray(int *values, int length){
    int i, value[length];
    for(i = 0; i < length; i++){
        value[i] = values[i];      
    }
    for(i = 0; i < length; i++){
        values[i] = value[length - i - 1];
    }
    return *values;
}",0
wany722,1695691002,2,"#include<stdio.h>
int ReverseArray(int *values, int length){
    int i, value[length];
    for(i = 0; i < length; i++){
        value[i] = values[i];      
    }
    for(i = 0; i < length; i++){
        values[i] = value[length - i - 1];
    }
    return *values;
}",1
wany843,1695694606,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
wany897,1695778701,1,"void ReverseArray(int* values, int length)
{
	int end = length - 1;
	for (int i = 0; i < end; i++,end--)
	{
		int temp = values[i];
		values[i] = values[end];
		values[end] = values[temp];

	}
}",0
wany897,1695779110,2,"void ReverseArray(int* values, int length)
{
	int end = length - 1;
	for (int i = 0; i < end; i++,end--)
	{
		int temp = values[i];
		values[i] = values[end];
		values[end] = temp;
	}

}",1
wany932,1696073712,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int temp;
    for (int i = 0; i < length / 2; i++) {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7}; 

    ReverseArray(values, 7); 

    for (int i = 0; i < 7; i++) { 
       printf(""%d "", values[i]); 
    }

    return 0;
}
",0
wany932,1696073801,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}

int main() {
    int values[7] = {1, 2, 3, 4, 5, 6, 7};
    
    ReverseArray(values, 7);
    
    for (int i = 0; i < 7; i++) {
        printf(""%d "", values[i]);
    }
    
    return 0;
}
",0
wany932,1696210564,3,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        start++;
        end--;
    }
}
",1
wkev690,1695778839,1,"void ReverseArray(int *values, int length)
{
	for (int i = 0; i < length; i++)
	{
		if (length-(2*i) <= length%2){
			return;
		}
		int temp = 0;		
		temp = values[i];
		values[i] = values[((length-1)-i)];
		values[(length-1)-i] = temp;
	}
	
}",1
wli798,1695890227,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int size = 1;
    int temp[length];

    for (i = 0; i<length; i++) {
      temp[i] = values[length - size];
      size++;
    }
    
    for (i = 0; i<length; i++) {
        values[i] = temp[i];
    }
}",1
wlin709,1696227097,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int temporaryValue;
    int i;
    for (int i = 0; i < length / 2; i++) {
        temporaryValue = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temporaryValue;
    }
}
",0
wlin709,1696227184,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int temporaryValue;
    for (int i = 0; i < length / 2; i++) {
        temporaryValue = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temporaryValue;
    }
}
",1
wliy226,1696218790,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    for (int start = 0, end = length - 1; start < end; start++, end--) 
    {
        int temporary_value = values[start]; //using temporary variable to hold the value at the start position
        values[start] = values[end]; //swaps the value at the end position with the start position
        values[end] = temporary_value; //assigns the value stored to the end position
    }
}
",1
wmas516,1695611916,1,"int ReverseArray(int* values, int length) {
	int temp;
	for (int i = 0; i < (length / 2); i++) {
		temp = *(values+i);
		*(values+i) = *(values + length-1 - i);
		*(values + length-1 - i) = temp;
	}
	return 0;
}",1
wste800,1696137990,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {

    int new[length];
    int reverse = length-1;
    for (int i = 0; i < length; i++) {
        new[reverse] = values[i];
        reverse--;
    }
    for (int i = 0; i < length; i++) {
        values[i] = new[i];
    }
    
}",1
wwan296,1695713587,1,"#include <stdio.h>

void ReverseArray(int values[],int length)
{
	int temp;
	for (int i = 0; i < length / 2; i++) {
		temp = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = temp;
	}
}",1
wwon485,1695784703,1,"void ReverseArray(int *values, int length)
{
	int numLeft, numRight;
	for (int i = 0; i < (length / 2); i++) {
		numLeft = values[i];
		numRight = values[length - i - 1];
		//printf(""%d: %d, %d\n"", i, numLeft, numRight);

		values[i] = numRight;
		values[length - i - 1] = numLeft;
	}
}",1
wwu295,1696094690,1,"void ReverseArray(int *values, int length) {
	int i, temp;

	for (int i = 0; i < (length/2); i++) {
		temp = values[length - 1 - i];
		values[length - 1 - i] = values[i];
		values[i] = temp;
	}
}",0
wwu295,1696094752,2,"void ReverseArray(int *values, int length) {
	int i, temp;

	for (i = 0; i < (length/2); i++) {
		temp = values[length - 1 - i];
		values[length - 1 - i] = values[i];
		values[i] = temp;
	}
}",1
wyan309,1696238021,1,"#include <stdio.h>
#define _CRT_SCURE_NOT_WARNINGS
void ReverseArray(int *values, int length) {
int A = 0;
 int B = length-1;
 int C;
while(A<B){
    C = values(A);
    Values[A] = values[B];
    values[B] =C;
    A++;
    end--;
}
}",0
wyan309,1696238077,2,"void ReverseArray(int *values, int length) {
int A = 0;
 int B = length-1;
 int C;
while(A<B){
    C = values(A);
    Values[A] = values[B];
    values[B] =C;
    A++;
    B--;
}
}",0
wyan309,1696238160,3,"void ReverseArray(int *values, int length) {
    int A = 0;
    int B = length-1;
    int C;
    while(A<B){
    C = values(A);
    values[A] = values[B];
    values[B] =C;
    A++;
    B--;
}
}",0
wyan309,1696238210,4,"void ReverseArray(int *values, int length) {
    int A = 0;
    int B = length-1;
    int C;
    while(A<B){
    C = values[A];
    values[A] = values[B];
    values[B] =C;
    A++;
    B--;
}
}",1
wyu523,1695681196,1,"void ReverseArray(int *values, int length)
{
    int n;
    int j=length-1;
    for (int i= 0; i<length;i++){
        if (i<j){
            n=values[i];
            values[i]=values[j];
            values[j]=n;
            j--;
        }
    }
}
",1
wyua331,1696223283,1,"void ReverseArray(int *values, int length)
{
    int valuesRE[length];
    int i=0;
    int j=length;

    while(i<j)
    {
      length--;
      valuesRE[i]=values[length];
      i++;

    }
    int k=0;
    while(k<j)
    {
        values[k]=valuesRE[k];
        k++;
    }


}",1
wzha508,1695952302,1,"void ReverseArray(int values[], int length) {
	int samearray;
	for (int startvalue = 0, endvalue = length - 1; startvalue < endvalue; startvalue++, endvalue--) {
		samearray = values[startvalue];
		values[startvalue] = values[endvalue];
		values[endvalue] = samearray;
	}

	}",1
xche362,1695867590,1,"void ReverseArray(int *values, int length)
{
    int newarray[length];
    int firstvalue;
    
    for (int i=0;i<length;i++){
        newarray[i]=values[length-i-1];
    }
     for (int i=0;i<length;i++){
        values[i]=newarray[i];
    }
    
}",0
xche362,1695867609,2,"void ReverseArray(int *values, int length)
{
    int newarray[length];
    
    
    for (int i=0;i<length;i++){
        newarray[i]=values[length-i-1];
    }
     for (int i=0;i<length;i++){
        values[i]=newarray[i];
    }
    
}",1
xche933,1696232142,1,"// ReverseArray is a function that takes an array of integers and the number elements in the array as inputs and returns
// an output of arrays that are in the reverse order to their original order.

void ReverseArray(int *values, int length)
{
for (int i = length; i > 0; i++) { 
   printf(""%d "", values[i]); 
}",0
xche933,1696234177,2,"// ReverseArray is a function that takes an array of integers and the number elements in the array as inputs and returns
// an output of arrays that are in the reverse order to their original order.

void ReverseArray(int *values, int length)
{
    int i;
    for (i=length - 1; i>=0; i--){
        printf(""%d"", values[i]);
    }",0
xche933,1696239382,3,"// ReverseArray is a function that takes an array of integers and the number elements in the array as inputs and returns
// an output of arrays that are in the reverse order to their original order.

void ReverseArray(int *values, int length)
{
    int i;
    for (i=length-1; i>=0; i--){
        printf(""%d"", *values[i]);
    }",0
xkan320,1695678816,1,"void ReverseArray(int *values, int length)
{
    
    int i, tmp;
    for (int i=0; i<length/2; i++){
        tmp = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = tmp;
    }
}",0
xkan320,1695678924,2,"void ReverseArray(int *values, int length)
{
    
    int i;
    int tmp;
    for (i=0; i<length/2; i++){
        tmp = values[i];
        values[i] = values[length-i-1];
        values[length-i-1] = tmp;
    }
}",1
xli330,1695851372,1,"void ReverseArray(int *values, int length)
{
	 int i, swap;
	 for (i = 0; i < length / 2; i++) {
		swap = values[i];
		// printf(""%d <-> %d\n"", swap, values[length - i - 1]);
		values[i] = values[length - i - 1];
		values[length - i - 1] = swap;
	 }
}",1
xlia603,1696209305,1,"#include <stdio.h>
int ReverseArray(int values[], int length){
    int start, end;
    start = 0;
    end = length -1;
    while(start < end){
        int s = values[start];
        values[start] = values[end];
        values[end] = s;
        
        start++;
        end--;
    }
    return;
}",0
xlia603,1696209350,2,"#include <stdio.h>
int ReverseArray(int values[], int length){
    int start, end;
    start = 0;
    end = length -1;
    while(start < end){
        int s = values[start];
        values[start] = values[end];
        values[end] = s;
        
        start++;
        end--;
    }
}",0
xlia603,1696213267,3,"#include <stdio.h>
void ReverseArray(int *values, int length){
    int start, end;
    start = 0;
    end = length -1;
    while(start < end){
        int s = values[start];
        values[start] = values[end];
        values[end] = s;
        
        start++;
        end--;
    }
}",1
xmet073,1695696300,1,"#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
void ReverseArray(int *values, int length)
{
    for (int i = 0; i < length / 2; i++) {
       int temp ;
       temp = values[i];
        values[i] = values[length -1- i];
        values[length - 1- i] = temp;
    }

 }
   
",1
xsny378,1695850467,1,"#include <stdio.h>


void ReverseArray(int *values, int length)
{
    int i = 0;
    int finish = length - 1;
    
    
while (i<finish)
{
   int j = values[i];
   values[i] = values[finish];
   values[finish] = j;
   
   i++;
   finish--; 
}

    
}",1
xtan207,1696212760,1,"void ReverseArray(int *values, int length) 
{
    int temp;
    int temp_;
    int i;
    int ii;
    for (int i = 0, ii = length - 1; i < ii; i++, ii--) {
        temp = values[i];
        temp_ = values[ii];
        values[ii] = temp;
        values[i] = temp_;
    }
}",0
xtan207,1696212844,2,"void ReverseArray(int *values, int length) 
{
    int temp;
    int temp_;
    int top;
    int bottom;
    for (int top = 0, bottom = length - 1; top < bottom; top++, bottom--) {
        temp = values[top];
        temp_ = values[bottom];
        values[bottom] = temp;
        values[top] = temp_;
    }
}",0
xtan207,1696213750,3,"void ReverseArray(int *values, int length) 
{
    int top = 0;
    int bottom = length - 1;
    
    while(top < bottom) {
        int temp = values[top];
        values[top] = values[bottom];
        values[bottom] = temp;
        top++;
        bottom--;
    }
    }",1
xugn489,1695643331,1,"void ReverseArray(int *values, int length)
{	
	int original_value[length];
	int second_counter = 0;
	
	for (int i = 0; i<length; i+=1) {
		original_value[i]=values[i];
	}

	for (int i = length - 1; i>=0; i-=1) {
		values[i] = original_value[second_counter];
		second_counter++;
	}
}

",1
yayo322,1696220540,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        start++;
        end--;
    }
}",1
ybha528,1696200183,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int swap;

	for (int i = 0; i < length / 2; i++)
	{
		swap = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = swap;
	}

} ",1
ycho749,1695719423,1,"void ReverseArray(int *values, int size)
{
    int temp;
 
    for(int i = 0; i<size/2; i++)
    {
 
        temp = values[i];
        values[i] = values[size-i-1];
        values[size-i-1] = temp;
 
    }
}",1
ycho760,1695902433,1,"void ReverseArray(int* values, int length)
{
	int i;
	int j;
	int rearrange;
	for (i = 0, j = length - 1; i < j; i++, j--) {
		rearrange = values[i];
		values[i] = values[j];
		values[j] = rearrange;
	}
}",1
ydai729,1696238278,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        // Swap the elements at the start and end positions
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;
        
        // Move the start and end pointers towards each other
        start++;
        end--;
    }
}",1
ydar075,1696476265,1,"void ReverseArray(int *values, int length) {
    int number;
    int i = 0;
    for (i; i < length / 2; i++) {
    	number = values[i];
    	values[i] = values[length - 1 - i];
    	values[length - 1 - i] = number;
    }
}",0
ydar075,1696476388,2,"void ReverseArray(int *values, int length) {
    int number;
    for (int i = 0; i < length / 2; i++) {
        number = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = number;
    }
}",1
yfan919,1696011025,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if (i < a; a--){
            values(i) = values(a);
        }
    }
    return values
}
",0
yfan919,1696011087,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if (i < a; a--){
            values(i) = values(a);
        }
    }
    return values;
}
",0
yfan919,1696011140,3,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if (i < a; a--){
            values[i] = values[a];
        }
    }
    return values;
}
",0
yfan919,1696011151,4,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a; a--;){
            values[i] = values[a];
        }
    }
    return values;
}
",0
yfan919,1696011181,5,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a; a--;){
            values[i] = values[a];
        }
    }
    return values;
}
",0
yfan919,1696011194,6,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a; a--;){
            values[i] = values[a];
        }
    }
    return values[];
}
",0
yfan919,1696011230,7,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a; a--){
            values[i] = values[a];
        }
    }
    return values;
}
",0
yfan919,1696011286,8,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a; a--){
            values[i] = values[a];
        }
    }
    return *values;
}
",0
yfan919,1696011313,9,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a);( a--){
            values[i] = values[a];
        }
    }
    return *values;
}
",0
yfan919,1696011322,10,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a, a--){
            values[i] = values[a];
        }
    }
    return *values;
}
",0
yfan919,1696011332,11,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a; a--){
            values[i] = values[a];
        }
    }
    return *values;
}
",0
yfan919,1696011351,12,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < a; i++){
        if ( i < a){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011370,13,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 1;
    int a;
    a = length;
    for (i = 1; i < a; i++){
        if ( i < a){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011385,14,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < a; i++){
        if ( i < a){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011427,15,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < length; i++){
        if ( i < a){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011437,16,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < a){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011451,17,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < length; i++){
        if ( i < a){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011497,18,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for (i = 0; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011523,19,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 1;
    int a;
    a = length;
    for (i = 1; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011535,20,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011571,21,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = *values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011590,22,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = int *values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011612,23,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    int *values;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = *values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011658,24,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    int value;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            value[i] = values[a];
            a = a - 1;
        }
    }
    return value;
}
",0
yfan919,1696011667,25,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    int value[];
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            value[i] = values[a];
            a = a - 1;
        }
    }
    return value;
}
",0
yfan919,1696011682,26,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            value[i] = values[a];
            a = a - 1;
        }
    }
    return value;
}
",0
yfan919,1696011822,27,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = &values[a];
            a = a - 1;
        }
    }
    return value;
}
",0
yfan919,1696011834,28,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = &values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011869,29,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            *values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011875,30,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011918,31,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011939,32,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for (i = -1; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    return *values;
}
",0
yfan919,1696011985,33,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    if ( i < length){
        values[i] = values[a];
        a = a - 1;
    }
    return *values;
}
",0
yfan919,1696012076,34,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for(int i = 0; i < length, i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696012088,35,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for(i = 0; i < length, i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696012094,36,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for(i = 0; i < length, i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696012105,37,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for(i = 0; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696012112,38,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for(int i = 0; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696012126,39,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for( i = 0; i < length; i++){
        if ( i < length){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696012347,40,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for( i = 0; i < length; i++){
        if ( i < length ){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return values;
}
",0
yfan919,1696012357,41,"#include <stdio.h>

int ReverseArray(int values, int length)
{
    int i = 0;
    int a;
    a = length;
    for( i = 0; i < length; i++){
        if ( i < length ){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return values;
}
",0
yfan919,1696012371,42,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = 0;
    int a;
    a = length;
    for( i = 0; i < length; i++){
        if ( i < length ){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696012401,43,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for( i = -1; i < length; i++){
        if ( i < length ){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696083496,44,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int b;
    int i = -1;
    int a;
    b = *values;
    a = length;
    for( i = -1; i < length; i++){
        if ( i < length ){
            values[i] = b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696083544,45,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int b;
    int i = -1;
    int a;
    b = values;
    a = length;
    for( i = -1; i < length; i++){
        if ( i < length ){
            values[i] = b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696083584,46,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int b;
    int i = -1;
    int a;
    b = *values;
    a = length;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696083591,47,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int b;
    int i = -1;
    int a;
    b = *values[];
    a = length;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696083606,48,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696083617,49,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int i = -1;
    int a;
    a = length;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = values[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696083960,50,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int b;
    int i = -1;
    int a;
    a = length;
    b = &values;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696084035,51,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int *b;
    int i = -1;
    int a;
    a = length;
    *b = &values;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = *b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696084052,52,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int **b;
    int i = -1;
    int a;
    a = length;
    **b = &values;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = **b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696084073,53,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int *b;
    int i = -1;
    int a;
    a = length;
    *b = &values;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = *b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696084425,54,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int *b;
    int i = -1;
    int a;
    a = length;
    b = &values;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = int b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696084454,55,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int b = &values;
    int i = -1;
    int a;
    a = length;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = int b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696084461,56,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int b = values;
    int i = -1;
    int a;
    a = length;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = int b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696084484,57,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int *b = values;
    int i = -1;
    int a;
    a = length;
    for( i = -1; i < length; i++){
        if ( i <= length ){
            values[i] = int *b[a];
            a = a - 1;
        }
    }
    
    return *values;
}
",0
yfan919,1696085242,58,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = a - 1;
    for (a < b, a++, b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
    }
}
",0
yfan919,1696085298,59,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = a - 1;
    for (a < b; a++; b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
    }
}
",0
yfan919,1696085336,60,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length - 1;
    for (a < b; a++; b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
    }
}
",0
yfan919,1696085738,61,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length - 1;
    for (a < b; a++; b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
    }
    return values;
}
",0
yfan919,1696085744,62,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length - 1;
    for (a < b; a++; b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
    }
    return *values;
}
",0
yfan919,1696085789,63,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length - 1;
    for (a < b; a++; b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
        a++;
        b--;
    }
    return *values;
}
",0
yfan919,1696085798,64,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length - 1;
    for (a < b){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
        a++;
        b--;
    }
    return *values;
}
",0
yfan919,1696085833,65,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length - 1;
    for (a < b;a++;b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
    }
    return *values;
}
",0
yfan919,1696085930,66,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length;
    for (a < b;a++;b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
    }
    return *values;
}
",0
yfan919,1696085982,67,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length;
    for (a = 0; a < b;a++;b--){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
    }
    return *values;
}
",0
yfan919,1696086005,68,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length;
    for (a = 0; a < b; a++){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
        b--;
    }
    return *values;
}
",0
yfan919,1696086014,69,"#include <stdio.h>

int ReverseArray(int *values, int length)
{
    int a = 0;
    int b = length - 1;
    for (a = 0; a < b; a++){
        int value = values[a];
        values[a] = values[b];
        values[b] = value;
        b--;
    }
    return *values;
}
",1
yfen481,1695617740,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE ONE - Reverse Array
*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
	int tempValue, n;
	for (n = 0; n < length / 2; n++) {
		tempValue = values[n];
		values[n] = values[length - n - 1];
		values[length - n - 1] = tempValue;
	}
}


/* Here is the main function for the program.  You should write
your own test code, which calls the lab functions with various inputs,
into the main function */
int main(void)
{
	int values[7] = {1, 2, 3, 4, 5, 6, 7};

	ReverseArray(values, 7);

	for (int i = 0; i < 7; i++) {
	   printf(""%d "", values[i]);
	}

	return 0;
}

",0
yfen481,1695693316,2,"void ReverseArray(int *values, int length)
{
	int tempValue, n;
	for (n = 0; n < length / 2; n++) {
		tempValue = values[n];
		values[n] = values[length - n - 1];
		values[length - n - 1] = tempValue;
	}
}",1
yhaf839,1695716859,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
int i;
int j=0;
int reversed[length];
    for (i=length-1;i>=0;i--,j++){
        reversed[j]=values[i];
}
    for(i=0;i<length;i++){
        values[i]=reversed[i];
}
}
",1
yilm466,1695868667,1,"void ReverseArray(int *values, int length)
{
	int temp, i, j;

	for (i = 0, j = length - 1; i < j; i++, j--){
		temp = values[i];
		values[i] = values[j];
		values[j] = temp;
	}
}
",1
yjun129,1695605385,1,"#include <stdio.h>

void ReverseArray(int* values, int length)
{
	int i;
	int half = length / 2;

	for (i = 0; i < half; i++)
	{
		int element = values[i];
		values[i] = values[length - 1 - i];
		values[length - 1 - i] = element;
	}


}",1
ykwa219,1695947838,1,"void ReverseArray(int *values, int length)
{
	int j = length - 1;

	for (int i = 0; i < length/2; i++) {
		int a = values[i];
		int b = values[j];
		int* c = &values[i];
		int* d = &values[j];
		*c = b;
		*d = a;
		j--;
	}
}",1
ylee818,1696068027,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int temp;
    
    for (int i = 0; i < length/2; i++) {
        temp=values[i];
        values[i]=values[(length-1)-i];
        values[(length-1)-i]=temp;
    }
}",1
yrah128,1696018871,1,"#include <stdio.h>
void ReverseArray(int* values, int length) {
	int start = 0;
	int end = length - 1;
	int temp;

	while (start < end) {
		temp = values[start];
		values[start] = values[end];
		values[end] = temp;
		start++;
		end--;


	}
}",1
ysun512,1695726742,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int b = 0;
    int f = length - 1;

    while (b < f)
    {
       
        int temp = values[b];
        values[b] = values[f];
        values[f] =temp;
        b++;
        f--;
    }
}",1
ytho155,1695639861,1,"#include <stdio.h>
//This code reverses the order in an array
//Author: Yi Shun

void ReverseArray(int values[], int length)
{
    int l = 0, r = length - 1;

    while (l < r) {
        // Swap the elements at left and right positions
        int temp = values[l];
        values[l] = values[r];
        values[r] = temp;

        // Move the indices towards each other
        l++;
        r--;
    }
}",1
ytse120,1695626361,1,"void ReverseArray(int *values, int length)
{
	int temp[7];
	int counter=0, i;
	for (i = 0; i < length; i++) {
		temp[i] = values[i];
	}

	for (i = length; i>=0, i--;) {
		values[counter] = temp[i];
		counter++;
	}
}",0
ytse120,1695626395,2,"void ReverseArray(int *values, int length)
{
	int temp[7];
	int counter=0, i;
	for (i = 0; i < length; i++) {
		temp[i] = values[i];
	}

	for (i = length-1; i>=0; i--) {
		values[counter] = temp[i];
		counter++;
	}
}",0
ytse120,1695626935,3,"void ReverseArray(int *values, int length)
{
	int temp[length];
	int counter=0, i;
	for (i = 0; i < length; i++) {
		temp[i] = values[i];
	}

	for (i = length-1; i>=0; i--) {
		values[counter] = temp[i];
		counter++;
	}
}",1
yxie884,1695606159,1,"// Lab 9 task 1: The ReverseArray function modifies the array so that the elements are arranged in the reverse order to their original order. 
//Author: Jessica Xie

#include <stdio.h>

void ReverseArray(int *values, int length){

    //initialising the outputarray and indexing variables i&j
    int output_array[length];
    int i, j;

    //by using a for loop itterate through the original array and input each element into the outputarray in its original order
    for (i = 0; i < length; i++){
        output_array[i] = values[i];
    }

    /*by using a second for loop and counting system, we can itterate through the outputarray in reverse order and put it back into the
    original array*/
    int count = 0;
    for (j = length-1; j >= 0; j--){
        values[count] = output_array[j];
        count++;
    }
}",1
yyin299,1695857287,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int counter;
    counter = 0;
    int values2[length];
    for (i = length - 1; i > -1; i = i - 1)
    {
        values2[counter] = values[i];
        counter += 1;
    }
    for (i = 0; i < length; i += 1)
    {
        values[i] = values2[i];
    }
}
",1
yyin440,1695618860,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0; 
    int end = length - 1; 
    int temp;

    while (start < end) {
        
        temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
yzhe520,1695717630,1,"*/
#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i, Temp,l,stop;
	int nums = 0;
		l = values [length-1]; //store the last value in the array temporarily
		stop = (length - 1) / 2;
	for (i = length-1; i > stop; i--) {
		Temp = values[i];
		values[i] = values[nums];
		values[nums] = Temp;
		nums = nums +1;
	}
	//manually store the last value in the first position
	values[0] = l;

}",0
yzhe520,1695718013,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int* values, int length)
{
	int i, Temp,l,stop;
	int nums = 0;
		l = values [length-1]; //store the last value in the array temporarily
		stop = (length - 1) / 2;
	for (i = length-1; i > stop; i--) {
		Temp = values[i];
		values[i] = values[nums];
		values[nums] = Temp;
		nums = nums +1;
	}
	//manually store the last value in the first position
	values[0] = l;

}",1
zche975,1696235523,1,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int temp = values[start];
        values[start] = values[end];
        values[end] = temp;

        start++;
        end--;
    }
}",1
zcol623,1695627450,1,"//author:zcol632
void ReverseArray(int* values, int length)
{
	int valuesReversed[sizeof(values)]; //Initialise new array to store the new values
	for (int i = 0; i <length; i++)
	{
		valuesReversed[i] = values[length - 1 - i];//Store the numbers from the values array in the new aray but in reverse order

	}
	for (int i = 0; i < length; i++)
	{//Set the values of the orignial array to be the same as the reversed one
		values[i] = valuesReversed[i];

	}
	
}
",0
zcol623,1695631868,2,"//author:zcol632
void ReverseArray(int* values, int length)
{
    int i = 0; //Start Index 
    int j = length - 1;//End Index
  
    while  (i < j){
        // Swap the elements at the start and end indices 
        int k = values[i]; //variable k stores the leftmost value temporarily when swapping as they can't be swapped simultaneously
        values[i] = values[j];
        values[j] = k;
        i++;//Move starting index to the right
        j--;//Move ending index to the left
    }
}
",1
zcra120,1695780516,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void
ReverseArray (int *values, int length)
{
  int i;
  i = 0;
  for (i; i < length; i++) {
      if ((length / 2) > i)
	{
	 int temporary;
	  temporary = values[i];
	  values[i] = values[length - 1 - i];
	  values[length-1-i] = temporary;

	}
    }
}",0
zcra120,1695780842,2,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void
ReverseArray (int *values, int length)
{
  
  for (int i = 0; i < length/2; i++) {
     
	 int temporary;
	  temporary = values[i];
	  values[i] = values[length - 1 - i];
	  values[length-1-i] = temporary;

	
    }
}",1
zfu276,1695870803,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void ReverseArray(int *values, int length)
{
	int value;
	for ( int i = 0; i < (int)(length/2) ; i++) {
		value = values[i];
		values[i] = values[ length - 1 - i];
		values[ length - 1 - i] = value;
	}
}",1
zgab423,1695706150,1,"void ReverseArray(int *values, int length)
{
    int first = 0;
    int last = length -1;
    
    while (first < last) {
        int ValuesPlaceholder = values[first];
        values[first ++] = values[last];
        values[last --] = ValuesPlaceholder;
    }
}

",1
zgar110,1696226801,1,"#include <stdio.h>


void ReverseArray(int *values, int length)
{
    int start = 0;        
    int end = length - 1; 

    while (start < end)
    {
        
        int temp = values[start];
         values[start] = values[end];
         values[end] = temp;

    
        start++;
        end--;
    }
}",1
zgas053,1696205595,1,"void ReverseArray(int* values, int length)
{
	int start = 0;
	int end = length - 1;

	while (start < end)
	{
		int x = values[start];
		values[start] = values[end];
		values[end] = x;
		start++;
		end--;
	}
}
",1
zgin653,1695625575,1,"void ReverseArray(int *values, int length) {
    for (int i = 0; i < length/2; i++){
        int temp = values[i];
        values[i] = values[length - i - 1];
        values[length - i - 1] = temp;
    }
}",1
zguo839,1696130910,1,"#include <stdio.h>

// Define this function, which should reverse the elements in an array
void ReverseArray(int *values, int length)
{
    int starting = 0;
    int finish = length - 1;

    while (starting < finish) {
        // Swap the elements at the starting and end positions
        int temp = values[starting];
        values[starting] = values[finish];
        values[finish] = temp;
        starting++;
        finish--;
    }
}
",1
zhon780,1696164032,1,"void ReverseArray(int *values, int length)
{
    int temp;
    for (int i = 0; i < length/2; i++)
    {
        temp = values[i];
        values[i] = values[length - 1 - i];
        values[length - 1 - i] = temp;
    }
}",1
zliu381,1695853725,1,"void ReverseArray(int* values, int length)
{
	int k;
	int j = length - 1;
	int *number;
	int temp;
	int *bnumber;
	for (k = 0; k < length; k++) {



		if (j > length / 2 ) {
			number = &values[k];
			bnumber = &values[j];
			temp = values[k];
			*number = values[j];
			*bnumber = temp;

			j = j - 1;

		}
		if (j <= length / 2 ) {
			return;
		}",0
zliu381,1695854763,2,"void ReverseArray(int* values, int length)
{
	int k;
	int j = length - 1;
	int *number;
	int temp;
	int *bnumber;
	
	
	for (k = 0; k < length / 2; k++) {



		
			number = &values[k];
			bnumber = &values[j];
			temp = values[k];
			*number = values[j];
			*bnumber = temp;

			j = j - 1;



	}
}",1
zliu578,1696035215,1,"void ReverseArray(int *values, int length)
{
	int i = 0;
	int j = length - 1;
	while (i < j) {
		int newnumber = values[i];
		values[i] = values[j];
		values[j] = newnumber;
		i++;
		j--;
	}
}",1
zpen457,1696051274,1,"void ReverseArray(int *values, int length)
{
    int copy[length];
    int i;
    
    for(i = 0; i < length; i++){
        copy[i] = values[i];
    }
    
    int j = 0;
    for(i = length - 1; i > -1; i--){
        values[j] = copy[i];
        j++;
    }
}",1
zqia091,1696211577,1,"#include <stdio.h>

void ReverseArray(int *values, int length) 
{
    int starts=0;
    int ends=length - 1;
    while (starts<ends) 
    {
        int t=values[starts];
        values[starts]=values[ends];
        values[ends]=t;
        starts++;
        ends--;
    }
}",1
zshi453,1695604827,1,"#include <stdio.h>

void ReverseArray(int values[], int length)
{
    int outputarray[length];
    int i;
    for (i = 0; i<length; ++i)
    {
        outputarray[i] = values[length - 1 - i];
    }
    for (i = 0; i<length; ++i)
    {
        values[i] = outputarray[i];
    }
}",1
zvor566,1695888268,1,"void ReverseArray(int* values, int length)
{
	int temp;
	int i;

	for (i = 0; i < length / 2; i++) {
		temp = values[i];
		values[i] = values[length - i - 1];
		values[length - i - 1] = temp;
	}
	
}",1
zwan373,1695695462,1,"#include <stdio.h>
int ReverseArray(int values[],int x)
{   
    int i;
    for (i = 0; i < x; i++)
        values[i]=x-i;
    return values[i];
}",0
zwan373,1695697778,2,"#include <stdio.h>
int ReverseArray(int values[],int x)
{   
    int i;
    int y;
    for (i = 0; i < x /2; i++)
    {
        y = values[i];
        values[i] = values[x-i-1];
        values[x-i-1]=y;
        
    }
    return values;
}",0
zwan373,1695697863,3,"#include <stdio.h>
int ReverseArray(int values[],int x)
{   
    int i;
    int y;
    for (i = 0; i < x /2; i++)
    {
        y = values[i];
        values[i] = values[x-i-1];
        values[x-i-1]=y;
        
    }
    return y;
}",1
zwil198,1696218486,1,"#include <stdio.h>

void ReverseArray(int values[], int length)
{
    int i;
    int endI = length - 1;
    
    while(i < endI) {
        
        int swapper = values[i];
        values[i] = values[endI];   // uses swapper to hold the value of i and then place into endI
        values[endI] = swapper;
        
        i++;
        endI--;  // These two will go along the length of values[] and swapping them to the reverse order
    }
}",0
zwil198,1696219458,2,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i;
    int endI = length - 1;
    
    while(i < endI) {
        
        int swapper = values[i];
        values[i] = values[endI];   // uses swapper to hold the value of i and then place into endI
        values[endI] = swapper;
        
        i++;
        endI--;  // These two will go along the length of values[] and swapping them to the reverse order
    }
}",0
zwil198,1696219712,3,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int i = 0;
    int endI = length - 1;
    
    while(i < endI) {
        
        int swapper = values[i];
        values[i] = values[endI];   // uses swapper to hold the value of i and then place into endI
        values[endI] = swapper;
        
        i++;
        endI--;  // These two will go along the length of values[] and swapping them to the reverse order
    }
}",1
zwon694,1695628091,1,"void ReverseArray(int *values, int length)
{
	int i;
	int index = length - 1;
	int array[length];

	for (i = 0; i < length; i++) {
		array[index - i] = values[i];
	}

	for (i = 0; i < length; i++) {
		values[i] = array[i];
	}
}",1
zwu591,1695869842,1,"void ReverseArray(int *values, int length)
{
	int i, j = length - 1;
	int *x, *y;
	int temp;

	for (i = 0; i < length / 2; i++) {
		x = &values[i];
		y = &values[j - i];

		temp = *x;
		*x = *y;
		*y = temp;
	}
}",1
zyah987,1696034459,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int *start = values;
    int *end = values + length - 1; 

    while(start < end)
    {
        int temp = *start;
        *start = *end;
        *end = temp;
        
        start++;
        end--;
    }
}

int main(void)
{
    int values[7] = {1, 2, 3, 4, 5, 6, 7};

    ReverseArray(values, 7);

    for (int i = 0; i < 7; i++) {
        printf(""%d "", values[i]);
    }

    printf(""\n"");

    return 0;
}

",0
zyah987,1696034866,2,"#include <stdio.h>

void ReverseArray(int *values, int length) {
    for(int i = 0; i < length / 2; i++) {
        int oppositeIndex = length - i - 1;
        int temp = values[i];
        values[i] = values[oppositeIndex];
        values[oppositeIndex] = temp;
    }
}
",1
zyao804,1695686942,1,"#include <stdio.h>

void ReverseArray(int *values, int length)
{
    int output[length];
    int newlength = length-1;
    for (int i=0;i<length;i++){
        output[newlength-i] = values[i];
    }
    for (int i=0;i<length;i++){
        values[i] = output[i];
    }
}",1
zyu100,1695693230,1,"void ReverseArray(int *values, int length)
{
length=length-1;
for (int i=0; i< length; i++){
    int change=values[i];
    values[i]=values[length];
    values[length]=change;
    length--;
}
}",1
zzho965,1696235884,1,"void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;

    while (start < end) {
        int final = values[start];
        values[start] = values[end];
        values[end] = final;

        start++;
        end--;
    }
}
",1
zzol692,1696228094,1,"//Author: Zara Zoll
// this function reverses the order of the array
void ReverseArray(int *values, int length) {
    int start = 0;
    int end = length - 1;
    int fake;
    for (start, end; start < end; start++, end--) { // Swaps the start and end elements
        fake = values[start];
        values[start] = values[end];
        values[end] = fake;
    }
}",0
zzol692,1696228807,2,"//Author: Zara Zoll
// this function reverses the order of the array
void ReverseArray(int* values, int length) {
    int initial = 0;
    int final = length - 1;

    while (initial < final) {
        int fake = values[initial];
        values[initial] = values[final];
        values[final] = fake;

        initial++;
        final--;
    }
}",1
