upi,time,try,answer,rawfraction
aana675,1696124469,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
aana675,1696203024,2,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
aaza463,1695675534,1,"void PelletRoute(int warehouse[10][10]){

    int StartRowPos, StartColPos, EndRowPos, EndColPos, MoveRow, MoveCol;

    for (int i = 0; i < 10; i++){
	    for (int j = 0; j < 10; j++){
		    if (warehouse[i][j] == 1){
			    StartRowPos = i;
			    StartColPos = j;
		    }
	    }
    }

    for (int i = 0; i < 10; i++){
	    for (int j = 0; j < 10; j++){
		    if (warehouse[i][j] == 2){
			    EndRowPos = i;
			    EndColPos = j;
		    }
	    }
    }

    MoveCol = EndColPos - StartColPos;
    MoveRow = EndRowPos - StartRowPos;
    
    while (MoveCol != 0){
        if (MoveCol > 0){
            StartColPos++;
            warehouse[StartRowPos][StartColPos] = 3;
        }
        else {
            StartColPos--;
            warehouse[StartRowPos][StartColPos] = 3;
        }
        MoveCol = EndColPos - StartColPos;
    }

    while (MoveRow != (1 || -1)){
        if (MoveRow > 0){
            StartRowPos++;
            warehouse[StartRowPos][StartColPos] = 3;
        }
        else {
            StartRowPos--;
            warehouse[StartRowPos][StartColPos] = 3;
        }
        MoveRow = EndRowPos - StartRowPos;
    }

    warehouse[EndRowPos][EndColPos] = 2;
}",0
aaza463,1695675682,2,"void PelletRoute(int warehouse[10][10]){

    int StartRowPos, StartColPos, EndRowPos, EndColPos, MoveRow, MoveCol;

    for (int i = 0; i < 10; i++){
	    for (int j = 0; j < 10; j++){
		    if (warehouse[i][j] == 1){
			    StartRowPos = i;
			    StartColPos = j;
		    }
	    }
    }

    for (int i = 0; i < 10; i++){
	    for (int j = 0; j < 10; j++){
		    if (warehouse[i][j] == 2){
			    EndRowPos = i;
			    EndColPos = j;
		    }
	    }
    }

    MoveCol = EndColPos - StartColPos;
    MoveRow = EndRowPos - StartRowPos;
    
    while (MoveCol != 0){
        if (MoveCol > 0){
            StartColPos++;
            warehouse[StartRowPos][StartColPos] = 3;
        }
        else {
            StartColPos--;
            warehouse[StartRowPos][StartColPos] = 3;
        }
        MoveCol = EndColPos - StartColPos;
    }

    while (MoveRow != 0){
        if (MoveRow > 0){
            StartRowPos++;
            warehouse[StartRowPos][StartColPos] = 3;
        }
        else {
            StartRowPos--;
            warehouse[StartRowPos][StartColPos] = 3;
        }
        MoveRow = EndRowPos - StartRowPos;
    }

    warehouse[EndRowPos][EndColPos] = 2;
}",1
abha257,1696060537,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, row=0, col=0, row1=0, col1=0, tempx=0, tempy=0, tempx2=0 , tempy2 = 0;

	//finding tile = 2
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				row = i;
				col = j;
			}
		}
	}
	//finding the tile = 1
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i; 
				col1 = j; 
			}
		}
	}
	if (row > row1) {
		tempx = row1;
		tempx2 = row; 
	}
	else if (row1>row) {
		tempx = row1;
		tempx2 = row;
	}
	else if (row1 == row) {
		tempx = row1;
		tempx2 = row;
	}



	if (col > col1) {
		tempy = col1;
		tempy2 = col; 
	}
	else if (col1 > col) {
		tempy = col1;
		tempy2 = col;
	}
	else if (col1 == col) {
		tempy = col1;
		tempy2 = col;
	}


	if (tempy != tempy2){
		if (tempy > tempy2) {
			for (j = tempy-1; j >= tempy2; j--) {
				warehouse[tempx][j] = 3;
			}
		}
		else if (tempy2 > tempy) {
			for (j = tempy+1; j <= tempy2; j++) {
				warehouse[tempx][j] = 3;
			}
		}
	}
	
	if (tempx != tempx2) {
		if (tempx2 > tempx) {
			for (i = tempx+1; i < tempx2; i++) {
				warehouse[i][tempy2] = 3;
			}
		}
		else if (tempx > tempx2) {
			for (i = tempx-1; i > tempx2; i--) {
				warehouse[i][tempy2] = 3;
			}
		}
	}
}",0
abha257,1696061619,2,"void PelletRoute(int warehouse[10][10])
{
	int i, j, row=0, col=0, row1=0, col1=0, tempx=0, tempy=0, tempx2=0 , tempy2 = 0;

	//finding tile = 2
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				row = i;
				col = j;
			}
		}
	}
	//finding the tile = 1
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i; 
				col1 = j; 
			}
		}
	}
	if (row > row1) {
		tempx = row1;
		tempx2 = row; 
	}
	else if (row1>row) {
		tempx = row1;
		tempx2 = row;
	}
	else if (row1 == row) {
		tempx = row1;
		tempx2 = row;
	}



	if (col > col1) {
		tempy = col1;
		tempy2 = col; 
	}
	else if (col1 > col) {
		tempy = col1;
		tempy2 = col;
	}
	else if (col1 == col) {
		tempy = col1;
		tempy2 = col;
	}


	if ((tempy != tempy2) && (tempx == tempx2)){
		if (tempy > tempy2) {
			for (j = tempy-1; j > tempy2; j--) {
				warehouse[tempx][j] = 3;
			}
		}
		else if (tempy2 > tempy) {
			for (j = tempy+1; j < tempy2; j++) {
				warehouse[tempx][j] = 3;
			}
		}
	}
	else
	{
		if (tempy > tempy2) {
			for (j = tempy - 1; j >= tempy2; j--) {
				warehouse[tempx][j] = 3;
			}
		}
		else if (tempy2 > tempy) {
			for (j = tempy + 1; j <= tempy2; j++) {
				warehouse[tempx][j] = 3;
			}
		}
	}
	if (tempx != tempx2) {
		if (tempx2 > tempx) {
			for (i = tempx+1; i < tempx2; i++) {
				warehouse[i][tempy2] = 3;
			}
		}
		else if (tempx > tempx2) {
			for (i = tempx-1; i > tempx2; i--) {
				warehouse[i][tempy2] = 3;
			}
		}
	}
}",1
abro522,1695604666,1,"void PelletRoute(int warehouse[10][10]) {
    int pellet_x = -1;
    int pelley_y = -1;
    int dest_x = -1;
    int dest_y = -1;

    for (int y = 0; y < 10; y++) {
        for (int x = 10; x < 10; x++) {
            switch (warehouse[y][x]) {
                case 1:
                    pellet_x = x;
                    pellet_y = y;
                    break;
                case 2:
                    dest_x = x;
                    dest_y = y;
            }
        }
    }

    if (pellet_x < 0 || pellet_y < 0 || dest_x < 0 || dest_y < 0) {
        return;
    }
    
    // 1. move the pellet horizontally (left or right) if necessary, until it lines up with the destination
    // 2. move the pellet vertically (up or down) if necessary, until it reaches the destination
    int horiz_start = (pellet_x < dest_x) ? (pellet_x + 1) : (dest_x + 1);
    int horiz_end = (pellet_x < dest_x) ? (dest_x - 1) : (pellet_x - 1);

    int vert_start = (pellet_y < dest_y) ? (pellet_y + 1) : (dest_y + 1);
    int vert_end = (pellet_y < dest_y) ? (dest_y - 1) : (pellet_y - 1);

    for (int x = horiz_start; x < horiz_end; x++) {
        warehouse[pellet_y][x] = 3;
    }
    
    for (int y = vert_start; y < vert_end; y++) {
        warehouse[y][dest_x] = 3;
    }
}",0
abro522,1695604717,2,"void PelletRoute(int warehouse[10][10]) {
    int pellet_x = -1;
    int pellet_y = -1;
    int dest_x = -1;
    int dest_y = -1;

    for (int y = 0; y < 10; y++) {
        for (int x = 10; x < 10; x++) {
            switch (warehouse[y][x]) {
                case 1:
                    pellet_x = x;
                    pellet_y = y;
                    break;
                case 2:
                    dest_x = x;
                    dest_y = y;
            }
        }
    }

    if (pellet_x < 0 || pellet_y < 0 || dest_x < 0 || dest_y < 0) {
        return;
    }
    
    // 1. move the pellet horizontally (left or right) if necessary, until it lines up with the destination
    // 2. move the pellet vertically (up or down) if necessary, until it reaches the destination
    int horiz_start = (pellet_x < dest_x) ? (pellet_x + 1) : (dest_x + 1);
    int horiz_end = (pellet_x < dest_x) ? (dest_x - 1) : (pellet_x - 1);

    int vert_start = (pellet_y < dest_y) ? (pellet_y + 1) : (dest_y + 1);
    int vert_end = (pellet_y < dest_y) ? (dest_y - 1) : (pellet_y - 1);

    for (int x = horiz_start; x < horiz_end; x++) {
        warehouse[pellet_y][x] = 3;
    }
    
    for (int y = vert_start; y < vert_end; y++) {
        warehouse[y][dest_x] = 3;
    }
}",0
abro522,1695605666,3,"void PelletRoute(int warehouse[10][10]) {
    int pellet_x = -1;
    int pellet_y = -1;
    int dest_x = -1;
    int dest_y = -1;

    for (int y = 0; y < 10; y++) {
        for (int x = 0; x < 10; x++) {
            if (warehouse[y][x] == 1) {
                pellet_x = x;
                pellet_y = y;
            } else if (warehouse[y][x] == 2) {
                dest_x = x;
                dest_y = y;
            }
        }
    }

    if (pellet_x < 0 || pellet_y < 0 || dest_x < 0 || dest_y < 0) {
        return;
    }
    
    // 1. move the pellet horizontally (left or right) if necessary, until it lines up with the destination
    // 2. move the pellet vertically (up or down) if necessary, until it reaches the destination
    int horiz_start = (pellet_x < dest_x) ? pellet_x : dest_x;
    int horiz_end = (pellet_x < dest_x) ? dest_x : pellet_x;

    int vert_start = (pellet_y < dest_y) ? pellet_y : dest_y;
    int vert_end = (pellet_y < dest_y) ? dest_y : pellet_y;

    for (int x = horiz_start; x <= horiz_end; x++) {
        if (warehouse[pellet_y][x] == 0)
            warehouse[pellet_y][x] = 3;
    }
    
    for (int y = vert_start; y <= vert_end; y++) {
        if (warehouse[y][dest_x] == 0)
            warehouse[y][dest_x] = 3;
    }
}",1
acam267,1696226613,1,"void PelletRoute(int warehouse[10][10]) {
    int startX;
    int startY;
    int endX;
    int endY;
    for(int x = 0; x < 10; x++) {
        for(int y = 0; y < 10; y++) {
            if (warehouse[y][x] == 1) {
                startX = x;
                startY = y;
            } else if (warehouse[y][x] == 2) {
                endX = x;
                endY = y;
            }
        }
    }

    int stepX;
    int stepY;

    if(startX < endX) {
        stepX = 1;
    } else {
        stepX = -1;
    }

    if(startY < endY) {
        stepY = 1;
    } else {
        stepY = -1;
    }

    for(int x = startX+stepX; x != endX+stepX; x+=stepX) {
        if(x == startX) {
            continue;
        }
        warehouse[startY][x] = 3;
    }
    for(int y = startY+stepY; y != endY; y+=stepY) {
        if(y == startY) {
            continue;
        }
        warehouse[y][endX] = 3;
    }
}",0
acam267,1696227724,2,"void PelletRoute(int warehouse[10][10]) {
    int startX;
    int startY;
    int endX;
    int endY;
    for(int x = 0; x < 10; x++) {
        for(int y = 0; y < 10; y++) {
            if (warehouse[y][x] == 1) {
                startX = x;
                startY = y;
            } else if (warehouse[y][x] == 2) {
                endX = x;
                endY = y;
            }
        }
    }

    int stepX;
    int stepY;

    if(startX < endX) {
        stepX = 1;
    } else {
        stepX = -1;
    }

    if(startY < endY) {
        stepY = 1;
    } else {
        stepY = -1;
    }

    if (startX != endX) {
        for(int x = startX + stepX; x != endX; x += stepX) {
            warehouse[startY][x] = 3;
        }
    }
    if (startY != endY) {
        for(int y = startY + stepY; y != endY; y += stepY) {
            warehouse[y][endX] = 3;
        }
    }
    if(warehouse[startY][endX] != 2) {
        warehouse[startY][endX] = 3;
    }
}",0
acam267,1696228401,3,"void PelletRoute(int warehouse[10][10]) {
    int startX;
    int startY;
    int endX;
    int endY;
    for(int x = 0; x < 10; x++) {
        for(int y = 0; y < 10; y++) {
            if (warehouse[y][x] == 1) {
                startX = x;
                startY = y;
            } else if (warehouse[y][x] == 2) {
                endX = x;
                endY = y;
            }
        }
    }

    int stepX;
    int stepY;

    if(startX < endX) {
        stepX = 1;
    } else {
        stepX = -1;
    }

    if(startY < endY) {
        stepY = 1;
    } else {
        stepY = -1;
    }

    if (startX != endX) {
        for(int x = startX + stepX; x != endX + stepX; x += stepX) {
            if(warehouse[startY][x] != 1 && warehouse[startY][x] != 2) {
                warehouse[startY][x] = 3;
            }
        }
    }
    if (startY != endY) {
        for(int y = startY + stepY; y != endY + stepY; y += stepY) {
            if(warehouse[y][endX] != 1 && warehouse[y][endX] != 2) {
                warehouse[y][endX] = 3;
            }
        }
    }
}",1
acoc261,1695783083,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int row1;
    int col1;
    int row2;
    int col2;
    int i;
    int j;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    if (col1 < col2) {
        for(j = col1; j < col2; j++){
            if (warehouse[row1][j] == 0){
                warehouse[row1][j] = 3;
            }
        }
    }
    if (col1 > col2) {
        for(j = col1; j > col2; j--){
            if (warehouse[row1][j] == 0){
                warehouse[row1][j] = 3;
            }
        }
    }
    if (row1 < row2) {
        for(i = row1; i < row2; i++){
            if (warehouse[i][col2] == 0){
                warehouse[i][col2] = 3;
            }
        }
    }
    if (row1 > row2) {
        for(i = row1; i > row2; i--){
            if (warehouse[i][col2] == 0){
                warehouse[i][col2] = 3;
            }
        }
    }
}",1
adav221,1696155602,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
afit324,1696202889,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i,j;
    int i1,j1;
    int i2,j2;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                i1 = i;
                j1 = j;
            }
            if (warehouse[i][j] == 2) {
                i2 = i;
                j2 = j;
            }
        }
    }

    if (j2 > j1) {
        for (j = j1 + 1; j < j2; j++) {
            warehouse[i1][j] = 3;
        }
    }
    if (j2 < j1) {
            for (j = j2 + 1; j < j1; j++) {
                warehouse[i1][j] = 3;
            }
    } 
    if (j2 == j1) {
        if ( i2 > i1) {
            for (i = i1 + 1; i < i2; i++) {
                warehouse[i][j2] = 3;
            }
            return;
        } else {
            for (i = i2 + 1; i < i1; i++) {
                warehouse[i][j2] = 3;
            }
            return;
        }
  
    }
    if (i2 > i1) {
        for (i = i1; i < i2; i++) {
            warehouse[i][j2] = 3;
        }
    }
    if (i2 < i1) {
        for (i = i2 + 1; i <= i1; i++) {
            warehouse[i][j2] = 3;
        }
    }
    if (i2 == i1) {
        if ( j2 > j1) {
            for (j = j1 + 1; j < j2; j++) {
                warehouse[i1][j] = 3;
            }
            return;
        } else {
            for (j = j2 + 1; j < j1; j++) {
                warehouse[i1][j] = 3;
            }
            return;
        }
  
    }
}",1
agan859,1696034630,1,"oid PelletRoute(int warehouse[10][10])
{ 
	int a, b;
	int Row1, Column1, Row2, Column2;

		for (a = 0; a < 10; a++) {
			for (b = 0; b < 10; b++) {
				if (warehouse[a][b] == 1) {
					Row1 = a;
					Column1 = b;
				} else if (warehouse[a][b] == 2) {
					Row2 = a;
					Column2 = b;
				}


			}

		}

	int k, l;

	if (Row1 < Row2) {
		if (Column1 > Column2) {
			for (k = Column1 - 1; k > (Column2); k--) {
				warehouse[Row1][k] = 3;
			}
			for (l = Row1; l < (Row2); l++) {
				warehouse[l][Column2] = 3;

			}
		} else if (Column2 > Column1) {
			for (k = Column1 + 1; k < Column2; k++) {
				warehouse[Row1][k] = 3;
			}
			for (l = Row1; l < (Row2); l++) {
				warehouse[l][Column2] = 3;
			}
			
		} else {
			for (l = Row1 + 1; l < (Row2); l++) {
				warehouse[l][Column2] = 3;
			}
		}
	} else if (Row2 < Row1) {
		if (Column1 > Column2) {
			for (k = Column1 - 1; k > (Column2); k--) {
				warehouse[Row1][k] = 3;
			}
			for (l = Row1; l > (Row2); l--) {
				warehouse[l][Column2] = 3;

			}
		} else if (Column2 > Column1) {
			for (k = Column1 + 1; k < (Column2); k++) {
				warehouse[Row1][k] = 3;
			}
			for (l = Row1; l > (Row2); l--) {
				warehouse[l][Column2] = 3;
			}
		} else {
			for (l = Row1 - 1; l > (Row2); l--) {
				warehouse[l][Column2] = 3;
			}
		}
	} else {
		if (Column1 > Column2) {
			for (k = Column1 - 1; k > Column2; k--) {
				warehouse[Row1][k] = 3;
			}
		} else if (Column2 > Column1) {
			for (k = Column1 + 1; k < Column2; k++) {
				warehouse[Row1][k] = 3;
			}

		}

	}
}
",0
agan859,1696034645,2,"void PelletRoute(int warehouse[10][10])
{ 
	int a, b;
	int Row1, Column1, Row2, Column2;

		for (a = 0; a < 10; a++) {
			for (b = 0; b < 10; b++) {
				if (warehouse[a][b] == 1) {
					Row1 = a;
					Column1 = b;
				} else if (warehouse[a][b] == 2) {
					Row2 = a;
					Column2 = b;
				}


			}

		}

	int k, l;

	if (Row1 < Row2) {
		if (Column1 > Column2) {
			for (k = Column1 - 1; k > (Column2); k--) {
				warehouse[Row1][k] = 3;
			}
			for (l = Row1; l < (Row2); l++) {
				warehouse[l][Column2] = 3;

			}
		} else if (Column2 > Column1) {
			for (k = Column1 + 1; k < Column2; k++) {
				warehouse[Row1][k] = 3;
			}
			for (l = Row1; l < (Row2); l++) {
				warehouse[l][Column2] = 3;
			}
			
		} else {
			for (l = Row1 + 1; l < (Row2); l++) {
				warehouse[l][Column2] = 3;
			}
		}
	} else if (Row2 < Row1) {
		if (Column1 > Column2) {
			for (k = Column1 - 1; k > (Column2); k--) {
				warehouse[Row1][k] = 3;
			}
			for (l = Row1; l > (Row2); l--) {
				warehouse[l][Column2] = 3;

			}
		} else if (Column2 > Column1) {
			for (k = Column1 + 1; k < (Column2); k++) {
				warehouse[Row1][k] = 3;
			}
			for (l = Row1; l > (Row2); l--) {
				warehouse[l][Column2] = 3;
			}
		} else {
			for (l = Row1 - 1; l > (Row2); l--) {
				warehouse[l][Column2] = 3;
			}
		}
	} else {
		if (Column1 > Column2) {
			for (k = Column1 - 1; k > Column2; k--) {
				warehouse[Row1][k] = 3;
			}
		} else if (Column2 > Column1) {
			for (k = Column1 + 1; k < Column2; k++) {
				warehouse[Row1][k] = 3;
			}

		}

	}
}
",1
ahac139,1695782526,1,"int sign(int x) {
    return (x > 0) - (x < 0);
}
void PelletRoute(int warehouse[10][10]){

    int rowS, colS, rowE, colE;

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1){
                rowS = i;
                colS = j;
            } else if (warehouse[i][j] == 2){
                rowE = i;
                colE = j;
            }
        }
    }


    int rowDiff = abs(rowE - rowS);
    int colDiff = abs(colE-colS);

    // find x pos of all 3s
    int threeCols[10];
    for (int i = 0; i < colDiff+1; i++)
    {      
        threeCols[i] = colS + i*sign(colE - colS);
    }
    
    
    // find y pos of all 3s
    int threeRows[10];
    for (int i = 0; i < rowDiff; i++)
    {
        threeRows[i] = rowS + i*sign(rowE - rowS);
    }

    // pasting x (col) 3s
    for (int i = 0; i < colDiff; i++)
    {      
        warehouse[rowS][threeCols[i]] = 3;
    }

    // pasting y (row) 3s
    for (int i = 0; i < rowDiff; i++)
    {
        warehouse[threeRows[i]][colE] = 3;
    }
    
    warehouse[rowS][colS] = 1;

}",1
ahai431,1696139118,1,"void PelletRoute(int warehouse[10][10]) {
	int row1, row2, col1, col2;
	
	for (int x1 = 0; x1 < 10; x1++) {
		for (int y1 = 0; y1 < 10; y1++) {
			if (warehouse[x1][y1] == 1) {
				row1 = x1;
				col1 = y1;
			}
		}
	}

	for (int x2 = 0; x2 < 10; x2++) {
		for (int y2 = 0; y2 < 10; y2++) {
			if (warehouse[x2][y2] == 2) {
				row2 = x2;
				col2 = y2;
			}
		}
	}

	int rowdif, coldif, rowL, colL;

	if (row1 > row2) {
		rowdif = row1 - row2;
		rowL = row1;
	}
	else if (row2 > row1) {
		rowdif = row2 - row1;
		rowL = row2;
	}
	else {
		rowdif = 0;
		rowL = 0;
	}

	if (col1 > col2) {
		coldif = col1 - col2;
		colL = col1;
	}
	else if (col2 > col1) {
		coldif = col2 - col1;
		colL = col2;
	}
	else {
		coldif = 0;
		colL = 0;
	}


	for (int i = rowL; i >= rowL - rowdif; i--) {
		warehouse[i][colL] = 3;
	}
	
	for (int j = colL; j >= colL - coldif; j--){
		warehouse[rowL - rowdif][j] = 3;
	}

	warehouse[row1][col1] = 1;
	warehouse[row2][col2] = 2;


}

void FindValue(int warehouse[10][10], int value, int* rowPos, int* colPos)
{
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == value) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
ahai431,1696139893,2,"void PelletRoute(int warehouse[10][10]) {
	int row1, row2, col1, col2;
	
	for (int x1 = 0; x1 < 10; x1++) {
		for (int y1 = 0; y1 < 10; y1++) {
			if (warehouse[x1][y1] == 1) {
				row1 = x1;
				col1 = y1;
			}
		}
	}

	for (int x2 = 0; x2 < 10; x2++) {
		for (int y2 = 0; y2 < 10; y2++) {
			if (warehouse[x2][y2] == 2) {
				row2 = x2;
				col2 = y2;
			}
		}
	}

	int rowdif, coldif, rowL, colL;
	int col, row;

	if (row1 > row2) {
		rowdif = row1 - row2;
		rowL = row1;
		row = rowL - rowdif;
	}
	else if (row2 > row1) {
		rowdif = row2 - row1;
		rowL = row2;
		row = rowL - rowdif;
	}
	else {
		rowdif = 0;
		rowL = 0;
		row = row1;
	}

	if (col1 > col2) {
		coldif = col1 - col2;
		colL = col1;
		col = colL;
	}
	else if (col2 > col1) {
		coldif = col2 - col1;
		colL = col2;
		col = colL;
	}
	else {
		coldif = 0;
		colL = 0;
		col = col1;
	}


	if (row1>row1) {
		if (rowdif != 0) {
			for (int i = rowL; i >= rowL - rowdif; i--) {
				warehouse[i][col] = 3;
			}
		}

		if (coldif != 0) {
			for (int j = colL; j >= colL - coldif; j--) {
				warehouse[row][j] = 3;
			}
		}
	}
	else {
		if (coldif != 0) {
			for (int j = colL; j >= colL - coldif; j--) {
				warehouse[row][j] = 3;
			}
		}
		if (rowdif != 0) {
			for (int i = rowL; i >= rowL - rowdif; i--) {
				warehouse[i][col] = 3;
			}
		}
	}

	if (rowdif != 0) {
		for (int i = rowL; i >= rowL - rowdif; i--) {
			warehouse[i][col] = 3;
		}
	}
	
	if (coldif != 0) {
		for (int j = colL; j >= colL - coldif; j--) {
			warehouse[row][j] = 3;
		}
	}

	warehouse[row1][col1] = 1;
	warehouse[row2][col2] = 2;
}",0
ahai431,1696139944,3,"void PelletRoute(int warehouse[10][10]) {
	int row1, row2, col1, col2;
	
	for (int x1 = 0; x1 < 10; x1++) {
		for (int y1 = 0; y1 < 10; y1++) {
			if (warehouse[x1][y1] == 1) {
				row1 = x1;
				col1 = y1;
			}
		}
	}

	for (int x2 = 0; x2 < 10; x2++) {
		for (int y2 = 0; y2 < 10; y2++) {
			if (warehouse[x2][y2] == 2) {
				row2 = x2;
				col2 = y2;
			}
		}
	}

	int rowdif, coldif, rowL, colL;
	int col, row;

	if (row1 > row2) {
		rowdif = row1 - row2;
		rowL = row1;
		row = rowL - rowdif;
	}
	else if (row2 > row1) {
		rowdif = row2 - row1;
		rowL = row2;
		row = rowL - rowdif;
	}
	else {
		rowdif = 0;
		rowL = 0;
		row = row1;
	}

	if (col1 > col2) {
		coldif = col1 - col2;
		colL = col1;
		col = colL;
	}
	else if (col2 > col1) {
		coldif = col2 - col1;
		colL = col2;
		col = colL;
	}
	else {
		coldif = 0;
		colL = 0;
		col = col1;
	}


	if (row1>row2) {
		if (rowdif != 0) {
			for (int i = rowL; i >= rowL - rowdif; i--) {
				warehouse[i][col] = 3;
			}
		}

		if (coldif != 0) {
			for (int j = colL; j >= colL - coldif; j--) {
				warehouse[row][j] = 3;
			}
		}
	}
	else {
		if (coldif != 0) {
			for (int j = colL; j >= colL - coldif; j--) {
				warehouse[row][j] = 3;
			}
		}
		if (rowdif != 0) {
			for (int i = rowL; i >= rowL - rowdif; i--) {
				warehouse[i][col] = 3;
			}
		}
	}

	if (rowdif != 0) {
		for (int i = rowL; i >= rowL - rowdif; i--) {
			warehouse[i][col] = 3;
		}
	}
	
	if (coldif != 0) {
		for (int j = colL; j >= colL - coldif; j--) {
			warehouse[row][j] = 3;
		}
	}

	warehouse[row1][col1] = 1;
	warehouse[row2][col2] = 2;
}",0
ahai431,1696142307,4,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void PelletRoute(int warehouse[10][10]) {
	int row1, row2, col1, col2;

	for (int x1 = 0; x1 < 10; x1++) {
		for (int y1 = 0; y1 < 10; y1++) {
			if (warehouse[x1][y1] == 1) {
				row1 = x1;
				col1 = y1;
			}
		}
	}

	for (int x2 = 0; x2 < 10; x2++) {
		for (int y2 = 0; y2 < 10; y2++) {
			if (warehouse[x2][y2] == 2) {
				row2 = x2;
				col2 = y2;
			}
		}
	}

	int rowdif, coldif;
	int col, row;

	coldif = col1 - col2;
	rowdif = row1 - row2;

	
	if (coldif != 0) {
		if (coldif>0) {
			for (int j = col1; j >= col1 - coldif; j--) {
				warehouse[row1][j] = 3;
			}
		}
		else {
			for (int j = col1; j <= col1 - coldif; j++) {
				warehouse[row1][j] = 3;
			}
		}

	}

	if (rowdif != 0) {
		if (rowdif>0) {
			for (int i = row1; i >= row1 - rowdif; i--) {
				warehouse[i][col2] = 3;
			}
		}
		else {
			for (int i = row1; i <= row1 - rowdif; i++) {
				warehouse[i][col2] = 3;
			}
		}

	}


	warehouse[row1][col1] = 1;
	warehouse[row2][col2] = 2;


}",0
ahai431,1696142317,5,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void PelletRoute(int warehouse[10][10]) {
	int row1, row2, col1, col2;

	for (int x1 = 0; x1 < 10; x1++) {
		for (int y1 = 0; y1 < 10; y1++) {
			if (warehouse[x1][y1] == 1) {
				row1 = x1;
				col1 = y1;
			}
		}
	}

	for (int x2 = 0; x2 < 10; x2++) {
		for (int y2 = 0; y2 < 10; y2++) {
			if (warehouse[x2][y2] == 2) {
				row2 = x2;
				col2 = y2;
			}
		}
	}

	int rowdif, coldif;

	coldif = col1 - col2;
	rowdif = row1 - row2;

	
	if (coldif != 0) {
		if (coldif>0) {
			for (int j = col1; j >= col1 - coldif; j--) {
				warehouse[row1][j] = 3;
			}
		}
		else {
			for (int j = col1; j <= col1 - coldif; j++) {
				warehouse[row1][j] = 3;
			}
		}

	}

	if (rowdif != 0) {
		if (rowdif>0) {
			for (int i = row1; i >= row1 - rowdif; i--) {
				warehouse[i][col2] = 3;
			}
		}
		else {
			for (int i = row1; i <= row1 - rowdif; i++) {
				warehouse[i][col2] = 3;
			}
		}

	}


	warehouse[row1][col1] = 1;
	warehouse[row2][col2] = 2;


}",1
ahas673,1695857286,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int rowEnd, colEnd, rowStart, colStart;
    int tile = 2;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == tile) {
                rowEnd = i;
                colEnd = j;
            }
            else if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
        }
    }

    int startposrow = rowStart;
    int startposcol = colStart;
    int endposrow = rowEnd;
    int endposcol = colEnd;
    
    /* move box horizontally */
    if (colStart < colEnd) {
        while (colStart < colEnd) {
            warehouse[rowStart][colStart] = 3;
            colStart++;
        }
    }
    else if (colStart > colEnd) {
        while (colStart > colEnd) {
            warehouse[rowStart][colStart] = 3;
            colStart--;
        }
    }

    /* move box vertically*/
    if (rowStart < rowEnd) {
        while (rowStart < rowEnd) {
            warehouse[rowStart][colStart] = 3;
            rowStart++;
        }
    }
    else if (rowStart > rowEnd) {
        while (rowStart > rowEnd) {
            warehouse[rowStart][colStart] = 3;
            rowStart--;
        }
    }

    warehouse[startposrow][startposcol] = 1;
    warehouse[endposrow][endposcol] = 2;
}",1
ahas673,1695857617,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int rowEnd, colEnd, rowStart, colStart;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
            else if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
        }
    }

    int startposrow = rowStart;
    int startposcol = colStart;
    int endposrow = rowEnd;
    int endposcol = colEnd;
    
    /* move box horizontally */
    if (colStart < colEnd) {
        while (colStart < colEnd) {
            warehouse[rowStart][colStart] = 3;
            colStart++;
        }
    }
    else if (colStart > colEnd) {
        while (colStart > colEnd) {
            warehouse[rowStart][colStart] = 3;
            colStart--;
        }
    }

    /* move box vertically*/
    if (rowStart < rowEnd) {
        while (rowStart < rowEnd) {
            warehouse[rowStart][colStart] = 3;
            rowStart++;
        }
    }
    else if (rowStart > rowEnd) {
        while (rowStart > rowEnd) {
            warehouse[rowStart][colStart] = 3;
            rowStart--;
        }
    }

    warehouse[startposrow][startposcol] = 1;
    warehouse[endposrow][endposcol] = 2;
}",1
ahij206,1696234101,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the pellet and destination positions
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move pellet horizontally to align with the destination
    while (pelletCol != destCol) {
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
        pelletCol += (pelletCol < destCol) ? 1 : -1;
    }

    // Move pellet vertically to reach the destination
    while (pelletRow != destRow) {
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
        pelletRow += (pelletRow < destRow) ? 1 : -1;
    }

    // Mark the destination
    warehouse[destRow][destCol] = 3;
}
",0
ahua579,1695708764,1,"void PelletRoute(int warehouse[10][10])
{
    int boxStartRow, boxStartCol, boxEndRow, boxEndCol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                boxStartRow = i;
                boxStartCol = j;
            }
            if (warehouse[i][j] == 2) {
                boxEndRow = i;
                boxEndCol = j;
            }
        }
    }
    printf(""\n BOX STARTS AT %d,%d\n"", boxStartRow, boxStartCol);
    printf(""\n BOX ENDS AT %d,%d\n"", boxEndRow, boxEndCol);

    // move left/right
    if (boxEndCol > boxStartCol) {
        for (int i = boxStartCol + 1; i < boxEndCol; i++) {
            warehouse[boxStartRow][i] = 3;
        }
    }
    else {
        for (int i = boxStartCol - 1; i > boxEndCol; i--) {
            warehouse[boxStartRow][i] = 3;
        }
    }

    // move up/down
    if (boxEndRow > boxStartRow) {
        for (int i = boxStartRow; i < boxEndRow; i++)
            warehouse[i][boxEndCol] = 3;
        }
    if (boxEndRow < boxStartRow) {
        for (int i = boxStartRow ; i > boxEndRow; i--)
            warehouse[i][boxEndCol] = 3;
        }
    }",0
ahua579,1695708809,2,"void PelletRoute(int warehouse[10][10])
{
    int boxStartRow, boxStartCol, boxEndRow, boxEndCol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                boxStartRow = i;
                boxStartCol = j;
            }
            if (warehouse[i][j] == 2) {
                boxEndRow = i;
                boxEndCol = j;
            }
        }
    }

    // move left/right
    if (boxEndCol > boxStartCol) {
        for (int i = boxStartCol + 1; i < boxEndCol; i++) {
            warehouse[boxStartRow][i] = 3;
        }
    }
    else {
        for (int i = boxStartCol - 1; i > boxEndCol; i--) {
            warehouse[boxStartRow][i] = 3;
        }
    }

    // move up/down
    if (boxEndRow > boxStartRow) {
        for (int i = boxStartRow; i < boxEndRow; i++)
            warehouse[i][boxEndCol] = 3;
        }
    if (boxEndRow < boxStartRow) {
        for (int i = boxStartRow ; i > boxEndRow; i--)
            warehouse[i][boxEndCol] = 3;
        }
    }",0
ahua579,1695709352,3,"void PelletRoute(int warehouse[10][10])
{
    int boxStartRow, boxStartCol, boxEndRow, boxEndCol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                boxStartRow = i;
                boxStartCol = j;
            }
            if (warehouse[i][j] == 2) {
                boxEndRow = i;
                boxEndCol = j;
            }
        }
    }

    // move left/right
    if (boxEndCol > boxStartCol) {
        for (int i = boxStartCol + 1; i <= boxEndCol; i++) {
            if (warehouse[boxStartRow][i] == 2) {
                break;
            }
            warehouse[boxStartRow][i] = 3;
        }
    }
    else {
        for (int i = boxStartCol - 1; i >= boxEndCol; i--) {
            if (warehouse[boxStartRow][i] == 2) {
                break;
            }
            warehouse[boxStartRow][i] = 3;
        }
    }

    // move up/down
    if (boxEndRow > boxStartRow) {
        for (int i = boxStartRow+1; i < boxEndRow; i++)
            warehouse[i][boxEndCol] = 3;
        }
    if (boxEndRow < boxStartRow) {
        for (int i = boxStartRow-1 ; i > boxEndRow; i--)
            warehouse[i][boxEndCol] = 3;
        }
    }
",1
ahus071,1696159328,1,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
	int rowP, rowD, colP, colD,up, left;
	rowP = rowD = colP = colD = -1;
	for (int i=0; i<10; i++)
	{
		for (int j =0; j <10; j++)
		{
			if(warehouse[i][j] == 1)
			{
				rowP = i;
				colP = j;
			}
			else if(warehouse[i][j] == 2)
			{
				rowD = i;
				colD = j;
			}
			if (rowD > -1 && rowP > -1 && colP > -1 && colD >-1)
			{
				break;
			}
		}
	}

for (int i = (colP < colD ? colP : colD) + 1; i <(colP > colD ? colP : colD); i++)
{
	warehouse[rowP][i] = 3;
}
for (int j = (rowP < rowD ? rowP : rowD); j < (rowP > rowD ? rowP : rowD); j++){
	warehouse[j][colD] = 3;
}
}",0
ahus071,1696159342,2,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
	int rowP, rowD, colP, colD;
	rowP = rowD = colP = colD = -1;
	for (int i=0; i<10; i++)
	{
		for (int j =0; j <10; j++)
		{
			if(warehouse[i][j] == 1)
			{
				rowP = i;
				colP = j;
			}
			else if(warehouse[i][j] == 2)
			{
				rowD = i;
				colD = j;
			}
			if (rowD > -1 && rowP > -1 && colP > -1 && colD >-1)
			{
				break;
			}
		}
	}

for (int i = (colP < colD ? colP : colD) + 1; i <(colP > colD ? colP : colD); i++)
{
	warehouse[rowP][i] = 3;
}
for (int j = (rowP < rowD ? rowP : rowD); j < (rowP > rowD ? rowP : rowD); j++){
	warehouse[j][colD] = 3;
}
}",0
ahus071,1696159416,3,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
	int rowP, rowD, colP, colD;
	rowP = rowD = colP = colD = -1;
	for (int i=0; i<10; i++)
	{
		for (int j =0; j <10; j++)
		{
			if(warehouse[i][j] == 1)
			{
				rowP = i;
				colP = j;
			}
			else if(warehouse[i][j] == 2)
			{
				rowD = i;
				colD = j;
			}
			if (rowD > -1 && rowP > -1 && colP > -1 && colD >-1)
			{
				break;
			}
		}
	}

for (int i = (colP < colD ? colP : colD) + 1; i <(colP > colD ? colP : colD); i++)
{
	warehouse[rowP][i] = 3;
}
for (int j = (rowP < rowD ? rowP : rowD)+ 1; j < (rowP > rowD ? rowP : rowD); j++){
	warehouse[j][colD] = 3;
}
}",0
ahus071,1696159648,4,"void PelletRoute(int warehouse[10][10])
{
	int rowP, rowD, colP, colD,up, left;
	rowP = rowD = colP = colD = -1;
	for (int i=0; i<10; i++)
	{
		for (int j =0; j <10; j++)
		{
			if(warehouse[i][j] == 1)
			{
				rowP = i;
				colP = j;
			}
			else if(warehouse[i][j] == 2)
			{
				rowD = i;
				colD = j;
			}
			if (rowD > -1 && rowP > -1 && colP > -1 && colD >-1)
			{
				break;
			}
		}
	}

for (int i = (colP < colD ? colP : colD) + 1; i <(colP > colD ? colP : colD); i++)
{
	warehouse[rowP][i] = 3;
}
if ((warehouse[(rowP < rowD ? rowP : rowD)][colD]) == 0)
{
	warehouse[(rowP < rowD ? rowP : rowD)][colD] = 3;
}
for (int j = (rowP < rowD ? rowP : rowD)+1; j < (rowP > rowD ? rowP : rowD); j++){
	warehouse[j][colD] = 3;
}
}",0
ahus071,1696159666,5,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int rowP, rowD, colP, colD;
	rowP = rowD = colP = colD = -1;
	for (int i=0; i<10; i++)
	{
		for (int j =0; j <10; j++)
		{
			if(warehouse[i][j] == 1)
			{
				rowP = i;
				colP = j;
			}
			else if(warehouse[i][j] == 2)
			{
				rowD = i;
				colD = j;
			}
			if (rowD > -1 && rowP > -1 && colP > -1 && colD >-1)
			{
				break;
			}
		}
	}

for (int i = (colP < colD ? colP : colD) + 1; i <(colP > colD ? colP : colD); i++)
{
	warehouse[rowP][i] = 3;
}
if ((warehouse[(rowP < rowD ? rowP : rowD)][colD]) == 0)
{
	warehouse[(rowP < rowD ? rowP : rowD)][colD] = 3;
}
for (int j = (rowP < rowD ? rowP : rowD)+1; j < (rowP > rowD ? rowP : rowD); j++){
	warehouse[j][colD] = 3;
}
}",0
ahus071,1696159723,6,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int rowP, rowD, colP, colD;
	rowP = rowD = colP = colD = -1;
	for (int i=0; i<10; i++)
	{
		for (int j =0; j <10; j++)
		{
			if(warehouse[i][j] == 1)
			{
				rowP = i;
				colP = j;
			}
			else if(warehouse[i][j] == 2)
			{
				rowD = i;
				colD = j;
			}
			if (rowD > -1 && rowP > -1 && colP > -1 && colD >-1)
			{
				break;
			}
		}
	}

for (int i = (colP < colD ? colP : colD) + 1; i <(colP > colD ? colP : colD); i++)
{
	warehouse[rowP][i] = 3;
}
if ((warehouse[rowP][colD]) == 0)
{
	warehouse[rowP][colD] = 3;
}
for (int j = (rowP < rowD ? rowP : rowD)+1; j < (rowP > rowD ? rowP : rowD); j++){
	warehouse[j][colD] = 3;
}
}",1
ajhz010,1695766192,1,"void PelletRoute(int warehouse[10][10]) {
    int i, j, rowLocation, colLocation, rowDestination, colDestination;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if ((warehouse[i][j] > 0) && (warehouse[i][j] < 2)) {
                rowLocation = i;
                colLocation = j%10;
            }
            else if (warehouse[i][j] > 1) {
                rowDestination = i;
                colDestination = j%10;
            }
        }
    }
    if (colLocation <= colDestination) {
        if (rowLocation == rowDestination) {
            for (j = (colLocation+1); j < (colDestination); j++) {
                i = rowLocation;
                warehouse[i][j] = 3;
            }
        }
            else {
                for (j = (colLocation+1); j < (colDestination+1); j++) {
                i = rowLocation;
                warehouse[i][j] = 3;
                }
            }
    }
    if (colLocation >= colDestination) {
        if (rowLocation == rowDestination) {
            for (j = (colLocation-1); j > (colDestination); j--) {
                i = rowLocation;
                warehouse[i][j] = 3;
            }
        }
        else {
            for (j = (colLocation-1); j > (colDestination-1); j--) {
                i = rowLocation;
                warehouse[i][j] = 3;  
            }
        }
        
    }
    if (rowLocation <= rowDestination) {
    for (i = (rowLocation+1); i < rowDestination; i++) {
        j = colDestination;
        warehouse[i][j] = 3;
    }
    }
    if (rowLocation >= rowDestination) {
    for (i = (rowLocation-1); i > rowDestination; i--) {
        j = colDestination;
        warehouse[i][j] = 3;
    }
    }
}",1
ajhz011,1695713848,1,"#include <stdio.h>

void PelletRoute(int layoutArray[10][10]) {

	int row, col, startRow, startCol, endRow, endCol, distanceRow, distanceCol, rowIndex, colIndex;

	for (row = 0; row < 10; row++) {
		for (col = 0; col < 10; col++) {
			if (layoutArray[row][col] == 1) {
				startRow = row;
				startCol = col;
				printf(""Start Position is: %d, %d\n"", startRow, startCol);
			}
			else if (layoutArray[row][col] == 2) {
				endRow = row;
				endCol = col;
				printf(""End Position is: %d, %d\n"", endRow, endCol);
			}
		}
	}

	distanceRow = endRow - startRow;
	distanceCol = endCol - startCol;

	//When endCol is on the right side relative to startCol

	if (distanceCol > 1) { 
		for (colIndex = startCol + 1; colIndex <= endCol; colIndex++) {
			layoutArray[startRow][colIndex] = 3;
		}
		layoutArray[startRow][endCol] = 3;
	}

	//When startRow is on the above relative to endRow
	if (distanceRow > 1) {
		for (rowIndex = startRow + 1; rowIndex < endRow; rowIndex++) {
			layoutArray[rowIndex][endCol] = 3;
		}
		layoutArray[startRow][endCol] = 3;
	}

	//When endCol is on the left side relative to startCol
	if (distanceCol < 1) {
		for (colIndex = startCol - 1; colIndex >= endCol; colIndex--) {
			layoutArray[startRow][colIndex] = 3;
		}
		layoutArray[startRow][endCol] = 3;
	}

	//When startRow is below relative to endRow
	if (distanceRow < 1) {
		for (rowIndex = startRow - 1; rowIndex > endRow; rowIndex--) {
			layoutArray[rowIndex][endCol] = 3;
		}
		layoutArray[startRow][endCol] = 3;
	}
}",0
ajhz011,1695716113,2,"#include <stdio.h>

void PelletRoute(int layoutArray[10][10]) {

	int row, col, startRow, startCol, endRow, endCol, rowIndex, colIndex;

	for (row = 0; row < 10; row++) {
		for (col = 0; col < 10; col++) {
			if (layoutArray[row][col] == 1) {
				startRow = row;
				startCol = col;
			}
			else if (layoutArray[row][col] == 2) {
				endRow = row;
				endCol = col;
			}
		}
	}

	//Conditions

	if (startCol < endCol) { 
		for (colIndex = startCol + 1; colIndex < endCol; colIndex++) {
			layoutArray[startRow][colIndex] = 3;
		}
		if (startRow - endRow != 0) {
			layoutArray[startRow][endCol] = 3;
		}
	}


	if (startRow < endRow) {
		for (rowIndex = startRow + 1; rowIndex < endRow; rowIndex++) {
			layoutArray[rowIndex][endCol] = 3;
		}
		if (startCol - endCol != 0) {
			layoutArray[startRow][endCol] = 3;
		}
	}


	if (startCol > endCol) {
		for (colIndex = startCol - 1; colIndex > endCol; colIndex--) {
			layoutArray[startRow][colIndex] = 3;
		}
		if (startRow - endRow != 0) {
			layoutArray[startRow][endCol] = 3;
		}
	}

	
	if (startRow > endRow) {
		for (rowIndex = startRow - 1; rowIndex > endRow; rowIndex--) {
			layoutArray[rowIndex][endCol] = 3;
		}
		if (startCol - endCol != 0) {
			layoutArray[startRow][endCol] = 3;
		}
	}
}",1
ajhz216,1695876048,1,"void PelletRoute(int warehouse[10][10]) {
	int orow;
	int ocol;
	int trow;
	int tcol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				orow = i;
				ocol = j;
			}
		}
	}

	for (int x = 0; x < 10; x++) {
		for (int y = 0; y < 10; y++) {
			if (warehouse[x][y] == 2) {
				trow = x;
				tcol = y;
			}
		}
	}

	if (trow - orow >= 0) {
		for (int i = orow; i < trow; i++) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol >= 0) {
		for (int i = ocol + 1; i < tcol + 1; i++) {
			warehouse[orow][i] = 3;
		}
	}

	if (trow - orow <= 0) {
		for (int i = orow; i > trow; i--) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol <= 0) {
		for (int i = ocol - 1; i > tcol - 1; i--) {
			warehouse[orow][i] = 3;
		}
	}
}",0
ajhz216,1695876869,2,"void PelletRoute(int warehouse[10][10]) {
	int orow;
	int ocol;
	int trow;
	int tcol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				orow = i;
				ocol = j;
			}
		}
	}

	for (int x = 0; x < 10; x++) {
		for (int y = 0; y < 10; y++) {
			if (warehouse[x][y] == 2) {
				trow = x;
				tcol = y;
			}
		}
	}

	if (trow - orow >= 0) {
		for (int i = orow; i < trow; i++) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol >= 0) {
		for (int i = ocol + 1; i < tcol; i++) {
			warehouse[orow][i] = 3;
		}
	}

	if (trow - orow <= 0) {
		for (int i = orow; i > trow; i--) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol <= 0) {
		for (int i = ocol - 1; i > tcol; i--) {
			warehouse[orow][i] = 3;
		}
	}

}",0
ajhz216,1695876954,3,"void PelletRoute(int warehouse[10][10]) {
	int orow;
	int ocol;
	int trow;
	int tcol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				orow = i;
				ocol = j;
			}
		}
	}

	for (int x = 0; x < 10; x++) {
		for (int y = 0; y < 10; y++) {
			if (warehouse[x][y] == 2) {
				trow = x;
				tcol = y;
			}
		}
	}

	if (trow - orow >= 0) {
		for (int i = orow + 1; i < trow; i++) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol >= 0) {
		for (int i = ocol + 1; i < tcol; i++) {
			warehouse[orow][i] = 3;
		}
	}

	if (trow - orow <= 0) {
		for (int i = orow - 1; i > trow; i--) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol <= 0) {
		for (int i = ocol - 1; i > tcol; i--) {
			warehouse[orow][i] = 3;
		}
	}

}",0
ajhz216,1695878776,4,"void PelletRoute(int warehouse[10][10]) {
	int orow;
	int ocol;
	int trow;
	int tcol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				orow = i;
				ocol = j;
			}
		}
	}

	for (int x = 0; x < 10; x++) {
		for (int y = 0; y < 10; y++) {
			if (warehouse[x][y] == 2) {
				trow = x;
				tcol = y;
			}
		}
	}

	if (trow - orow >= 0 && tcol - ocol != 0) {
		for (int i = orow; i < trow; i++) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol >= 0 && trow - orow != 0) {
		for (int i = ocol + 1; i < tcol; i++) {
			warehouse[orow][i] = 3;
		}
	}

	if (trow - orow <= 0 && tcol - ocol != 0) {
		for (int i = orow; i > trow; i--) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol <= 0 && trow - orow != 0) {
		for (int i = ocol - 1; i > tcol; i--) {
			warehouse[orow][i] = 3;
		}
	}

	/*...........................................................................................*/

	if (trow - orow >= 0 && tcol - ocol == 0) {
		for (int i = orow + 1; i < trow; i++) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol >= 0 && trow - orow == 0) {
		for (int i = ocol + 1; i < tcol; i++) {
			warehouse[orow][i] = 3;
		}
	}

	if (trow - orow <= 0 && tcol - ocol == 0) {
		for (int i = orow - 1; i > trow; i--) {
			warehouse[i][tcol] = 3;
		}
	}

	if (tcol - ocol <= 0 && trow - orow == 0) {
		for (int i = ocol - 1; i > tcol; i--) {
			warehouse[orow][i] = 3;
		}
	}
}",1
ajhz318,1695713318,1,"void PelletRoute(int warehouse[10][10]) {
    int i;
	int j;
    int rowPos1;
    int colPos1;
    int rowPos2;
    int colPos2;
	
	for (i = 0; i < 11; i++) {
		for (j = 0; j <11; j++) {
			if (warehouse[i][j] == 1) {
				rowPos1 = i;
				colPos1 = j;
			}
			else {
				
			}
		}
	}

    for (i = 0; i < 11; i++) {
		for (j = 0; j <11; j++) {
			if (warehouse[i][j] == 2) {
				rowPos2 = i;
				colPos2 = j;
			}
			else {
				
			}
		}
	}

    if (rowPos1 < rowPos2 && colPos1 < colPos2) {
        for (i = colPos1 + 1; i < colPos2; i++) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 > rowPos2 && colPos1 < colPos2) {
        for (i = colPos1 + 1; i < colPos2; i++) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i > rowPos2; i--) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 < rowPos2 && colPos1 > colPos2) {
        for (i = colPos1 - 1; i > colPos2; i--) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 > rowPos2 && colPos1 > colPos2) {
        for (i = colPos1 - 1; i > colPos2; i--) {
            printf(""I: \n"",i);
            warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i > rowPos2; i--) {
            warehouse[i][colPos2] = 3;
        }
    }
}",0
ajhz318,1695713342,2,"void PelletRoute(int warehouse[10][10]) {
    int i;
	int j;
    int rowPos1;
    int colPos1;
    int rowPos2;
    int colPos2;
	
	for (i = 0; i < 11; i++) {
		for (j = 0; j <11; j++) {
			if (warehouse[i][j] == 1) {
				rowPos1 = i;
				colPos1 = j;
			}
			else {
				
			}
		}
	}

    for (i = 0; i < 11; i++) {
		for (j = 0; j <11; j++) {
			if (warehouse[i][j] == 2) {
				rowPos2 = i;
				colPos2 = j;
			}
			else {
				
			}
		}
	}

    if (rowPos1 < rowPos2 && colPos1 < colPos2) {
        for (i = colPos1 + 1; i < colPos2; i++) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 > rowPos2 && colPos1 < colPos2) {
        for (i = colPos1 + 1; i < colPos2; i++) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i > rowPos2; i--) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 < rowPos2 && colPos1 > colPos2) {
        for (i = colPos1 - 1; i > colPos2; i--) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 > rowPos2 && colPos1 > colPos2) {
        for (i = colPos1 - 1; i > colPos2; i--) {
            warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i > rowPos2; i--) {
            warehouse[i][colPos2] = 3;
        }
    }
}",0
ajhz318,1695719909,3,"void PelletRoute(int warehouse[10][10]) {
    int i;
	int j;
    int rowPos1;
    int colPos1;
    int rowPos2;
    int colPos2;
	
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowPos1 = i;
				colPos1 = j;
			}
		}
	}

    for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowPos2 = i;
				colPos2 = j;
			}
		}
	}

    if (rowPos1 < rowPos2 && colPos1 < colPos2) {
        for (i = colPos1 + 1; i < colPos2; i++) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 > rowPos2 && colPos1 < colPos2) {
        for (i = colPos1 + 1; i < colPos2; i++) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i > rowPos2; i--) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 < rowPos2 && colPos1 > colPos2) {
        for (i = colPos1 - 1; i > colPos2; i--) {
        warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        }
    }

    else if (rowPos1 > rowPos2 && colPos1 > colPos2) {
        for (i = colPos1 - 1; i > colPos2; i--) {
            warehouse[rowPos1][i] = 3;
        }

        for (i = rowPos1; i > rowPos2; i--) {
            warehouse[i][colPos2] = 3;
        }
    }
    
    else if (rowPos1 == rowPos2 && colPos1 < colPos2) {
        for (i = colPos1 + 1; i < colPos2; i++) {
            warehouse[rowPos1][i] = 3;
        }
    }
    
    else if (rowPos1 == rowPos2 && colPos1 > colPos2) {
        for (i = colPos1 - 1; i > colPos2; i--) {
            warehouse[rowPos1][i] = 3;
        }
    }
    
    else if (rowPos1 < rowPos2 && colPos1 == colPos2) {
        for (i = rowPos1 + 1; i < rowPos2; i++) {
            warehouse[i][colPos1] = 3;
        }
    }
    
    else if (rowPos1 > rowPos2 && colPos1 == colPos2) {
        for (i = rowPos1 - 1; i > rowPos2; i--) {
            warehouse[i][colPos1] = 3;
        }
    }
}",1
ajhz444,1695784744,1,"void PelletRoute(int warehouse[10][10]) 
{
	int startx, starty, finx, finy, distancex, distancey = 0;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				finx = i;
				finy = j;
			}
		}
	}

	for (int k = 0; k < 10; k++) {
		for (int l = 0; l < 10; l++) {
			if (warehouse[k][l] == 1) {
				startx = k;
				starty = l;
			}
		}
	}		
	distancex = finx - startx;
	distancey = finy - starty;
	if (distancey < 0) {
		for (int b = -1; b >= distancey; b--) {
			warehouse[startx][starty + b] = 3;
		}
	}
	else if (distancey > 0) {
		for (int b = 1; b <= distancey; b++) {
			warehouse[startx][starty + b] = 3;
		}
	}
	if (distancex < 0) {
		for (int a = -1; a > distancex; a--) {
			warehouse[startx + a][finy] = 3;
		}
	}
	else if (distancex > 0) {
		for (int a = 1; a < distancex; a++) {
			warehouse[startx + a][finy] = 3;
		}
	}
}",0
ajhz444,1695785220,2,"void PelletRoute(int warehouse[10][10]) 
{
	int startx, starty, finx, finy, distancex, distancey = 0;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				finx = i;
				finy = j;
			}
		}
	}

	for (int k = 0; k < 10; k++) {
		for (int l = 0; l < 10; l++) {
			if (warehouse[k][l] == 1) {
				startx = k;
				starty = l;
			}
		}
	}		
	distancex = finx - startx;
	distancey = finy - starty;
	if (distancey < 0) {
		for (int b = -1; b >= distancey; b--) {
			if (warehouse[startx][starty + b] != 2) {
				warehouse[startx][starty + b] = 3;
			}
		}
	}
	else if (distancey > 0) {
		for (int b = 1; b <= distancey; b++) {
			if (warehouse[startx][starty + b] != 2) {
				warehouse[startx][starty + b] = 3;
			}
		}
	}
	if (distancex < 0) {
		for (int a = -1; a >= distancex; a--) {
			if (warehouse[startx + a][finy] != 2) {
				warehouse[startx + a][finy] = 3;
			}
		}
	}
	else if (distancex > 0) {
		for (int a = 1; a <= distancex; a++) {
			if (warehouse[startx + a][finy] != 2) {
				warehouse[startx + a][finy] = 3;
			}
		}
	}
}",1
ajin489,1695872188,1,"void PelletRoute(int warehouse[10][10]){

int i, j, p_r, p_c, t_r, t_c;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                p_r = i;
                p_c = j;
            } else if (warehouse[i][j] == 2) {
                t_r = i;
                t_c = j;
            }
        }
    }

    if (t_c > p_c){
        for (i = p_c + 1; i <= t_c; i++){
            warehouse[p_r][i] = 3;
        }
    } else if (t_c < p_c){
        for (i = t_c + 1; i < p_c; i++) {
            warehouse[p_r][i] = 3;
        }
    }
    if (t_r > p_r){
        for (i = p_r + 1; i < t_r; i++){
            warehouse[i][t_c] = 3;
        }
    } else if (t_r < p_r){
        for (i = t_r + 1; i < p_r; i++) {
            warehouse[i][t_c] = 3;
        }
    }
}",0
ajin489,1695872289,2,"void PelletRoute(int warehouse[10][10]){

int i, j, p_r, p_c, t_r, t_c;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                p_r = i;
                p_c = j;
            } else if (warehouse[i][j] == 2) {
                t_r = i;
                t_c = j;
            }
        }
    }

    if (t_c > p_c){
        for (i = p_c + 1; i <= t_c; i++){
            warehouse[p_r][i] = 3;
        }
    } else if (t_c < p_c){
        for (i = t_c; i < p_c; i++) {
            warehouse[p_r][i] = 3;
        }
    }
    if (t_r > p_r){
        for (i = p_r + 1; i < t_r; i++){
            warehouse[i][t_c] = 3;
        }
    } else if (t_r < p_r){
        for (i = t_r + 1; i < p_r; i++) {
            warehouse[i][t_c] = 3;
        }
    }
}",0
ajin489,1695872473,3,"void PelletRoute(int warehouse[10][10]){

int i, j, p_r, p_c, t_r, t_c;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                p_r = i;
                p_c = j;
            } else if (warehouse[i][j] == 2) {
                t_r = i;
                t_c = j;
            }
        }
    }

    if (t_c > p_c){
        for (i = p_c; i <= t_c; i++){
            warehouse[p_r][i] = 3;
        }
    } else if (t_c < p_c){
        for (i = t_c; i <= p_c; i++) {
            warehouse[p_r][i] = 3;
        }
    }
    if (t_r > p_r){
        for (i = p_r + 1; i < t_r; i++){
            warehouse[i][t_c] = 3;
        }
    } else if (t_r < p_r){
        for (i = t_r + 1; i < p_r; i++) {
            warehouse[i][t_c] = 3;
        }
    }
    warehouse[p_r][p_c] = 1;
    warehouse[t_r][t_c] = 2;
}",1
akam677,1696243429,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the locations of the pellet (1) and destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally to align the pellet with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move vertically to reach the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}

int main() {
    int warehouse[10][10] = { 
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0, 0, 0}
    };

    PelletRoute(warehouse);

    int i, j;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0
akam677,1696243469,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the locations of the pellet (1) and destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally to align the pellet with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move vertically to reach the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}

int main(void) {
    int warehouse[10][10] = { 
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0, 0, 0}
    };

    PelletRoute(warehouse);

    int i, j;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0
aker238,1695629879,1,"void PelletRoute(int Warehouse[10][10]){
    int i,j,x,y;
    int One[2];
    int Two[2];
    for (i=0;i<(10);i++){
        for (j=0;j<(10);j++){
            if (Warehouse[i][j] == 1){
                One[0] = i;
                One[1] = j;
            }
            if (Warehouse[i][j] == 2){
                Two[0] = i;
                Two[1] = j;
            }
        }
    }
    
    if(One[1]-Two[1]>0){
        x = One[0];
        for (y=(One[1]-1);y>Two[1];y--){
           Warehouse[x][y] = 3;
       }
       Warehouse[x][y] = 3;
    }
    
    if(One[1]-Two[1]<0){
        x = One[0];
        for (y=(One[1]+1);y<Two[1];y++){
           Warehouse[x][y] = 3;
       }
       Warehouse[x][y] = 3;
    }
    
    if(One[0]-Two[0]>0){
        y = Two[1];
        for (x=(One[0]-1);x>Two[0];x--){
           Warehouse[x][y] = 3;
       }
    }
    
    if(One[0]-Two[0]<0){
        y = Two[1];
        for (x=(One[0]+1);x<Two[0];x++){
           Warehouse[x][y] = 3;
       }
    }
    Warehouse[Two[0]][Two[1]] = 2;
}",1
akod059,1696070705,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int starti, startj;
	int endi, endj;
	
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				starti = i;
				startj = j;
			}
			if (warehouse[i][j] == 2) {
				endi = i;
				endj = j;
			}
		}
	}

	if (startj > endj) {
		for (j = startj - 1; j >= endj; j--) {
			warehouse[starti][j] = 3;
		}
	}
	else {
		for (j = startj + 1; j <= endj; j++) {
			warehouse[starti][j] = 3;
		}
	}

	if (starti > endi) {
		for (i = starti; i > endi; i--) {
			warehouse[i][endj] = 3;
		}
	}
	else {
		for (i = starti; i < endi; i++) {
			warehouse[i][endj] = 3;
		}
	}

}",0
akod059,1696071146,2,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int starti, startj;
	int endi, endj;
	
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				starti = i;
				startj = j;
			}
			if (warehouse[i][j] == 2) {
				endi = i;
				endj = j;
			}
		}
	}

	if (startj > endj) {
		for (j = startj - 1; j > endj; j--) {
			warehouse[starti][j] = 3;
		}
	}
	else {
		for (j = startj + 1; j < endj; j++) {
			warehouse[starti][j] = 3;
		}
	}

	if (starti > endi) {
		for (i = starti; i > endi; i--) {
			warehouse[i][endj] = 3;
		}
	}
	else {
		for (i = starti; i < endi; i++) {
			warehouse[i][endj] = 3;
		}
	}

}",0
akod059,1696072074,3,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int starti, startj;
	int endi, endj;
	
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				starti = i;
				startj = j;
			}
			if (warehouse[i][j] == 2) {
				endi = i;
				endj = j;
			}
		}
	}

	if (startj > endj) {
		for (j = startj - 1; j > endj; j--) {
			warehouse[starti][j] = 3;
		}
	}
	else {
		for (j = startj + 1; j < endj; j++) {
			warehouse[starti][j] = 3;
		}
	}

	if (startj = endj) {
		if (starti > endi) {
			for (i = starti - 1; i > endi; i--) {
				warehouse[i][endj] = 3;
			}
		}
		else {
			for (i = starti + 1; i < endi; i++) {
				warehouse[i][endj] = 3;
			}
		}
	}
	else {
		if (starti > endi) {
			for (i = starti; i > endi; i--) {
				warehouse[i][endj] = 3;
			}
		}
		else {
			for (i = starti; i < endi; i++) {
				warehouse[i][endj] = 3;
			}
		}
	}

}",0
akod059,1696072164,4,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int starti, startj;
	int endi, endj;
	
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				starti = i;
				startj = j;
			}
			if (warehouse[i][j] == 2) {
				endi = i;
				endj = j;
			}
		}
	}

	if (startj > endj) {
		for (j = startj - 1; j > endj; j--) {
			warehouse[starti][j] = 3;
		}
	}
	else {
		for (j = startj + 1; j < endj; j++) {
			warehouse[starti][j] = 3;
		}
	}

	if (startj == endj) {
		if (starti > endi) {
			for (i = starti - 1; i > endi; i--) {
				warehouse[i][endj] = 3;
			}
		}
		else {
			for (i = starti + 1; i < endi; i++) {
				warehouse[i][endj] = 3;
			}
		}
	}
	else {
		if (starti > endi) {
			for (i = starti; i > endi; i--) {
				warehouse[i][endj] = 3;
			}
		}
		else {
			for (i = starti; i < endi; i++) {
				warehouse[i][endj] = 3;
			}
		}
	}

}",1
alum086,1696196857,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;
    
    // Find the pellet (1) and destination (2) coordinates
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    // Move horizontally (left or right) to line up with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route as 3
    }
    
    // Move vertically (up or down) to reach the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route as 3
    }
}

int main() {
    int warehouse[10][10] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    };
    
    // Set the initial positions of the pellet and destination
    warehouse[0][0] = 1; // Pellet
    warehouse[9][9] = 2; // Destination
    
    // Call the PelletRoute function to calculate the route
    PelletRoute(warehouse);
    
    // Print the warehouse with the route
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }
    
    return 0;
}
",0
amal783,1695865460,1,"void Find(int warehouse[10][10], int box, int* rowPos, int* colPos)
{
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == box) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10]) {
	int startrow, startcol, endrow, endcol;
	Find(warehouse, 1, &startrow, &startcol);
	Find(warehouse, 2, &endrow, &endcol);

	while (startcol != endcol) {
		startcol++;
		warehouse[startrow][startcol] = 3;
	}

	while (startrow != endrow) {
		startrow++;
		warehouse[startrow][startcol] = 3;
	}

	warehouse[startrow][startcol] = 2;
}",0
amal783,1695865612,2,"void Find(int warehouse[10][10], int box, int* rowPos, int* colPos)
{
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == box) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10]) {
	int startrow, startcol, endrow, endcol;
	Find(warehouse, 1, &startrow, &startcol);
	Find(warehouse, 2, &endrow, &endcol);

	while (startcol != endcol) {
		if (startcol < endcol) {
			startcol++;
		}
		else if (startcol > endcol) {
			startcol--;
		}
		warehouse[startrow][startcol] = 3;
	}

	while (startrow != endrow) {
		if (startrow < endrow) {
			startrow++;
		}
		else if (startrow > endrow) {
			startrow--;
		}
		warehouse[startrow][startcol] = 3;
	}

	warehouse[startrow][startcol] = 2;
}",1
amar516,1695702675,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehourse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (1 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;
if (startcol < endcol){
	for (i = startcol + 1; i <= endcol; i++){
		warehouse[startrow][i] = 3;
		}
	}
if (startcol > endcol){
	for (i = startcol - 1; i >= endcol; i--){
		warehouse[startrow][i] = 3;
		}
	}
if (startrow < endrow){
	for (j = startrow + 1; j <= endrow; j++){
		warehouse[startrow][j] = 3;
		}
	}
if (startrow > endrow){
	for (j = startrow - 1; j >= endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
return;
}",0
amar516,1695702713,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (1 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;
if (startcol < endcol){
	for (i = startcol + 1; i <= endcol; i++){
		warehouse[startrow][i] = 3;
		}
	}
if (startcol > endcol){
	for (i = startcol - 1; i >= endcol; i--){
		warehouse[startrow][i] = 3;
		}
	}
if (startrow < endrow){
	for (j = startrow + 1; j <= endrow; j++){
		warehouse[startrow][j] = 3;
		}
	}
if (startrow > endrow){
	for (j = startrow - 1; j >= endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
return;
}",0
amar516,1695703008,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (2 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;
if (startcol < endcol){
	for (i = startcol + 1; i <= endcol; i++){
		warehouse[startrow][i] = 3;
		}
	}
if (startcol > endcol){
	for (i = startcol - 1; i >= endcol; i--){
		warehouse[startrow][i] = 3;
		}
	}
if (startrow < endrow){
	for (j = startrow + 1; j <= endrow; j++){
		warehouse[startrow][j] = 3;
		}
	}
if (startrow > endrow){
	for (j = startrow - 1; j >= endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
}",0
amar516,1695703187,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (2 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;
if (startcol < endcol){
	for (i = startcol + 1; i <= endcol; i++){
		warehouse[startrow][i] = 3;
		}
	}
else if (startcol > endcol){
	for (i = startcol - 1; i >= endcol; i--){
		warehouse[startrow][i] = 3;
		}
	}
else if (startrow < endrow){
	for (j = startrow + 1; j <= endrow; j++){
		warehouse[startrow][j] = 3;
		}
	}
else if (startrow > endrow){
	for (j = startrow - 1; j >= endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
}",0
amar516,1695703416,5,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (2 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;
if (startcol < endcol){
	for (i = startcol + 1; i < endcol; i++){
		warehouse[startrow][i] = 3;
		}
	}
else if (startcol > endcol){
	for (i = startcol - 1; i > endcol; i--){
		warehouse[startrow][i] = 3;
		}
	}
else if (startrow < endrow){
	for (j = startrow + 1; j < endrow; j++){
		warehouse[j][endcol] = 3;
		}
	}
else if (startrow > endrow){
	for (j = startrow - 1; j > endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
}",0
amar516,1695703717,6,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (2 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;

if (startrow == endcol){
	if (startcol < endcol){
		for (i = startcol + 1; i < endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol > endcol){
		for (i = startcol - 1; i > endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow ! endcol){
	if (startcol <= endcol){
		for (i = startcol + 1; i < endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol >= endcol){
		for (i = startcol - 1; i > endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow < endrow){
	for (j = startrow + 1; j < endrow; j++){
		warehouse[j][endcol] = 3;
		}
	}
else if (startrow > endrow){
	for (j = startrow - 1; j > endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
}",0
amar516,1695703792,7,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (2 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;

if (startrow == endcol){
	if (startcol < endcol){
		for (i = startcol + 1; i < endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol > endcol){
		for (i = startcol - 1; i > endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow != endcol){
	if (startcol <= endcol){
		for (i = startcol + 1; i < endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol >= endcol){
		for (i = startcol - 1; i > endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow < endrow){
	for (j = startrow + 1; j < endrow; j++){
		warehouse[j][endcol] = 3;
		}
	}
else if (startrow > endrow){
	for (j = startrow - 1; j > endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
}",0
amar516,1695703987,8,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (2 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;

if (startrow == endrow){
	if (startcol < endcol){
		for (i = startcol + 1; i < endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol > endcol){
		for (i = startcol - 1; i > endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow != endrow){
	if (startcol <= endcol){
		for (i = startcol + 1; i < endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol >= endcol){
		for (i = startcol - 1; i > endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow < endrow){
	for (j = startrow + 1; j < endrow; j++){
		warehouse[j][endcol] = 3;
		}
	}
else if (startrow > endrow){
	for (j = startrow - 1; j > endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
}",0
amar516,1695704055,9,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (2 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;

if (startrow == endrow){
	if (startcol < endcol){
		for (i = startcol + 1; i < endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol > endcol){
		for (i = startcol - 1; i > endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow != endrow){
	if (startcol < endcol){
		for (i = startcol + 1; i <= endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol > endcol){
		for (i = startcol - 1; i => endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow < endrow){
	for (j = startrow + 1; j < endrow; j++){
		warehouse[j][endcol] = 3;
		}
	}
else if (startrow > endrow){
	for (j = startrow - 1; j > endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
}",0
amar516,1695704104,10,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int x;
int y;
int startrow = 0;
int startcol = 0;

for (x = 0; x < 10; x++){
	for (y = 0; y < 10; y++){
		if (1 == warehouse[x][y]){
			startrow = x;
			startcol = y;
			}
		}
	}
int z;
int v;
int endrow = 0;
int endcol = 0;

for (z = 0; z < 10; z++){
	for (v = 0; v < 10; v++){
		if (2 == warehouse[z][v]){
			endrow = z;
			endcol = v;
			}
		}
	}
int i;
int j;

if (startrow == endrow){
	if (startcol < endcol){
		for (i = startcol + 1; i < endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol > endcol){
		for (i = startcol - 1; i > endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow != endrow){
	if (startcol < endcol){
		for (i = startcol + 1; i <= endcol; i++){
			warehouse[startrow][i] = 3;
			}
		}
	else if (startcol > endcol){
		for (i = startcol - 1; i >= endcol; i--){
			warehouse[startrow][i] = 3;
			}
		}
	}

if (startrow < endrow){
	for (j = startrow + 1; j < endrow; j++){
		warehouse[j][endcol] = 3;
		}
	}
else if (startrow > endrow){
	for (j = startrow - 1; j > endrow; j--){
		warehouse[j][endcol] = 3;
		}
	}
}",1
amat407,1695901061,1,"void PelletRoute(int warehouse[10][10])
{
  int row1=0;
  int row2=0;
  int col1=0;
  int col2=0;
  for (int i=0; i<10;i++) {
      for (int j=0; j<10; j++) {
          if (warehouse[i][j]==1) {
              row1=i;
              col1=j;
          } else if (warehouse[i][j]==2) {
                    row2=i;
                    col2=j;        
          }
      }  
  }

  int rowdiff=row1-row2;
  int coldiff=col1-col2;
  int i;
  int j;
    
 if ((coldiff<=0)&&(rowdiff>0)) {
    for (i=1; i<=coldiff*-1; i++) {
        warehouse[row1][col1+i]=3;
    }
    for (j=1; j<rowdiff; j++) {
        warehouse[row1-j][col2]=3;
    }
 } else if ((coldiff>=0)&&(rowdiff<0)) {
    for (i=1; i<=coldiff; i++) {
        warehouse[row1][col1-i]=3;
    }
    for (j=1; j<rowdiff*-1; j++) {
        warehouse[row1+j][col2]=3;
    }
} else if ((coldiff<=0)&&(rowdiff<0)) {
    for (i=1; i<=coldiff*-1; i++) {
        warehouse[row1][col1+i]=3;
    }
    for (j=1; j<rowdiff*-1; j++) {
        warehouse[row1+j][col2]=3;
    }
} else if ((coldiff>=0)&&(rowdiff>0)) {
    for (i=1; i<=coldiff; i++) {
        warehouse[row1][col1-i]=3;
    }
    for (j=1; j<rowdiff; j++) {
        warehouse[row1-j][col2]=3;
    }
} else if ((coldiff>0)&&(rowdiff>=0)) {
    for (i=1; i<coldiff; i++) {
        warehouse[row1][col1-i]=3;
    }
    for (j=1; j<rowdiff; j++) {
        warehouse[row1-j][col2]=3;
    }
} else if ((coldiff<0)&&(rowdiff<=0)) {
    for (i=1; i<coldiff*-1; i++) {
        warehouse[row1][col1+i]=3;
    }
    for (j=1; j<rowdiff*-1; j++) {
        warehouse[row1+j][col2]=3;
    }
 } else if ((coldiff>0)&&(rowdiff<=0)) {
    for (i=1; i<coldiff; i++) {
        warehouse[row1][col1-i]=3;
    }
    for (j=1; j<rowdiff*-1; j++) {
        warehouse[row1+j][col2]=3;
    }
 } else if ((coldiff<0)&&(rowdiff>=0)) {
    for (i=1; i<=coldiff*-1; i++) {
        warehouse[row1][col1+i]=3;
    }
    for (j=1; j<rowdiff; j++) {
        warehouse[row1-j][col2]=3;
    }
}

}",1
amhk647,1695702754,1,"void PelletRoute(int warehouse[10][10]) {
	int startRow = 0; // starting row position
	int startCol = 0; // starting column position
	int endRow = 0; // ending row position
	int endCol = 0; // ending column position

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	// fill in elements horizontally
	for (int j = startCol + 1; j <= endCol; j++) {
		warehouse[startRow][j] = 3;
	}
	// fill in elements vertically
	for (int i = startRow + 1; i < endRow; i++) {
		warehouse[i][endCol] = 3;
	}
}",0
amhk647,1695705017,2,"void PelletRoute(int warehouse[10][10]) {
	int startRow = 0; // starting row position
	int startCol = 0; // starting column position
	int endRow = 0; // ending row position
	int endCol = 0; // ending column position

	for (int i = 0; i < 10; i++) { // go through rows
		for (int j = 0; j < 10; j++) { // go through columns
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	if (startCol < endCol) {
		for (int j = startCol + 1; j < endCol; j++) { // fill in elements horizontally right
			warehouse[startRow][j] = 3;
		}
	}
	else {
		for (int j = startCol - 1; j > endCol; j--) { // fill in elements horizontally left
			warehouse[startRow][j] = 3;
		}
	}

	if (startRow < endRow) {
		for (int i = startRow + 1; i < endRow; i++) { // fill in elements vertically down
			warehouse[i][endCol] = 3;
		}
	}
	else {
		for (int i = startRow - 1; i > endRow; i--) { // fill in elements vertically up
			warehouse[i][endCol] = 3;
		}
	}

	if (startRow != endRow && startCol != endCol) {
		warehouse[startRow][endCol] = 3;
	}
}",1
amok249,1695627253,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j, rows1, cols1, rows2, cols2;
    
    for (i = 0; i < 10;i++) {
        for (j = 0; j < 10;j++){
            if (warehouse[i][j] == 1) {
                rows1 = i;
                cols1 = j;
            } else if (warehouse[i][j] == 2) {
                rows2 = i;
                cols2 = j;
            }
        }
    }
    
    int x, y;
    for (y = cols1+1; y < cols2+1;y++) {
        warehouse[rows1][y] = 3;
        }
    for (x = rows1+1; x < rows2; x++){
        warehouse[x][cols2] = 3;
    }
}

",0
amok249,1695629597,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j, rows1, cols1, rows2, cols2;
    
    for (i = 0; i < 10;i++) {
        for (j = 0; j < 10;j++){
            if (warehouse[i][j] == 1) {
                rows1 = i;
                cols1 = j;
            } else if (warehouse[i][j] == 2) {
                rows2 = i;
                cols2 = j;
            }
        }
    }
    
   int rowsdif, colsdif, x, y;
   rowsdif = rows2-rows1;
   colsdif = cols2-cols1;
    printf(""%d,%d\n"", rowsdif,colsdif);
    
    if (colsdif < 0) {
        for (y = cols1-1; y > cols2; y--) {
            warehouse[rows1][y] = 3;
        } 
    }
    else if (colsdif > 0) {
        for (y = cols1+1; y < cols2; y++) {
            warehouse[rows1][y] = 3;
        } 
    }
    
    
    
    if (colsdif == 0 && rowsdif > 0) {
        for (x = rows1+1;x < rows2;x++) {
            warehouse[x][cols2] = 3;
        }
    } 
    else if (colsdif == 0 && rowsdif < 0) {
        for (x = rows1-1;x > rows2;x--) {
            warehouse[x][cols2] = 3;
        }
    } 
    else if (rowsdif < 0) {
        for (x = rows1; x > rows2; x--){
            warehouse[x][cols2] = 3;
        }
    }    
    else if (rowsdif > 0) {
        for (x = rows1;x < rows2;x++) {
            warehouse[x][cols2] = 3;
        }
    }
  
    
}

",0
amok249,1695629645,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j, rows1, cols1, rows2, cols2;
    
    for (i = 0; i < 10;i++) {
        for (j = 0; j < 10;j++){
            if (warehouse[i][j] == 1) {
                rows1 = i;
                cols1 = j;
            } else if (warehouse[i][j] == 2) {
                rows2 = i;
                cols2 = j;
            }
        }
    }
    
   int rowsdif, colsdif, x, y;
   rowsdif = rows2-rows1;
   colsdif = cols2-cols1;
    
    if (colsdif < 0) {
        for (y = cols1-1; y > cols2; y--) {
            warehouse[rows1][y] = 3;
        } 
    }
    else if (colsdif > 0) {
        for (y = cols1+1; y < cols2; y++) {
            warehouse[rows1][y] = 3;
        } 
    }
    
    
    
    if (colsdif == 0 && rowsdif > 0) {
        for (x = rows1+1;x < rows2;x++) {
            warehouse[x][cols2] = 3;
        }
    } 
    else if (colsdif == 0 && rowsdif < 0) {
        for (x = rows1-1;x > rows2;x--) {
            warehouse[x][cols2] = 3;
        }
    } 
    else if (rowsdif < 0) {
        for (x = rows1; x > rows2; x--){
            warehouse[x][cols2] = 3;
        }
    }    
    else if (rowsdif > 0) {
        for (x = rows1;x < rows2;x++) {
            warehouse[x][cols2] = 3;
        }
    }
  
    
}


",1
apan786,1696227830,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pellet_row, pellet_col, destination_row, destination_col;

    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pellet_row = row;
                pellet_col = col;
            } else if (warehouse[row][col] == 2) {
                destination_row = row;
                destination_col = col;
            }
        }
    }

    while (pellet_col != destination_col) {
        if (pellet_col < destination_col) {
            pellet_col++;
        } else {
            pellet_col--;
        }
        warehouse[pellet_row][pellet_col] = 3;
    }

    while (pellet_row != destination_row) {
        if (pellet_row < destination_row) {
            pellet_row++;
        } else {
            pellet_row--;
        }
        warehouse[pellet_row][pellet_col] = 3;
    }
}",0
apan786,1696234444,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pellet_row, pellet_col, destination_row, destination_col;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                destination_row = i;
                destination_col = j;
            }
        }
    }

    while (pellet_col != destination_col) {
        if (pellet_col < destination_col) {
            pellet_col++;
        } else {
            pellet_col--;
        }
        warehouse[pellet_row][pellet_col] = 3;
    }

    while (pellet_row != destination_row) {
        if (pellet_row < destination_row) {
            pellet_row++;
        } else {
            pellet_row--;
        }
        warehouse[pellet_row][pellet_col] = 3;
    }
    warehouse[pellet_row][pellet_col] = 2;
}
",1
apat824,1695974771,1,"void PelletRoute(int warehouse[10][10]) {
    int a, b; 
    int c, d; 
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                a = i;
                b = j;
            } else if (warehouse[i][j] == 2) {
                c = i;
                d = j;
            }
        }
    }

    int rowDiff = a - c;
    int colDiff = b - d;

    while (b != d) {
        if (colDiff < 0) {
            b++;
        } else {
            b--;
        }
        if(warehouse[a][b] != 2){
             warehouse[a][b] = 3;
        }
    }

    while (a != c) {
        if (rowDiff < 0) {
            a++;
        } else {
            a--;
        }
        if(warehouse[a][b] != 2){
            warehouse[a][d] = 3;
        }
    }
}",1
apur448,1696122231,1,"#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}


void PelletRoute(int warehouse[10][10])
{
    int col1, col2, row1, row2, i, j;
    FindTile(warehouse, 1, &row1, &col1);
    FindTile(warehouse, 2, &row2, &col2);

    if (col1 < col2) {
        for (j = col1 + 1; j<=col2; j++) {
            i = row1;
            warehouse[i][j] = 3;
    }
    }
    else if (col1 > col2) {
        for (j = col1 - 1; j>=col2; j--) {
            i = row1;
            warehouse[i][j] = 3;
    }
    }

     if (row1 < row2) {
        for (i = row1 + 1; i<row2; i++) {
            j = col2;
            warehouse[i][j] = 3;
    }
    }
    else if (row1 > row2) {
        for (i = row1 - 1; i>row2; i--) {
            j = col2;
            warehouse[i][j] = 3;
    }
    }  
}",0
apur448,1696123074,2,"#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}


void PelletRoute(int warehouse[10][10])
{
    int col1, col2, row1, row2, i, j, limit;
    FindTile(warehouse, 1, &row1, &col1);
    FindTile(warehouse, 2, &row2, &col2);

    limit = col2;
    if (col1 < col2) {
        if (row1 == row2) {
        limit = row1 - 1;
        } 
        for (j = col1 + 1; j<=col2; j++) {
            i = row1;
            warehouse[i][j] = 3;
    }
    }

    else if (col1 > col2) {
        if (row1 == row2) {
        limit = row1 + 1;
        } 
        for (j = col1 - 1; j>=limit; j--) {
            i = row1;
            warehouse[i][j] = 3;
    }
    }

    limit = row2;
     if (row1 < row2) {
        if (col1 == col2) {
        limit = col1 + 1;
        } 
        for (i = row1 + 1; i<limit; i++) {
            j = col2;
            warehouse[i][j] = 3;
    }
    }
    else if (row1 > row2) {
        if (col1 == col2) {
        limit = col1 + 1;
        } 
        for (i = row1 - 1; i>limit; i--) {
            j = col2;
            warehouse[i][j] = 3;
    }
    }  
}",0
apur448,1696125564,3,"#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}


void PelletRoute(int warehouse[10][10])
{
    int col1, col2, row1, row2, i, j, limit;
    FindTile(warehouse, 1, &row1, &col1);
    FindTile(warehouse, 2, &row2, &col2);

    limit = col2;
    if (col1 < col2) {
        if (row1 == row2) {
        limit = col2 - 1;
        } 
        for (j = col1 + 1; j<=limit; j++) {
            i = row1;
            warehouse[i][j] = 3;
    }
    }

    else if (col1 > col2) {
        if (row1 == row2) {
        limit = col2 + 1;
        } 
        for (j = col1 - 1; j>=limit; j--) {
            i = row1;
            warehouse[i][j] = 3;
    }
    }

    limit = row2;
     if (row1 < row2) {
        for (i = row1 + 1; i<limit; i++) {
            j = col2;
            warehouse[i][j] = 3;
    }
    }
    else if (row1 > row2) {
        for (i = row1 - 1; i>limit; i--) {
            j = col2;
            warehouse[i][j] = 3;
    }
    }  
}",1
arus530,1695628675,1,"void PelletRoute(int warehouse[10][10])
{
    int endRow, endCol, startRow, startCol;

    for (int i = 0; i < 10; i++){
        for (int j = 0; j< 10; j++){
            if (warehouse[i][j] == 1){
                startRow = i;
                startCol = j;
            }           
        }
    }
    for (int i = 0; i < 10; i++){
        for (int j = 0; j< 10; j++){
            if (warehouse[i][j] == 2){
                endRow = i;
                endCol = j;
            }           
        }
    }
    
    if (startCol < endCol){
        for (int i = startCol+1; i <= endCol; i++){
            warehouse[startRow][i] = 3;
        }
    }

    if (startCol > endCol){
        for (int i = startCol-1; i >= endCol; i--){
            if (warehouse[startRow][i] != 2){
                warehouse[startRow][i] = 3;
            }
        }
    }

        if (startRow < endRow){
        for (int i = startRow+1; i < endRow; i++){
            warehouse[i][endCol] = 3;
        }
    }

     if (startRow > endRow){
        for (int i = startRow-1; i > endRow; i--){
            if (warehouse[i][endCol] != 2){
                warehouse[i][endCol] = 3;
            }
        }
    }
}",1
aryu462,1696243063,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{ 
    int pelletRow, pelletCol, destinationRow, destinationCol; 
    
    for (int row = 0; row < 10; row++) { 
        for (int col = 0; col < 10; col++) { 
            if (warehouse[row][col] == 1) {
                pelletRow = row; 
                pelletCol = col; 
            } else if (warehouse[row][col] == 2) { 
                destinationRow = row; 
                destinationCol = col; 
            }
        }
    }
    
    while (pelletCol ! destinationCol) { 
        if(pelletCol < destinationCol) {
            pelletCol++; 
        } else {
            pelletCol--; 
        }
        if (warehouse[pelletRow][palletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3; 
        }
    }
    while (pelletRow != destinationRow) { 
        if (pelletRow < destinationRow) { 
            pelletRow++; 
        } else {
            pelletRow--; 
        } 
        if (warehouse[pelletRow][pelletCol] != 2) { 
            warehouse[pelletRow][pelletCol] = 3; 
        }
    }",0
aryu462,1696243175,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{ 
    int pelletRow, pelletCol, destinationRow, destinationCol; 
    
    for (int row = 0; row < 10; row++) { 
        for (int col = 0; col < 10; col++) { 
            if (warehouse[row][col] == 1) {
                pelletRow = row; 
                pelletCol = col; 
            } else if (warehouse[row][col] == 2) { 
                destinationRow = row; 
                destinationCol = col; 
            }
        }
    }
    
    while (pelletCol != destinationCol) { 
        if(pelletCol < destinationCol) {
            pelletCol++; 
        } else {
            pelletCol--; 
        }
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3; 
        }
    }
    while (pelletRow != destinationRow) { 
        if (pelletRow < destinationRow) { 
            pelletRow++; 
        } else {
            pelletRow--; 
        } 
        if (warehouse[pelletRow][pelletCol] != 2) { 
            warehouse[pelletRow][pelletCol] = 3; 
        }
    }",0
aryu462,1696243582,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) { 
    int pelletRow, pelletCol, destinationRow, destinationCol; 
    
    for (int row = 0; row < 10; row++) { 
        for (int col = 0; col < 10; col++) { 
            if (warehouse[row][col] == 1) {
                pelletRow = row; 
                pelletCol = col; 
            } else if (warehouse[row][col] == 2) { 
                destinationRow = row; 
                destinationCol = col; 
            }
        }
    }
    
    while (pelletCol != destinationCol) { 
        if (pelletCol < destinationCol) {
            pelletCol++; 
        } else {
            pelletCol--; 
        }
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3; 
        }
    }
    while (pelletRow != destinationRow) { 
        if (pelletRow < destinationRow) { 
            pelletRow++; 
        } else {
            pelletRow--; 
        } 
        if (warehouse[pelletRow][pelletCol] != 2) { 
            warehouse[pelletRow][pelletCol] = 3; 
        }
    }",0
asaa285,1696234948,1,"void PelletRoute(int warehouse[10][10]){
    int row, col, x, y;
    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (warehouse[i][j] == 1)
            {
                x = i;
                y = j;
            }
            if (warehouse[i][j] == 2)
            {
                row = i;
                col = j;
            }
        }
    }
    
    if (y<col)
    {
        for (int i=y+1;i<col;i++)
        {
            warehouse[x][i] = 3;
        }
    }
    else
    {
       for (int i=y-1;i>col;i=i-1)
        {
            warehouse[x][i] = 3;
        }
    }
    if (x>row)
    {
        for (int i=x;i>row;i=i-1)
        {
            warehouse[i][col] = 3;
        }
    }
    if (x<row)
    {
        for (int i=x;i<row;i++)
        {
            warehouse[i][col] = 3;
        }
    }
}
",0
asaa285,1696234989,2,"void PelletRoute(int warehouse[10][10]){
    int row, col, x, y;
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                x = i;
                y = j;
            }
            if (warehouse[i][j] == 2)
            {
                row = i;
                col = j;
            }
        }
    }
    
    if (y<col)
    {
        for (int i=y+1;i<col;i++)
        {
            warehouse[x][i] = 3;
        }
    }
    else
    {
       for (int i=y-1;i>col;i=i-1)
        {
            warehouse[x][i] = 3;
        }
    }
    if (x>row)
    {
        for (int i=x;i>row;i=i-1)
        {
            warehouse[i][col] = 3;
        }
    }
    if (x<row)
    {
        for (int i=x;i<row;i++)
        {
            warehouse[i][col] = 3;
        }
    }
}
",0
asaa285,1696235144,3,"void PelletRoute(int warehouse[10][10]){
    int row, col, x, y;
    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (warehouse[i][j] == 1)
            {
                x = i;
                y = j;
            }
            if (warehouse[i][j] == 2)
            {
                row = i;
                col = j;
            }
        }
    }
    
    if (y<col)
    {
        for (int i=y+1;i<col;i++)
        {
            warehouse[x][i] = 3;
        }
    }
    else
    {
       for (int i=y-1;i>col;i=i-1)
        {
            warehouse[x][i] = 3;
        }
    }
    if (x>row)
    {
        for (int i=x;i>row;i=i-1)
        {
            warehouse[i][col] = 3;
        }
    }
    if (x<row)
    {
        for (int i=x;i<row;i++)
        {
            warehouse[i][col] = 3;
        }
    }
    warehouse[x][y] = 1;
    warehouse[row][col] = 2;
}
",0
asaa285,1696235160,4,"void PelletRoute(int warehouse[10][10]){
    int row, col, x, y;
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                x = i;
                y = j;
            }
            if (warehouse[i][j] == 2)
            {
                row = i;
                col = j;
            }
        }
    }
    
    if (y<col)
    {
        for (int i=y+1;i<col;i++)
        {
            warehouse[x][i] = 3;
        }
    }
    else
    {
       for (int i=y-1;i>col;i=i-1)
        {
            warehouse[x][i] = 3;
        }
    }
    if (x>row)
    {
        for (int i=x;i>row;i=i-1)
        {
            warehouse[i][col] = 3;
        }
    }
    if (x<row)
    {
        for (int i=x;i<row;i++)
        {
            warehouse[i][col] = 3;
        }
    }
    warehouse[x][y] = 1;
    warehouse[row][col] = 2;
}
",1
asim819,1696216592,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdbool.h>

void PelletRoute(int warehouse[10][10]) {

	int i, j, posrow, poscol, pelletrow, pelletcol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			
			if (warehouse[i][j] == 1) {
				poscol = j;
				posrow = i;

			}

			if (warehouse[i][j] == 2) {
				pelletrow = i;
				pelletcol = j;
			}
		}
	}

	bool colreached = false;

	while (colreached == false) {

		if (pelletcol > poscol) {
			poscol++;
			warehouse[posrow][poscol] = 3;
			continue;

		}
		else if (pelletcol < poscol) {
			poscol--;
			warehouse[posrow][poscol] = 3;
			continue;

		}

		if (poscol == pelletcol) {
			colreached = true;
		}

	}

	bool rowreached = false;

	while (rowreached == false) {

		if (pelletrow > posrow) {
			
			warehouse[posrow][poscol] = 3;
			posrow++;
			continue;

		}
		else if (pelletrow < posrow) {
			
			warehouse[posrow][poscol] = 3;
			posrow--;
			continue;

		}

		if (posrow == pelletrow) {
			rowreached = true;
		}

	}


}",0
asim819,1696216813,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdbool.h>

void PelletRoute(int warehouse[10][10]) {

	int i, j, posrow, poscol, pelletrow, pelletcol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			
			if (warehouse[i][j] == 1) {
				poscol = j;
				posrow = i;

			}

			if (warehouse[i][j] == 2) {
				pelletrow = i;
				pelletcol = j;
			}
		}
	}

	bool colreached = false;
	int starting = 0;

	while (colreached == false) {

		if (pelletcol > poscol) {
			
			if (starting == 0) {
				poscol++;
				warehouse[posrow][poscol] = 3;
				starting = 1;
				continue;
			}

			warehouse[posrow][poscol] = 3;
			poscol++;
			continue;

		}
		else if (pelletcol < poscol) {

			if (starting == 0) {
				poscol--;
				warehouse[posrow][poscol] = 3;
				starting = 1;
				continue;

			}

			warehouse[posrow][poscol] = 3;
			poscol--;
			continue;

		}

		if (poscol == pelletcol) {
			colreached = true;
		}

	}

	bool rowreached = false;

	while (rowreached == false) {

		if (pelletrow > posrow) {
			
			warehouse[posrow][poscol] = 3;
			posrow++;
			continue;

		}
		else if (pelletrow < posrow) {
			
			warehouse[posrow][poscol] = 3;
			posrow--;
			continue;

		}

		if (posrow == pelletrow) {
			rowreached = true;
		}

	}


}",0
aski294,1695851915,1,"void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
}

void PelletRoute(int warehouse[][NUM_COLS])
{
	int startRows, startCols;
	int endRows, endCols;

	// find start
	FindPos(warehouse, 1, &startRows, &startCols);
	// find end
	FindPos(warehouse, 2, &endRows, &endCols);

	int r, c;

	if (startCols > endCols == 1) {
		for (c = startCols - 1; c > endCols; c--) {
			warehouse[startRows][c] = 3;
		}
	}
	else {
		for (c = startCols + 1; c < endCols; c++) {
			warehouse[startRows][c] = 3;
		}
	}

	if (startRows > endRows == 1) {
		for (r = startRows; r > endRows; r--) {
			warehouse[r][c] = 3;
		}
	}
	else {
		for (r = startRows; r < endRows; r++) {
			warehouse[r][c] = 3;
		}
	}


}",0
aski294,1695851947,2,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
}

void PelletRoute(int warehouse[][NUM_COLS])
{
	int startRows, startCols;
	int endRows, endCols;

	// find start
	FindPos(warehouse, 1, &startRows, &startCols);
	// find end
	FindPos(warehouse, 2, &endRows, &endCols);

	int r, c;

	if (startCols > endCols == 1) {
		for (c = startCols - 1; c > endCols; c--) {
			warehouse[startRows][c] = 3;
		}
	}
	else {
		for (c = startCols + 1; c < endCols; c++) {
			warehouse[startRows][c] = 3;
		}
	}

	if (startRows > endRows == 1) {
		for (r = startRows; r > endRows; r--) {
			warehouse[r][c] = 3;
		}
	}
	else {
		for (r = startRows; r < endRows; r++) {
			warehouse[r][c] = 3;
		}
	}


}",0
aski294,1695851973,3,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
}

void PelletRoute(int warehouse[][NUM_COLS])
{
	int startRows, startCols;
	int endRows, endCols;

	// find start
	FindPos(warehouse, 1, &startRows, &startCols);
	// find end
	FindPos(warehouse, 2, &endRows, &endCols);

	int r, c;

	if ((startCols > endCols) == 1) {
		for (c = startCols - 1; c > endCols; c--) {
			warehouse[startRows][c] = 3;
		}
	}
	else {
		for (c = startCols + 1; c < endCols; c++) {
			warehouse[startRows][c] = 3;
		}
	}

	if ((startRows > endRows) == 1) {
		for (r = startRows; r > endRows; r--) {
			warehouse[r][c] = 3;
		}
	}
	else {
		for (r = startRows; r < endRows; r++) {
			warehouse[r][c] = 3;
		}
	}


}",0
aski294,1695852164,4,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
}

void PelletRoute(int warehouse[][NUM_COLS])
{
	int startRows, startCols;
	int endRows, endCols;

	// find start
	FindPos(warehouse, 1, &startRows, &startCols);
	// find end
	FindPos(warehouse, 2, &endRows, &endCols);

	int r, c, offset;
	if ((startCols - endCols) == 0) {
	offset = 0;
}

	if ((startCols > endCols) == 1) {
		for (c = startCols - 1; c > endCols; c--) {
			warehouse[startRows][c] = 3;
		}
	}
	else {
		for (c = startCols + 1; c < endCols; c++) {
			warehouse[startRows][c] = 3;
		}
	}

	if ((startRows > endRows) == 1) {
		for (r = startRows; r > endRows; r--) {
			warehouse[r][c] = 3;
		}
	}
	else {
		for (r = startRows; r < endRows; r++) {
			warehouse[r][c] = 3;
		}
	}


}",0
aski294,1695852180,5,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
}

void PelletRoute(int warehouse[][NUM_COLS])
{
	int startRows, startCols;
	int endRows, endCols;

	// find start
	FindPos(warehouse, 1, &startRows, &startCols);
	// find end
	FindPos(warehouse, 2, &endRows, &endCols);

	int r, c, offset = 1;
	if ((startCols - endCols) == 0) {
	offset = 0;
}

	if ((startCols > endCols) == 1) {
		for (c = startCols - 1; c > endCols; c--) {
			warehouse[startRows][c] = 3;
		}
	}
	else {
		for (c = startCols + 1; c < endCols; c++) {
			warehouse[startRows][c] = 3;
		}
	}

	if ((startRows > endRows) == 1) {
		for (r = startRows; r > endRows; r--) {
			warehouse[r][c] = 3;
		}
	}
	else {
		for (r = startRows; r < endRows; r++) {
			warehouse[r][c] = 3;
		}
	}


}",0
aski294,1695852362,6,"
#define NUM_ROWS 10
#define NUM_COLS 10

void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
}

void PelletRoute(int warehouse[][NUM_COLS])
{
	int startRows, startCols;
	int endRows, endCols;

	// find start
	FindPos(warehouse, 1, &startRows, &startCols);
	// find end
	FindPos(warehouse, 2, &endRows, &endCols);

	int r, c, offset = 1;

	if ((startCols - endCols) == 0) {
		offset = 0;
	}

	if ((startCols > endCols) == 1) {
		for (c = startCols - offset; c > endCols; c--) {
			warehouse[startRows][c] = 3;
		}
	}
	else {
		for (c = startCols + offset; c < endCols; c++) {
			warehouse[startRows][c] = 3;
		}
	}

	if ((startRows > endRows) == 1) {
		for (r = startRows; r > endRows; r--) {
			warehouse[r][c] = 3;
		}
	}
	else {
		for (r = startRows; r < endRows; r++) {
			warehouse[r][c] = 3;
		}
	}


}",0
aski294,1695879622,7,"
#define NUM_ROWS 10
#define NUM_COLS 10
  
void
FindPos (int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
  
for (int r = 0; r < NUM_ROWS; r++)
    {
      
for (int c = 0; c < NUM_COLS; c++)
	{
	  
if (board[r][c] == tile)
	    {
	      
*rowPos = r;
	      
*colPos = c;
	    
}
	
}
    
}

}


 
void
PelletRoute (int warehouse[][NUM_COLS]) 
{
  
int startRows, startCols;
  
int endRows, endCols;
  
 
    // find start
    FindPos (warehouse, 1, &startRows, &startCols);
  
    // find end
    FindPos (warehouse, 2, &endRows, &endCols);
  
 
int r, c, vertOffset = 0, offset = 1;
  
 
if ((startCols - endCols) == 0)
    {
      
offset = 0;
    
}
  
 
if ((startCols > endCols) == 1)
    {
      
for (c = startCols - offset; c > endCols; c--)
	{
	  
warehouse[startRows][c] = 3;
	
}
    
}
  
  else if (startCols > endCols)
    {
      
for (c = startCols + offset; c < endCols; c++)
	{
	  
warehouse[startRows][c] = 3;
	
}
    
}
  
  else
    {
      
for (c = startCols + offset; c < endCols; c++)
	{
	  
warehouse[startRows][c] = 3;
	
}
      
if (startCols == endCols)
	{
	  
if (startRows > endRows)
	    {
	      
vertOffset = -1;
	    
}
	  
	  else if (startRows < endRows)
	    {
	      
vertOffset = 1;
	    
}
	
}
    
}
  
 
if ((startRows > endRows))
    {
      
for (r = startRows + vertOffset; r > endRows; r--)
	{
	  
warehouse[r][c] = 3;
	
}
    
}
  
  else
    {
      
for (r = startRows + vertOffset; r < endRows; r++)
	{
	  
warehouse[r][c] = 3;
	
}
    
}

 
 
}",1
atay777,1696238046,1,"void PelletRoute(int array[10][10])
{
    int i=0,j=0;
    int initialrow, initialcolumn;
    int finalrow, finalcolumn;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++)    {
            if (array[i][j]==1)
            {
                initialrow=i;
                initialcolumn=j;
            }
            if (array[i][j]==2)
            {
                finalrow=i;
                finalcolumn=j;
            }
            
        }
        
        }
    
    if (finalcolumn>initialcolumn)
    {
        for (i = initialcolumn; i < finalcolumn; i++)
        {
            array[initialrow][i]=3;
        }
        
    }

    if (finalcolumn<initialcolumn)
    {
        for (i = finalcolumn; i < initialcolumn; i++)
        {
            array[initialrow][i]=3;
        }
        
    }  
    if (finalrow>initialrow)
    {
        for (i = initialrow; i < finalrow; i++)
        {
            array[i][finalcolumn]=3;
        }
        
    }
    if (finalrow<initialrow)
    {
        for (i = finalrow; i < initialrow; i++)
        {
            array[i][finalcolumn]=3;
        }
        
    }
    array[initialrow][initialcolumn]=1;
    array[finalrow][finalcolumn]=2;  
}  ",0
atay777,1696238232,2,"void PelletRoute(int array[10][10])
{
    int i=0,j=0;
    int initialrow, initialcolumn;
    int finalrow, finalcolumn;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++)    {
            if (array[i][j]==1)
            {
                initialrow=i;
                initialcolumn=j;
            }
            if (array[i][j]==2)
            {
                finalrow=i;
                finalcolumn=j;
            }
            
        }
        
        }
    
    if (finalcolumn>initialcolumn)
    {
        for (i = initialcolumn; i <= finalcolumn; i++)
        {
            array[initialrow][i]=3;
        }
        
    }

    if (finalcolumn<initialcolumn)
    {
        for (i = finalcolumn; i <= initialcolumn; i++)
        {
            array[initialrow][i]=3;
        }
        
    }  
    if (finalrow>initialrow)
    {
        for (i = initialrow; i <= finalrow; i++)
        {
            array[i][finalcolumn]=3;
        }
        
    }
    if (finalrow<initialrow)
    {
        for (i = finalrow; i <= initialrow; i++)
        {
            array[i][finalcolumn]=3;
        }
        
    }
    array[initialrow][initialcolumn]=1;
    array[finalrow][finalcolumn]=2;  
}  ",1
atee059,1695625366,1,"void PelletRoute(int warehouse[10][10]) {

    int i, j, k;
    int startrow, startcol;
    int endrow, endcol;
    int curCol, curRow;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {

            if (warehouse[i][j] == 1) {
                startrow = i;
                startcol = j;
            }
        }
    }

    //printf(""Starting point is row=%d col=%d\n"", startrow, startcol);

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {

            if (warehouse[i][j] == 2) {
                endrow = i;
                endcol = j;
            }
        }
    }

    //printf(""Ending point is row=%d col=%d\n"", endrow, endcol);

    if (endcol > startcol) {

        k = 1;
        curCol = startcol + k;

        while (curCol < endcol) {
            warehouse[startrow][startcol + k] = 3;
            k++;
            curCol++;
        }
    }
    else if (endcol < startcol) {

        k = 1;
        curCol = startcol - k;

        while (curCol > endcol) {
            warehouse[startrow][startcol - k] = 3;
            k++;
            curCol--;
        }
    }
    else {
        curCol = startcol;
    }

    if (startcol != endcol && startrow != endrow) {
        warehouse[startrow][curCol] = 3;
    }
    
    if (endrow > startrow) {

        k = 1;
        curRow = startrow + k;

        while (curRow < endrow) {
            warehouse[startrow + k][curCol] = 3;
            k++;
            curRow++;
        }
    }
    else if (endrow < startrow) {

        k = 1;
        curRow = startrow - k;

        while (curRow > endrow) {
            warehouse[startrow - k][curCol] = 3;
            k++;
            curRow--;
        }
    }
}",1
athu157,1695797096,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int starti, startj;
	int endi, endj;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				starti = i;
				startj = j;
			}
			else if (warehouse[i][j] == 2) {
				endi = i;
				endj = j;
			}
		}
	}

	for (j = startj + 1; j < endj; j++) {
		warehouse[starti][j] = 3;
	}
	for (i = starti; i < endi; i++) {
		warehouse[i][endj] = 3;
	}
}",0
athu157,1695797889,2,"
void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int starti, startj;
	int endi, endj;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				starti = i;
				startj = j;
			}
			else if (warehouse[i][j] == 2) {
				endi = i;
				endj = j;
			}
		}
	}

	for (j = startj + 1; j < endj; j++) {
		warehouse[starti][j] = 3;
	}
	for (j = startj - 1; j > endj; j--) {
		warehouse[starti][j] = 3;
	}
	for (i = starti; i < endi; i++) {
		warehouse[i][endj] = 3;
	}

	for (i = starti; i > endi; i--) {
			warehouse[i][endj] = 3;
	}
}",0
athu157,1695799815,3,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int starti, startj;
	int endi, endj;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				starti = i;
				startj = j;
			}
			else if (warehouse[i][j] == 2) {
				endi = i;
				endj = j;
			}
		}
	}
	if (startj < endj) {
		for (j = startj + 1; j <= endj; j++) {
			warehouse[starti][j] = 3;
		}
	}
	else {
		for (j = startj - 1; j >= endj; j--) {
			warehouse[starti][j] = 3;
		}
	}

	if (starti < endi) {
		for (i = starti + 1; i < endi; i++) {
			warehouse[i][endj] = 3;
		}
	}
	else {
		for (i = starti - 1; i > endi; i--) {
			warehouse[i][endj] = 3;
		}
	}
	if (starti == endi) {
		warehouse[endi][endj] = 2;
	}
}",1
awri757,1695714022,1,"void PelletRoute(int warehouse[10][10]) {
    int i, j, boxRow,boxCol, endRow,endCol;

    //locate the box and the destination
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                //retrive box index
                boxRow = i;
                boxCol = j;
            }
            else if (warehouse[i][j] == 2) {
                //retrieve end index
                endRow = i;
                endCol = j;
            }
        }
    }

    //move horozontally if needed

    //if moving left
    if (endCol - boxCol < 0) {
        for (i = boxCol - 1; i >= endCol; i--) {
            warehouse[boxRow][i] = 3;
        }
    }
    //if moving right
    else if (endCol - boxCol > 0) {
        for (i = boxCol + 1; i <= endCol; i++) {
            warehouse[boxRow][i] = 3;
        }
    }

    //move vertically if needed

    //if moving up
    if (endRow - boxRow < 0) {
        for (i = boxRow - 1; i >= endRow; i--) {
            warehouse[i][endCol] = 3;
        }
    }
    //if moving down
    else if (endRow - boxRow > 0) {
        for (i = boxRow + 1; i < endRow; i++) {
            warehouse[i][endCol] = 3;
        }
    }
    //if havent moved vertically
    else {
        warehouse[endRow][endCol] = 2;
    }
}",0
awri757,1695714114,2,"void PelletRoute(int warehouse[10][10]) {
    int i, j, boxRow,boxCol, endRow,endCol;

    //locate the box and the destination
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                //retrive box index
                boxRow = i;
                boxCol = j;
            }
            else if (warehouse[i][j] == 2) {
                //retrieve end index
                endRow = i;
                endCol = j;
            }
        }
    }

    //move horozontally if needed

    //if moving left
    if (endCol - boxCol < 0) {
        for (i = boxCol - 1; i >= endCol; i--) {
            warehouse[boxRow][i] = 3;
        }
    }
    //if moving right
    else if (endCol - boxCol > 0) {
        for (i = boxCol + 1; i <= endCol; i++) {
            warehouse[boxRow][i] = 3;
        }
    }

    //move vertically if needed

    //if moving up
    if (endRow - boxRow < 0) {
        for (i = boxRow - 1; i > endRow; i--) {
            warehouse[i][endCol] = 3;
        }
    }
    //if moving down
    else if (endRow - boxRow > 0) {
        for (i = boxRow + 1; i < endRow; i++) {
            warehouse[i][endCol] = 3;
        }
    }

    //reset destination
    warehouse[endRow][endCol] = 2;
}",1
ayan607,1696211719,1,"void PelletRoute(int warehouse[10][10])
{
    int workerRow, workerCol;
    int boxRow, boxCol;

    int i,j;
    for (i = 0; i < 10; i++){
        for ( j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                workerRow = i;
                workerCol = j;
            }else if (warehouse[i][j] == 2){
                boxRow = i;
                boxCol = j;
            }
        }
    }

    if (workerCol == boxCol){
        if(workerRow > boxRow){
            for (i = boxRow + 1; i < workerRow; i++){
                warehouse[i][workerCol] = 3;
            }
        }else if (workerRow < boxRow){
            for (i = workerRow + 1; i < boxRow; i++){
                warehouse[i][workerCol] = 3;
            }
        }
        return;
    }
    
    if (workerRow == boxRow){
        if(workerCol > boxCol){
            for (j = boxCol + 1; j < workerCol; j++){
                warehouse[workerRow][j] = 3;
            }
        }else if (workerCol < boxCol){
            for (j = workerCol + 1; j < boxCol; j ++){
                warehouse[workerRow][j] = 3;
            }
        }
        return;
    }
    
    
    int colPos = workerCol;
    while (colPos != boxCol){
        if (boxCol > colPos){
            int colStep = 1;
            colPos = colPos + colStep;
            warehouse[workerRow][colPos] = 3;
        }else if (boxCol < colPos){
            int colStep = -1;
            colPos = colPos + colStep;
            warehouse[workerRow][colPos] = 3;
        }
    }

    int rowPos = workerRow;
    while (rowPos != boxRow){
        if (boxRow > rowPos){
            int rowStep = 1;
            warehouse[rowPos][boxCol] = 3;
            rowPos = rowPos + rowStep;
        }else if (boxRow < rowPos){
            int rowStep = -1;
            warehouse[rowPos][boxCol] = 3;
            rowPos = rowPos + rowStep;
        }
    }
}",1
ayua214,1696228415,1,"#include <iostream>

void PelletRoute(int warehouse[10][10]) {
    // Find the positions of pellet (1) and destination (2)
    int pelletRow, pelletCol, destRow, destCol;
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally
    for (int j = pelletCol; j != destCol; j += (destCol - pelletCol) / abs(destCol - pelletCol)) {
        warehouse[pelletRow][j] = 3;
    }

    // Move vertically
    for (int i = pelletRow; i != destRow; i += (destRow - pelletRow) / abs(destRow - pelletRow)) {
        warehouse[i][destCol] = 3;
    }
}",0
ayua214,1696228432,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    // Find the positions of pellet (1) and destination (2)
    int pelletRow, pelletCol, destRow, destCol;
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally
    for (int j = pelletCol; j != destCol; j += (destCol - pelletCol) / abs(destCol - pelletCol)) {
        warehouse[pelletRow][j] = 3;
    }

    // Move vertically
    for (int i = pelletRow; i != destRow; i += (destRow - pelletRow) / abs(destRow - pelletRow)) {
        warehouse[i][destCol] = 3;
    }
}",0
ayua214,1696228476,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find pellet and destination positions
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally
    for (int j = pelletCol; j != destCol; j += (destCol - pelletCol) / abs(destCol - pelletCol)) {
        warehouse[pelletRow][j] = 3;
    }

    // Move vertically
    for (int i = pelletRow; i != destRow; i += (destRow - pelletRow) / abs(destRow - pelletRow)) {
        warehouse[i][destCol] = 3;
    }
}",0
ayua214,1696228538,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find pellet and destination positions
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally, marking only the empty spaces (0)
    for (int j = pelletCol; j != destCol; j += (destCol - pelletCol) / abs(destCol - pelletCol)) {
        if (warehouse[pelletRow][j] == 0)
            warehouse[pelletRow][j] = 3;
    }

    // Move vertically, marking only the empty spaces (0)
    for (int i = pelletRow; i != destRow; i += (destRow - pelletRow) / abs(destRow - pelletRow)) {
        if (warehouse[i][destCol] == 0)
            warehouse[i][destCol] = 3;
    }
}",1
bcar662,1696149630,1,"void PelletRoute(int warehouse[10][10])
{
	int pelRow;
	int pelCol;
	int desRow;
	int desCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelRow = i;
				pelCol = j;
			}
			else if (warehouse[i][j] == 2) {
				desRow = i;
				desCol = j;
			}
		}
	}

	if (pelCol < desCol) {
		for (int i = pelCol; i <= desCol; i++) {
			warehouse[pelRow][i] = 3;
		}

	}
	else if (pelCol > desCol) {
		for (int i = desCol; i <= pelCol; i++) {
			warehouse[pelRow][i] = 3;
		}
	}
	if (pelRow < desRow) {
		for (int i = pelRow; i <= desRow; i++) {
			warehouse[i][desCol] = 3;
		}

	}
	else if (pelRow > desRow) {
		for (int i = desRow; i <= pelRow; i++) {
			warehouse[i][desCol] = 3;
		}
	}
	
	warehouse[pelRow][pelCol] = 1;
	warehouse[desRow][desCol] = 2;
}",1
bcha389,1695770807,1,"void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
	//Find the coordinates of 1 and 2. In total 4 variables result.
	int row1, col1;
	int row2, col2;
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}

		}
	}

	//Use a for loop to iterate across columns from number 1 to number 2. (constant row)
	for (int j = col1+1; j <= col2; j++) {
		warehouse[row1][j] = 3;
	}

	//Use a for loop to iterate across rows from number 1 to number 2. (constant column)
	for (int i = row1 + 1; i < row2; i++) {
		warehouse[i][col2] = 3;
	}

}",0
bcha389,1695770911,2,"void PelletRoute(int warehouse[10][10])
{
	//Find the coordinates of 1 and 2. In total 4 variables result.
	int row1, col1;
	int row2, col2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}

		}
	}

	//Use a for loop to iterate across columns from number 1 to number 2. (constant row)
	for (int j = col1+1; j <= col2; j++) {
		warehouse[row1][j] = 3;
	}

	//Use a for loop to iterate across rows from number 1 to number 2. (constant column)
	for (int i = row1 + 1; i < row2; i++) {
		warehouse[i][col2] = 3;
	}

}",0
bcha389,1695772714,3,"void PelletRoute(int warehouse[10][10])
{
	//Find the coordinates of 1 and 2. In total 4 variables result.
	int row1, col1;
	int row2, col2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}

		}
	}

	if (col2 > col1) {
		//Use a for loop to iterate across columns from number 1 to number 2. (constant row)
		for (int j = col1 + 1; j < col2; j++) {
			warehouse[row1][j] = 3;
		}

	}
	else if (col2 < col1) {
		//Use a for loop to iterate across columns from number 1 to number 2. (constant row)
		for (int j = col1 - 1; j > col2; j--) {
			warehouse[row1][j] = 3;
		}

	}

	if (row2 > row1) {
		//Use a for loop to iterate across rows from number 1 to number 2. (constant column)
		for (int i = row1 + 1; i < row2; i++) {
			warehouse[i][col2] = 3;
		}

	}
	else if (row2 < row1) {
		//Use a for loop to iterate across rows from number 1 to number 2. (constant column)
		for (int i = row1 - 1; i > row2; i--) {
			warehouse[i][col2] = 3;
		}

	}

	if (warehouse[row1][col2] == 0) {
		warehouse[row1][col2] = 3;
	}

}",1
bcha726,1695774487,1,"#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	
    int i, j;
	
	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]){

    int boxRow, boxCol, endRow, endCol;

    FindPos(warehouse, 1, &boxRow, &boxCol);
    FindPos(warehouse, 2, &endRow, &endCol);

    while (boxCol != endCol){
        if (boxCol < endCol){
            boxCol++;
            warehouse[boxRow][boxCol] = 3;
        } else {
            boxCol--;
            warehouse[boxRow][boxCol] = 3;
        }
    }

    while (boxRow != endRow){
        if (boxRow < endRow){
            warehouse[boxRow][boxCol] = 3;
            boxRow++;
        } else {
            warehouse[boxRow][boxCol] = 3;
            boxRow--;
        }
    }
}",0
bcha726,1695774750,2,"#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	
    int i, j;
	
	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]){

    int boxRow, boxCol, endRow, endCol;

    FindPos(warehouse, 1, &boxRow, &boxCol);
    FindPos(warehouse, 2, &endRow, &endCol);

    while (boxCol != endCol){
        if (boxCol < endCol){
            boxCol++;
            if (boxCol != endCol)
                warehouse[boxRow][boxCol] = 3;
        } else {
            boxCol--;
            if (boxCol != endCol)
                warehouse[boxRow][boxCol] = 3;
        }
    }

    while (boxRow != endRow){
        if (boxRow < endRow){
            if (boxRow != endRow)
                warehouse[boxRow][boxCol] = 3;
            boxRow++;
        } else {
            if (boxRow != endRow)
                warehouse[boxRow][boxCol] = 3;
            boxRow--;
        }
    }
}",0
bcha726,1695775162,3,"#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void FindPos(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	
    int i, j;
	
	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]){

    int boxRow, boxCol, startRow, startCol, endRow, endCol;

    FindPos(warehouse, 1, &startRow, &startCol);
    FindPos(warehouse, 2, &endRow, &endCol);
    boxRow = startRow;
    boxCol = startCol;

    while (boxCol != endCol){
        if (boxCol < endCol){
            if (boxCol != startCol || boxRow != startRow)
                warehouse[boxRow][boxCol] = 3;
            boxCol++;
        } else {
            if (boxCol != startCol || boxRow != startRow)
                warehouse[boxRow][boxCol] = 3;
            boxCol--;
        }
    }

    while (boxRow != endRow){
        if (boxRow < endRow){
            if (boxRow != startRow || boxCol != startCol)
                warehouse[boxRow][boxCol] = 3;
            boxRow++;
        } else {
            if (boxRow != startRow || boxCol != startCol)
                warehouse[boxRow][boxCol] = 3;
            boxRow--;
        }
    }
}",1
bcos422,1695689012,1,"void PelletRoute(int warehouse[10][10]) {
    int i, j,startrow,startcol,endrow,endcol;
    int a = 0;
    int b = 0;
    int c = 0;
    int d = 0;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startrow = i;
                startcol = j;
            }
            if (warehouse[i][j] == 2) {
                endrow = i;
                endcol = j;
            }

        }
    }
    //accounting for going backward with the if loops
    if (startcol <= endcol) {
        a = startcol + 1;
        b = endcol;
    }
    if (startcol > endcol) {
        b = startcol - 1;
        a = endcol;
    }
    if (startrow <= endrow) {
        c = startrow + 1;
        d = endrow;
    }
    if (startrow > endrow) {
        d = startrow;
        c = endrow + 1;
    }



    for (i = a; i <= b; i++) {
        warehouse[startrow][i] = 3;
    }

    for (j = c; j < d; j++) {
        warehouse[j][endcol] = 3;
    }
}",0
bcos422,1695689434,2,"void PelletRoute(int warehouse[10][10]) {
    int i, j,startrow,startcol,endrow,endcol;
    int a = 0;
    int b = 0;
    int c = 0;
    int d = 0;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startrow = i;
                startcol = j;
            }
            if (warehouse[i][j] == 2) {
                endrow = i;
                endcol = j;
            }

        }
    }
    //accounting for going backward with the if loops
    if (startcol <= endcol) {
        a = startcol + 1;
        b = endcol;
    }
    if (startcol > endcol) {
        b = startcol - 1;
        a = endcol;
    }
    if (startrow <= endrow) {
        c = startrow + 1;
        d = endrow;
    }
    if (startrow > endrow) {
        d = startrow;
        c = endrow + 1;
    }



    //debugging
    if (startcol <= endcol && startrow == endrow) {
        a = startcol + 1;
        b = endcol - 1;
    }
    if (startcol > endcol && startrow == endrow) {
        b = startcol - 1;
        a = endcol + 1;
    }


    for (i = a; i <= b; i++) {
        warehouse[startrow][i] = 3;
    }

    for (j = c; j < d; j++) {
        warehouse[j][endcol] = 3;
    }
}",1
bcru157,1696240685,1,"void PalletRoute()
{
    int i, j, warehouse, row1, row2, col1, col2;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            // This will find the row and column that 1 is in
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }

            // this will find the row and column that 2 is in
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    for (i = row1; i = row1; i++) {
        for (j = col1; j = col2; i++) {
                warehouse[i][j] = 3;
            }
    }
    
    for (j = col2; j = col2; j++) {
        for (i = row1; i = row2 - 1; i++) {
            warehouse[i][j] = 3;
        }
    }

    return 0;
}",0
bfla774,1696240945,1,"void Find1(int board[10][10], int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (board[i][j] == 1) {
				*rowPos = i;
				*colPos = j;
				return;
			}

		}
	}
}
void Find2(int board[10][10], int* rowPos2, int* colPos2)
{
	int i;
	int j;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (board[i][j] == 2) {
				*rowPos2 = i;
				*colPos2 = j;
				return;
			}

		}
	}
}
void PelletRoute(int warehouse[10][10]) {
	int rowPos, colPos;
	int rowPos2, colPos2;
	Find1(warehouse, &rowPos, &colPos);
	Find2(warehouse, &rowPos2, &colPos2);
	while (rowPos != rowPos2) {
		if (rowPos < rowPos2) {
			rowPos++;
		}
		else {
			rowPos--;
		}
		warehouse[rowPos][colPos] = 3;
	}

	while (colPos!= colPos2) {
		if (colPos < colPos2) {
			colPos++;
		}
		else {
			colPos--;
		}
		warehouse[rowPos][colPos] = 3;
	}
	warehouse[rowPos][colPos] = 1;
	warehouse[rowPos2][colPos2] = 2;

}",0
bfla774,1696241272,2,"void Find1(int board[10][10], int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (board[i][j] == 1) {
				*rowPos = i;
				*colPos = j;
				return;
			}

		}
	}
}
void Find2(int board[10][10], int* rowPos2, int* colPos2)
{
	int i;
	int j;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (board[i][j] == 2) {
				*rowPos2 = i;
				*colPos2 = j;
				return;
			}

		}
	}
}
void PelletRoute(int warehouse[10][10]) {
	int rowPos, colPos;
	int rowPos2, colPos2;
	Find1(warehouse, &rowPos, &colPos);
	Find2(warehouse, &rowPos2, &colPos2);
	while (colPos != colPos2) {
		if (colPos < colPos2) {
			colPos++;
		}
		else {
			colPos--;
		}
		warehouse[rowPos][colPos] = 3;
	}
	while (rowPos != rowPos2) {
		if (rowPos < rowPos2) {
			rowPos++;
		}
		else {
			rowPos--;
		}
		warehouse[rowPos][colPos] = 3;
	}

	
	warehouse[rowPos][colPos] = 1;
	warehouse[rowPos2][colPos2] = 2;

}",1
bgib630,1695813886,1,"void PelletRoute(int warehouse[10][10])
{
	// Find the start and end rows and columns
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				int startRow = i;
				int startCol = j;
			}

			if (warehouse[i][j] == 2)
			{
				int endRow = i;
				int endCol = j;
			}
		}
	}

	// Set cells to 3 if theyre included in the route and check if it needs to go left or right
	if (startCol < endCol)
	{
		for (int i = startCol; i < endCol; i++)
		{
			warehouse[startRow][i] = 3;
		}
	}
	else if (startCol > endCol)
	{
		for (int i = endCol; i > startCol; i--)
		{
			warehouse[startRow][i] = 3;
		}
	}
	
	// Set cells to 3 if theyre included in the route and check if it needs to go up or down
	if (startRow < endRow)
	{
		for (int i = startRow; i < endRow; i++)
		{
			warehouse[i][endCol] = 3;
		}
	}
	else if (startRow > end Row)
	{
		for (int i = endRow; i > endRow; i--)
		{
			warehouse[i][endCol] = 3;
		}
	}

	// Reset the initial 2 spots to 1 and 2
	warehouse[startRow][startCol] = 1;
	warehouse[endRow][endCol] = 2;
}",0
bgib630,1695814168,2,"void PelletRoute(int warehouse[10][10])
{
    int startRow = -1;
	int startCol = -1;
    int endRow = -1;
	int endCol = -1;
    
	// Find the start and end rows and columns
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				startRow = i;
				startCol = j;
			}

			if (warehouse[i][j] == 2)
			{
				endRow = i;
				endCol = j;
			}
		}
	}

	// Set cells to 3 if theyre included in the route and check if it needs to go left or right
	if (startCol < endCol)
	{
		for (int i = startCol; i < endCol; i++)
		{
			warehouse[startRow][i] = 3;
		}
	}
	else if (startCol > endCol)
	{
		for (int i = endCol; i > startCol; i--)
		{
			warehouse[startRow][i] = 3;
		}
	}
	
	// Set cells to 3 if theyre included in the route and check if it needs to go up or down
	if (startRow < endRow)
	{
		for (int i = startRow; i < endRow; i++)
		{
			warehouse[i][endCol] = 3;
		}
	}
	else if (startRow > endRow)
	{
		for (int i = endRow; i > endRow; i--)
		{
			warehouse[i][endCol] = 3;
		}
	}

	// Reset the initial 2 spots to 1 and 2
	warehouse[startRow][startCol] = 1;
	warehouse[endRow][endCol] = 2;
}",0
bgib630,1695814922,3,"void PelletRoute(int warehouse[10][10])
{
    int startRow = -1;
	int startCol = -1;
    int endRow = -1;
	int endCol = -1;
    
	// Find the start and end rows and columns
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				startRow = i;
				startCol = j;
			}

			if (warehouse[i][j] == 2)
			{
				endRow = i;
				endCol = j;
			}
		}
	}

	// Set cells to 3 if theyre included in the route and check if it needs to go left or right
	if (startCol < endCol)
	{
		for (int i = startCol; i < endCol; i++)
		{
			warehouse[startRow][i] = 3;
		}
	}
	else if (startCol > endCol)
	{
		for (int i = endCol; i < startCol; i++)
		{
			warehouse[startRow][i] = 3;
		}
	}
	
	// Set cells to 3 if theyre included in the route and check if it needs to go up or down
	if (startRow < endRow)
	{
		for (int i = startRow; i < endRow; i++)
		{
			warehouse[i][endCol] = 3;
		}
	}
	else if (startRow > endRow)
	{
		for (int i = endRow; i < startRow; i++)
		{
			warehouse[i][endCol] = 3;
		}
	}

	// Reset the initial 2 spots to 1 and 2
	warehouse[startRow][startCol] = 1;
	warehouse[endRow][endCol] = 2;
}",0
bgib630,1695815120,4,"void PelletRoute(int warehouse[10][10])
{
    int startRow = -1;
	int startCol = -1;
    int endRow = -1;
	int endCol = -1;
    
	// Find the start and end rows and columns
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				startRow = i;
				startCol = j;
			}

			if (warehouse[i][j] == 2)
			{
				endRow = i;
				endCol = j;
			}
		}
	}

	// Set cells to 3 if theyre included in the route and check if it needs to go left or right
	if (startCol < endCol)
	{
		for (int i = startCol; i <= endCol; i++)
		{
			warehouse[startRow][i] = 3;
		}
	}
	else if (startCol > endCol)
	{
		for (int i = endCol; i <= startCol; i++)
		{
			warehouse[startRow][i] = 3;
		}
	}
	
	// Set cells to 3 if theyre included in the route and check if it needs to go up or down
	if (startRow < endRow)
	{
		for (int i = startRow; i <= endRow; i++)
		{
			warehouse[i][endCol] = 3;
		}
	}
	else if (startRow > endRow)
	{
		for (int i = endRow; i <= startRow; i++)
		{
			warehouse[i][endCol] = 3;
		}
	}

	// Reset the initial 2 spots to 1 and 2
	warehouse[startRow][startCol] = 1;
	warehouse[endRow][endCol] = 2;
}",1
bgru726,1696222924,1,"void PelletRoute(int warehouse[10][10])
{
	int startRow, startCol, endRow, endCol;

	// find the starting position
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
		}
	}
	
	//find the ending position 
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	//Start with drawing the horizontal path	
	if (startCol < endCol) {
		for (int i = 1; i <= endCol - startCol; i++) {
			warehouse[startRow][startCol + i] = 3;
		}
	}
	else if (startCol > endCol) {
		for (int i = -1; i >= endCol - startCol; i--) {
			warehouse[startRow][startCol + i] = 3;
		}
	}

	//Draw the vertical path to the ending point.
	if (startRow < endRow) {
		for (int i = 1; i < endRow - startRow; i++) {
			warehouse[startRow + i][endCol] = 3;
		}
	}
	else if (startRow > endRow) {
		for (int i = -1; i > endRow - startRow; i--) {
			warehouse[startRow + i][endCol] = 3;
		}
	}
}",0
bgru726,1696223375,2,"void PelletRoute(int warehouse[10][10])
{
	int startRow, startCol, endRow, endCol;

	// find the starting position
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
		}
	}
	
	//find the ending position 
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	//Start with drawing the horizontal path	
	if (startCol < endCol) {
		for (int i = 1; i < endCol - startCol; i++) {
			warehouse[startRow][startCol + i] = 3;
		}
	}
	else if (startCol > endCol) {
		for (int i = -1; i > endCol - startCol; i--) {
			warehouse[startRow][startCol + i] = 3;
		}
	}
	if ((startRow != endRow)&& startCol != endCol)  {
		warehouse[startRow][endCol] = 3;
	}
	//Draw the vertical path to the ending point.
	if (startRow < endRow) {
		for (int i = 1; i < endRow - startRow; i++) {
			warehouse[startRow + i][endCol] = 3;
		}
	}
	else if (startRow > endRow) {
		for (int i = -1; i > endRow - startRow; i--) {
			warehouse[startRow + i][endCol] = 3;
		}
	}
}",1
bguo360,1695620331,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, workerrow, workercol, boxrow, boxcol;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				workerrow = i;
				workercol = j;
			}
		}
	}
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				boxrow = i;
				boxcol = j;
			}
		}
	}
	if (workercol < boxcol) {
		for (i = workercol + 1; i < boxcol; i++) {
			warehouse[workerrow][i] = 3;
		}
		if (workerrow != boxrow) {
			warehouse[workerrow][boxcol] = 3;
		}
	}
	if (workercol > boxcol) {
		for (i = workercol - 1; i > boxcol; i--) {
			warehouse[workerrow][i] = 3;
		}
		if (workerrow != boxrow) {
			warehouse[workerrow][boxcol] = 3;
		}
	}
	if (workerrow < boxrow) {
		for (i = boxrow - 1; i > workerrow; i--) {
			warehouse[i][boxcol] = 3;
		}
	}
	if (workerrow > boxrow) {
		for (i = boxrow + 1; i < workerrow; i++) {
			warehouse[i][boxcol] = 3;
		}
	}

}",1
bhua898,1695995009,1,"void PelletRoute(int warehouse[10][10])
{
int pelletRow, pelletCol, destRow, destCol;

for (int i = 0; i < 10; i++) {
	for (int j = 0; j < 10; j++) {
		if (warehouse[i][j] == 1) {
			pelletRow = i;
			pelletCol = j;
		}
		if (warehouse[i][j] == 2) {
			destRow = i;
			destCol = j;
		}
	}
}

int horStart, horEnd, vertStart, vertEnd;

if (pelletRow > destRow) {
	vertStart = destRow;
	vertEnd = pelletRow;
} else {
	vertStart = pelletRow;
	vertEnd = destRow;
}

if (pelletCol > destCol) {
	horStart = destCol;
	horEnd = pelletCol;
} else {
	horStart = pelletCol;
	horEnd = destCol;

}

for (int j = horStart; j <= horEnd; j++) {
	warehouse[pelletRow][j] = 3;
}
 
for (int i = vertStart; i <= vertEnd; i++) {
	warehouse[i][destCol] = 3;
}

warehouse[pelletRow][pelletCol] = 1;
warehouse[destRow][destCol] = 2;

}",1
bjon836,1695857887,1,"#include <stdio.h>

void PalletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    int i = rowStart, j = colStart;

    if (colEnd - colStart > 0) {
        for (j += 1; j <= colEnd - 1; j++) {
            warehouse[i][j] = 3;
        }
    } else if (colEnd - colStart < 0) {
        for (j -= 1; j >= colEnd + 1; j--) {
            warehouse[i][j] = 3;
        }
    }

    if (rowEnd - rowStart > 0) {
        for (i; i <= rowEnd - 1; i++) {
            warehouse[i][j] = 3;
        }
    } else if (rowEnd - rowStart < 0) {
        for (i; i >= rowEnd + 1; i--) {
            warehouse[i][j] = 3;
        }
    }
}",0
bjon836,1695858440,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    int i = rowStart, j = colStart;

    for (j += 1; j < colEnd - 1; j++) {
        warehouse[i][j] = 3;
    }
    for (i; i<rowEnd - 1; i++) {
        warehouse[i][j] = 3;
    }
}",0
bjon836,1695858888,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    int i = rowStart, j = colStart;

        for (j += 1; j <= colEnd - 1; j++) {
            warehouse[i][j] = 3;
        
        }
        for (i = rowStart; i <= rowEnd - 1; i++) {
            warehouse[i][j] = 3;
        }
     }",0
bjon836,1695858974,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    int i = rowStart, j = colStart;

    if (colEnd - colStart > 0) {
        for (j += 1; j <= colEnd - 1; j++) {
            warehouse[i][j] = 3;
        }
    } else if (colEnd - colStart < 0) {
        for (j -= 1; j >= colEnd + 1; j--) {
            warehouse[i][j] = 3;
        }
    }

    if (rowEnd - rowStart > 0) {
        for (i = rowStart; i <= rowEnd - 1; i++) {
            warehouse[i][j] = 3;
        }
    } else if (rowEnd - rowStart < 0) {
        for (i = rowStart; i >= rowEnd + 1; i--) {
            warehouse[i][j] = 3;
        }
    }
}
",0
bjon836,1695859295,5,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    int i = rowStart, j = colStart;

    if (colEnd - colStart > 0) {
        for (j += 1; j <= colEnd - 1; j++) {
            warehouse[i][j] = 3;
        }
    } else if (colEnd - colStart < 0) {
        for (j -= 1; j >= colEnd + 1; j--) {
            warehouse[i][j] = 3;
        }
    }

    if (rowEnd - rowStart > 0) {
        for (i += 1; i <= rowEnd - 1; i++) {
            warehouse[i][j] = 3;
        }
    } else if (rowEnd - rowStart < 0) {
        for (i -= 1; i >= rowEnd + 1; i--) {
            warehouse[i][j] = 3;
        }
    }
}
",0
bjon836,1695859703,6,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    int i = rowStart, j = colStart;

    if (colEnd - colStart > 0) {
        for (j += 1; j <= colEnd - 1; j++) {
            warehouse[i][j] = 3;
        }
    } else if (colEnd - colStart < 0) {
        for (j -= 1; j >= colEnd + 1; j--) {
            warehouse[i][j] = 3;
        }
    }
    
    if (colEnd - colStart == 0) {
     if (rowEnd - rowStart > 0) {
        for (i += 1; i <= rowEnd - 1; i++) {
            warehouse[i][j] = 3;
        }
    } else if (rowEnd - rowStart < 0) {
        for (i -= 1; i >= rowEnd + 1; i--) {
            warehouse[i][j] = 3;
            }
        }
    } else 
     if (rowEnd - rowStart > 0) {
        for (i = rowStart; i <= rowEnd - 1; i++) {
            warehouse[i][j] = 3;
        }
    } else if (rowEnd - rowStart < 0) {
        for (i = rowStart; i >= rowEnd + 1; i--) {
            warehouse[i][j] = 3;
            }
    }
}",1
bkho028,1695873046,1,"void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
    int pellet_row, pellet_col;
    int dest_row, dest_col;

    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pellet_row = i;
                pellet_col = j;
            }
            if (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    while (pellet_col != dest_col)
    {
        if (pellet_col < dest_col)
        {
            pellet_col++;
        }
        else
        {
            pellet_col--;
        }
        warehouse[pellet_row][pellet_col] = 3;

        while (pellet_row != dest_row)
        {
            if (pellet_row < dest_row)
            {
                pellet_row++;
            }
            else
            {
                pellet_row--;
            }
            warehouse[pellet_row][pellet_col] = 3;
        }
    }
}",0
bkho028,1695873103,2,"#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
    int pellet_row, pellet_col;
    int dest_row, dest_col;

    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pellet_row = i;
                pellet_col = j;
            }
            if (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    while (pellet_col != dest_col)
    {
        if (pellet_col < dest_col)
        {
            pellet_col++;
        }
        else
        {
            pellet_col--;
        }
        warehouse[pellet_row][pellet_col] = 3;

        while (pellet_row != dest_row)
        {
            if (pellet_row < dest_row)
            {
                pellet_row++;
            }
            else
            {
                pellet_row--;
            }
            warehouse[pellet_row][pellet_col] = 3;
        }
    }
}",0
bkho028,1695873653,3,"#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
    int pellet_row, pellet_col;
    int dest_row, dest_col;

    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pellet_row = i;
                pellet_col = j;
            }
            if (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    while (pellet_col != dest_col)
    {
        if (pellet_col < dest_col)
        {
            pellet_col++;
        }
        else
        {
            pellet_col--;
        }
        warehouse[pellet_row][pellet_col] = 3;
    }

    while (pellet_row != dest_row)
    {
        if (pellet_row < dest_row)
        {
            pellet_row++;
        }
        else
        {
            pellet_row--;
        }
        warehouse[pellet_row][pellet_col] = 3;
    }

    warehouse[pellet_row][pellet_col] = 2;
}",1
bli482,1695813360,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
	
	int i;
	int j;
	int r_1 = -1, c_1 = -1, r_2 = -1, c_2 = -1;
	

	

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				r_1 = i;
				c_1 = j;
			}
			if (warehouse[i][j] == 2){	 
				r_2 = i;
				c_2 = j;
			}
		}
	}
	
	while (c_1 != c_2){
	    if (c_1 < c_2){
	        c_1 ++;
	        
	    }
	    else{
	        c_1 --;
	    }
	    warehouse[r_1][c_1] = 3;
	}
    
    
    while (r_1 != r_2){
        if (r_1 < r_2){
            r_1 ++;
        } 
        else{
            r_1 --;
        }
        
        warehouse[r_1][c_2] = 3;
    }
	
	warehouse[r_2][c_2] = 2;
	
}",1
bli775,1695786334,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
",0
bli775,1695788351,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }


    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
bli775,1695789787,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX, pelletY, destX, destY;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletX = j;
                pelletY = i;
            } else if (warehouse[i][j] == 2) {
                destX = j;
                destY = i;
            }
        }
    }

    while (pelletX != destX) {
        if (pelletX < destX) {
            pelletX++;
        } else {
            pelletX--;
        }
        warehouse[pelletY][pelletX] = 3;
    }

    while (pelletY != destY) {
        if (pelletY < destY) {
            pelletY++;
        } else {
            pelletY--;
        }
        warehouse[pelletY][pelletX] = 3;
    }
}",0
bli775,1695791321,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX, pelletY, destX, destY;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletX = i;
                pelletY = j;
            }
            if (warehouse[i][j] == 2) {
                destX = i;
                destY = j;
            }
        }
    }

    while (pelletY != destY) {
        if (pelletY < destY) {
            pelletY++;
        } else {
            pelletY--;
        }
        warehouse[pelletX][pelletY] = 3;
    }

    while (pelletX != destX) {
        if (pelletX < destX) {
            pelletX++;
        } else {
            pelletX--;
        }
        warehouse[pelletX][pelletY] = 3;
    }
}


    PelletRoute(warehouse);

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}",0
bli775,1695791328,5,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX, pelletY, destX, destY;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletX = i;
                pelletY = j;
            }
            if (warehouse[i][j] == 2) {
                destX = i;
                destY = j;
            }
        }
    }

    while (pelletY != destY) {
        if (pelletY < destY) {
            pelletY++;
        } else {
            pelletY--;
        }
        warehouse[pelletX][pelletY] = 3;
    }

    while (pelletX != destX) {
        if (pelletX < destX) {
            pelletX++;
        } else {
            pelletX--;
        }
        warehouse[pelletX][pelletY] = 3;
    }
}
",0
bli775,1695791547,6,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
   
    int pellet_row, pellet_col, dest_row, dest_col;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    for (int j = pellet_col; j < dest_col; j++) {
        warehouse[pellet_row][j] = 3;
    }
    for (int j = pellet_col; j > dest_col; j--) {
        warehouse[pellet_row][j] = 3;
    }

    for (int i = pellet_row; i < dest_row; i++) {
        warehouse[i][dest_col] = 3;
    }
    for (int i = pellet_row; i > dest_row; i--) {
        warehouse[i][dest_col] = 3;
    }
}
",0
bli775,1695792291,7,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    
    int pellet_row, pellet_col, dest_row, dest_col;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    warehouse[pellet_row][pellet_col] = 3;

    for (int j = pellet_col; j < dest_col; j++) {
        warehouse[pellet_row][j + 1] = 3;
    }
    for (int j = pellet_col; j > dest_col; j--) {
        warehouse[pellet_row][j - 1] = 3;
    }

    for (int i = pellet_row; i < dest_row; i++) {
        warehouse[i + 1][dest_col] = 3;
    }
    for (int i = pellet_row; i > dest_row; i--) {
        warehouse[i - 1][dest_col] = 3;
    }
}",0
bora417,1696211518,1,"void PelletRoute(int warehouse[10][10])
{

    //For loop to find where 1 and 2 are
    int i = 0, j = 0;
    int box_row, box_col;
    int destination_row,  destination_col;

//Find the position of #1 and #2 i.e. the box and destination 
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
     
            if (warehouse[i][j] == 1) {
           box_row = i;
           box_col = j;

            }
           if (warehouse[i][j] == 2) {
            destination_row = i;
            destination_col = j;
    
           }
        }
    }

    while (box_col != destination_col) {
        box_col++;
        warehouse[box_row][box_col] = 3;
        }

    while (box_row != destination_row - 1) {
        box_row++;
        warehouse[box_row][box_col] = 3;
        }

return 0;
}

",0
bora417,1696218717,2,"void PelletRoute(int warehouse[10][10])
{

    //For loop to find where 1 and 2 are
    int i = 0, j = 0;
    int box_row = -1, box_col = -1; //output -1 if it is not found
    int destination_row = -1,  destination_col = -1;

//Find the position of #1 and #2 i.e. the box and destination 
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
     
            if (warehouse[i][j] == 1) {
           box_row = i;
           box_col = j;

            }
           if (warehouse[i][j] == 2) {
            destination_row = i;
            destination_col = j;
    
           }
        }
    }

     
     if ((box_col == destination_col) && (box_row > destination_row)) {
        warehouse[box_row][destination_col] = 1;
        box_row--;
        } 

    if ((box_col == destination_col) && (box_row < destination_row)) {
        warehouse[box_row][destination_col] = 1;
        box_row++;
        }   

    
    while (box_col < destination_col) {
        warehouse[box_row][box_col + 1] = 3;
        box_col++;
    }

    while (box_col > destination_col) {
        warehouse[box_row][box_col - 1] = 3;
        box_col--;
    }

   while (box_row < destination_row) {
        warehouse[box_row][destination_col] = 3;
        box_row++;
    }
    while (box_row > destination_row) {
        warehouse[box_row][destination_col] = 3;
        box_row--;   
    }
    if (box_row == destination_row) {
        warehouse[destination_row][destination_col] = 2;
    }

}
",1
bpak212,1696226776,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow = -1, pelletCol = -1;
    int destinationRow = -1, destinationCol = -1;
    
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) 
            {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }
    while (pelletCol != destinationCol) 
    {
        if (pelletCol < destinationCol) 
        {
            pelletCol++;
        }
        else
        {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow = destinationRow)
    {
        if (pelletRow < destinationRow)
        {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
bpak212,1696226798,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow = -1, pelletCol = -1;
    int destinationRow = -1, destinationCol = -1;
    
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) 
            {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }
    while (pelletCol != destinationCol) 
    {
        if (pelletCol < destinationCol) 
        {
            pelletCol++;
        }
        else
        {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow != destinationRow)
    {
        if (pelletRow < destinationRow)
        {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
bpak212,1696227127,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow = -1, pelletCol = -1;
    int destinationRow = -1, destinationCol = -1;
    
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) 
            {
                destinationRow = i;
                destinationCol = j
            }
            if (pelletRow != -1 && destinationRow != -1) 
            {
                break;
            }
        }
        if (pelletRow != -1 && destinationRow != -1)
        {
            break;
        }
    }
    while (pelletCol != destinationCol)
    {
        if (pelletCol < destinationCol) 
        {
            pelletCol++;
        } 
        else
        {
            pelletCol--;
        }
        
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow != destinationRow)
    {
        if (pelletRow < destinationRow) 
        {
            pelletRow++;
        } 
        else 
        {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}



",0
bpak212,1696228647,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow = -1, pelletCol = -1;
    int destinationRow = -1, destinationCol = -1;
    
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) 
            {
                destinationRow = i;
                destinationCol = j;
            }
            if (pelletRow != -1 && destinationRow != -1) 
            {
                break;
            }
        }
        if (pelletRow != -1 && destinationRow != -1)
        {
            break;
        }
    }
    while (pelletCol != destinationCol)
    {
        if (pelletCol < destinationCol) 
        {
            pelletCol++;
        } 
        else
        {
            pelletCol--;
        }
        
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow != destinationRow)
    {
        if (pelletRow < destinationRow) 
        {
            pelletRow++;
        } 
        else 
        {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}



",0
bpat907,1696233984,1,"void FindPellet(int warehouse[10][10], int pellet, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == pellet) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	return;
}

void PelletRoute(int warehouse[10][10])
{
	int r1, c1, r2, c2;
	FindPellet(warehouse, 1, &r1, &c1);
	FindPellet(warehouse, 2, &r2, &c2);

	int i, j;
	if ((r1 < r2) && (c1 < c2)) {
		for (i = r1; i < r2; i++) {
			warehouse[i][c2] = 3;
		}
		for (j = c1 + 1; j < c2; j++) {
			warehouse[r1][j] = 3;
		}
	}
	else if ((r1 > r2) && (c1 < c2)) {
		for (i = r2+1; i <= r1; i++) {
			warehouse[i][c2] = 3;
		}
		for (j = c1 + 1; j < c2; j++) {
			warehouse[r1][j] = 3;
		}
	}
	else if ((r1 > r2) && (c1 > c2)) {
		for (i = r2 + 1; i <= r1; i++) {
			warehouse[i][c2] = 3;
		}
		for (j = c2; j < c1; j++) {
			warehouse[r1][j] = 3;
		}
	}
	else if ((r1 < r2) && (c1 > c2)) {
		for (i = r1; i <= r2; i++) {
			warehouse[i][c2] = 3;
		}
		for (j = c2; j < c1; j++) {
			warehouse[r1][j] = 3;
		}
	}
	/*else if ((r1 == r2) && (c1 > c2)) {
		for (i = r1; i <= r2; i++) {
			warehouse[i][c2] = 3;
		}
		for (j = c2+1; j < c1; j++) {
			warehouse[r2][j] = 3;
		}
	}*/

}",0
bwoo348,1696218287,1,"void PelletRoute(int warehouse[10][10]){
    int onerow, onecol, tworow, twocol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1){
                onerow = i;
                onecol = j;
            }
            if (warehouse[i][j] == 2){
                tworow = i;
                twocol = j;
            }
        }
    }
    
    for (int a = onecol+1; a<twocol+1; a++){
        warehouse[onerow][a] = 3;
    }
    for (int a = onerow+1; a<tworow; a++){
        warehouse[a][twocol] = 3;
    }
}",0
bwoo348,1696220110,2,"void PelletRoute(int warehouse[10][10]){
    int onerow, onecol, tworow, twocol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1){
                onerow = i;
                onecol = j;
            }
            if (warehouse[i][j] == 2){
                tworow = i;
                twocol = j;
            }
        }
    }
    
    int lesscol, morecol, lessrow, morerow;
    if (onecol < twocol) {
        lesscol = onecol;
        morecol = twocol;
    }else{
        lesscol = twocol;
        morecol = onecol;
    }
    if (onerow < tworow) {
        lessrow = onerow;
        morerow = tworow;
    } else {
        lessrow = tworow;
        morerow = onerow;
    }
    printf(""One: R:%d, C:%d \n Two: R:%d, C:%d \n Least: R:%d, C:%d \n Most: R:%d, C:%d \n"", onerow, onecol, tworow, twocol, lessrow, lesscol, morerow, morecol);
    for (int a = lesscol+1; a<morecol+1; a++){
        if ((warehouse[onerow][a] != 1) && (warehouse[onerow][a] != 2)) {
            warehouse[onerow][a] = 3;
        }
    }
    for (int a = lessrow; a<morerow+1; a++){
        if ((warehouse[a][twocol] != 1) && (warehouse[a][twocol] != 2)) {
            warehouse[a][twocol] = 3;
        }
    }
}",0
bwoo348,1696220122,3,"void PelletRoute(int warehouse[10][10]){
    int onerow, onecol, tworow, twocol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1){
                onerow = i;
                onecol = j;
            }
            if (warehouse[i][j] == 2){
                tworow = i;
                twocol = j;
            }
        }
    }
    
    int lesscol, morecol, lessrow, morerow;
    if (onecol < twocol) {
        lesscol = onecol;
        morecol = twocol;
    }else{
        lesscol = twocol;
        morecol = onecol;
    }
    if (onerow < tworow) {
        lessrow = onerow;
        morerow = tworow;
    } else {
        lessrow = tworow;
        morerow = onerow;
    }
    for (int a = lesscol+1; a<morecol+1; a++){
        if ((warehouse[onerow][a] != 1) && (warehouse[onerow][a] != 2)) {
            warehouse[onerow][a] = 3;
        }
    }
    for (int a = lessrow; a<morerow+1; a++){
        if ((warehouse[a][twocol] != 1) && (warehouse[a][twocol] != 2)) {
            warehouse[a][twocol] = 3;
        }
    }
}",1
byiu331,1695887350,1,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {

	int i, j, z;
	int startRow, startCol, endRow, endCol;

	for (z = 1; z < 3; z++) {
		for (i = 0; i < 10; i++) {
			for (j = 0; j < 10; j++) {
				if (warehouse[i][j] == z) {
					if (z == 1) {
						startRow = i;
						startCol = j;
					}
					else if (z == 2) {
						endRow = i;
						endCol = j;
					}
				}
			}
		}
	}

	int rowPos, colPos;
	
	if ((startRow - endRow) < 0) {
		for (rowPos = startRow + 1; rowPos <= endRow; rowPos++) {
			warehouse[rowPos][startCol] = 3;
		}
	}
	else if ((startRow - endRow) > 0) {
		for (rowPos = startRow - 1; rowPos >= endRow; rowPos--) {
			warehouse[rowPos][startCol] = 3;
		}
	}

	if ((startCol - endCol) < 0) {
		for (colPos = startCol + 1; colPos <= endCol; colPos++) {
			warehouse[endRow][colPos] = 3;
		}
	}
	else if ((startCol - endCol) > 0) {
		for (colPos = startCol - 1; colPos >= endCol; colPos--) {
			warehouse[endRow][colPos] = 3;
		}
	}

	warehouse[endRow][endCol] = 2;
}",0
byiu331,1695887954,2,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {

	int i, j, z;
	int startRow, startCol, endRow, endCol;

	for (z = 1; z < 3; z++) {
		for (i = 0; i < 10; i++) {
			for (j = 0; j < 10; j++) {
				if (warehouse[i][j] == z) {
					if (z == 1) {
						startRow = i;
						startCol = j;
					}
					else if (z == 2) {
						endRow = i;
						endCol = j;
					}
				}
			}
		}
	}

	int rowPos, colPos;
	
	if ((startCol - endCol) < 0) {
		for (colPos = startCol + 1; colPos <= endCol; colPos++) {
			warehouse[startRow][colPos] = 3;
		}
	}
	else if ((startCol - endCol) > 0) {
		for (colPos = startCol - 1; colPos >= endCol; colPos--) {
			warehouse[startRow][colPos] = 3;
		}
	}

	if ((startRow - endRow) < 0) {
		for (rowPos = startRow + 1; rowPos <= endRow; rowPos++) {
			warehouse[rowPos][endCol] = 3;
		}
	}
	else if ((startRow - endRow) > 0) {
		for (rowPos = startRow - 1; rowPos >= endRow; rowPos--) {
			warehouse[rowPos][endCol] = 3;
		}
	}

	warehouse[endRow][endCol] = 2;
}",1
byul423,1695711794,1,"void PelletRoute(int array[10][10]) {
    int rowPos1 = 0;
    int colPos1 = 0;
    int rowPos2 = 0;
    int colPos2 = 0;
    int count = 0;
    int i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (array[i][j] == 1) {
                rowPos1 = i;
                colPos1 = j;
            }
            else if (array[i][j] == 2) {
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    if ((rowPos2 > rowPos1) && (colPos2 > colPos1)) {
        for (j = colPos1 + 1; j <= colPos2; j++) {
            i = rowPos1;
            array[i][j] = 3;
            count++;
        }
        for (i = rowPos1 + 1; i < rowPos2; i++) {
            j = colPos1 + count;
            array[i][j] = 3;
        }
    }

    if ((rowPos2 < rowPos1) && (colPos2 < colPos1)) {
        for (j = colPos1 - 1; j >= colPos2; j--) {
            i = rowPos1;
            array[i][j] = 3;
            count++;
        }
        for (i = rowPos1 - 1; i > rowPos2; i--) {
            j = colPos1 - count;
            array[i][j] = 3;
        }
    }

    if (colPos2 == colPos1) {
        if (rowPos2 > rowPos1) {
            for (i = rowPos1 + 1; i < rowPos2; i++) {
                j = colPos1;
                array[i][j] = 3;
            }
        }
        else {
            for (i = rowPos1 - 1; i > rowPos2; i--) {
                j = colPos1;
                array[i][j] = 3;
            }
        }
    }
    else if (rowPos2 == rowPos1) {
        if (colPos2 > colPos1) {
            for (j = colPos1 + 1; j < colPos2; j++) {
                i = rowPos1;
                array[i][j] = 3;
            }
        }
        else {
            for (j = colPos1 - 1; j > colPos2; j--) {
                i = rowPos1;
                array[i][j] = 3;
            }
        }
    }
}",0
byul423,1695712727,2,"void PelletRoute(int array[10][10]) {
    int rowPos1 = 0;
    int colPos1 = 0;
    int rowPos2 = 0;
    int colPos2 = 0;
    int count = 0;
    int i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (array[i][j] == 1) {
                rowPos1 = i;
                colPos1 = j;
            }
            else if (array[i][j] == 2) {
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    if ((rowPos2 > rowPos1) && (colPos2 > colPos1)) {
        for (j = colPos1 + 1; j <= colPos2; j++) {
            i = rowPos1;
            array[i][j] = 3;
            count++;
        }
        for (i = rowPos1 + 1; i < rowPos2; i++) {
            j = colPos1 + count;
            array[i][j] = 3;
        }
    }

    if ((rowPos2 < rowPos1) && (colPos2 < colPos1)) {
        for (j = colPos1 - 1; j >= colPos2; j--) {
            i = rowPos1;
            array[i][j] = 3;
            count++;
        }
        for (i = rowPos1 - 1; i > rowPos2; i--) {
            j = colPos1 - count;
            array[i][j] = 3;
        }
    }

    if ((rowPos2 < rowPos1) && (colPos2 > colPos1)) {
        for (j = colPos1 + 1; j <= colPos2; j++) {
            i = rowPos1; 
            array[i][j] = 3;
            count++;
        }
        for (i = rowPos1 - 1; i > rowPos2; i--) {
            j = colPos1 + count;
            array[i][j] = 3;
        }
    }

    if ((rowPos2 > rowPos1) && (colPos2 < colPos1)) {
        for (j = colPos1 - 1; j >= colPos2; j--) {
            i = rowPos1;
            array[i][j] = 3;
            count++;
        }
        for (i = rowPos1 + 1; i < rowPos2; i++) {
            j = colPos1 - count;
            array[i][j] = 3;
        }
    }

    if (colPos2 == colPos1) {
        if (rowPos2 > rowPos1) {
            for (i = rowPos1 + 1; i < rowPos2; i++) {
                j = colPos1;
                array[i][j] = 3;
            }
        }
        else {
            for (i = rowPos1 - 1; i > rowPos2; i--) {
                j = colPos1;
                array[i][j] = 3;
            }
        }
    }
    else if (rowPos2 == rowPos1) {
        if (colPos2 > colPos1) {
            for (j = colPos1 + 1; j < colPos2; j++) {
                i = rowPos1;
                array[i][j] = 3;
            }
        }
        else {
            for (j = colPos1 - 1; j > colPos2; j--) {
                i = rowPos1;
                array[i][j] = 3;
            }
        }
    }
}",1
cada577,1696065656,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])

{


    int i, j, end_row, end_col, start_row, start_col;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {

            if (warehouse[i][j] == 1) {
                start_row = i;
                start_col = j;
            }
        }
    }

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {

            if (warehouse[i][j] == 2) {
                end_row = i;
                end_col = j;

            }
        }
    }

    if (start_row != end_row && start_col != end_col) {
        if (end_col > start_col) {

            for (i = start_col + 1; i < end_col + 1; i++) {
                warehouse[start_row][i] = 3;
            }


        }




        if (end_col < start_col) {

            for (i = start_col - 1; i > end_col - 1; i--) {
                warehouse[start_row][i] = 3;
            }
        }

        if (end_row > start_row) {

            for (i = start_row + 1; i < end_row; i++) {
                warehouse[i][end_col] = 3;
            }
        }

        if (end_row < start_row) {

            for (i = start_row - 1; i > end_row; i--) {
                warehouse[i][end_col] = 3;
            }
        }

    }

    if (start_row == end_row && end_col > start_col) {
        for (i = start_col + 1; i < end_col; i++) {
            warehouse[start_row][i] = 3;
        }

    }

    if (start_row == end_row && end_col < start_col) {
        for (i = start_col - 1; i > end_col; i--) {
            warehouse[start_row][i] = 3;
        }

    }


    if (start_col == end_col && end_row > start_row) {
        for (i = start_row + 1; i < end_row; i++) {
            warehouse[i][end_col] = 3;
        }
    }


    if (start_col == end_col && end_row < start_row) {
        for (i = start_row - 1; i > end_row; i--) {
            warehouse[i][end_col] = 3;
        }
    }


}",1
cang688,1696043079,1,"void PelletRoute(int warehouse[10][10]) {
    //initialise all variables
    int RowPos,finalRowPos,ColPos,finalColPos,i,j;
    
    //for loop to find both the pellet and its destination the 10x10 grid
    for (i = 0; i < 10 ; i++) {
        for (j = 0; j < 10; j++) {
            //when the value is 1, this is the location of the pellet
            if (warehouse[i][j] == 1) {
                RowPos = i;
                ColPos = j;
            } 
            //when the value is 2, this is the location of the destination
            else if (warehouse[i][j] == 2) {
                finalRowPos = i;
                finalColPos = j;
            }
        }
    }

    //we move the pellet horizontally first, hence go across the columns first
    while (ColPos != finalColPos) {
        if (ColPos < finalColPos) {
            ColPos++;
        } 
        else {
            ColPos--;
        }
        //show the horizontal route with the value 3
        warehouse[RowPos][ColPos] = 3;
    }
    // move the pellet vertically
    while (RowPos != finalRowPos) {
        if (RowPos < finalRowPos) {
            RowPos++;
        } 
        else {
            RowPos--;
        }
        //show the vertical route with the value 3
        warehouse[RowPos][ColPos] = 3;
    }
    
    //after path is marked, remark the destination with value 2 to ensure correct output
    warehouse[finalRowPos][finalColPos] = 2;
}",1
cbee072,1695808163,1,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {

    //Creating variables
    int j;
    int i;
    int LocationR;
    int LocationC;
    int k;
    int L;
    int FinalR;
    int FinalC;
  
    //Finding the location of the Pellet
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                LocationR = i;
                LocationC = j;
            }
        }
    }
    
    //Finding the final position for the Pellet
    for (k = 0; k < 10; k++) {
        for (L = 0; L < 10; L++) {
            if (warehouse[k][L] == 2) {
                FinalR = k;
                FinalC = L;
            }
        }
    }
    
    
    /////////////////////////////////////////////////////
    
    //Finding the shortest route for cols
    if (FinalR - LocationR > 0) {
        //it is further along = go forwards
        for (i = LocationR + 1; i < FinalR; i++) {
            warehouse[i][FinalC] = 3;
        }
        
    }
    
    if (FinalR - LocationR < 0) {
        //it is behind = go backwards
        for (j = FinalR - 1; j < LocationR; j++) {
            warehouse[j][FinalC] = 3;
        }
    }
    
    ////////////////////////////////////////
    
    //Same for cols
    if (FinalC - LocationC > 0) {
        for (k = LocationC + 1; k < FinalC; k++) {
            warehouse[LocationR][k] = 3;
        }
        
    }
    
    if (FinalC - LocationC < 0) {
        for (L = FinalR - 1; L < LocationR; L++) {
            warehouse[LocationR][L] = 3;
        }
        
    }
    
    //////////////////////////////////////////////////
    
}
",0
cbee072,1695809496,2,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {

    //Creating variables
    int j;
    int i;
    int LocationR;
    int LocationC;
    int k;
    int L;
    int FinalR;
    int FinalC;
  
    //Finding the location of the Pellet
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                LocationR = i;
                LocationC = j;
            }
        }
    }
    
    //Finding the final position for the Pellet
    for (k = 0; k < 10; k++) {
        for (L = 0; L < 10; L++) {
            if (warehouse[k][L] == 2) {
                FinalR = k;
                FinalC = L;
            }
        }
    }
    
    
    /////////////////////////////////////////////////////
    
    //Finding the shortest route for cols
    if (FinalR - LocationR > 0) {
        //it is further along = go forwards
        for (i = LocationR; i <= FinalR; i++) {
            warehouse[i][FinalC] = 3;
        }
        
    }
    
    if (FinalR - LocationR < 0) {
        //it is behind = go backwards
        for (j = FinalR; j <= LocationR; j++) {
            warehouse[j][FinalC] = 3;
        }
    }
    
    ////////////////////////////////////////
    
    //Same for cols
    if (FinalC - LocationC > 0) {
        for (k = LocationC; k <= FinalC; k++) {
            warehouse[LocationR][k] = 3;
        }
        
    }
    
    if (FinalC - LocationC < 0) {
        for (L = FinalC; L <= LocationC; L++) {
            warehouse[LocationR][L] = 3;
        }
        
    }
    
    warehouse[LocationR][LocationC] = 1;
    warehouse[FinalR][FinalC] = 2;
    
    //////////////////////////////////////////////////
    
}
",1
cbro223,1695629377,1,"void PelletRoute(int warehouse[10][10]) {

    int startingRow, startingCol, endingRow, endingCol;
    //Find where the row and column of the 2 is 
    for(int i = 0; i < 10; i++ ) {
        for(int j = 0; j < 10; j++) {

            if(warehouse[i][j] == 1) {
                startingRow = i;
                startingCol = j;                
            }
            else if (warehouse[i][j]) {
                endingRow = i;
                endingCol = j;
            }
        }
    }
    //Move horizontally




    int horizontalMovement;
    //If behind, move to the left, if in front, move to the right
    if(startingCol < endingCol) {
        horizontalMovement = 1;
    }
    else {
        horizontalMovement = -1;
    }
    int currentCol = startingCol ;
    while(currentCol != endingCol) {
        currentCol += horizontalMovement;
        warehouse[startingRow][currentCol] = 3;
    }

    //Vertical Movement
    int verticalMovement;

    if(startingRow < endingCol) {
        verticalMovement = 1;
    }
    else {
        verticalMovement = -1;
    }

    int currentRow = startingRow +1;
    while(currentRow != endingRow) {
        warehouse[currentRow][endingCol] = 3;
        currentRow += horizontalMovement;
    }
}",0
cbro223,1695674920,2,"void PelletRoute(int warehouse[10][10]) {

    int startingRow, startingCol, endingRow, endingCol;
    //Find where the row and column of the 2 is 
    for(int i = 0; i < 10; i++ ) {
        for(int j = 0; j < 10; j++) {

            if(warehouse[i][j] == 1) {
                startingRow = i;
                startingCol = j;                
            }
            else if (warehouse[i][j] == 2) {
                endingRow = i;
                endingCol = j;
            }
        }
    }
    //Move horizontally




    int horizontalMovement;
    //If behind, move to the left, if in front, move to the right
    if(startingCol < endingCol) {
        horizontalMovement = 1;
    }
    else {
        horizontalMovement = -1;
    }
    int currentCol = startingCol ;
    while(currentCol != endingCol) {
        currentCol += horizontalMovement;
        warehouse[startingRow][currentCol] = 3;
    }

    //Vertical Movement
    int verticalMovement;

    if(startingRow < endingRow) {
        verticalMovement = 1;
    }
    else {
        verticalMovement = -1;
    }

    int currentRow = startingRow;
    while(currentRow != endingRow) {
        currentRow += verticalMovement;
        warehouse[currentRow][endingCol] = 3;
    }
    warehouse[currentRow][endingCol] = 2;
}",1
cbur703,1696071975,1,"void PelletRoute(int warehouse[10][10]) {
    
    int i, j, start, startrow, startcol, destination, destrow, destcol, col, row;
    
    for (i=0; i < 10; i++) {
        for (j=0; j < 10; j++) {
            
            if (warehouse[i][j] == 1) {
                start = warehouse[i][j];
                startrow = i;
                startcol = j;
            }
            if (warehouse[i][j] == 2) {
                destination = warehouse[i][j];
                destrow = i;
                destcol = j;
            }
        }
    }
    for (col = startcol + 1; col < destcol + 1; col++) {
        if (col != destcol || col == destcol) {
            warehouse[startrow][col] = 3;
        }
    }
    
    for (row = startrow + 1; row < destrow; row++) {
        if (row != destrow) {
            warehouse[row][destcol] = 3;
        }
    }
        
}
",0
cbur703,1696072091,2,"void PelletRoute(int warehouse[10][10]) {
    
    int i, j, startrow, startcol, destrow, destcol, col, row;
    
    for (i=0; i < 10; i++) {
        for (j=0; j < 10; j++) {
            
            if (warehouse[i][j] == 1) {
                startrow = i;
                startcol = j;
            }
            if (warehouse[i][j] == 2) {
                destrow = i;
                destcol = j;
            }
        }
    }
    for (col = startcol + 1; col < destcol + 1; col++) {
        if (col != destcol || col == destcol) {
            warehouse[startrow][col] = 3;
        }
    }
    
    for (row = startrow + 1; row < destrow; row++) {
        if (row != destrow) {
            warehouse[row][destcol] = 3;
        }
    }
        
}
",0
ccha663,1696163605,1,"
void PelletRoute(int warehouse[10][10]) {
    int store1, store2;
    int store3, store4;

    
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                store1 = row;
                store2 = col;
            } else if (warehouse[row][col] == 2) {
                store3 = row;
                store4 = col;
            }
        }
    }

    
    for (int j = store2 + 1; j < store4; j++) {
        warehouse[store1][j] = 3;
    }

    
    for (int i = store1 ; i < store3; i++) {
        warehouse[i][store4] = 3;
    }
}",0
ccha663,1696168041,2,"void PelletRoute(int warehouse[10][10]) {
    int srow1, scol1;
    int srow2, scol2;
    int x , y, z, d;

    
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                srow1 = row;
                scol1 = col;
            } else if (warehouse[row][col] == 2) {
                srow2 = row;
                scol2 = col;
            }
        }
    }

    if (srow2 < srow1 && scol2 < scol1 ) {
        x = srow2;
        y = srow1;
        z = scol1;
        d = scol2;
        for (int j = d; j < z; j++) {
            warehouse[y][j] = 3;
        }

        for (int i = x + 1; i < y; i++) {
            warehouse[i][d] = 3;
        }
            
    } 
    else if ( scol2 < scol1 && srow2 == srow1) {
        x = srow2;
        y = srow1;
        z = scol2;
        d = scol1;
        for (int j = z+1; j < d; j++) {
            warehouse[y][j] = 3;
        }
    }

    else {
        x = srow1;
        y = srow2;
        z = scol1;
        d = scol2;
        for (int j = z + 1; j < d; j++) {
        warehouse[x][j] = 3;
        }

    
        for (int i = x ; i < y; i++) {
            warehouse[i][d] = 3;
        }
        
        
    }    
        
            
     
    
}",0
ccha663,1696169889,3,"void PelletRoute(int warehouse[10][10]) {
    int srow1, scol1;
    int srow2, scol2;
    int x , y, z, d;

    
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                srow1 = row;
                scol1 = col;
            } else if (warehouse[row][col] == 2) {
                srow2 = row;
                scol2 = col;
            }
        }
    }

    if (srow2 < srow1 && scol2 < scol1 ) {
        x = srow2;
        y = srow1;
        z = scol1;
        d = scol2;
        for (int j = d; j < z; j++) {
            warehouse[y][j] = 3;
        }

        for (int i = x + 1; i < y; i++) {
            warehouse[i][d] = 3;
        }
            
    } 
    
    else if (srow2 < srow1 && scol2 > scol1 ) {
        x = srow1;
        y = srow2;
        z = scol1;
        d = scol2;
        for (int j = z + 1; j < d; j++) {
        warehouse[x][j] = 3;
        }

    
        for (int i = y + 1 ; i <= x; i++) {
            warehouse[i][d] = 3;
        }
            
    } 
    
    else if (srow2 > srow1 && scol2 < scol1 ) {
        x = srow1;
        y = srow2;
        z = scol1;
        d = scol2;
        
        for (int j = d + 1; j < z; j++) {
        warehouse[x][j] = 3;
        }

    
        for (int i = x ; i < y; i++) {
            warehouse[i][d] = 3;
        }
            
    } 
   

    else if ( scol2 < scol1 && srow2 == srow1) {
        x = srow2;
        y = srow1;
        z = scol2;
        d = scol1;
        for (int j = z+1; j < d; j++) {
            warehouse[y][j] = 3;
            
            
        }
    }


else if ( scol2 == scol1 && srow2 < srow1) {
        
        
        x = srow2;
        y = srow1;
        z = scol2;
        d = scol1;
        
            
        
        for (int i = x + 1; i < y; i++) {
            warehouse[i][d] = 3;    
            
            
        }
        
    }



    
    
    else if ( scol2 == scol1 && srow2 > srow1) {
        
        
        x = srow2;
        y = srow1;
        z = scol2;
        d = scol1;
        
            
        
        for (int i = y + 1; i < x; i++) {
            warehouse[i][d] = 3;    
            
            
        }
        
    }
    else {
        x = srow1;
        y = srow2;
        z = scol1;
        d = scol2;
        for (int j = z + 1; j < d; j++) {
        warehouse[x][j] = 3;
        }

    
        for (int i = x ; i < y; i++) {
            warehouse[i][d] = 3;
        }
        
        
    }    
        
            
     
    
}",1
ccha854,1696046617,1,"void PelletRoute(int warehouse[10][10]){

int i,j, rPos, cPos, r2Pos, c2Pos;
    for (i=0; i<10; i++) {
        for (j=0; j<10; j++) {
            if (warehouse[i][j] ==1) {
                rPos = i;
                cPos = j;
            }
            if (warehouse[i][j]==2) {
                r2Pos = i;
                c2Pos = j;
            }
            
        }
        
    }
    
    while (c2Pos>cPos) {
    cPos++;
    warehouse[rPos][cPos] = 3;
}
    while (cPos>c2Pos) {
    cPos--;
    warehouse[rPos][cPos]=3;
}
    while (rPos+1<r2Pos) {
    rPos++;
    warehouse[rPos][cPos]=3;
}
    while (r2Pos+1<rPos) {
    rPos--;
    warehouse[rPos][cPos]=3;
}

}

",0
ccha854,1696046685,2,"void PelletRoute(int warehouse[10][10]){

int i,j, rPos, cPos, r2Pos, c2Pos;
    for (i=0; i<10; i++) {
        for (j=0; j<10; j++) {
            if (warehouse[i][j] ==1) {
                rPos = i;
                cPos = j;
            }
            if (warehouse[i][j]==2) {
                r2Pos = i;
                c2Pos = j;
            }
            
        }
        
    }
    
    while (c2Pos>cPos+1) {
    cPos++;
    warehouse[rPos][cPos] = 3;
}
    while (cPos>c2Pos+1) {
    cPos--;
    warehouse[rPos][cPos]=3;
}
    while (rPos+1<r2Pos) {
    rPos++;
    warehouse[rPos][cPos]=3;
}
    while (r2Pos+1<rPos) {
    rPos--;
    warehouse[rPos][cPos]=3;
}

}

",0
ccha854,1696046974,3,"void PelletRoute(int warehouse[10][10]){

int i,j, rPos, cPos, r2Pos, c2Pos;
    for (i=0; i<10; i++) {
        for (j=0; j<10; j++) {
            if (warehouse[i][j] ==1) {
                rPos = i;
                cPos = j;
            }
            if (warehouse[i][j]==2) {
                r2Pos = i;
                c2Pos = j;
            }
            
        }
        
    }
    int tempr = r2Pos;
    int tempc = c2Pos;
    
    while (cPos<c2Pos) {
    cPos++;
    warehouse[rPos][cPos] = 3;
}
    while (c2Pos<cPos) {
    cPos--;
    warehouse[rPos][cPos]=3;
}
    while (rPos<r2Pos) {
    rPos++;
    warehouse[rPos][cPos]=3;
}
    while (r2Pos<rPos) {
    rPos--;
    warehouse[rPos][cPos]=3;
}
warehouse[tempr][tempc] = 2;
}

",1
cche441,1695694188,1,"void PelletRoute(int warehouse[10][10]){
    // Initiates varaibles.
    int current_row, current_col, final_row, final_col, value = 3;
    int x, y;

    // Finds the row and col the pallet is currently in and the row and col
    // needed to be moved to.
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                current_row = i;
                current_col = j;
                break;
            }
            if (warehouse[i][j] == 2){
                final_row = i;
                final_col = j;
                break;
            }
        }
    }

    //Finds the difference between rows and cols to determin the incrementation.
    x = final_col - current_col;
    y = final_row - current_row;

    if (x < 0){
        x = -1;
    }
    else{
        x = 1;
    }

    if (y < 0){
        y = -1;
    }
    else{
        y = 1;
    }

    //Changes th relevant indexes to 3.
    for (int j = current_col + x; j != final_col + x; j = j + x){
        warehouse[current_col][j] = value;
    }
    
    for (int i = current_row + y; i != final_row; i = i + y){
        warehouse[i][final_col] = value;
    }
}",0
cche441,1695696391,2,"void PelletRoute(int warehouse[10][10]){
    // Initiates varaibles.
    int current_row, current_col, final_row, final_col;
    int value = 3;
    int x = 0, y = 0;

    // Finds the row and col the pallet is currently in and the row and col
    // needed to be moved to.
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                current_row = i;
                current_col = j;
            }
            if (warehouse[i][j] == 2){
                final_row = i;
                final_col = j;
            }
        }
    }

    //Finds the difference between rows and cols to determin the incrementation.
    x = final_col - current_col;
    y = final_row - current_row;

    if (x < 0){
        x = -1;
    }
    else if (x > 0){
        x = 1;
    }

    if (y < 0){
        y = -1;
    }
    else if (y > 0){
        y = 1;
    }

    //Changes the relevant indexes to 3.
    if ((x != 0 && y != -1) || (x != 0 && y != 1) || (x != -1 && y != 0) || (x != 1 && y != 0)){
        if (x != 0){
            for (int j = current_col + x; j != final_col; j = j + x){
                warehouse[current_row][j] = value;
            }
        }

        if (y != 0){
            for (int i = current_row + y; i != final_row; i = i + y){
                warehouse[i][final_col] = value;
                printf(""i is %i\n"",i);
            }
        }
        if (x != 0 && y != 0){
            warehouse[current_row][final_col] = value;
        }
    }
}",0
cche441,1695696410,3,"void PelletRoute(int warehouse[10][10]){
    // Initiates varaibles.
    int current_row, current_col, final_row, final_col;
    int value = 3;
    int x = 0, y = 0;

    // Finds the row and col the pallet is currently in and the row and col
    // needed to be moved to.
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                current_row = i;
                current_col = j;
            }
            if (warehouse[i][j] == 2){
                final_row = i;
                final_col = j;
            }
        }
    }

    //Finds the difference between rows and cols to determin the incrementation.
    x = final_col - current_col;
    y = final_row - current_row;

    if (x < 0){
        x = -1;
    }
    else if (x > 0){
        x = 1;
    }

    if (y < 0){
        y = -1;
    }
    else if (y > 0){
        y = 1;
    }

    //Changes the relevant indexes to 3.
    if ((x != 0 && y != -1) || (x != 0 && y != 1) || (x != -1 && y != 0) || (x != 1 && y != 0)){
        if (x != 0){
            for (int j = current_col + x; j != final_col; j = j + x){
                warehouse[current_row][j] = value;
            }
        }

        if (y != 0){
            for (int i = current_row + y; i != final_row; i = i + y){
                warehouse[i][final_col] = value;
            }
        }
        if (x != 0 && y != 0){
            warehouse[current_row][final_col] = value;
        }
    }
}",1
cche873,1695815360,1,"void PelletRoute(int warehouse[10][10]) 
{
    int oneRows = -1;
    int oneCols = -1;
    int twoRows = -1;
    int twoCols = -1;
    
    // Find the positions of ""1"" and ""2""
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                oneRows = i;
                oneCols = j;
            }
            if (warehouse[i][j] == 2) {
                twoRows = i;
                twoCols = j;
            }
        }
    }
    
    int originaloneRows;
    int originaloneCols;
    int originaltwoRows;
    int originaltwoCols;
   
    originaloneRows = oneRows;
    originaloneCols = oneCols;
    originaltwoRows = twoRows;
    originaltwoCols = twoCols;
    
    int dx, dy;
    
    if (oneRows == twoRows) {
        dx = (oneCols <= twoCols) ? 1 : -1;
        dy = 0;
    }
    else if (oneCols == twoCols) {
        dx = 0;
        dy = (oneRows <= twoRows) ? 1 : -1;
    }
    else {
        dx = (oneCols < twoCols) ? 1 : -1;
        dy = (oneRows < twoRows) ? 1 : -1;
    }
    
    while (oneCols != twoCols) {
            oneCols += dx;
            warehouse[oneRows][oneCols] = 3;
        }

    while (oneRows != twoRows) {
        oneRows += dy;
        warehouse[oneRows][oneCols] = 3;
    }
    
    warehouse[originaloneRows][originaloneCols] = 1;
    warehouse[originaltwoRows][originaltwoCols] = 2;
}",1
cdel568,1695703329,1,"void PelletRoute(int warehouse[10][10]) 
{
    int i, j, rowDestin, colDestin, rowStart, colStart;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowDestin = i;
				colDestin = j;
			}
		}
	}

    for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

    int currentRow, currentCol;
    currentRow = rowStart;
    currentCol = colStart;

    if (colStart > colDestin) {
        currentCol = currentCol - 1;
        while (currentCol > colDestin) {
            warehouse[currentRow][currentCol] = 3;
            currentCol--;
        }
    } else if (colStart < colDestin) {
        currentCol = currentCol + 1;
       while (currentCol < colDestin) {
            warehouse[currentRow][currentCol] = 3;
            currentCol++;
        } 
    }

        if (rowStart > rowDestin) {
        while (currentRow > rowDestin) {
            warehouse[currentRow][currentCol] = 3;
            currentRow--;
        }
    } else if (rowStart < rowDestin) {
       while (currentRow < rowDestin) {
            warehouse[currentRow][currentCol] = 3;
            currentRow++;
        } 
    }

}",0
cdel568,1695703725,2,"void PelletRoute(int warehouse[10][10]) 
{
    int i, j, rowDestin, colDestin, rowStart, colStart;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowDestin = i;
				colDestin = j;
			}
		}
	}

    for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

    int currentRow, currentCol;
    currentRow = rowStart;
    currentCol = colStart;

    if (colStart == colDestin) {
        if (currentRow < rowDestin) {
            currentRow = currentRow + 1;
        } else if (currentRow > rowDestin) {
            currentRow = currentRow - 1;
        }
    }

    if (colStart > colDestin) {
        currentCol = currentCol - 1;
        while (currentCol > colDestin) {
            warehouse[currentRow][currentCol] = 3;
            currentCol--;
        }
    } else if (colStart < colDestin) {
        currentCol = currentCol + 1;
       while (currentCol < colDestin) {
            warehouse[currentRow][currentCol] = 3;
            currentCol++;
        } 
    }

        if (rowStart > rowDestin) {
        while (currentRow > rowDestin) {
            warehouse[currentRow][currentCol] = 3;
            currentRow--;
        }
    } else if (rowStart < rowDestin) {
       while (currentRow < rowDestin) {
            warehouse[currentRow][currentCol] = 3;
            currentRow++;
        } 
    }

}",1
cdin152,1696151327,1,"void PelletRoute(int warehouse[10][10])
{
	int row, col, vert, horz;
	int pellet_row, pellet_col;
	int destination_row, destination_col;

	/* Locate the position of the pellet and location*/
	for (row = 0; row < 10; row++) {
		for (col = 0; col < 10; col++) {
			if (warehouse[row][col] == 1) {
				pellet_row = row;
				pellet_col = col;
			}
			if (warehouse[row][col] == 2) {
				destination_row = row;
				destination_col = col;
			}
		}
	}

		/* Move horizontally */
		if (pellet_col < destination_col) {
			for (horz = pellet_col; horz <= destination_col; horz++) {
				if (warehouse[pellet_row][horz] == 0) {
					warehouse[pellet_row][horz] = 3;
				}
			}
		}
		if (pellet_col > destination_col) {
			for (horz = pellet_col; horz >= destination_col; horz--) {
				if (warehouse[pellet_row][horz] == 0) {
					warehouse[pellet_row][horz] = 3;
				}
			}
		}

		/* Move vertically */
		if (pellet_row < destination_row) {
			for (vert = pellet_row; vert <= destination_row; vert++) {
				if (warehouse[vert][destination_col] == 0) {
					warehouse[vert][destination_col] = 3;
				}
			}
		}
		if (pellet_row > destination_row) {
			for (vert = pellet_row; horz >= destination_row; vert--) {
				if (warehouse[vert][destination_col] == 0) {
					warehouse[vert][destination_col] = 3;
				}
			}
		}
}",0
cdin152,1696151936,2,"void PelletRoute(int warehouse[10][10])
{
	int row, col, vert, horz;
	int pellet_row, pellet_col;
	int destination_row, destination_col;

	/* Locate the position of the pellet and location*/
	for (row = 0; row < 10; row++) {
		for (col = 0; col < 10; col++) {
			if (warehouse[row][col] == 1) {
				pellet_row = row;
				pellet_col = col;
			}
			if (warehouse[row][col] == 2) {
				destination_row = row;
				destination_col = col;
			}
		}
	}

		/* Move horizontally */
		if (pellet_col < destination_col) {
			for (horz = pellet_col; horz <= destination_col; horz++) {
				if (warehouse[pellet_row][horz] == 0) {
					warehouse[pellet_row][horz] = 3;
				}
			}
		}
		if (pellet_col > destination_col) {
			for (horz = pellet_col; horz >= destination_col; horz--) {
				if (warehouse[pellet_row][horz] == 0) {
					warehouse[pellet_row][horz] = 3;
				}
			}
		}

		/* Move vertically */
		if (pellet_row < destination_row) {
			for (vert = pellet_row; vert <= destination_row; vert++) {
				if (warehouse[vert][destination_col] == 0) {
					warehouse[vert][destination_col] = 3;
				}
			}
		}
		if (pellet_row > destination_row) {
			for (vert = pellet_row; vert >= destination_row; vert--) {
				if (warehouse[vert][destination_col] == 0) {
					warehouse[vert][destination_col] = 3;
				}
			}
		}
}",1
cdin268,1695712341,1,"void PelletRoute(int warehouse[10][10]) {
    
    int i;
    int j;
    
    int rowPos1;
    int rowPos2;
    
    int colPos1;
    int colPos2;
    
    for (i = 0; i<10; i++) {
        for (j = 0; j<11; j++) {
            if (warehouse[i][j] == 1) {
                rowPos1 = i;
                colPos1 = j;
            }
        }
    }
    
    for (i = 0; i<10; i++) {
        for (j = 0; j<11; j++) {
            if (warehouse[i][j] == 2) {
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    
    while (colPos1 != colPos2) {
        if (colPos1 < colPos2) {
            colPos1 = colPos1 + 1;
            warehouse[rowPos1][colPos1] = 3;
        } else if (colPos1 > colPos2) {
            colPos1 = colPos1 - 1;
            warehouse[rowPos1][colPos1] = 3;
        }
    }
    
    while (rowPos1 != rowPos2 -1) {
        if (rowPos1 < rowPos2 -1) {
            rowPos1 = rowPos1 + 1;
            warehouse[rowPos1][colPos1] = 3;
        } else if (rowPos1 > rowPos2-1) {
            rowPos1 = rowPos1 - 1;
            warehouse[rowPos1][colPos1] = 3;
        }
    }
    
    
}",0
cdin268,1695712562,2,"void PelletRoute(int warehouse[10][10]) {
    
    int i;
    int j;
    
    int rowPos1;
    int rowPos2;
    
    int colPos1;
    int colPos2;
    
    for (i = 0; i<10; i++) {
        for (j = 0; j<11; j++) {
            if (warehouse[i][j] == 1) {
                rowPos1 = i;
                colPos1 = j;
            }
        }
    }
    
    for (i = 0; i<10; i++) {
        for (j = 0; j<11; j++) {
            if (warehouse[i][j] == 2) {
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    
    while (colPos1 != colPos2) {
        if (colPos1 < colPos2) {
            colPos1 = colPos1 + 1;
            warehouse[rowPos1][colPos1] = 3;
        } else if (colPos1 > colPos2) {
            colPos1 = colPos1 - 1;
            warehouse[rowPos1][colPos1] = 3;
        }
    }
    
    while (rowPos1 != rowPos2) {
        if (rowPos1 < rowPos2) {
            rowPos1 = rowPos1 + 1;
            warehouse[rowPos1][colPos1] = 3;
        } else if (rowPos1 > rowPos2) {
            rowPos1 = rowPos1 - 1;
            warehouse[rowPos1][colPos1] = 3;
        }
    }
    
    warehouse[rowPos2][colPos2] = 2;
}",1
cgaz516,1695807165,1,"void PelletRoute(int warehouse[10][10])
{
	int pellet_row;
	int pellet_col;
	int destination_row;
	int destination_col;

	// Find the location of both where the pellet is and where the destination is
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pellet_row = i;
				pellet_col = j;
			}
			if (warehouse[i][j] == 2) {
				destination_row = i;
				destination_col = j;
			}
		}
	}

	// Make a path horizontal right if destination is to right
	if (destination_col > pellet_col)
		for (int i = pellet_col; i <= destination_col; i++) {
			if (warehouse[pellet_row][i] == 0) {
				warehouse[pellet_row][i] = 3;
			}
		}

	// Make a path horizontal left if destination is to left
	if (destination_col < pellet_col)
		for (int i = destination_col; i <= pellet_col; i++) {
			if (warehouse[pellet_row][i] == 0) {
				warehouse[pellet_row][i] = 3;
			}
		}

	// Make a path vertical down if destination is below
	if (destination_row > pellet_row) {
		for (int i = pellet_row; i <= destination_row; i++) {
			if (warehouse[i][destination_col] == 0) {
				warehouse[i][destination_col] = 3;
			}
		}
	}

	// Make a path vertical up if destination is above
	if (destination_row < pellet_row) {
		for (int i = destination_row; i <= pellet_row; i++) {
			if (warehouse[i][destination_col] == 0) {
				warehouse[i][destination_col] = 3;
			}
		}
	}
}",1
chua804,1696219979,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{    
    int startx = -1;
    int starty = -1;
    int finishx = -1;
    int finishy = -1;

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                startx = i;
                starty = j;
            }
            if (warehouse[i][j] == 2)
            {
                finishx = i;
                finishy = j;
            }
        }
    }

    while (starty != finishy) {
        if (starty < finishy) {
            starty++;
        } else {
            starty--;
        }
        warehouse[startx][starty] = 3;
    }

    while (startx != finishx) {
        if (startx < finishx) {
            startx++;
        } else {
            startx--;
        }
        warehouse[startx][starty] = 3;
    }
    
    warehouse[finishx][finishy] = 2;
}
",1
civa625,1696205581,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int row1, col1, row2, col2;
    int a, b;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            else if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    if (col1 < col2) {
        for(a = col1 + 1; a <= col2; a++) {
            warehouse[row1][a] = 3;
        }
    }
    else if (col1 > col2) {
        for(a = col1 - 1; a >= col2; a--) {
            warehouse[row1][a] = 3;
        }
    }
    
    if (row1 < row2) {
        for(b = row1; b < row2; b++) {
            warehouse[b][col2] = 3;
        }
    }
    else if (row1 > row2) {
        for(b = row1; b > row2; b--) {
            warehouse[b][col2] = 3;
        }
    }
    
    if (row1 == row2){
        warehouse[row2][col2] = 2;
    }
    
    if (col1 == col2){
        warehouse[row1][col1] = 1;
    }
}",1
clee482,1696202618,1,"void PelletRoute(int warehouse[10][10])
{
    int firstrow, firstcol;
    int secondrow, secondcol;
    for(int i=0; i<10; i++)
    {
        for(int j=0; j<10; j++)
        {
            if (warehouse[i][j]==1)
            {
            firstrow = i;
            firstcol = j;
            }
            else if (warehouse[i][j]==2)
            {
            secondrow = i;
            secondcol = j;
            
            }
        }
    }
int rowdifference, coldifference;
rowdifference = firstrow-secondrow;
coldifference = firstcol-secondcol;

if (coldifference <0)
{
        int k;
        k = firstcol+1;
        for(k; k<secondcol; k++)
        {
            warehouse[firstrow][k] = 3;
        }
        
        if(rowdifference<0)
        {
            int l;
            l = firstrow;
            for(l; l<secondrow; l++)
            {
                warehouse[l][k]=3;
                
            }
        }
        else if (rowdifference>0)
        {
            int l;
            l = secondrow+1;
            for(l; l<firstrow+1; l++)
            {
                warehouse[l][k]=3;
                
            }
        }
}
    
else if (coldifference > 0)
{
    int k;
    k = secondcol+1;
    for(k; k<firstcol; k++)
    {
        warehouse[secondrow][k] = 3;
     }
        
    if(rowdifference<0)
    {
        int l;
        l = firstrow+1;
        for(l; l<secondrow+1; l++)
        {
            warehouse[l][k]=3;
        }
        
    
    }
    else if (rowdifference>0)
    {
        int l;
        l = secondrow;
        for(l; l<firstrow; l++)
        {
            warehouse[l][k]=3;          
        }
    }
}
}",0
clee482,1696218368,2,"void PelletRoute(int warehouse[10][10])
{
    int firstrow, firstcol;
    int secondrow, secondcol;
    for(int i=0; i<10; i++)
    {
        for(int j=0; j<10; j++)
        {
            if (warehouse[i][j]==1)
            {
            firstrow = i;
            firstcol = j;
            }
            else if (warehouse[i][j]==2)
            {
            secondrow = i;
            secondcol = j;
            
            }
        }
    }
int rowdifference, coldifference;
rowdifference = firstrow-secondrow;
coldifference = firstcol-secondcol;

if (coldifference <0)
{
        int k;
        k = firstcol+1;
        for(; k<secondcol; k++)
        {
            warehouse[firstrow][k] = 3;
        }
        
        if(rowdifference<0)
        {
            int l;
            l = firstrow;
            for(; l<secondrow; l++)
            {
                warehouse[l][k]=3;
                
            }
        }
        else if (rowdifference>0)
        {
            int l;
            l = secondrow+1;
            for(; l<firstrow+1; l++)
            {
                warehouse[l][k]=3;
                
            }
        }
}
    
else if (coldifference > 0)
{
    int k;
    k = secondcol+1;
    for(; k<firstcol; k++)
    {
        warehouse[secondrow][k] = 3;
     }
        
    if(rowdifference<0)
    {
        int l;
        l = firstrow+1;
        for(; l<secondrow+1; l++)
        {
            warehouse[l][k]=3;
        }
        
    
    }
    else if (rowdifference>0)
    {
        int l;
        l = secondrow;
        for(; l<firstrow; l++)
        {
            warehouse[l][k]=3;          
        }
    }
}
}
",0
clee482,1696220371,3,"void PelletRoute(int warehouse[10][10])
{
    int firstrow, firstcol;
    int secondrow, secondcol;
    for(int i=0; i<10; i++)
    {
        for(int j=0; j<10; j++)
        {
            if (warehouse[i][j]==1)
            {
            firstrow = i;
            firstcol = j;
            }
            else if (warehouse[i][j]==2)
            {
            secondrow = i;
            secondcol = j;
            
            }
        }
    }
int rowdifference, coldifference;
rowdifference = firstrow-secondrow;
coldifference = firstcol-secondcol;

if (rowdifference == -1)
{
    int k = 0;
    for(; k<firstcol; k++)
    {
        warehouse[firstrow][k] = 3;
    }
    
}
else if (coldifference <0)
{
        int k;
        k = firstcol+1;
        for(; k<secondcol; k++)
        {
            warehouse[firstrow][k] = 3;
        }
        
        if(rowdifference<0)
        {
            int l;
            l = firstrow;
            for(; l<secondrow; l++)
            {
                warehouse[l][k]=3;
                
            }
        }
        else if (rowdifference>0)
        {
            int l;
            l = secondrow+1;
            for(; l<firstrow+1; l++)
            {
                warehouse[l][k]=3;
                
            }
        }
}
    
else if (coldifference > 0)
{
    int k;
    k = secondcol+1;
    for(; k<firstcol; k++)
    {
        warehouse[firstrow][k] = 3;
     }
        
    if(rowdifference<0)
    {

        int l;
        l = firstrow+1;
        for(; l<secondrow+1; l++)
        {
            warehouse[l][k]=3;
        }
        
    
    }
    else if (rowdifference>0)
    {
        int l;
        l = secondrow+1;
        for(; l<firstrow+1; l++)
        {
            warehouse[l][secondcol]=3;          
        }
    }
}
else if(coldifference == 0)
{
    if(rowdifference<0)
    {
        int l;
        l = firstrow+1;
        for(; l<secondrow; l++)
        {
            warehouse[l][firstcol]=3;
        }
        
    
    }
    else if (rowdifference>0)
    {
        int l;
        l = secondrow+1;
        for(; l<firstrow; l++)
        {
            warehouse[l][secondcol]=3;          
        }
    }
}
}",0
clee482,1696220655,4,"void PelletRoute(int warehouse[10][10])
{
    int firstrow, firstcol;
    int secondrow, secondcol;
    for(int i=0; i<10; i++)
    {
        for(int j=0; j<10; j++)
        {
            if (warehouse[i][j]==1)
            {
            firstrow = i;
            firstcol = j;
            }
            else if (warehouse[i][j]==2)
            {
            secondrow = i;
            secondcol = j;
            
            }
        }
    }
int rowdifference, coldifference;
rowdifference = firstrow-secondrow;
coldifference = firstcol-secondcol;

if (rowdifference == -1)
{
    if (firstcol>secondcol)
    {
        int k = 0;
        for(; k<firstcol; k++)
        {
            warehouse[firstrow][k] = 3;
        }
    }
    else if (firstcol<secondcol)
    {
        int k = 1;
        for(; k<secondcol+1; k++)
        {
            warehouse[firstrow][k] = 3;
        }
    }
    
}
else if (coldifference <0)
{
        int k;
        k = firstcol+1;
        for(; k<secondcol; k++)
        {
            warehouse[firstrow][k] = 3;
        }
        
        if(rowdifference<0)
        {
            int l;
            l = firstrow;
            for(; l<secondrow; l++)
            {
                warehouse[l][k]=3;
                
            }
        }
        else if (rowdifference>0)
        {
            int l;
            l = secondrow+1;
            for(; l<firstrow+1; l++)
            {
                warehouse[l][k]=3;
                
            }
        }
}
    
else if (coldifference > 0)
{
    int k;
    k = secondcol+1;
    for(; k<firstcol; k++)
    {
        warehouse[firstrow][k] = 3;
     }
        
    if(rowdifference<0)
    {

        int l;
        l = firstrow+1;
        for(; l<secondrow+1; l++)
        {
            warehouse[l][k]=3;
        }
        
    
    }
    else if (rowdifference>0)
    {
        int l;
        l = secondrow+1;
        for(; l<firstrow+1; l++)
        {
            warehouse[l][secondcol]=3;          
        }
    }
}
else if(coldifference == 0)
{
    if(rowdifference<0)
    {
        int l;
        l = firstrow+1;
        for(; l<secondrow; l++)
        {
            warehouse[l][firstcol]=3;
        }
        
    
    }
    else if (rowdifference>0)
    {
        int l;
        l = secondrow+1;
        for(; l<firstrow; l++)
        {
            warehouse[l][secondcol]=3;          
        }
    }
}
}",0
clob269,1695790152,1,"
void PelletRoute(int warehouse[10][10]) {

	int row1, row2, col1, col2;
	bool done = false;


	for (int i = 0; i <= 9; i++) {
		for (int j = 0; j <= 9; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
				done = true;
				break;
			}
		}
		if (done) {
			break;
		}
	}

	done = false;

	for (int i = 0; i <= 9; i++) {
		for (int j = 0; j <= 9; j++) {
			if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
				done = true;
				break;
			}
		}
		if (done) {
			break;
		}
	}

	bool right = false, down = false;

	if (col2 >= col1) {
		right = true;
	}

	if (row2 >= row1) {
		down = true;
	}

	switch (right) {
	case (true):
		while (col1 != col2) {

			col1++;

			if ((row1 == row2) && (col1 == col2)) {
				break;
			}
			warehouse[row1][col1] = 3;
		}
		break;
	case (false):
		while (col1 != col2) {

			col1--;

			if ((row1 == row2) && (col1 == col2)) {
				break;
			}
			warehouse[row1][col1] = 3;
		}
		break;

	}

	switch (down) {
	case (true):
		while (row1 != row2) {

			row1++;

			if ((row1 == row2) && (col1 == col2)) {
				break;
			}
			warehouse[row1][col1] = 3;
		}
		break;
	case (false):
		while (row1 != row2) {

			row1--;

			if ((row1 == row2) && (col1 == col2)) {
				break;
			}
			warehouse[row1][col1] = 3;
		}
		break;

	}


}",1
cmia215,1695783453,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]) {
	int startcol, startrow, endcol, endrow;
	int i, j, hstep, vstep;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (warehouse[i][j] == 1) {
				startrow = i;
				startcol = j;
				//printf(""%d, 3"", warehouse[i][j]);
			}
			if (warehouse[i][j] == 2) {
				endrow = i;
				endcol = j;
				//printf(""%d, %d 3"", endrow, endcol);
			}
		}
	}
	hstep = startcol - endcol;
	//printf(""%d, 3"", hstep);
	vstep = startrow - endrow;
	//printf(""%d, 3"", vstep);
	if (hstep > 0) {
		for (i = 0; i < hstep; i++) {
			warehouse[startrow][startcol - i] = 3;
			//printf(""%d, %d 3"", startrow, startcol + i);
		}
	}
	else {
		for (i = hstep; i < 0; i++) {
			warehouse[startrow][startcol - i] = 3;
			//printf(""%d, %d 3"", startrow, startcol - i);
		}
	}
	if (vstep > 0) {
		for (j = 0; j < vstep; j++) {
			warehouse[startrow - j][endcol] = 3;
		}
	}
	else {
		for (j = vstep; j < 0; j++) {
			warehouse[startrow - j][endcol] = 3;
		}
	}
	warehouse[endrow][endcol] = 2;
	warehouse[startrow][startcol] = 1;
}",0
cmia215,1695788025,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]) {
	int startcol, startrow, endcol, endrow;
	int i, j, leftcol, rightcol, uprow, downrow;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (warehouse[i][j] == 1) {
				startrow = i;
				startcol = j;
				//printf(""%d, 3"", warehouse[i][j]);
			}
			if (warehouse[i][j] == 2) {
				endrow = i;
				endcol = j;
				//printf(""%d, %d 3"", endrow, endcol);
			}
		}
	}
	if (startcol > endcol) {
		leftcol = endcol;
		rightcol = startcol;
	}
	else {
		leftcol = startcol;
		rightcol = endcol;
	}
	for ( j = leftcol; j <= rightcol; j++)
	{
		warehouse[startrow][j] = 3;
	}

	if (startrow > endrow) {
		uprow = endrow;
		downrow = startrow;
	}
	else {
		uprow = startrow;
		downrow = endrow;
	}
	for (i = uprow; i <= downrow; i++)
	{
		warehouse[i][endcol] = 3;
	}
	warehouse[startrow][startcol] = 1;
	warehouse[endrow][endcol] = 2;
}",1
cmot464,1695671564,1,"void PelletRoute(int warehouse[10][10])
{

    int horzDist, vertDist; // distance variables
    int i, j; // iterators
    int currentRow, currentCol, finalRow, finalCol; // position vars
    int length = 10;

    // find the 1 and 2 cells

    for(j = 0; j < length; j++)
    {
        for(i = 0; i < length; i++)
        {
            if(warehouse[j][i] == 1)
            {
                currentRow = j;
                currentCol = i;
            }
            else if(warehouse[j][i] == 2)
            {
                finalRow = j;
                finalCol = i;
            }
        }
    }

    // define initial distances
    horzDist = finalCol - currentCol; // if to the right then dist is +ve
    vertDist = finalRow - currentRow; /// if down dist is +ve

    currentCol += 1 * ((horzDist > 0) - (horzDist < 0)); // make the first step to prevent rewriting the #1

    while(horzDist != 0){
        warehouse[currentRow][currentCol] = 3; // set the path
        currentCol += 1 * ((horzDist > 0) - (horzDist < 0)); // if +ve then add 1 if -ve -1
        horzDist = finalCol - currentCol;
        }

    // no need to rerun before loop as 3 will become 3

    while(vertDist != 0){
        warehouse[currentRow][currentCol] = 3; // set the path
        currentRow += 1 * ((vertDist > 0) - (vertDist < 0));
        vertDist = finalRow - currentRow;
    }
}",0
cmot464,1695674895,2,"void PelletRoute(int warehouse[10][10])
{

    int horzDist, vertDist; // distance variables
    int i, j; // iterators
    int currentRow, currentCol, finalRow, finalCol; // position vars
    int length = 10;
    int initCol, initRow;

    // find the 1 and 2 cells

    for(j = 0; j < length; j++)
    {
        for(i = 0; i < length; i++)
        {
            if(warehouse[j][i] == 1)
            {
                currentRow = j;
                currentCol = i;
                initRow = j;
                initCol = i;
            }
            else if(warehouse[j][i] == 2)
            {
                finalRow = j;
                finalCol = i;
            }
        }
    }

    // define initial distances
    horzDist = finalCol - currentCol; // if to the right then dist is +ve
    vertDist = finalRow - currentRow; /// if down dist is +ve

    currentCol += 1 * ((horzDist > 0) - (horzDist < 0)); // make the first step to prevent rewriting the #1

    while(horzDist !=0){
        warehouse[currentRow][currentCol] = 3; // set the path
        currentCol += 1 * ((horzDist > 0) - (horzDist < 0)); // if +ve then add 1 if -ve -1
        horzDist = finalCol - currentCol;
        }

    while(vertDist){ // stop 1 before to no overwrite
        warehouse[currentRow][currentCol] = 3; // set the path
        currentRow += 1 * ((vertDist > 0) - (vertDist < 0));
        vertDist = finalRow - currentRow;
    }

    warehouse[finalRow][finalCol] = 2; // make sure destination not overwritten
    warehouse[initRow][initCol] = 1; // make sure initial destination not overwritten
}",1
coli772,1695612971,1,"void PelletRoute(int warehouse[10][10]) {
    int row1, col1, row2, col2;
    int row_diff, col_diff, row_sign, col_sign;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    row_diff = row1 - row2;
    col_diff = col1 - col2;
    row_sign = row_diff > 0 ? -1 : 1;
    col_sign = col_diff > 0 ? -1 : 1;
    for (int k = row1; k != row2; k += row_sign) {
        if (k != row2) {
            warehouse[k][col2] = 3;
        }
    }
    for (int l = col1; l != col2; l += col_sign) {
        if (l != col1) {
            warehouse[row1][l] = 3;
        }
    }
}
",0
coli772,1695613319,2,"void PelletRoute(int warehouse[10][10]) {
    int row1, col1, row2, col2;
    int row_diff, col_diff, row_sign, col_sign;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    row_diff = row1 - row2;
    col_diff = col1 - col2;
    row_sign = row_diff > 0 ? -1 : 1;
    col_sign = col_diff > 0 ? -1 : 1;
    for (int k = row1; k != row2; k += row_sign) {
        warehouse[k][col2] = 3;
    }
    for (int l = col1; l != col2; l += col_sign) {
        warehouse[row1][l] = 3;
    }
    warehouse[row1][col1] = 1;
    warehouse[row2][col2] = 2;
}",1
couy656,1695785357,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destinationRow, destinationCol;

    // Find the pellet and destination positions
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    // Move the pellet horizontally to line up with the destination
    while (pelletCol != destinationCol) {
        warehouse[pelletRow][pelletCol] = 3;
        pelletCol += (pelletCol < destinationCol) ? 1 : -1;
    }
    warehouse[pelletRow][pelletCol] = 3;

    // Move the pellet vertically to reach the destination
    while (pelletRow != destinationRow) {
        warehouse[pelletRow][pelletCol] = 3;
        pelletRow += (pelletRow < destinationRow) ? 1 : -1;
    }
    warehouse[pelletRow][pelletCol] = 3;
}",0
couy656,1695785444,2,"void PelletRoute(int warehouse[10][10]) {
    int pellet_row, pellet_col, dest_row, dest_col;
    // Find the pellet and destination coordinates
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    // Move horizontally first
    while (pellet_col != dest_col) {
        if (pellet_col < dest_col) {
            pellet_col++;
        } else {
            pellet_col--;
        }
        warehouse[pellet_row][pellet_col] = 3;
    }
    // Move vertically next
    while (pellet_row != dest_row) {
        if (pellet_row < dest_row) {
            pellet_row++;
        } else {
            pellet_row--;
        }
        warehouse[pellet_row][pellet_col] = 3;
    }
}",0
csan114,1695807413,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int finishrow = 0;
	int finishcol = 0;
	int startrow = 0;
	int startcol = 0;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startrow = i;
				startcol = j;
			}

			if (warehouse[i][j] == 2) {
				finishrow = i;
				finishcol = j;
			}
		}
	}

	for (int k = startcol + 1; k < finishcol+1; k++) {
		warehouse[startrow][k] = 3;
	}

	for (int c = startrow + 1; c < finishrow; c++) {
		warehouse[c][finishcol] = 3;
	}
}",0
csan114,1695808576,2,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int finishrow = 0;
	int finishcol = 0;
	int startrow = 0;
	int startcol = 0;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startrow = i;
				startcol = j;
			}

			if (warehouse[i][j] == 2) {
				finishrow = i;
				finishcol = j;
			}
		}
	}

	if (startcol == finishcol) {
		for (int k = startcol + 1; k < finishcol; k++) {
			warehouse[startrow][k] = 3;
		}
	}
	else {
		for (int k = startcol + 1; k < finishcol + 1; k++) {
			warehouse[startrow][k] = 3;
		}
	}

	for (int k = startrow + 1; k < finishrow; k++) {
		warehouse[k][finishcol] = 3;
	}
	
	if (startrow == finishrow) {
		for (int k = startcol - 1; k > finishcol; k--) {
			warehouse[startrow][k] = 3;
		}
	}
	else {
		for (int k = startcol - 1; k > finishcol - 1; k--) {
			warehouse[startrow][k] = 3;
		}
	}

	for (int k = startrow - 1; k > finishrow; k--) {
		warehouse[k][finishcol] = 3;
	}


}",1
cset571,1695626856,1,"void PelletRoute(int warehouse[10][10]) {
	int i, j, rowstart, colstart, rowend, colend;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowstart = i;
				colstart = j;
			}
			if (warehouse[i][j] == 2) {
				rowend = i;
				colend = j;
			}
		}
	}


	int rowdif, coldif;

	rowdif = rowend - rowstart;
	coldif = colend - colstart;
	

	if (coldif != 0 && rowdif != 0) {
		warehouse[rowstart][colend] = 3;
	}

	if (coldif > 0) {
		for (j = colstart + 1; j < colend; j++) {
			warehouse[rowstart][j] = 3;
		}
	}

	if (coldif < 0) {
		for (j = colend + 1; j < colstart; j++) {
			warehouse[rowstart][j] = 3;
		}
	}

	if (rowdif > 0) {
		for (i = rowstart + 1; i < rowend; i++) {
			warehouse[i][colend] = 3;
		}
	}
	if (rowdif < 0) {
		for (i = rowend + 1; i < rowstart; i++) {
			warehouse[i][colend] = 3;
		}
	}

}",1
cste189,1695783693,1,"void PelletRoute(int warehouse[10][10])
{
	int i = 0, j = 0;
	int palletRow, palletCol, destRow, destCol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				palletRow = i;
				palletCol = j;
			}
			if (warehouse[i][j] == 2) {
				destRow = i;
				destCol = j;
			}
		}
	}

	if (palletCol - destCol < 0) {
		while (palletCol != destCol) {
			palletCol = palletCol + 1;
			warehouse[palletRow][palletCol] = 3;
		}
	}
	else if (palletCol - destCol > 0) {
		while (palletCol != destCol) {
			palletCol = palletCol - 1;
			warehouse[palletRow][palletCol] = 3;
		}
	}

	if (palletRow - destRow < 0) {
		while (palletRow != destRow) {
			palletRow = palletRow + 1;
			warehouse[palletRow][palletCol] = 3;
		}
	}
	else if (palletRow - destRow > 0) {
		while (palletRow != destRow) {
			palletRow = palletRow - 1;
			warehouse[palletRow][palletCol] = 3;
		}
	}
	warehouse[palletRow][palletCol] = 2;

}",1
ctub889,1696228459,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destinationRow, destinationCol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }

        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destinationRow) {
        if (pelletRow < destinationRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }

        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
cwei506,1696054856,1,"void PelletRoute(int warehouse[10][10]) 
{

    int i, j;
    int row, col, rowD, colD;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row = i;
                col = j;
            }
            if (warehouse[i][j] == 2) {
                rowD = i;
                colD = j;
            }
        }
    }

    if (row < rowD) {
        for (i = row + 1; i < rowD; i++) {
            warehouse[i][col] = 3;
        }
    }
    if (row > rowD) {
        for (i = row - 1; i > rowD; i--) {
            warehouse[i][col] = 3;
        }
    }
    if (col < colD) {
        for (j = col + 1; j < colD; i++) {
            warehouse[row][j] = 3;
        }
    }
    if (col > colD) {
        for (j = col - 1; j > colD; i--) {
            warehouse[row][j] = 3;
        }
    }

}",0
cwei506,1696056444,2,"void PelletRoute(int warehouse[10][10]) {

    int i, j;
    int row, col, rowD, colD;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row = i;
                col = j;
            }
            if (warehouse[i][j] == 2) {
                rowD = i;
                colD = j;
            }
        }
    }

    if (col < colD) {
        for (i = col + 1; i < colD; i++) {
            warehouse[row][i] = 3;
        }
    }
    if (col > colD) {
        for (i = col - 1; i > colD; i--) {
            warehouse[row][i] = 3;
        }
    }

    if (row < rowD) {
        for (j = row; j < rowD; j++) {
            warehouse[j][colD] = 3;
        }
    }
    if (row > rowD) {
        for (j = row; j > rowD; j--) {
            warehouse[j][colD] = 3;
        }
    }

}",0
cwei506,1696056961,3,"void PelletRoute(int warehouse[10][10]) {

    int i, j;
    int row = -1, col = -1, rowD = -1, colD = -1;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row = i;
                col = j;
            }
            if (warehouse[i][j] == 2) {
                rowD = i;
                colD = j;
            }
        }
    }

    if (col < colD) {
        for (i = col + 1; i < colD; i++) {
            warehouse[row][i] = 3;
        }
        if (row < rowD) {
            for (j = row; j < rowD; j++) {
                warehouse[j][colD] = 3;
            }
        }
        if (row > rowD) {
            for (j = row; j > rowD; j--) {
                warehouse[j][colD] = 3;
            }
        }
    }
    if (col > colD) {
        for (i = col - 1; i > colD; i--) {
            warehouse[row][i] = 3;
        }
        if (row < rowD) {
            for (j = row; j < rowD; j++) {
                warehouse[j][colD] = 3;
            }
        }
        if (row > rowD) {
            for (j = row; j > rowD; j--) {
                warehouse[j][colD] = 3;
            }
        }
    }

    if (col == colD) {
        if (row < rowD) {
            for (j = row + 1; j < rowD; j++) {
                warehouse[j][colD] = 3;
            }
        }
        if (row > rowD) {
            for (j = row - 1; j > rowD; j--) {
                warehouse[j][colD] = 3;
            }
        }

    }

}",1
cwu200,1696226690,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletrow, pelletcol;
    int drow, dcol;
  
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletrow = i;
                pelletcol = j;
            } else if (warehouse[i][j] == 2) {
                drow = i;
                dcol = j;
            }
        }
    }

    while (pelletcol != dcol) {
        if (pelletcol < dcol) {
            pelletcol++;
        } else {
            pelletcol--;
        }
        if (warehouse[pelletrow][pelletcol] != 2) {
            warehouse[pelletrow][pelletcol] = 3;
        }
    }

    while (pelletrow != drow) {
        if (pelletrow < drow) {
            pelletrow++;
        } else {
            pelletrow--;
        }
        if (warehouse[pelletrow][pelletcol] != 2) {
            warehouse[pelletrow][pelletcol] = 3;
        }
    }
}",1
cyan312,1695960457,1,"void PelletRoute(int warehouse[10][10]) {
	int pelletRow, pelletCol, destinationRow, destinationCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10, j++) {
			if (warehouse[i][j] == 1) {
				pelletRow = i;
				pelletCol = j;
			}
			else if (warehouse[i][j] == 2) {
				destinationRow = i;
				destinationCol = j;
			}
		}
	}
	while (pelletCol != destinationCol) {
		if (pelletCol < destinationCol) {
			pelletCol = pelletCol + 1;
		}
		else if (pelletCol > destinationCol) {
			pelletCol = pelletCol - 1;
		}
		warehouse[pelletRow][pelletCol] = 3;
	}
	while (pelletRow != destinationRow) {
		if (pelletRow < destinationRow) {
			pelletCol = pelletCol + 1
		}
		else if (pelletRow > destinationRow) {
			pelletRow = pelletRow - 1;
			}
		warehouse[pelletRow][pelletCol] = 3;
	}

}",0
cyan312,1695960513,2,"void PelletRoute(int warehouse[10][10]) {
	int pelletRow, pelletCol, destinationRow, destinationCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletRow = i;
				pelletCol = j;
			}
			else if (warehouse[i][j] == 2) {
				destinationRow = i;
				destinationCol = j;
			}
		}
	}
	while (pelletCol != destinationCol) {
		if (pelletCol < destinationCol) {
			pelletCol = pelletCol + 1;
		}
		else if (pelletCol > destinationCol) {
			pelletCol = pelletCol - 1;
		}
		warehouse[pelletRow][pelletCol] = 3;
	}
	while (pelletRow != destinationRow) {
		if (pelletRow < destinationRow) {
			pelletCol = pelletCol + 1
		}
		else if (pelletRow > destinationRow) {
			pelletRow = pelletRow - 1;
			}
		warehouse[pelletRow][pelletCol] = 3;
	}

}",0
cyan312,1695960544,3,"void PelletRoute(int warehouse[10][10]) {
	int pelletRow, pelletCol, destinationRow, destinationCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletRow = i;
				pelletCol = j;
			}
			else if (warehouse[i][j] == 2) {
				destinationRow = i;
				destinationCol = j;
			}
		}
	}
	while (pelletCol != destinationCol) {
		if (pelletCol < destinationCol) {
			pelletCol = pelletCol + 1;
		}
		else if (pelletCol > destinationCol) {
			pelletCol = pelletCol - 1;
		}
		warehouse[pelletRow][pelletCol] = 3;
	}
	while (pelletRow != destinationRow) {
		if (pelletRow < destinationRow) {
			pelletCol = pelletCol + 1;
		}
		else if (pelletRow > destinationRow) {
			pelletRow = pelletRow - 1;
			}
		warehouse[pelletRow][pelletCol] = 3;
	}

}",0
cyan312,1696233145,4,"void PelletRoute(int warehouse[10][10]) {
	int pelletRow, pelletCol, destinationRow, destinationCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletRow = i;
				pelletCol = j;
			}
			else if (warehouse[i][j] == 2) {
				destinationRow = i;
				destinationCol = j;
			}
		}
	}
	while (pelletCol != destinationCol) {
		if (pelletCol < destinationCol) {
			pelletCol++;
		}
		else {
			pelletCol--;
			}
		warehouse[pelletRow][pelletCol] = 3;
	}
	while (pelletRow != destinationRow) {
		if (pelletRow < destinationRow) {
			pelletRow++;
		}
		else {
			pelletRow--;
			}
		warehouse[pelletRow][pelletCol] = 3;
		warehouse[destinationRow][destinationCol] = 2;
	}

}",0
cyan312,1696233237,5,"void PelletRoute(int warehouse[10][10]) {
	int pelletRow, pelletCol, destinationRow, destinationCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletRow = i;
				pelletCol = j;
			}
			else if (warehouse[i][j] == 2) {
				destinationRow = i;
				destinationCol = j;
			}
		}
	}
	while (pelletCol != destinationCol) {
		if (pelletCol < destinationCol) {
			pelletCol++;
		}
		else {
			pelletCol--;
			}
		warehouse[pelletRow][pelletCol] = 3;
	}
	while (pelletRow != destinationRow) {
		if (pelletRow < destinationRow) {
			pelletRow++;
		}
		else {
			pelletRow--;
			}
		warehouse[pelletRow][pelletCol] = 3;
	}
	warehouse[destinationRow][destinationCol] = 2;
}",1
cyiu210,1695958460,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    
    int i;
    int j;
  
    int ROWONE;
    int ROWTWO;
    int COLONE;
    int COLTWO;
    
    for (i = 0; i < 10; i++)  {
        for (j = 0; j < 10; j++)  {
            if (warehouse[i][j] == 1)  {
                ROWONE = i;
                COLONE = j;
            }
            if (warehouse[i][j] == 2)  {
                ROWTWO = i;
                COLTWO = j;
                
            }
        }
    }
    
    
     
    if ((ROWTWO != ROWONE) && (COLTWO > COLONE))  {
        for (j = COLONE+1; j <= COLTWO; j++)  {
            warehouse[ROWONE][j] = 3;
        }
    } else if ((ROWTWO != ROWONE) && (COLTWO < COLONE))  {
        for (j = COLONE-1; j >= COLTWO; j--)  {
            warehouse[ROWONE][j] = 3;    
        }
    } else if ((ROWTWO == ROWONE) && (COLTWO > COLONE)) {
        for (j = COLONE+1; j < COLTWO; j++)  {
            warehouse[ROWONE][j] = 3;
        }  
    } else if ((ROWTWO == ROWONE) && (COLTWO < COLONE)) {
        for (j = COLONE-1; j > COLTWO; j--)  {
            warehouse[ROWONE][j] = 3;
        } 
    }
    
    
    
    if ((COLTWO != COLONE) && (ROWTWO > ROWONE))  {
        for (i = ROWONE+1; i < ROWTWO; i++)  {
            warehouse[i][COLTWO] = 3;
        }
    } else if ((COLTWO != COLONE) && (ROWTWO < ROWONE))  {
        for (i = ROWONE-1; i > ROWTWO; i--)  {
            warehouse[i][COLTWO] = 3;    
        }
    } else if ((COLTWO == COLONE) && (ROWTWO > ROWONE))  {
        for (i = ROWONE+1; i < ROWTWO; i++)  {
            warehouse[i][COLTWO] = 3;
        }
    } else if ((COLTWO == COLONE) && (ROWTWO < ROWONE))  {
        for (i = ROWONE-1; i > ROWTWO; i--)  {
            warehouse[i][COLTWO] = 3;
        }
    }

}",1
dbar153,1695847312,1,"void PelletRoute(int warehouse[10][10])
{
	int i;
	int j;
	int Row1;
	int Col1;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				Row1 = i;
				Col1 = j;
			}
		}
	}
	int Row2;
	int Col2;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				Row2 = i;
				Col2 = j;
			}
		}
	}
	if (Row1 < Row2) {
		if (Col1 < Col2) {
			for (i = Col1 + 1; i <= Col2; i++) {
				warehouse[Row1][i] = 3;
			}
			for (j = Row1 + 1; j < Row2; j++) {
				warehouse[j][Col2]=3;
			}
		}
		if (Col1 > Col2) {
			for (i = Col1 - 1; i >= Col2; i--) {
				warehouse[Row1][i] = 3;
			}
			for (j = Row1 + 1; j < Row2; j++) {
				warehouse[j][Col2]=3;
			}
		}
		if (Col1 == Col2) {
			for (i = Row1 + 1; i < Row2; i++) {
				warehouse[i][Col1] = 3;
			}
		}
	}
	if (Row2 < Row1) {
		if (Col1 > Col2) {
			for (i = Col2 + 1; i <= Col1; i++) {
				warehouse[Row2][i] =3;
			}
			for (j = Row2 + 1; j < Row1; j++) {
				warehouse[j][Col1]=3;
			}
		}
		if (Col1 < Col2) {
			for (i = Col2-1; i >= Col1; i--) {
				warehouse[Row2][i]=3;
			}
			for (j = Row2 + 1; j < Row1; j++) {
				warehouse[j][Col1] = 3;
			}
		}
		if (Col1 == Col2) {
			for (i = Row2 + 1; i < Row1; i++) {
				warehouse[i][Col1] = 3;
			}
		}
	}
	if (Row1 == Row2) {
		if (Col1 < Col2) {
			for (i = Col1 + 1; i < Col2; i++) {
				warehouse[Row1][i] = 3;
			}
		}
		if (Col2 < Col1) {
			for (i = Col2 + 1; i < Col1; i++) {
				warehouse[Row1][i] = 3;
			}
		}
	}
	}",0
dbar153,1695848018,2,"void PelletRoute(int warehouse[10][10])
{
	int i;
	int j;
	int Row1;
	int Col1;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				Row1 = i;
				Col1 = j;
			}
		}
	}
	int Row2;
	int Col2;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				Row2 = i;
				Col2 = j;
			}
		}
	}
	if (Row1 < Row2) {
		if (Col1 < Col2) {
			for (i = Col1 + 1; i <= Col2; i++) {
				warehouse[Row1][i] = 3;
			}
			for (j = Row1 + 1; j < Row2; j++) {
				warehouse[j][Col2]=3;
			}
		}
		if (Col1 > Col2) {
			for (i = Col1 - 1; i >= Col2; i--) {
				warehouse[Row1][i] = 3;
			}
			for (j = Row1 + 1; j < Row2; j++) {
				warehouse[j][Col2]=3;
			}
		}
		if (Col1 == Col2) {
			for (i = Row1 + 1; i < Row2; i++) {
				warehouse[i][Col1] = 3;
			}
		}
	}
	if (Row2 < Row1) {
		if (Col1 > Col2) {
			for (i = Col1 - 1; i >= Col2; i--) {
				warehouse[Row1][i] =3;
			}
			for (j = Row1 - 1; j > Row2; j--) {
				warehouse[j][Col2]=3;
			}
		}
		if (Col1 < Col2) {
			for (i = Col1+1; i <=Col2; i++) {
				warehouse[Row1][i]=3;
			}
			for (j = Row1 - 1; j >Row2; j--) {
				warehouse[j][Col2] = 3;
			}
		}
		if (Col1 == Col2) {
			for (i = Row2 + 1; i < Row1; i++) {
				warehouse[i][Col1] = 3;
			}
		}
	}
	if (Row1 == Row2) {
		if (Col1 < Col2) {
			for (i = Col1 + 1; i < Col2; i++) {
				warehouse[Row1][i] = 3;
			}
		}
		if (Col2 < Col1) {
			for (i = Col2 + 1; i < Col1; i++) {
				warehouse[Row1][i] = 3;
			}
		}
	}
	}
",1
dcha468,1696220871,1,"void PelletRoute(int warehouse[10][10]) {
    
    int pelletRow; 
    int pelletCol; 
    int destRow; 
    int destCol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }",0
dcha468,1696221024,2,"void PelletRoute(int warehouse[10][10]) {
    
    int pelletRow; 
    int pelletCol; 
    int destRow; 
    int destCol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
dcha468,1696229877,3,"void PelletRoute(int warehouse[10][10]) {
    
    int pelletRow; 
    int pelletCol; 
    int destRow; 
    int destCol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    
    warehouse[destRow][destCol] = 2;
}",1
deri361,1695702457,1,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
	int i, j, k, l, row1, col1, row2, col2;
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}
		}
	}
	if (col1 < col2) {
		for (k = (col1 + 1); k < col2; k++)
		{
			warehouse[row1][k] = 3;
		}
	}
	else {
		for (k = (col2+1); k < (col1); k++)
		{
			warehouse[row1][k] = 3;
		}
	}
	if (row1 < row2) {
		for (l = (row1+1); l < row2; l++)
		{
			warehouse[l][col2] = 3;
		}
	}
	else {
		for (l = (row2 + 1); l < row1; l++)
		{
			warehouse[l][col2] = 3;
		}
	}
	if ((row1 != row2) && (col1 != col2)) {
		warehouse[row1][col2] = 3;
	}

}",1
dgal735,1695950965,1,"#define numrows 10 
#define numcols 10 
#include <stdio.h>


void PelletRoute(int warehouse[numrows][numcols])
{
    int prow,pcol,drow,dcol;
    //lets find the positions of the pallet and the destination
    
    for (int i=0; i<numrows; i++){
        for(int j=0;j<numcols;j++){
            if (warehouse[i][j]==1){
                prow = i;
                pcol = j;
            }
            else if (warehouse[i][j]==2){
                drow = i;
                dcol = j;
            } 
        }
    }
    
    
    
    //calculating the horizontal and vertical distances
    int hd = dcol - pcol;
    int vd = drow - prow;
    
    //deciding to move on which direction
    if (vd == 0){
        if (hd > 0){
        //move to the right
        for (int j = pcol+1; j <= dcol; j++){
            if (warehouse[prow][j] != 2)
            {
                warehouse[prow][j]=3;
            }
        }
        }
        else if (hd < 0){
        //move to the right
        for (int j = pcol-1; j >= dcol; j--){
            if (warehouse[prow][j]!=2)
            {
            warehouse[prow][j]=3;
            }
        }
        }
    }
    else if (hd > 0){
        //move to the right
        for (int j = pcol+1; j <= dcol; j++){
            warehouse[prow][j]=3;
        }
    }
    else if (hd < 0){
        //move to the left
        for (int j = pcol-1; j >= dcol; j--){
            warehouse[prow][j]=3;
        }
    }
    
    if (vd > 0) {
        // Move down
        for (int i = prow+1; i < drow; i++) {
            warehouse[i][dcol] = 3;
        }
    } else if (vd < 0) {
        // Move up
        for (int i = prow-1; i > drow; i--) {
            warehouse[i][dcol] = 3;
        }
    }
}",1
dhar714,1695768584,1,"PelletRoute(warehouse);

int i, j;
for (i = 0; i < 10; i++) {
   for (j = 0; j < 10; j++) {
      printf(""%d "", warehouse[i][j]);
   }
   printf(""\n"");
}
    return 0;
}

void PelletRoute(int warehouse[10][10])
{
    int rowStart, colStart;
    int rowFinish, colFinish;
    // first find the starting location
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

     // then find the finish location
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 2) {
				rowFinish = i;
				colFinish = j;
			}
		}
	}
    printf(""start location (%d,%d), finish location (%d,%d)\n"", rowStart, colStart, rowFinish, colFinish);

    //print a row of 3's
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (i == rowStart) {
                if ((colStart < j && j < colFinish) ||colFinish < j && j < colStart) {
                    warehouse[i][j] = 3;
                }
            }
		}
	}

    //print a column of 3's
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (j == colFinish) {
                if ((rowStart <= i && i < rowFinish) ||rowFinish < i && i <= rowStart) {
                    warehouse[i][j] = 3;
                }
            }
		}
	}

}",0
dhar714,1695768794,2,"void PelletRoute(int warehouse[10][10])
{
    int rowStart, colStart;
    int rowFinish, colFinish;
    // first find the starting location
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

     // then find the finish location
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 2) {
				rowFinish = i;
				colFinish = j;
			}
		}
	}
    printf(""start location (%d,%d), finish location (%d,%d)\n"", rowStart, colStart, rowFinish, colFinish);

    //print a row of 3's
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (i == rowStart) {
                if (((colStart < j) && (j < colFinish)) || ((colFinish < j) && (j < colStart))) {
                    warehouse[i][j] = 3;
                }
            }
		}
	}

    //print a column of 3's
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (j == colFinish) {
                if (((rowStart <= i) && (i < rowFinish)) || ((rowFinish < i) && (i <= rowStart))) {
                    warehouse[i][j] = 3;
                }
            }
		}
	}

}",0
dhar714,1695768830,3,"void PelletRoute(int warehouse[10][10])
{
    int rowStart, colStart;
    int rowFinish, colFinish;
    // first find the starting location
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

     // then find the finish location
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 2) {
				rowFinish = i;
				colFinish = j;
			}
		}
	}

    //print a row of 3's
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (i == rowStart) {
                if (((colStart < j) && (j < colFinish)) || ((colFinish < j) && (j < colStart))) {
                    warehouse[i][j] = 3;
                }
            }
		}
	}

    //print a column of 3's
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (j == colFinish) {
                if (((rowStart <= i) && (i < rowFinish)) || ((rowFinish < i) && (i <= rowStart))) {
                    warehouse[i][j] = 3;
                }
            }
		}
	}

}",0
dhar714,1695769791,4,"void PelletRoute(int warehouse[10][10])
{
    int rowStart, colStart;
    int rowFinish, colFinish;
    // first find the starting location
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

     // then find the finish location
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 2) {
				rowFinish = i;
				colFinish = j;
			}
		}
	}

    //print a row of 3's
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (i == rowStart) {
                if (((colStart < j) && (j < colFinish)) || ((colFinish < j) && (j < colStart))) {
                    warehouse[i][j] = 3;
                }
            }
		}
	}

    //print a column of 3's
    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j ++) {
			if (j == colFinish) {
                if (((rowStart < i) && (i < rowFinish)) || ((rowFinish < i) && (i < rowStart))) {
                    warehouse[i][j] = 3;
                }
            }
		}
	}

    //print the missing '3'
    if ((rowStart != rowFinish) && (colStart != colFinish)) {
            warehouse[rowStart][colFinish] = 3;
    }
}",1
dhen760,1695701673,1,"void PelletRoute(int warehouse[10][10])
{
    int startrow;
    int startcol;
    int finishrow;
    int finishcol;

    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
        if (warehouse[i][j] == 1) {
        startrow = i;
        startcol = j;
        }
        if (warehouse[i][j] == 2) {
        finishrow = i;
        finishcol = j;
        }
        }
    }
    for (int k=startcol+1; k<=finishcol; k++) {
        warehouse[startrow][k] = 3;
    }
    
    for (int l=startrow+1; l<finishrow; l++) {
        warehouse[l][finishcol] = 3;
    }
}",0
dhen760,1695714945,2,"void PelletRoute(int warehouse[10][10])
{
    int startrow;
    int startcol;
    int finishrow;
    int finishcol;

    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
        if (warehouse[i][j] == 1) {
        startrow = i;
        startcol = j;
        }
        if (warehouse[i][j] == 2) {
        finishrow = i;
        finishcol = j;
        }
        }
    }
    
    if (startcol > finishcol) {
        int i = startcol-1;
        while (i>=finishcol) {
            warehouse[startrow][i] = 3;
            i--;
        }
    } else if (startcol < finishcol) {
        int i = startcol + 1;
        while (i<=finishcol) {
            warehouse[startrow][i] = 3;
            i++;
        }
    } 
    
    if (startrow > finishrow) {
        int j = startrow -1;
        while (j>finishrow) {
            warehouse[j][finishcol] = 3;
            j--;
        }
    }else if (startrow < finishrow){
        int j = startrow +1;
        while (j<finishrow) {
            warehouse[j][finishcol] = 3;
            j++;
        }
    } 
    warehouse[finishrow][finishcol] = 2;
    warehouse[startrow][startcol] = 1;
}",1
dhul688,1696028073,1,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i, j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10]){
    int row1, col1;
    int row2, col2;
    
    FindTile(warehouse, 1, &row1, &col1);
    FindTile(warehouse, 2, &row2, &col2);
    
    while ((col1 != col2)){
        if (col1 < col2){
            col1 = col1 + 1;
            if (col1 != col2){
                warehouse[row1][col1] = 3;
            }
        }
        if (col1 > col2){
            col1 = col1 - 1;
            if (col1 != col2){    
                warehouse[row1][col1] = 3;
            }
            
        }   
        if (row1 != row2){
            warehouse[row1][col2] = 3;
        }
    }
    
    while ((row1 != row2)){
        if (row1 < row2){
            row1 = row1 + 1;
            if (row1 != row2){    
                warehouse[row1][col1] = 3;
            }
            
        }
        if (row1 > row2){
            row1 = row1 - 1;
            if (row1 != row2){
                warehouse[row1][col1] = 3;
            }
            
        }   
    }

}",1
dkha055,1695707782,1,"void PelletRoute(int warehouse[10][10]) {
    
    
    int pelletRow = 0, pelletCol = 0, endRow = 0, endCol = 0;
    
    //Finding location of the one and two
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }
    
    //When the distination is behind in both horizontal and veritcle distance to the pallet
    if (pelletRow >= endRow && pelletCol >= endCol) {
        
        if(pelletRow == endRow) {
                pelletCol--;
        }
        
        for (int c = endCol + 1; c <= pelletCol ; c++) {
            warehouse[endRow][c] = 3;
        }
        
        for (int r = endRow + 1; r < pelletRow;r++) {
            warehouse[r][pelletCol] = 3;
        }
        
    } else if (pelletRow >= endRow && pelletCol <= endCol) {
        
        if (endRow == pelletRow) {
            pelletCol++;
        }
        
        for (int c = pelletCol; c < endCol ; c++) {
            warehouse[endRow][c] = 3;
        }
        
        for (int r = endRow + 1; r < pelletRow;r++) {
            warehouse[r][pelletCol] = 3;
        }
        
    } else if (pelletRow <= endRow && pelletCol >= endCol) {
        
        if (endRow == pelletRow) {
            endCol++;
        }
        
        for (int c = endCol; c < pelletCol ; c++) {
                warehouse[pelletRow][c] = 3;
        }
        
        for (int r = pelletRow + 1; r < endRow;r++) {
            warehouse[r][endCol] = 3;
        }
        
    } else {
        if(pelletRow == endRow) {
            endCol = endCol - 1;
        }

        for (int c = pelletCol + 1; c <= endCol ; c++) {
            warehouse[pelletRow][c] = 3;
        }

        for (int r = pelletRow + 1; r < endRow;r++) {
            warehouse[r][endCol] = 3;
        }

    }
    
    
}",0
dkha055,1695709073,2,"void PrintBoard(int board[NUM_ROWS][NUM_COLS])
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                printf("" _ "");
            } else if (board[i][j] > 9) {   // align two-digit numbers
                printf("" %d"", board[i][j]);
            } else {
                printf("" %d "", board[i][j]);
            }
        }
        printf(""\n"");
    }
    printf(""\n"");
}

void PelletRoute(int warehouse[10][10]) {
    
    
    int pelletRow = 0, pelletCol = 0, endRow = 0, endCol = 0;
    
    //Finding location of the one and two
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }
    
    //When the distination is behind in both horizontal and veritcle distance to the pallet
    if (pelletRow >= endRow && pelletCol >= endCol) {
        
        if(pelletRow == endRow) {
                endCol++;
        }
        
        for (int c = endCol; c < pelletCol ; c++) {
            warehouse[pelletRow][c] = 3;
        }
        
        for (int r = endRow + 1; r < pelletRow;r++) {
            warehouse[r][endCol] = 3;
        }
        
    } else if (pelletRow >= endRow && pelletCol <= endCol) {
        

        
        for (int c = pelletCol + 1; c < endCol ; c++) {
            warehouse[pelletRow][c] = 3;
        }
        
        for (int r = endRow + 1; r <= pelletRow;r++) {
            warehouse[r][endCol] = 3;
        }
        
    } else if (pelletRow <= endRow && pelletCol >= endCol) {
        
       if (endRow == pelletRow) {
           endCol++;
       }

    
        for (int c = endCol; c < pelletCol ; c++) {
                warehouse[pelletRow][c] = 3;
        }
        
        for (int r = pelletRow + 1; r < endRow;r++) {
            warehouse[r][endCol] = 3;
        }
        
    } else {
        if(pelletRow == endRow) {
            endCol = endCol - 1;
        }

        for (int c = pelletCol + 1; c <= endCol ; c++) {
            warehouse[pelletRow][c] = 3;
        }

        for (int r = pelletRow + 1; r < endRow;r++) {
            warehouse[r][endCol] = 3;
        }

    }
    
    
}",0
dkha055,1695709088,3,"
void PelletRoute(int warehouse[10][10]) {
    
    
    int pelletRow = 0, pelletCol = 0, endRow = 0, endCol = 0;
    
    //Finding location of the one and two
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }
    
    //When the distination is behind in both horizontal and veritcle distance to the pallet
    if (pelletRow >= endRow && pelletCol >= endCol) {
        
        if(pelletRow == endRow) {
                endCol++;
        }
        
        for (int c = endCol; c < pelletCol ; c++) {
            warehouse[pelletRow][c] = 3;
        }
        
        for (int r = endRow + 1; r < pelletRow;r++) {
            warehouse[r][endCol] = 3;
        }
        
    } else if (pelletRow >= endRow && pelletCol <= endCol) {
        

        
        for (int c = pelletCol + 1; c < endCol ; c++) {
            warehouse[pelletRow][c] = 3;
        }
        
        for (int r = endRow + 1; r <= pelletRow;r++) {
            warehouse[r][endCol] = 3;
        }
        
    } else if (pelletRow <= endRow && pelletCol >= endCol) {
        
       if (endRow == pelletRow) {
           endCol++;
       }

    
        for (int c = endCol; c < pelletCol ; c++) {
                warehouse[pelletRow][c] = 3;
        }
        
        for (int r = pelletRow + 1; r < endRow;r++) {
            warehouse[r][endCol] = 3;
        }
        
    } else {
        if(pelletRow == endRow) {
            endCol = endCol - 1;
        }

        for (int c = pelletCol + 1; c <= endCol ; c++) {
            warehouse[pelletRow][c] = 3;
        }

        for (int r = pelletRow + 1; r < endRow;r++) {
            warehouse[r][endCol] = 3;
        }

    }
    
    
}",1
dkim848,1696214165,1,"void PelletRoute(int warehouse[10][10])
{
    int a, b, c, d, i, rowPos1, rowPos2, colPos1, colPos2;
    
    for (a = 0; a = 9; a++) {
        for (b = 0; b = 9; b++) {
            if (warehouse[a][b] == 1) {
                rowPos1 = a;
                colPos1 = b;
            }
        }
    }
    
    for (c = 0; c = 9; c++) {
        for (d = 0; d = 9; d++) {
            if (warehouse[c][d] == 2) {
                rowPos2 = c;
                colPos2 = d;
            }
        }
    }
    
    if (rowPos1 == rowPos2) {
        if (colPos1 > colPos2) {
            for (i = colPos2 + 1; i < colPos1; i++) {
                warehouse[rowPos1][i] = 3;
            }
            return;
        }
    }
    
    if (colPos1 == colPos2) {
        if (rowPos1 > rowPos2) {
            for (i = rowPos2 + 1; i < rowPos1; i++) {
            warehouse[i][colPos1] = 3;
            }
            return;
        }
    }
    
    if (colPos1 < colPos2) {
        for (i = colPos1 + 1; i <= colPos2; i++) {
            warehouse[rowPos1][i] = 3;
        } 
    } else {
            for (i = colPos2 + 1; i <= colPos1; i++) {
                warehouse[rowPos1][i] = 3;
            }
        }
    
    if (rowPos1 < rowPos2) {
        for (i = rowPos1 + 1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        } 
    } else {
            for (i = rowPos2 + 1; i < rowPos1; i++) {
                warehouse[i][colPos2] = 3;
            }
        }
}",0
dkim848,1696214551,2,"void PelletRoute(int warehouse[10][10])
{
    int a, b, c, d, i, rowPos1, rowPos2, colPos1, colPos2;
    
    for (a = 0; a <= 9; a++) {
        for (b = 0; b <= 9; b++) {
            if (warehouse[a][b] == 1) {
                rowPos1 = a;
                colPos1 = b;
            }
        }
    }
    
    for (c = 0; c <= 9; c++) {
        for (d = 0; d <= 9; d++) {
            if (warehouse[c][d] == 2) {
                rowPos2 = c;
                colPos2 = d;
            }
        }
    }
    
    if (rowPos1 == rowPos2) {
        if (colPos1 > colPos2) {
            for (i = colPos2 + 1; i < colPos1; i++) {
                warehouse[rowPos1][i] = 3;
            }
            return;
        }
    }
    
    if (colPos1 == colPos2) {
        if (rowPos1 > rowPos2) {
            for (i = rowPos2 + 1; i < rowPos1; i++) {
            warehouse[i][colPos1] = 3;
            }
            return;
        }
    }
    
    if (colPos1 < colPos2) {
        for (i = colPos1 + 1; i <= colPos2; i++) {
            warehouse[rowPos1][i] = 3;
        } 
    } else {
            for (i = colPos2; i < colPos1; i++) {
                warehouse[rowPos1][i] = 3;
            }
        }
    
    if (rowPos1 < rowPos2) {
        for (i = rowPos1 + 1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        } 
    } else {
            for (i = rowPos2 + 1; i < rowPos1; i++) {
                warehouse[i][colPos2] = 3;
            }
        }
}",1
dkur670,1696215038,1,"void PelletRoute(int warehouse[10][10])
 {
	 int workerRow, workerCol,boxRow, boxCol;
	 for (int i = 0; i < 10; i++){
		 for (int j = 0; j < 10; j++){
			 if (warehouse[i][j] == 1){
				 workerRow = i;
				 workerCol = j;
			 } else if (warehouse[i][j] == 2){
				 boxRow = i;
				 boxCol = j;
			 }
		 }
	 }
	 
	 
	 int starthori;
	 int endhori;
	 int startvert; 
	 int endvert;
	 if (workerRow == boxRow){
		 starthori = workerCol+1;
		 endhori = boxCol;
		 for (starthori; starthori < endhori; starthori++){
			 warehouse[workerRow][starthori] = 3;
		 }
		 
	}else if (workerCol == boxCol){
		startvert = workerRow;
		endvert = boxRow - 1;
		for (startvert; startvert < endvert; startvert++){
			warehouse[startvert][boxCol] = 3;
		 }
	}else{
		starthori = workerCol+1;
		endhori = boxCol;
		startvert = workerRow;
		endvert = boxRow - 1;
		for (starthori; starthori <= endhori; starthori++){
			warehouse[workerRow][starthori] = 3;
		}
		for (startvert; startvert <= endvert; startvert++){
			warehouse[startvert][boxCol] = 3;
		}
	 }
	 
	 
 }",0
dkur670,1696216695,2,"void PelletRoute(int warehouse[10][10])
 {
	 int workerRow, workerCol,boxRow, boxCol;
	 for (int i = 0; i < 10; i++){
		 for (int j = 0; j < 10; j++){
			 if (warehouse[i][j] == 1){
				 workerRow = i;
				 workerCol = j;
			 } else if (warehouse[i][j] == 2){
				 boxRow = i;
				 boxCol = j;
			 }
		 }
	 }
	 
	 
	 int starthori;
	 int endhori;
	 int startvert; 
	 int endvert;
	 if (workerRow == boxRow){
		 starthori = workerCol+1;
		 endhori = boxCol;
		 for (int i = starthori; i < endhori; i++){
			 warehouse[workerRow][i] = 3;
		 }
		 
	}else if (workerCol == boxCol){
		startvert = workerRow + 1;
		endvert = boxRow;
		for (int i = startvert; i < endvert; i++){
			warehouse[i][boxCol] = 3;
		 }
	}else{
		starthori = workerCol+1;
		endhori = boxCol;
		startvert = workerRow;
		endvert = boxRow - 1;
		for (int i = starthori; i <= endhori; i++){
			warehouse[workerRow][i] = 3;
		}
		for (int i = startvert; i <= endvert; i++){
			warehouse[i][boxCol] = 3;
		}
	 }
	 
	 
 }",0
dkur670,1696229312,3,"void PelletRoute(int warehouse[10][10])
 {
	 int workerRow, workerCol,boxRow, boxCol;
	 for (int i = 0; i < 10; i++){
		 for (int j = 0; j < 10; j++){
			 if (warehouse[i][j] == 1){
				 workerRow = i;
				 workerCol = j;
			 } else if (warehouse[i][j] == 2){
				 boxRow = i;
				 boxCol = j;
			 }
		 }
	 }
	 
	 
	 int starthori;
	 int endhori;
	 int startvert; 
	 int endvert;
	 if (workerRow == boxRow){
		 if (workerCol < boxCol){
		 starthori = workerCol+1;
		 endhori = boxCol;}
		 else {starthori = boxCol+1;
		 endhori = workerCol; }
		 for (int i = starthori; i < endhori; i++){
			 warehouse[workerRow][i] = 3;
		 }
		 
		 
	}else if (workerCol == boxCol){
		if (workerRow < boxRow){
		startvert = workerRow + 1;
		endvert = boxRow;}
		else {startvert = boxRow+1;
		endvert = workerRow;}
		for (int i = startvert; i < endvert; i++){
			warehouse[i][boxCol] = 3;
		 }
		 
		 
 }else if ((workerCol < boxCol && workerRow < boxRow)||(boxCol < workerCol && workerRow > boxRow)){
	 int row;
	 int col;
		if (workerCol < boxCol){
		starthori = workerCol+1;
		endhori = boxCol;
		startvert = workerRow;
		endvert = boxRow;
		row = workerRow;
		col = boxCol;
		}
		else{
		starthori = boxCol + 1;
		endhori = workerCol;
		startvert = boxRow;
		endvert = workerRow;
		row = boxRow;
		col = workerCol;
 }		
		
		for (int i = starthori; i < endhori; i++){
			warehouse[row][i] = 3;
		}
		for (int i = startvert; i < endvert; i++){
			warehouse[i][col] = 3;
		}
	
		
	 } else {
		int row;
		int col;
		if (workerCol < boxCol){
		starthori = workerCol;
		endhori = boxCol;
		startvert = workerRow;
		endvert = boxRow;
		row = boxRow;
		col = workerCol;
		}
		else{
		starthori = boxCol;
		endhori = workerCol;
		startvert = boxRow -1;
		endvert = workerRow;
		row = workerRow;
		col = boxCol;
 }		
		
		for (int i = starthori; i < endhori; i++){
			warehouse[row][i] = 3;
		}
		for (int i = startvert; i > endvert; i--){
			warehouse[i][col] = 3;
		}
		 
	
	 
 }
 }",0
dmun793,1696181580,1,"void FindTile(int warehouse[10][10], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10])
{
	int startRow = 0, startCol = 0, endRow = 0, endCol = 0;

	FindTile(warehouse, 1, &startRow, &startCol);
	FindTile(warehouse, 2, &endRow, &endCol);

	while (startCol != endCol)
	{
		if (startCol > endCol)
			startCol--;
		else
			startCol++;

		warehouse[startRow][startCol] = 3;
	}

	while (startRow != endRow)
	{
		if (startRow > endRow)
			startRow--;
		else
			startRow++;

		warehouse[startRow][startCol] = 3;
	}

	warehouse[endRow][endCol] = 2;
}",1
dpat391,1696205592,1,"void PelletRoute(int warehouse[10][10])
{
    int row1,row2,col1,col2;
    int i,j,n,m;
    
    for (i=0; i<10;i++) {
        for (j=0;j<10;j++) {
            if (warehouse[i][j]==1){
                row1=i;
                col1=j;
                
            } 
            if (warehouse[i][j]==2){
                row2=i;
                col2=j;
            }
        }
    }
    
    if (col2 < col1) {
        for (n=col1-1;n>=col2;n--){
            if (warehouse[row1][n]==2) {
                
            } else {
                warehouse[row1][n]=3;
            }
        }
    } else {
        for (n=col1+1;n<=col2;n++) {
            if (warehouse[row1][n]==2) {
            
                
            } else {
                warehouse[row1][n]=3;
            }
        }
    }
    
    if (row2 < row1) {
        for (m=row1-1;m>=row2;m--) {
            if (warehouse[m][col2]==2) {
                
            } else {
                warehouse[m][col2]=3;
            }
        } 
    } else {
        for (m=row1+1;m<=row2;m++){
            if (warehouse[m][col2]==2) {
                
            } else {
                warehouse[m][col2]=3;
            }
        }
    }
}



",1
dric234,1695852252,1,"void PelletRoute(int warehouse[10][10]) {
	int rows,cols;
	int row1,col1;
	int row2, col2;
	for (rows = 0; rows < 10; rows++) {
		for (cols = 0; cols < 10; cols++) {
			if (warehouse[rows][cols] == 1) {
				row1 = rows;
				col1 = cols;			}
			if (warehouse[rows][cols] == 2) {
				row2 = rows;
				col2 = cols;
			}
		}
	}
	
	if (row1 < row2 && col1<col2) {
		for (cols = col2; cols > col1; cols--) {
			warehouse[row1][cols] = 3;
		}
		for (rows = row1; rows < row2; rows++) {
			warehouse[rows][col2] = 3;
		}
	}
	if (row1 < row2 && col1 == col2) {
		for (rows = row1 + 1; rows < row2; rows++) {
			warehouse[rows][col2] = 3;
		}
	}
	if (row1 < row2 && col1 > col2) {
		for (cols = col2; cols < col1; cols++) {
			warehouse[row1][cols] = 3;
		}
		for (rows = row1; rows < row2; rows++) {
			warehouse[rows][col2] = 3;
		}
	}
	if (row1 == row2 && col1 < col2) {
		for (cols = col1 + 1; cols < col2; cols++) {
			warehouse[row1][cols] = 3;
		}
	}
	if (row1 == row2 && col1 > col2) {
		for (cols = col2 + 1; cols < col1; cols++) {
			warehouse[row1][cols] = 3;
		}
	}
	if (row1 > row2 && col1 < col2) {
		for (cols = col1+1; cols <= col2; cols++) {
			warehouse[row1][cols] = 3;
		}
		for (rows = row1; rows > row2; rows--) {
			warehouse[rows][col2] = 3;
		}
	}
	if (row1 > row2 && col1 > col2) {
		for (cols = col2; cols < col1; cols++) {
			warehouse[row1][cols] = 3;
		}
		for (rows = row1; rows > row2; rows--) {
			warehouse[rows][col2] = 3;
		}
	}
	if (row1 > row2 && col1 == col2) {
		for (rows = row2 + 1; rows < row1; rows++) {
			warehouse[rows][col2] = 3;
		}
	}
}",1
drob588,1696238510,1,"int PelletRoute(int warehouse[10][10]) {

	int i, j;
	int pelletRow, pelletCol;
	int destRow, destCol;
	int vertical, horizontal;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletRow = i;
				pelletCol = j;
			}
			if (warehouse[i][j] == 2) {
				destRow = i;
				destCol = j;
			}
		}
	}

	vertical = destRow - pelletRow;
	horizontal = destCol - pelletCol;

	if (horizontal < 0) {
		for (j = pelletCol - 1; j > destCol; j--) {
			warehouse[pelletRow][j] = 3;
		}
	}
	else if (horizontal > 0) {
		for (j = pelletCol + 1; j < destCol; j++) {
			warehouse[pelletRow][j] = 3;
		}
	}

	if (vertical != 0 && horizontal != 0) {
		warehouse[pelletRow][destCol] = 3;
	}

	if (vertical < 0) {
		for (i = pelletRow - 1; i > destRow; i--)
			warehouse[i][destCol] = 3;
	}
	else if (vertical > 0) {
		for (i = pelletRow + 1; i < destRow; i++)
			warehouse[i][destCol] = 3;
	}



}",0
drob588,1696238562,2,"int PelletRoute(int warehouse[10][10]) {

	int i, j;
	int pelletRow, pelletCol;
	int destRow, destCol;
	int vertical, horizontal;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletRow = i;
				pelletCol = j;
			}
			if (warehouse[i][j] == 2) {
				destRow = i;
				destCol = j;
			}
		}
	}

	vertical = destRow - pelletRow;
	horizontal = destCol - pelletCol;

	if (horizontal < 0) {
		for (j = pelletCol - 1; j > destCol; j--) {
			warehouse[pelletRow][j] = 3;
		}
	}
	else if (horizontal > 0) {
		for (j = pelletCol + 1; j < destCol; j++) {
			warehouse[pelletRow][j] = 3;
		}
	}

	if (vertical != 0 && horizontal != 0) {
		warehouse[pelletRow][destCol] = 3;
	}

	if (vertical < 0) {
		for (i = pelletRow - 1; i > destRow; i--)
			warehouse[i][destCol] = 3;
	}
	else if (vertical > 0) {
		for (i = pelletRow + 1; i < destRow; i++)
			warehouse[i][destCol] = 3;
	}

    return;

}",0
drob588,1696238710,3,"void PelletRoute(int warehouse[10][10]) {

	int i, j;
	int pelletRow, pelletCol;
	int destRow, destCol;
	int vertical, horizontal;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletRow = i;
				pelletCol = j;
			}
			if (warehouse[i][j] == 2) {
				destRow = i;
				destCol = j;
			}
		}
	}

	vertical = destRow - pelletRow;
	horizontal = destCol - pelletCol;

	if (horizontal < 0) {
		for (j = pelletCol - 1; j > destCol; j--) {
			warehouse[pelletRow][j] = 3;
		}
	}
	else if (horizontal > 0) {
		for (j = pelletCol + 1; j < destCol; j++) {
			warehouse[pelletRow][j] = 3;
		}
	}

	if (vertical != 0 && horizontal != 0) {
		warehouse[pelletRow][destCol] = 3;
	}

	if (vertical < 0) {
		for (i = pelletRow - 1; i > destRow; i--)
			warehouse[i][destCol] = 3;
	}
	else if (vertical > 0) {
		for (i = pelletRow + 1; i < destRow; i++)
			warehouse[i][destCol] = 3;
	}

    return;

}",1
dryu303,1696203732,1,"void PelletRoute(int warehouse[10][10])
{
    int i,j,a,b,xpos1,xpos2,ypos1,ypos2;
    for (i=0; i<10; i++)
    {
        for (j=0; j<10; j++)
        {
            if (warehouse[i][j]==1)
            {
                xpos1=i;
                ypos1=j;
            }
            if (warehouse[i][j]==2)
            {
                xpos2=i;
                ypos2=j;
            }
        }
    }
    b=ypos2;
    if (ypos1>ypos2)
    {
        for (a=ypos1; a>=ypos2; a--)
        {
            warehouse[xpos1][a]=3;
            b=a;
        }
    }
    if (ypos1<ypos2)
    {
        for (a=ypos1; a<=ypos2; a++)
        {
            warehouse[xpos1][a]=3;
            b=a;
        }
    }
    if (xpos1>xpos2)
    {
        for (a=xpos1; a>=xpos2; a--)
        {
            warehouse[a][b]=3;
        }
    }
    if (xpos1<xpos2)
    {
        for (a=xpos1; a<=xpos2; a++)
        {
            warehouse[a][b]=3;
        }
    }
    warehouse[xpos1][ypos1]=1;
    warehouse[xpos2][ypos2]=2;
    }",1
dsaw164,1695779550,1,"void PelletRoute(int warehouse[10][10])
{

    int box_row, box_col, dest_row, dest_col, corner_row, corner_col;

    for(int i = 0; i <10; i++){
        for(int j = 0; j < 10; j++){

            if(warehouse[i][j] == 1){
                box_row = i;
                box_col = j;
            }

            else if(warehouse[i][j] == 2){
                dest_row = i;
                dest_col = j;
            }
        }
    }

    corner_row = box_row;
    corner_col = dest_col;


if(corner_col>box_col && corner_row<dest_row){
    for(int i = corner_row + 1; i < dest_row; i++){
        for(int j = box_col + 1; j <= corner_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(corner_col<box_col && corner_row<dest_row){
    for(int i = corner_row + 1; i < dest_row; i++){
        for(int j = corner_col; j < box_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(corner_col>box_col && corner_row>dest_row){
    for(int i = dest_row + 1; i < corner_row; i++){
        for(int j = box_col + 1; j <= corner_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}
if(corner_col<box_col && corner_row>dest_row){
    for(int i = dest_row + 1; i < corner_row; i++){
        for(int j = corner_col; j < box_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}
}",0
dsaw164,1695780782,2,"void PelletRoute(int warehouse[10][10])
{

    int box_row, box_col, dest_row, dest_col, corner_row, corner_col;

    for(int i = 0; i <10; i++){
        for(int j = 0; j < 10; j++){

            if(warehouse[i][j] == 1){
                box_row = i;
                box_col = j;
            }

            else if(warehouse[i][j] == 2){
                dest_row = i;
                dest_col = j;
            }
        }
    }



if(dest_col>box_col && box_row<dest_row){
    for(int i = corner_row + 1; i < dest_row; i++){
        for(int j = box_col + 1; j <= corner_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(dest_col<box_col && box_row<dest_row){
    for(int i = corner_row + 1; i < dest_row; i++){
        for(int j = corner_col; j < box_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(dest_col>box_col && box_row>dest_row){
    for(int i = dest_row + 1; i < corner_row; i++){
        for(int j = box_col + 1; j <= corner_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(dest_col<box_col && box_row>dest_row){
    for(int i = dest_row + 1; i < corner_row; i++){
        for(int j = corner_col; j < box_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(dest_col == box_col && box_row>dest_row){  //box is below the dest
    for(int i = dest_row + 1; i < box_row; i++){
        warehouse[i][box_col] = 3;
    }
} 

if(dest_col == box_col && box_row<dest_row){  //box is above the dest
    for(int i = box_row + 1; i < dest_row; i++){
        warehouse[i][box_col] = 3;
    }
}

if(dest_col < box_col && box_row == dest_row){  //box is right of the dest
    for(int i = dest_col + 1; i < box_col; i++){
        warehouse[box_row][i] = 3;
    }
}

if(dest_col > box_col && box_row == dest_row){  //box is left of the dest
    for(int i = box_col + 1; i < dest_col; i++){
        warehouse[box_row][i] = 3;
    }
}
}",0
dsaw164,1695780831,3,"void PelletRoute(int warehouse[10][10])
{

    int box_row, box_col, dest_row, dest_col, corner_row, corner_col;

    for(int i = 0; i <10; i++){
        for(int j = 0; j < 10; j++){

            if(warehouse[i][j] == 1){
                box_row = i;
                box_col = j;
            }

            else if(warehouse[i][j] == 2){
                dest_row = i;
                dest_col = j;
            }
        }
    }

corner_row = box_row;
corner_col = dest_col;

if(dest_col>box_col && box_row<dest_row){
    for(int i = corner_row + 1; i < dest_row; i++){
        for(int j = box_col + 1; j <= corner_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(dest_col<box_col && box_row<dest_row){
    for(int i = corner_row + 1; i < dest_row; i++){
        for(int j = corner_col; j < box_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(dest_col>box_col && box_row>dest_row){
    for(int i = dest_row + 1; i < corner_row; i++){
        for(int j = box_col + 1; j <= corner_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(dest_col<box_col && box_row>dest_row){
    for(int i = dest_row + 1; i < corner_row; i++){
        for(int j = corner_col; j < box_col; j++){

            warehouse[corner_row][j] = 3;
            warehouse[i][corner_col] = 3;
        }
    }
}

if(dest_col == box_col && box_row>dest_row){  //box is below the dest
    for(int i = dest_row + 1; i < box_row; i++){
        warehouse[i][box_col] = 3;
    }
} 

if(dest_col == box_col && box_row<dest_row){  //box is above the dest
    for(int i = box_row + 1; i < dest_row; i++){
        warehouse[i][box_col] = 3;
    }
}

if(dest_col < box_col && box_row == dest_row){  //box is right of the dest
    for(int i = dest_col + 1; i < box_col; i++){
        warehouse[box_row][i] = 3;
    }
}

if(dest_col > box_col && box_row == dest_row){  //box is left of the dest
    for(int i = box_col + 1; i < dest_col; i++){
        warehouse[box_row][i] = 3;
    }
}
}",0
dsaw164,1695781968,4,"void PelletRoute(int warehouse[10][10]) {
    
    int box_row, box_col, dest_row, dest_col, corner_row, corner_col;

    for(int i = 0; i <10; i++){
        for(int j = 0; j < 10; j++){

            if(warehouse[i][j] == 1){
                box_row = i;
                box_col = j;
            }

            else if(warehouse[i][j] == 2){
                dest_row = i;
                dest_col = j;
            }
        }
    }

    
    
    while (box_col != dest_col) {
        if (box_col < dest_col) {
            int index_col = box_col + 1;
            index_col++;
        } else {
            int index_col = box_col - 1;
            index_col--;
        }
        warehouse[box_row][box_col] = 3;
    }


    while (box_row != dest_row) {
        if (box_row < dest_row) {
            int index_row = box_row + 1;
            index_row++;
        } else {
            int index_row = box_row - 1;
            index_row--;
        }
        warehouse[box_row][box_col] = 3;
    }
}",0
dsaw164,1695781984,5,"void PelletRoute(int warehouse[10][10]) {
    
    int box_row, box_col, dest_row, dest_col;

    for(int i = 0; i <10; i++){
        for(int j = 0; j < 10; j++){

            if(warehouse[i][j] == 1){
                box_row = i;
                box_col = j;
            }

            else if(warehouse[i][j] == 2){
                dest_row = i;
                dest_col = j;
            }
        }
    }

    
    
    while (box_col != dest_col) {
        if (box_col < dest_col) {
            int index_col = box_col + 1;
            index_col++;
        } else {
            int index_col = box_col - 1;
            index_col--;
        }
        warehouse[box_row][box_col] = 3;
    }


    while (box_row != dest_row) {
        if (box_row < dest_row) {
            int index_row = box_row + 1;
            index_row++;
        } else {
            int index_row = box_row - 1;
            index_row--;
        }
        warehouse[box_row][box_col] = 3;
    }
}",0
dsaw164,1695782041,6,"void PelletRoute(int warehouse[10][10]) {
    
    int box_row, box_col, dest_row, dest_col;

    for(int i = 0; i <10; i++){
        for(int j = 0; j < 10; j++){

            if(warehouse[i][j] == 1){
                box_row = i;
                box_col = j;
            }

            else if(warehouse[i][j] == 2){
                dest_row = i;
                dest_col = j;
            }
        }
    }

    
    
    while (box_col != dest_col) {
        if (box_col < dest_col) {
            box_col++;
        } else {
            box_col--;
        }
        warehouse[box_row][box_col] = 3;
    }


    while (box_row != dest_row) {
        if (box_row < dest_row) {
            box_row++;
        } else {
            box_row--;
        }
        warehouse[box_row][box_col] = 3;
    }
}",0
dsaw164,1695782109,7,"void PelletRoute(int warehouse[10][10]) {
    
    int box_row, box_col, dest_row, dest_col;

    for(int i = 0; i <10; i++){
        for(int j = 0; j < 10; j++){

            if(warehouse[i][j] == 1){
                box_row = i;
                box_col = j;
            }

            else if(warehouse[i][j] == 2){
                dest_row = i;
                dest_col = j;
            }
        }
    }

    
    
    while (box_col != dest_col) {
        if (box_col < dest_col) {
            box_col++;
        } else {
            box_col--;
        }
        warehouse[box_row][box_col] = 3;
    }


    while (box_row != dest_row - 1) {
        if (box_row < dest_row) {
            box_row++;
        } else {
            box_row--;
        }
        warehouse[box_row][box_col] = 3;
    }
}",0
dsaw164,1695782461,8,"void PelletRoute(int warehouse[10][10]) {
    
    int box_row, box_col, dest_row, dest_col;

    for(int i = 0; i <10; i++){
        for(int j = 0; j < 10; j++){

            if(warehouse[i][j] == 1){
                box_row = i;
                box_col = j;
            }

            else if(warehouse[i][j] == 2){
                dest_row = i;
                dest_col = j;
            }
        }
    }

    
    
    while (box_col != dest_col) {
        if (box_col < dest_col) {
            box_col++;
        } else {
            box_col--;
        }
        if(warehouse[box_row][box_col] != 2){
        warehouse[box_row][box_col] = 3;
        }
    }


    while (box_row != dest_row) {
        if (box_row < dest_row) {
            box_row++;
        } else {
            box_row--;
        }
        if(warehouse[box_row][box_col] != 2){
        warehouse[box_row][box_col] = 3;
        }
    }
}",1
dsin316,1696205527,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void PelletRoute(int array[10][10]);

int main(void)
{
    int warehouse[10][10] = { 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, },
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0} };

PelletRoute(warehouse);

int i, j;
for (i = 0; i < 10; i++) {
   for (j = 0; j < 10; j++) {
      printf(""%d "", warehouse[i][j]);
   }
   printf(""\n"");
}
}

void PelletRoute(int array[10][10])
{
    int i;
    int j;

    int x;
    int y;
    int a;
    int b;
    int c;
    int d;
    

    int true1 = 0;
    int true2 = 0;

    int i2;
	int j2;

    int row1;
    int column1;

    int row2;
    int column2;

    int i3;
    int j3;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (array[i][j] == 1) {
				row1 = i;
				column1 = j;
			} 
		}
	}

	for (i2 = 0; i2 < 10; i2++) {
		for (j2 = 0; j2 < 10; j2++) {
			if (array[i2][j2] == 2) {
				row2 = i2;
				column2 = j2;
			} 
		}
	}

    a = column1;
    b = row1;
    c = row1;
    d = column2;

    if (column1 > column2) {
        x = column1;
        column1 = column2;
        column2 = x;
        a = x;
        true1 = 1;
    }
    if (row1 > row2){
        y = row1;
        row1 = row2;
        row2 = y;
        b = y;
        d = column2;
        true2 = 1;
    }

    if (true1 == 1 && true2 == 1){
        d = column1;
    }

	for (j3 = column1; j3 < column2+1; j3++) {
        if (array[c][j3] == 0) {
            array[c][j3] = 3;
			} 
	}
    
    for (i3 = row1; i3 < row2; i3++) {
        if (array[i3][d] == 0) {
            array[i3][d] = 3;
			} 
	}
}",0
dsin316,1696205668,2,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void PelletRoute(int array[10][10]);

int main(void)
{
    int warehouse[10][10] = { 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, },
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0} };

PelletRoute(warehouse);

int i, j;
for (i = 0; i < 10; i++) {
   for (j = 0; j < 10; j++) {
      printf(""%d "", warehouse[i][j]);
   }
   printf(""\n"");
}
}

void PelletRoute(int array[10][10])
{
    int i;
    int j;

    int x;
    int y;
    int c;
    int d;
    

    int true1 = 0;
    int true2 = 0;

    int i2;
	int j2;

    int row1;
    int column1;

    int row2;
    int column2;

    int i3;
    int j3;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (array[i][j] == 1) {
				row1 = i;
				column1 = j;
			} 
		}
	}

	for (i2 = 0; i2 < 10; i2++) {
		for (j2 = 0; j2 < 10; j2++) {
			if (array[i2][j2] == 2) {
				row2 = i2;
				column2 = j2;
			} 
		}
	}

    c = row1;
    d = column2;

    if (column1 > column2) {
        x = column1;
        column1 = column2;
        column2 = x;
        true1 = 1;
    }
    if (row1 > row2){
        y = row1;
        row1 = row2;
        row2 = y;
        d = column2;
        true2 = 1;
    }

    if (true1 == 1 && true2 == 1){
        d = column1;
    }

	for (j3 = column1; j3 < column2+1; j3++) {
        if (array[c][j3] == 0) {
            array[c][j3] = 3;
			} 
	}
    
    for (i3 = row1; i3 < row2; i3++) {
        if (array[i3][d] == 0) {
            array[i3][d] = 3;
			} 
	}
}",0
dsin316,1696205751,3,"void PelletRoute(int array[10][10])
{
    int i;
    int j;

    int x;
    int y;
    int c;
    int d;
    

    int true1 = 0;
    int true2 = 0;

    int i2;
	int j2;

    int row1;
    int column1;

    int row2;
    int column2;

    int i3;
    int j3;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (array[i][j] == 1) {
				row1 = i;
				column1 = j;
			} 
		}
	}

	for (i2 = 0; i2 < 10; i2++) {
		for (j2 = 0; j2 < 10; j2++) {
			if (array[i2][j2] == 2) {
				row2 = i2;
				column2 = j2;
			} 
		}
	}

    c = row1;
    d = column2;

    if (column1 > column2) {
        x = column1;
        column1 = column2;
        column2 = x;
        true1 = 1;
    }
    if (row1 > row2){
        y = row1;
        row1 = row2;
        row2 = y;
        d = column2;
        true2 = 1;
    }

    if (true1 == 1 && true2 == 1){
        d = column1;
    }

	for (j3 = column1; j3 < column2+1; j3++) {
        if (array[c][j3] == 0) {
            array[c][j3] = 3;
			} 
	}
    
    for (i3 = row1; i3 < row2; i3++) {
        if (array[i3][d] == 0) {
            array[i3][d] = 3;
			} 
	}
}",1
dtol781,1695856342,1,"// function pellete route
void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int posrone, posrtwo, poscone, posctwo;

	for(i = 0; i < 10; i++) {
		for(j = 0; j < 10; j++) {
			if( warehouse[i][j] == 1) {
				posrone = i;
                poscone = j;
			}
            if( warehouse[i][j] == 2) {
                posrtwo = i;
                posctwo = j;
            }
		}

	}
    int relativerow = posrtwo - posrone;
    int relativecol = posctwo - poscone;

    //right
    if(relativecol > 0) {
        for (j = poscone + 1; j <= posctwo; j++) {
             if (warehouse[posrone][j] != 2){
                warehouse[posrone][j] = 3;
             }
        }
    }

    //left
    if(relativecol < 0) {
        for (j = poscone - 1; j >= posctwo; j--) {
            if (warehouse[posrone][j] != 2){
                warehouse[posrone][j] = 3;
            }
        }
    }

    //down
    if(relativerow > 0) {
        for (i = posrone + 1; i < posrtwo; i++) {
            warehouse[i][posctwo] = 3;
        }
    }

    //up
    if(relativerow < 0) {
        for (i = posrone - 1; i > posrtwo; i--) {
            warehouse[i][posctwo] = 3;
        }
    }
}",1
dvu878,1696142885,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {

    int startrow, startcol, finalrow, finalcol;
    // find start and end positions
	// iterate through the tiles
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

			// check if if value is 1
			if (warehouse[i][j] == 1) {
				// rearrange values
				startrow = i;
				startcol = j;
			}

			// check if value is 2
			if (warehouse[i][j] == 2) {
				// rearrange values
				finalrow = i;
				finalcol = j;
			}
		}
	}

	// rewriting horizontal path
	for (int i = startcol + 1; i <= finalcol; i++) {
		warehouse[startrow][i] = 3;
	}

	// rewriting vertical path
	for (int i = startrow; i < finalrow; i++) {
		warehouse[i][finalcol] = 3;
	}

}",0
dvu878,1696144842,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {

    int startrow, startcol, finalrow, finalcol;
    // find start and end positions
	// iterate through the tiles
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

			// check if if value is 1
			if (warehouse[i][j] == 1) {
				// rearrange values
				startrow = i;
				startcol = j;
			}

			// check if value is 2
			if (warehouse[i][j] == 2) {
				// rearrange values
				finalrow = i;
				finalcol = j;
			}
		}
	}

	// rewriting horizontal path if going right starting one to the right
	if (startcol < finalcol) 
	{
		for (int i = startcol + 1; i <= finalcol; i++) {
			warehouse[startrow][i] = 3;
		}
	} 
	else { // going right starting on final
		for (int i = finalcol; i < startcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}

	// rewriting vertical path if going down
	if (finalrow > startrow) 
	{ 
		for (int i = startrow; i < finalrow; i++) {
			warehouse[i][finalcol] = 3;
		}
	} 
	else { // going down starting from one below final row
		for (int i = finalrow + 1; i < startrow; i++) {
			warehouse[i][finalcol] = 3;
		}
	}
}",0
dvu878,1696153415,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {

    int startrow, startcol, finalrow, finalcol;
    // find start and end positions
	// iterate through the tiles
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

			// check if if value is 1
			if (warehouse[i][j] == 1) {
				// rearrange values
				startrow = i;
				startcol = j;
			}

			// check if value is 2
			if (warehouse[i][j] == 2) {
				// rearrange values
				finalrow = i;
				finalcol = j;
			}
		}
	}

	// rewriting horizontal path if going right starting one to the right
	if (startcol < finalcol)
	{
		for (int i = startcol + 1; i <= finalcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}
	else { // going right starting on final
		for (int i = finalcol; i < startcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}

	// rewriting vertical path if going down
	if (finalrow > startrow)
	{
		for (int i = startrow; i < finalrow; i++) {
			warehouse[i][finalcol] = 3;
		}
	}
	else { // going down starting from one below final row
		for (int i = finalrow + 1; i < startrow; i++) {
			warehouse[i][finalcol] = 3;
		}
	}

	// replacing initial values in case of overwrite
	warehouse[startrow][startcol] = 1;
	warehouse[finalrow][finalcol] = 2;

}",1
dwar594,1695797052,1,"void PelletRoute(int warehouse[10][10]) {
    int pRow, pCol, dRow, dCol;
    
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            } else if (warehouse[i][j] == 2) {
                dRow = i;
                dCol = j;
            }
        }
    }
    
    for (int j = pCol; j < dCol; j++) {
        warehouse[pRow][j] = 3;
    }
    
    for (int i = pRow; i < dRow; i++) {
        warehouse[i][dCol] = 3;
    }
}
",0
dwar594,1695797523,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pRow, pCol, dRow, dCol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            } else if (warehouse[i][j] == 2) {
                dRow = i;
                dCol = j;
            }
        }
    }
    
    for (int j = pCol; j <= dCol; j++) {
        warehouse[pRow][j] = 3;
    }
    
    for (int i = pRow; i <= dRow; i++) {
        warehouse[i][dCol] = 3;
    }
}
",0
dwar594,1695797566,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pRow, pCol, dRow, dCol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            } else if (warehouse[i][j] == 2) {
                dRow = i;
                dCol = j;
            }
        }
    }
    
    
",0
dwu617,1695969061,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, row, col, row1, col1;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row = i;
				col = j;
			}
		}
	}

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				row1 = i;
				col1 = j;
			}
		}
	}

	if (col < col1) {
		for (i = col + 1; i <= col1; i++) {
			warehouse[row][i] = 3;
		}
	}
	else {
		for (i = col - 1; i >= col1; i--) {
			warehouse[row][i] = 3;
		}
	}

	if (row < row1) {
		for (i = row ; i < row1; i++) {
			warehouse[i][col1] = 3;
		}
	}
	else {
		for (i = row; i > row1; i--) {
			warehouse[i][col1] = 3;
		}
	}
	warehouse[row][col] = 1;
	warehouse[row1][col1] = 2;
}",1
dyu343,1695617531,1,"void FindLocation(int Layout[10][10], int item, int* rowPos, int* colPos)
{

	for (int row = 0; row < 10; row++)
	{
		for (int col = 0; col < 10; col++)
		{
			if (Layout[row][col] == item)
			{
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}

void PelletRoute(int Layout[10][10])
{
	int pellet_row, pellet_col;
	int destination_row, destination_col;

	FindLocation(Layout, 1, &pellet_row, &pellet_col);
	FindLocation(Layout, 2, &destination_row, &destination_col);

	int dx = pellet_col - destination_col; // negative means move right.
	int dy = pellet_row - destination_row; // negatives mean move down.

	//printf(""%d %d\n"", dx, dy);

	// to keep track of location.
	int current_row = pellet_row;
	int current_col = pellet_col;

	if (dx < 0) // move right.
	{
		for (int i = 1; i <= -dx; i++) // -dx to invert to positive.
		{
			Layout[current_row][current_col + i] = 3;
		}
		current_col = current_col + (-dx);
	}
	else if (dx > 0) // move left.
	{
		for (int i = 1; i <= dx; i++)
		{
			Layout[current_row][current_col - i] = 3;
		}
		current_col = current_col - dx;
	}

	if (dy < 0) // move down.s
	{
		for (int i = 1; i < -dy; i++) // -dy to invert to positive.
		{
			Layout[current_row + i][current_col] = 3;
		}
	}
	else if (dy > 0)
	{
		for (int i = 1; i < dy; i++) // -dy to invert to positive.
		{
			Layout[current_row - i][current_col] = 3;
		}
	}
}
",0
dyu343,1695618094,2,"void FindLocation(int Layout[10][10], int item, int* rowPos, int* colPos)
{

	for (int row = 0; row < 10; row++)
	{
		for (int col = 0; col < 10; col++)
		{
			if (Layout[row][col] == item)
			{
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}

void PelletRoute(int Layout[10][10])
{
	int pellet_row, pellet_col;
	int destination_row, destination_col;

	FindLocation(Layout, 1, &pellet_row, &pellet_col);
	FindLocation(Layout, 2, &destination_row, &destination_col);

	int dx = pellet_col - destination_col; // negative means move right.
	int dy = pellet_row - destination_row; // negatives mean move down.

	//printf(""%d %d\n"", dx, dy);

	// to keep track of location.
	int current_row = pellet_row;
	int current_col = pellet_col;

	if (dx < 0) // move right.
	{
		for (int i = 1; i <= -dx; i++) // -dx to invert to positive.
		{
			Layout[current_row][current_col + i] = 3;
		}
		current_col = current_col + (-dx);
	}
	else if (dx > 0) // move left.
	{
		for (int i = 1; i <= dx; i++)
		{
			if (Layout[current_row][current_col - i] != 2)
			{
				Layout[current_row][current_col - i] = 3;
			}
		}
		current_col = current_col - dx;	
	}

	if (dy < 0) // move down.
	{
		for (int i = 1; i < -dy; i++) // -dy to invert to positive.
		{
			Layout[current_row + i][current_col] = 3;
		}
	}
	else if (dy > 0) // move up
	{
		for (int i = 1; i < dy; i++) // -dy to invert to positive.
		{
			Layout[current_row - i][current_col] = 3;
		}
	}
}",1
eara128,1695876247,1,"void PelletRoute (int warehouse[NUM_ROWS][NUM_COLS])
{
    /* finding the position of the 1 (e.g the initial position of the crate) */
    int rowPosI, colPosI, rowPosF, colPosF;
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0 ; j < NUM_COLS; j++){
            if (warehouse[i][j] == 1 ){
                rowPosI = i;
                colPosI = j;
            }
        }
    }
    /* finding the position of the 2 (e.g the final position of the crate)*/
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0 ; j < NUM_COLS; j++){
            if (warehouse[i][j] == 2 ){
                rowPosF = i;
                colPosF = j;
            }
        }
    }

    /* moving the vrate - making all the numbers in the horizontal direction a 3 */
    for (int j = colPosI + 1; j < colPosF; j++){
        warehouse[rowPosI][j] = 3;
    }

    /* repeating the process for the columns*/
     for (int i = rowPosI; i < rowPosF; i++){
        warehouse[i][colPosF] = 3; 
    }


}",0
eara128,1695876301,2,"void PelletRoute (int warehouse[10][10])
{
    /* finding the position of the 1 (e.g the initial position of the crate) */
    int rowPosI, colPosI, rowPosF, colPosF;
    for (int i = 0; i < 10; i++){
        for (int j = 0 ; j < 10; j++){
            if (warehouse[i][j] == 1 ){
                rowPosI = i;
                colPosI = j;
            }
        }
    }
    /* finding the position of the 2 (e.g the final position of the crate)*/
    for (int i = 0; i < 10; i++){
        for (int j = 0 ; j < 10; j++){
            if (warehouse[i][j] == 2 ){
                rowPosF = i;
                colPosF = j;
            }
        }
    }

    /* moving the vrate - making all the numbers in the horizontal direction a 3 */
    for (int j = colPosI + 1; j < colPosF; j++){
        warehouse[rowPosI][j] = 3;
    }

    /* repeating the process for the columns*/
     for (int i = rowPosI; i < rowPosF; i++){
        warehouse[i][colPosF] = 3; 
    }


}",0
eara128,1695885627,3,"void PelletRoute (int warehouse[10][10])
{
    /* finding the position of the 1 (e.g the initial position of the crate) */
    int rowPosI, colPosI, rowPosF, colPosF;
    for (int i = 0; i < 10; i++){
        for (int j = 0 ; j < 10; j++){
            if (warehouse[i][j] == 1 ){
                rowPosI = i;
                colPosI = j;
            }
        }
    }
    /* finding the position of the 2 (e.g the final position of the crate)*/
    for (int i = 0; i < 10; i++){
        for (int j = 0 ; j < 10; j++){
            if (warehouse[i][j] == 2 ){
                rowPosF = i;
                colPosF = j;
            }
        }
    }
    /* if initial box is above final box*/
    if(rowPosI < rowPosF) {
        if (colPosI < colPosF){ // to the right
            for (int j = colPosI +1 ; j < colPosF +1; j++){
            warehouse[rowPosI][j] = 3;
            }   
            for (int i = rowPosI + 1; i < rowPosF; i++){
                warehouse[i][colPosF] = 3; 
            } 
        }  else if (colPosI > colPosF) { // to the left
        
            for (int j = colPosI - 1 ; j > colPosF -1 ; j--){
                warehouse[rowPosI][j] = 3;
            }   
            for (int i = rowPosI +1 ; i < rowPosF; i++){
                warehouse[i][colPosF] = 3;
            }
        } else { // same column
            for (int i = rowPosI +1 ; i < rowPosF; i++){
                warehouse[i][colPosF] = 3;
            }
        }

    } else if (rowPosI > rowPosF){ // when the initial box is below the final box
        
        if (colPosI < colPosF){ // to the right
            for (int j = colPosI +1 ; j < colPosF +1; j++){
            warehouse[rowPosI][j] = 3;
            }   
            for (int i = rowPosI ; i > rowPosF; i--){
                warehouse[i][colPosF] = 3; 
            } 
        }  else if (colPosI > colPosF ){ // to the left
        
            for (int j = colPosI - 1 ; j > colPosF -1 ; j--){
                warehouse[rowPosI][j] = 3;
            }   
            for (int i = rowPosI ; i > rowPosF; i--){
                warehouse[i][colPosF] = 3;
            }
        } else {
             for (int i = rowPosI - 1 ; i > rowPosF; i--){
                warehouse[i][colPosF] = 3;
            }
        }
        
    } else { // same row 
        if (colPosI < colPosF){ // to the right
            for (int j = colPosI +1 ; j < colPosF ; j++){
            warehouse[rowPosI][j] = 3;
            }   
        }  else { // to the left
            for (int j = colPosI - 1 ; j > colPosF ; j--){
                warehouse[rowPosI][j] = 3;
            }   
        }

    }
}",1
ebar824,1696227234,1,"void PelletRoute(int warehouse[10][10]){

int startrow;
int startcol;
int endrow;
int endcol;

for (int i = 0; i < 10; i++)
{
    for (int j = 0; j < 10; j++)
    {
        if (warehouse[i][j] == 1){
            startrow = i; 
            startcol = j;
        }
        if (warehouse[i][j] == 2){
            endrow = i; 
            endcol = j;

        }
        
    }
    
}
if (startrow == endrow || startcol == endcol){
    if (startrow >endrow){
        for (int k = endrow+1; k < endrow+(startrow-endrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    else if (startrow <endrow){
        for (int k = startrow+1; k < startrow+(endrow-startrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    if (startcol <endcol){
        for (int o = startcol+1; o < startcol+(endcol-startcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    else if (endcol <startcol){
        for (int o = endcol+1; o < endcol+(startcol-endcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }

}
else
{
    if (startrow >endrow){
        for (int k = endrow+1; k < endrow+(startrow-endrow)+1; k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    else if (startrow <endrow){
        for (int k = startrow+1; k < startrow+(endrow-startrow)+1; k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    if (startcol <endcol){
        for (int o = startcol+1; o < startcol+(endcol-startcol)+1; o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    else if (endcol <startcol){
        for (int o = endcol+1; o < endcol+(startcol-endcol)+1; o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
}

}",0
ebar824,1696227531,2,"void PelletRoute(int warehouse[10][10]){

int startrow;
int startcol;
int endrow;
int endcol;

for (int i = 0; i < 10; i++)
{
    for (int j = 0; j < 10; j++)
    {
        if (warehouse[i][j] == 1){
            startrow = i; 
            startcol = j;
        }
        if (warehouse[i][j] == 2){
            endrow = i; 
            endcol = j;

        }
        
    }
    
}
if (startrow == endrow || startcol == endcol){
    if (startrow >endrow){
        for (int k = endrow+1; k < endrow+(startrow-endrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    else if (startrow <endrow){
        for (int k = startrow+1; k < startrow+(endrow-startrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    if (startcol <endcol){
        for (int o = startcol+1; o < startcol+(endcol-startcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    else if (endcol <startcol){
        for (int o = endcol+1; o < endcol+(startcol-endcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }

}
else
{
    if (startrow >endrow){
        for (int k = endrow+1; k < endrow+(startrow-endrow)+1; k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    else if (startrow <endrow){
        for (int k = startrow+1; k < startrow+(endrow-startrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    if (startcol <endcol){
        for (int o = startcol+1; o < startcol+(endcol-startcol)+1; o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    else if (endcol <startcol){
        for (int o = endcol+1; o < endcol+(startcol-endcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
}

}",0
ebar824,1696227699,3,"void PelletRoute(int warehouse[10][10]){

int startrow;
int startcol;
int endrow;
int endcol;

for (int i = 0; i < 10; i++)
{
    for (int j = 0; j < 10; j++)
    {
        if (warehouse[i][j] == 1){
            startrow = i; 
            startcol = j;
        }
        if (warehouse[i][j] == 2){
            endrow = i; 
            endcol = j;

        }
        
    }
    
}
if (startrow == endrow || startcol == endcol){
    if (startcol <endcol){
        for (int o = startcol+1; o < startcol+(endcol-startcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    else if (endcol <startcol){
        for (int o = endcol+1; o < endcol+(startcol-endcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    if (startrow >endrow){
        for (int k = endrow+1; k < endrow+(startrow-endrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    else if (startrow <endrow){
        for (int k = startrow+1; k < startrow+(endrow-startrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }

}
else
{
    
    if (startcol <endcol){
        for (int o = startcol+1; o < startcol+(endcol-startcol)+1; o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    else if (endcol <startcol){
        for (int o = endcol+1; o < endcol+(startcol-endcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    if (startrow >endrow){
        for (int k = endrow+1; k < endrow+(startrow-endrow)+1; k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    else if (startrow <endrow){
        for (int k = startrow+1; k < startrow+(endrow-startrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
}

}",0
ebar824,1696232331,4,"void PelletRoute(int warehouse[10][10]){

int startrow;
int startcol;
int endrow;
int endcol;



for (int i = 0; i < 10; i++)
{
    for (int j = 0; j < 10; j++)
    {
        if (warehouse[i][j] == 1){
            startrow = i; 
            startcol = j;
        }
        if (warehouse[i][j] == 2){
            endrow = i; 
            endcol = j;

        }
        
    }
    
}
if (startrow == endrow || startcol == endcol){
     if (startcol <endcol){
        for (int o = startcol+1; o < startcol+(endcol-startcol); o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    else if (endcol <startcol){
        for (int o = startcol-1; o > endcol; o--)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    if (startrow  > endrow){
        for (int k = startrow-1; k > endrow; k--)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    else if (startrow < endrow){
        for (int k = startrow+1; k < startrow+(endrow-startrow); k++)
        {
            warehouse[k][startcol] = 3;
        }
        
    }
}
else
{
    
    if (startcol <endcol){
        for (int o = startcol+1; o < startcol+(endcol-startcol)+1; o++)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    else if (endcol <startcol){
        for (int o = startcol-1; o > endcol-1; o--)
        {
            warehouse[startrow][o] = 3;
        }
        
    }
    if (startrow  > endrow){
        for (int k = startrow-1; k > endrow; k--)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
    else if (startrow < endrow){
        for (int k = startrow; k < startrow+(endrow-startrow); k++)
        {
            warehouse[k][endcol] = 3;
        }
        
    }
}

}",1
echa931,1696232831,1,"void Find(int warehouse[10][10], int number, int* rowPos, int* colPos)
{
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == number) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}
void PelletRoute(int warehouse[10][10]) {
	int row, col, R, C, i, j;
	Find(warehouse, 1, &row, &col);
	Find(warehouse, 2, &R, &C);
	if (C > col) {
		for (i = (col+1); i < C; i++) {
			warehouse[row][i] = 3;
		}
	}
	else if (C < col) {
		for (i = (col-1); i > C; i--) {
			warehouse[row][i] = 3;
		}
	}
	else {
		i = col;
	}

	if (R > row) {
		for (j = row; j < R; j++) {
			warehouse[j][i] = 3;
		}
	}
	else if (R < row) {
		for (j = row; j > R; j--) {
			warehouse[j][i] = 3;
		}
	}
	warehouse[row][col] = 1;
	warehouse[R][C] = 2;
}",1
eche101,1696205307,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX, pelletY, destX, destY;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletX = i;
                pelletY = j;
            }
            if (warehouse[i][j] == 2) {
                destX = i;
                destY = j;
            }
        }
    }

    while (pelletY != destY) {
        if (pelletY < destY) {
            pelletY++;
        } else {
            pelletY--;
        }
        warehouse[pelletX][pelletY] = 3;
    }

    while (pelletX != destX) {
        if (pelletX < destX) {
            pelletX++;
        } else {
            pelletX--;
        }
        warehouse[pelletX][pelletY] = 3;
    }
    warehouse[destX][destY] = 2;
}",1
ehua682,1696217623,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;
    
    

    // Finding the row and column indices of the pellet (1) and destination (2).
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    
    

    // Move horizontally to line up with the destination.
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }




    // Move vertically to reach the destination.
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}


",0
ekmu195,1695692039,1,"void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pellet_row, pellet_col;
    int dest_row, dest_col;
    int end;
    int start;

// find 1 position
    for (i=0; i < 10; i++) {
        for (j=0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
        }
    }
// find 2 position
    for (i=0; i < 10; i++) {
        for (j=0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }
// calculate horizontal dist
    if (dest_row - pellet_row == 0) {
        if (dest_col > pellet_col) {
            end = dest_col;
            start = pellet_col + 1;
        } else {
            end = pellet_col;
            start = dest_col + 1;
        }
    } else {
        if (dest_col > pellet_col) {
            start = pellet_col + 1;
            end = dest_col + 1;
        } else {
            start = dest_col;
            end = pellet_col;
        }
    }
// replace horizontal dist 
    for (i=start; i < end; i++) {
        warehouse[pellet_row][i] = 3;

    }
// calculate vertical dist
    if (dest_row > pellet_row) {
        for (j = pellet_row+1; j < dest_row; j++) {
            warehouse[j][dest_col] = 3;
        }

    } else {
        for (j = dest_row+1; j < pellet_row; j++) {
            warehouse[j][dest_col] = 3;
        }
    }
    
}",1
elau447,1696107166,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
	int boxX, boxY, endX, endY;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				boxX = j;
				boxY = i;
			}
			if (warehouse[i][j] == 2) {
				endX = j;
				endY = i;
			}
		}
	}
	//printf(""1X = %d 1Y = %d, 2X = %d 2Y = %d "", boxX, boxY, endX, endY);
	if (boxX < endX) {
		boxX++;
		for (int j = boxX; j <= endX; j++) {
			warehouse[boxY][j] = 3;
		}

	}
	else if (boxX > endX) {
		boxX--;
		for (int j = boxX; j <= endX; j--) {
			warehouse[boxY][j] = 3;
		}

	}

		if (boxY < endY) {
			boxY++;
			for (int i = boxY; i < endY; i++) {
				warehouse[i][endX] = 3;
			}
		}
		else if (boxX > endX) {
			boxY++;
			for (int i = boxY; i < endY; i++) {
				warehouse[i][endX] = 3;
			}


		}
	}",0
elau447,1696107411,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
	int boxX, boxY, endX, endY;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				boxX = j;
				boxY = i;
			}
			if (warehouse[i][j] == 2) {
				endX = j;
				endY = i;
			}
		}
	}
	//printf(""1X = %d 1Y = %d, 2X = %d 2Y = %d "", boxX, boxY, endX, endY);
	if (boxX < endX) {
		boxX++;
		for (int j = boxX; j <= endX; j++) {
			warehouse[boxY][j] = 3;
		}

	}
	else if (boxX > endX) {
		boxX--;
		for (int j = boxX; j >= endX; j--) {
			warehouse[boxY][j] = 3;
		}

	}

		if (boxY < endY) {
			boxY++;
			for (int i = boxY; i < endY; i++) {
				warehouse[i][endX] = 3;
			}
		}
		else if (boxX > endX) {
			boxY--;
			for (int i = boxY; i > endY; i--) {
				warehouse[i][endX] = 3;
			}


		}
	}",0
elau447,1696107492,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
	int boxX, boxY, endX, endY;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				boxX = j;
				boxY = i;
			}
			if (warehouse[i][j] == 2) {
				endX = j;
				endY = i;
			}
		}
	}
	//printf(""1X = %d 1Y = %d, 2X = %d 2Y = %d "", boxX, boxY, endX, endY);
	if (boxX < endX) {
		boxX++;
		for (int j = boxX; j < endX; j++) {
			warehouse[boxY][j] = 3;
		}

	}
	else if (boxX > endX) {
		boxX--;
		for (int j = boxX; j > endX; j--) {
			warehouse[boxY][j] = 3;
		}

	}

		if (boxY < endY) {
			boxY++;
			for (int i = boxY; i < endY; i++) {
				warehouse[i][endX] = 3;
			}
		}
		else if (boxX > endX) {
			boxY--;
			for (int i = boxY; i > endY; i--) {
				warehouse[i][endX] = 3;
			}


		}
	}",0
elau447,1696109047,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
	int boxX, boxY, endX, endY;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				boxX = j;
				boxY = i;
			}
			if (warehouse[i][j] == 2) {
				endX = j;
				endY = i;
			}
		}
	}
	if (boxX == endX) {
		if (boxY < endY) {
			boxY++;
			for (int i = boxY; i < endY; i++) {
				warehouse[i][endX] = 3;
			}
		}
		else if (boxY > endY) {
			boxY--;
			for (int i = boxY; i > endY; i--) {
				warehouse[i][endX] = 3;
			}
		}
	} else if ((boxX < endX) && (boxY != endY)) {
		boxX++;
		for (int j = boxX; j <= endX; j++) {
			warehouse[boxY][j] = 3;
		}
		
	}else if ((boxX > endX) && (boxY != endY)) {
		boxX--;
		for (int j = boxX; j >= endX; j--) {
			warehouse[boxY][j] = 3;
		}
	}

	if (boxY == endY) {
		if (boxX < endX) {
			boxX++;
			for (int j = boxX; j < endX; j++) {
				warehouse[boxY][j] = 3;
			}

		}
		else if (boxX > endX) {
			boxX--;
			for (int j = boxX; j > endX; j--) {
				warehouse[boxY][j] = 3;
			}

		}

	} else if ((boxY < endY) && (boxX != endX)) {
		boxY++;
		for (int i = boxY; i < endY; i++) {
			warehouse[i][endX] = 3;
		}
	}
	else if ((boxY > endY) && (boxX != endX)) {
		boxY--;
		for (int i = boxY; i > endY; i--) {
			warehouse[i][endX] = 3;
		}


	}
}",1
else264,1696224165,1,"void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]){
    
    int i, j, start_row, start_col, end_row, end_col;
    
    for (i=0;i<NUM_ROWS;i++){
        for (j=0;j<NUM_COLS;j++){
            if (warehouse[i][j]==1)
            {
                start_row=i;
                start_col=j;
            }
        }
    }
    
    for (i=0;i<NUM_ROWS;i++){
        for (j=0;j<NUM_COLS;j++){
            if (warehouse[i][j]==2){
                end_row=i;
                end_col=j;
            }
        }
    }
    
    
    printf(""start (%d,%d)\n end (%d,%d)\n"", start_row,start_col, end_row,end_col);
    
    
    if (start_row<end_row && start_col<end_col){
        for (int a=start_col+1;a<=end_col;a++){
            warehouse[start_row][a]=3;
        }
        for (int b=start_row;b<end_row;b++){
            warehouse[b][end_col]=3;
        }
    }
    
    else if (start_row>end_row && start_col>end_col){
        for (int a=start_col-1;a>end_col;a--){
            warehouse[start_row][a]=3;
        }
        for (int b=start_row;b>end_row;b--){
            warehouse[b][end_col]=3;
        }
    }
    
    
     else if (start_row<end_row && start_col>end_col){
        for (int a=start_col-1;a>=end_col;a--){
            warehouse[start_row][a]=3;
        }
        for (int b=start_row;b<end_row;b++){
            warehouse[b][end_col]=3;
        }
    }
    
    else if (start_row>end_row && start_col<end_col){
        for (int a=start_col+1;a<end_col;a++){
            warehouse[start_row][a]=3;
        }
        for (int b=start_row;b>end_row;b--){
            warehouse[b][end_col]=3;
        }
    }
    
    else if (start_row>end_row && start_col==end_col){
        for (int a=start_row-1;a>end_row;a--){
            warehouse[a][end_col]=3;
        }
    }
    
    else if (start_row<end_row && start_col==end_col){
        for (int a=start_row+1;a<end_row;a++){
            warehouse[a][end_col]=3;
        }
    }
    
    else if (start_col<end_col && start_row==end_row){
        for (int a=start_col+1;a<end_col;a++){
            warehouse[start_row][a]=3;
        }
    }
    
    else if (start_col>end_col && start_row==end_row){
        for (int a=start_col-1;a>end_col;a--){
            warehouse[start_row][a]=3;
        }
    }
    
    else{
        ;
    }
    
    
}",0
else264,1696224592,2,"void PelletRoute(int warehouse[10][10]){
    
    int i, j, start_row, start_col, end_row, end_col;
    
    for (i=0;i<10;i++){
        for (j=0;j<10;j++){
            if (warehouse[i][j]==1)
            {
                start_row=i;
                start_col=j;
            }
        }
    }
    
    for (i=0;i<10;i++){
        for (j=0;j<10;j++){
            if (warehouse[i][j]==2){
                end_row=i;
                end_col=j;
            }
        }
    }
    
    
    if (start_row<end_row && start_col<end_col){
        for (int a=start_col+1;a<=end_col;a++){
            warehouse[start_row][a]=3;
        }
        for (int b=start_row;b<end_row;b++){
            warehouse[b][end_col]=3;
        }
    }
    
    else if (start_row>end_row && start_col>end_col){
        for (int a=start_col-1;a>end_col;a--){
            warehouse[start_row][a]=3;
        }
        for (int b=start_row;b>end_row;b--){
            warehouse[b][end_col]=3;
        }
    }
    
    
     else if (start_row<end_row && start_col>end_col){
        for (int a=start_col-1;a>=end_col;a--){
            warehouse[start_row][a]=3;
        }
        for (int b=start_row;b<end_row;b++){
            warehouse[b][end_col]=3;
        }
    }
    
    else if (start_row>end_row && start_col<end_col){
        for (int a=start_col+1;a<end_col;a++){
            warehouse[start_row][a]=3;
        }
        for (int b=start_row;b>end_row;b--){
            warehouse[b][end_col]=3;
        }
    }
    
    else if (start_row>end_row && start_col==end_col){
        for (int a=start_row-1;a>end_row;a--){
            warehouse[a][end_col]=3;
        }
    }
    
    else if (start_row<end_row && start_col==end_col){
        for (int a=start_row+1;a<end_row;a++){
            warehouse[a][end_col]=3;
        }
    }
    
    else if (start_col<end_col && start_row==end_row){
        for (int a=start_col+1;a<end_col;a++){
            warehouse[start_row][a]=3;
        }
    }
    
    else if (start_col>end_col && start_row==end_row){
        for (int a=start_col-1;a>end_col;a--){
            warehouse[start_row][a]=3;
        }
    }
    
    else{
        ;
    }
    
    
}",1
ely207,1695902127,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int row1, col1, row2, col2;

	// Finding where '1' is located
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				row1 = i;
				col1 = j;
			}
		}
	}


	// Finding where '2' is located
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 2)
			{
				row2 = i;
				col2 = j;
			}
		}
	}

	// Going Left
	if (col1 - col2 > 0)
	{
		
		for (int i = col1 -1; i >= col2; i--)
		{
			if (row1 - row2 == 0 && i == col2)
			{

			}
			else
			{
				warehouse[row1][i] = 3;
			}

		}

	}
	// Going Right
	else if (col1 - col2 < 0)
	{
		for (int i = col1 + 1; i <= col2; i++)
		{
			if (row2 - row1 == 0 && i == col2)
			{

			}
			else
			{
				warehouse[row1][i] = 3;
			}
		}
	}




	// Going Up
	if (row1 - row2 > 0)
	{
		for (int i = row1-1; i > row2; i--)
		{
			warehouse[i][col2] = 3;
		}

	}
	// Going Down
	else if (row1 - row2 < 0)
	{
		for (int i = row1+1; i < row2; i++)
		{
			warehouse[i][col2] = 3;
		}
	}
}
",1
ema340,1696054911,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {         
                pelletRow = i;
                pelletCol = j;
            } else {
                if (warehouse[i][j] == 2) {     
                    destRow = i;
                    destCol = j;
                }
            }
        }
    }

    if (destCol > pelletCol) {
        for (int horiz = pelletCol; horiz <= destCol; horiz++) {
            if (warehouse[pelletRow][horiz] == 0) {
                warehouse[pelletRow][horiz] = 3;
            }
        }
    } else {
        if (destCol < pelletCol) {
            for (int horiz = pelletCol; horiz >= destCol; horiz--) {
                if (warehouse[pelletRow][horiz] == 0) {
                    warehouse[pelletRow][horiz] = 3;
                }
            }
        }
    }

    if (destRow > pelletRow) {
        for (int vert = pelletRow; vert <= destRow; vert++) {
            if (warehouse[vert][destCol] == 0) {
                warehouse[vert][destCol] = 3;
            }
        }
    } else {
        if (destRow < pelletRow) {
            for (int vert = pelletRow; vert >= destRow; vert--) {
                if (warehouse[vert][destCol] == 0) {
                    warehouse[vert][destCol] = 3;
                }
            }
        }
    }
}",1
emah834,1696148512,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int rowPos1;
int colPos1;
int rowPos2;
int colPos2;
    for (int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                rowPos1 = i;
                colPos1 = j; 
            }
            if (warehouse[i][j] == 2){
                rowPos2 = i;
                colPos2 = j; 
            }
            
        }
    }
    
    if (colPos1 < colPos2) {
        for (int j = colPos1 + 1; j <= colPos2; j++) {
            warehouse[rowPos1][j] = 3; 
        }
    } else {
        for (int j = colPos1 - 1; j >= colPos2; j--) {
            warehouse[rowPos1][j] = 3; 
        } 
    }

    if (rowPos1 < rowPos2) {
        for (int i = rowPos1 + 1; i <= rowPos2 - 1; i++) {
            warehouse[i][colPos2] = 3;
        }
    } else {
        for (int i = rowPos1 - 1; i >= rowPos2 - 1; i--) {
            warehouse[i][colPos2] = 3;
        }
    }
}",0
emah834,1696148964,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int rowPos1;
int colPos1;
int rowPos2;
int colPos2;
    for (int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                rowPos1 = i;
                colPos1 = j; 
            }
            if (warehouse[i][j] == 2){
                rowPos2 = i;
                colPos2 = j; 
            }
            
        }
    }
    if (colPos1 < colPos2) {
        for (int j = colPos1 + 1; j <= colPos2; j++) {
            warehouse[rowPos1][j] = 3; 
        }
    } else {
        for (int j = colPos1 - 1; j >= colPos2; j--) {
            warehouse[rowPos1][j] = 3; 
        } 
    }

    if (rowPos1 < rowPos2) {
        for (int i = rowPos1 + 1; i <= rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        }
    } else {
        for (int i = rowPos1 - 1; i >= rowPos2; i--) {
            warehouse[i][colPos2] = 3;
        }
    }

    warehouse[rowPos2][colPos2] = 2; 
}",1
eqiu349,1696054658,1,"void PelletRoute(int warehouse[10][10]) {
	int i;
	int j;
	int rowStart;
	int colStart;
	int rowEnd;
	int colEnd;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowEnd = i;
				colEnd = j;
			}
		}
	}

	if (colStart != colEnd) {
		for (i = colStart + 1; i < colEnd+1; i++)
			warehouse[rowStart][i] = 3;
	}

	if (rowStart != rowEnd) {
		for (i = rowStart + 1; i < rowEnd; i++)
			warehouse[i][colEnd] = 3;
	}

}",0
eqiu349,1696057288,2,"void PelletRoute(int warehouse[10][10]) {
	int i;
	int j;
	int rowStart;
	int colStart;
	int rowEnd;
	int colEnd;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowEnd = i;
				colEnd = j;
			}
		}
	}

	//end row and column are bigger than start
	if (colEnd > colStart && rowEnd > rowStart) {
		if (colStart != colEnd) {
			for (i = colStart + 1; i < colEnd + 1; i++)
				warehouse[rowStart][i] = 3;
		}

		if (rowStart != rowEnd) {
			for (i = rowStart + 1; i < rowEnd; i++)
				warehouse[i][colEnd] = 3;
		}
	}

	//end row is bigger but end column is smaller than start

	if (colEnd < colStart && rowEnd > rowStart) {
		if (colStart != colEnd) {
			for (i = colStart - 1; i > colEnd - 1; i--)
				warehouse[rowStart][i] = 3;
		}

		if (rowStart != rowEnd) {
			for (i = rowStart + 1; i < rowEnd; i++)
				warehouse[i][colEnd] = 3;
		}
	}

	//end column is bigger but end row is smaller than start

	if (colEnd > colStart && rowEnd < rowStart) {
		if (colStart != colEnd) {
			for (i = colStart + 1; i < colEnd + 1; i++)
				warehouse[rowStart][i] = 3;
		}

		if (rowStart != rowEnd) {
			for (i = rowStart; i > rowEnd; i--)
				warehouse[i][colEnd] = 3;
		}
	}

	// end row and column are smaller than start

	if (colEnd < colStart && rowEnd < rowStart) {
		if (colStart != colEnd) {
			for (i = colStart - 1; i > colEnd; i = i--)
				warehouse[rowStart][i] = 3;
		}

		if (rowStart != rowEnd) {
			for (i = rowStart; i > rowEnd; i--)
				warehouse[i][colEnd] = 3;
		}
	}

	// row is same but end column is smaller
	if (colEnd < colStart&& rowEnd == rowStart) {
		if (colStart != colEnd) {
			for (i = colStart - 1; i > colEnd; i = i--)
				warehouse[rowStart][i] = 3;
		}
	}

	// row is same but end column is bigger
	if (colEnd > colStart && rowEnd == rowStart) {
		if (colStart != colEnd) {
			for (i = colStart + 1; i < colEnd; i = i++)
				warehouse[rowStart][i] = 3;
		}
	}
	// column is same but end row is smaller
	if (colEnd == colStart && rowEnd < rowStart) {
		if (rowStart != rowEnd) {
			for (i = rowStart - 1; i > rowEnd; i = i--)
				warehouse[i][colStart] = 3;
		}
	}

	// column is same but end row is bigger
	if (colEnd == colStart && rowEnd > rowStart) {
		if (rowStart != rowEnd) {
			for (i = rowStart + 1; i < rowEnd; i = i++)
				warehouse[i][colStart] = 3;
		}
	}
}",0
eqiu349,1696057417,3,"void PelletRoute(int warehouse[10][10]) {
	int i;
	int j;
	int rowStart;
	int colStart;
	int rowEnd;
	int colEnd;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
		}
	}

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowEnd = i;
				colEnd = j;
			}
		}
	}

	//end row and column are bigger than start
	if (colEnd > colStart && rowEnd > rowStart) {
		if (colStart != colEnd) {
			for (i = colStart + 1; i < colEnd + 1; i++)
				warehouse[rowStart][i] = 3;
		}

		if (rowStart != rowEnd) {
			for (i = rowStart + 1; i < rowEnd; i++)
				warehouse[i][colEnd] = 3;
		}
	}

	//end row is bigger but end column is smaller than start

	if (colEnd < colStart && rowEnd > rowStart) {
		if (colStart != colEnd) {
			for (i = colStart - 1; i > colEnd - 1; i--)
				warehouse[rowStart][i] = 3;
		}

		if (rowStart != rowEnd) {
			for (i = rowStart + 1; i < rowEnd; i++)
				warehouse[i][colEnd] = 3;
		}
	}

	//end column is bigger but end row is smaller than start

	if (colEnd > colStart && rowEnd < rowStart) {
		if (colStart != colEnd) {
			for (i = colStart + 1; i < colEnd + 1; i++)
				warehouse[rowStart][i] = 3;
		}

		if (rowStart != rowEnd) {
			for (i = rowStart; i > rowEnd; i--)
				warehouse[i][colEnd] = 3;
		}
	}

	// end row and column are smaller than start

	if (colEnd < colStart && rowEnd < rowStart) {
		if (colStart != colEnd) {
			for (i = colStart - 1; i > colEnd; i--)
				warehouse[rowStart][i] = 3;
		}

		if (rowStart != rowEnd) {
			for (i = rowStart; i > rowEnd; i--)
				warehouse[i][colEnd] = 3;
		}
	}

	// row is same but end column is smaller
	if (colEnd < colStart&& rowEnd == rowStart) {
		if (colStart != colEnd) {
			for (i = colStart - 1; i > colEnd; i--)
				warehouse[rowStart][i] = 3;
		}
	}

	// row is same but end column is bigger
	if (colEnd > colStart && rowEnd == rowStart) {
		if (colStart != colEnd) {
			for (i = colStart + 1; i < colEnd; i++)
				warehouse[rowStart][i] = 3;
		}
	}
	// column is same but end row is smaller
	if (colEnd == colStart && rowEnd < rowStart) {
		if (rowStart != rowEnd) {
			for (i = rowStart - 1; i > rowEnd; i--)
				warehouse[i][colStart] = 3;
		}
	}

	// column is same but end row is bigger
	if (colEnd == colStart && rowEnd > rowStart) {
		if (rowStart != rowEnd) {
			for (i = rowStart + 1; i < rowEnd; i++)
				warehouse[i][colStart] = 3;
		}
	}
}",1
ewil853,1696031510,1,"void PelletRoute (int array[rows][cols])
{
    int rowpos1,rowpos2,colpos1,colpos2,x,y;
for (int i =0;i<rows;i++){
    for (int j=0;j<cols;j++){
        if (array[i][j] == 1){
           rowpos1 = i;
           colpos1 = j; 
        }
    }
}

for (int i =0;i<rows;i++){
    for (int j=0;j<cols;j++){
        if (array[i][j] == 2){
            rowpos2 = i;
            colpos2 = j;
        }
    }
}


x = rowpos2-rowpos1;
y = colpos2-colpos1;
if ((y>0)&&(x>0)){
for (int j = colpos1 +1;j<=colpos2;j++){
    array[rowpos1][j] = 3;

}
for (int i = rowpos1 +1 ;i<rowpos2;i++){
    array[i][colpos2] = 3;
}
}
else if ((y<0)&&(x<0)){
    for (int j = colpos2 +1 ;j< colpos1;j++){
    array[rowpos1][j] = 3;
}
    for (int i = rowpos2 +1 ;i<= rowpos1;i++){
    array[i][colpos2] = 3;
}
}

else if ((y<0)&&(x>0)){
     for (int j = colpos2 +1 ;j<colpos1;j++){
    array[rowpos1][j] = 3;
}
for (int i = rowpos1 ;i<rowpos2;i++){
    array[i][colpos2] = 3;
}
}
else if ((y>0)&&(x<0)){
    for (int j = colpos1 +1;j<=colpos2;j++){
    array[rowpos1][j] = 3;

}
    for (int i = rowpos2 +1 ;i<=rowpos1;i++){
    array[i][colpos2] = 3;
}
}
else if (y==0){
    if (x<0){
        for (int i = rowpos2 +1 ;i<rowpos1;i++){
    array[i][colpos2] = 3;
    }
    }
     else if (x>0){
        for (int i = rowpos1 +1 ;i<rowpos2;i++){
    array[i][colpos2] = 3;
}
    }
}
else if (x==0){
    if (y>0){
        for (int j = colpos1 +1;j<colpos2;j++){
    array[rowpos1][j] = 3;

}
    }
    else if (y<0){
        for (int j = colpos2 +1 ;j<colpos1;j++){
    array[rowpos1][j] = 3;
}
    }
}


    }
",0
ewil853,1696033580,2,"void PelletRoute (int warehouse[10][10])
{


    int rowpos1,rowpos2,colpos1,colpos2,x,y,rows,cols;
    rows = 10;
    cols = 10;
for (int i =0;i<rows;i++){
    for (int j=0;j<cols;j++){
        if (warehouse[i][j] == 1){
           rowpos1 = i;
           colpos1 = j; 
        }
    }
}

for (int i =0;i<rows;i++){
    for (int j=0;j<cols;j++){
        if (warehouse[i][j] == 2){
            rowpos2 = i;
            colpos2 = j;
        }
    }
}


x = rowpos2-rowpos1;
y = colpos2-colpos1;
if ((y>0)&&(x>0)){
for (int j = colpos1 +1;j<=colpos2;j++){
    warehouse[rowpos1][j] = 3;

}
for (int i = rowpos1 +1 ;i<rowpos2;i++){
    warehouse[i][colpos2] = 3;
}
}
else if ((y<0)&&(x<0)){
    for (int j = colpos2 +1 ;j< colpos1;j++){
    warehouse[rowpos1][j] = 3;
}
    for (int i = rowpos2 +1 ;i<= rowpos1;i++){
    warehouse[i][colpos2] = 3;
}
}

else if ((y<0)&&(x>0)){
     for (int j = colpos2 +1 ;j<colpos1;j++){
    warehouse[rowpos1][j] = 3;
}
for (int i = rowpos1 ;i<rowpos2;i++){
    warehouse[i][colpos2] = 3;
}
}
else if ((y>0)&&(x<0)){
    for (int j = colpos1 +1;j<=colpos2;j++){
      warehouse[rowpos1][j] = 3;

}
    for (int i = rowpos2 +1 ;i<=rowpos1;i++){
    warehouse[i][colpos2] = 3;
}
}
else if (y==0){
    if (x<0){
        for (int i = rowpos2 +1 ;i<rowpos1;i++){
    warehouse[i][colpos2] = 3;
    }
    }
     else if (x>0){
        for (int i = rowpos1 +1 ;i<rowpos2;i++){
    warehouse[i][colpos2] = 3;
}
    }
}
else if (x==0){
    if (y>0){
        for (int j = colpos1 +1;j<colpos2;j++){
    warehouse[rowpos1][j] = 3;

}
    }
    else if (y<0){
        for (int j = colpos2 +1 ;j<colpos1;j++){
    warehouse[rowpos1][j] = 3;
}
    }
}


    }






",1
fcoo305,1696220022,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, k, m, p, q;
	int startX, startY, endX, endY = 0;
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1) {
				startX = j;
				startY = i;
			}
			if (warehouse[i][j] == 2) {
				endX = j;
				endY = i;
			}
		}
	}

	if (endX < startX)
	{
		for (k = startX - 1; k >= endX; k--)
		{
			warehouse[startY][k] = 3;
		}
	}
	else
	{
		for (m = startX + 1; m <= endX; m++)
		{
			warehouse[startY][m] = 3;
		}
	}

	if (endY < startY)
	{
		for (p = startY - 1; p > endY; p--)
		{
			warehouse[p][endX] = 3;
		}
	}
	else
	{
		for (q = startY + 1; q < endY; q++)
		{
			warehouse[q][endX] = 3;
		}
	}
}",0
fcoo305,1696220228,2,"void PelletRoute(int warehouse[10][10])
{
	int i, j, k, m, p, q;
	int startX, startY, endX, endY = 0;
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1) {
				startX = j;
				startY = i;
			}
			if (warehouse[i][j] == 2) {
				endX = j;
				endY = i;
			}
		}
	}

	if (endY != startY && endX != startX)
	{
		warehouse[startY][endX] = 3;
	}

	if (endX < startX)
	{
		for (k = startX - 1; k > endX; k--)
		{
			warehouse[startY][k] = 3;
		}
	}
	else
	{
		for (m = startX + 1; m < endX; m++)
		{
			warehouse[startY][m] = 3;
		}
	}

	if (endY < startY)
	{
		for (p = startY - 1; p > endY; p--)
		{
			warehouse[p][endX] = 3;
		}
	}
	else
	{
		for (q = startY + 1; q < endY; q++)
		{
			warehouse[q][endX] = 3;
		}
	}
}",1
fobr691,1696233949,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destinationRow, destinationCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destinationRow) {
        if (pelletRow < destinationRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
fwij709,1695701992,1,"void PelletRoute(int warehouse[10][10]) 
{
    int i,j;
    int rowStart, colStart, rowDestination, colDestination;
    int horDifference, verDifference;
    for (i = 0; i<10; i++) {
        for (j = 0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i; 
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowDestination = i;
                colDestination = j;
            }
        }
    }
    horDifference = colDestination - colStart;
    verDifference = rowDestination - rowStart;
    i = rowStart;
    if (horDifference > 0) {
        for (j = colDestination; j > colStart; j--) {
            warehouse[i][j] = 3;
        }
    }
    else if (horDifference < 0) {
        for (j = colStart-1; j >= colDestination; j--) {
            warehouse[i][j] = 3;
        }
    } 
    j = colDestination;
    if (verDifference > 0) {
        for (i = rowDestination; i > rowStart; i--) {
            warehouse[i][j] = 3;
        }
    }
    else if (verDifference < 0) {
        for (i = rowStart-1; i >= rowDestination; i--) {
            warehouse[i][j] = 3;
        }
    }
    warehouse[rowDestination][colDestination] = 2;
}",1
gcha636,1696144355,1,"void FindTile(int board[10][10], int tile, int *rowPos, int *colPos) {

    int i;
    int w;

    for (i = 0; i < 10; i++) {
        for (w = 0; w < 10; w++) {
            if (board[i][w] == tile) {
                *rowPos = i;
                *colPos = w;

            }
        }
    }
}

void PelletRoute(int warehouse[10][10]){

    int rowPosp, colPosp, rowPosd, colPosd;
    int horizontal, vertical;
    int x = 0, i;

    FindTile(warehouse, 1, &rowPosp, &colPosp);
    FindTile(warehouse, 2, &rowPosd, &colPosd);

    vertical = rowPosd - rowPosp;
    horizontal = colPosd - colPosp;

    if(rowPosp == rowPosd || colPosp == colPosd){

        if (horizontal > 0){
            for (i=colPosp + 1; i < colPosd; i++){
                warehouse[rowPosp][i] = 3;
                x = x + 1;
            }

        } else if (horizontal < 0){
            for (i=colPosp - 1; i > colPosd; i--){
                warehouse[rowPosp][i] = 3;
                x = x - 1;
            }
        }


        if (vertical > 0){
            for (i=rowPosp + 1; i < rowPosd; i++){
                warehouse[i][colPosp + x] = 3;
            }
        } else if (vertical < 0){
            for (i=rowPosp - 1; i > rowPosd; i--){
                warehouse[i][colPosp + x] = 3;
            }
        }

    } else{

        if (horizontal > 0){
            for (i=colPosp; i < colPosd; i++){
                warehouse[rowPosp][i + 1] = 3;
                x = x + 1;
            }

        } else if (horizontal < 0){
            for (i=colPosp; i > colPosd; i--){
                warehouse[rowPosp][i - 1] = 3;
                x = x - 1;
            }
        }


        if (vertical > 0){
            for (i=rowPosp - 1; i < rowPosd; i++){
                warehouse[i][colPosp + x] = 3;
            }
        } else if (vertical < 0){
            for (i=rowPosp + 1; i > rowPosd; i--){
                warehouse[i][colPosp + x] = 3;
            }
        }
    }



}",0
gcha636,1696144615,2,"
void FindTile(int board[10][10], int tile, int *rowPos, int *colPos) {

    int i;
    int w;

    for (i = 0; i < 10; i++) {
        for (w = 0; w < 10; w++) {
            if (board[i][w] == tile) {
                *rowPos = i;
                *colPos = w;

            }
        }
    }
}

void PelletRoute(int warehouse[10][10]){

    int rowPosp, colPosp, rowPosd, colPosd;
    int horizontal, vertical;
    int x = 0, i;

    FindTile(warehouse, 1, &rowPosp, &colPosp);
    FindTile(warehouse, 2, &rowPosd, &colPosd);

    vertical = rowPosd - rowPosp;
    horizontal = colPosd - colPosp;

    if(rowPosp == rowPosd || colPosp == colPosd){

        if (horizontal > 0){
            for (i=colPosp + 1; i < colPosd; i++){
                warehouse[rowPosp][i] = 3;
                x = x + 1;
            }

        } else if (horizontal < 0){
            for (i=colPosp - 1; i > colPosd; i--){
                warehouse[rowPosp][i] = 3;
                x = x - 1;
            }
        }


        if (vertical > 0){
            for (i=rowPosp + 1; i < rowPosd; i++){
                warehouse[i][colPosp + x] = 3;
            }
        } else if (vertical < 0){
            for (i=rowPosp - 1; i > rowPosd; i--){
                warehouse[i][colPosp + x] = 3;
            }
        }

    } else{

        if (horizontal > 0){
            for (i=colPosp; i < colPosd; i++){
                warehouse[rowPosp][i + 1] = 3;
                x = x + 1;
            }

        } else if (horizontal < 0){
            for (i=colPosp; i > colPosd; i--){
                warehouse[rowPosp][i - 1] = 3;
                x = x - 1;
            }
        }


        if (vertical > 0){
            for (i=rowPosp; i < rowPosd; i++){
                warehouse[i][colPosp + x] = 3;
            }
        } else if (vertical < 0){
            for (i=rowPosp; i > rowPosd; i--){
                warehouse[i][colPosp + x] = 3;
            }
        }
    }



}
",1
ggao363,1695799195,1,"#include <stdio.h>
void FindCoords(int warehouse[10][10], int *DRow, int *DCol, int *PRow, int *PCol){
    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                *PRow = i;
                *PCol = j;
            } else if(warehouse[i][j] == 2) {
                *DRow = i;
                *DCol = j;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10]){
    int DRow, DCol, PRow, PCol;
    FindCoords(warehouse, &DRow, &DCol, &PRow, &PCol);
    // new thing Interserction is always [PRow, DCol
    if((DRow != PRow) || (DCol != PCol)){
        for(int i = (DRow < PRow ? DRow + 1 : PRow ); i < (DRow > PRow ? DRow : PRow + 1); i++){
            warehouse[i][DCol] = 3;
        }
        for(int j = (DCol < PCol ? DCol : PCol + 1); j < (DCol > PCol ? DCol + 1 : PCol); j++){
            warehouse[PRow][j] = 3;
        }

    }
}",0
ggao363,1695800547,2,"#include <stdio.h>
void FindCoords(int warehouse[10][10], int *DRow, int *DCol, int *PRow, int *PCol){
    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                *PRow = i;
                *PCol = j;
            } else if(warehouse[i][j] == 2) {
                *DRow = i;
                *DCol = j;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10]){
    int DRow, DCol, PRow, PCol;
    FindCoords(warehouse, &DRow, &DCol, &PRow, &PCol);
    // new thing Interserction is always [PRow, DCol
    if((DRow != PRow) || (DCol != PCol)){
        for(int i = (DRow <= PRow ? DRow  : PRow ); i < (DRow > PRow ? DRow : PRow + 1); i++){
            warehouse[i][DCol] = 3;
        }
        for(int j = (DCol < PCol ? DCol : PCol + 1); j < (DCol >= PCol ? DCol + 1 : PCol); j++){
            warehouse[PRow][j] = 3;
        }
        warehouse[PRow][PCol] = 1;
        warehouse[DRow][DCol] = 2;
    }
}",1
gge561,1695784698,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int rowsone, colsone;
    int rowstwo, colstwo;
    //find the value 1 and 2
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowsone = i;
                colsone = j;
            }
            else if (warehouse[i][j] == 2) {
                rowstwo = i;
                colstwo = j;
            }
        }
    }
    //replace pathway with 3
if (rowsone == rowstwo) {
    if (colstwo > colsone) {
        for (i = colstwo - 1; i > colsone; i--) {
            warehouse[rowsone][i] = 3;
        }
    }
    else if (colstwo < colsone) {
        for (i = colstwo + 1; i < colsone; i++) {
            warehouse[rowsone][i] = 3;
        }
    }
}
else if (colsone == colstwo) {
    if (rowstwo > rowsone) {
        for (i = rowsone + 1; i < rowstwo; i++) {
            warehouse[i][colstwo] = 3;
        }
    }
    //2 is above one
    else if (rowstwo < rowsone) {
        for (i = rowsone - 1; i > rowstwo; i--) {
            warehouse[i][colstwo] = 3;
        }

    }
}
else {
 //2 is right of 1
if (colstwo > colsone) {
        for (i = colstwo; i > colsone; i--) {
            warehouse[rowsone][i] = 3;
        }
}
        //2 is left of one
        else if (colstwo < colsone) {
            for (i = colstwo; i < colsone; i++) {
                warehouse[rowsone][i] = 3;
            }
        }
        //2 is below 1
        if (rowstwo > rowsone) {
            for (i = rowsone; i < rowstwo; i++) {
                warehouse[i][colstwo] = 3;
            }
        }
        //2 is above one
        else if (rowstwo < rowsone) {
            for (i = rowsone; i > rowstwo; i--) {
                warehouse[i][colstwo] = 3;
            }
        }
    }
}
",1
gmal045,1695712991,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int manx, many, cratex, cratey;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            //  man
            if (warehouse[i][j] == 1)
            {
                manx = j;
                many = i;
            }
            //  crate
            else if (warehouse[i][j] == 2)
            {
                cratex = j;
                cratey = i;
            }
        }
    }
    printf(""%d %d %d %d\n"",manx, many, cratex, cratey);
    if (manx < cratex) {
    for (int i = manx; i <= cratex; i++) {
        if (warehouse[many][i] == 0)
        {
            warehouse[many][i] = 3;
        }
    }
    }
    else if (manx > cratex) {
        for (int i = manx; i >= cratex; i--) {
        if (warehouse[many][i] == 0)
        {
            warehouse[many][i] = 3;
        }
    }
    }

    if (many < cratey) {
    for (int i = many; i < cratey; i++) {
        if (warehouse[i][cratex] == 0)
        {
            warehouse[i][cratex] = 3;
        }
    }
    }
    else if (many > cratey) {
        for (int i = many; i > cratey; i--) {
        if (warehouse[i][cratex] == 0)
        {
            warehouse[i][cratex] = 3;
        }
    }
    }
}",0
gmal045,1695713008,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int manx, many, cratex, cratey;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            //  man
            if (warehouse[i][j] == 1)
            {
                manx = j;
                many = i;
            }
            //  crate
            else if (warehouse[i][j] == 2)
            {
                cratex = j;
                cratey = i;
            }
        }
    }
    if (manx < cratex) {
    for (int i = manx; i <= cratex; i++) {
        if (warehouse[many][i] == 0)
        {
            warehouse[many][i] = 3;
        }
    }
    }
    else if (manx > cratex) {
        for (int i = manx; i >= cratex; i--) {
        if (warehouse[many][i] == 0)
        {
            warehouse[many][i] = 3;
        }
    }
    }

    if (many < cratey) {
    for (int i = many; i < cratey; i++) {
        if (warehouse[i][cratex] == 0)
        {
            warehouse[i][cratex] = 3;
        }
    }
    }
    else if (many > cratey) {
        for (int i = many; i > cratey; i--) {
        if (warehouse[i][cratex] == 0)
        {
            warehouse[i][cratex] = 3;
        }
    }
    }
}",1
gmoh887,1695717218,1,"void PelletRoute(int warehouse[10][10])
{
    int pelletRow = 0, pelletCol = 0, destRow = 0, destCol = 0;

    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    int col = pelletCol;
    int row = pelletRow;

    while (col != destCol) {
        warehouse[pelletRow][col] = 3;
        if (col < destCol) {
            col++;
        } else {
            col--;
        }
    }

    while (row != destRow) {
        warehouse[row][destCol] = 3;
        if (row < destRow) {
            row++;
        } else {
            row--;
        }
    }

    warehouse[pelletRow][pelletCol] = 1;
    warehouse[destRow][destCol] = 2;


}",1
gpen695,1695950547,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX, pelletY, destinationX, destinationY;

    // Find the positions of the pellet (1) and destination (2).
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletX = i;
                pelletY = j;
            } else if (warehouse[i][j] == 2) {
                destinationX = i;
                destinationY = j;
            }
        }
    }

    // Move horizontally to align with the destination.
    while (pelletY != destinationY) {
        if (pelletY < destinationY) {
            pelletY++;
        } else {
            pelletY--;
        }
        warehouse[pelletX][pelletY] = 3;
    }

    // Move vertically to reach the destination.
    while (pelletX != destinationX) {
        if (pelletX < destinationX) {
            pelletX++;
        } else {
            pelletX--;
        }
        warehouse[pelletX][pelletY] = 3;
    }
}

int main() {
    // Example warehouse layout (0 represents empty space).
    int warehouse[10][10] = {
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    };

    PelletRoute(warehouse);

    // Print the updated warehouse layout.
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0
gpen695,1695950637,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletX, pelletY, destX, destY;


    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1) 
            {
                pelletX = i;
                pelletY = j;
            } else if (warehouse[i][j] == 2) 
            {
                destX = i;
                destY = j;
            }
        }
    }


    while (pelletY != destY) 
    {
        if (pelletY < destY) 
        {
            pelletY++;
        } else {
            pelletY--;
        }
        warehouse[pelletX][pelletY] = 3;
    }

   
    while (pelletX != destX)
    {
        if (pelletX < destX) 
        {
            pelletX++;
        } else {
            pelletX--;
        }
        warehouse[pelletX][pelletY] = 3;
    }
}

",0
gpen695,1695950650,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletX, pelletY, destX, destY;


    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1) 
            {
                pelletX = i;
                pelletY = j;
            } else if (warehouse[i][j] == 2) 
            {
                destX = i;
                destY = j;
            }
        }
    }


    while (pelletY != destY) 
    {
        if (pelletY < destY) 
        {
            pelletY++;
        } else {
            pelletY--;
        }
        warehouse[pelletX][pelletY] = 3;
    }

   
    while (pelletX != destX)
    {
        if (pelletX < destX) 
        {
            pelletX++;
        } else {
            pelletX--;
        }
        warehouse[pelletX][pelletY] = 3;
    }
}
}
",0
gpen695,1695950655,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletX, pelletY, destX, destY;


    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1) 
            {
                pelletX = i;
                pelletY = j;
            } else if (warehouse[i][j] == 2) 
            {
                destX = i;
                destY = j;
            }
        }
    }


    while (pelletY != destY) 
    {
        if (pelletY < destY) 
        {
            pelletY++;
        } else {
            pelletY--;
        }
        warehouse[pelletX][pelletY] = 3;
    }

   
    while (pelletX != destX)
    {
        if (pelletX < destX) 
        {
            pelletX++;
        } else {
            pelletX--;
        }
        warehouse[pelletX][pelletY] = 3;
    }
}

",0
gvan573,1696234573,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	//co ordinates for the pellet
	int pelletx, pellety;

	//co ordinates for the destination
	int destinationx, destinationy;

	//find the co ordinates of the pellet and the destination, marked by a 1 and a 2
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletx = i;
				pellety = j;
			}
			if (warehouse[i][j] == 2) {
				destinationx = i; 
				destinationy = j;
			}
		}
	}

	//move the pellet horizontally first until it is in line with the destination
	while (pellety > destinationy) {
		pellety--;
		warehouse[pelletx][pellety] = 3;
	}
	while (pellety < destinationy) {
		pellety++;
		warehouse[pelletx][pellety] = 3;
	}

	//then move the pellet vertically until it is on top of the destination
	while (pelletx > destinationx) {
		pelletx--;
		warehouse[pelletx][pellety] = 3;
	}
	
	while (pelletx < destinationx) {
		pelletx++;
		warehouse[pelletx][pellety] = 3;
	}

	//ensure that the destination is still seen on top of the path after it has been drawn
	if ((pelletx == destinationx) && (pellety == destinationy)) {
		warehouse[pelletx][pellety] = 2;
	}
}
",1
gxu660,1695725710,1,"void PelletRoute(int warehouse[10][10]) {
    int row_1, col_1, row_2, col_2, i, j;
    int row_diff, col_diff;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row_1 = i;
                col_1 = j;
            
            } else if (warehouse[i][j] == 2) {
                row_2 = i;
                col_2 = j;
            }
        }
    }

    row_diff = row_2 - row_1;
    col_diff = col_2 - col_1;

    int n, m;

    if (col_diff >= 0) {
        for (n = 0; n <= col_diff; n++) {
            warehouse[row_1][col_1 + n] = 3;
        }
    } else {
        for (n = 0; n <= (col_diff * -1); n++) {
            warehouse[row_1][col_2 + n] = 3;
        }
    }

    if (row_diff >= 0) {
        for (m = 0; m < row_diff; m++) {
            warehouse[row_1 + m][col_2] = 3;
        }
    } else {
        for (m = 0; m < (row_diff * -1); m++) {
            warehouse[row_2 + m][col_2] = 3;
        }
    }
    warehouse[row_1][col_1] = 1;
    warehouse[row_2][col_2] = 2;


}",1
hbas168,1696058530,1,"int PelletRoute(int array[10][10]) {

	int boxRowIndex = -1;
	int boxColIndex = -1;

	int desRowIndex = -1;
	int desColIndex = -1;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (array[i][j] == 1) {
				boxRowIndex = i;
				boxColIndex = j;
			}
			else if (array[i][j] == 2) {
				desRowIndex = i;
				desColIndex = j;
			}
		}
	}

	int hor_dis = desColIndex - boxColIndex;
	int ver_dis = desRowIndex - boxRowIndex;
	
	if (hor_dis < 0) {
		for (int i = desColIndex + 1; i <= boxColIndex; i++) {
			array[boxRowIndex][i] = 3;
		}
	}
	else {
		for (int i = boxColIndex + 1; i <= desColIndex; i++) {
			array[boxRowIndex][i] = 3;
		}
	}
	if (ver_dis < 0) {
		for (int i = desRowIndex + 1; i < boxRowIndex; i++) {
			array[i][desColIndex] = 3;
		}
	}
	else {
		for (int i = boxRowIndex + 1; i < desRowIndex; i++) {
			array[i][desColIndex] = 3;
		}
	}

}",0
hbas168,1696058563,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int PelletRoute(int array[10][10]) {

	int boxRowIndex = -1;
	int boxColIndex = -1;

	int desRowIndex = -1;
	int desColIndex = -1;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (array[i][j] == 1) {
				boxRowIndex = i;
				boxColIndex = j;
			}
			else if (array[i][j] == 2) {
				desRowIndex = i;
				desColIndex = j;
			}
		}
	}

	int hor_dis = desColIndex - boxColIndex;
	int ver_dis = desRowIndex - boxRowIndex;
	
	if (hor_dis < 0) {
		for (int i = desColIndex + 1; i <= boxColIndex; i++) {
			array[boxRowIndex][i] = 3;
		}
	}
	else {
		for (int i = boxColIndex + 1; i <= desColIndex; i++) {
			array[boxRowIndex][i] = 3;
		}
	}
	if (ver_dis < 0) {
		for (int i = desRowIndex + 1; i < boxRowIndex; i++) {
			array[i][desColIndex] = 3;
		}
	}
	else {
		for (int i = boxRowIndex + 1; i < desRowIndex; i++) {
			array[i][desColIndex] = 3;
		}
	}

	return 0;
}",0
hbas168,1696058703,3,"int PelletRoute(int array[10][10]) {

	int boxRowIndex = -1;
	int boxColIndex = -1;

	int desRowIndex = -1;
	int desColIndex = -1;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (array[i][j] == 1) {
				boxRowIndex = i;
				boxColIndex = j;
			}
			else if (array[i][j] == 2) {
				desRowIndex = i;
				desColIndex = j;
			}
		}
	}

	int hor_dis = desColIndex - boxColIndex;
	int ver_dis = desRowIndex - boxRowIndex;
	
	if (hor_dis < 0) {
		for (int i = desColIndex; i < boxColIndex; i++) {
			array[boxRowIndex][i] = 3;
		}
	}
	else {
		for (int i = boxColIndex + 1; i <= desColIndex; i++) {
			array[boxRowIndex][i] = 3;
		}
	}
	if (ver_dis < 0) {
		for (int i = desRowIndex + 1; i < boxRowIndex; i++) {
			array[i][desColIndex] = 3;
		}
	}
	else {
		for (int i = boxRowIndex + 1; i < desRowIndex; i++) {
			array[i][desColIndex] = 3;
		}
	}

	return 0;
}",0
hbas168,1696059040,4,"int PelletRoute(int array[10][10]) {

	int boxRowIndex = -1;
	int boxColIndex = -1;

	int desRowIndex = -1;
	int desColIndex = -1;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (array[i][j] == 1) {
				boxRowIndex = i;
				boxColIndex = j;
			}
			else if (array[i][j] == 2) {
				desRowIndex = i;
				desColIndex = j;
			}
		}
	}

	int hor_dis = desColIndex - boxColIndex;
	int ver_dis = desRowIndex - boxRowIndex;
	
	if (hor_dis < 0) {
		for (int i = desColIndex + 1; i < boxColIndex; i++) {
			array[boxRowIndex][i] = 3;
		}
	}
	else {
		for (int i = boxColIndex + 1; i < desColIndex; i++) {
			array[boxRowIndex][i] = 3;
		}
	}
	if (ver_dis < 0) {
		for (int i = desRowIndex + 1; i <= boxRowIndex; i++) {
			array[i][desColIndex] = 3;
		}
	}
	else {
		for (int i = boxRowIndex; i < desRowIndex; i++) {
			array[i][desColIndex] = 3;
		}
	}

	return 0;
}",0
hbas168,1696061131,5,"int PelletRoute(int array[10][10]) {

	int boxRowIndex = -1;
	int boxColIndex = -1;

	int desRowIndex = -1;
	int desColIndex = -1;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (array[i][j] == 1) {
				boxRowIndex = i;
				boxColIndex = j;
			}
			else if (array[i][j] == 2) {
				desRowIndex = i;
				desColIndex = j;
			}
		}
	}

	int horz_distance = desColIndex - boxColIndex;
	int vert_distance = desRowIndex - boxRowIndex;

	if (horz_distance != 0) {
		int neg = horz_distance / abs(horz_distance);
		for (int i = 1; i < abs(horz_distance); i++) {
			array[boxRowIndex][boxColIndex + i / neg] = 3;
		}
		if (vert_distance != 0) {
			array[boxRowIndex][boxColIndex + horz_distance] = 3;
		}
	}
	
	if (vert_distance != 0) {
		int neg = vert_distance / abs(vert_distance);
		for (int i = 1; i < abs(vert_distance); i++) {
			array[boxRowIndex + i/neg][desColIndex] = 3;
		}
	}

	return 0;
}",1
hber510,1695955918,1,"void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd, i, j;
    
    for(int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1){
                rowStart = i;
                colStart = j;
            } else if (warehouse[i][j] == 2){
                rowEnd = i;
                colEnd = j;
            }
        }
        
    }
    
    for(int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++) {
            if (i == rowStart){
                if (colStart < colEnd) {
                    if (j > colStart && j <= colEnd) {
                        warehouse[i][j] = 3;
                    }
                } else if (colStart > colEnd) {
                    if (j >= colEnd && j < colStart) {
                        warehouse[i][j] = 3;
                    }
                }
            } 
            
            if (j == colEnd){
                if (rowStart < rowEnd) {
                    if (i > rowStart && i < rowEnd) {
                        warehouse[i][j] = 3;
                    }
                } else if (rowStart > rowEnd) {
                    if (i > rowEnd && i < rowStart) {
                        warehouse[i][j] = 3;
                    }
                }
            } 
        }
        
    }
    
}",0
hber510,1695956013,2,"void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;
    
    for(int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1){
                rowStart = i;
                colStart = j;
            } else if (warehouse[i][j] == 2){
                rowEnd = i;
                colEnd = j;
            }
        }
        
    }
    
    for(int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++) {
            if (i == rowStart){
                if (colStart < colEnd) {
                    if (j > colStart && j <= colEnd) {
                        warehouse[i][j] = 3;
                    }
                } else if (colStart > colEnd) {
                    if (j >= colEnd && j < colStart) {
                        warehouse[i][j] = 3;
                    }
                }
            } 
            
            if (j == colEnd){
                if (rowStart < rowEnd) {
                    if (i > rowStart && i < rowEnd) {
                        warehouse[i][j] = 3;
                    }
                } else if (rowStart > rowEnd) {
                    if (i > rowEnd && i < rowStart) {
                        warehouse[i][j] = 3;
                    }
                }
            } 
        }
        
    }
    
}",0
hber510,1695957032,3,"void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;
    
    for(int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1){
                rowStart = i;
                colStart = j;
            } else if (warehouse[i][j] == 2){
                rowEnd = i;
                colEnd = j;
            }
        }
        
    }
    
    for(int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++) {
            if (i == rowStart){
                if (colStart < colEnd) {
                    if (rowStart != rowEnd) {
                        if (j > colStart && j <= colEnd) {
                        warehouse[i][j] = 3;
                        }
                    } else {
                        if (j > colStart && j < colEnd) {
                        warehouse[i][j] = 3;
                        }
                    }
                } else if (colStart > colEnd) {
                    if (rowStart != rowEnd) {
                        if (j >= colEnd && j < colStart) {
                        warehouse[i][j] = 3;
                        }
                    } else {
                        if (j > colEnd && j < colStart) {
                        warehouse[i][j] = 3;
                        }
                    }
                }
            } 
            
            if (j == colEnd){
                if (rowStart < rowEnd) {
                    if (i > rowStart && i < rowEnd) {
                        warehouse[i][j] = 3;
                    }
                } else if (rowStart > rowEnd) {
                    if (i > rowEnd && i < rowStart) {
                        warehouse[i][j] = 3;
                    }
                }
            } 
        }
    }
}",1
hbou314,1695877071,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int row1, col1;
	int row2, col2;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}
		}
	}
	if ((col1 < col2) && (row1 < row2)) {
		for (i = col1 + 1; i < col2; i++) {
			warehouse[row1][i] = 3;
		}
		for (j = row1; j < row2; j++) {
			warehouse[j][col2] = 3;
		}
	} else if ((col1 < col2) && (row1 > row2)) {
		for (i = col1 + 1; i <= col2; i++) {
			warehouse[row1][i] = 3;
		}
		for (j = row2 + 1; j < row1; j++) {
			warehouse[j][col2] = 3;
		}
	} else if ((col1 > col2) && (row1 < row2)) {
		for (i = col2; i < col1; i++) {
			warehouse[row1][i] = 3;
		}
		for (j = row1; j < row2; j++) {
			warehouse[j][col2] = 3;
		}
	} else if ((col1 > col2) && (row1 > row2)) {
		for (i = col2; i < col1; i++) {
			warehouse[row1][i] = 3;
		}
		for (j = row2 + 1; j < row1; j++) {
			warehouse[j][col2] = 3;
		}
	}
}",0
hbou314,1695890227,2,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int row1, col1;
	int row2, col2;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}
		}
	}
	if ((col1 <= col2) && (row1 < row2)) {
		for (i = col1 + 1; i <= col2; i++) {
			warehouse[row1][i] = 3;
		}
		for (j = row1 + 1; j < row2; j++) {
			warehouse[j][col2] = 3;
		}
	} else if ((col1 <= col2) && (row1 > row2)) {
		for (i = col1 + 1; i <= col2; i++) {
			warehouse[row1][i] = 3;
		}
		for (j = row2 + 1; j < row1; j++) {
			warehouse[j][col2] = 3;
		}
	} else if ((col1 >= col2) && (row1 <= row2)) {
		for (i = col2 + 1; i < col1; i++) {
			warehouse[row1][i] = 3;
		}
		for (j = row1; j < row2; j++) {
			warehouse[j][col2] = 3;
		}
	} else if ((col1 >= col2) && (row1 >= row2)) {
		for (i = col2; i < col1; i++) {
			warehouse[row1][i] = 3;
		}
		for (j = row2 + 1; j < row1; j++) {
			warehouse[j][col2] = 3;
		}
	} else if ((col1 <= col2) && (row1 == row2)) {
		for (i = col1 + 1; i < col2; i++) {
			warehouse[row1][i] = 3;
		}
	}
}",1
hcop563,1695787417,1,"void PelletRoute(int warehouse[10][10]) {
    
    /* Finds the pellet and the end position for the pellet
    on the warehouse floor */
    int pelletRow, pelletCol, endRow, endCol, i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if(warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    /* Moves the pellet horizontally until
    its in the same column as the end position */
    while (pelletCol != endCol) {
        if (pelletCol < endCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    /* Moves the pellet vertically until
    its in the same row as the end position */
    while (pelletRow != endRow) {
        if (pelletRow < endRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
     /* Changes the end position back from a 3 to 
     a 2 again */ 
    warehouse[endRow][endCol] = 2;
}",1
hcro730,1695791909,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, workerRow, workerCol, boxRow, boxCol, horzDis, vertDis, horzDir, vertDir;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				workerRow = i;
				workerCol = j;
			}
			else if (warehouse[i][j] == 2) {
				boxRow = i;
				boxCol = j;
			}
		}
	}

	horzDis = boxCol - workerCol;
	vertDis = boxRow - workerRow;

	if (horzDis < 0) {
		horzDir = -1;
	}
	else {
		horzDir = 1;
	}

	if (vertDis < 0) {
		vertDir = -1;
	}
	else {
		vertDir = 1;
	}


	if (workerRow != boxRow) {
		for (i = workerCol; i != boxCol; i = i + horzDir) {
			warehouse[workerRow][i + horzDir] = 3;
		}
	}
	else {
		for (i = workerCol + horzDir; i != boxCol; i = i + horzDir) {
			warehouse[workerRow][i] = 3;
		}
	}

	if (workerCol != boxCol) {
		for (i = workerRow; i != boxRow; i = i + vertDir) {
			warehouse[i][boxCol] = 3;
		}
	}
	else {
		for (i = workerRow + vertDir; i != boxRow; i = i + vertDir) {
			warehouse[i][boxCol] = 3;
		}
	}

}",1
hgao080,1695622577,1,"void PelletRoute(int warehouse[10][10]) {
	int oneRow, oneCol, twoRow, twoCol;

	for (int row = 0; row < 10; row++) {
		for (int col = 0; col < 10; col++) {
			if (warehouse[row][col] == 1) {
				oneRow = row;
				oneCol = col;
			}

			if (warehouse[row][col] == 2) {
				twoRow = row;
				twoCol = col;
			}
		}
	}

	if (oneCol < twoCol) {
		for (int col = oneCol + 1; col <= twoCol; col++) {
			warehouse[oneRow][col] = 3;
		}
	}
	else if (oneCol > twoCol) {
		for (int col = oneCol - 1; col >= twoCol + 1; col--) {
			warehouse[oneRow][col] = 3;
		}
	}

	if (oneRow < twoRow) {
		for (int row = oneRow + 1; row <= twoRow - 1; row++) {
			warehouse[row][twoCol] = 3;
		}
	} else if (oneRow > twoRow) {
		for (int row = oneRow - 1; row >= twoRow + 1; row--) {
			warehouse[row][twoCol] = 3;
		}
	}

}",0
hgao080,1695623128,2,"void PelletRoute(int warehouse[10][10]) {
	int oneRow, oneCol, twoRow, twoCol;

	for (int row = 0; row < 10; row++) {
		for (int col = 0; col < 10; col++) {
			if (warehouse[row][col] == 1) {
				oneRow = row;
				oneCol = col;
			}

			if (warehouse[row][col] == 2) {
				twoRow = row;
				twoCol = col;
			}
		}
	}

	if (oneCol < twoCol) {
		for (int col = oneCol + 1; col <= twoCol; col++) {
			if (warehouse[oneRow][col] != 2) {
				warehouse[oneRow][col] = 3;
			}
		}
	}
	else if (oneCol > twoCol) {
		for (int col = oneCol - 1; col >= twoCol; col--) {
			if (warehouse[oneRow][col] != 2) {
				warehouse[oneRow][col] = 3;
			}
		}
	}

	if (oneRow < twoRow) {
		for (int row = oneRow + 1; row <= twoRow - 1; row++) {
			warehouse[row][twoCol] = 3;
		}
	} else if (oneRow > twoRow) {
		for (int row = oneRow - 1; row >= twoRow + 1; row--) {
			warehouse[row][twoCol] = 3;
		}
	}

}",1
hgou636,1695954702,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int startRow, startCol, endRow, endCol, i, j;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) { 
                startRow = i;
                startCol = j;
            }
        }
    }
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) { 
                endRow = i;
                endCol = j;
            }
        }
    }
    
    int originalRow, originalCol, newRow, newCol;
    originalRow = startRow;
    originalCol = startCol;
    newRow = endRow;
    newCol = endCol;
    
    while (startCol != endCol) {
        if (startCol > endCol) {
            startCol = startCol - 1;
        } 
        else {
            startCol = startCol + 1;
        }
        warehouse[startRow][startCol] = 3;
    }
    
    while (startRow != endRow) {
        if (startRow > endRow) {
            startRow = startRow - 1;
        } 
        else {
            startRow = startRow + 1;
        }
        warehouse[startRow][startCol] = 3;
    }
    warehouse[originalRow][originalCol] = 1;
    warehouse[newRow][newCol] = 2;
}",1
hkah523,1696141700,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
/*author:Harshdeep Kahlon*/

void PelletRoute(int warehouse[10][10]) {
    int pelletRow = -1, pelletCol = -1;
    int destRow = -1, destCol = -1;

    // Find the positions of the pellet (1) and destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;

            }
        }
    }

    // Calculate the route horizontally first
    if (pelletCol < destCol) {
        for (int j = pelletCol; j <= destCol; j++) {
            warehouse[pelletRow][j] = 3;

        }

    } else if (pelletCol > destCol) {
        for (int j = pelletCol; j >= destCol; j--) {
            warehouse[pelletRow][j] = 3;
        }

    }

    // Calculate the route vertically
    if (pelletRow < destRow) {
        for (int i = pelletRow; i <= destRow; i++) {
            warehouse[i][destCol] = 3;

        }

    } else if (pelletRow > destRow) {
        for (int i = pelletRow; i >= destRow; i--) {
            warehouse[i][destCol] = 3;

        }
    }
}",0
hlee999,1696218976,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, rowPos1, colPos1, rowPos2, colPos2;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowPos1 = i;
				colPos1 = j;
			} if (warehouse[i][j] == 2) {
				rowPos2 = i;
				colPos2 = j;
			}
		}
	}
	int k;
	int l;
	for (k = colPos1 + 1; k <= colPos2; k++) {
		warehouse[rowPos1][k] = 3;
	}
	for (l = rowPos1 + 1; l < rowPos2; l++) {
		warehouse[l][colPos2] = 3;
	}
}",0
hliu836,1695970031,1,"void PelletRoute(int warehouse[10][10])
{
    int row1,col1, row2,col2, i, j,ii,jj;
    for (i=0; i<10;i++) {
        for (j=0;j<10;j++) {
            if (warehouse[i][j]==1){
                row1=i;
                col1=j;
                
            } 
            if (warehouse[i][j]==2){
                row2=i;
                col2=j;
            }
        }
    }
    for (ii=col1+1;ii<=col2;ii++) {
        if (warehouse[row1][ii]==2) {
            
        } else {
            warehouse[row1][ii]=3;
        }
    }
    for (jj=row1+1; jj<=row2;jj++) {
        if (warehouse[jj][col2]==2) {
        } else {
            warehouse[jj][col2]=3;
        }
    }
    
}",0
hliu836,1695986497,2,"void PelletRoute(int warehouse[10][10])
{
    int row1,row2,col1,col2;
    int i,j,n,m;
    
    for (i=0; i<10;i++) {
        for (j=0;j<10;j++) {
            if (warehouse[i][j]==1){
                row1=i;
                col1=j;
                
            } 
            if (warehouse[i][j]==2){
                row2=i;
                col2=j;
            }
        }
    }
    
    if (col2 < col1) {
        for (n=col1-1;n>=col2;n--){
            if (warehouse[row1][n]==2) {
                
            } else {
                warehouse[row1][n]=3;
            }
        }
    } else {
        for (n=col1+1;n<=col2;n++) {
            if (warehouse[row1][n]==2) {
            
                
            } else {
                warehouse[row1][n]=3;
            }
        }
    }
    
    if (row2 < row1) {
        for (m=row1-1;m>=row2;m--) {
            if (warehouse[m][col2]==2) {
                
            } else {
                warehouse[m][col2]=3;
            }
        } 
    } else {
        for (m=row1+1;m<=row2;m++){
            if (warehouse[m][col2]==2) {
                
            } else {
                warehouse[m][col2]=3;
            }
        }
    }
}



",1
hma481,1696168432,1,"void PelletRoute(int warehouse[10][10]) {
	int row1, col1, row2, col2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i, col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i, col2 = j;
			}
		}
	}
	if (col2 > col1) {
		for (int i = (col1 + 1); i <= col2; i++) {
			warehouse[row1][i] = 3;
		}
	}
	else if (col2 < col1) {
		for (int i = (col1 - 1); i >= col2; i--) {
			warehouse[row1][i] = 3;
		}
	}
	if (row2 > row1) {
		for (int i = row1; i < row2; i++) {
			warehouse[i][col2] = 3;
		}
	}
	if (row2 < row1) {
		for (int i = row1; i > row2; i--) {
			warehouse[i][col2] = 3;
		}
	}
}",0
hma481,1696169174,2,"void PelletRoute(int warehouse[10][10]) {
	int row1, col1, row2, col2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i, col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i, col2 = j;
			}
		}
	}
	if ((col2 > col1) && (row2-row1) != 0) {
		for (int i = (col1 + 1); i <= col2; i++) {
			warehouse[row1][i] = 3;
		}
	}
	else if ((col2 > col1) && (row2-row1) == 0) {
		for (int i = (col1 + 1); i < col2; i++) {
			warehouse[row1][i] = 3;
		}
	}
	if ((col2 < col1) && (row2-row1) != 0) {
		for (int i = (col1 - 1); i >= col2; i--) {
			warehouse[row1][i] = 3;
		}
	}
	else if ((col2 < col1) && (row2-row1) == 0) {
		for (int i = (col1 - 1); i > col2; i--) {
			warehouse[row1][i] = 3;
		}
	}
	if ((row2 > row1) && (col2-col1) != 0) {
		for (int i = row1; i < row2; i++) {
			warehouse[i][col2] = 3;
		}
	}
	else if ((row2 > row1) && (col2-col1) == 0) {
		for (int i = (row1 + 1); i < row2; i++) {
			warehouse[i][col2] = 3;
		}
	}
	if ((row2 < row1) && (col2-col1) != 0) {
		for (int i = row1; i > row2; i--) {
			warehouse[i][col2] = 3;
		}
	}
	else if ((row2 < row1) && (col2-col1) == 0) {
		for (int i = (row1-1); i > row2; i--) {
			warehouse[i][col2] = 3;
		}
	}
}",1
hnew638,1695637683,1,"void PelletRoute(int warehouse[10][10])
{
    //Initialising variables
    int i, j, row1, col1, row2, col2;


    //finding the position of the start
    for ( i = 0; i < 10; i++)
    {
        for ( j = 0; j < 10; j++)
        {
            if(warehouse[i][j]==1)
            {
                row1 = i;
                col1 = j;
            }
        }
        
    }

    //finding the position of the end
    for ( i = 0; i < 10; i++)
    {
        for ( j = 0; j < 10; j++)
        {
            if(warehouse[i][j] == 2)
            {
                row2 = i;
                col2 = j;
            }
        }
        
    }


    //writing threes horizontally between the start in the end
    if (row1 < row2)
    {
        for ( i = row1+1 ; i < row2; i++)
        {
            warehouse[i][col2] = 3;
        }
        
    }
    if (row1 > row2)
    {
        for ( i = row1-1 ; i > row2; i--)
        {
            warehouse[i][col2] = 3;
        }
        
    }


    //writing threes vertically between the start and end
    if (col1 < col2)
    {
        for ( j = col1 + 1; j <= col2; j++)
        {
            warehouse[row1][j] = 3;
        }
        
    }
     if (col1 > col2)
    {
        for ( j = col1 - 1; j >= col2; j--)
        {
            warehouse[row1][j] = 3;
        }
        
    }



}",0
hnew638,1695638315,2,"void PelletRoute(int warehouse[10][10])
{
    //Initialising variables
    int i, j, row1, col1, row2, col2;


    //finding the position of the start
    for ( i = 0; i < 10; i++)
    {
        for ( j = 0; j < 10; j++)
        {
            if(warehouse[i][j]==1)
            {
                row1 = i;
                col1 = j;
            }
        }
        
    }

    //finding the position of the end
    for ( i = 0; i < 10; i++)
    {
        for ( j = 0; j < 10; j++)
        {
            if(warehouse[i][j] == 2)
            {
                row2 = i;
                col2 = j;
            }
        }
        
    }


    //writing threes horizontally between the start in the end
    if (row1 < row2)
    {
        for ( i = row1+1 ; i < row2; i++)
        {
            warehouse[i][col2] = 3;
        }
        
    }
    if (row1 > row2)
    {
        for ( i = row1-1 ; i > row2; i--)
        {
            warehouse[i][col2] = 3;
        }
        
    }


    //writing threes vertically between the start and end
    if (col1 < col2)
    {
        for ( j = col1 + 1; j < col2; j++)
        {
            warehouse[row1][j] = 3;
        }
        
    }
     if (col1 > col2)
    {
        for ( j = col1 - 1; j > col2; j--)
        {
            warehouse[row1][j] = 3;
        }
        
    }
    

    //filling in corner of path
    if (!(row1 == row2) && !(col1 == col2))
    warehouse[row1][col2] = 3;



}",1
hpat916,1695767573,1,"void PelletRoute(int warehouse[10][10]) {
    // Declaring integer variables which are to be used for the code.
    int startRow, startCol, endRow, endCol;

    /* Nested for loop to locate the position of the startRow& startCol of the pellet and to find the endRow& endCol 
    of the pellet to determine start and end positions in the 2D array */
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            // The number 1 in the array represents the starting position so this is searched for and saved in variables.
            if (warehouse[i][j] == 1) {
                startRow = i;
                startCol = j;
            }
            // The number 2 in the array represents the ending position so this is searched for and saved in variables.
            else if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    // The pellet is to be moved horizontally first so a while loop runs til the col number is iterated till it matches the column of the ending position.
    while (startCol != endCol) {
        // Conditional moves the start col either forwards or backwards based on relative position to ending column.
        if (startCol < endCol) {
            startCol = startCol + 1;
        }
        else {
            startCol = startCol - 1;
        }
        // All array values which are entered to match the columns is turned into 3 to represent the path which should be taken.
        warehouse[startRow][startCol] = 3;
    }

    // The pellet is then moved vertically so a while loop runs til the starting row is not iterated till the row is one before the end row.
    while (startRow != endRow) {

        // Conditional moves the start row either forwards or backwards based on relative position to ending row.
        if (startRow < endRow) {
            startRow = startRow + 1;
        }
        else {
            startRow = startRow - 1;
        }
        warehouse[startRow][startCol] = 3;
    }

    // Changing the ending position back to 2 in the array.
    warehouse[endRow][endCol] = 2;

}",1
hpir641,1695954973,1,"
void PelletRoute(int warehouse[10][10]) {
    int rowPos1 = -1, colPos1 = -1;
    int rowPos2 = -1, colPos2 = -1;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowPos1 = i;
                colPos1 = j;
            }
            if (warehouse[i][j] == 2) {
                rowPos2 = i;
                colPos2 = j;
            }
        }

    }
    for (int i = rowPos1; i <= rowPos2; i++) {
        warehouse[i][colPos2] = 3;
    }
    for (int i = rowPos2; i <= rowPos1; i++) {
        warehouse[i][colPos2] = 3;
    }
    for (int i = colPos1; i <= colPos2; i++) {
        warehouse[rowPos1][i] = 3;
    }
    for (int i = colPos2; i <= colPos1; i++) {
        warehouse[rowPos1][i] = 3;
    }
    warehouse[rowPos1][colPos1] = 1;
    warehouse[rowPos2][colPos2] = 2;
}

",1
hrob997,1696193763,1,"void PelletRoute(int warehouse[10][10])
{
    //for loop to find locations of 1 and 2. 
    int i, j;
    int row1, col1, row2, col2;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }

    
    int stopcol = col2; 

    //check for edge cases
    if ((row2 == row1) && (col2 == col1 + 1)) {
        stopcol = col2-1;
    }
    else if (row2 == row1 && col2 < col1) {
        stopcol = col2 + 1;
    }
    else if (row2 == row1 && col2 > col1) {
        stopcol = col2 - 1; 
    }
    
    //horizontal path 
    if (col2 > col1) {
        for (i = col1 + 1; i <= stopcol; i++) {
            warehouse[row1][i] = 3;
        }
    }
    else if (col2 < col1) {
        for (i = col1-1; i >= stopcol; i--) {
            warehouse[row1][i] = 3; 
        }
    }

    //vertical path
    if (row2 > row1) {
        for (i = row1 + 1; i < row2; i++) {
            warehouse[i][col2] = 3;
        }
    }
    else if(row2 < row1) {
        for (i = row1-1; i > row2; i--) {
            warehouse[i][col2] = 3;
        }
    }
}",1
htew916,1695806645,1,"#define _CRT_NO_WARNINGS
#include <stdio.h>

// This function takes just one input, a 2D array of integers (10 rows and 10 columns) which represents the layout of the warehouse floor.

void PelletRoute(int warehouse[10][10]) 
{
   int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        }
        else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
htew916,1695806717,2,"#define _CRT_NO_WARNINGS
#include <stdio.h>

// This function takes just one input, a 2D array of integers (10 rows and 10 columns) which represents the layout of the warehouse floor.

void PelletRoute(int warehouse[10][10]) 
{
   int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
  
  while (pelletRow != destRow) {
      if (pelletRow < destRow) {
          pelletRow++;
      }
      else {
          pelletRow--;
      }
      warehouse[pelletRow][pelletCol] = 3;
  }
    
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        }
        else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
htew916,1695806840,3,"#define _CRT_NO_WARNINGS
#include <stdio.h>

// This function takes just one input, a 2D array of integers (10 rows and 10 columns) which represents the layout of the warehouse floor.

void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        }
        else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        }
        else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
htew916,1695807013,4,"#define _CRT_NO_WARNINGS
#include <stdio.h>

// This function takes just one input, a 2D array of integers (10 rows and 10 columns) which represents the layout of the warehouse floor.

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the positions of the pellet (1) and destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally (left or right) if needed
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically (up or down) if needed
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
htew916,1695807118,5,"#define _CRT_NO_WARNINGS
#include <stdio.h>

// This function takes just one input, a 2D array of integers (10 rows and 10 columns) which represents the layout of the warehouse floor.

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
htho943,1695719909,1,"#include <stdio.h>
// the intent of this function is to take an array with 2 inputs then find the most efficient path between
// the two points
// AUthor hamish thompson


void PelletRoute(int warehouse[10][10])
// the intent of this function is to take an array with 2 inputs then find the most efficient path between
// the two points
// AUthor hamish thompson
// it gives me funky errors when i try and define an array within the input so im just assuming that the dimensions are 10x10 otherwise i would assign to a variable nae

{
    // initialise the 4 variables that are being used
    int initrow;
    int initcol;
    int finrow; 
    int fincol;

     // set the initial points for the origin and the destination
    for (int i = 0; i <10 ; i++) {
        for (int j = 0; j <10; j++) {
            
            if (warehouse[i][j] == 1) {
                initrow = i;
                initcol = j;
                
            } else if (warehouse[i][j] == 2) {
                finrow = i;
                fincol = j;
            }
        }
    }


    // describing how to find out whether to go right or left or whether we have found correct column
    while (initcol != fincol) {
        if (initcol > fincol) {
            initcol--;
            
        } else {
            initcol++;
        }
        // if it is the most efficient path represent it as a 3
        warehouse[initrow][initcol] = 3;
        
        warehouse[finrow][fincol]=2;
    }

    // describing whether to go up or down or stay in the same row
    while (initrow != finrow) {
        
        if (initrow > finrow) {
            initrow--;
        } else {
            initrow++;
        }
        
        warehouse[initrow][initcol] = 3;
        
        // ensuring 2 does not get overwritten by 3
        warehouse[finrow][fincol]=2;
    }
}",1
hwen116,1695702825,1,"#include <math.h>
#include <stdlib.h>

void PelletRoute(int warehouse[10][10])
{
    //Locate the 1
    int i, j;
    int row1, col1; //The position of the 1
    for (i=0; i<10; i++){
        for (j=0; j<10; j++){
            if (warehouse[i][j]==1){
                row1 = i;
                col1 = j;
                break; //The values have been found 
            }
        }
    }

    //Locate the 2
    int row2, col2;
    for (i=0; i<10; i++){
        for (j=0; j<10; j++){
            if (warehouse[i][j]==2){
                row2 = i;
                col2 = j;
                break; //The values have been found
            }
        }
    }

    //Move horizontally first until the 1 lines up with the column where 
    //Iterate such that for all the movements from col2-col1 the value becomes a 3
    int coldiff = col2-col1;

    if (coldiff<0){//Then you have to move left
        for (j=col1-1; j>col1-abs(coldiff); j--){
            warehouse[row1][j] = 3;
        }
    }else{
        for (j=col1; j<=col2-1; j++){
            warehouse[row1][j] = 3;
        }
    }

    //Move vertically
    int rowdiff = row2-row1;

    if (rowdiff<0){//Then you have to move up
        for (i=row1; i>row1-abs(rowdiff); i--){
            warehouse[i][col2] = 3;
        }
    }else{
            for (i=row1; i<=row2-1; i++){
            warehouse[i][col2] = 3;
        }
    }

}",0
hwen116,1695703833,2,"#include <math.h>
#include <stdlib.h>

void PelletRoute(int warehouse[10][10])
{
    //Locate the 1
    int i, j;
    int row1, col1; //The position of the 1
    for (i=0; i<10; i++){
        for (j=0; j<10; j++){
            if (warehouse[i][j]==1){
                row1 = i;
                col1 = j;
                break; //The values have been found 
            }
        }
    }

    //Locate the 2
    int row2, col2;
    for (i=0; i<10; i++){
        for (j=0; j<10; j++){
            if (warehouse[i][j]==2){
                row2 = i;
                col2 = j;
                break; //The values have been found
            }
        }
    }

    //Move horizontally first until the 1 lines up with the column where 
    //Iterate such that for all the movements from col2-col1 the value becomes a 3
    int coldiff = col2-col1;
    //Horizontal movement takes the corner
    if (coldiff<0){//Then you have to move left
        for (j=col1; j>=col1-abs(coldiff); j--){
            warehouse[row1][j] = 3;
        }
    }else{
        for (j=col1; j<=col2-1; j++){
            warehouse[row1][j] = 3;
        }
    }

    //Move vertically
    int rowdiff = row2-row1;

    if (rowdiff<0){//Then you have to move up
        for (i=row1; i>=row1-abs(rowdiff); i--){
            warehouse[i][col2] = 3;
        }
    }else{
            for (i=row1; i<=row2-1; i++){
            warehouse[i][col2] = 3;
        }
        
    }

    //Set the original values again to make sure they print
    warehouse[row1][col1] = 1;
    warehouse[row2][col2] = 2;

}",1
hwin877,1696149039,1,"void PelletRoute(int warehouse[10][10])
{
	int start_row, start_col, final_row, final_col;
	FindTile(warehouse, 1, &start_row, &start_col);
	FindTile(warehouse, 2, &final_row, &final_col);
	int h = start_col;
	for (h = start_col + 1; h <= final_col; h++)
	{
		warehouse[start_row][h] = 3;
	}
	int r = start_row;
	for (r = start_row; r < final_row; r++)
	{
		warehouse[r][final_col] = 3;
	}
}",0
hwin877,1696149165,2,"void PelletRoute(int warehouse[10][10])
{
	int start_row, start_col, final_row, final_col;
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < NUM_ROWS; y_loop++)
	{
		for (x_loop = 0; x_loop < NUM_COLS; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 1)
			{
				start_row = y_loop;
				start_col = x_loop;
			}
		}
	}
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < NUM_ROWS; y_loop++)
	{
		for (x_loop = 0; x_loop < NUM_COLS; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 2)
			{
				final_row = y_loop;
				final_col = x_loop;
			}
		}
	}
	int h = start_col;
	for (h = start_col + 1; h <= final_col; h++)
	{
		warehouse[start_row][h] = 3;
	}
	int r = start_row;
	for (r = start_row; r < final_row; r++)
	{
		warehouse[r][final_col] = 3;
	}
}",0
hwin877,1696149195,3,"void PelletRoute(int warehouse[10][10])
{
	int start_row, start_col, final_row, final_col;
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < 10; y_loop++)
	{
		for (x_loop = 0; x_loop < 10; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 1)
			{
				start_row = y_loop;
				start_col = x_loop;
			}
		}
	}
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < 10; y_loop++)
	{
		for (x_loop = 0; x_loop < 10; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 2)
			{
				final_row = y_loop;
				final_col = x_loop;
			}
		}
	}
	int h = start_col;
	for (h = start_col + 1; h <= final_col; h++)
	{
		warehouse[start_row][h] = 3;
	}
	int r = start_row;
	for (r = start_row; r < final_row; r++)
	{
		warehouse[r][final_col] = 3;
	}
}",0
hwin877,1696149252,4,"void PelletRoute(int warehouse[10][10])
{
	int start_row, start_col, final_row, final_col;
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < 10; y_loop++)
	{
		for (x_loop = 0; x_loop < 10; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 1)
			{
				start_row = y_loop;
				start_col = x_loop;
			}
		}
	}
	int a_loop = 0;
	int b_loop = 0;
	for (a_loop = 0; a_loop < 10; a_loop++)
	{
		for (b_loop = 0; b_loop < 10; b_loop++)
		{
			if (warehouse[a_loop][b_loop] == 2)
			{
				final_row = a_loop;
				final_col = b_loop;
			}
		}
	}
	int h = start_col;
	for (h = start_col + 1; h <= final_col; h++)
	{
		warehouse[start_row][h] = 3;
	}
	int r = start_row;
	for (r = start_row; r < final_row; r++)
	{
		warehouse[r][final_col] = 3;
	}
}",0
hwin877,1696150147,5,"void PelletRoute(int warehouse[10][10])
{
	int start_row, start_col, final_row, final_col;
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < 10; y_loop++)
	{
		for (x_loop = 0; x_loop < 10; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 1)
			{
				start_row = y_loop;
				start_col = x_loop;
			}
		}
	}
	int a_loop = 0;
	int b_loop = 0;
	for (a_loop = 0; a_loop < 10; a_loop++)
	{
		for (b_loop = 0; b_loop < 10; b_loop++)
		{
			if (warehouse[a_loop][b_loop] == 2)
			{
				final_row = a_loop;
				final_col = b_loop;
			}
		}
	}
	int h = start_col;
	if (start_col <= final_col)
	{
		for (h = start_col + 1; h <= final_col; h++)
		{
			warehouse[start_row][h] = 3;
		}
	}
	else
	{
		for (h = start_col - 1; h > final_col; h--)
		{
			warehouse[start_row][h] = 3;
		}
	}
	int r = start_row;
	if (start_row <= final_row)
	{
		for (r = start_row; r < final_row; r++)
		{
		warehouse[r][final_col] = 3;
		}
	}
	else
		for (r = start_col - 1; r > final_col; r--)
		{
			warehouse[r][final_col] = 3;
		}
}",0
hwin877,1696150509,6,"void PelletRoute(int warehouse[10][10])
{
	int start_row, start_col, final_row, final_col;
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < 10; y_loop++)
	{
		for (x_loop = 0; x_loop < 10; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 1)
			{
				start_row = y_loop;
				start_col = x_loop;
			}
		}
	}
	int a_loop = 0;
	int b_loop = 0;
	for (a_loop = 0; a_loop < 10; a_loop++)
	{
		for (b_loop = 0; b_loop < 10; b_loop++)
		{
			if (warehouse[a_loop][b_loop] == 2)
			{
				final_row = a_loop;
				final_col = b_loop;
			}
		}
	}
	int h = start_col;
	if (start_col <= final_col)
	{
		for (h = start_col + 1; h <= final_col; h++)
		{
			warehouse[start_row][h] = 3;
		}
	}
	else if (start_col > final_col)
	{
		for (h = start_col - 1; h >= final_col; h--)
		{
			warehouse[start_row][h] = 3;
		}
	}
	int r = start_row;
	if (start_row <= final_row)
	{
		for (r = start_row; r < final_row; r++)
		{
		warehouse[r][final_col] = 3;
		}
	}
	else if (start_row > final_row)
	{
		for (r = start_row - 1; r > final_row; r--)
		{
			warehouse[r][final_col] = 3;
		}
	}
}",0
hwin877,1696151035,7,"void PelletRoute(int warehouse[10][10])
{
	int start_row, start_col, final_row, final_col;
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < 10; y_loop++)
	{
		for (x_loop = 0; x_loop < 10; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 1)
			{
				start_row = y_loop;
				start_col = x_loop;
			}
		}
	}
	int a_loop = 0;
	int b_loop = 0;
	for (a_loop = 0; a_loop < 10; a_loop++)
	{
		for (b_loop = 0; b_loop < 10; b_loop++)
		{
			if (warehouse[a_loop][b_loop] == 2)
			{
				final_row = a_loop;
				final_col = b_loop;
			}
		}
	}
	int h = start_col;
	if (start_col <= final_col)
	{
		for (h = start_col + 1; h < final_col; h++)
		{
			warehouse[start_row][h] = 3;
		}
	}
	else if (start_col > final_col)
	{
		for (h = start_col - 1; h > final_col; h--)
		{
			warehouse[start_row][h] = 3;
		}
	}
	int r = start_row;
	if (start_row <= final_row)
	{
		for (r = start_row; r < final_row; r++)
		{
		warehouse[r][final_col] = 3;
		}
	}
	else if (start_row > final_row)
	{
		for (r = start_row - 1; r > final_row; r--)
		{
			warehouse[r][final_col] = 3;
		}
	}
	int row_diff = start_row - final_row;
	int col_diff = start_col - final_col;
	if (row_diff * col_diff != 0)
	{
		warehouse[start_row][final_col] = 3;
	}
}",0
hwin877,1696151183,8,"void PelletRoute(int warehouse[10][10])
{
	int start_row, start_col, final_row, final_col;
	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < 10; y_loop++)
	{
		for (x_loop = 0; x_loop < 10; x_loop++)
		{
			if (warehouse[y_loop][x_loop] == 1)
			{
				start_row = y_loop;
				start_col = x_loop;
			}
		}
	}
	int a_loop = 0;
	int b_loop = 0;
	for (a_loop = 0; a_loop < 10; a_loop++)
	{
		for (b_loop = 0; b_loop < 10; b_loop++)
		{
			if (warehouse[a_loop][b_loop] == 2)
			{
				final_row = a_loop;
				final_col = b_loop;
			}
		}
	}
	int h = start_col;
	if (start_col <= final_col)
	{
		for (h = start_col + 1; h < final_col; h++)
		{
			warehouse[start_row][h] = 3;
		}
	}
	else if (start_col > final_col)
	{
		for (h = start_col - 1; h > final_col; h--)
		{
			warehouse[start_row][h] = 3;
		}
	}
	int r = start_row;
	if (start_row <= final_row)
	{
		for (r = start_row; r < final_row; r++)
		{
		warehouse[r][final_col] = 3;
		}
	}
	else if (start_row > final_row)
	{
		for (r = start_row - 1; r > final_row; r--)
		{
			warehouse[r][final_col] = 3;
		}
	}
	int row_diff = start_row - final_row;
	int col_diff = start_col - final_col;
	if (row_diff * col_diff != 0)
	{
		warehouse[start_row][final_col] = 3;
	}
	warehouse[start_row][start_col] = 1;
	warehouse[final_row][final_col] = 2;
}",1
hyan713,1695855023,1,"void PelletRoute(int warehouse[10][10])
{
    int i,j,rowWorker,colWorker,rowBox,colBox;
    
    for (i=0;i<10;i++) {
        for (j=0;j<10;j++) {
            if (warehouse[i][j] == 1){
                rowWorker = i;
                colWorker = j;
            } else if (warehouse[i][j] == 2){
                rowBox = i;
                colBox = j;
            }
        }
    }
    
    for (i=rowWorker+1;i<rowBox;i++) {
        warehouse[i][colBox] = 3;
    }
    
    for (j=colWorker+1;j<=colBox;j++) {
        warehouse[rowWorker][j] = 3;
    }
}",0
hyan713,1695857057,2,"void PelletRoute(int warehouse[10][10])
{
    int i,j,rowWorker,colWorker,rowBox,colBox;
    
    for (i=0;i<10;i++) {
        for (j=0;j<10;j++) {
            if (warehouse[i][j] == 1){
                rowWorker = i;
                colWorker = j;
            } else if (warehouse[i][j] == 2){
                rowBox = i;
                colBox = j;
            }
        }
    }
    
    if (rowWorker<rowBox){
        for (i=rowWorker+1;i<rowBox;i++) {
            warehouse[i][colBox] = 3;
        }
    }
    
    if (rowWorker<rowBox && colWorker<colBox){
        for (j=colWorker+1;j<=colBox;j++) {
            warehouse[rowWorker][j] = 3;
        }
    } else if (rowWorker==rowBox && colWorker<colBox){
        for (j=colWorker+1;j<colBox;j++) {
            warehouse[rowWorker][j] = 3;
        }
    }
    
    if (rowWorker>rowBox){
        for (i=rowBox+1;i<rowWorker;i++) {
            warehouse[i][colWorker] = 3;
        }
    }
    
    if (rowWorker>rowBox && colWorker>colBox){
        for (j=colBox+1;j<=colWorker;j++) {
            warehouse[rowBox][j] = 3;
        }
    } else if (rowWorker==rowBox && colWorker>colBox){
        for (j=colBox+1;j<colWorker;j++) {
            warehouse[rowBox][j] = 3;
        }
    }
}",0
hyan713,1696229634,3,"void PelletRoute(int warehouse[10][10])
{
    int i,j,rowWorker,colWorker,rowBox,colBox;
    
    for (i=0;i<10;i++) {
        for (j=0;j<10;j++) {
            if (warehouse[i][j] == 1){
                rowWorker = i;
                colWorker = j;
            } else if (warehouse[i][j] == 2){
                rowBox = i;
                colBox = j;
            }
        }
    }
    
    if (rowWorker<rowBox){
        for (i=rowWorker+1;i<rowBox;i++) {
            warehouse[i][colBox] = 3;
        }
    } 
    
    if (rowWorker<rowBox && colWorker<colBox){
        for (j=colWorker+1;j<=colBox;j++) {
            warehouse[rowWorker][j] = 3;
        }
    } else if (rowWorker<rowBox && colWorker>colBox){
        for (j=colWorker-1;j>=colBox;j--) {
            warehouse[rowWorker][j] = 3;
        }
    } else if (rowWorker==rowBox && colWorker<colBox){
        for (j=colWorker+1;j<colBox;j++) {
            warehouse[rowWorker][j] = 3;
        }
    }
    
    

    if (rowWorker>rowBox){
        for (i=rowBox+1;i<rowWorker;i++) {
            warehouse[i][colBox] = 3;
        }
    }
    
    if (rowWorker>rowBox && colWorker>colBox){
        for (j=colWorker-1;j>=colBox;j--) {
            warehouse[rowWorker][j] = 3;
        }
    }else if (rowWorker==rowBox && colWorker>colBox){
        for (j=colWorker-1;j>colBox;j--) {
            warehouse[rowBox][j] = 3;
        }
    } else if (rowWorker>rowBox && colWorker<colBox){
        for (j=colWorker+1;j<=colBox;j++) {
            warehouse[rowWorker][j] = 3;
        }
    }
}",1
ibha186,1696119568,1,"void PelletRoute(int warehouse[10][10]) {
    int i = 0;
    int j = 0;
    int pos1_x = 0;
    int pos1_y = 0;
    int pos2_x = 0;
    int pos2_y = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pos1_x = i;
                pos1_y = j;
            }
            if (warehouse[i][j] == 2) {
                pos2_x = i;
                pos2_y = j;
            }
        }
    }
    if (pos1_y < pos2_y) {
        for (int j = pos1_y + 1; j <= pos2_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        } 
    } else if (pos2_y < pos1_y) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else {
        for (int i = pos1_x + 1; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    }
    
}",0
ibha186,1696119581,2,"void PelletRoute(int warehouse[10][10]) {
    int pos1_x = 0;
    int pos1_y = 0;
    int pos2_x = 0;
    int pos2_y = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pos1_x = i;
                pos1_y = j;
            }
            if (warehouse[i][j] == 2) {
                pos2_x = i;
                pos2_y = j;
            }
        }
    }
    if (pos1_y < pos2_y) {
        for (int j = pos1_y + 1; j <= pos2_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        } 
    } else if (pos2_y < pos1_y) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else {
        for (int i = pos1_x + 1; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    }
    
}",0
ibha186,1696122916,3,"void PelletRoute(int warehouse[10][10]) {
    int i = 0;
    int j = 0;
    int pos1_x = 0;
    int pos1_y = 0;
    int pos2_x = 0;
    int pos2_y = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pos1_x = i;
                pos1_y = j;
            }
            if (warehouse[i][j] == 2) {
                pos2_x = i;
                pos2_y = j;
            }
        }
    }
    if (pos1_y < pos2_y) {
        for (int j = pos1_y + 1; j <= pos2_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        } 
    } else if ((pos2_y < pos1_y) && (pos1_x < pos2_x)) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x < pos1_x) && (pos2_y < pos1_y)) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x < pos1_x) && (pos2_y == pos1_y)) {
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x == pos1_x) && (pos2_y < pos1_y)) {
        for (int j = pos2_y + 1; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
    } else {
        for (int i = pos1_x + 1; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    }  
}",0
ibha186,1696122938,4,"void PelletRoute(int warehouse[10][10]) {
    int pos1_x = 0;
    int pos1_y = 0;
    int pos2_x = 0;
    int pos2_y = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pos1_x = i;
                pos1_y = j;
            }
            if (warehouse[i][j] == 2) {
                pos2_x = i;
                pos2_y = j;
            }
        }
    }
    if (pos1_y < pos2_y) {
        for (int j = pos1_y + 1; j <= pos2_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        } 
    } else if ((pos2_y < pos1_y) && (pos1_x < pos2_x)) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x < pos1_x) && (pos2_y < pos1_y)) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x < pos1_x) && (pos2_y == pos1_y)) {
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x == pos1_x) && (pos2_y < pos1_y)) {
        for (int j = pos2_y + 1; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
    } else {
        for (int i = pos1_x + 1; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    }  
}",0
ibha186,1696123410,5,"#include <stdio.h>
void PelletRoute(int warehouse[10][10]) {
    int pos1_x = 0;
    int pos1_y = 0;
    int pos2_x = 0;
    int pos2_y = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pos1_x = i;
                pos1_y = j;
            }
            if (warehouse[i][j] == 2) {
                pos2_x = i;
                pos2_y = j;
            }
        }
    }
    if ((pos1_y < pos2_y) && (pos1_x < pos2_x)) {
        for (int j = pos1_y + 1; j <= pos2_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos1_y < pos2_y) && (pos1_x > pos2_x))
    {
        for (int j = pos1_y + 1; j <= pos2_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_y < pos1_y) && (pos1_x < pos2_x)) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x < pos1_x) && (pos2_y < pos1_y)) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x < pos1_x) && (pos2_y == pos1_y)) {
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x == pos1_x) && (pos2_y < pos1_y)) {
        for (int j = pos2_y + 1; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
    } else {
        for (int i = pos1_x + 1; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    }  
}

int main(void) {
    int warehouse[10][10] = { 
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0} };

    PelletRoute(warehouse);

    int i, j;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }
    return 0;
}",0
ibha186,1696123419,6,"#include <stdio.h>
void PelletRoute(int warehouse[10][10]) {
    int pos1_x = 0;
    int pos1_y = 0;
    int pos2_x = 0;
    int pos2_y = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pos1_x = i;
                pos1_y = j;
            }
            if (warehouse[i][j] == 2) {
                pos2_x = i;
                pos2_y = j;
            }
        }
    }
    if ((pos1_y < pos2_y) && (pos1_x < pos2_x)) {
        for (int j = pos1_y + 1; j <= pos2_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos1_y < pos2_y) && (pos1_x > pos2_x))
    {
        for (int j = pos1_y + 1; j <= pos2_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_y < pos1_y) && (pos1_x < pos2_x)) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos1_x; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x < pos1_x) && (pos2_y < pos1_y)) {
        for (int j = pos2_y; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x < pos1_x) && (pos2_y == pos1_y)) {
        for (int i = pos2_x + 1; i < pos1_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    } else if ((pos2_x == pos1_x) && (pos2_y < pos1_y)) {
        for (int j = pos2_y + 1; j < pos1_y; j++) {
                warehouse[pos1_x][j] = 3;
            }
    } else {
        for (int i = pos1_x + 1; i < pos2_x; i++) {
            warehouse[i][pos2_y] = 3;
        }
    }  
}",1
ibur427,1695761774,1,"void PelletRoute(int warehouse[10][10])
{
	int startrow, startcol;
	int endrow, endcol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
			startrow = i ; 
			startcol = j ; 
			}
		}
	}

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
			endrow = i ; 
			endcol = j ; 
			}
		}
	}

	if (startcol < endcol) {
		for (int i = (startcol + 1); i < endcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}
	else {
		for (int i = (endcol + 1); i < startcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}

	if (startrow < endrow) {
		for (int i = startrow; i < endrow; i++) {
			warehouse[i][endcol] = 3;
		}
	}
	else {
		for (int i = (endrow + 1); i <= startrow; i++) {
			warehouse[i][endcol] = 3;
		}
	}
}",0
ibur427,1695769435,2,"void PelletRoute(int warehouse[10][10])
{
	int startrow, startcol;
	int endrow, endcol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
			startrow = i ; 
			startcol = j ; 
			}
		}
	}

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
			endrow = i ; 
			endcol = j ; 
			}
		}
	}

	if (startcol < endcol) {
		for (int i = startcol + 1; i < endcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}
	else if (startcol > endcol) {
		for (int i = endcol + 1; i < startcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}

	if (startrow < endrow) {
		for (int i = startrow + 1; i < endrow; i++) {
			warehouse[i][endcol] = 3;
		}
	}
	else if (startrow > endrow) {
		for (int i = endrow + 1; i < startrow; i++) {
			warehouse[i][endcol] = 3;
		}
	}

	if (startrow != endrow && startcol != endcol) {
		warehouse[startrow][endcol] = 3;
	}
}",1
ihoo440,1696234755,1,"#include <stdio.h>

void PelletRoute(int Warray[10][10]) {
    
    int PRow = 0, PCol = 0;
    int DCol = 0, DRow = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (Warray[i][j] == 1) {
                PRow = i;
                PCol = j;
            } else if (Warray[i][j] == 2) {
                DCol = i;
                DRow = j;
            }
        }
    }

    while (PRow != DCol) {
        if (PRow < DCol) {
            PRow++;
        } else {
            PRow--;
        }
        Warray[PRow][PCol] = 3;
    }

    while (PCol != DRow) {
        if (PCol < DRow) {
            PCol++;
        } else {
            PCol--;
        }
        Warray[PRow][PCol] = 3;
    }
}",0
ihoo440,1696235136,2,"#include <stdio.h>

void PelletRoute(int Warray[10][10]) {
    
    int PRow = 0, PCol = 0;
    int DCol = 0, DRow = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (Warray[i][j] == 1) {
                PRow = i;
                PCol = j;
            } else if (Warray[i][j] == 2) {
                DCol = i;
                DRow = j;
            }
        }
    }

    while (PRow != DCol) {
        if (PRow > DCol) {
            PRow--;
        } else {
            PRow++;
        }
        Warray[PRow][PCol] = 3;
    }

    while (PCol != DRow) {
        
        if (PCol > DRow) {
            PCol--;
        } else {
            PCol++;
        }
        
        Warray[PRow][PCol] = 3;
    }
    Warray[PRow][PCol] = 2;
}",0
ihoo440,1696235279,3,"#include <stdio.h>

void PelletRoute(int Warray[10][10]) {
    
    int PRow = 0, PCol = 0;
    int DCol = 0, DRow = 0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (Warray[i][j] == 1) {
                PRow = i;
                PCol = j;
            } else if (Warray[i][j] == 2) {
                DCol = i;
                DRow = j;
            }
        }
    }

    while (PCol != DRow) {
        
        if (PCol > DRow) {
            PCol--;
        } else {
            PCol++;
        }
        
        Warray[PRow][PCol] = 3;
    }

     while (PRow != DCol) {
        if (PRow > DCol) {
            PRow--;
        } else {
            PRow++;
        }
        Warray[PRow][PCol] = 3;
    }

    Warray[PRow][PCol] = 2;
}",1
ikis164,1696204506,1,"#include <stdio.h>
#include <math.h>

void PelletRoute(int warehouse[10][10])
{
    int startRow, startCol;
    int endRow, endCol;
    int rowDiff, colDiff;
    int i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startRow = i;
                startCol = j;
            }
            if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    rowDiff = endRow - startRow;
    colDiff = endCol - startCol;

    if (startCol < endCol) {
        for (i = startCol; i < 10; i++) {
            if (i == endCol) {
                break;
            }
            warehouse[startRow][i] = 3;
        }
    } else if (startCol > endCol) {
        for (i = startCol; i > -1; i--) {
            if (i == endCol) {
                break;
            }
            warehouse[startRow][i] = 3;
        }
    }

    if (startRow < endRow){
        for (j = startRow; j < 10; j++){
            if (j == endRow){
                break;
            }
            warehouse[j][endCol] = 3;
        }
    } else if (startRow > endRow){
        for (j = startRow; j > -1; j--){
            if (j == endRow){
                break;
            }
            warehouse[j][endCol] = 3;
        }
    }

    warehouse[startRow][startCol] = 1;
    warehouse[endRow][endCol] = 2;
    
}",0
ikis164,1696204623,2,"#include <stdio.h>
#include <math.h>

void PelletRoute(int warehouse[10][10])
{
    int startRow, startCol;
    int endRow, endCol;
    int i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startRow = i;
                startCol = j;
            }
            if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    if (startCol < endCol) {
        for (i = startCol; i < 10; i++) {
            if (i == endCol) {
                break;
            }
            warehouse[startRow][i] = 3;
        }
    } else if (startCol > endCol) {
        for (i = startCol; i > -1; i--) {
            if (i == endCol) {
                break;
            }
            warehouse[startRow][i] = 3;
        }
    }

    if (startRow < endRow){
        for (j = startRow; j < 10; j++){
            if (j == endRow){
                break;
            }
            warehouse[j][endCol] = 3;
        }
    } else if (startRow > endRow){
        for (j = startRow; j > -1; j--){
            if (j == endRow){
                break;
            }
            warehouse[j][endCol] = 3;
        }
    }

    warehouse[startRow][startCol] = 1;
    warehouse[endRow][endCol] = 2;
    
}",1
ilee973,1696217372,1,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
    int pellet_row;
    int pellet_col;
    int destination_row;
    int destination_col;
    //determine the location of pellet and destination
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
       
       if(warehouse[i][j] == 1){
           pellet_row = i;
           pellet_col = j;
       }
       
       if(warehouse[i][j] == 2){
           destination_row = i;
           destination_col = j;
       }
        }
    }
       
       //move pellet horizontally until it lines up with destination
       while (pellet_col != destination_col){
     
       if (pellet_col > destination_col){
           pellet_col--;
       }
       
       else {
           pellet_col++;
       }
    
        warehouse[pellet_row][pellet_col] = 3;
               
       }
       
       //move pellet horizontally until it reaches destination
       while(pellet_row != destination_row){
           
       if (pellet_row > destination_row){
               pellet_row--; 
       }
        else {
              pellet_row++;
       }
       
       warehouse[pellet_row][pellet_col] = 3;
   }
   warehouse[destination_row][destination_col] = 2;
}",1
imoh000,1695818240,1,"#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
    int PelletRow, PelletColumn, DestinationRow, DestinationCol;

    //Finding the position(s) of the pellet and the destination
    for(int i = 0; i < NUM_ROWS; i++) //creating a nested 'for' loop to iterate through 2D array(s)
    {
        for(int j = 0; j < NUM_COLS; j++)
        {
            if(warehouse[i][j] == 1)
            {
                PelletRow = i;
                PelletColumn = j;
            }
            else if(warehouse[i][j] == 2)
            {
                DestinationRow = i;
                DestinationCol = j;
            }
        }
    }

    //Moving the pellet horizontally until it lines up with the destination
    while(PelletColumn != DestinationCol) //now using a while loop 
    {
        PelletColumn++;
        warehouse[PelletRow][PelletColumn] = 3;
    }

    //Moving the pellet vertically until it reaches the destination
    while(PelletRow != DestinationRow)// again, now using a 'while' loop
    {
        PelletRow++;
        warehouse[PelletRow][PelletColumn] = 3;
    }

    //Setting the final destination back to 2
    warehouse[DestinationRow][DestinationCol] = 2; 
}

",0
iwes050,1695786977,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the location of the pellet (1) and the destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally (left or right) if necessary
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically (up or down) if necessary
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Set the destination (2) at the final position
    warehouse[destRow][destCol] = 2;
}

",1
ixia229,1696170707,1,"void PelletRoute(int warehouse[10][10]){
    int i, j;
    int PelletRow, PelletCol;
    int DestRow, DestCol;
    int up, down, left, right;
    int rows, cols;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                PelletRow = i;
                PelletCol = j;
            }
        }
    }
        for (i = 0; i < 10; i++) {
            for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                DestRow = i;
                DestCol = j;
            }
        }
    }
    if (PelletRow > DestRow) {
        down = DestRow;
        up = PelletRow;
    }
    else {
        down = PelletRow;
        up = DestRow;
    }

    if (PelletCol > DestCol) {
        right = PelletCol;
        left = DestCol;
    }
    else {
        right = DestCol;
        left = PelletCol;
    }

    for (cols = left; cols <= right; cols++) {
        warehouse[PelletRow][cols] = 3;
    }

    for (rows = down; rows <= up; rows++) {
        warehouse[rows][DestCol] = 3;
    }

    warehouse[PelletRow][PelletCol] = 1;
    warehouse[DestRow][DestCol] = 2;
}
",1
jahn224,1695804005,1,"void PelletRoute(int warehouse[10][10])
{
    int i,j;
    int h,v;
    int row1, row2, col1, col2;
    
    for (i = 0; i < 10; i++) {
       for (j = 0; j < 10; j++) {
           //find 1 - starting point 
          if (warehouse[i][j]==1) {
              row1 = i;
              col1 = j;
          }
          //find 2 - destination 
          if (warehouse[i][j]==2) {
              row2 = i;
              col2 = j;
          }
       }
    }
    
    if (col1 < col2) {
        for (h=col1 + 1; h<col2;h++) {
            warehouse[row1][h] = 3;
        }
    }
    
    if (col1 > col2) {
        for (h=col1 + 1; h<col2;h--) {
            warehouse[row1][h] = 3;
            }
    }
    
    
    if (row1 < row2) {
        for (v=row1; v<row2;v++) {
            warehouse[v][col2] = 3;
        }
    }
    
    if (row1 > row2) {
        for (v=row1; v<row2;v--) {
            warehouse[v][col2] = 3;
        }
    }
    
}",0
jahn224,1695805601,2,"void PelletRoute(int warehouse[10][10])
{
    int i,j;
    int h,v;
    int row1, row2, col1, col2;
    
    for (i = 0; i < 10; i++) {
       for (j = 0; j < 10; j++) {
           //find 1 - starting point 
          if (warehouse[i][j]==1) {
              row1 = i;
              col1 = j;
          }
          //find 2 - destination 
          if (warehouse[i][j]==2) {
              row2 = i;
              col2 = j;
          }
       }
    }
    
    if (col1 < col2) {
        for (h=col1 + 1; h<col2;h++) {
            warehouse[row1][h] = 3;
        }
    }
    
    if (col1 > col2) {
        for (h=col1 - 1; h>col2;h--) {
            warehouse[row1][h] = 3;
            }
    }
    
    
    if (row1 < row2) {
        for (v=row1; v<row2;v++) {
            warehouse[v][col2] = 3;
        }
    }
    
    if (row1 > row2) {
        for (v=row1; v>row2;v--) {
            warehouse[v][col2] = 3;
        }
    }
    
}",0
jahn224,1695806388,3,"void PelletRoute(int warehouse[10][10])
{
    int i,j;
    int h,v;
    int row1, row2, col1, col2;
    
    for (i = 0; i < 10; i++) {
       for (j = 0; j < 10; j++) {
           //find 1 - starting point 
          if (warehouse[i][j]==1) {
              row1 = i;
              col1 = j;
          }
          //find 2 - destination 
          if (warehouse[i][j]==2) {
              row2 = i;
              col2 = j;
          }
       }
    }
    
    if (col1 < col2) {
        for (h=col1 + 1; h<col2;h++) {
            warehouse[row1][h] = 3;
        }
    }
    
    if (col1 > col2) {
        for (h=col1 - 1; h>col2;h--) {
            warehouse[row1][h] = 3;
            }
    }
    
    
    if (row1 < row2) {
        for (v=row1 + 1; v<row2;v++) {
            warehouse[v][col2] = 3;
        }
    }
    
    if (row1 > row2) {
        for (v=row1 - 1; v>row2;v--) {
            warehouse[v][col2] = 3;
        }
    }
    
    if ((row1 != row2) && (col1 != col2)) {
        warehouse[row1][col2] = 3;
    }
    
}",1
jbro301,1695804216,1,"#include <stdio.h>
// Finds the shortest route from pellet to destination


void PelletRoute(int warehouse[10][10])

{   
    int i;
    int j;
    int pelletrow;
    int pelletcol;
    int destinationrow;
    int destinationcol;
    int diffrow;
    int diffcol;
    int *col;
    int *row;
    
    // Find position of pellet  
    for (i=0;i<10;i++) {
    for (j=0;j<10;j++) {
    if (warehouse[i][j]==1) {
    pelletrow = i;
    pelletcol= j;
    }
    }
    }
    
    // Find position of destination   
    for (i=0;i<10;i++) {
    for (j=0;j<10;j++) {
    if (warehouse[i][j]==2) {
    destinationrow = i;
    destinationcol= j;
    }
    }
    }
    
    // Calculate distance between pellet and destination
    diffrow = destinationrow-pelletrow;
    diffcol = destinationcol-pelletcol;
    
    // Set horizontal destination path
     if (diffcol>1) {
         for (j=1;j<diffcol;j++) {
           col = &warehouse[pelletrow][pelletcol+j];
            *col = 3;    
         }
     }
      
     else if (diffcol<-1) {  
        for (j=1;j<(0-diffcol);j++) {
           col = &warehouse[pelletrow][pelletcol-j];
            *col = 3;    
         }
     }
     
    // Set vertical destination path
    if (diffrow>1) {
          for (i=1;i<diffrow;i++) {
           col = &warehouse[pelletrow+i][destinationcol];
            *col = 3;    
         }
     }
     
    else if (diffrow<-1) {
          for (i=1;i<(0-diffrow);i++) {
           col = &warehouse[pelletrow-i][destinationcol];
            *col = 3;    
         }
     }
    
     // Set corner of path
    
    if (diffcol==0 || diffrow==0) {
     }
    else {
        warehouse[pelletrow][destinationcol]=3;
    } 
    return;
}",0
jbro301,1695804395,2,"#include <stdio.h>
// Finds the shortest route from pellet to destination


void PelletRoute(int warehouse[10][10])

{   
    int i;
    int j;
    int pelletrow;
    int pelletcol;
    int destinationrow;
    int destinationcol;
    int diffrow;
    int diffcol;
    int *col;
    
    // Find position of pellet  
    for (i=0;i<10;i++) {
    for (j=0;j<10;j++) {
    if (warehouse[i][j]==1) {
    pelletrow = i;
    pelletcol= j;
    }
    }
    }
    
    // Find position of destination   
    for (i=0;i<10;i++) {
    for (j=0;j<10;j++) {
    if (warehouse[i][j]==2) {
    destinationrow = i;
    destinationcol= j;
    }
    }
    }
    
    // Calculate distance between pellet and destination
    diffrow = destinationrow-pelletrow;
    diffcol = destinationcol-pelletcol;
    
    // Set horizontal destination path
     if (diffcol>1) {
         for (j=1;j<diffcol;j++) {
           col = &warehouse[pelletrow][pelletcol+j];
            *col = 3;    
         }
     }
      
     else if (diffcol<-1) {  
        for (j=1;j<(0-diffcol);j++) {
           col = &warehouse[pelletrow][pelletcol-j];
            *col = 3;    
         }
     }
     
    // Set vertical destination path
    if (diffrow>1) {
          for (i=1;i<diffrow;i++) {
           col = &warehouse[pelletrow+i][destinationcol];
            *col = 3;    
         }
     }
     
    else if (diffrow<-1) {
          for (i=1;i<(0-diffrow);i++) {
           col = &warehouse[pelletrow-i][destinationcol];
            *col = 3;    
         }
     }
    
     // Set corner of path
    
    if (diffcol==0 || diffrow==0) {
     }
    else {
        warehouse[pelletrow][destinationcol]=3;
    } 
    return;
}",1
jcha574,1695951113,1,"void PelletRoute(int warehouse[10][10])
{
    int i,j,rone,cone,rtwo,ctwo;
    for(i=0;i<10;i++) {
        for(j=0;j<10;j++) {
            if (warehouse[i][j]==1) {
                rone = i;
                cone = j;
                break;
            }

    }
    }
    for(i=0;i<10;i++) {
        for(j=0;j<11;j++) {
            if ((warehouse[i][j]==2)) {
                rtwo = i;
                ctwo = j;
                break;
            }

    }
    }
    if (cone<=ctwo) {
        for(j=cone;j<=ctwo;j++) {
            warehouse[rone][j]=3;
        }
        
    }
    else if (cone>=ctwo) {
        for(j=ctwo;j<=cone;j++) {
            warehouse[rone][j]=3;
        }
    }
    
    if (rone<=rtwo) {
        for(i=rone;i<=rtwo;i++) {
            warehouse[i][ctwo]=3;
        }
    }
    
    else if (rone>=rtwo) {
        for(i=rone;i>=rtwo;i--) {
            warehouse[i][ctwo]=3;
        }
    }
    
    
    if ( ((cone<=ctwo)||(cone>=ctwo))&& ((rone<=rtwo)||(rone>=rtwo)))
    {
        warehouse[rone][ctwo]=3;
    }

warehouse[rone][cone]=1;
warehouse[rtwo][ctwo]=2;
}",1
jcha972,1696220399,1,"void PelletRoute(int warehouse[10][10]) {
    
    //i is #row, j is #col
    int i, j;
    int rowA, colA;
    int rowB, colB;

 for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
           if (warehouse[i][j] == 1) {
               rowA = i;
               colA = j;
           }
           if(warehouse[i][j] == 2) {
               rowB = i;
               colB = j;
           }
        }
    }
    
    if (colA < colB) {
        for (int a = (colA + 1); a < (colB + 1); a++) {
             warehouse[rowA][a] = 3;
        }
    }
    else if(colA > colB) {
        for (int b = (colA - 1); b > (colB - 1); b--) {
             warehouse[rowA][b] = 3;
        } 
    }
    
    
    if (rowA < rowB) {
        for (int c = (rowA + 1); c < (rowB); c++) {
             warehouse[c][colB] = 3;
        }
    }
    else if(rowA > rowB) {
        for (int d = (rowA - 1); d > (rowB); d--) {
             warehouse[d][colB] = 3;
        } 
    }
    
}",0
jcha972,1696221112,2,"void PelletRoute(int warehouse[10][10]) {
    
    //i is #row, j is #col
    int i, j;
    int rowA, colA;
    int rowB, colB;

 for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
           if (warehouse[i][j] == 1) {
               rowA = i;
               colA = j;
           }
           if(warehouse[i][j] == 2) {
               rowB = i;
               colB = j;
           }
        }
    }
    
    if (colA < colB) {
        for (int a = (colA + 1); a < (colB + 1); a++) {
             warehouse[rowA][a] = 3;
        }
    }
    else if(colA > colB) {
        for (int b = (colA - 1); b > (colB); b--) {
             warehouse[rowA][b] = 3;
        } 
    }
    
    
    if (rowA < rowB) {
        for (int c = (rowA); c < (rowB); c++) {
             warehouse[c][colB] = 3;
        }
    }
    else if(rowA > rowB) {
        for (int d = (rowA); d > (rowB); d--) {
             warehouse[d][colB] = 3;
        } 
    }
    
}",0
jcha972,1696221923,3,"void PelletRoute(int warehouse[10][10]) {
    
    //i is #row, j is #col
    int i, j;
    int rowA, colA;
    int rowB, colB;

 for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
           if (warehouse[i][j] == 1) {
               rowA = i;
               colA = j;
           }
           if(warehouse[i][j] == 2) {
               rowB = i;
               colB = j;
           }
        }
    }
    
    if (colA == colB) {
    }
    else if (colA < colB) {
        for (int a = (colA); a < (colB + 1); a++) {
             warehouse[rowA][a] = 3;
        }
    }
    else if(colA > colB) {
        for (int b = (colA); b > (colB - 1); b--) {
             warehouse[rowA][b] = 3;
        } 
    }
    
    if (rowA == rowB) {
    }
    else if (rowA < rowB) {
        for (int c = (rowA); c < (rowB + 1); c++) {
             warehouse[c][colB] = 3;
        }
    }
    else if(rowA > rowB) {
        for (int d = (rowA); d > (rowB - 1); d--) {
             warehouse[d][colB] = 3;
        } 
    }
    
    warehouse[rowA][colA] = 1;
    warehouse[rowB][colB] = 2;
    
}",1
jchi648,1696243200,1,"void PelletRoute(int warehouse[10][10]) {
    
    int aRow, aCol, dRow, dCol;
    for (int a = 0; a < 10; a++) {
        for (int b = 0; b < 10; b++) {
            if (warehouse[a][b] == 1) {
               aRow = a;
               aCol = b;
            }
        }
    }
    // aRow and aCol is position of number 1
    
    for (int c = 0; c < 10; c++) {
        for (int d = 0; d < 10; d++) {
            if (warehouse[c][d] == 2) {
               dRow = c;
               dCol = d;
            }
        }
    }
    // dRow and dCol is position of number 2

    int x, y, j, k;
    // x = aRow
    // y = dRow
    // j = aCol
    // k = dCol
    
    if (aRow > dRow && aCol > dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[dRow][j1] = 3;
        }
    } else if (aRow > dRow && aCol < dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    } else if (aRow < dRow && aCol > dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][aCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[dRow][j1] = 3;
        }
    } else if (aRow < dRow && aCol < dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[dRow][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][aCol] = 3;
        }
    }
    warehouse[aRow][aCol] = 1;
    warehouse[dRow][dCol] = 2;
}",0
jchi648,1696243233,2,"void PelletRoute(int warehouse[10][10]) {
    
    int aRow, aCol, dRow, dCol;
    for (int a = 0; a < 10; a++) {
        for (int b = 0; b < 10; b++) {
            if (warehouse[a][b] == 1) {
               aRow = a;
               aCol = b;
            }
        }
    }
    // aRow and aCol is position of number 1
    
    for (int c = 0; c < 10; c++) {
        for (int d = 0; d < 10; d++) {
            if (warehouse[c][d] == 2) {
               dRow = c;
               dCol = d;
            }
        }
    }
    // dRow and dCol is position of number 2

    if (aRow > dRow && aCol > dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[dRow][j1] = 3;
        }
    } else if (aRow > dRow && aCol < dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    } else if (aRow < dRow && aCol > dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][aCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[dRow][j1] = 3;
        }
    } else if (aRow < dRow && aCol < dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[dRow][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][aCol] = 3;
        }
    }
    warehouse[aRow][aCol] = 1;
    warehouse[dRow][dCol] = 2;
}",0
jchi648,1696243421,3,"void PelletRoute(int warehouse[10][10]) {
    
    int aRow, aCol, dRow, dCol;
    for (int a = 0; a < 10; a++) {
        for (int b = 0; b < 10; b++) {
            if (warehouse[a][b] == 1) {
               aRow = a;
               aCol = b;
            }
        }
    }
    // aRow and aCol is position of number 1
    
    for (int c = 0; c < 10; c++) {
        for (int d = 0; d < 10; d++) {
            if (warehouse[c][d] == 2) {
               dRow = c;
               dCol = d;
            }
        }
    }
    // dRow and dCol is position of number 2

    if (aRow > dRow && aCol > dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[aRow][j1] = 3;
        }
    } else if (aRow > dRow && aCol < dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    } else if (aRow < dRow && aCol > dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][aCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[dRow][j1] = 3;
        }
    } else if (aRow < dRow && aCol < dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][aCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[dRow][k1] = 3;
        }
    }
    warehouse[aRow][aCol] = 1;
    warehouse[dRow][dCol] = 2;
}",0
jchi648,1696243516,4,"void PelletRoute(int warehouse[10][10]) {
    
    int aRow, aCol, dRow, dCol;
    for (int a = 0; a < 10; a++) {
        for (int b = 0; b < 10; b++) {
            if (warehouse[a][b] == 1) {
               aRow = a;
               aCol = b;
            }
        }
    }
    // aRow and aCol is position of number 1
    
    for (int c = 0; c < 10; c++) {
        for (int d = 0; d < 10; d++) {
            if (warehouse[c][d] == 2) {
               dRow = c;
               dCol = d;
            }
        }
    }
    // dRow and dCol is position of number 2

    if (aRow >= dRow && aCol >= dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[aRow][j1] = 3;
        }
    } else if (aRow >= dRow && aCol <= dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    } else if (aRow <= dRow && aCol >= dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][aCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[dRow][j1] = 3;
        }
    } else if (aRow <= dRow && aCol <= dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    }
    warehouse[aRow][aCol] = 1;
    warehouse[dRow][dCol] = 2;
}",0
jchi648,1696243962,5,"void PelletRoute(int warehouse[10][10]) {
    
    int aRow, aCol, dRow, dCol;
    for (int a = 0; a < 9; a++) {
        for (int b = 0; b < 9; b++) {
            if (warehouse[a][b] == 1) {
               aRow = a;
               aCol = b;
            }
        }
    }
    // aRow and aCol is position of number 1
    
    for (int c = 0; c < 9; c++) {
        for (int d = 0; d < 9; d++) {
            if (warehouse[c][d] == 2) {
               dRow = c;
               dCol = d;
            }
        }
    }
    // dRow and dCol is position of number 2

    if (aRow >= dRow && aCol >= dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[aRow][j1] = 3;
        }
    } else if (aRow >= dRow && aCol <= dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    } else if (aRow <= dRow && aCol >= dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][aCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[dRow][j1] = 3;
        }
    } else if (aRow <= dRow && aCol <= dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    }
    warehouse[aRow][aCol] = 1;
    warehouse[dRow][dCol] = 2;
}",0
jchi648,1696244116,6,"void PelletRoute(int warehouse[10][10]) {
    
    int aRow, aCol, dRow, dCol;
    for (int a = 0; a < 10; a++) {
        for (int b = 0; b < 10; b++) {
            if (warehouse[a][b] == 1) {
               aRow = a;
               aCol = b;
            }
        }
    }
    // aRow and aCol is position of number 1
    
    for (int c = 0; c < 10; c++) {
        for (int d = 0; d < 10; d++) {
            if (warehouse[c][d] == 2) {
               dRow = c;
               dCol = d;
            }
        }
    }
    // dRow and dCol is position of number 2

    if (aRow >= dRow && aCol >= dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[aRow][j1] = 3;
        }
    } else if (aRow >= dRow && aCol <= dCol) {
        for (int y1 = dRow; y1 < aRow+1; y1++) {
            warehouse[y1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    } else if (aRow <= dRow && aCol >= dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][aCol] = 3;
        }
        for (int j1 = dCol; j1 < aCol+1; j1++) {
            warehouse[dRow][j1] = 3;
        }
    } else if (aRow <= dRow && aCol <= dCol) {
        for (int x1 = aRow; x1 < dRow+1; x1++) {
            warehouse[x1][dCol] = 3;
        }
        for (int k1 = aCol; k1 < dCol+1; k1++) {
            warehouse[aRow][k1] = 3;
        }
    }
    warehouse[aRow][aCol] = 1;
    warehouse[dRow][dCol] = 2;
}",0
jchu579,1696036986,1,"void PelletRoute(int warehouse[10][10]) {
	int destinationR, destinationC;
	for (int r = 0; r < 10; r++)
	{
		for (int c = 0; c < 10; c++)
		{
			if (warehouse[r][c] == 2)
			{
				destinationR = r;
				destinationC = c;
			}
		}
	}

	int startR, startC;
	for (int r = 0; r < 10; r++)
	{
		for (int c = 0; c < 10; c++)
		{
			if (warehouse[r][c] == 1)
			{
				startR = r;
				startC = c;
				break;
			}
		}
	}

	// Horizontal movement 
	if (destinationC > startC)
	{
		for (int c = startC + 1; c < destinationC + 1; c++)
		{
			warehouse[startR][c] = 3;
		}
	}
	else if (destinationC < startC)
	{
		for (int c = startC - 1; c > destinationC - 1; c--)
		{
			warehouse[startR][c] = 3;
		}
	}

	// verticle movement
	if (destinationR > startR)
	{
		for (int r = startR + 1; r < destinationR; r++)
		{
			warehouse[r][destinationC] = 3;
		}
	}
	else if (destinationR < startR)
	{
		for (int r = startR - 1; r > destinationR; r--)
		{
			warehouse[r][destinationC] = 3;
		}
	}

	if (warehouse[startR][destinationC] != 2 && warehouse[startR][destinationC] != 1)
	{
		warehouse[startR][destinationC] = 3;
	}
}",0
jchu579,1696037240,2,"void PelletRoute(int warehouse[10][10]) {
	int destinationR, destinationC;
	for (int r = 0; r < 10; r++)
	{
		for (int c = 0; c < 10; c++)
		{
			if (warehouse[r][c] == 2)
			{
				destinationR = r;
				destinationC = c;
			}
		}
	}

	int startR, startC; 
	for (int r = 0; r < 10; r++)
	{
		for (int c = 0; c < 10; c++)
		{
			if (warehouse[r][c] == 1)
			{
				startR = r;
				startC = c;
				break;
			}
		}
	}
	
	// Horizontal movement 
	if (destinationC > startC)
	{
		for (int c = startC+1; c < destinationC; c++)
		{
			warehouse[startR][c] = 3;
		}
	}
	else if(destinationC < startC)
	{
		for (int c = startC-1; c > destinationC; c--)
		{
			warehouse[startR][c] = 3;
		}
	}

	// verticle movement
	if (destinationR > startR)
	{
		for (int r = startR + 1; r < destinationR; r++)
		{
			warehouse[r][destinationC] = 3;
		}
	}
	else if (destinationR < startR)
	{
		for (int r = startR - 1; r > destinationR; r--)
		{
			warehouse[r][destinationC] = 3;
		}
	}
	
	if (warehouse[startR][destinationC] != 2 && warehouse[startR][destinationC] != 1)
	{
		warehouse[startR][destinationC] = 3;
	}
}",1
jcla431,1695965780,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]);
void FindTile(int warehouse[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos);

void FindTile(int warehouse[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (warehouse[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
	int rowPosition;
	int colPosition;
	int emptyRow;
	int emptyCol;
	int temp;
	int i;
	int j;
	int k; 
	int l;
	FindTile(warehouse, 1, &rowPosition, &colPosition);
	FindTile(warehouse, 2, &emptyRow, &emptyCol);

	if (colPosition != emptyCol && rowPosition != emptyRow)
	{
		if (colPosition < emptyCol)
		{
			for (i = colPosition + 1; i <= emptyCol; i++)
			{
				warehouse[rowPosition][i] = 3;
			}
		}

		else if (colPosition > emptyCol)
		{
			for (i = colPosition - 1; i >= emptyCol; i--)
			{
				warehouse[rowPosition][i] = 3; 
			}
		}

		if (rowPosition < emptyRow)
		{
			for (j = rowPosition + 1; j < emptyRow; j++)
			{
				warehouse[j][emptyCol] = 3;
			}
		}

		else if (rowPosition > emptyRow)
		{
			for (j = rowPosition - 1; j > emptyRow; j--)
			{
				warehouse[j][emptyCol] = 3;
			}
		}
	}

	else
	{
		if (colPosition == emptyCol)
		{
			if (rowPosition > emptyRow)
			{
				for (k= emptyRow + 1; k < rowPosition; k++)
				{
					warehouse[k][emptyCol] = 3;
				}
			}

			else if (rowPosition < emptyRow)
			{
				for (k = rowPosition + 1; k < emptyRow; k++)
				{
					warehouse[k][emptyCol] = 3;
				}
			}
		}

		if (rowPosition == emptyRow)
		{
			if (colPosition > emptyCol)
			{
				for (l = emptyCol + 1; l < colPosition; l++)
				{
					warehouse[rowPosition][l] = 3;
				}
			}

			else if (colPosition < emptyCol)
			{
				for (l = colPosition + 1; l < emptyCol; l++)
				{
					warehouse[rowPosition][l] = 3;
				}
			}
		}
	}
}
",0
jcla431,1695965945,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]);
void FindTile(int warehouse[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos);

void FindTile(int warehouse[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (warehouse[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
	int rowPosition;
	int colPosition;
	int emptyRow;
	int emptyCol;
	int i;
	int j;
	int k; 
	int l;
	FindTile(warehouse, 1, &rowPosition, &colPosition);
	FindTile(warehouse, 2, &emptyRow, &emptyCol);

	if (colPosition != emptyCol && rowPosition != emptyRow)
	{
		if (colPosition < emptyCol)
		{
			for (i = colPosition + 1; i <= emptyCol; i++)
			{
				warehouse[rowPosition][i] = 3;
			}
		}

		else if (colPosition > emptyCol)
		{
			for (i = colPosition - 1; i >= emptyCol; i--)
			{
				warehouse[rowPosition][i] = 3; 
			}
		}

		if (rowPosition < emptyRow)
		{
			for (j = rowPosition + 1; j < emptyRow; j++)
			{
				warehouse[j][emptyCol] = 3;
			}
		}

		else if (rowPosition > emptyRow)
		{
			for (j = rowPosition - 1; j > emptyRow; j--)
			{
				warehouse[j][emptyCol] = 3;
			}
		}
	}

	else
	{
		if (colPosition == emptyCol)
		{
			if (rowPosition > emptyRow)
			{
				for (k= emptyRow + 1; k < rowPosition; k++)
				{
					warehouse[k][emptyCol] = 3;
				}
			}

			else if (rowPosition < emptyRow)
			{
				for (k = rowPosition + 1; k < emptyRow; k++)
				{
					warehouse[k][emptyCol] = 3;
				}
			}
		}

		if (rowPosition == emptyRow)
		{
			if (colPosition > emptyCol)
			{
				for (l = emptyCol + 1; l < colPosition; l++)
				{
					warehouse[rowPosition][l] = 3;
				}
			}

			else if (colPosition < emptyCol)
			{
				for (l = colPosition + 1; l < emptyCol; l++)
				{
					warehouse[rowPosition][l] = 3;
				}
			}
		}
	}
}",1
jcla755,1695783443,1,"void PelletRoute(int warehouse[10][10]) //rows, col
{   
    // Find Pellet and Destination Location
    int pelletRow, pelletCol;
    int destRow, destCol;
    for(int row = 0; row<10; row++)
	{
		for(int col = 0; col<10; col++)
		{
			if(warehouse[row][col] == 1)
			{
				pelletRow = row;
				pelletCol = col;
			}
            else if(warehouse[row][col] == 2)
			{
				destRow = row;
				destCol = col;
			}
		}
	}

    int row,col;

    // Place Horizontal Path
    int horzDist = destCol - pelletCol;
    if(horzDist < 0)
    {
        for(col = pelletCol-1; col>=destCol; col--)
        {
            warehouse[pelletRow][col] = 3;
        }
    }
    else
    {
        for(col = pelletCol+1; col<=destCol; col++)
        {
            warehouse[pelletRow][col] = 3;
        }
    }",0
jcla755,1695783458,2,"void PelletRoute(int warehouse[10][10]) //rows, col
{   
    // Find Pellet and Destination Location
    int pelletRow, pelletCol;
    int destRow, destCol;
    for(int row = 0; row<10; row++)
	{
		for(int col = 0; col<10; col++)
		{
			if(warehouse[row][col] == 1)
			{
				pelletRow = row;
				pelletCol = col;
			}
            else if(warehouse[row][col] == 2)
			{
				destRow = row;
				destCol = col;
			}
		}
	}

    int row,col;

    // Place Horizontal Path
    int horzDist = destCol - pelletCol;
    if(horzDist < 0)
    {
        for(col = pelletCol-1; col>=destCol; col--)
        {
            warehouse[pelletRow][col] = 3;
        }
    }
    else
    {
        for(col = pelletCol+1; col<=destCol; col++)
        {
            warehouse[pelletRow][col] = 3;
        }
    }
}",0
jcla755,1695783723,3,"void PelletRoute(int warehouse[10][10]) //rows, col
{   
    // Find Pellet and Destination Location
    int pelletRow = 0;
    int pelletCol = 0;
    int destRow = 0;
    int destCol = 0;
    for(int row = 0; row<10; row++)
	{
		for(int col = 0; col<10; col++)
		{
			if(warehouse[row][col] == 1)
			{
				pelletRow = row;
				pelletCol = col;
			}
            else if(warehouse[row][col] == 2)
			{
				destRow = row;
				destCol = col;
			}
		}
	}

    int row = 0;
    int col = 0;

    // Place Horizontal Path
    int horzDist = destCol - pelletCol;
    if(horzDist < 0)
    {
        for(col = pelletCol-1; col>=destCol; col--)
        {
            warehouse[pelletRow][col] = 3;
        }
    }
    else
    {
        for(col = pelletCol+1; col<=destCol; col++)
        {
            warehouse[pelletRow][col] = 3;
        }
    }

    // Place Vertical Path
    int vertDist = destRow - pelletRow;
    if(vertDist < 0)
    {
        for(row = pelletRow-1; row>destRow; row--)
        {
            warehouse[row][pelletCol+horzDist] = 3;
        }
    }
    else
    {
        for(row = pelletRow+1; row<destRow; row++)
        {
            warehouse[row][pelletCol+horzDist] = 3;
        }
    }

}",0
jcla755,1695783877,4,"void PelletRoute(int warehouse[10][10]) //rows, col
{   
    // Find Pellet and Destination Location
    int pelletRow = 0;
    int pelletCol = 0;
    int destRow = 0;
    int destCol = 0;
    for(int row = 0; row<10; row++)
	{
		for(int col = 0; col<10; col++)
		{
			if(warehouse[row][col] == 1)
			{
				pelletRow = row;
				pelletCol = col;
			}
            else if(warehouse[row][col] == 2)
			{
				destRow = row;
				destCol = col;
			}
		}
	}

    int row = 0;
    int col = 0;

    // Place Horizontal Path
    int horzDist = destCol - pelletCol;
    if(horzDist < 0)
    {
        for(col = pelletCol-1; col>destCol; col--)
        {
            warehouse[pelletRow][col] = 3;
        }
    }
    else
    {
        for(col = pelletCol+1; col<=destCol; col++)
        {
            warehouse[pelletRow][col] = 3;
        }
    }

    // Place Vertical Path
    int vertDist = destRow - pelletRow;
    if(vertDist < 0)
    {
        for(row = pelletRow; row>destRow; row--)
        {
            warehouse[row][pelletCol+horzDist] = 3;
        }
    }
    else
    {
        for(row = pelletRow; row<destRow; row++)
        {
            warehouse[row][pelletCol+horzDist] = 3;
        }
    }

}",0
jcla755,1695783970,5,"void PelletRoute(int warehouse[10][10]) //rows, col
{   
    // Find Pellet and Destination Location
    int pelletRow = 0;
    int pelletCol = 0;
    int destRow = 0;
    int destCol = 0;
    for(int row = 0; row<10; row++)
	{
		for(int col = 0; col<10; col++)
		{
			if(warehouse[row][col] == 1)
			{
				pelletRow = row;
				pelletCol = col;
			}
            else if(warehouse[row][col] == 2)
			{
				destRow = row;
				destCol = col;
			}
		}
	}

    int row = 0;
    int col = 0;

    // Place Horizontal Path
    int horzDist = destCol - pelletCol;
    if(horzDist < 0)
    {
        for(col = pelletCol-1; col>destCol; col--)
        {
            warehouse[pelletRow][col] = 3;
        }
    }
    else
    {
        for(col = pelletCol+1; col<=destCol; col++)
        {
            warehouse[pelletRow][col] = 3;
        }
    }

    // Place Vertical Path
    int vertDist = destRow - pelletRow;
    if(vertDist < 0)
    {
        for(row = pelletRow; row>destRow; row--)
        {
            warehouse[row][pelletCol+horzDist] = 3;
        }
    }
    else
    {
        for(row = pelletRow; row<destRow; row++)
        {
            warehouse[row][pelletCol+horzDist] = 3;
        }
    }

    warehouse[pelletRow][pelletCol] = 1;
    warehouse[destRow][destCol] = 2;

}",1
jdu853,1695775399,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int rowStart = 0;
int colStart = 0;
int rowEnd = 0;
int colEnd = 0;

void PelletRoute(int warehouse[10][10]){
   // find starting value
   for (int i = 0; i < 10; i++){
      for (int j = 0; j < 10; j++){
         if (warehouse[i][j] == 1) {
            rowStart = i;
            colStart = j;
         } 
         
         else if (warehouse[i][j] == 2) {
               rowEnd = i;
               colEnd = j;
         }
      }   
   }

   int i = rowStart;
   int j = colStart;

// move horizontally
   while (j != colEnd) {
      if (j < colEnd) {
         j++;
      }
      else {
         j--;
      }

      if (warehouse[i][j] == 0) {
         warehouse[i][j] = 3;
      }
   }


// move vertically 
   while (i != rowEnd) {
      if (i < rowEnd) {
         i++;
      }
      else {
         i--;
      }

      if (warehouse[i][j] == 0) {
         warehouse[i][j] = 3;
      }
   }
}",1
jear460,1696235536,1,"#include <stdio.h>

#define ROWS 10
#define COLS 10

void FindPelletPositions(int warehouse[ROWS][COLS], int *row1, int *col1, int *row2, int *col2) {
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (warehouse[i][j] == 1) {
                *row1 = i;
                *col1 = j;
            } else if (warehouse[i][j] == 2) {
                *row2 = i;
                *col2 = j;
            }
        }
    }
}

void MovePelletRoute(int warehouse[ROWS][COLS], int row1, int col1, int row2, int col2) {
    if (col2 < col1) {
        for (int n = col1 - 1; n >= col2; n--) {
            if (warehouse[row1][n] != 2) {
                warehouse[row1][n] = 3;
            }
        }
    } else {
        for (int n = col1 + 1; n <= col2; n++) {
            if (warehouse[row1][n] != 2) {
                warehouse[row1][n] = 3;
            }
        }
    }

    if (row2 < row1) {
        for (int m = row1 - 1; m >= row2; m--) {
            if (warehouse[m][col2] != 2) {
                warehouse[m][col2] = 3;
            }
        }
    } else {
        for (int m = row1 + 1; m <= row2; m++) {
            if (warehouse[m][col2] != 2) {
                warehouse[m][col2] = 3;
            }
        }
    }
}

void PelletRoute(int warehouse[ROWS][COLS]) {
    int row1, row2, col1, col2;

    FindPelletPositions(warehouse, &row1, &col1, &row2, &col2);
    MovePelletRoute(warehouse, row1, col1, row2, col2);
}",1
jfet156,1696205675,1,"void PelletRoute(int warehouse[10][10]) {
    
    int rows;
    int cols;
    
    int pelletRow;
    int pelletCol;
    int destinationRow;
    int destinationCol;
    
    for (rows = 0; rows < 10; rows++) {
        for (cols = 0; cols < 10; cols++) {
            if (warehouse[rows][cols] == 1) {
                pelletRow = rows;
                pelletCol = cols;
            }
            if (warehouse[rows][cols] == 2) {
                destinationRow = rows;
                destinationCol = cols;
            }
        }
    }
    
    if (pelletCol > destinationCol) {   // if the pellet is to the right of its destination
        pelletCol = pelletCol - 1;
        while (pelletCol >= destinationCol) {
            if (warehouse[pelletRow][pelletCol] == 2) {
                return;
            }
            warehouse[pelletRow][pelletCol] = 3;
            pelletCol--;
        }
        
        if (pelletCol != destinationCol) 
        {
        pelletCol = pelletCol + 1;
        }
    }
    else if (pelletCol < destinationCol) {    // if the pellet is to the left
        pelletCol = pelletCol + 1;
        while (pelletCol <= destinationCol) {
            if (warehouse[pelletRow][pelletCol] == 2) {
                return;
            }
            warehouse[pelletRow][pelletCol] = 3;
            pelletCol++;
        }
        
        if (pelletCol != destinationCol) 
        {
        pelletCol = pelletCol - 1;
        }
    }
    

    
        if (pelletRow > destinationRow) {   // if the pellet is below the destination row
        pelletRow = pelletRow - 1;
        while (pelletRow > destinationRow) {
            warehouse[pelletRow][pelletCol] = 3;
            pelletRow--;
        }
    }
    else if ((pelletRow < destinationRow)) {    // if the pellet is above the destination row
        pelletRow = pelletRow + 1;
        while (pelletRow < destinationRow) {
            warehouse[pelletRow][pelletCol] = 3;
            pelletRow++;
        }
    }    
    
}

",1
jgol495,1695617535,1,"void PelletRoute(int arr[10][10]){
    int r_src, c_src;
    int r_dst, c_dst;
    int found = 0;
    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if(arr[i][j] == 1){
                r_src = i;
                c_src = j;
                found += 1;
            }else if(arr[i][j] == 2){
                r_dst = i;
                c_dst = j;
                found += 0x10;
            }
            if(found == 0x11){ break; }
        }
    }

    // Mark movement
    int direction = (c_src < c_dst) ? 1 : -1;
    for(int i = c_src; i != c_dst; i += direction){
        if(arr[r_src][i] == 0){
            arr[r_src][i] = 3;
        }
    }
    // Again for vertical
    direction = (r_src < r_dst) ? 1 : -1;
    for(int i = r_src; i != r_dst; i += direction){
        if(arr[i][c_dst] == 0){
            arr[i][c_dst] = 3;
        }
    }
}",1
jhwa027,1696159727,1,"#include <stdio.h>

#define ROWS 10
#define COLS 10

void PelletRoute(int warehouse[ROWS][COLS]) {
    int pelletRow, pelletCol, destRow, destCol;
    
    // Find the positions of the pellet and the destination.
    for(int i = 0; i < ROWS; i++) {
        for(int j = 0; j < COLS; j++) {
            if(warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if(warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    // Move the pellet horizontally first
    while(pelletCol != destCol) {
        if(pelletCol < destCol) pelletCol++;
        else pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }
    
    // Then move the pellet vertically
    while(pelletRow != destRow) {
        if(pelletRow < destRow) pelletRow++;
        else pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}

int main(void) {
    int warehouse[ROWS][COLS] = { 
      {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 2, 0, 0, 0, 0} 
    };
    
    PelletRoute(warehouse);

    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0
jhwa027,1696159738,2,"#include <stdio.h>

#define ROWS 10
#define COLS 10

void PelletRoute(int warehouse[ROWS][COLS]) {
    int pelletRow, pelletCol, destRow, destCol;
    
    // Find the positions of the pellet and the destination.
    for(int i = 0; i < ROWS; i++) {
        for(int j = 0; j < COLS; j++) {
            if(warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if(warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    // Move the pellet horizontally first
    while(pelletCol != destCol) {
        if(pelletCol < destCol) pelletCol++;
        else pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }
    
    // Then move the pellet vertically
    while(pelletRow != destRow) {
        if(pelletRow < destRow) pelletRow++;
        else pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
jhwa027,1696159842,3,"void PelletRoute(int warehouse[ROWS][COLS]) {
    int pelletRow, pelletCol, destRow, destCol;
    
    // Find the positions of the pellet and the destination.
    for(int i = 0; i < ROWS; i++) {
        for(int j = 0; j < COLS; j++) {
            if(warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if(warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    // Move the pellet horizontally first
    while(pelletCol != destCol) {
        if(pelletCol < destCol) pelletCol++;
        else pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }
    
    // Then move the pellet vertically but stop just before reaching the destination
    while(pelletRow != destRow) {
        if(pelletRow < destRow && pelletRow + 1 != destRow) pelletRow++;
        else if(pelletRow > destRow && pelletRow - 1 != destRow) pelletRow--;
        else break;
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
jjos057,1696165860,1,"void PelletRoute(int warehouse[10][10]) {
    
    int pelletRow;
    int pelletCol;
    
    int destinationRow;
    int destinationCol;
    
    int i;
    int j;
    for ( i = 0; i < 10; i++) {
        for ( j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
        }
    }
            
    for ( i = 0; i < 10; i++) {
        for ( j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }
    
    //fill 3s in cols (horizontally)
    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }

    //fill 3s in rows (vertically)
    while (pelletRow != destinationRow) {
        if (pelletRow < destinationRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
}",1
jjun879,1696070464,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    // Find the coordinates of the start and the end
    int startRow, startCol, endRow, endCol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startRow = i;
                startCol = j;
            }
            if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    // Horizontal move
    while (startCol != endCol) {
        if (startCol < endCol) {
            startCol++;
        }
        else {
            startCol--;
        }
        warehouse[startRow-1][startCol] = 3; // Mark the route with 3
    }

    // Vertical move
    while (startRow != endRow) {
        if (startRow < endRow) {
            startRow++;
        }
        else {
            startRow--;
        }
        warehouse[startRow-1][startCol] = 3; // Mark the route with 3
    }
}",0
jjun879,1696070780,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    // Find the coordinates of the start and the end
    int startRow, startCol, endRow, endCol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startRow = i;
                startCol = j;
            }
            if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    // Horizontal move
    while (startCol != endCol) {
        if (startCol < endCol) {
            startCol++;
        }
        else {
            startCol--;
        }
        warehouse[startRow][startCol] = 3; // Mark the route with 3
    }

    // Vertical move
    while (startRow != endRow) {
        if (startRow < endRow) {
            startRow++;
        }
        else {
            startRow--;
        }
        warehouse[startRow][startCol] = 3; // Mark the route with 3
    }
    // Keep the End value as 2
    warehouse[endRow][endCol] = 2;
}",1
jkah253,1695987671,1,"void PelletRoute(int warehouse[10][10]) {
    
    // find row and col of the 1 and 2
    int one_col, one_row, two_col, two_row;
    int og_one_row, og_one_col, og_two_row, og_two_col;
    int LR, UD;


    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                one_row = i;
                og_one_row = i;
                one_col = j;
                og_one_col = j;
            }
            else if (warehouse[i][j] == 2) {
                two_row = i;
                og_two_row = i;
                two_col = j;
                og_two_col = j;
            }
        }
    }

    // move horizontally
    while (one_col != two_col) {
        warehouse[one_row][one_col] = 3;
        // move left
        if (one_col > two_col) {
            one_col--;
        }
        // move right
        else {
            one_col++;
        }
    }

    // move vertically
    while (one_row != two_row) {
        warehouse[one_row][one_col] = 3;
        // move up
        if (one_row > two_row) {
            one_row--;
        }
        // move down
        else {
            one_row++;
        }
    }

    // set 1 and 2 back
    warehouse[og_one_row][og_one_col] = 1;
    warehouse[og_two_row][og_two_col] = 2;
}
",0
jkah253,1695987919,2,"
void PelletRoute(int warehouse[10][10]) {
    
    // find row and col of the 1 and 2
    int one_col, one_row, two_col, two_row;
    int og_one_row, og_one_col, og_two_row, og_two_col;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                one_row = i;
                og_one_row = i;
                one_col = j;
                og_one_col = j;
            }
            else if (warehouse[i][j] == 2) {
                two_row = i;
                og_two_row = i;
                two_col = j;
                og_two_col = j;
            }
        }
    }

    // move horizontally
    while (one_col != two_col) {
        warehouse[one_row][one_col] = 3;
        // move left
        if (one_col > two_col) {
            one_col--;
        }
        // move right
        else {
            one_col++;
        }
    }

    // move vertically
    while (one_row != two_row) {
        warehouse[one_row][one_col] = 3;
        // move up
        if (one_row > two_row) {
            one_row--;
        }
        // move down
        else {
            one_row++;
        }
    }

    // set 1 and 2 back
    warehouse[og_one_row][og_one_col] = 1;
    warehouse[og_two_row][og_two_col] = 2;
}
",1
jkan172,1696243184,1,"#include <stdio.h>

PelletRoute(int warehouse[][]) {
    int i, j;
    int row, column;
    int row1, column1;
    int row2, column2;
    
    for (i = 0; i < row; i++) {
        for (j = 0; j < column; j++) {
            if (warehouse[i][j] == 1) { 
                row1 = i;
                column1 = j;
            }
            
        }
    }
    
 for (i = 0; i < row; i++) {
        for (j = 0; j < column; j++) {
            if (warehouse[i][j] == 2) { 
                row2 = i;
                column2 = j;
            }
            
        }
    }


for (i=0; i <= row; i++) {
    for (j = 0; j <= column; j++) {
        row2 - row1 = 3;
        column2 - column1 = 3;
    }
}",0
jkim828,1695876396,1,"void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int y1, x1, y2, x2;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                y1 = i;
                x1 = j;
            }
        }
    }

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                y2 = i;
                x2 = j;
            }
        }
    }

    if (x2 > x1) { //if 2 is on the right side
        // horizontal 3s to the right
        int j;
        for (j = (x1 + 1); j <= x2; j++) {
            warehouse[y1][j] = 3;
        }

        // if y1 and y2 are equal
        if (y1 == y2) {
            warehouse[y2][x2] = 2;
            return;
        }

        // if y2 is lower(dimensionally) than y1
        if (y1 < y2) {
            int i;
            for (i = (y1 + 1); i < y2; i++) {
                warehouse[i][x2] = 3;
            }
        }    

        // if y2 is higher(dimensionally) than y1
        if (y1 > y2) {
            int i;
            for (i = (y1 - 1); i > y2; i--) {
                warehouse[i][x2] = 3;
            }
        }
    }

    if (x2 < x1) { //if 2 is on the left side
        // horizontal 3s to the left
        int j;
        for (j = (x1 - 1); j >= x2; j--) {
            warehouse[y1][j] = 3;
        }

        // if y1 and y2 are equal
        if (y1 == y2) {
            warehouse[y2][x2] = 2;
            return;
        }

        // if y2 is lower(dimensionally) than y1
        if (y1 < y2) {
            int i;
            for (i = (y1 + 1); i < y2; i++) {
                warehouse[i][x2] = 3;
            }
        }    

        // if y2 is higher(dimensionally) than y1
        if (y1 > y2) {
            int i;
            for (i = (y1 - 1); i > y2; i--) {
                warehouse[i][x2] = 3;
            }
        }
    }

    if (x2 == x1) { // if 2 and 1 is on the same column
        // if y2 is lower(dimensionally) than y1
        if (y1 < y2) {
            int i;
            for (i = (y1 + 1); i < y2; i++) {
                warehouse[i][x2] = 3;
            }
        }    

        // if y2 is higher(dimensionally) than y1
        if (y1 > y2) {
            int i;
            for (i = (y1 - 1); i > y2; i--) {
                warehouse[i][x2] = 3;
            }
        }
    }

}",1
jkim960,1695957172,1,"void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
  
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
                
            }
        }
    }

    for (int j = 0; j < destCol; j++) {
        if ((pelletCol < j) && (j< destCol)) {
            warehouse[pelletRow][j] = 3;
        } 
        else {
            warehouse[pelletRow][j] = 0;
        }
    
    }

    for (int i = 0; i < destRow; i++) {
        if ((pelletRow < i) && (i < destRow)) {
            warehouse[i][destCol] = 3;
        }
        else if (pelletRow == i) {
            warehouse[i][destCol] = 3;
        }
        else {
            warehouse[i][destCol] = 0;
        }
        
    }
    
    warehouse[pelletRow][pelletCol] = 1;
    warehouse[destRow][destCol] = 2;
}",0
jkim960,1695958801,2,"void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally
    for (int j = 0; j < 10; j++) {
        if (pelletCol < destCol) {
            if (pelletCol <= j && j <= destCol) {
                warehouse[pelletRow][j] = 3;
            } 
            else {
                warehouse[pelletRow][j] = 0;
            }
        } 
        else {
            if (destCol <= j && j <= pelletCol) {
                warehouse[pelletRow][j] = 3;
            }
            else {
                warehouse[pelletRow][j] = 0;
            }
        }
    }

    // Move vertically
    for (int i = 0; i < 10; i++) {
        if (pelletRow < destRow) {
            if (pelletRow <= i && i <= destRow) {
                warehouse[i][destCol] = 3;
            }
            else {
                warehouse[i][destCol] = 0;
            }
        } 
        else {
            if (destRow <= i && i <= pelletRow) {
                warehouse[i][destCol] = 3;
            }
            else {
                warehouse[i][destCol] = 0;
            }
        }
    }

    // Update the positions of pellet and destination
    warehouse[pelletRow][pelletCol] = 1;
    warehouse[destRow][destCol] = 2;
}",1
jlah077,1696209956,1,"void PelletRoute(int warehouse[10][10])
{
    int startRow, startCol, endRow, endCol, rowIncrement, colIncrement, row, col;
    int *space;
    for (row = 0; row <= 9; row++)
    {
        for (col = 0; col <= 9; col++)
        {
            //printf(""%d "", warehouse[row][col]);
            if (warehouse[row][col] == 1)
            {
                startRow = row;
                startCol = col;
            }
            if (warehouse[row][col] == 2)
            {
                printf(""row = %d, col = %d, warehouse[row][col] = %d\n"", row, col, warehouse[row][col]);
                endRow = row;
                endCol = col;
            }
        }
    }
printf(""startRow = %d, startCol = %d, endRow = %d, endCol = %d\n"", startRow, startCol, endRow, endCol);
    if (endRow > startRow) {rowIncrement = 1;} else {rowIncrement = -1;};
    if (endCol > startCol) {colIncrement = 1;} else {colIncrement = -1;};
    col = startCol + colIncrement;
    row = startRow + rowIncrement;
    while (col != endCol + 1)
    {
        space = *(warehouse + startRow) + col;
        *space = 3;
        col += colIncrement;
    }
    while (row != endRow)
    {
        space = *(warehouse + row) + endCol;
        *space = 3;
        row += rowIncrement;
    }
}",0
jlah077,1696210076,2,"void PelletRoute(int warehouse[10][10])
{
    int startRow, startCol, endRow, endCol, rowIncrement, colIncrement, row, col;
    int *space;
    for (row = 0; row <= 9; row++)
    {
        for (col = 0; col <= 9; col++)
        {
            if (warehouse[row][col] == 1)
            {
                startRow = row;
                startCol = col;
            }
            if (warehouse[row][col] == 2)
            {
                printf(""row = %d, col = %d, warehouse[row][col] = %d\n"", row, col, warehouse[row][col]);
                endRow = row;
                endCol = col;
            }
        }
    }
    if (endRow > startRow) {rowIncrement = 1;} else {rowIncrement = -1;};
    if (endCol > startCol) {colIncrement = 1;} else {colIncrement = -1;};
    col = startCol + colIncrement;
    row = startRow + rowIncrement;
    while (col != endCol + colIncrement)
    {
        space = *(warehouse + startRow) + col;
        *space = 3;
        col += colIncrement;
    }
    while (row != endRow)
    {
        space = *(warehouse + row) + endCol;
        *space = 3;
        row += rowIncrement;
    }
}",0
jlah077,1696210096,3,"void PelletRoute(int warehouse[10][10])
{
    int startRow, startCol, endRow, endCol, rowIncrement, colIncrement, row, col;
    int *space;
    for (row = 0; row <= 9; row++)
    {
        for (col = 0; col <= 9; col++)
        {
            if (warehouse[row][col] == 1)
            {
                startRow = row;
                startCol = col;
            }
            if (warehouse[row][col] == 2)
            {
                endRow = row;
                endCol = col;
            }
        }
    }
    if (endRow > startRow) {rowIncrement = 1;} else {rowIncrement = -1;};
    if (endCol > startCol) {colIncrement = 1;} else {colIncrement = -1;};
    col = startCol + colIncrement;
    row = startRow + rowIncrement;
    while (col != endCol + colIncrement)
    {
        space = *(warehouse + startRow) + col;
        *space = 3;
        col += colIncrement;
    }
    while (row != endRow)
    {
        space = *(warehouse + row) + endCol;
        *space = 3;
        row += rowIncrement;
    }
}",0
jlah077,1696210741,4,"void PelletRoute(int warehouse[10][10])
{
    int startRow, startCol, endRow, endCol, rowIncrement, colIncrement, row, col;
    int *space;
    for (row = 0; row <= 9; row++)
    {
        for (col = 0; col <= 9; col++)
        {
            if (warehouse[row][col] == 1)
            {
                startRow = row;
                startCol = col;
            }
            if (warehouse[row][col] == 2)
            {
                endRow = row;
                endCol = col;
            }
        }
    }
    if (endRow > startRow) {rowIncrement = 1;} else {rowIncrement = -1;};
    if (endCol > startCol) {colIncrement = 1;} else {colIncrement = -1;};
    col = startCol + colIncrement;
    row = startRow;
    while (col != endCol + colIncrement && warehouse[row][col] != 2)
    {
        space = *(warehouse + startRow) + col;
        *space = 3;
        col += colIncrement;
    }
    while (row != endRow)
    {
        space = *(warehouse + row) + endCol;
        *space = 3;
        row += rowIncrement;
    }
}",0
jlah077,1696211360,5,"void PelletRoute(int warehouse[10][10])
{
    int startRow, startCol, endRow, endCol, rowIncrement, colIncrement, row, col;
    int *space;
    for (row = 0; row <= 9; row++)
    {
        for (col = 0; col <= 9; col++)
        {
            if (warehouse[row][col] == 1)
            {
                startRow = row;
                startCol = col;
            }
            if (warehouse[row][col] == 2)
            {
                endRow = row;
                endCol = col;
            }
        }
    }
    if (endRow > startRow) {rowIncrement = 1;} else {rowIncrement = -1;};
    if (endCol > startCol) {colIncrement = 1;} else {colIncrement = -1;};
    col = startCol + colIncrement;
    row = startRow;
    while (col != endCol + colIncrement)
    {
        space = *(warehouse + startRow) + col;
        *space = 3;
        col += colIncrement;
    }
    while (row != endRow)
    {
        space = *(warehouse + row) + endCol;
        *space = 3;
        row += rowIncrement;
    }
    space = *(warehouse + startRow) + startCol;
    *space = 1;
    space = *(warehouse + endRow) + endCol;
    *space = 2;
}",1
jlal056,1695868668,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
int oner, onec, twor, twoc, k, i, j;
twor = 0;
twoc = 0;
oner = 0;
onec = 0;

		for (i=0; i<10 ;i++) {
			for (j=0; j<10 ; j++) {
				if (warehouse[i][j] == 1) {
					oner = i;
					onec = j;
				}
			}
		}

		for (i=0; i<10 ;i++) {
			for (j=0; j<10 ; j++) {
				if (warehouse[i][j] == 2) {
					twor = i;
					twoc = j;
				}
			}
		}

		// move horizontally first (left or right)

		if (onec > twoc) {
			for(k=twoc+1;k<onec;k++) {
				warehouse[oner][k]=3;
			}
		}

		if (twoc > onec) {
			for(k=onec+1;k<twoc;k++) {
				warehouse[oner][k]=3;
			}
		}



		// move vertically second (up or down)

		if (oner > twor) {
			for(k=twor+1;k<oner;k++) {
				warehouse[k][twoc]=3;
			}
		}

		if (twor > oner) {
			for(k=oner+1;k<twor;k++) {
				warehouse[k][twoc]=3;
			}
		}

		//fill in the gap
		if ((onec != twoc)&&(oner != twor)) {
			warehouse[oner][twoc] = 3;
		}

}
",1
jli876,1695689027,1,"void PelletRoute(int warehouse[10][10]) {
    int posArray[4];
    for (int i = 1; i < 3; i++) for (int x = 0; x < 10; x++) for (int y = 0; y < 10; y++) warehouse[y][x] == i ? posArray[i * 2 - 2] = x, posArray[i * 2 - 1] = y : 0;
    if (posArray[0] < posArray[2]) {
        for (int x_step = posArray[0] + 1; x_step < posArray[2] + 1; x_step++) warehouse[posArray[1]][x_step] = 3;
        
    } else {
        for (int x_step = posArray[0] - 1; x_step > posArray[2] - 1; x_step--) warehouse[posArray[1]][x_step] = 3;
    }
    if (posArray[1] < posArray[3]) {
        for (int y_step = posArray[1] + 1; y_step < posArray[3]; y_step++) warehouse[y_step][posArray[2]] = 3;
    } else {
        for (int y_step = posArray[1] - 1; y_step > posArray[3]; y_step--) warehouse[y_step][posArray[2]] = 3;
    }
}",0
jli876,1695689141,2,"void PelletRoute(int warehouse[10][10]) {
    int posArray[4];
    for (int i = 1; i < 3; i++) for (int x = 0; x < 10; x++) for (int y = 0; y < 10; y++) warehouse[y][x] == i ? posArray[i * 2 - 2] = x, posArray[i * 2 - 1] = y : 0;
    if (posArray[0] < posArray[2]) {
        for (int x_step = posArray[0] + 1; x_step < posArray[2] + 1; x_step++) warehouse[posArray[1]][x_step] = 3;
        
    } else {
        for (int x_step = posArray[0] - 1; x_step > posArray[2]; x_step--) warehouse[posArray[1]][x_step] = 3;
    }
    if (posArray[1] < posArray[3]) {
        for (int y_step = posArray[1] + 1; y_step < posArray[3]; y_step++) warehouse[y_step][posArray[2]] = 3;
    } else {
        for (int y_step = posArray[1]; y_step > posArray[3]; y_step--) warehouse[y_step][posArray[2]] = 3;
    }
}",0
jli917,1696229543,1,"
void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the positions of the pellet (1) and destination (2)
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally (left or right) until pellet lines up with destination
    while (pelletCol != destCol) {
        // Move left
        if (pelletCol > destCol) {
            warehouse[pelletRow][pelletCol] = 3;
            pelletCol--;
        }
        // Move right
        else {
            warehouse[pelletRow][pelletCol] = 3;
            pelletCol++;
        }
    }

    // Move vertically (up or down) until pellet reaches the destination
    while (pelletRow != destRow) {
        // Move up
        if (pelletRow > destRow) {
            warehouse[pelletRow][pelletCol] = 3;
            pelletRow--;
        }
        // Move down
        else {
            warehouse[pelletRow][pelletCol] = 3;
            pelletRow++;
        }
    }
}
",0
jlia486,1695974533,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the positions of the pellet (1) and destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            }
            if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Move horizontally (left or right) to line up with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        // Mark the path with 3 to indicate the route
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move vertically (up or down) to reach the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        // Mark the path with 3 to indicate the route
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
jlia486,1695975040,2,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the positions of the pellet (1) and destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            }
            if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Move horizontally (left or right) to line up with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        // Mark the path with 3 to indicate the route, except for the destination
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }

    // Move vertically (up or down) to reach the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        // Mark the path with 3 to indicate the route, except for the destination
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
}
",1
jlia948,1696244265,1,"#include <stdio.h>

#define ROWS 10
#define COLS 10

void FindTile(int warehouse[ROWS][COLS], int value, int *rowPos, int *colPos) 
{
    for (int i = 0; i < ROWS; i++) 
    {
        for (int j = 0; j < COLS; j++) 
        {
            if (warehouse[i][j] == value) 
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}

void PelletRoute(int warehouse[ROWS][COLS]) 
{
    int pelletRow, pelletCol;
    int destRow, destCol;

    FindTile(warehouse, 1, &pelletRow, &pelletCol);
    FindTile(warehouse, 2, &destRow, &destCol);

    while (pelletCol != destCol) 
    {
        if (pelletCol < destCol) 
        {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow) 
    {
        if (pelletRow < destRow) 
        {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    warehouse[destRow][destCol] = 2;
}",1
jliu778,1695866260,1,"int PelletRoute(int A[10][10])
{
	int pos11, pos12,pos21,pos22,B,BB;
	for ( int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (A[i][j]==1)
			{
				
				pos11=i;
				pos12=j;
			}
			if (A[i][j]==2)
			{
				pos21=i;
				pos22=j;
			}
			
			
		}	
	}
	B=pos22-pos12;
	BB=pos21-pos11;
	if (B<0)
	{
		B=-B;
	}
	if (BB<0)
	{
		BB=-BB;
	}
	if (pos22>pos12)
	{
		for (int i = 0; i < B; i++)
	{
		A[pos11][pos12+i+1]=3;
	}
	}else
	{
		for (int i = 0; i < B; i++)
	{
		A[pos11][pos12-i-1]=3;
	}
	}
	
	if (pos11>pos21)
	{
		for (int i = 0; i < BB; i++)
	{
		A[pos21+i+1][pos22]=3;
	}
	}else
	{
		for (int i = 0; i < BB; i++)
	{
		A[pos21-i-1][pos22]=3;
	}
	}
	
	return(A[10][10]);

}",0
jliu778,1696016385,2,"int PelletRoute(int A[10][10])
{
	int pos11, pos12,pos21,pos22,B,BB;
	for ( int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (A[i][j]==1)
			{
				
				pos11=i;
				pos12=j;
			}
			if (A[i][j]==2)
			{
				pos21=i;
				pos22=j;
			}
			
			
		}	
	}
	B=pos22-pos12;
	BB=pos21-pos11;
	if (B<0)
	{
		B=-B;
	}
	if (BB<0)
	{
		BB=-BB;
	}
	B=B;
	BB=BB;
	if (pos22>pos12)
	{
		for (int i = 0; i < B; i++)
	{
		A[pos11][pos12+i+1]=3;
	}
	}else
	{
		for (int i = 0; i < B; i++)
	{
		A[pos11][pos12-i-1]=3;
	}
	}
	
	if (pos11>pos21)
	{
		for (int i = 0; i < BB; i++)
	{
		A[pos21+i+1][pos22]=3;
	}
	}else
	{
		for (int i = 0; i < BB; i++)
	{
		A[pos21-i-1][pos22]=3;
	}
	}
	A[pos11][pos12]=1;
	A[pos21][pos22]=2;
	

	printf(""%d %d %d %d \n"",pos11,pos12,pos21,pos22);
	

	return(A[10][10]);

}",0
jliu778,1696016411,3,"int PelletRoute(int A[10][10])
{
	int pos11, pos12,pos21,pos22,B,BB;
	for ( int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (A[i][j]==1)
			{
				
				pos11=i;
				pos12=j;
			}
			if (A[i][j]==2)
			{
				pos21=i;
				pos22=j;
			}
			
			
		}	
	}
	B=pos22-pos12;
	BB=pos21-pos11;
	if (B<0)
	{
		B=-B;
	}
	if (BB<0)
	{
		BB=-BB;
	}
	B=B;
	BB=BB;
	if (pos22>pos12)
	{
		for (int i = 0; i < B; i++)
	{
		A[pos11][pos12+i+1]=3;
	}
	}else
	{
		for (int i = 0; i < B; i++)
	{
		A[pos11][pos12-i-1]=3;
	}
	}
	
	if (pos11>pos21)
	{
		for (int i = 0; i < BB; i++)
	{
		A[pos21+i+1][pos22]=3;
	}
	}else
	{
		for (int i = 0; i < BB; i++)
	{
		A[pos21-i-1][pos22]=3;
	}
	}
	A[pos11][pos12]=1;
	A[pos21][pos22]=2;
	return(A[10][10]);

}",1
jluo379,1695889876,1,"void PelletRoute(int warehouse[ROWS][COLS]) {
    int pelletRow = -1, pelletCol = -1;
    int destRow = -1, destCol = -1;

    // Find the positions of the pellet (1) and destination (2)
    for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col < COLS; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Calculate horizontal movement (left or right) and mark the route
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Calculate vertical movement (up or down) and mark the route
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
jluo379,1695889941,2,"void PelletRoute(int warehouse[ROWS][COLS]) {
    int ROWS, COLS;
    int pelletRow = -1, pelletCol = -1;
    int destRow = -1, destCol = -1;

    // Find the positions of the pellet (1) and destination (2)
    for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col < COLS; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Calculate horizontal movement (left or right) and mark the route
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Calculate vertical movement (up or down) and mark the route
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
jluo379,1695890003,3,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow = -1, pelletCol = -1;
    int destRow = -1, destCol = -1;

    // Find the positions of the pellet (1) and destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Calculate horizontal movement (left or right) and mark the route
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Calculate vertical movement (up or down) and mark the route
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
jluo379,1695890121,4,"void PelletRoute(int warehouse[10][10]) {
    int workerRow = -1, workerCol = -1;
    int boxRow = -1, boxCol = -1;

    // Find the positions of the worker (1) and the box (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                workerRow = row;
                workerCol = col;
            } else if (warehouse[row][col] == 2) {
                boxRow = row;
                boxCol = col;
            }
        }
    }

    // Calculate horizontal movement (left or right) and mark the route
    while (workerCol != boxCol) {
        if (workerCol < boxCol) {
            workerCol++;
        } else {
            workerCol--;
        }
        warehouse[workerRow][workerCol] = 3;
    }

    // Calculate vertical movement (up or down) and mark the route
    while (workerRow != boxRow) {
        if (workerRow < boxRow) {
            workerRow++;
        } else {
            workerRow--;
        }
        warehouse[workerRow][workerCol] = 3;
    }
}",0
jluo379,1695890308,5,"void PelletRoute(int warehouse[10][10]) {
    int workerRow = -1, workerCol = -1;
    int boxRow = -1, boxCol = -1;

    // Find the positions of the worker (1) and the box (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                workerRow = row;
                workerCol = col;
            } else if (warehouse[row][col] == 2) {
                boxRow = row;
                boxCol = col;
            }
        }
    }

    // Calculate horizontal movement (left or right) and mark the route
    while (workerCol != boxCol) {
        if (workerCol < boxCol) {
            workerCol++;
        } else {
            workerCol--;
        }
        if (warehouse[workerRow][workerCol] != 2) {
            warehouse[workerRow][workerCol] = 3;
        }
    }

    // Calculate vertical movement (up or down) and mark the route
    while (workerRow != boxRow) {
        if (workerRow < boxRow) {
            workerRow++;
        } else {
            workerRow--;
        }
        if (warehouse[workerRow][workerCol] != 2) {
            warehouse[workerRow][workerCol] = 3;
        }
    }
}",1
jmei608,1696168466,1,Peanut,0
jmei608,1696168508,2,"int main(void) {
int i;
}",0
jmil737,1695853444,1,"
#include <stdio.h>

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]){
    int row1;
    int row2;
    int col1;
    int col2;
    
    for (int i = 0; i < 10; i++){
    
    
    for (int j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 1){
    
        row1 = i;
        col1 = j;
       
    }
    
    }
}
 
  for (int i = 0; i < 10; i++){
    
    
    for (int j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 2){
    
        row2 = i;
        col2 = j;
       
    }
    
    }
}

int a = 0;

while (a == 0){
if (row1 == row2){
 
 for (int i = row1; i <= row1; i++){
    
    
    for (int j = col1 + 1; j < col2; j++){
        
    warehouse[i][j] = 3;
    }
    
    } 
a++;    
break;    
}


if (col1 == col2){
    
    for (int i = row1 + 1; i < row2; i++){
    
    
    for (int j = col2; j <= col2; j++){
        
    warehouse[i][j] = 3;
    
    }
    
    }
a++;    
break;
}
    
for (int i = row1; i <= row1; i++){
    
    
    for (int j = col1 + 1; j <= col2; j++){
        
    warehouse[i][j] = 3;
    }
    a++;
    }

    
for (int i = row1; i < row2; i++){
    
    
    for (int j = col2; j <= col2; j++){
        
    warehouse[i][j] = 3;
    
    }
    a++;
    }
}

}   
  
",0
jmil737,1695853521,2,"
#include <stdio.h>

void PelletRoute(int warehouse[10][10]){
    int row1;
    int row2;
    int col1;
    int col2;
    
    for (int i = 0; i < 10; i++){
    
    
    for (int j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 1){
    
        row1 = i;
        col1 = j;
       
    }
    
    }
}
 
  for (int i = 0; i < 10; i++){
    
    
    for (int j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 2){
    
        row2 = i;
        col2 = j;
       
    }
    
    }
}

int a = 0;

while (a == 0){
if (row1 == row2){
 
 for (int i = row1; i <= row1; i++){
    
    
    for (int j = col1 + 1; j < col2; j++){
        
    warehouse[i][j] = 3;
    }
    
    } 
a++;    
break;    
}


if (col1 == col2){
    
    for (int i = row1 + 1; i < row2; i++){
    
    
    for (int j = col2; j <= col2; j++){
        
    warehouse[i][j] = 3;
    
    }
    
    }
a++;    
break;
}
    
for (int i = row1; i <= row1; i++){
    
    
    for (int j = col1 + 1; j <= col2; j++){
        
    warehouse[i][j] = 3;
    }
    a++;
    }

    
for (int i = row1; i < row2; i++){
    
    
    for (int j = col2; j <= col2; j++){
        
    warehouse[i][j] = 3;
    
    }
    a++;
    }
}

}   

",0
jmil737,1695865918,3,"
#include <stdio.h>

void PelletRoute(int warehouse[10][10]){
    int row1;
    int row2;
    int col1;
    int col2;
    int i;
    int j;
    
    for ( i = 0; i < 10; i++){
    
    
    for ( j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 1){
    
        row1 = i;
        col1 = j;
        
       
    }
    
    }
}
 
  for ( i = 0; i < 10; i++){
    
    
    for ( j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 2){
    
        row2 = i;
        col2 = j;
      
    }
    
    }
}

int a = 0;

while (a == 0){
if ((row1 == row2) && (col2 > col1)){
 
 for ( i = row1; i <= row1; i++){
    
    
    for ( j = col1 + 1; j < col2; j++){
        
    warehouse[i][j] = 3;
    }
    
    } 
a++;    
break;    
}


if ((col1 == col2) && (row2 > row1)){
    
    for ( i = row1 + 1; i < row2; i++){
    
    
    for ( j = col2; j <= col2; j++){
    
    warehouse[i][j] = 3;
    
    }
    
    }
a++;    
break;
}


 if ((col1 > col2) && (row1 > row2)){   
for ( i = row1; i <= row1; i++){
    
    
    for ( j = col1 - 1; j > col2; j--){
        
    warehouse[i][j] = 3;
    }
    a++;
    }

    
for ( i = row1; i > row2; i--){
    
    
    for ( j = col2; j <= col2; j++){
        
    warehouse[i][j] = 3;
    
    }
    a++;
    }
 }    


if ((row1 == row2) && (col1 > col2)){
 
 for ( i = row1; i <= row1; i++){
    
    
    for ( j = col1 - 1; j > col2; j--){
        
    warehouse[i][j] = 3;
    }
    
    } 
a++;    
break;    
} 

int i;
int j;

if(col1 == col2 && row1 > row2){

for (i = row1 -1; i > row2; i--){
    
    for (j = col1; j <= col1; j++){
        
        warehouse[i][j] = 3;
        
    }
    
    
}
a++;
break;
}  


if(col2 > col1 && row1 > row2){    
for ( i = row1; i > row2; i--){
    
    for ( j = col1 + 1; j <= col2; j++){
        
    warehouse[i][j] = 3;
    }
    
    }
    a++;
    break;
}

if(col2 > col1 && row2 > row1){    
for ( i = row1 + 1; i <= row2; i++){
    
    for ( j = col1; j < col2; j++){
        
    warehouse[i][j] = 3;
    }
    
    }
    a++;
    break;
}


if(col1 > col2 && row2 > row1){    
for ( i = row1 + 1; i <= row2; i++){
    
    for ( j = col1; j > col2; j--){
        
    warehouse[i][j] = 3;
    }
    
    }
    a++;
    break;
}



}  

}",0
jmil737,1695866804,4,"
#include <stdio.h>

void PelletRoute(int warehouse[10][10]){
    int row1;
    int row2;
    int col1;
    int col2;
    int i;
    int j;
    
    for ( i = 0; i < 10; i++){
    
    
    for ( j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 1){
    
        row1 = i;
        col1 = j;
        
       
    }
    
    }
}
 
  for ( i = 0; i < 10; i++){
    
    
    for ( j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 2){
    
        row2 = i;
        col2 = j;
      
    }
    
    }
}

int a = 0;

while (a == 0){
if ((row1 == row2) && (col2 > col1)){
 
 for ( i = row1; i <= row1; i++){
    
    
    for ( j = col1 + 1; j < col2; j++){
        
    warehouse[i][j] = 3;
    }
    
    } 
a++;    
break;    
}


if ((col1 == col2) && (row2 > row1)){
    
    for ( i = row1 + 1; i < row2; i++){
    
    
    for ( j = col2; j <= col2; j++){
    
    warehouse[i][j] = 3;
    
    }
    
    }
a++;    
break;
}


 if ((col1 > col2) && (row1 > row2)){   
for ( i = row1; i <= row1; i++){
    
    
    for ( j = col1 - 1; j > col2; j--){
        
    warehouse[i][j] = 3;
    }
    a++;
    }

    
for ( i = row1; i > row2; i--){
    
    
    for ( j = col2; j <= col2; j++){
        
    warehouse[i][j] = 3;
    
    }
    a++;
    }
 }    


if ((row1 == row2) && (col1 > col2)){
 
 for ( i = row1; i <= row1; i++){
    
    
    for ( j = col1 - 1; j > col2; j--){
        
    warehouse[i][j] = 3;
    }
    
    } 
a++;    
break;    
} 

int i;
int j;

if(col1 == col2 && row1 > row2){

for (i = row1 -1; i > row2; i--){
    
    for (j = col1; j <= col1; j++){
        
        warehouse[i][j] = 3;
        
    }
    
    
}
a++;
break;
}  


if(col2 > col1 && row1 > row2){    
for ( i = row1; i > row2; i--){
    
    for ( j = col1 + 1; j <= col2; j++){
        
   if (i == row1 || j ==col2){
    warehouse[i][j] = 3;
   }
    }
    
    }
    a++;
}

if(col2 > col1 && row2 > row1){    
for ( i = row1 + 1; i <= row2; i++){
    
    for ( j = col1; j < col2; j++){
        
      if (i == row2 || j ==col1){
    warehouse[i][j] = 3;
   } 
    
    }
    
    }
    a++;
    break;
}


if(col1 > col2 && row2 > row1){    
for ( i = row1 + 1; i <= row2; i++){
    
    for ( j = col1; j > col2; j--){
      
      if (i == row2 || j ==col1){
    warehouse[i][j] = 3;
   } 
        
    }
    
    }
    a++;
    break;
}



}  

}",0
jmil737,1695867631,5,"
#include <stdio.h>

void PelletRoute(int warehouse[10][10]){
    int row1;
    int row2;
    int col1;
    int col2;
    int i;
    int j;
    
    for ( i = 0; i < 10; i++){
    
    
    for ( j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 1){
    
        row1 = i;
        col1 = j;
        
       
    }
    
    }
}
 
  for ( i = 0; i < 10; i++){
    
    
    for ( j = 0; j < 10; j++){
        
    if (warehouse[i][j] == 2){
    
        row2 = i;
        col2 = j;
      
    }
    
    }
}

int a = 0;

while (a == 0){
    
if ((row1 == row2) && (col2 > col1)){
 
 for ( i = row1; i <= row1; i++){
    
    
    for ( j = col1 + 1; j < col2; j++){
        
    warehouse[i][j] = 3;
    }
    
    } 
a++;    
break;    
}


if ((col1 == col2) && (row2 > row1)){
    
    for ( i = row1 + 1; i < row2; i++){
    
    
    for ( j = col2; j <= col2; j++){
    
    warehouse[i][j] = 3;
    
    }
    
    }
a++;    
break;
}


 if ((col1 > col2) && (row1 > row2)){   
for ( i = row1; i > row2; i--){
    
    
    for ( j = col1 - 1; j >= col2; j--){
        
    if (i == row1 || j ==col2){
    warehouse[i][j] = 3;
   }
    }
    a++;
    }
    
 }
 
if ((row1 == row2) && (col1 > col2)){
 
 for ( i = row1; i <= row1; i++){
    
    
    for ( j = col1 - 1; j > col2; j--){
        
    warehouse[i][j] = 3;
    }
    
    } 
a++;    
break;    
} 

int i;
int j;

if(col1 == col2 && row1 > row2){

for (i = row1 -1; i > row2; i--){
    
    for (j = col1; j <= col1; j++){
        
        warehouse[i][j] = 3;
        
    }
    
    
}
a++;
break;
}  


if(col2 > col1 && row1 > row2){    
for ( i = row1; i > row2; i--){
    
    for ( j = col1 + 1; j <= col2; j++){
        
   if (i == row1 || j ==col2){
    warehouse[i][j] = 3;
   }
    }
    
    }
    a++;
}

if(col2 > col1 && row2 > row1){    
for ( i = row1; i < row2; i++){
    
    for ( j = col1 + 1; j <= col2; j++){
        
      if (i == row1 || j ==col2){
    warehouse[i][j] = 3;
    
   } 
    
    }
    
    }
    a++;
    break;
}


if(col1 > col2 && row2 > row1){    
for ( i = row1; i < row2; i++){
    
    for ( j = col1 - 1; j >= col2; j--){
      
      if (i == row1 || j ==col2){
    warehouse[i][j] = 3;
   } 
        
    }
    
    }
    a++;
    break;
}



}  

}",1
jpar611,1696151868,1,"#include <stdlib.h>
#include <stdio.h>

#define SIZE 10

void PelletRoute(int warehouse[SIZE][SIZE]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the pellet and destination positions
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally until it lines up with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            warehouse[pelletRow][pelletCol + 1] = 3;
            pelletCol++;
        } else {
            warehouse[pelletRow][pelletCol - 1] = 3;
            pelletCol--;
        }
    }

    // Move vertically until it reaches the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            warehouse[pelletRow + 1][pelletCol] = 3;
            pelletRow++;
        } else {
            warehouse[pelletRow - 1][pelletCol] = 3;
            pelletRow--;
        }
    }
}

// Test the function
int main() {
    int warehouse[SIZE][SIZE] = { 
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0, 0, 0} 
    };

    PelletRoute(warehouse);

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0
jpar611,1696151915,2,"#include <stdlib.h>
#include <stdio.h>

#define SIZE 10

void PelletRoute(int warehouse[SIZE][SIZE]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the pellet and destination positions
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally until it lines up with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            warehouse[pelletRow][pelletCol + 1] = 3;
            pelletCol++;
        } else {
            warehouse[pelletRow][pelletCol - 1] = 3;
            pelletCol--;
        }
    }

    // Move vertically until it reaches the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            warehouse[pelletRow + 1][pelletCol] = 3;
            pelletRow++;
        } else {
            warehouse[pelletRow - 1][pelletCol] = 3;
            pelletRow--;
        }
    }
}

}
",0
jpar611,1696151954,3,"#include <stdlib.h>
#include <stdio.h>

#define SIZE 10

void PelletRoute(int warehouse[SIZE][SIZE]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the pellet and destination positions
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally until it lines up with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            warehouse[pelletRow][pelletCol + 1] = 3;
            pelletCol++;
        } else {
            warehouse[pelletRow][pelletCol - 1] = 3;
            pelletCol--;
        }
    }

    // Move vertically until it reaches the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            warehouse[pelletRow + 1][pelletCol] = 3;
            pelletRow++;
        } else {
            warehouse[pelletRow - 1][pelletCol] = 3;
            pelletRow--;
        }
    }
}
",0
jpar611,1696152051,4,"#include <stdio.h>

void calculateAndReplaceAverage(float arr[], int size) {
    if (size <= 0) {
        printf(""Array size must be greater than zero.\n"");
        return;
    }

    // Calculate the sum of the numbers in the array
    float sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }

    // Calculate the average
    float average = sum / size;

    // Replace each element in the array with the average
    for (int i = 0; i < size; i++) {
        arr[i] = average;
    }
}

int main() {
    // Example usage
    float numbers[] = {1.0, 2.0, 3.0, 4.0, 5.0};
    int size = sizeof(numbers) / sizeof(numbers[0]);

    printf(""Original array:\n"");
    for (int i = 0; i < size; i++) {
        printf(""%.2f "", numbers[i]);
    }
    printf(""\n"");

    calculateAndReplaceAverage(numbers, size);

    printf(""Array after replacing with average:\n"");
    for (int i = 0; i < size; i++) {
        printf(""%.2f "", numbers[i]);
    }
    printf(""\n"");

    return 0;
}
",0
jpau410,1695783280,1,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
    int i, j, rowPos1, colPos1, rowPos2, colPos2;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowPos1 = i;
                colPos1 = j;
            } else if (warehouse[i][j] == 2) {
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    if (colPos1 < colPos2) {
        for (i = colPos1 + 1; i < colPos2; i++) {
            warehouse[rowPos1][i] = 3;
        }
    } else if (colPos2 < colPos1) {
        for (i = colPos1 - 1; i > colPos2; i--) {
            warehouse[rowPos1][i] = 3;
        }
    }
    if (rowPos1 < rowPos2) {
        for (i = rowPos1 + 1; i < rowPos2; i++) {
            warehouse[i][colPos2] = 3;
        }
    } else if (rowPos2 < rowPos1) {
        for (i = rowPos1 - 1; i > rowPos2; i--) {
            warehouse[i][colPos2] = 3;
        }
    }
    if ((rowPos1 != rowPos2) && (colPos1 != colPos2)) {
        warehouse[rowPos1][colPos2] = 3;
    }
}",1
jpaz106,1696240159,1,"void PelletRoute(int array[numRows][numCols]) 
{
    int i, j;
    int startRow = -1, startCol = -1;
    int endRow = -1, endCol = -1;
    
    for (i = 0; i < numRows; i++) {
        for (j = 0; j < numCols; j++) {
            if (array[i][j] == 1) {
                startRow = i;
                startCol = j;
            }
            
            if (array[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }
    
    while (startCol + 1 < numCols && startCol + 1 < endCol) {
        startCol++;
        array[numRows][startCol+1] = 3;
    }
    
    while (startRow +1 < numRows && startRow +1 < endRow) {
        startRow++;
        array[startRow+1][numCols] = 3;
    }
    
}",0
jpud993,1696192530,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int row1;
	int col1;
	int row2;
	int col2;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}

		}
	}

	while (col1 != col2) {
		if (col1 < col2) {
			col1++;
		}
		else {
			col1--;
		}
		warehouse[row1][col1] = 3;
	}

	while (row1 != row2) {
		if (row1 < row2) {
			row1++;
		}
		else {
			row1--;
		}
		warehouse[row1][col1] = 3;
	}
	return;
}
",0
jpud993,1696192795,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int row1;
	int col1;
	int row2;
	int col2;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}

		}
	}

	while (col1 != col2) {
		if (col1 < col2) {
			col1++;
		}
		else {
			col1--;
		}
		warehouse[row1][col1] = 3;
	}

	while (row1 != row2) {
		if (row1 < row2) {
			row1++;
		}
		else {
			row1--;
		}
		warehouse[row1][col1] = 3;
	}
	warehouse[row2][col2] = 2;
	return;
}",1
jsan813,1696224309,1,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int row1, col1, row2, col2;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            else if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }


    if (col2 > col1) {
        while (col2 != col1) {
            col1++;
            warehouse[row1][col1] = 3;
        }
    }
    else if (col2 < col1) {
        while (col2 != col1) {
            col1--;
            warehouse[row1][col1] = 3;
        }
    }


    if (row2 > row1) {
        while (row2 != (row1 + 1)) {
            row1++;
            warehouse[row1][col1] = 3;
        }
    }
    else if (row2 < row1) {
        while (row2 != (row1 -1)) {
            row1--;
            warehouse[row1][col1] = 3;
        }
    }

}",0
jsan813,1696225678,2,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int row1, col1, row2, col2;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            else if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }


    if (col2 > col1) {
        while (col2 != col1) {
            col1++;
            warehouse[row1][col1] = 3;
        }
    }
    else if (col2 < col1) {
        while (col2 != col1) {
            col1--;
            warehouse[row1][col1] = 3;
        }
    }


    if (row2 > row1) {
        while (row2 != row1) {
            row1++;
            warehouse[row1][col1] = 3;
        }
    }
    else if (row2 < row1) {
        while (row2 != row1) {
            row1--;
            warehouse[row1][col1] = 3;
        }
    }

    warehouse[row1][col1] = 2;

}",1
jshe464,1696221098,1,"void PelletRoute(int warehouse[10][10])
{
 int row, col, rowa, cola;
 int i, j;
 for (i = 0; i < 10; i++)
 {
	 for (j = 0; j < 10; j++)
	 {
		 if (warehouse[i][j] == 1)
		 {
			 row = i;
			 col = j;
		 }
	 }
 }

 for (i = 0; i < 10; i++)
 {
	 for (j = 0; j < 10; j++)
	 {
		 if (warehouse[i][j] == 2)
		 {
			 rowa = i;
			 cola = j;
		 }
	 }
 }
 if (col < cola) {
	 for (i = col + 1; i < cola; i++)
	 {
		 warehouse[row][i] = 3;
	 }
	 if (row < rowa) {
		 for (j = row; j < rowa; j++) {
			 warehouse[j][cola] = 3;
		 }
	 }
	 else if(row > rowa) {
		 for (j = row; j > rowa; j--) {
			 warehouse[j][cola] = 3;
		 }
	 }
 }
 else if (col > cola) {
	 for (i = col - 1; i > cola; i--)
	 {
		 warehouse[row][i] = 3;
	 }
	 if (row < rowa) {
		 for (j = row; j < rowa; j++) {
			 warehouse[j][cola] = 3;
		 }
	 }
	 else if (row > rowa) {
		 for (j = row; j > rowa; j--) {
			 warehouse[j][cola] = 3;
		 }
	 }
 }


}",0
jshe464,1696221441,2,"void PelletRoute(int warehouse[10][10])
{
 int row, col, rowa, cola;
 int i, j;
 for (i = 0; i < 10; i++)
 {
	 for (j = 0; j < 10; j++)
	 {
		 if (warehouse[i][j] == 1)
		 {
			 row = i;
			 col = j;
		 }
	 }
 }

 for (i = 0; i < 10; i++)
 {
	 for (j = 0; j < 10; j++)
	 {
		 if (warehouse[i][j] == 2)
		 {
			 rowa = i;
			 cola = j;
		 }
	 }
 }
 if (col < cola) {
	 for (i = col + 1; i < cola; i++)
	 {
		 warehouse[row][i] = 3;
	 }
	 if (row < rowa) {
		 for (j = row; j < rowa; j++) {
			 warehouse[j][cola] = 3;
		 }
	 }
	 else if(row > rowa) {
		 for (j = row; j > rowa; j--) {
			 warehouse[j][cola] = 3;
		 }
	 }
 }
 else if (col > cola) {
	 for (i = col - 1; i > cola; i--)
	 {
		 warehouse[row][i] = 3;
	 }
	 if (row < rowa) {
		 for (j = row; j < rowa; j++) {
			 warehouse[j][cola] = 3;
		 }
	 }
	 else if (row > rowa) {
		 for (j = row; j > rowa; j--) {
			 warehouse[j][cola] = 3;
		 }
	 }
 }
 else if (col == cola) {
	 if (row < rowa) {
		 for (j = row+1; j < rowa; j++) {
			 warehouse[j][cola] = 3;
		 }
	 }
	 else if (row > rowa) {
		 for (j = row-1; j > rowa; j--) {
			 warehouse[j][cola] = 3;
		 }
	 }
 }
}",1
jsim643,1696139220,1,"void PelletRoute(int warehouse[10][10]) {
    int pRow = -1, pCol = -1, dRow = 01, dCol = 01;
    
    // Finds the positions of the pellet (1) and the destination 
    for (int i = 0; i < 10; i++) {
        for (int j = 0l j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            }
        }
    }
    
    // Move horizontal 
    while (pCol != dCol) {
        if (pCol < dCol) {
        ++pCol;
        }
         else {    
             --pCol;
        }
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3;
        }
    }
    
    // Move Vertically
    while (pRow != dRow) {
        if (pRow < dRow) {
            ++pRow;
        }
        else {
            --pRow;
        }
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3;
        }
    }
}",0
jsim643,1696139270,2,"void PelletRoute(int warehouse[10][10]) {
    int pRow = -1, pCol = -1, dRow = 01, dCol = 01;
    
    // Finds the positions of the pellet (1) and the destination 
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            }
        }
    }
    
    // Move horizontal 
    while (pCol != dCol) {
        if (pCol < dCol) {
        ++pCol;
        }
         else {    
             --pCol;
        }
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3;
        }
    }
    
    // Move Vertically
    while (pRow != dRow) {
        if (pRow < dRow) {
            ++pRow;
        }
        else {
            --pRow;
        }
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3;
        }
    }
}",0
jsim643,1696139986,3,"void PelletRoute(int warehouse[10][10]) {
    int pRow = -1, pCol = -1, dRow = -1, dCol = -1;
    
    // Finds the positions of the pellet (1) and the destination (2)
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            }
            else if (warehouse[i][j] == 2) {
                dRow = i;
                dCol = j;
            }
        }
    }
    
    // Move horizontally
    while (pCol != dCol) {
        if (pCol < dCol) {
            ++pCol;
        }
        else {    
            --pCol;
        }
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3;
        }
    }
    
    // Move Vertically
    while (pRow != dRow) {
        if (pRow < dRow) {
            ++pRow;
        }
        else {
            --pRow;
        }
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3;
        }
    }
}",1
jsta466,1696212770,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int RowPellet, ColPellet, FinalRow, FinalCol;
    //Finding the original postion of the number 1 and number 2 in the array
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                RowPellet = i;
                ColPellet = j;
            }
            if (warehouse[i][j] == 2) {
                FinalRow = i;
                FinalCol = j;
            }
        }
    }
    //While loop to move pellet horizontally 
    while (ColPellet != FinalCol) {
        if (ColPellet < FinalCol) {
            ColPellet++;
        } else {
            ColPellet--;
        }
        warehouse[RowPellet][ColPellet] = 3;
    }
    //While loop to move pellet vertically
    while (RowPellet != FinalRow) {
        if (RowPellet < FinalRow) {
            RowPellet++;
        } else {
            RowPellet--;
        }
        warehouse[RowPellet][ColPellet] = 3;
    }
    //Setting the final postion back to 2 as the vertical while loop overides it
    warehouse[FinalRow][FinalCol] = 2;
}",1
jwed606,1695948046,1,"
typedef struct pos {
    int x;
    int y;
} pos;

pos FindPos(int warehouse[10][10], int val) 
{
    pos out;
    for (int row = 0; row < 10; ++row)
    {
        for (int col = 0; col < 10; ++col)
        {
            int w_val = warehouse[row][col];

            if (w_val != val)
                continue;
            
            out.x = col;
            out.y = row;
            return out;
        }
    }
    out.x = -1;
    out.y = -1;
    return out;
}

void PelletRoute(int warehouse[10][10])
{
    // Assuming (y, x)
    pos start = FindPos(warehouse, 1);
    pos end = FindPos(warehouse, 2);

    for (int col = start.x + 1; col <= end.x; ++col)
    {
        if (start.y == end.y && col == end.x)
            continue;
        warehouse[start.y][col] = 3;
    }
    for (int col = start.x; col-- > end.x; )
    {
        if (start.y == end.y && col == end.x)
            continue;
        warehouse[start.y][col] = 3;
    }
    for (int row = start.y + 1; row < end.y; ++row)
    {
        warehouse[row][end.x] = 3;
    }
    for (int row = start.y; --row > end.y; )
    {
        warehouse[row][end.x] = 3;
    }
}",1
jwil813,1696239667,1,"void PelletRoute(int warehouse[10][10])
{
    int pos1i, pos1j;
    int pos2i, pos2j;
    int i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {

            if (warehouse[i][j] == 1)
            {
                pos1i = i;
                pos1j = j;
            }
        }
    }
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {

            if (warehouse[i][j] == 2)
            {
                pos2i = i;
                pos2j = j;

            }
        }
    }

    // check to see if can go just horizontal 

    if (pos1i < pos2i&& pos1j == pos2j)
    {
        for (int i = pos1i + 1; i < pos2i; i++)
        {
            warehouse[i][pos1j] = 3;
            
        }
        return;
    }
    else if (pos1i > pos2i && pos1j == pos2j)
    {
        for (int i = pos1i - 1; i > pos2i; i--) {
            warehouse[i][pos1j] = 3;
            
        }
        return;
    }

    //check to see if can just go vertical
    if (pos1j < pos2j&& pos1i == pos2i)
    {
        for (int j = pos1j + 1; j < pos2j; j++)
        {
            warehouse[pos1i][j] = 3;
        }
        return;

    }
    else if (pos1j > pos2j && pos1i == pos2i)
    {
        for (int j = pos1j - 1; j > pos2i; j--) {
            warehouse[pos1i][j] = 3;
        }
        return;

    }


 // horizontal movement of 3's


    if (pos1j < pos2j && pos1j != pos2j)
    {
        for (int j = pos1j + 1; j < pos2j; j++)
        {
            warehouse[pos1i][j] = 3;
        }
    }
    else if (pos1j > pos2j && pos1j != pos2j)
    {
        for (int j = pos1j - 1; j > pos2j; j--)
        {
            warehouse[pos1i][j] = 3;
        }
    }

    //vertical movement
    if (pos1i < pos2i && pos1i != pos2i)
    {
        for (int i = pos1i ; i < pos2i; i++)
        {
            warehouse[i][pos2j] = 3;
        }
    }
    else if (pos1i > pos2i && pos1i != pos2i)
    {
        for (int i = pos1i; i > pos2i; i--)
        {
            warehouse[i][pos2j] = 3;
        }
    }

}",1
jwon248,1695712243,1,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int startRow, startCol, endRow, endCol;
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            /*find local of 1 and 2*/
            if (warehouse[i][j] == 1)
            {
                startRow = i;
                startCol = j;
            }
            else if (warehouse[i][j] == 2)
            {
                endRow = i;
                endCol = j;
            }
        }
    }

    /*make a line of 3's*/
    /*horizontal*/
    if (startCol < endCol)
    {
        for (i = startCol + 1; i <= endCol; i++)
        {
            warehouse[startRow][i] = 3;
        }
    }
    else if (startCol > endCol)
    {
        for (i = startCol - 1; i >= endCol; i--)
        {
            warehouse[startRow][i] = 3;
        }
    }

    /*vertical*/
    if (startRow < endRow)
    {
        for (i = startRow + 1; i <= endRow; i++)
        {
            warehouse[i][endCol] = 3;
        }
    }
    else if (startRow > endRow)
    {
        for (i = startRow - 1; i >= endRow; i--)
        {
            warehouse[i][endCol] = 3;
        }
    }
    warehouse[endRow][endCol] = 2;
}",1
jwon253,1696064363,1,"void PelletRoute(int warehouse[10][10])
{
    int pellet_row, pellet_col;
    int destination_row, destination_col;

    // Find (1) and (2) positions
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if (warehouse[i][j] == 2) {
                destination_row = i;
                destination_col = j;
            }
        }
    }

    // Move horizontally until it matches with the destination column
    // Move right
    if (pellet_col < destination_col) {
        for (int col = pellet_col + 1; col < destination_col; col++) {
            warehouse[pellet_row][col] = 3;
        }
        pellet_col = destination_col;
    }
    // Move left
    else if (pellet_col > destination_col) {
        for (int col = destination_col; col < pellet_col; col++) {
            warehouse[pellet_row][col] = 3;
        }
        pellet_col = destination_col;
    }

    // Move vertically to reach the destination
    // Move down
    if (pellet_row < destination_row) {
        for (int row = pellet_row; row < destination_row; row++) {
            warehouse[row][pellet_col] = 3;
        }
    }
    // Move up
    else if (pellet_row > destination_row) {
        for (int row = destination_row; row < pellet_row; row++) {
            warehouse[row][pellet_col] = 3;
        }
    }
}",0
jwon253,1696065983,2,"void PelletRoute(int warehouse[10][10])
{
    int pellet_row, pellet_col;
    int destination_row, destination_col;

    // Find (1) and (2) positions
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if (warehouse[i][j] == 2) {
                destination_row = i;
                destination_col = j;
            }
        }
    }

    // Move horizontally until it matches with the destination column
    // Move right
    if (pellet_col < destination_col) {
        for (int col = pellet_col + 1; col <= destination_col; col++) {
            if (warehouse[pellet_row][col] != 2) {
                warehouse[pellet_row][col] = 3;
            }
        }
        // Update column position
        pellet_col = destination_col;
    }
    // Move left
    else if (pellet_col > destination_col) {
        for (int col = pellet_col - 1; col >= destination_col; col--) {
            if (warehouse[pellet_row][col] != 2) {
                warehouse[pellet_row][col] = 3;
            }
        }
        // Update column position
        pellet_col = destination_col;
    }

    // Move vertically to reach the destination
    // Move down
    if (pellet_row < destination_row) {
        for (int row = pellet_row + 1; row <= destination_row; row++) {
            if (warehouse[row][pellet_col] != 2) {
                warehouse[row][pellet_col] = 3;
            }
        }
    }
    // Move up
    else if (pellet_row > destination_row) {
        for (int row = pellet_row - 1; row >= destination_row; row--) {
            if (warehouse[row][pellet_col] != 2) {
                warehouse[row][pellet_col] = 3;
            }
        }
    }
}",1
jwon323,1695853953,1,"#include <stdio.h>

//dimesions of warehouse
#define NUM_ROWS 10
#define NUM_COLS 10

//function to find tile 1
void FindTile1(int warehouse[NUM_ROWS][NUM_COLS], int tile, int *row1, int *col1)
{
    int i, j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (warehouse[i][j] == tile) {
                *row1 = i;
                *col1 = j;
            }
        }
    }
}

//function to find tile 2
void FindTile2(int warehouse[NUM_ROWS][NUM_COLS], int tile, int *row2, int *col2)
{
    int i, j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (warehouse[i][j] == tile) {
                *row2 = i;
                *col2 = j;
            }
        }
    }
}



void PelletRoute(int warehouse[10][10])
{
    int i, j, row1, col1, row2, col2;

//find tile 1
    FindTile1(warehouse, 1, &row1, &col1);

//find tile 2
    FindTile2(warehouse, 2, &row2, &col2);

    //printf(""%d , %d\n"", row1, col1);
    //printf(""%d , %d "", row2, col2);

    for (j = col1+1; j < col2; j++) {
        warehouse[i][j] = 3;
    }
    for (i = row1; i < row2; i++) {
        warehouse[i][j] = 3;
    }
    
}",0
jyan420,1695692135,1,"void PelletRoute(int warehouse[10][10])
{
    int destRow, destCol;
    int pelletRow, pelletCol;
    int searchRow, searchCol;
    int moveRow, moveCol;

    // Search for destination and pellet locations
    for (searchRow = 0; searchRow < 10; searchRow++)
    {
        for (searchCol = 0; searchCol < 10; searchCol++)
        {
            if (warehouse[searchRow][searchCol] == 2)
            {
                destRow = searchRow;
                destCol = searchCol;
            }
            else if (warehouse[searchRow][searchCol] == 1)
            {
                pelletRow = searchRow;
                pelletCol = searchCol;
            }
        }
    }

    // Form a horizontal path. Do not overwrite with 3 (path indicator) if it is not empty (0).
    // destination is to the left of the pellet
    if (destCol < pelletCol)
    {
        for (moveCol = pelletCol; moveCol >= destCol; moveCol--)
        {
            if (warehouse[pelletRow][moveCol] == 0)
            {
                warehouse[pelletRow][moveCol] = 3;
            }
        }
    } // destination is to the right of the pellet
    else if (destCol > pelletCol)
    {
        for (moveCol = pelletCol; moveCol <= destCol; moveCol++)
        {
            if (warehouse[pelletRow][moveCol] == 0)
            {
                warehouse[pelletRow][moveCol] = 3;
            }
        }
    }

    // The destination is now in the same column as the pellet.
    // Form a vertical path. Do not overwrite with 3 (path indicator) if it is not empty (0).
    // destination is above the pellet
    if (destRow < pelletRow)
    {
        for (moveRow = pelletRow; moveRow >= destRow; moveRow--)
        {
            if (warehouse[moveRow][destCol] == 0)
            {
                warehouse[moveRow][destCol] = 3;
            }
        }
    } // destination is below the pellet
    else if (destRow > pelletRow)
    {
        for (moveRow = pelletRow; moveRow <= destRow; moveRow++)
        {
            if (warehouse[moveRow][destCol] == 0)
            {
                warehouse[moveRow][destCol] = 3;
            }
        }
    }
}",1
jyua529,1695977095,1,"void PelletRoute(int warehouse[10][10]) {
   
    int pelletRow = -1, pelletCol = -1, destRow = -1, destCol = -1;

    
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

   
    while (pelletCol != destCol) {
        
        if (pelletCol < destCol) {
            warehouse[pelletRow][++pelletCol] = 3;
        } else {
            warehouse[pelletRow][--pelletCol] = 3;
        }
    }

    
    while (pelletRow != destRow) {
        
        if (pelletRow < destRow) {
            warehouse[++pelletRow][pelletCol] = 3;
        } else {
            warehouse[--pelletRow][pelletCol] = 3;
        }
    }
    warehouse[destRow][destCol] = 2;
}",1
jzho786,1696240509,1,"void PelletRoute(int warehouse[10][10]){
    
    int pelletX, pelletY, destinationX, destinationY;
    
    for (int i = 0; i < 10; i++){
	for (int j = 0; j < 10; j++){
	    if (warehouse[i][j] == 1){
		pelletX = i;
		pelletY = j;
	    }
	    else if (warehouse[i][j] == 2){
		destinationX = i;
		destinationY = j;
	      }
	  }
    }

    int rowDiff = pelletX - destinationX;
    int colDiff = pelletY - destinationY;

    while (pelletY != destinationY)
      {
	if (colDiff < 0)
	  {
	    pelletY++;
	  }
	else
	  {
	    pelletY--;
	  }

	if (warehouse[pelletX][pelletY] != 2)
	  {
	    warehouse[pelletX][pelletY] = 3;
	  }
    }
    while (pelletX != destinationX)
      {
	if (rowDiff < 0)
	  {
	    pelletX++;
	  }
	else
	  {
	    pelletX--;
	  }

	if (warehouse[pelletX][pelletY] != 2)
	  {
	    warehouse[pelletX][destinationY] = 3;
      }
  }
}
      
  
",1
kahk161,1695721981,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int x_start, y_start, x_end, y_end;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				x_start = j;
				y_start = i;
			}// if 1 end
			if (warehouse[i][j] == 2) {
				x_end = j;
				y_end = i;
			}// if 2 end
		}// for j end
	}// for i end

	while (x_start != x_end) {
		// destination to the right
		if (x_end > x_start) {
			x_start++;
			warehouse[y_start][x_start] = 3;
		}// if > 0  end
		// destination to the left
		if (x_end < x_start) {
			x_start--;
			warehouse[y_start][x_start] = 3;
		}// if < 0  end
	}// while x_diff end

	while (y_start != y_end) {
		// destination down
		if (y_end > y_start) {
			y_end--;
			warehouse[y_end][x_start] = 3;
		}// if > 0  end
		// destination up
		if (y_end < y_start) {
			y_end++;
			warehouse[y_end][x_start];
		}
	}// while y_diff end
}// PalletRoute end",0
kahk161,1695724517,2,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int x_start, y_start, x_end, y_end;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				x_start = j;
				y_start = i;
			}// if 1 end
			if (warehouse[i][j] == 2) {
				x_end = j;
				y_end = i;
			}// if 2 end
		}// for j end
	}// for i end

	int x_smem = x_start;
	int y_smem = y_start;
	int x_emem = x_end;
	int y_emem = y_end;

	while (x_start != x_end) {
		// destination to the right
		if (x_end > x_start) {
			x_start++;
			warehouse[y_start][x_start] = 3;
		}// if > x_start end
		// destination to the left
		if (x_end < x_start) {
			x_start--;
			warehouse[y_start][x_start] = 3;
		}// if < x_start end
		// destinaton on same row
		if (x_start == x_emem && y_start == y_emem) {
			warehouse[y_emem][x_emem] = 2;
		}// if && end
	}// while x_diff end

	while (y_start != y_end) {
		// destination down
		if (y_end > y_start) {
			y_end--;
			warehouse[y_end][x_start] = 3;
		}// if > y_start end
		// destination up
		if (y_end < y_start) {
			y_end++;
			warehouse[y_end][x_start] = 3;
		}// if < y_start end
		// destination on same column
		if ((x_end == x_smem) && (y_end == y_smem)) {
			warehouse[y_smem][x_smem] = 1;
		}// if && end
	}// while y_diff end
}// PalletRoute end",1
kbar402,1696235489,1,"void PelletRoute(int warehouse[10][10]) {
    int oneRow, oneCol, twoRow, twoCol;
    
    int i, j, x, y;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                oneRow = i;
                oneCol = j;
                break;
            }
        }
    }

    for (x = 0; x < 10; x++) {
        for (y = 0; y < 10; y++) {
            if (warehouse[x][y] == 2) {
                twoRow = x;
                twoCol = y;
                break;
            }
        }
    }    
    
    if (oneRow < twoRow) {
        if (oneCol < twoCol) {
            for (i = oneCol; i < (twoCol - 1); i++) {
                warehouse[oneRow][i+1] = 3;
            } 
            for (j = oneRow; j < (twoRow); j++) {
                warehouse[j][twoCol] = 3;
            }
        }else if (oneCol == twoCol) {
            for (i = (oneRow+1); i < twoRow; i++) {
                warehouse[i][twoCol] = 3;
            } 
        }else if (oneCol > twoCol) {
            for (i = oneRow; i < twoRow; i++) {
                warehouse[i][twoCol] = 3;
            }
            for (j = twoCol; j < (oneCol -1); j++) {
                warehouse[oneRow][j+1] = 3;
            }
        }
    } else if (oneRow == twoRow) {
        if (oneCol < twoCol) {
            for (i = oneCol; i < (twoCol - 1); i++) {
                warehouse[oneRow][i+1] = 3;
            } 
        } else if (oneCol > twoCol) {
            for (j = twoCol; j < (oneCol -1); j++) {
                warehouse[oneRow][j+1] = 3;
            }
        }
    } else if (oneRow > twoRow) {
       if (oneCol < twoCol) {
            for (i = oneCol; i < (twoCol - 1); i++) {
                warehouse[oneRow][i+1] = 3;
            } 
            for (j = twoRow; j < (oneRow); j++) {
                warehouse[j+1][twoCol] = 3;
            }
        }else if (oneCol == twoCol) {
            for (i = (twoRow+1); i < oneRow; i++) {
                warehouse[i][twoCol] = 3;
            } 
        }else if (oneCol > twoCol) {
            for (i = twoRow; i < oneRow; i++) {
                warehouse[i+1][twoCol] = 3;
            }
            for (j = twoCol; j < (oneCol -1); j++) {
                warehouse[oneRow][j+1] = 3;
            }
        } 
    }
}",1
kbha969,1695869562,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i,j,rowPellet,colPellet,rowdest,coldest;
    rowdest = 0;
    coldest = 0;
    rowPellet = 0;
    colPellet = 0;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowPellet = i;
                colPellet = j;
            }
        }
    }
    printf(""%d %d\n"",rowPellet,colPellet);
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                rowdest = i;
                coldest = j;
            }
        }
    }
    printf(""%d %d\n"",rowdest,coldest);
    for (i = rowPellet; i <=rowPellet;i++) {
        for (j= colPellet+1; j<=coldest; j++){
            warehouse[i][j]= 3;
        
    }
    for (j = coldest; j <=coldest;j++) {
        for (i= rowPellet; i<rowdest; i++) {
            warehouse[i][j]= 3;
        
    }
}
}
}",0
kbha969,1695869592,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i,j,rowPellet,colPellet,rowdest,coldest;
    rowdest = 0;
    coldest = 0;
    rowPellet = 0;
    colPellet = 0;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowPellet = i;
                colPellet = j;
            }
        }
    }
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                rowdest = i;
                coldest = j;
            }
        }
    }
    
    for (i = rowPellet; i <=rowPellet;i++) {
        for (j= colPellet+1; j<=coldest; j++){
            warehouse[i][j]= 3;
        
    }
    for (j = coldest; j <=coldest;j++) {
        for (i= rowPellet; i<rowdest; i++) {
            warehouse[i][j]= 3;
        
    }
}
}
}",0
kbha969,1695931730,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i,j,rowPellet,colPellet,rowdest,coldest;
    rowdest = 0;
    coldest = 0;
    rowPellet = 0;
    colPellet = 0;
   
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowPellet = i;
                colPellet = j;
            }
        }
    }
   
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                rowdest = i;
                coldest = j;
            }
        }
    }
    if (colPellet <coldest) {
        for (i = rowPellet; i <=rowPellet;i++) {
            for (j= colPellet+1; j<coldest; j++){
                warehouse[i][j]= 3;
            }
        }
    }
    
    if (colPellet >coldest) {
        for (i = rowPellet; i <=rowPellet;i++) {
        for (j= colPellet-1; j>coldest; j--){
            warehouse[i][j]= 3;
            }
        }
    }   
    
    if (rowPellet> rowdest) {
        for (j = coldest; j <=coldest;j++) {
        for (i= rowPellet-1; i>rowdest; i--) {
            warehouse[i][j]= 3;
            }
        }
    }
    if (rowPellet< rowdest) {
for (j = coldest; j <=coldest;j++) {
        for (i= rowPellet+1; i<rowdest; i++) {
            warehouse[i][j]= 3;
        }
    }
}



}",0
kbha969,1695933853,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i,j,rowPellet,colPellet,rowdest,coldest;
    rowdest = 0;
    coldest = 0;
    rowPellet = 0;
    colPellet = 0;
   
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowPellet = i;
                colPellet = j;
            }
        }
    }
   
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                rowdest = i;
                coldest = j;
            }
        }
    }
    if (colPellet <coldest) {
        for (i = rowPellet; i <=rowPellet;i++) {
            for (j= colPellet+1; j<coldest; j++){
                warehouse[i][j]= 3;
            }
        }
    }
    
    if (colPellet >coldest) {
        for (i = rowPellet; i <=rowPellet;i++) {
            for (j= colPellet-1; j>coldest; j--){
                warehouse[i][j]= 3;
            }
        }
    }   
    
    if (rowPellet> rowdest) {
        for (j = coldest; j <=coldest;j++) {
            for (i= rowPellet-1; i>rowdest; i--) {
                warehouse[i][j]= 3;
            }
        }
    }
    if (rowPellet< rowdest) {
        for (j = coldest; j <=coldest;j++) {
            for (i= rowPellet+1; i<rowdest; i++) {
                warehouse[i][j]= 3;
        }
    }
}
if ((colPellet != coldest) && (rowPellet != rowdest)) {
    warehouse[rowPellet][coldest] = 3;
}


}",1
kcao565,1696061491,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, destRow, destCol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol)
    {
        if (pelletCol < destCol) {
            pelletCol++;
        }
        else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow)
    {
        if (pelletRow < destRow) {
            pelletRow++;
        }
        else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
kcao565,1696063850,2,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        }
        else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3; 
    }

    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        }
        else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3; 
    }

    warehouse[destRow][destCol] = 2;
}",1
kcao657,1696165240,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int i, j, p1row, p1col, p2row, p2col;
	p1row = 0;
	p1col = 0;
	p2row = 0;
	p2col = 0;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				p1row = i;
				p1col = j;
			}
			if (warehouse[i][j] == 2) {
				p2row = i;
				p2col = j;
			}
		}
	}

	int rowDiff, colDiff, across, down;

	rowDiff = p2row - p1row;
	colDiff = p2col - p1col;

	if (colDiff > 0) {
		for (across = 0; across < colDiff; across++) {
			warehouse[p1row][p1col + across] = 3;
		}
	}

	if (colDiff < 0) {
		colDiff = colDiff * -1;
		for (across = 0; across < colDiff; across++) {
			warehouse[p1row][p1col - across] = 3;
		}
	}


	if (rowDiff > 0) {
		for (down = 0; down < rowDiff; down++) {
			warehouse[p1row + down][p1col + colDiff] = 3;
		}
	}

	if (rowDiff < 0) {
		rowDiff = rowDiff * -1;
		for (down = 1; down < rowDiff; down++) {
				warehouse[p1row - down][p1col + colDiff] = 3;
		}
	}


}",0
kcao657,1696169099,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int i, j, p1row, p1col, p2row, p2col;
	p1row = 0;
	p1col = 0;
	p2row = 0;
	p2col = 0;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				p1row = i;
				p1col = j;
			}
			if (warehouse[i][j] == 2) {
				p2row = i;
				p2col = j;
			}
		}
	}

	int rowDiff, colDiff, across, down;

	rowDiff = p2row - p1row;
	colDiff = p2col - p1col;

	if (colDiff > 0) {
		for (across = 0; across < colDiff; across++) {
			if (warehouse[p1row][p1col + across] != 1) {
				warehouse[p1row][p1col + across] = 3;
			}
		}
	}

	if (colDiff < 0) {
		colDiff = -colDiff;
		for (across = 0; across < colDiff; across++) {
			if (warehouse[p1row][p1col - across] != 1) {
				warehouse[p1row][p1col - across] = 3;
			}
		}
	}


	if (rowDiff > 0) {
		for (down = 0; down < rowDiff; down++) {
			if (warehouse[p1row + down][p2col] != 1) {
				warehouse[p1row + down][p2col] = 3;
			}
		}
	}

	if (rowDiff < 0) {
		rowDiff = -rowDiff;
		for (down = 0; down < rowDiff; down++) {
			if (warehouse[p1row - down][p2col] != 1) {
				warehouse[p1row - down][p2col] = 3;
			}
		}
	}


}
",1
kgra470,1695695910,1,"void PelletRoute(int array[10][10]){
    int worker_row,worker_col,box_row,box_col;
    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            if (array[i][j]==1){
                worker_row=i;
                worker_col=j;
            }
            if (array[i][j]==2){
                box_row=i;
                box_col=j;
            }
        }
    }
    if(worker_col<box_col){
        for(int i=worker_col+1;i<=box_col;i++) {
            array[worker_row][i] = 3;
        }
    }
    else if (worker_col>box_col){
        for(int i=worker_col-1;i>=box_col;i--) {
            array[worker_row][i] = 3;
        }
    }
    if(worker_row<box_row){
        for(int i=worker_row;i<=box_row-1;i++) {
            array[i][box_col] = 3;
        }
    }
    else if(worker_row>box_row){
        for(int i=worker_row;i>=box_row+1;i--) {
            array[i][box_col] = 3;
        }
    }
}",0
kgra470,1695695960,2,"void PelletRoute(int array[10][10]){
    int worker_row,worker_col,box_row,box_col,rows=10,cols=10;
    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            if (array[i][j]==1){
                worker_row=i;
                worker_col=j;
            }
            if (array[i][j]==2){
                box_row=i;
                box_col=j;
            }
        }
    }
    if(worker_col<box_col){
        for(int i=worker_col+1;i<=box_col;i++) {
            array[worker_row][i] = 3;
        }
    }
    else if (worker_col>box_col){
        for(int i=worker_col-1;i>=box_col;i--) {
            array[worker_row][i] = 3;
        }
    }
    if(worker_row<box_row){
        for(int i=worker_row;i<=box_row-1;i++) {
            array[i][box_col] = 3;
        }
    }
    else if(worker_row>box_row){
        for(int i=worker_row;i>=box_row+1;i--) {
            array[i][box_col] = 3;
        }
    }
}",0
kgra470,1695696102,3,"void PelletRoute(int array[10][10]){
    int worker_row,worker_col,box_row,box_col,rows=10,cols=10;
    for(int i=0;i<rows;i++){
        for(int j=0;j<cols;j++){
            if (array[i][j]==1){
                worker_row=i;
                worker_col=j;
            }
            if (array[i][j]==2){
                box_row=i;
                box_col=j;
            }
        }
    }
    if(worker_col<box_col){
        for(int i=worker_col;i<=box_col;i++) {
            array[worker_row][i] = 3;
        }
    }
    else if (worker_col>box_col){
        for(int i=worker_col;i>=box_col;i--) {
            array[worker_row][i] = 3;
        }
    }
    if(worker_row<box_row){
        for(int i=worker_row;i<=box_row;i++) {
            array[i][box_col] = 3;
        }
    }
    else if(worker_row>box_row){
        for(int i=worker_row;i>=box_row;i--) {
            array[i][box_col] = 3;
        }
    }
    array[box_row][box_col]=2;
    array[worker_row][worker_col]=1;
}",1
khew624,1696161719,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destinationRow, destinationCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        }
        else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destinationRow) {
        if (pelletRow < destinationRow) {
            pelletRow++;
        }
        else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
khew624,1696210644,2,"#include <stdio.h>

void MovePellet(int warehouse[10][10]) 
{
    int pelletRow, pelletCol, destinationRow, destinationCol;

    // find where pellets are
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destinationRow = row;
                destinationCol = col;
            }
        }
    }

    // move the pellet horizontally
    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        // Mark the route with 3, excluding the destination
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }

    // move the pellet vertically 
    while (pelletRow != destinationRow) {
        if (pelletRow < destinationRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
}",0
khew624,1696210806,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow, pelletCol, destinationRow, destinationCol;

    // find where pellets are
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destinationRow = row;
                destinationCol = col;
            }
        }
    }

    // move the pellet horizontally
    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        // Mark the route with 3, excluding the destination
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }

    // move the pellet vertically 
    while (pelletRow != destinationRow) {
        if (pelletRow < destinationRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
}",1
kjoe685,1696041069,1,"void PelletRoute(int warehouse[10][10])
{
	// ew hardcoded values
	int numRows = 10;
	int numCols = 10;

	//find start and end
	int startRow, startCol, endRow, endCol, i, j;
	for (i = 0; i < numRows; i++) {
		for (j = 0; j < numCols; j++) {
			if (warehouse[i][j] != 0) {
				if (warehouse[i][j] == 1) {
					startRow = i;
					startCol = j;
				} else {
					endRow = i;
					endCol = j;
				}
			}
		}
	}

	// horz movement from start
	if (startCol < endCol) {
		for (j = startCol + 1; j < endCol; j++) {
			warehouse[startRow][j] = 3;
		}
	}
	else if (startCol > endCol) {
		for (j = endCol + 1; j < startCol; j++) {
			warehouse[startRow][j] = 3;
		}
	}

	// vert movement from end
	if (startRow < endRow) {
		for (i = startRow + 1; i < endRow; i++) {
			warehouse[i][endCol] = 3;
		}
	}
	else if (startRow > endRow) {
		for (i = endRow + 1; i < startRow; i++) {
			warehouse[i][endCol] = 3;
		}
	}
	// intersection
	if ((startRow != endRow) && (startCol != endCol)) {
		warehouse[startRow][endCol] = 3;
	}

	return;
}",1
klam376,1696042155,1,"void PelletRoute(int warehouse[10][10])
{
    int rowPos, colPos, dRow, dCol; 
    for (int i = 0; i<10; i++)	{
		for (int j = 0; j<10; j++)	{
			if (warehouse[i][j] == 1)	{
				rowPos = i;
				colPos = j;
			} else if (warehouse[i][j] == 2)    {
                dRow = i;
                dCol = j;
            }
		}
	}
    if ((dCol>colPos) && (dRow!=rowPos))  {
        for (int c = colPos+1; c<dCol+1; c++)   {
            warehouse[rowPos][c]=3;
        }
        if (dRow>rowPos)    {
            for (int r = rowPos+1; r<dRow;r++)
            warehouse[r][dCol]=3;
        } else if (dRow<rowPos) {
            for (int r = rowPos-1; r>dRow;r--)
            warehouse[r][dCol]=3;
        }
            
    } else if ((dCol<colPos) && (dRow!=rowPos)) {
        for (int c = colPos-1; c>dCol-1; c--)   {
            warehouse[rowPos][c]=3;
        }
        if (dRow>rowPos)    {
            for (int r = rowPos+1; r<dRow;r++)
            warehouse[r][dCol]=3;
        } else if (dRow<rowPos) {
            for (int r = rowPos-1; r>dRow;r--)
            warehouse[r][dCol]=3;
        }
    } else if (dCol==colPos)    {
        if (dRow>rowPos)    {
            for (int r = rowPos+1; r<dRow;r++)
            warehouse[r][dCol]=3;
        } else if (dRow<rowPos) {
            for (int r = rowPos-1; r>dRow;r--)
            warehouse[r][dCol]=3;
        }
    } else if (dRow==rowPos)    {
        if (dCol>colPos)    {
            for (int c = colPos+1; c<dCol; c++)
            warehouse[dRow][c]=3;
        } else if (dCol<colPos) {
            for (int c = colPos-1; c>dCol;c--)
            warehouse[dRow][c]=3;
        }
    }
}",1
kmal768,1695904674,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
	int i, j, value, horz_difference, vert_difference;
	int pellet_location_i, pellet_location_j;
	int dest_location_i, dest_location_j;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			value = warehouse[i][j];
			if (value == 1) {
				pellet_location_i = i;
				pellet_location_j = j;
			}
			if (value == 2) {
				dest_location_i = i;
				dest_location_j = j;
			}
		}
	}
	horz_difference = dest_location_j - pellet_location_j;
	vert_difference = dest_location_i - pellet_location_i;

	if (horz_difference ==  0) {
		if (vert_difference > 0) {
			j = dest_location_j;
			for (i = pellet_location_i+1; i < dest_location_i; i++) {
				warehouse[i][j] = 3;
			}
		}
		if (vert_difference < 0) {
			j = dest_location_j;
			for (i = dest_location_i+1; i < pellet_location_i; i++) {
				warehouse[i][j] = 3;
			}
		}

	}
	
	else if (horz_difference > 0) {
		if (vert_difference > 0) {
			for (j = pellet_location_j+1; j < dest_location_j; j++) {
				i = pellet_location_i;
				warehouse[i][j] = 3;
			}
			for (i = pellet_location_i; i < dest_location_i; i++) {
				j = dest_location_j;
				warehouse[i][j] = 3;
			}
		}
		if (vert_difference < 0) {
			for (j = pellet_location_j+1; j < dest_location_j; j++) {
				i = pellet_location_i;
				warehouse[i][j] = 3;
			}
			for (i = dest_location_i+1; i <= pellet_location_i; i++) {
				j = dest_location_j;
				warehouse[i][j] = 3;
			}
		}
		if (vert_difference == 0) {
			for (j = pellet_location_j+1; j < dest_location_j; j++) {
				i = pellet_location_i;
				warehouse[i][j] = 3;
			}
		}
	}
	
	else { // horz_difference < 0
		if (vert_difference > 0) {
			for (j = dest_location_j; j < pellet_location_j; j++) {
				i = pellet_location_i;
				warehouse[i][j] = 3;
			}
			for (i = pellet_location_i; i < dest_location_i; i++) {
				j = dest_location_j;
				warehouse[i][j] = 3;
			}
		}
		if (vert_difference < 0) {
			for (j = dest_location_j+1; j < pellet_location_j; j++) {
				i = pellet_location_i;
				warehouse[i][j] = 3;
			}
			for (i = dest_location_i+1; i <= pellet_location_i; i++) {
				j = dest_location_j;
				warehouse[i][j] = 3;
			}
		}
		if (vert_difference == 0) {
			for (j = dest_location_j+1; j < pellet_location_j; j++) {
				i = pellet_location_i;
				warehouse[i][j] = 3;
			}
		}
	}
}",1
kmck133,1695632342,1,"void PelletRoute(int warehouse[10][10])
{
	int oneRow, oneCol, twoRow, twoCol, i, j;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				oneRow = i;
				oneCol = j;
			}
			else if (warehouse[i][j] == 2) {
				twoRow = i;
				twoCol = j;
			}
		}
	}

	int topRow, bottomRow, leftCol, rightCol;
	if (oneRow > twoRow) {
		topRow = twoRow;
		bottomRow = oneRow;
	}
	else {
		topRow = oneRow;
		bottomRow = twoRow;
	}
	if (oneCol > twoCol) {
		leftCol = twoCol;
		rightCol = oneCol;
	}
	else {
		leftCol = oneCol;
		rightCol = twoCol;
	}

	for (i = leftCol + 1; i <= rightCol; i++) {
		warehouse[oneRow][i] = 3;
	}
	for (i = topRow + 1; i < bottomRow; i++) {
		warehouse[i][twoCol] = 3;
	}
}",0
kmck133,1695635047,2,"void PelletRoute(int warehouse[10][10])
{
	int oneRow, oneCol, twoRow, twoCol, i, j;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				oneRow = i;
				oneCol = j;
			} else if (warehouse[i][j] == 2) {
				twoRow = i;
				twoCol = j;
			}
		}
	}
	
	if (oneCol > twoCol) {
		for (i = twoCol+1; i < oneCol; i++) {
			warehouse[oneRow][i] = 3;
		}
	}
	else {
		for (i = oneCol + 1; i < twoCol; i++) {
			warehouse[oneRow][i] = 3;
		}
	}

	if (oneRow > twoRow) {
		for (i = twoRow + 1; i < oneRow; i++) {
			warehouse[i][twoCol] = 3;
		}
	}
	else {
		for (i = oneRow + 1; i < twoRow; i++) {
			warehouse[i][twoCol] = 3;
		}
	}

	if (oneRow != twoRow && oneCol != twoCol) {
		warehouse[oneRow][twoCol] = 3;
	}
}",1
kpat303,1695609470,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally to align the pellet with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
kpat303,1695695620,2,"include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i+1;
                destCol = j;
            }
        }
    }

    // Move horizontally to align the pellet with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
kpat303,1695764666,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int startX, startY, destX, destY;

    // Find the positions of pellet (1) and destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startX = i;
                startY = j;
            } else if (warehouse[i][j] == 2) {
                destX = i;
                destY = j;
            }
        }
    }

    // Store the destination value
    int destinationValue = warehouse[destX][destY];

    // Move horizontally (left or right)
    while (startY != destY) {
        if (startY < destY) {
            startY++;
        } else {
            startY--;
        }
        warehouse[startX][startY] = 3;
    }

    // Move vertically (up or down)
    while (startX != destX) {
        if (startX < destX) {
            startX++;
        } else {
            startX--;
        }
        warehouse[startX][startY] = 3;
    }

    // Restore the destination value
    warehouse[destX][destY] = destinationValue;
}
",1
kpay633,1696054848,1,"void PelletRoute(int warehouse[10][10])
{
    int startR, startC, endR, endC;
    int hrzDiff, vertDiff;

    // find start position... and end position
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startR = i;
                startC = j;
            }
            if (warehouse[i][j] == 2) {
                endR = i;
                endC = j;
            }
        }
    }

    // move the pellet horizontally (left or right) if necessary, until it lines up with the destination
    hrzDiff = endC - startC; //THEN CHECK IF POSITIVE OR NEGATIVE (TO SEE IF MOVING LEFT/RIGHT)
    if (hrzDiff >= 0) {
        for (int h = startC; h < endC; h++) {
            warehouse[startR][h + 1] = 3;
        }
    }
    if (hrzDiff < 0) {
        for (int h = startC; h > endC; h--) {
            warehouse[startR][h - 1] = 3;
        }
    }

    // move the pellet vertically(up or down) if necessary, until it reaches the destination
    vertDiff = endR - startR;
    if (vertDiff >= 0) {
        for (int v = startR + 1; v < endR; v++) {
            warehouse[v][endC] = 3;
        }
    }
    if (vertDiff < 0) {
        for (int v = startR + 1; v > endR; v--) {
            warehouse[v][endC] = 3;
        }
    }
}
",0
kpay633,1696055795,2,"void PelletRoute(int warehouse[10][10])
{
    int startR, startC, endR, endC;
    int hrzDiff, vertDiff;


    // find start position... and end position
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startR = i;
                startC = j;
            }
            if (warehouse[i][j] == 2) {
                endR = i;
                endC = j;
            }
        }
    }

    // move the pellet horizontally (left or right) if necessary, until it lines up with the destination
    hrzDiff = endC - startC; //THEN CHECK IF POSITIVE OR NEGATIVE (TO SEE IF MOVING LEFT/RIGHT)
    if (hrzDiff > 0) {
        for (int h = startC + 1; h < endC; h++) {
            warehouse[startR][h] = 3;
        }
    }
    if (hrzDiff < 0) {
        for (int h = startC - 1; h > endC; h--) {
            warehouse[startR][h] = 3;
        }
    }

    // move the pellet vertically(up or down) if necessary, until it reaches the destination
    vertDiff = endR - startR;
    if (vertDiff > 0) {
        for (int v = startR; v < endR; v++) {
            warehouse[v][endC] = 3;
        }
    }
    if (vertDiff < 0) {
        for (int v = startR; v > endR; v--) {
            warehouse[v][endC] = 3;
        }
    }
}",0
kpay633,1696057580,3,"void PelletRoute(int warehouse[10][10])
{
    int startR, startC, endR, endC;
    int hrzDiff, vertDiff;


    // find start position... and end position
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startR = i;
                startC = j;
            }
            if (warehouse[i][j] == 2) {
                endR = i;
                endC = j;
            }
        }
    }

    // move the pellet horizontally (left or right) if necessary, until it lines up with the destination
    hrzDiff = endC - startC; //THEN CHECK IF POSITIVE OR NEGATIVE (TO SEE IF MOVING LEFT/RIGHT)
    vertDiff = endR - startR;

    if ((hrzDiff > 0) && (vertDiff > 0)) {
        for (int i = startC + 1; i < endC; i++) {
            warehouse[startR][i] = 3;
        }
        for (int j = startR; j < endR; j++) {
            warehouse[j][endC] = 3;
        }
    }
    
    if ((hrzDiff > 0) && (vertDiff < 0)) {
        for (int i = startC + 1; i < endC; i++) {
            warehouse[startR][i] = 3;
        }
        for (int j = startR; j > endR; j--) {
            warehouse[j][endC] = 3;
        }
    }
    
    if ((hrzDiff < 0) && (vertDiff > 0)) {
        for (int i = startC - 1; i > endC; i--) {
            warehouse[startR][i] = 3;
        }
        for (int j = startR; j < endR; j++) {
            warehouse[j][endC] = 3;
        }
    }

    if ((hrzDiff < 0) && (vertDiff < 0)) {
        for (int i = startC - 1; i > endC; i--) {
            warehouse[startR][i] = 3;
        }
        for (int j = startR; j > endR; j--) {
            warehouse[j][endC] = 3;
        }
    }

    if ((hrzDiff > 0) && (vertDiff == 0)) {
        for (int i = startC + 1; i < endC; i++) {
            warehouse[startR][i] = 3;
        }
    }

    if ((hrzDiff < 0) && (vertDiff == 0)) {
        for (int i = startC - 1; i > endC; i--) {
            warehouse[startR][i] = 3;
        }
    }
    
    if ((hrzDiff == 0) && (vertDiff > 0)) {
        for (int j = startR + 1; j < endR; j++) {
            warehouse[j][endC] = 3;
        }
    }

    if ((hrzDiff == 0) && (vertDiff < 0)) {
        for (int j = startR - 1; j > endR; j--) {
            warehouse[j][endC] = 3;
        }
    }
}
",1
kqua446,1696180181,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int row, col, row_1 = 0, col_1 = 0, row_2 = 0, col_2 = 0, col_start, col_end, row_start, row_end;

	for (row = 0; row < 10; row++) {
		for (col = 0; col < 10; col++) {
			if (warehouse[row][col] == 1) {
				row_1 = row;
				col_1 = col;
			} else if (warehouse[row][col] == 2) {
				row_2 = row;
				col_2 = col;
			}
		}
	}

    col_start = col_1;
    col_end = col_2;
    if (col_2 < col_1) {
        col_start = col_2;
        col_end = col_1;
    }

    for (col = col_start; col <= col_end; col++) {
        warehouse[row_1][col] = 3;
    }

    row_start = row_1;
    row_end = row_2;
    if (row_2 < row_1) {
        row_start = row_2;
        row_end = row_1;
    }

    for (row = row_start; row <= row_end; row++) {
        warehouse[row][col_2] = 3;
    }

    warehouse[row_1][col_1] = 1;
    warehouse[row_2][col_2] = 2;
} 
",1
krec980,1695939496,1,"#include <stdio.h>


void PelletRoute(int warehouse[10][10])
{
	int i;
	int j;
	int oneRow;
	int oneCol;
	int twoRow;
	int twoCol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				oneRow = i;
				oneCol = j;
			}
			if (warehouse[i][j] == 2) {
				twoRow = i;
				twoCol = j;
			}
		}
	}

	if (twoRow > oneRow && twoCol > oneCol) {
		for (j = oneCol + 1; j < twoCol; j++) {
			warehouse[oneRow][j] = 3;
		}
		for (i = oneRow; i < twoRow; i++) {
			warehouse[i][twoCol] = 3;
		}
	}
	if (twoRow < oneRow && twoCol < oneCol) {
		for (j = oneCol - 1; j >= twoCol; j--) {
			warehouse[oneRow][j] = 3;
		}
		for (i = oneRow; i > twoRow; i--) {
			warehouse[i][twoCol] = 3;
		}
	}

	if (twoRow > oneRow && twoCol < oneCol) {
		for (j = twoCol; j < oneCol; j++) {
			warehouse[oneRow][j] = 3;
		}
		for (i = oneRow; i < twoRow; i++) {
			warehouse[i][twoCol] = 3;
		}
	}

	if (twoRow < oneRow && twoCol > oneCol) {
		for (j = twoCol; j > oneCol; j--) {
			warehouse[oneRow][j] = 3;
		}
		for (i = oneRow; i > twoRow; i--) {
			warehouse[i][twoCol] = 3;
		}
	}

    if (twoCol == oneCol) {
        if (twoRow < oneRow) {
            for (i = twoRow + 1; i < oneRow; i++) {
                warehouse[i][oneCol] = 3;
            }
        } 
        else if (twoRow > oneRow) {
            for (i = oneRow + 1; i < twoRow; i++) {
                warehouse[i][oneCol] = 3;
            }
        }
    }
    
    if (twoRow == oneRow) {
        if (twoCol < oneCol) {
            for (j = twoCol + 1; j < oneCol; j++) {
                warehouse[oneRow][j] = 3;
            }
        } 
        else if (twoCol > oneCol) {
            for (j = oneCol + 1; j < twoCol; j++) {
                warehouse[oneRow][j] = 3;
            }
        }
    }
}",1
ksai757,1696135239,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow = -1, pelletCol = -1, destRow = -1, destCol = -1;

    // Find the positions of the pellet (1) and the destination (2)
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally first
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            ++pelletCol;
        }
        else {
            --pelletCol;
        }
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }

    // Move vertically
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            ++pelletRow;
        }
        else {
            --pelletRow;
        }
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
}",1
ksik996,1695631256,1,"PelletRoute(warehouse);

int i, j;
for (i = 0; i < 10; i++) {
   for (j = 0; j < 10; j++) {
      printf(""%d "", warehouse[i][j]);
   }
   printf(""\n"");
}
}

void PelletRoute(int warehouse[10][10])
{
    int oneR, oneC, twoC, twoR;
    {
    for (int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if(warehouse[j][i] == 1){
            oneR = j;
            oneC = i;
            }
            if(warehouse[j][i] == 2){
            twoR = j;
            twoC = i;
            }
        }
    }
}
if( oneC - twoC > 0)
{
for(int l = oneC-1; l > twoC; l--)
{
    warehouse[oneR][l] = 3;
}
if(oneR - twoR > 0)
    for(int k = oneR; k > twoR; k--)
    {
    warehouse[k][twoC] = 3;
    }
if(oneR - twoR < 0)
    for(int k = oneR; k < twoR; k++)
    {
    warehouse[k][twoC] = 3;
    }
}

if( oneC - twoC < 0)
{
for(int l = oneC+1; l < twoC; l++)
{
    warehouse[oneR][l] = 3;
}
if(oneR - twoR > 0)
    for(int k = oneR; k > twoR; k--)
    {
    warehouse[k][twoC] = 3;
    }
if(oneR - twoR < 0)
    for(int k = oneR; k < twoR; k++)
    {
    warehouse[k][twoC] = 3;
    }
}
}",0
ksik996,1695631287,2,"
void PelletRoute(int warehouse[10][10])
{
    int oneR, oneC, twoC, twoR;
    {
    for (int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if(warehouse[j][i] == 1){
            oneR = j;
            oneC = i;
            }
            if(warehouse[j][i] == 2){
            twoR = j;
            twoC = i;
            }
        }
    }
}
if( oneC - twoC > 0)
{
for(int l = oneC-1; l > twoC; l--)
{
    warehouse[oneR][l] = 3;
}
if(oneR - twoR > 0)
    for(int k = oneR; k > twoR; k--)
    {
    warehouse[k][twoC] = 3;
    }
if(oneR - twoR < 0)
    for(int k = oneR; k < twoR; k++)
    {
    warehouse[k][twoC] = 3;
    }
}

if( oneC - twoC < 0)
{
for(int l = oneC+1; l < twoC; l++)
{
    warehouse[oneR][l] = 3;
}
if(oneR - twoR > 0)
    for(int k = oneR; k > twoR; k--)
    {
    warehouse[k][twoC] = 3;
    }
if(oneR - twoR < 0)
    for(int k = oneR; k < twoR; k++)
    {
    warehouse[k][twoC] = 3;
    }
}
}",0
ksik996,1695631873,3,"void PelletRoute(int warehouse[10][10])
{
    int oneR, oneC, twoC, twoR;
    {
    for (int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if(warehouse[j][i] == 1){
            oneR = j;
            oneC = i;
            }
            if(warehouse[j][i] == 2){
            twoR = j;
            twoC = i;
            }
        }
    }
}
if( oneC - twoC > 0)
{
for(int l = oneC-1; l > twoC; l--)
{
    warehouse[oneR][l] = 3;
}
if(oneR - twoR > 0)
    for(int k = oneR; k > twoR; k--)
    {
    warehouse[k][twoC] = 3;
    }
if(oneR - twoR < 0)
    for(int k = oneR; k < twoR; k++)
    {
    warehouse[k][twoC] = 3;
    }
}

if( oneC - twoC < 0)
{
for(int l = oneC+1; l < twoC; l++)
{
    warehouse[oneR][l] = 3;
}
if(oneR - twoR > 0)
    for(int k = oneR; k > twoR; k--)
    {
    warehouse[k][twoC] = 3;
    }
if(oneR - twoR < 0)
    for(int k = oneR; k < twoR; k++)
    {
    warehouse[k][twoC] = 3;
    }
}
if( oneC - twoC == 0)
{
if(oneR - twoR > 0)
    for(int k = oneR-1; k > twoR; k--)
    {
    warehouse[k][twoC] = 3;
    }
if(oneR - twoR < 0)
    for(int k = oneR+1; k < twoR; k++)
    {
    warehouse[k][twoC] = 3;
    }
}
}",1
kwan244,1695966160,1,"void PelletRoute(int arrayA[10][10])
{
	int i, j;
	int indexRow1, indexCol1;
	int indexRow2, indexCol2;

	//Find index of number 1
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (arrayA[i][j] == 1) {
				indexRow1 = i;
				indexCol1 = j;
		}		
			if (arrayA[i][j] == 2) {
				indexRow2 = i;
				indexCol2 = j;
			}
		}
	}

	//Horizontal Route
	//Moving to right
	if (indexCol2 > indexCol1) {
		for (i = indexCol1 + 1; i < indexCol2; i++) {
			arrayA[indexRow1][i] = 3;
		}
	}
	//Moving to left
	if (indexCol1 > indexCol2) {
		for (i = indexCol2 + 1; i < indexCol1; i++) {
			arrayA[indexRow1][i] = 3;
		}
	}

	//Vertical Route
	//Moving to up
	if (indexRow2 > indexRow1) {
		for (i = indexRow1; i < indexRow2; i++) {
			arrayA[i][indexCol2] = 3;
		}
	}
	//Moving to down
	if (indexRow2 > indexRow1) {
		for (i = indexRow2; i < indexRow1; i++) {
			arrayA[i][indexCol2] = 3;
		}
	}

}",0
kwan244,1695967540,2,"void PelletRoute(int arrayA[10][10])
{
	int i, j;
	int indexRow1, indexCol1;
	int indexRow2, indexCol2;

	//Find index of number 1
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (arrayA[i][j] == 1) {
				indexRow1 = i;
				indexCol1 = j;
		}		
			if (arrayA[i][j] == 2) {
				indexRow2 = i;
				indexCol2 = j;
			}
		}
	}

	//Horizontal Route
	//Moving to right
	if (indexCol2 > indexCol1) {
		for (i = indexCol1 + 1; i < indexCol2; i++) {
			arrayA[indexRow1][i] = 3;
		}
		if (arrayA[indexRow1][i] != 2) {
			arrayA[indexRow1][i] = 3;
		}
	}
	//Moving to left
	if (indexCol1 > indexCol2) {
		for (i = indexCol2; i < indexCol1; i++) {
			if (arrayA[indexRow1][i] != 2) {
				arrayA[indexRow1][i] = 3;
			}
		}
	}

	//Vertical Route
	//Moving to down
	if (indexRow2 > indexRow1) {
		for (i = indexRow1 + 1; i < indexRow2; i++) {
			arrayA[i][indexCol2] = 3;
		}
	}
	//Moving to up
	if (indexRow1 > indexRow2) {
		for (i = indexRow2 + 1; i < indexRow1; i++) {
			arrayA[i][indexCol2] = 3;
		}
	}

}",1
kwan797,1695786137,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int rowPellet=0;
    int colPellet=0;
    int rowDes=0;
    int colDes=0;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowPellet = i;
                colPellet = j;
            }
            if (warehouse[i][j] == 2) {
                rowDes = i;
                colDes = j;
            }
        }
    }

    if (colPellet < colDes) {
        for (int j = colPellet; j < colDes; j++) {
            warehouse[rowPellet][j] = 3;
        }
    } else if (colPellet > colDes) {
        for (int j = colPellet; j > colDes; j--) {
            warehouse[rowPellet][j] = 3;
        }
    }

    if (rowPellet < rowDes) {
        for (int i = rowPellet; i < rowDes; i++) {
            warehouse[i][colDes] = 3;
        }
    } else if (rowPellet > rowDes) {
        for (int i = rowPellet; i > rowDes; i--) {
            warehouse[i][colDes] = 3;
        }
    }
    warehouse[rowDes][colDes]=2;
    warehouse[rowPellet][colPellet]=1;
}",1
kyoo839,1696063445,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int *initial_row, *initial_col;
    int pellet_row, pellet_col;
    initial_row = &pellet_row;
    initial_col = &pellet_col;
    
    int *final_row, *final_col;
    int destination_row, destination_col;
    final_row = &destination_row;
    final_col = &destination_col;
    
    int i,j;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                *initial_row = i;
                *initial_col = j;
            } 
            else if (warehouse[i][j] == 2) {
                *final_row = i;
                *final_col = j;
            }
        }
    }
    
    int horizontal, vertical;
    if (destination_col > pellet_col) {
        horizontal = destination_col - pellet_col;
    }
    else 
    {
        horizontal = pellet_col - destination_col;
    }
    
    if (destination_row > pellet_row) {
        vertical = destination_row - pellet_row;
    }
    else 
    {
        vertical = pellet_row - destination_row;
    }
    
    int l,m;
    
    for (l = 1; l < horizontal; l++) {
        if (destination_col > pellet_col) {
            warehouse[pellet_row][pellet_col + l] = 3;
        }
        else 
        {
            warehouse[pellet_row][pellet_col - l] = 3;
        }
    }
    
    for (m = 0; m < vertical; m++) {
        if (destination_row > pellet_row) {
            warehouse[pellet_row  + m][destination_col] = 3;
        }
        else 
        {
            warehouse[pellet_row  - m][destination_col] = 3;
        }
    }
    warehouse[pellet_row][pellet_col] = 1;
}",1
kzhu796,1695719429,1,"void PelletRoute(int warehouse[10][10])
{
	int rowDestination = -1, colDestination = 1;
	int rowPellet= -1, colPellet = -1;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowDestination = i;
				colDestination = j;
			}
			else if (warehouse[i][j] == 1){
				rowPellet = i;
				colPellet = j;
			}
		}
	}

	// moving horizontally to the destination
	while (colPellet != colDestination) {
		if (colPellet < colDestination) {
			colPellet++;
		}
		else {
			colPellet--;
		}
		warehouse[rowPellet][colPellet] = 3;
	}
	
	//moving vertically to the destination
	while (rowPellet != rowDestination) {
		if (rowPellet < rowDestination) {
			rowPellet++;
		}
		else {
			rowPellet--;
		}
		
		if(warehouse[rowPellet][colPellet]!=2)
			warehouse[rowPellet][colPellet] = 3;
	}
}",0
kzhu796,1695719772,2,"void PelletRoute(int warehouse[10][10])
{
	int rowDestination = -1, colDestination = 1;
	int rowPellet= -1, colPellet = -1;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowDestination = i;
				colDestination = j;
			}
			else if (warehouse[i][j] == 1){
				rowPellet = i;
				colPellet = j;
			}
		}
	}

	// moving horizontally to the destination
	while (colPellet != colDestination) {
		if (colPellet < colDestination) {
			colPellet++;
		}
		else {
			colPellet--;
		}
		if (warehouse[rowPellet][colPellet] != 2)
			warehouse[rowPellet][colPellet] = 3;
	}
	
	//moving vertically to the destination
	while (rowPellet != rowDestination) {
		if (rowPellet < rowDestination) {
			rowPellet++;
		}
		else {
			rowPellet--;
		}
		
		if(warehouse[rowPellet][colPellet]!=2)
			warehouse[rowPellet][colPellet] = 3;
	}
}",1
lazz729,1696044711,1,"#define max(a,b) ((a) > (b) ? (a) : (b))
#define min(a,b) ((a) < (b) ? (a) : (b))

void PelletRoute(int warehouse[10][10]) {

    int startRow, startCol, endRow, endCol;

    // Locates the start and end point
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1 ) {
                startRow = i;
                startCol = j;
            } else if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    int originCol = min(startCol, endCol);
    int terminalCol = max(startCol, endCol);

    for (int k = originCol; k <= terminalCol; k++) {
        warehouse[startRow][k] = 3;
    }

    int originRow = min(startRow, endRow);
    int terminalRow = max(startRow, endRow);

    for (int m = originRow; m <= terminalRow; m++) {
        warehouse[m][endCol] = 3;
    }

    warehouse[startRow][startCol] = 1;
    warehouse[endRow][endCol] = 2;

}",1
lbou433,1695766941,1,"void FindValue(int warehouse[10][10], int* PosH, int* PosW, int value)
{
	int i;
	int j;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == value) {
				*PosH = i;
				*PosW = j;
				return;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10])
{
	int Pos1H;
	int Pos1W;
	int i, j;
	FindValue(warehouse,&Pos1H,&Pos1W, 1);
	int Pos2H;
	int Pos2W;
	FindValue(warehouse, &Pos2H, &Pos2W, 2);
	for (i = Pos1H; i <= Pos2H; i++) {
		for (j = Pos1W; j <= Pos2W; j++) {
			if (warehouse[i][j] == 0) {
				warehouse[i][j] = 3;
			}	
		}
	}
	for (i = Pos1H+1; i <= Pos2H; i++) {
		for (j = Pos1W; j <= Pos2W-1; j++) {
			if (warehouse[i][j] == 3) {
				warehouse[i][j] = 0;
			}
		}
	}
}",0
lbou433,1695768261,2,"void FindValue(int warehouse[10][10], int* PosH, int* PosW, int value)
{
	int i;
	int j;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == value) {
				*PosH = i;
				*PosW = j;
				return;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10])
{
	int Pos1H;
	int Pos1W;
	int i, j;
	FindValue(warehouse,&Pos1H,&Pos1W, 1);
	int Pos2H;
	int Pos2W;
	FindValue(warehouse, &Pos2H, &Pos2W, 2);

	if (Pos1H < Pos2H && Pos1W < Pos2W) {
		for (i = Pos1H; i <= Pos2H; i++) {
			for (j = Pos1W; j <= Pos2W; j++) {
				if (warehouse[i][j] == 0) {
					warehouse[i][j] = 3;
				}
			}
		}
		for (i = Pos1H + 1; i <= Pos2H; i++) {
			for (j = Pos1W; j <= Pos2W - 1; j++) {
				if (warehouse[i][j] == 3) {
					warehouse[i][j] = 0;
				}
			}
		}
	}
	if (Pos1H > Pos2H && Pos1W > Pos2W) {
		for (i = Pos2H; i <= Pos1H; i++) {
			for (j = Pos2W; j <= Pos1W; j++) {
				if (warehouse[i][j] == 0) {
					warehouse[i][j] = 3;
				}
			}
		}
		for (i = Pos2H; i <= Pos1H-1; i++) {
			for (j = Pos2W+1; j <= Pos1W; j++) {
				if (warehouse[i][j] == 3) {
					warehouse[i][j] = 0;
				}
			}
		}
	}
	else {
		if (Pos1H == Pos2H) {
			if (Pos1W < Pos2W) {
				for (j = Pos1W + 1; j <= Pos2W - 1; j++) {
					warehouse[Pos1H][j] = 3;
				}
			}
			if (Pos1W > Pos2W) {
				for (j = Pos2W + 1; j <= Pos1W - 1; j++) {
					warehouse[Pos1H][j] = 3;
				}
			}
				
		}
		if (Pos1W == Pos2W) {
			if (Pos1H < Pos2H) {
				for (i = Pos1H + 1; i <= Pos2H - 1; i++) {
					warehouse[i][Pos1W] = 3;
				}
			}
			if (Pos1H > Pos2H) {
				for (i = Pos2H + 1; i <= Pos1H - 1; i++) {
					warehouse[i][Pos1W] = 3;
				}
			}

		}
	}
}
",0
lbou433,1695934580,3,"void FindValue(int warehouse[10][10], int* PosH, int* PosW, int value)
{
	int i;
	int j;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == value) {
				*PosH = i;
				*PosW = j;
				return;
			}
		}
	}
}
void DrawRectangle(int warehouse[10][10], int startH, int startW, int endH, int endW, int replace)
{
	int i, j;
	for (i = startH; i <= endH; i++) {
		for (j = startW; j <= endW; j++) {
			if (warehouse[i][j] == 0 || warehouse[i][j] == 3) {
				warehouse[i][j] = replace;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10])
{
	int Pos1H;
	int Pos1W;
	FindValue(warehouse,&Pos1H,&Pos1W, 1);
	int Pos2H;
	int Pos2W;
	FindValue(warehouse, &Pos2H, &Pos2W, 2);

	int startH, endH, startW, endW;

	if (Pos1H<Pos2H&&Pos1W<Pos2W){

		startH = Pos1H;
		endH = Pos2H;
		startW = Pos1W;
		endW = Pos2W;
	}
	if (Pos1H > Pos2H && Pos1W > Pos2W) {

		startH = Pos2H;
		endH = Pos1H;
		startW = Pos2W;
		endW = Pos1W;
	}
	if (Pos1H<Pos2H && Pos1W>Pos2W) {
		startH = Pos1H;
		endH = Pos2H;
		startW = Pos2W;
		endW = Pos1W;
	}
	if (Pos1H > Pos2H && Pos1W < Pos2W) {
		startH = Pos2H;
		endH = Pos1H;
		startW = Pos1W;
		endW = Pos2W;
	}
	DrawRectangle(warehouse, startH, startW, endH, endW, 3);
	


	if (Pos1H < Pos2H && Pos1W < Pos2W) {
		startH = Pos1H + 1;
		endH = Pos2H;
		startW = Pos1W;
		endW = Pos2W - 1;
	}
	if (Pos1H > Pos2H && Pos1W > Pos2W) {
		startH = Pos2H;
		endH = Pos1H - 1;
		startW = Pos2W + 1;
		endW = Pos1W;
	}
	if (Pos1H<Pos2H && Pos1W>Pos2W) {
		startH = Pos1H;
		endH = Pos2H - 1;
		startW = Pos2W;
		endW = Pos1W -1;
	}
	if (Pos1H > Pos2H && Pos1W < Pos2W) {
		startH = Pos2H;
		endH = Pos1H - 1;
		startW = Pos1W;
		endW = Pos2W - 1;
	}
	DrawRectangle(warehouse, startH, startW, endH, endW, 0);



	int i, j;
		if (Pos1H == Pos2H) {
			if (Pos1W < Pos2W) {
				for (j = Pos1W + 1; j <= Pos2W - 1; j++) {
					warehouse[Pos1H][j] = 3;
				}
			}
			if (Pos1W > Pos2W) {
				for (j = Pos2W + 1; j <= Pos1W - 1; j++) {
					warehouse[Pos1H][j] = 3;
				}
			}
				
		}
		if (Pos1W == Pos2W) {
			if (Pos1H < Pos2H) {
				for (i = Pos1H + 1; i <= Pos2H - 1; i++) {
					warehouse[i][Pos1W] = 3;
				}
			}
			if (Pos1H > Pos2H) {
				for (i = Pos2H + 1; i <= Pos1H - 1; i++) {
					warehouse[i][Pos1W] = 3;
				}
			}

		}
}",0
lbou433,1695942685,4,"
void FindValue(int warehouse[10][10], int* PosH, int* PosW, int value)
{
	int i;
	int j;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == value) {
				*PosH = i;
				*PosW = j;
				return;
			}
		}
	}
}
void DrawRectangle(int warehouse[10][10], int startH, int startW, int endH, int endW, int replace)
{
	int i, j;
	for (i = startH; i <= endH; i++) {
		for (j = startW; j <= endW; j++) {
			if (warehouse[i][j] == 0 || warehouse[i][j] == 3) {
				warehouse[i][j] = replace;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10])
{
	int Pos1H;
	int Pos1W;
	FindValue(warehouse,&Pos1H,&Pos1W, 1);
	int Pos2H;
	int Pos2W;
	FindValue(warehouse, &Pos2H, &Pos2W, 2);

	int startH, endH, startW, endW;

	if (Pos1H<Pos2H&&Pos1W<Pos2W){

		startH = Pos1H;
		endH = Pos2H;
		startW = Pos1W;
		endW = Pos2W;
	}
	if (Pos1H > Pos2H && Pos1W > Pos2W) {

		startH = Pos2H;
		endH = Pos1H;
		startW = Pos2W;
		endW = Pos1W;
	}
	if (Pos1H<Pos2H && Pos1W>Pos2W) {
		startH = Pos1H;
		endH = Pos2H;
		startW = Pos2W;
		endW = Pos1W;
	}
	if (Pos1H > Pos2H && Pos1W < Pos2W) {
		startH = Pos2H;
		endH = Pos1H;
		startW = Pos1W;
		endW = Pos2W;
	}
	DrawRectangle(warehouse, startH, startW, endH, endW, 3);
	


	if (Pos1H < Pos2H && Pos1W < Pos2W) {
		startH = Pos1H + 1;
		endH = Pos2H;
		startW = Pos1W;
		endW = Pos2W - 1;
	}
	if (Pos1H > Pos2H && Pos1W > Pos2W) {
		startH = Pos2H;
		endH = Pos1H - 1;
		startW = Pos2W + 1;
		endW = Pos1W;
	}
	if (Pos1H<Pos2H && Pos1W>Pos2W) {
		startH = Pos1H+1;
		endH = Pos2H;
		startW = Pos2W+1;
		endW = Pos1W;
	}
	if (Pos1H > Pos2H && Pos1W < Pos2W) {
		startH = Pos2H;
		endH = Pos1H - 1;
		startW = Pos1W;
		endW = Pos2W - 1;
	}
	DrawRectangle(warehouse, startH, startW, endH, endW, 0);



	int i, j;
		if (Pos1H == Pos2H) {
			if (Pos1W < Pos2W) {
				for (j = Pos1W + 1; j <= Pos2W - 1; j++) {
					warehouse[Pos1H][j] = 3;
				}
			}
			if (Pos1W > Pos2W) {
				for (j = Pos2W + 1; j <= Pos1W - 1; j++) {
					warehouse[Pos1H][j] = 3;
				}
			}
				
		}
		if (Pos1W == Pos2W) {
			if (Pos1H < Pos2H) {
				for (i = Pos1H + 1; i <= Pos2H - 1; i++) {
					warehouse[i][Pos1W] = 3;
				}
			}
			if (Pos1H > Pos2H) {
				for (i = Pos2H + 1; i <= Pos1H - 1; i++) {
					warehouse[i][Pos1W] = 3;
				}
			}

		}
}
",1
lcam453,1696225758,1,1,0
lche668,1696241916,1,"void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
	int rowPos, rowPos2, colPos, colPos2;
	int i, i2, j, j2;
		for (int i = 0; i < NUM_ROWS; i++) {
			for (int j = 0; j < NUM_COLS; j++) {
				if (board[i][j] == 1) {
					rowPos = i;
					colPos = j;
				}
			}
		}
	for (int i2 = 0; i2 < NUM_ROWS; i2++) {
		for (int j2 = 0; j2 < NUM_COLS; j2++) {
			if (board[i2][j2] == 2) {
				rowPos2 = i2;
				colPos2 = j2;
			}
		}
	}
	// If both destination row and column are greater
	if (colPos < colPos2 && rowPos < rowPos2) {
		for (i = colPos + 1; i = colPos2; i++) {
			board[rowPos][i] = 3;
		}
		for (i = rowPos + 1; i = rowPos2; i++) {
			board[i][colPos2] = 3;
		}
	}
	else if (colPos > colPos2 && rowPos > rowPos2) {
		for (i = colPos - 1; i = colPos2; i--) {
			board[rowPos][i] = 3;
		}
		for (i = rowPos - 1; i = rowPos2; i--) {
			board[i][colPos2] = 3;
		}
	else {
		return;
	}
}",0
lchu848,1696237873,1,"void PelletRoute(int warehouse[ROWS][COLS]) {
    int startR = -1, startC = -1, endR = -1, endC = -1;
    
    //find position of 1 and 2
    
    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (warehouse[i][j] == 1) {
                startR = i;
                startC = j;
            }
            else if (warehouse[i][j] == 2) {
                endR = i;
                endC = j;
                
            }
        }
    }
    
int horD = endR - startR;
int vertD = endC - endR;

 while (startC != endC) {
        if (hordD > 0) {
            startC++;
        } else {
            startC--;
        }
        warehouse[startR][startC] = 3;
    }

    while (startR != endR) {
        if (vertD > 0) {
            startR++;
        } else {
            startR--;
        }
        warehouse[startR][startC] = 3;
    }
}


}",0
ldea753,1695884105,1,"void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }
    
    if (colStart < colEnd) {
        for (int i = (colStart + 1); i <= colEnd; i++) {
            warehouse[rowStart][i] = 3;
        }
    }
    if (colStart > colEnd) {
        for (int i = (colStart - 1); i >= colEnd; i--) {
            warehouse[rowStart][i] = 3;
        }
    }

    if (rowStart < rowEnd) {
        for(int i = (rowStart + 1); i < rowEnd; i++) {
            warehouse[i][colEnd] = 3;
        }
    }
    if (rowStart > rowEnd) {
        for(int i = (rowStart - 1); i > rowEnd; i--) {
            warehouse[i][colEnd] = 3;
        }
    }
}",0
ldea753,1695884296,2,"void PelletRoute(int warehouse[10][10]) {
    int rowStart, colStart, rowEnd, colEnd;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    if (colStart < colEnd) {
        for (int i = (colStart + 1); i <= colEnd; i++) {
            warehouse[rowStart][i] = 3;
        }
    }
    if (colStart > colEnd) {
        for (int i = (colStart - 1); i >= colEnd; i--) {
            warehouse[rowStart][i] = 3;
        }
    }

    if (rowStart == rowEnd)
        warehouse[rowEnd][colEnd] = 2;

    if (rowStart < rowEnd) {
        for(int i = (rowStart + 1); i < rowEnd; i++) {
            warehouse[i][colEnd] = 3;
        }
    }
    if (rowStart > rowEnd) {
        for(int i = (rowStart - 1); i > rowEnd; i--) {
            warehouse[i][colEnd] = 3;
        }
    }
}",1
ldou101,1695954721,1,"void PelletRoute(warehouse){
for (int r = 0; r < 10; r++) {
    for (int c = 0; c < 10; c++){
        if (warehouse[r][c] == 1) {
            int r1=r;
            int c1=c;}
        if (warehouse[r][c] == 2) {
                int r2=r;
             int c2=c;}
        }
    }
for (int r = 0; r < 10; r++) {
    for (int c = 0; c < 10; c++){
        if ((r>r1&&r<r2)||(r<r1&&r>r2)){
            warehouse[r][c]=3;
}",0
ldou101,1695954780,2,"void PelletRoute(warehouse){
    int r1,r2,c1,c2;
for (int r = 0; r < 10; r++) {
    for (int c = 0; c < 10; c++){
        if (warehouse[r][c] == 1) {
            int r1=r;
            int c1=c;}
        if (warehouse[r][c] == 2) {
                int r2=r;
             int c2=c;}
        }
    }
for (int r = 0; r < 10; r++) {
    for (int c = 0; c < 10; c++){
        if ((r>r1&&r<r2)||(r<r1&&r>r2)){
            warehouse[r][c]=3;
}",0
ldou101,1695955645,3,"void PelletRoute(int warehouse[10][10]) {
    int r1 = -1, r2 = -1, c1 = -1, c2 = -1;

    for (int r = 0; r < 10; r++) {
        for (int c = 0; c < 10; c++) {
            if (warehouse[r][c] == 1) {
                r1 = r;
                c1 = c;
            }
            if (warehouse[r][c] == 2) {
                r2 = r;
                c2 = c;
            }
        }
    }

    for (int r = 0; r < 10; r++) {
        for (int c = 0; c < 10; c++) {
            if (r==r1&&((c>c1&&c<=c2)||(c<c1&&c>=c2))){
                warehouse[r][c] = 3;}
            if (c==c2&&((r>r2&&r<=r1)||(r<r2&&r>=r1))){
                warehouse[r][c] = 3;}
        }
    }
}",0
ldou101,1695955839,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int r1 = -1, r2 = -1, c1 = -1, c2 = -1;

    for (int r = 0; r < 10; r++) {
        for (int c = 0; c < 10; c++) {
            if (warehouse[r][c] == 1) {
                r1 = r;
                c1 = c;
            }
            if (warehouse[r][c] == 2) {
                r2 = r;
                c2 = c;
            }
        }
    }

    for (int r = 0; r < 10; r++) {
        for (int c = 0; c < 10; c++) {
            if (r==r1&&((c>c1&&c<=c2)||(c<c1&&c>=c2))){
                if ((r!=r1)&&(r!=r2)&&(c!=c1)&&(c!=c2)){
                warehouse[r][c] = 3;}}
            if (c==c2&&((r>r2&&r<=r1)||(r<r2&&r>=r1))){
                if ((r!=r1)&&(r!=r2)&&(c!=c1)&&(c!=c2)){
                warehouse[r][c] = 3;}}
        }
    }
}

int main(void) {
    int warehouse[10][10] = {
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0, 0, 0}
    };

    PelletRoute(warehouse);

    int i, j;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}",0
ldou101,1695955854,5,"void PelletRoute(int warehouse[10][10]) {
    int r1 = -1, r2 = -1, c1 = -1, c2 = -1;

    for (int r = 0; r < 10; r++) {
        for (int c = 0; c < 10; c++) {
            if (warehouse[r][c] == 1) {
                r1 = r;
                c1 = c;
            }
            if (warehouse[r][c] == 2) {
                r2 = r;
                c2 = c;
            }
        }
    }

    for (int r = 0; r < 10; r++) {
        for (int c = 0; c < 10; c++) {
            if (r==r1&&((c>c1&&c<=c2)||(c<c1&&c>=c2))){
                if ((r!=r1)&&(r!=r2)&&(c!=c1)&&(c!=c2)){
                warehouse[r][c] = 3;}}
            if (c==c2&&((r>r2&&r<=r1)||(r<r2&&r>=r1))){
                if ((r!=r1)&&(r!=r2)&&(c!=c1)&&(c!=c2)){
                warehouse[r][c] = 3;}}
        }
    }
}",0
ldou101,1695956240,6,"void PelletRoute(int warehouse[10][10]) {
    int r1 = -1, r2 = -1, c1 = -1, c2 = -1;

    for (int r = 0; r < 10; r++) {
        for (int c = 0; c < 10; c++) {
            if (warehouse[r][c] == 1) {
                r1 = r;
                c1 = c;
            }
            if (warehouse[r][c] == 2) {
                r2 = r;
                c2 = c;
            }
        }
    }

    for (int r = 0; r < 10; r++) {
        for (int c = 0; c < 10; c++) {
            if ((r==r1&&c==c1)||(r==r2&&c==c2)){
            c=c+1;}
            if (r==r1&&((c>c1&&c<=c2)||(c<c1&&c>=c2))){
                warehouse[r][c] = 3;}
            if (c==c2&&((r>r2&&r<=r1)||(r<r2&&r>=r1))){
                warehouse[r][c] = 3;}
        }
    }
}",1
lfan827,1696230919,1,"void PelletRoute(int warehouse[10][10]){
    int i,j,m,k;
    for (i = 0; i < 10; i ++){
        for (j = 0; j < 10; j ++){
            if (warehouse[i][j] == 1)
                break;
        }
        if (warehouse[i][j] == 1)
        break;
    }
    for (m = 0; m < 10; m ++){
        for (k = 0; k < 10; k ++){
            if (warehouse[m][k] == 2)
                break;
        }
        if (warehouse[m][k] == 2)
            break;
    }
    if (j > k){
        for (k = k + 1; k < j+1;k++){
            warehouse[i][k] = 3;
        }
        k = k - 1;
    }
    else{
        for (j = j + 1; j < k+1;j++){
            warehouse[i][j] = 3;
        }
        j = j - 1;
    }
    if (i > m){
        for (m = m + 1; m < i;m++){
            warehouse[m][j] = 3;
        }
    }
    else{
        for (i = i + 1; i < m;i++){
            warehouse[i][j] = 3;
        }
    }
}",0
lfan827,1696232290,2,"void PelletRoute(int warehouse[10][10]){
    int i,j,m,k,a,b;
    for (i = 0; i < 10; i ++){
        for (j = 0; j < 10; j ++){
            if (warehouse[i][j] == 1)
                break;
        }
        if (warehouse[i][j] == 1)
        break;
    }
    for (m = 0; m < 10; m ++){
        for (k = 0; k < 10; k ++){
            if (warehouse[m][k] == 2)
                break;
        }
        if (warehouse[m][k] == 2)
            break;
    }
    
    
    if (j > k){
        b = k;
        for (k = k ; k < j;k++){
            warehouse[i][k] = 3;
        }
    }
    else{
        for (j = j + 1; j < k+1;j++){
            warehouse[i][j] = 3;
        }
        b = j - 1;
    }
    if (i == m){
        warehouse[i][b] = 2;
    }
    if (i > m){
        a = m;
        for (m = m + 1; m < i;m++){
            warehouse[m][b] = 3;
        }
    }
    else{
        for (i = i + 1; i < m;i++){
            warehouse[i][b] = 3;
        }
        a = i - 1;
    }

}",0
lfan827,1696232365,3,"void PelletRoute(int warehouse[10][10]){
    int i,j,m,k,b;
    for (i = 0; i < 10; i ++){
        for (j = 0; j < 10; j ++){
            if (warehouse[i][j] == 1)
                break;
        }
        if (warehouse[i][j] == 1)
        break;
    }
    for (m = 0; m < 10; m ++){
        for (k = 0; k < 10; k ++){
            if (warehouse[m][k] == 2)
                break;
        }
        if (warehouse[m][k] == 2)
            break;
    }
    
    
    if (j > k){
        b = k;
        for (k = k ; k < j;k++){
            warehouse[i][k] = 3;
        }
    }
    else{
        for (j = j + 1; j < k+1;j++){
            warehouse[i][j] = 3;
        }
        b = j - 1;
    }
    if (i == m){
        warehouse[i][b] = 2;
    }
    if (i > m){
        for (m = m + 1; m < i;m++){
            warehouse[m][b] = 3;
        }
    }
    else{
        for (i = i + 1; i < m;i++){
            warehouse[i][b] = 3;
        }
    }

}
",0
lfan827,1696238606,4,"void PelletRoute(int warehouse[10][10]){
    int i,j,m,k,b;
    for (i = 0; i < 10; i ++){
        for (j = 0; j < 9; j ++){
            if (warehouse[i][j] == 1)
                break;
        }
        if (warehouse[i][j] == 1)
            break;
    }
    for (m = 0; m < 10; m ++){
        for (k = 0; k < 9; k ++){
            if (warehouse[m][k] == 2)
                break;
        }
        if (warehouse[m][k] == 2)
            break;
    }
    
    if (j > k){
        b = k;
        for (k = k ; k < j;k++){
            warehouse[i][k] = 3;
        }
    }
    else{
        for (j = j + 1; j < k+1;j++){
            warehouse[i][j] = 3;
        }
        b = j - 1;
    }
    if (i == m){
        warehouse[i][b] = 2;
    }
    if (i > m){
        for (m = m + 1; m < i;m++){
            warehouse[m][b] = 3;
        }
    }
    else{
        for (i = i + 1; i < m;i++){
            warehouse[i][b] = 3;
        }
    }

}",1
lgan833,1696230387,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int pellet_row, pellet_col;
	int destination_row, destination_col;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pellet_row = i;
				pellet_col = j;
			}
			if (warehouse[i][j] == 2) {
				destination_row = i;
				destination_col = j;
			}
		}
	}
	if (pellet_row < destination_row) {
		if (pellet_col < destination_col) {
			for (j = pellet_col + 1; j <= destination_col; j++) {
				warehouse[pellet_row][j] = 3;
			}
			for (i = pellet_row + 1; i <= destination_row - 1; i++) {
				warehouse[i][destination_col] = 3;
			}
		}
		if (pellet_col > destination_col) {
			for (j = destination_col; j <= pellet_col - 1; j++) {
				warehouse[pellet_row][j] = 3;
			}
			for (i = pellet_row; i < destination_row; i++) {
				warehouse[i][destination_col] = 3;
			}
		}
		if (pellet_col == destination_col) {
			for (i = pellet_row + 1; i <destination_row; i++){
				warehouse[i][pellet_col] = 3;
			}
		}
	}
	if (pellet_row > destination_row) {
		if (pellet_col < destination_col) {
			for (j = pellet_col + 1; j <= destination_col; j++) {
				warehouse[pellet_row][j] = 3;
			}
			for (i = destination_row + 1; i < pellet_row; i++) {
				warehouse[i][destination_col] = 3;
			}
		}
		if (pellet_col > destination_col) {
			for (j = destination_col; j < pellet_col; j++) {
				warehouse[pellet_row][j] = 3;
			}
			for (i = destination_row + 1; i <= pellet_row; i++) {
				warehouse[i][destination_col] = 3;
			}
		}
		if (pellet_col == destination_col) {
			for (i = destination_row + 1; i < pellet_row; i++) {
				warehouse[i][pellet_col] = 3;
			}
		}
	}
	if (pellet_row == destination_row) {
		if (pellet_col < destination_col) {
			for (j = pellet_col + 1; j < destination_col; j++) {
				warehouse[pellet_row][j] = 3;
			}
		}
		if (pellet_col > destination_col) {
			for (j = destination_col + 1; j < pellet_col; j++) {
				warehouse[pellet_row][j] = 3;
			}
		}
	}
}",1
lhal844,1695944158,1,"void FindTile(int board[10][10], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0;i < 10;i++)
	{
		for (j = 0;j < 10;j++)
		{
			if (tile == board[i][j])
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

int PelletRoute(int grid[10][10])
{
	int startposrow, startposcol, endposrow, endposcol;

	FindTile(grid, 1, &startposrow, &startposcol);
	FindTile(grid, 2, &endposrow, &endposcol);

	for (int i = startposcol; i <= endposcol; i++)
	{
		if (grid[startposrow][i] != 1)
		{
			grid[startposrow][i] = 3;
		}		
	}
	for (int i = startposrow; i <= endposrow; i++)
	{
		if (grid[i][endposcol] != 2)
		{
			grid[i][endposcol] = 3;
		}
	}
}",0
lhal844,1695944179,2,"void FindTile(int board[10][10], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0;i < 10;i++)
	{
		for (j = 0;j < 10;j++)
		{
			if (tile == board[i][j])
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int grid[10][10])
{
	int startposrow, startposcol, endposrow, endposcol;

	FindTile(grid, 1, &startposrow, &startposcol);
	FindTile(grid, 2, &endposrow, &endposcol);

	for (int i = startposcol; i <= endposcol; i++)
	{
		if (grid[startposrow][i] != 1)
		{
			grid[startposrow][i] = 3;
		}		
	}
	for (int i = startposrow; i <= endposrow; i++)
	{
		if (grid[i][endposcol] != 2)
		{
			grid[i][endposcol] = 3;
		}
	}
}",0
lhal844,1696143901,3,"int PelletRoute(int grid[10][10])
{
	int startposrow, startposcol, endposrow, endposcol;

	FindTile(grid, 1, &startposrow, &startposcol);
	FindTile(grid, 2, &endposrow, &endposcol);

	
	if (startposcol < endposcol)
	{
		for (int i = startposcol; i <= endposcol; i++)
		{
			if (grid[startposrow][i] != 1)
			{
				grid[startposrow][i] = 3;
			}
		}
	}
	else 
	{
		for (int i = startposcol; i >= endposcol; i--)
		{
			if (grid[startposrow][i] != 1)
			{
				grid[startposrow][i] = 3;
			}
		}
	}

	if (startposrow < endposrow)
	{
		for (int i = startposrow; i <= endposrow; i++)
		{
			if (grid[i][endposcol] != 2)
			{
				grid[i][endposcol] = 3;
			}
		}
	}
	else
	{
		for (int i = startposrow; i >= endposrow; i--)
		{
			if (grid[i][endposcol] != 2)
			{
				grid[i][endposcol] = 3;
			}
		}
	}

	grid[startposrow][startposcol] = 1;

	grid[endposrow][endposcol] = 2;
}",0
lhal844,1696143951,4,"void FindTile(int board[10][10], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0;i < 10;i++)
	{
		for (j = 0;j < 10;j++)
		{
			if (tile == board[i][j])
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}

void PelletRoute(int grid[10][10])
{
	int startposrow, startposcol, endposrow, endposcol;

	FindTile(grid, 1, &startposrow, &startposcol);
	FindTile(grid, 2, &endposrow, &endposcol);

	
	if (startposcol < endposcol)
	{
		for (int i = startposcol; i <= endposcol; i++)
		{
			if (grid[startposrow][i] != 1)
			{
				grid[startposrow][i] = 3;
			}
		}
	}
	else 
	{
		for (int i = startposcol; i >= endposcol; i--)
		{
			if (grid[startposrow][i] != 1)
			{
				grid[startposrow][i] = 3;
			}
		}
	}

	if (startposrow < endposrow)
	{
		for (int i = startposrow; i <= endposrow; i++)
		{
			if (grid[i][endposcol] != 2)
			{
				grid[i][endposcol] = 3;
			}
		}
	}
	else
	{
		for (int i = startposrow; i >= endposrow; i--)
		{
			if (grid[i][endposcol] != 2)
			{
				grid[i][endposcol] = 3;
			}
		}
	}

	grid[startposrow][startposcol] = 1;

	grid[endposrow][endposcol] = 2;
}",1
ljun123,1696229698,1,"void PelletRoute(int warehouse[10][10]) {
    int row;
    int col;
    int updatedRow;
    int updatedCol;

    // Find the positions of the pellet and the destination
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row = i;
                col = j;
            }
            if (warehouse[i][j] == 2) {
                updatedRow = i;
                updatedCol = j;
            }
        }
    }

    while (col != updatedCol) {
        warehouse[row][col += (col < updatedCol) ? 1 : -1] = 3;
    }

    while (row != updatedRow) {
        warehouse[row += (row < updatedRow) ? 1 : -1][col] = 3;
    }
}",0
ljun123,1696232744,2,"void PelletRoute(int warehouse[10][10]) {
    int row;
    int col;
    int updatedRow;
    int updatedCol;
    int i;
    int j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row = i;
                col = j;
            }
            if (warehouse[i][j] == 2) {
                updatedRow = i;
                updatedCol = j;
            }
        }
    }
    
    while (row < updatedRow) {
        row++;
        warehouse[row][col] = 3;
    }
    
    while (col < updatedCol) {
        col++;
        warehouse[row][col] = 3;
    }
}",0
ljun123,1696232853,3,"void PelletRoute(int warehouse[10][10]) {
    int row;
    int col;
    int updatedRow;
    int updatedCol;
    int i;
    int j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row = i;
                col = j;
            }
            if (warehouse[i][j] == 2) {
                updatedRow = i;
                updatedCol = j;
            }
        }
    }

    while (col != updatedCol) {
        if (col < updatedCol) {
            col = col + 1;
        }
        else {
            col = col - 1;
        }
        warehouse[row][col] = 3;
    }
    while (row != updatedRow) {
        if (row < updatedRow) {
            row = row + 1;
        }
        else {
            row = row - 1;
        }
        warehouse[row][col] = 3;
    }
}
",0
ljun123,1696233011,4,"void PelletRoute(int warehouse[10][10]) {
    int row;
    int col;
    int updatedRow;
    int updatedCol;
    int i;
    int j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row = i;
                col = j;
            }
            if (warehouse[i][j] == 2) {
                updatedRow = i;
                updatedCol = j;
            }
        }
    }


    while (col != updatedCol) {
        if (col < updatedCol) {
            col = col + 1;
        }
        else {
            col = col - 1;
        }
        if (warehouse[row][col] != 2) {
            warehouse[row][col] = 3;
        }
    }
    while (row != updatedRow) {
        if (row < updatedRow) {
            row = row + 1;
        }
        else {
            row = row - 1;
        }
        if (warehouse[row][col] != 2) {
            warehouse[row][col] = 3;
        }
    }
}
",1
llat663,1696231726,1,"#include <stdio.h>

void findTarget(int board[NUM_ROWS][NUM_COLS], int target, int* loc_x, int* loc_y) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (board[i][j] == target) {
                *loc_y = i;
                *loc_x = j;
                return;
            }
        }
    }
}

void PelletRoute(int board[NUM_ROWS][NUM_COLS]) {
    int p_x, p_y, d_x, d_y, dir, cur_x, cur_y = 0;

    findTarget(board, 1, &p_x, &p_y);
    findTarget(board, 2, &d_x, &d_y);

    // figure out which direction on the x axis to move.
    if (d_x > p_x)
        dir = 1;
    else if (d_x < p_x)
        dir = -1;
    else
        dir = 0;

    if (dir != 0) {
        cur_x = p_x;

        while (cur_x != d_x) {
            board[p_y][cur_x] = 3;
            cur_x += dir;
        }
    }

    // figure out which direction on the y axis to move.
    if (d_y > p_y)
        dir = 1;
    else if (d_y < p_y)
        dir = -1;
    else
        dir = 0;


    if (dir != 0) {
        cur_y = p_y;

        while (cur_y != d_y) {
            board[cur_y][d_x] = 3;
            cur_y += dir;
        }
    }

    board[p_y][p_x] = 1;
}
",0
llat663,1696233265,2,"void PelletRoute(int board[10][10]) {
    int p_x, p_y, d_x, d_y, dir, cur_x, cur_y = 0;

    //Find pallet location
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (board[i][j] == 1) {
                p_y = i;
                p_x = j;
                break;
            }
        }
    }

    //Find destination location
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (board[i][j] == 2) {
                d_y = i;
                d_x = j;
                break;
            }
        }
    }
    // figure out which direction on the x axis to move.
    if (d_x > p_x)
        dir = 1;
    else if (d_x < p_x)
        dir = -1;
    else
        dir = 0;

    if (dir != 0) {
        cur_x = p_x;

        while (cur_x != d_x) {
            board[p_y][cur_x] = 3;
            cur_x += dir;
        }
    }

    // figure out which direction on the y axis to move.
    if (d_y > p_y)
        dir = 1;
    else if (d_y < p_y)
        dir = -1;
    else
        dir = 0;


    if (dir != 0) {
        cur_y = p_y;

        while (cur_y != d_y) {
            board[cur_y][d_x] = 3;
            cur_y += dir;
        }
    }

    board[p_y][p_x] = 1;
}",1
llei074,1696125987,1,"void PelletRoute(int warehouse[10][10])
{
int row, col, new_row, new_col;
int i = 0;
int j = 0;

for (i = 0; i < 10; i++ ) {
		for (j = 0; j < 10; j++ ) {
		
			if (warehouse[i][j] == 1) {
				row = i;
				col = j;
			}
			if (warehouse[i][j] == 2) {
				new_row = i;
				new_col = j;
			}
		}
}

int x_move, y_move;

y_move = new_col - col; 	
i = row;
j = col;
	
	if (y_move > -1) {

		while (j < y_move) {

		j++;
		warehouse[row][col + j] = 3;
		}
	}
	else if (y_move < 1) {

		while (j > y_move) {

		j--;
		warehouse[row][col - j] = 3;
		}
	}

x_move = new_row - col;	

	if (x_move > -1) {

		while (i < x_move) {

		i++;
		warehouse[row + i][col] = 3;
		}
	}
	else if (x_move < 1) {

		while (i > y_move) {

		i--;
		warehouse[row - i][col] = 3;
			}
	}

}",0
lli393,1695849719,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int starti, startj;
	int endi, endj;
	for (i = 0; i < 10; i++){
		for (j = 0; j < 10; j++){
			if (warehouse[i][j] == 1){
				starti = i;
				startj = j;
			}
		}
	}
	for (i = 0; i < 10; i++){
		for (j = 0; j < 10; j++){
			if (warehouse[i][j] == 2){
				endi = i;
				endj = j;
			}
		}
	}
	
	//if end row is bottom of start
	if (endi - starti > 0){
		for (i = starti; i <= endi; i++){
			if (warehouse[i][endj] == 0){
				warehouse[i][endj] = 3;
			}
		}
	//else if end row is top of start
	}else if (endi - starti < 0){
		for (i = endi; i <= starti; i++){
			if (warehouse[i][endj] == 0){
				warehouse[i][endj] = 3;
			}
			
		}
	}
	
	//if end col is right of start
	if (endj - startj > 0){
		for (j = startj; j <= endj; j++){
			
			if (warehouse[starti][j] == 0){
				warehouse[starti][j] = 3;
			}
		}
	//else if end is left of start
	}else if (endj - startj < 0){
		for (j = endj; j <= startj; j++){
			if (warehouse[starti][j] == 0){
				warehouse[starti][j] = 3;
			}
		}
	}
}
",1
llu744,1696238792,1,"void PelletRoute(int warehouse[10][10]) 
{
    int pelletrow;
    int pelletcol;
    int bestrow;
    int bestcol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletrow = i;
                pelletcol = j;
            }
            if (warehouse[i][j] == 2) {
                bestrow = i;
                bestcol = j;
            }
        }
    }
    
    for (int j = pelletcol; j != bestcol; j += (bestcol - pelletcol) / (bestcol - pelletcol)) {
        warehouse[pelletrow][j] = 3; 
    }
    
    for (int i = pelletrow; i != bestrow; i += (bestrow - pelletrow) / (bestrow - pelletrow)) {
        warehouse[i][bestcol] = 3; 
    }
}",0
llu744,1696238863,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletrow;
    int pelletcol;
    int bestrow;
    int bestcol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletrow = i;
                pelletcol = j;
            }
            if (warehouse[i][j] == 2) {
                bestrow = i;
                bestcol = j;
            }
        }
    }
    
    for (int j = pelletcol; j != bestcol; j += (bestcol > pelletcol) ? 1 : -1) {
        warehouse[pelletrow][j] = 3; 
    }
    
    for (int i = pelletrow; i != bestrow; i += (bestrow > pelletrow) ? 1 : -1) {
        warehouse[i][bestcol] = 3; 
    }
}",0
llu744,1696239249,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletrow;
    int pelletcol;
    int bestrow;
    int bestcol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletrow = i;
                pelletcol = j;
            }
            if (warehouse[i][j] == 2) {
                bestrow = i;
                bestcol = j;
            }
        }
    }
    
    for (int j = pelletcol; j != bestcol; j += (bestcol > pelletcol) ? 1 : -1) {
        warehouse[pelletrow][j] = 3; 
    }
    
    for (int i = pelletrow; i != bestrow; i += (bestrow > pelletrow) ? 1 : -1) {
        warehouse[i][bestcol] = 3; 
    }
    
    warehouse[pelletrow][pelletcol] = 1;
    warehouse[bestrow][bestcol] = 2;
}",1
lpry623,1695617917,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int prow, pcol, drow, dcol;
     for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                prow = i;
                pcol = j;
            } else if (warehouse[i][j] == 2) {
                drow = i;
                dcol = j;
            }
        }
    }

    while (pcol != dcol) {
        if (pcol < dcol) {
            pcol ++;
        }
        else {
            pcol--;
        }
        warehouse[prow][pcol] = 3;
    }

    while (prow != pcol) {
        if (prow < drow) {
            prow ++;
        }
        else {
            prow --;
        }
        warehouse[prow][pcol] = 3;
    }
}",0
lpry623,1695618359,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int prow, pcol, drow, dcol;
     for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                prow = i;
                pcol = j;
            } else if (warehouse[i][j] == 2) {
                drow = i;
                dcol = j;
            }
        }
    }
    warehouse[prow][pcol] = 1;
    

    while (pcol != dcol) {
        if (pcol < dcol) {
            pcol ++;
        }
        else {
            pcol --;
        }
        warehouse[prow][pcol] = 3;
    }

    while (prow != drow) {
        if (prow < drow) {
            prow ++;
        }
        else {
            prow --;
        }
        warehouse[prow][pcol] = 3;
    }
    warehouse[drow][dcol] = 2;
}",1
lrei069,1695867878,1,"void PelletRoute(int warehouse[10][10]) {
int original_row, original_col, final_row, final_col;    
    
    for(int i = 0; i < 10; i++) {
        for(int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                original_row = i;
                original_col = j;
            }
            
            if (warehouse[i][j] == 2) {
                final_row = i;
                final_col = j;
            }
        }
    }
    
    for(int a = original_row+1; a < final_row; a++) {
        warehouse[a][final_col] = 3;
    }
    
    for (int b = original_col+1; b <= final_col; b++) {
        warehouse[original_row][b] = 3;
    }
}",0
lrei069,1695868656,2,"void PelletRoute(int warehouse[10][10]) {
int original_row, original_col, final_row, final_col;    
    
    for(int i = 0; i < 10; i++) {
        for(int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                original_row = i;
                original_col = j;
            }
            
            if (warehouse[i][j] == 2) {
                final_row = i;
                final_col = j;
            }
        }
    }
    
if (original_row < final_row) {
    for(int a = original_row+1; a < final_row; a++) {
        warehouse[a][final_col] = 3;
    }
}

if (original_col < final_col) {
    for (int b = original_col+1; b <= final_col; b++) {
            warehouse[original_row][b] = 3;
    }
}

if (original_row > final_row) {
    for(int c = original_row-1; c > final_row; c--) {
        warehouse[c][final_col] = 3;
    }
}

if (original_col > final_col) {
    for (int d = original_col-1; d >= final_col; d--) {
            warehouse[original_row][d] = 3;
    }
}

}",0
lrei069,1695868988,3,"void PelletRoute(int warehouse[10][10]) {
int original_row, original_col, final_row, final_col;    
    
for(int i = 0; i < 10; i++) {
    for(int j = 0; j < 10; j++) {
        if (warehouse[i][j] == 1) {
            original_row = i;
            original_col = j;
        }
        
        if (warehouse[i][j] == 2) {
            final_row = i;
            final_col = j;
        }
    }
}
    
if (original_row < final_row) {
    for(int a = original_row+1; a < final_row; a++) {
        warehouse[a][final_col] = 3;
    }
}

if (original_col < final_col) {
    for (int b = original_col+1; b < final_col; b++) {
            warehouse[original_row][b] = 3;
    }
}

if (original_row > final_row) {
    for(int c = original_row-1; c > final_row; c--) {
        warehouse[c][final_col] = 3;
    }
}

if (original_col > final_col) {
    for (int d = original_col-1; d > final_col; d--) {
            warehouse[original_row][d] = 3;
    }
}

if (original_row != final_row) {
    warehouse[original_row][final_col] = 3;
}

}",0
lrei069,1695869692,4,"void PelletRoute(int warehouse[10][10]) {
int original_row, original_col, final_row, final_col;    
    
for(int i = 0; i < 10; i++) {
    for(int j = 0; j < 10; j++) {
        if (warehouse[i][j] == 1) {
            original_row = i;
            original_col = j;
        }
        
        if (warehouse[i][j] == 2) {
            final_row = i;
            final_col = j;
        }
    }
}
    
if (original_row < final_row) {
    for(int a = original_row+1; a < final_row; a++) {
        warehouse[a][final_col] = 3;
    }
}

if (original_col < final_col) {
    for (int b = original_col+1; b < final_col; b++) {
            warehouse[original_row][b] = 3;
    }
}

if (original_row > final_row) {
    for(int c = original_row-1; c > final_row; c--) {
        warehouse[c][final_col] = 3;
    }
}

if (original_col > final_col) {
    for (int d = original_col-1; d > final_col; d--) {
            warehouse[original_row][d] = 3;
    }
}

if (original_row != final_row && original_col != final_col) {
    warehouse[original_row][final_col] = 3;
}

} ",1
lros711,1695814097,1,"#include <stdio.h>
/* The dimensions of the floor */
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int arr[NUM_ROWS][NUM_COLS])
{
	//Define variables
	int start_pos_r = -1;
	int start_pos_c = -1;
	int end_pos_r = -1;
	int end_pos_c = -1;

	//find the position of start (pellet)
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (arr[i][j] == 1)
			{
				start_pos_r = i;
				start_pos_c = j;
			}
		}
	}
	//find the position of end (destination)
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (arr[i][j] == 2)
			{
				end_pos_r = i;
				end_pos_c = j;

			}
		}
	}

	//horrizontal steps COL
	while (start_pos_c != end_pos_c) 
	{
		if (start_pos_c < end_pos_c) 
		{
			start_pos_c++;
		}
		else 
		{
			start_pos_c--;
		}
		arr[start_pos_r][start_pos_c] = 3;
	}

	//vertical steps ROW
	while (start_pos_r != end_pos_r) 
	{
		if (start_pos_r < end_pos_r) 
		{
			start_pos_r++;
		}
		else 
		{
			start_pos_r--;
		}
		arr[start_pos_r][end_pos_c] = 3;
	}

	//change destination back to 2
	arr[end_pos_r][end_pos_c] = 2;
}",1
lsal082,1696230630,1,"void PelletRoute(int warehouse[10][10]){
    int oneRow, oneCol, twoRow, twoCol;
    
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j){
            if (warehouse[i][j] == 1){
                oneRow = i;
                oneCol = j;
                
            } else if (warehouse[i][j] == 2){
                twoRow = i;
                twoCol = j;
            }
                
        }
    }
    
    while (oneCol != twoCol){
        if (oneCol < twoCol) {
            oneCol = oneCol + 1;
        }
        else {
            oneCol--;
        }
        if (warehouse[oneRow][oneCol] != 2){
            warehouse[oneRow][oneCol] = 3;
        }
        
    }
    
    while (oneRow != twoRow){
        if (oneRow < twoRow) {
            oneRow = oneRow + 1;
        }
        else {
            oneRow--;
        }
        if (warehouse[oneRow][oneCol] != 2){
            warehouse[oneRow][oneCol] = 3;
        }
        
    }
}",1
lsu376,1695888613,1,"#include <stdio.h>

void PelletRoute(int floor[10][10]) {
	int pellet_i;
	int pellet_j;
	int destination_i;
	int destination_j;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (floor[i][j] == 1) {
				pellet_i = i;
				pellet_j = j;
			}
			if (floor[i][j] == 2) {
				destination_i = i;
				destination_j = j;
			}
		}
	}
	while (pellet_j != destination_j) {
		if (pellet_j < destination_j) {
			pellet_j++;
		}
		else {
			pellet_j--;
		}
		floor[pellet_i][pellet_j] = 3;
	}
	while (pellet_i !=destination_i) {
		if (pellet_i < destination_i) {
			pellet_i++;
		}else {
			pellet_i--;
		}
		floor[pellet_i][pellet_j] = 3;
	}
}",0
lsu376,1695889693,2,"#include <stdio.h>

void PelletRoute(int floor[10][10]) {
	int pellet_i;
	int pellet_j;
	int destination_i;
	int destination_j;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (floor[i][j] == 1) {
				pellet_i = i;
				pellet_j = j;
			}
			if (floor[i][j] == 2) {
				destination_i = i;
				destination_j = j;
			}
		}
	}
	while (pellet_j != destination_j) {
		if (pellet_j < destination_j) {
			pellet_j++;
		}
		else {
			pellet_j--;
		}
		floor[pellet_i][pellet_j] = 3;
	}
	while (pellet_i !=destination_i) {
		if (pellet_i < destination_i) {
			pellet_i++;
		}else {
			pellet_i--;
		}
		floor[pellet_i][pellet_j] = 3;
	}
	floor[destination_i][destination_j] = 2;
}",1
ltan813,1696243575,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, desRow, desCol;


    for (int i = 0; i < 10; i++) {
        
        for (int j = 0; j < 10; j++) {
            
            if (warehouse[i][j] == 1) {
                
                pelletRow = i;
                pelletCol = j;
                
            } else if (warehouse[i][j] == 2) {
                
                desRow = i;
                desCol = j;
            }
        }
    }


    while (pelletCol != desCol) {
        
        if (pelletCol < desCol) {
            pelletCol++;
            
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    

    while (pelletRow != desRow) {
        
        if (pelletRow < desRow) {
            pelletRow++;
            
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}

",0
ltan813,1696243861,2,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, desRow, desCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                desRow = i;
                desCol = j;
            }
        }
    }

    while (pelletCol != desCol) {
        if (pelletCol < desCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != desRow) {
        if (pelletRow < desRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
ltan813,1696243989,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }


    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }



    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
ltan813,1696244101,4,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, desRow, desCol;
 
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                desRow = i;
                desCol = j;
            }
        }
    }
 
    for (int col = pelletCol; col != desCol; col += (pelletCol < desCol) ? 1 : -1) {
        warehouse[pelletRow][col] = 3;
    }
 
    for (int row = pelletRow; row != desRow; row += (pelletRow < desRow) ? 1 : -1) {
        warehouse[row][desCol] = 3;
    }
}",0
ltan813,1696244270,5,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    for (int col = pelletCol; col != destCol; col += (pelletCol < destCol) ? 1 : -1) {
        warehouse[pelletRow][col] = 3;
    }

    for (int row = pelletRow; row != destRow; row += (pelletRow < destRow) ? 1 : -1) {
        warehouse[row][destCol] = 3;
    }
}",0
lvin900,1696235724,1,"#include <stdio.h>
#include <stdlib.h>

void PelletRoute(int warehouse[10][10]) {

	int i;
	int j;
	int k;
	int l;
	int row1;
	int col1;
	int row2;
	int col2;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
		}
	}
	for (k = 0; k < 10; k++) {
		for (l = 0; l < 10; l++) {
			if (warehouse[k][l] == 2) {
				row2 = k;
				col2 = l;
			}
		}

	}
	int g;
	int h;
	if (col1 > col2) {
		for (g = col1; g > col2; g--) {
			warehouse[row1][(g - 1)] = 3;
		}
	}
	if (col1 < col2) {
		for (g = col1; g < col2; g++) {
			warehouse[row1][(g + 1)] = 3;
		}
	}
	if (row1 > row2) {
		for (h = row1; h > row2; h--) {
			warehouse[(h - 1)][col2] = 3;
		}
	}
	if (row1 < row2) {
		for (h = row1; h < row2; h++) {
			warehouse[(h + 1)][col2] = 3;
		}
	}
	warehouse[row2][col2] = 2;
}",1
lwer802,1696243292,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Locate the pellet and the destination
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move horizontally
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            warehouse[pelletRow][pelletCol + 1] = 3;
            pelletCol++;
        } else {
            warehouse[pelletRow][pelletCol - 1] = 3;
            pelletCol--;
        }
    }

    // Move vertically
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            warehouse[pelletRow + 1][pelletCol] = 3;
            pelletRow++;
        } else {
            warehouse[pelletRow - 1][pelletCol] = 3;
            pelletRow--;
        }
    }
}
",0
lwon290,1696218385,1,"void PelletRoute(int warehouse[10][10])
{
	int locRow, locCol, desRow, desCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				locRow = i;
				locCol = j;
			}
			else if (warehouse[i][j] == 2) {
				desRow = i;
				desCol = j;
			}
		}
	}

	int xDir, yDir, xDist, yDist;

	if (desRow - locRow < 0) {
		yDir = -1;
	}
	else {
		yDir = 1;
	}

	if (desCol - locCol < 0) {
		xDir = -1;
	}
	else {
		xDir = 1;
	}

	xDist = (desCol - locCol) * xDir;
	yDist = (desRow - locRow) * yDir;

	for (int i = locRow + yDir; i != desRow; i += yDir) {
		warehouse[i][desCol] = 3;
	}

	for (int i = locCol + xDir; i != desCol; i += xDir) {
		warehouse[locRow][i] = 3;
	}

	warehouse[locRow][desCol] = 3;
}",0
lwon290,1696218470,2,"void PelletRoute(int warehouse[10][10])
{
	int locRow, locCol, desRow, desCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				locRow = i;
				locCol = j;
			}
			else if (warehouse[i][j] == 2) {
				desRow = i;
				desCol = j;
			}
		}
	}

	int xDir, yDir;

	if (desRow - locRow < 0) {
		yDir = -1;
	}
	else {
		yDir = 1;
	}

	if (desCol - locCol < 0) {
		xDir = -1;
	}
	else {
		xDir = 1;
	}

	for (int i = locRow + yDir; i != desRow; i += yDir) {
		warehouse[i][desCol] = 3;
	}

	for (int i = locCol + xDir; i != desCol; i += xDir) {
		warehouse[locRow][i] = 3;
	}

	warehouse[locRow][desCol] = 3;
}",0
lwon290,1696218876,3,"void PelletRoute(int warehouse[10][10])
{
	int locRow, locCol, desRow, desCol;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				locRow = i;
				locCol = j;
			}
			else if (warehouse[i][j] == 2) {
				desRow = i;
				desCol = j;
			}
		}
	}

	int xDir, yDir;

	if (desRow - locRow < 0) {
		yDir = -1;
	}
	else {
		yDir = 1;
	}

	if (desCol - locCol < 0) {
		xDir = -1;
	}
	else {
		xDir = 1;
	}

	if (desRow - locRow != 0) {
		for (int i = locRow + yDir; i != desRow; i += yDir) {
			warehouse[i][desCol] = 3;
		}

		if (desCol - locCol != 0) {
			warehouse[locRow][desCol] = 3;
		}
	}

	if (desCol - locCol != 0) {
		for (int i = locCol + xDir; i != desCol; i += xDir) {
			warehouse[locRow][i] = 3;
		}

		if (desRow - locRow != 0) {
			warehouse[locRow][desCol] = 3;
		}
	}
}",1
lyou975,1696109532,1,"void PelletRoute(int wharehouse[10][10]) {

// find pellet and destination locations //

    int rowpellet;
    int colpellet;
    int rowdest;
    int coldest;
    int i;
    int j;
    for (i = 0; i < 10; i++) {

        for (j = 0; j < 10; j++){

            if (wharehouse[i][j] == 1) {

                rowpellet = i;
                colpellet = j;
            }
            if (wharehouse[i][j] == 2) {

                rowdest = i;
                coldest = j;
            }
        }
    }

    // fill all horizontal values with 3 
    if (colpellet < coldest){
        for (j = colpellet + 1; j <= coldest; j++) {
        
             wharehouse[rowpellet][j] = 3;
        }
    }
    else {
        for(j = colpellet - 1; j >= coldest; j = j - 1){

            wharehouse[rowpellet][j] = 3;
        }
    }

    // fill all vertical values with 3
    if (rowpellet < rowdest) {

        for(i = rowpellet + 1; i < rowdest; i++){

            wharehouse[i][coldest] = 3;
        }
    }
    else {
        for(i = rowpellet - 1; i < rowdest; i = i - 1){

            wharehouse[i][coldest] = 3;
        }
    }
}",0
lyou975,1696109898,2,"void PelletRoute(int wharehouse[10][10]) {

// find pellet and destination locations //

    int rowpellet;
    int colpellet;
    int rowdest;
    int coldest;
    int i;
    int j;
    for (i = 0; i < 10; i++) {

        for (j = 0; j < 10; j++){

            if (wharehouse[i][j] == 1) {

                rowpellet = i;
                colpellet = j;
            }
            if (wharehouse[i][j] == 2) {

                rowdest = i;
                coldest = j;
            }
        }
    }

    // fill all horizontal values with 3 
    if (colpellet < coldest){
        for (j = colpellet + 1; j < coldest; j++) {
        
             wharehouse[rowpellet][j] = 3;
        }
    }
    else {
        for(j = colpellet - 1; j > coldest; j = j - 1){

            wharehouse[rowpellet][j] = 3;
        }
    }

    // fill all vertical values with 3
    if (rowpellet < rowdest) {

        for(i = rowpellet; i < rowdest; i++){

            wharehouse[i][coldest] = 3;
        }
    }
    else {
        for(i = rowpellet; i > rowdest; i = i - 1){

            wharehouse[i][coldest] = 3;
        }
    }
}
",0
lyou975,1696149659,3,"void PelletRoute(int wharehouse[10][10]) {

// find pellet and destination locations //

    int rowpellet;
    int colpellet;
    int rowdest;
    int coldest;
    int i;
    int j;
    int coldifference = colpellet - coldest;
    int rowdifference = rowpellet - rowdest;

    for (i = 0; i < 10; i++) {

        for (j = 0; j < 10; j++){

            if (wharehouse[i][j] == 1) {

                rowpellet = i;
                colpellet = j;
            }
            if (wharehouse[i][j] == 2) {

                rowdest = i;
                coldest = j;
            }
        }
    }

    while (colpellet != coldest) {

        if (coldifference > 0) {
            colpellet--;
        }
        else {
            colpellet++;
        }
        if (wharehouse[rowpellet][colpellet] != 2) {
            wharehouse[rowpellet][colpellet] = 3;
        }
    }

    while (rowpellet != rowdest) {

        if (rowdifference > 0) {
            rowpellet--;
        } 
        else {
            rowpellet++;
        }

        if (wharehouse[rowpellet][colpellet] != 2) {
            wharehouse[rowpellet][colpellet] = 3;
        }
    }
}
",0
lyou975,1696149765,4,"void PelletRoute(int wharehouse[10][10]) {

// find pellet and destination locations //

    int rowpellet;
    int colpellet;
    int rowdest;
    int coldest;
    int i;
    int j;

    for (i = 0; i < 10; i++) {

        for (j = 0; j < 10; j++){

            if (wharehouse[i][j] == 1) {

                rowpellet = i;
                colpellet = j;
            }
            if (wharehouse[i][j] == 2) {

                rowdest = i;
                coldest = j;
            }
        }
    }

    int coldifference = colpellet - coldest;
    int rowdifference = rowpellet - rowdest;

    while (colpellet != coldest) {

        if (coldifference > 0) {
            colpellet--;
        }
        else {
            colpellet++;
        }
        if (wharehouse[rowpellet][colpellet] != 2) {
            wharehouse[rowpellet][colpellet] = 3;
        }
    }

    while (rowpellet != rowdest) {

        if (rowdifference > 0) {
            rowpellet--;
        } 
        else {
            rowpellet++;
        }

        if (wharehouse[rowpellet][colpellet] != 2) {
            wharehouse[rowpellet][colpellet] = 3;
        }
    }
}
",1
mabb997,1695774059,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, rowPos1, colPos1, rowPos2, colPos2;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowPos1 = i;
				colPos1 = j;
			}

			if (warehouse[i][j] == 2) {
				rowPos2 = i;
				colPos2 = j;
			}
		}
	}

	int hor, ver;
	hor = colPos2 - colPos1;
	ver = rowPos2 - rowPos1;

	if (hor > 0) {
		for (i = 1; i < hor; i++) {
			warehouse[rowPos1][colPos1 + i] = 3;
		}
	}

	if (hor < 0) {
		hor = colPos1 - colPos2;
		for (i = 1; i < hor; i++) {
			warehouse[rowPos1][colPos1 - i] = 3;
		}

	}



	if (colPos1 == colPos2) {
	j = 1;
	}

	else {
	j = 0;
	}

	if (ver > 0) {
		for (i = j; i < ver; i++) {
			warehouse[rowPos1 + i][colPos2] = 3;
		}
	}

	if (ver < 0) {
		ver = rowPos1 - rowPos2;
		for (i = j; i < ver; i++) {
			warehouse[rowPos1 - i][colPos2] = 3;
		}
	}
}",1
mahu925,1695622937,1,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
    int x,y;
    int start[2] = {0,0};
    int end[2] = {0,0};
    for(y=0; y<10;y++){
        for(x=0; x<10;x++){

            if (warehouse[y][x] == 1){
                start[0] = y;
                start[1] = x;
                
            }
            if (warehouse[y][x] == 2){
                end[0] = y;
                end[1] = x;
            }
            
        }
    }
    
    for(x=start[1]+1; x<=end[1];x++){
        warehouse[start[0]][x] = 3;
    }
    
    for(y=start[0]+1; y<end[0];y++){
        warehouse[y][end[1]] = 3;
    }
}",0
mahu925,1695626861,2,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
    int x,y;
    int startX, startY, endX, endY = 0;
    int minX, minY, maxX, maxY = 0;
    for(y=0; y<10;y++){
        for(x=0; x<10;x++){

            if (warehouse[y][x] == 1){
                startY = y;
                startX = x;
                printf(""start y: %d  start x: %d\n"", startY,startX);
                
            }
            if (warehouse[y][x] == 2){
                endY = y;
                endX = x;
                printf(""end y: %d  end x: %d\n"", endY,endX);
            }
            
        }
    }
    
    if (startX > endX){
        maxX = startX;
        minX = endX;
    } else{
        maxX = endX;
        minX = startX;
    }
    
    if (startY > endY){
        maxY = startY;
        minY = endY;
    } else{
        maxY = endY;
        minY = startY;
    }
    
    for(x=minX; x<=maxX;x++){
        warehouse[startY][x] = 3;
    }
    
    for(y=minY; y<=maxY;y++){
        warehouse[y][endX] = 3;
    }
    warehouse[startY][startX] = 1;
    warehouse[endY][endX] = 2;
}",0
mahu925,1695626906,3,"#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
    int x,y;
    int startX, startY, endX, endY = 0;
    int minX, minY, maxX, maxY = 0;
    for(y=0; y<10;y++){
        for(x=0; x<10;x++){

            if (warehouse[y][x] == 1){
                startY = y;
                startX = x;
                
            }
            if (warehouse[y][x] == 2){
                endY = y;
                endX = x;
            }
            
        }
    }
    
    if (startX > endX){
        maxX = startX;
        minX = endX;
    } else{
        maxX = endX;
        minX = startX;
    }
    
    if (startY > endY){
        maxY = startY;
        minY = endY;
    } else{
        maxY = endY;
        minY = startY;
    }
    
    for(x=minX; x<=maxX;x++){
        warehouse[startY][x] = 3;
    }
    
    for(y=minY; y<=maxY;y++){
        warehouse[y][endX] = 3;
    }
    warehouse[startY][startX] = 1;
    warehouse[endY][endX] = 2;
}",1
mbah279,1696022057,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow = -1, pelletCol = -1;
    int destRow = -1, destCol = -1;

    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    if (pelletRow == destRow) {
        int startCol = (pelletCol < destCol) ? pelletCol : destCol;
        int endCol = (pelletCol < destCol) ? destCol : pelletCol;
        
        for (int col = startCol; col <= endCol; col++) {
            warehouse[pelletRow][col] = 3;
        }
    }

    if (pelletCol == destCol) {
        int startRow = (pelletRow < destRow) ? pelletRow : destRow;
        int endRow = (pelletRow < destRow) ? destRow : pelletRow;
        
        for (int row = startRow; row <= endRow; row++) {
            warehouse[row][pelletCol] = 3;
        }
    }
}",0
mbah279,1696022266,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow = -1, pelletCol = -1;
    int destRow = -1, destCol = -1;

    // Find the positions of the pellet and destination
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Move horizontally to line up with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move vertically to reach the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
mbal759,1696155870,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    //find index for ""1""
    //find index for ""2""
    int i, j;
    
    int worker = 1;
    int worker_row, worker_col;
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == worker)
            {
                worker_row = i;
                worker_col = j;
            }
        }
    }
    
    int box = 2;
    int box_row, box_col;
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == box)
            {
                box_row = i;
                box_col = j;
            }
        }
    }

    //replacing stuff
    if (box_row == worker_row)
    {
        if (box_col > worker_col)
        {
            for (j = worker_col+1; j < box_col; j++)
            {
                warehouse[worker_row][j] = 3;//replace 0s with 3s
            }
        }
        //if less than, -ve for loop moving to the left
        else if (box_col < worker_col)
        {
        for (j = worker_col-1; j > box_col; j--)
            {
                warehouse[worker_row][j] = 3;//replace 0s with 3s
            }
        }
    }
    else if (box_col == worker_col)
    {
        //check if row index for box > worker
        //if greater, +ve for loop moving down
        if (box_row > worker_row)
        {
            for (i = worker_row+1; i < box_row; i++)
            {
                warehouse[i][box_col] = 3;//replace 0s with 3s
            }
        }
        //if less than, -ve for loop moving up
        if (box_row < worker_row)
        {
        for (i = worker_row-1; i > box_row; i--)
            {
                warehouse[i][box_col] = 3;//replace 0s with 3s
            }
        }
    }
    
    //check if col index for box > worker
    //if greater, +ve for loop moving to the right
    else
    {
        if (box_col > worker_col)
        {
            for (j = worker_col+1; j <= box_col; j++)
            {
                warehouse[worker_row][j] = 3;//replace 0s with 3s
            }
        }
        //if less than, -ve for loop moving to the left
        else if (box_col < worker_col)
        {
        for (j = worker_col-1; j >= box_col; j--)
            {
                warehouse[worker_row][j] = 3;//replace 0s with 3s
            }
        }
        //check if row index for box > worker
        //if greater, +ve for loop moving down
        if (box_row > worker_row)
        {
            for (i = worker_row+1; i < box_row; i++)
            {
                warehouse[i][box_col] = 3;//replace 0s with 3s
            }
        }
        //if less than, -ve for loop moving up
        if (box_row < worker_row)
        {
        for (i = worker_row-1; i > box_row; i--)
            {
                warehouse[i][box_col] = 3;//replace 0s with 3s
            }
        }
    }
}",1
mboy221,1695688081,1,"void PelletRoute(int warehouse[10][10])
{
    int PalS, PalE;
    int PalS2, PalE2;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1) {
                PalS = i;
                PalS2 = j;
            }
            if (warehouse[i][j] == 2) {
                PalE = i;
                PalE2 = j;
            }
        }
    }
    int l = PalS2;
    int k = PalS;
    int num;
    for (int l = PalS2; l < PalE2+1; l++) {
        if (warehouse[k][l]==0) {
            warehouse[k][l] = 3;
            num = l;
        }
    }
    l = num;
    for (int k = PalS; k < PalE; k++) {
        if (warehouse[k][l]==0) {
            warehouse[k][l] = 3;
        }
    }
}",0
mboy221,1695692507,2,"void PelletRoute(int warehouse[10][10])
{
    int PalS, PalE;
    int PalS2, PalE2;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1) {
                PalS = i;
                PalS2 = j;
            }
            if (warehouse[i][j] == 2) {
                PalE = i;
                PalE2 = j;
            }
        }
    }
    int l = PalS2;
    int k = PalS;
    int num = PalS2;
    for (int l = PalS2; l < PalE2+1; l++) {
        if (warehouse[k][l]==0) {
            warehouse[k][l] = 3;
            num = l;
        }
    }
    l = num;
    for (int k = PalS; k < PalE; k++) {
        if (warehouse[k][l]==0) {
            warehouse[k][l] = 3;
        }
    }
    l = PalE2;
    for (int k = PalE; k < PalS+1; k++) {
        if (warehouse[k][l]==0) {
            warehouse[k][l] = 3;
            num = k;
        }
    }
    l = num;
    for (int l = PalE2; l < PalS2; l++) {
        if (warehouse[k][l]==0) {
            warehouse[k][l] = 3;
        }
    }
    
}",0
mboy221,1695809992,3,"void PelletRoute(int warehouse[10][10])
{
    int PalS, PalE;
    int PalS2, PalE2;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1) {
                PalS = i;
                PalS2 = j;
            }
            if (warehouse[i][j] == 2) {
                PalE = i;
                PalE2 = j;
            }
        }
    }

    if ((PalS == 0)&&(PalS2 == 0)&&(PalE == 0)&&(PalE2 == 0)) {
        return;
    }

    if ((PalS <= PalE) && (PalS2 <= PalE2)) {
        for (int i = PalS+1; i<PalE; i++) {
            warehouse[i][PalE2] = 3;
        }
        for (int j = PalS2+1; j<PalE2;j++) {
            warehouse[PalS][j] = 3;
        }
    }
    if ((PalS2 >= PalE2)&&(PalE >= PalS)) {
        for (int i = PalS+1; i<PalE; i++) {
            warehouse[i][PalE2] = 3;
        }
        for (int j = PalE2+1; j<PalS2;j++) {
            warehouse[PalS][j] = 3;
        }

    }
    if ((PalE <= PalS)&&(PalE2 <= PalS2)) {
        for (int k = PalE+1; k<PalS; k++) {
            warehouse[k][PalE2] = 3;
        }
        for (int l = PalE2+1; l<PalS2;l++) {
            warehouse[PalS][l] = 3;
        }
    }
    if ((PalS >= PalE)&&(PalE2 >= PalS2)) {
        for (int k = PalE+1; k<PalS; k++) {
            warehouse[k][PalE2] = 3;
        }
        for (int j = PalS2+1; j<PalE2;j++) {
            warehouse[PalS][j] = 3;
        }
    }
    if (((PalS < PalE) && (PalS2 < PalE2))||((PalS2 > PalE2)&&(PalE > PalS))) {
        warehouse[PalS][PalE2]=3;
    } else if (((PalE < PalS)&&(PalE2 < PalS2))||((PalS > PalE)&&(PalE2 > PalS2))) {
        warehouse[PalS][PalE2]=3;
    } 
}",1
mbut885,1695890810,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, pallet_row, pallet_col, destination_row, destination_col;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pallet_row = i;
				pallet_col = j;
			} else if (warehouse[i][j] == 2) {
				destination_row = i;
				destination_col = j;
			}
		}
	}

	for (i = pallet_col + 1; i < destination_col; i++) {
		warehouse[pallet_row][i] = 3;
	}

	for (i = pallet_row; i < destination_row; i++) {
		warehouse[i][destination_col] = 3;
	}

	return;
}",0
mbut885,1695891451,2,"void PelletRoute(int warehouse[10][10])
{
	int i, j, pallet_row, pallet_col, destination_row, destination_col;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pallet_row = i;
				pallet_col = j;
			} else if (warehouse[i][j] == 2) {
				destination_row = i;
				destination_col = j;
			}
		}
	}

	if ((destination_col - pallet_col) > 0) {

		for (i = pallet_col + 1; i < destination_col; i++) {
			warehouse[pallet_row][i] = 3;
		}
	}
	else if ((destination_col - pallet_col) < 0) {
		for (i = pallet_col - 1; i > destination_col; i--) {
			warehouse[pallet_row][i] = 3;
		}
	}

	if ((destination_row - pallet_row) > 0) {
		for (i = pallet_row; i < destination_row; i++) {
			warehouse[i][destination_col] = 3;
		}
	}
	else if ((destination_col - pallet_col) < 0) {
		for (i = pallet_row; i > destination_row; i--) {
			warehouse[i][destination_col] = 3;
		}
	}
	return;
}",0
mbut885,1695891772,3,"void PelletRoute(int warehouse[10][10])
{
	int i, j, pallet_row, pallet_col, destination_row, destination_col;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pallet_row = i;
				pallet_col = j;
			} else if (warehouse[i][j] == 2) {
				destination_row = i;
				destination_col = j;
			}
		}
	}

	if ((destination_col - pallet_col) > 0) {

		for (i = pallet_col + 1; i < destination_col; i++) {
			warehouse[pallet_row][i] = 3;
		}
	}
	else if ((destination_col - pallet_col) < 0) {
		for (i = pallet_col - 1; i > destination_col; i--) {
			warehouse[pallet_row][i] = 3;
		}
	} else if ((destination_col - pallet_col) == 0) {
	    if ((destination_row - pallet_row) >= 0) {
    		for (i = pallet_row + 1; i < destination_row; i++) {
    			warehouse[i][destination_col] = 3;
    		}
    	}
    	else if ((destination_col - pallet_col) <= 0) {
    		for (i = pallet_row - 1; i > destination_row; i--) {
    			warehouse[i][destination_col] = 3;
    		}
    	}
	}

	if ((destination_row - pallet_row) >= 0) {
		for (i = pallet_row; i < destination_row; i++) {
			warehouse[i][destination_col] = 3;
		}
	}
	else if ((destination_col - pallet_col) < 0) {
		for (i = pallet_row; i > destination_row; i--) {
			warehouse[i][destination_col] = 3;
		}
	}
	return;
}",0
mbut885,1695891955,4,"void PelletRoute(int warehouse[10][10])
{
	int i, j, pallet_row, pallet_col, destination_row, destination_col;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pallet_row = i;
				pallet_col = j;
			} else if (warehouse[i][j] == 2) {
				destination_row = i;
				destination_col = j;
			}
		}
	}

	if ((destination_col - pallet_col) > 0) {

		for (i = pallet_col + 1; i < destination_col; i++) {
			warehouse[pallet_row][i] = 3;
		}
		if ((destination_row - pallet_row) >= 0) {
    		for (i = pallet_row; i < destination_row; i++) {
    			warehouse[i][destination_col] = 3;
    		}
    	}
    	else if ((destination_col - pallet_col) < 0) {
    		for (i = pallet_row; i > destination_row; i--) {
    			warehouse[i][destination_col] = 3;
    		}
    	}
	} else if ((destination_col - pallet_col) < 0) {
		for (i = pallet_col - 1; i > destination_col; i--) {
			warehouse[pallet_row][i] = 3;
		}
		
		if ((destination_row - pallet_row) >= 0) {
    		for (i = pallet_row; i < destination_row; i++) {
    			warehouse[i][destination_col] = 3;
    		}
    	}
    	else if ((destination_col - pallet_col) < 0) {
    		for (i = pallet_row; i > destination_row; i--) {
    			warehouse[i][destination_col] = 3;
    		}
    	}
	} else if ((destination_col - pallet_col) == 0) {
	    if ((destination_row - pallet_row) > 0) {
    		for (i = pallet_row + 1; i < destination_row; i++) {
    			warehouse[i][destination_col] = 3;
    		}
    	}
    	else if ((destination_col - pallet_col) <= 0) {
    		for (i = pallet_row - 1; i > destination_row; i--) {
    			warehouse[i][destination_col] = 3;
    		}
    	}
	}

	return;
}",0
mcha833,1696141799,1,"void PelletRoute(int warehouse[10][10]){
    int i, j, srow, scol, frow, fcol;
    for(i = 0; i < 10; i++){
        for(j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                srow = i;
                scol = j;
            }
            if(warehouse[i][j] == 2){
                frow = i;
                fcol = j;
            }
        }
    }
    
    if(frow-srow > 0){
      for(i = srow; i <= frow; i++){
        warehouse[i][fcol] = 3;
        }
    }
    
    if(frow-srow < 0){
      for(i = frow; i <= srow; i++){
        warehouse[i][fcol] = 3;
        }
    }
    
    if(fcol-scol > 0){
      for(j = scol; j <= fcol; j++){
        warehouse[srow][j] = 3;
        }
    }
    
    if(fcol-scol < 0){
      for(j = fcol; j <= scol; j++){
        warehouse[srow][j] = 3;
        }
    }
    
    warehouse[srow][scol] = 1;
    warehouse[frow][fcol] = 2;
}",1
mcha876,1696237209,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destinationRow, destinationCol, i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } 
            else if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } 
        else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destinationRow) {
        if (pelletRow < destinationRow) {
            pelletRow++;
        } 
        else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
mcha876,1696237437,2,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destinationRow, destinationCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    while (pelletRow != destinationRow || pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } else if (pelletCol > destinationCol) {
            pelletCol--;
        } else if (pelletRow < destinationRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
mcha876,1696237464,3,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destinationRow, destinationCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    while (pelletRow != destinationRow || pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } else if (pelletCol > destinationCol) {
            pelletCol--;
        } else if (pelletRow < destinationRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 2;
    }
}
",0
mcha876,1696237646,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destinationRow, destinationCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } 
            else if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } 
        else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destinationRow) {
        if (pelletRow < destinationRow) {
            pelletRow++;
        } 
        else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
mdav506,1695678793,1,"#define numRows 10
#define numCols 10
#include <stdio.h>

void PelletRoute(int warehouse[numRows][numCols])
{
	int startRow = 0;
	int startCol = 0;
	int endRow = 0;
	int endCol = 0;
	int placeholder = 0;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			else if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	while (startCol != endCol) {
		if (startCol < endCol) {
			startCol++;
		}
		else {
			startCol--;
		}
		warehouse[startRow][startCol] = 3;
	}
	while (startRow != endRow) {
		if (startRow < endRow) {
			startRow++;
		}
		else {
			startRow--;
		}
		warehouse[startRow][endCol] = 3;
	}

	warehouse[endRow][endCol] = 2;
}",0
mdav506,1695678926,2,"#define numRows 10
#define numCols 10
#include <stdio.h>

void PelletRoute(int warehouse[numRows][numCols])
{
	int startRow = 0;
	int startCol = 0;
	int endRow = 0;
	int endCol = 0;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			else if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	while (startCol != endCol) {
		if (startCol < endCol) {
			startCol++;
		}
		else {
			startCol--;
		}
		warehouse[startRow][startCol] = 3;
	}
	while (startRow != endRow) {
		if (startRow < endRow) {
			startRow++;
		}
		else {
			startRow--;
		}
		warehouse[startRow][endCol] = 3;
	}

	warehouse[endRow][endCol] = 2;
}",1
mger154,1696058912,1,"void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pX, pY;
    int dX, dY;
    int p,q;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pX = j;
                pY = i;
            }
            if (warehouse[i][j] == 2) {
                dX = j;
                dY = i;
                p = i;
                q = j;
            }
        }
    }

    while (pX != dX) {
        if (pX < dX) {
            pX++;
        } else {
            pX--;
        }
        warehouse[pY][pX] = 3;
    }

    while (pY != dY) {
        if (pY < dY) {
            pY++;
        } else {
            pY--;
        }
        warehouse[pY][pX] = 3;
    }
    warehouse[p][q] = 2;
}",1
mgoy303,1695634337,1,"void PelletRoute(int warehouse[10][10]) {
    int startRow, startCol, endRow, endCol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startRow = i;
                startCol = j;
            } else if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    if (startCol != endCol && startRow != endRow) {
        warehouse[startRow][endCol] = 3;
    }

    for (int m = 0; abs(m) < abs(endCol - startCol) - 1;) {
        if (startCol < endCol) {
            m += 1;
        } else {
            m -= 1;
        }
        
        warehouse[startRow][startCol + m] = 3;
    }
    for (int n = 0; abs(n) < abs(endRow - startRow) - 1;) {
        if (startRow < endRow) {
            n += 1;
        } else {
            n -= 1;
        }
        
        warehouse[startRow + n][endCol] = 3;
    }
}",1
mgua740,1696218815,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, desRow, desCol;

   
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                desRow = i;
                desCol = j;
            }
        }
    }

    for (int x = pelletCol; x < desCol; x++) {
        warehouse[pelletRow][x] = 3;
    }
    for (int x = pelletCol ; x > desCol; x--) {
        warehouse[pelletRow ][x] = 3;
    }

    for (int y = pelletRow ; y < desRow; y++) {
        warehouse[y][desCol ] = 3;
    }
    for (int y = pelletRow ; y > desRow; y--) {
        warehouse[y][desCol] = 3;
    }
    warehouse[pelletRow][pelletCol] = 1;
}",1
mkab524,1696225299,1,"void PelletRoute(int warehouse[10][10])
{
	int i;
	int j;
	int 1row;
	int 1col;
	int 2row;
	int 2col;

	

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				1row = i;
				1col = j;
			}
			else if (warehouse[i][j] == 2) {
				2row = i;
				2col = j;
			}
		}
	}

	// if situation is like 1 x x 
	//						x x x
	//						x x 2

	if ((1col < 2col) && (1row < 2row)) {

		int tlcol = 1col + 1;
		int tlrow = 1row + 1;

		while (tlcol != 2col) {
			warehouse[1row][tlcol] = 3;
			tlcol++;
		}

		while (tlrow != 2row) {
			warehouse[tlrow][2col] = 3;
			tlrow++;
		}
	}
	
}",0
mkaj411,1695875011,1,"void PelletRoute(int warehouse[10][10]) {
    int i;
    int j;
    int t;
    int k;
    int row;
    int col;
    int rowPos1;
    int colPos1; 
    int rowPos2;
    int colPos2; 
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (1 == warehouse[i][j]) {
                rowPos1 = i;
                colPos1 = j;
            }
        }
    }
    for (t = 0; t < 10; t++) {
        for (k = 0; k < 10; k++) {
            if (2 == warehouse[t][k]) {
                rowPos2 = t;
                colPos2 = k;
            }
        }
    }
    if (colPos2 > colPos1) {
        for (col = (colPos1 + 1); col <= colPos2; col++) {
            warehouse[rowPos1][col] = 3;
        }
    }else{
        for (col = (colPos1 - 1); col >= colPos2; col--) {
            warehouse[rowPos1][col] = 3;
        }
    }
    if (rowPos2 > rowPos1) {
        for (row = (rowPos1 + 1); row < rowPos2; row++) {
            warehouse[row][colPos2] = 3;
        }
    }
    else {
        for (row = (rowPos1 - 1); row > rowPos2; row--) {
            warehouse[row][colPos2] = 3;
        }
    }
}",0
mkaj411,1695875268,2,"void PelletRoute(int warehouse[10][10]) {
    int i;
    int j;
    int t;
    int k;
    int row;
    int col;
    int rowPos1;
    int colPos1; 
    int rowPos2;
    int colPos2; 
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (1 == warehouse[i][j]) {
                rowPos1 = i;
                colPos1 = j;
            }
        }
    }
    for (t = 0; t < 10; t++) {
        for (k = 0; k < 10; k++) {
            if (2 == warehouse[t][k]) {
                rowPos2 = t;
                colPos2 = k;
            }
        }
    }
    if (colPos2 > colPos1) {
        for (col = (colPos1 + 1); col <= colPos2; col++) {
            warehouse[rowPos1][col] = 3;
        }
    }else{
        for (col = (colPos1 - 1); col >= colPos2; col--) {
            warehouse[rowPos1][col] = 3;
        }
    }
    if (rowPos1 == rowPos2) {
        warehouse[rowPos2][colPos2] = 2; 
    }
    if (rowPos2 > rowPos1) {
        for (row = (rowPos1 + 1); row < rowPos2; row++) {
            warehouse[row][colPos2] = 3;
        }
    }
    else {
        for (row = (rowPos1 - 1); row > rowPos2; row--) {
            warehouse[row][colPos2] = 3;
        }
    }
}
          
    ",1
mkee115,1695777811,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int worker, box, i, j, workerrow, workercol, boxrow, boxcol, a, b;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1)
            {
            workerrow = i;
            workercol = j;
            }
            if (warehouse[i][j] == 2)
            {
            boxrow = i;
            boxcol = j;
            }
        }
    }
    
// for different rows and columns:
    
    if ((boxrow > workerrow) && (boxcol > workercol)) {
        for (a = (workercol+1); a <= boxcol; a++) {
            warehouse[workerrow][a] = 3;
        }
        for (b = (workerrow+1); b < boxrow; b++) {
            warehouse[b][boxcol] = 3;
        }
    }
    
    if ((boxrow > workerrow) && (boxcol < workercol)) {
        for (a = (workercol-1); a >= boxcol; a--) {
            warehouse[workerrow][a] = 3;
        }
        for (b = (workerrow+1); b < boxrow; b++) {
            warehouse[b][boxcol] = 3;
        }
    }
    
    if ((boxrow < workerrow) && (boxcol < workercol)) {
        for (a = (workercol-1); a >= boxcol; a--) {
            warehouse[workerrow][a] = 3;
        }
        for (b = (workerrow-1); b > boxrow; b--) {
            warehouse[b][boxcol] = 3;
        }
    }
    
    if ((boxrow < workerrow) && (boxcol > workercol)) {
        for (a = (workercol+1); a <= boxcol; a++) {
            warehouse[workerrow][a] = 3;
        }
        for (b = (workerrow-1); b > boxrow; b--) {
            warehouse[b][boxcol] = 3;
        }
    }
    
// for same rows or columns:
    
    if ((boxrow == workerrow) && (boxcol > workercol)) {
        for (a = (workercol+1); a < boxcol; a++) {
            warehouse[workerrow][a] = 3; 
        }
    }
    
    if ((boxrow > workerrow) && (boxcol == workercol)) {
        for (b = (workerrow+1); b < boxrow; b++) {
            warehouse[b][boxcol] = 3;
        }
    }
    
    if ((boxrow == workerrow) && (boxcol < workercol)) {
        for (a = (workercol-1); a > boxcol; a--) {
            warehouse[workerrow][a] = 3;
        }
    }
    
    if ((boxrow < workerrow) && (boxcol == workercol)) {
        for (b = (workerrow-1); b > boxrow; b--) {
            warehouse[b][boxcol] = 3;
        }
    }
}",0
mkee115,1695777837,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j, workerrow, workercol, boxrow, boxcol, a, b;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1)
            {
            workerrow = i;
            workercol = j;
            }
            if (warehouse[i][j] == 2)
            {
            boxrow = i;
            boxcol = j;
            }
        }
    }
    
// for different rows and columns:
    
    if ((boxrow > workerrow) && (boxcol > workercol)) {
        for (a = (workercol+1); a <= boxcol; a++) {
            warehouse[workerrow][a] = 3;
        }
        for (b = (workerrow+1); b < boxrow; b++) {
            warehouse[b][boxcol] = 3;
        }
    }
    
    if ((boxrow > workerrow) && (boxcol < workercol)) {
        for (a = (workercol-1); a >= boxcol; a--) {
            warehouse[workerrow][a] = 3;
        }
        for (b = (workerrow+1); b < boxrow; b++) {
            warehouse[b][boxcol] = 3;
        }
    }
    
    if ((boxrow < workerrow) && (boxcol < workercol)) {
        for (a = (workercol-1); a >= boxcol; a--) {
            warehouse[workerrow][a] = 3;
        }
        for (b = (workerrow-1); b > boxrow; b--) {
            warehouse[b][boxcol] = 3;
        }
    }
    
    if ((boxrow < workerrow) && (boxcol > workercol)) {
        for (a = (workercol+1); a <= boxcol; a++) {
            warehouse[workerrow][a] = 3;
        }
        for (b = (workerrow-1); b > boxrow; b--) {
            warehouse[b][boxcol] = 3;
        }
    }
    
// for same rows or columns:
    
    if ((boxrow == workerrow) && (boxcol > workercol)) {
        for (a = (workercol+1); a < boxcol; a++) {
            warehouse[workerrow][a] = 3; 
        }
    }
    
    if ((boxrow > workerrow) && (boxcol == workercol)) {
        for (b = (workerrow+1); b < boxrow; b++) {
            warehouse[b][boxcol] = 3;
        }
    }
    
    if ((boxrow == workerrow) && (boxcol < workercol)) {
        for (a = (workercol-1); a > boxcol; a--) {
            warehouse[workerrow][a] = 3;
        }
    }
    
    if ((boxrow < workerrow) && (boxcol == workercol)) {
        for (b = (workerrow-1); b > boxrow; b--) {
            warehouse[b][boxcol] = 3;
        }
    }
}",1
mket106,1696205431,1,"void PelletRoute(int warehouse[10][10]) {
    int one_rowPos, one_colPos, two_rowPos, two_colPos, horiz, vert;

    for(int x = 0; x < 10; x++) {
		for(int y = 0; y < 10; y++) {
			if(warehouse[x][y] == 1) {
				one_rowPos = x;
				one_colPos = y;
			}
            else if(warehouse[x][y] == 2) {
                two_rowPos = x;
                two_colPos = y;
            }
		}
	}

    for(int i = one_colPos; i != two_colPos;) {
        if(two_colPos < i){
            i--;
            warehouse[one_rowPos][i] = 3;
        }
        else if(two_colPos > i) {
            i++;
            warehouse[one_rowPos][i] = 3;
        }

    }

     for(int i = one_rowPos; i != two_rowPos;) {
        if(two_rowPos < i){
            i--;
            warehouse[i][two_colPos] = 3;
        }
        else if(two_rowPos > i) {
            i++;
            warehouse[i][two_colPos] = 3;
        }

    }

    warehouse[one_rowPos][one_colPos] = 1;
    warehouse[two_rowPos][two_colPos] = 2;
    
}",0
mket106,1696205534,2,"void PelletRoute(int warehouse[10][10]) {
    int one_rowPos, one_colPos, two_rowPos, two_colPos;

    for(int x = 0; x < 10; x++) {
		for(int y = 0; y < 10; y++) {
			if(warehouse[x][y] == 1) {
				one_rowPos = x;
				one_colPos = y;
			}
            else if(warehouse[x][y] == 2) {
                two_rowPos = x;
                two_colPos = y;
            }
		}
	}

    for(int i = one_colPos; i != two_colPos;) {
        if(two_colPos < i){
            i--;
            warehouse[one_rowPos][i] = 3;
        }
        else if(two_colPos > i) {
            i++;
            warehouse[one_rowPos][i] = 3;
        }

    }

     for(int i = one_rowPos; i != two_rowPos;) {
        if(two_rowPos < i){
            i--;
            warehouse[i][two_colPos] = 3;
        }
        else if(two_rowPos > i) {
            i++;
            warehouse[i][two_colPos] = 3;
        }

    }

    warehouse[one_rowPos][one_colPos] = 1;
    warehouse[two_rowPos][two_colPos] = 2;
    
}",1
mkim719,1696073185,1,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for (i=0 ; i<NUM_ROWS ; i++) 
    {
        for (j=0 ; j<NUM_COLS ; j++)
        {
            if(board[i][j]==tile)
            {
                *rowPos = i;
                *colPos = j;
                
                //printf(""%d - row[%d] col[%d] \n"", tile, i, j);
                return;
            }
        }
    }
    
    *rowPos = -1;
    *rowPos = -1;
    //printf("" Error!. Can't find [%d] \n"", tile);
}

void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;
    int i, j;
    
    FindTile(warehouse, 1, &row1, &col1);
    FindTile(warehouse, 2, &row2, &col2);

    if(col1 < col2)
    {
       for (i=col1+1 ; i<=col2 ; i++) 
       {   
           warehouse[row1][i] = 3;
       }
    }
    else
    {
        for (i=col1-1 ; i>=col2 ; i--) 
        {
           warehouse[row1][i] = 3;
        }
    }
    
    if(row1 < row2)
    {
       for (j=row1+1 ; j<row2 ; j++) 
       {   
           warehouse[j][col2] = 3;
       }
    }
    else
    {
        for (j=row1-1 ; j>row2 ; j--) 
        {
            warehouse[j][col2] = 3;
        }
    }
}

",0
mkim719,1696076784,2,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for (i=0 ; i<NUM_ROWS ; i++) 
    {
        for (j=0 ; j<NUM_COLS ; j++)
        {
            if(board[i][j]==tile)
            {
                *rowPos = i;
                *colPos = j;
                
                //printf(""%d - row[%d] col[%d] \n"", tile, i, j);
                return;
            }
        }
    }
    
    *rowPos = -1;
    *rowPos = -1;
    //printf("" Error!. Can't find [%d] \n"", tile);
}

void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;
    int i, j, temp;
    
    FindTile(warehouse, 1, &row1, &col1);
    FindTile(warehouse, 2, &row2, &col2);
        
    if(row1==row2)
    {
        if(col1>col2)
        {
            temp = col1;
            col1 = col2;
            col2 = temp;
        }
        
       for (i=col1+1 ; i<col2 ; i++) 
       {   
           warehouse[row1][i] = 3;
       } 
       return;
    }
    
    if(col1==col2)
    {
         if(row1>row2)
        {
            temp = row1;
            row1 = row2;
            row2 = temp;
        }
        
       for (i=row1+1 ; i<row2 ; i++) 
       {   
           warehouse[i][col1] = 3;
       } 
       return;
    }
    

    if(col1 < col2)
    {
       for (i=col1+1 ; i<=col2 ; i++) 
       {   
           warehouse[row1][i] = 3;
       }
    }
    else
    {
        for (i=col1-1 ; i>=col2 ; i--) 
        {
           warehouse[row1][i] = 3;
        }
    }
    
    if(row1 < row2)
    {
       for (j=row1+1 ; j<row2 ; j++) 
       {   
           warehouse[j][col2] = 3;
       }
    }
    else
    {
        for (j=row1-1 ; j>row2 ; j--) 
        {
            warehouse[j][col2] = 3;
        }
    }
}
",1
mloh302,1695806827,1,"#include <stdio.h>
#include <math.h>
#define row 10
#define col 10

// NOTES: Pallet can only move horizontally (first) and vertically (second)
//  - The value 1 represents the location of the pallet
//  - The value 2 represents the location of the destination
//  - THe route taken should be indicated by setting all array elements on the route to the value 3
void PelletRoute(int inputArray[row][col])
{
    int start[2], end[2], rowDiff, colDiff, increment[2]; // initialise variables
    for (int i = 0; i < row; i++){
        for (int j = 0; j < col; j++) {
            if (inputArray[i][j] == 1) {
                start[0] = i;   // First element represents start row position
                start[1] = j;   // Second element represents start column position
            }
            if (inputArray[i][j] == 2) {
                end[0] = i;     // First element represents end row position
                end[1] = j;     // Second element represents end column position
            }
        }
    }

    rowDiff = end[0] - start[0];
    colDiff = end[1] - start[1];

    if (rowDiff < 0) {
        increment[0] = -1;
    }
    else {
        increment[0] = 1;
    }

    if (colDiff < 0) {
        increment[1] = -1;
    }
    else {
        increment[1] = 1;
    }

    // Move horizontally first then vertically (x represents columns, y represents rows)
    for (int x = (start[1] + increment[1]); fabs(x-end[1]) > 0; x = x + increment[1]) {
        inputArray[start[0]][x] = 3;
    }
    for (int y = (start[0]); fabs(y-end[0]) > 0; y = y + increment[0]) {
        inputArray[y][end[1]] = 3;
    }
}",0
mloh302,1695808015,2,"#include <stdio.h>
#include <math.h>
#define row 10
#define col 10

// NOTES: Pallet can only move horizontally (first) and vertically (second)
//  - The value 1 represents the location of the pallet
//  - The value 2 represents the location of the destination
//  - THe route taken should be indicated by setting all array elements on the route to the value 3
void PelletRoute(int inputArray[row][col])
{
    int start[2], end[2], rowDiff, colDiff, increment[2]; // initialise variables
    for (int i = 0; i < row; i++){
        for (int j = 0; j < col; j++) {
            if (inputArray[i][j] == 1) {
                start[0] = i;   // First element represents start row position
                start[1] = j;   // Second element represents start column position
            }
            if (inputArray[i][j] == 2) {
                end[0] = i;     // First element represents end row position
                end[1] = j;     // Second element represents end column position
            }
        }
    }

    rowDiff = end[0] - start[0];
    colDiff = end[1] - start[1];

    if (rowDiff < 0) {
        increment[0] = -1;
    }
    else if (rowDiff == 0) {
        increment[0] = 0;
    }
    else {
        increment[0] = 1;
    }
    if (colDiff < 0) {
        increment[1] = -1;
    }
    else if (colDiff == 0) {
        increment[1] = 0;
    }
    else {
        increment[1] = 1;
    }

    // Move horizontally first then vertically (x represents columns, y represents rows)
    for (int x = (start[1] + increment[1]); fabs(x-end[1]) > 0; x = x + increment[1]) {
        inputArray[start[0]][x] = 3;
    }
    inputArray[start[0]][end[1]] = 3; // Makes sure on the last repeat that it also adds the extra 3 to the path
    for (int y = (start[0] + increment[0]); fabs(y-end[0]) > 0; y = y + increment[0]) {
        inputArray[y][end[1]] = 3;
    }
}",0
mloh302,1695808214,3,"#include <stdio.h>
#include <math.h>
#define row 10
#define col 10

// NOTES: Pallet can only move horizontally (first) and vertically (second)
//  - The value 1 represents the location of the pallet
//  - The value 2 represents the location of the destination
//  - THe route taken should be indicated by setting all array elements on the route to the value 3
void PelletRoute(int inputArray[row][col])
{
    int start[2], end[2], rowDiff, colDiff, increment[2]; // initialise variables
    for (int i = 0; i < row; i++){
        for (int j = 0; j < col; j++) {
            if (inputArray[i][j] == 1) {
                start[0] = i;   // First element represents start row position
                start[1] = j;   // Second element represents start column position
            }
            if (inputArray[i][j] == 2) {
                end[0] = i;     // First element represents end row position
                end[1] = j;     // Second element represents end column position
            }
        }
    }

    rowDiff = end[0] - start[0];
    colDiff = end[1] - start[1];

    if (rowDiff < 0) {
        increment[0] = -1;
    }
    else if (rowDiff == 0) {
        increment[0] = 0;
    }
    else {
        increment[0] = 1;
    }
    if (colDiff < 0) {
        increment[1] = -1;
    }
    else if (colDiff == 0) {
        increment[1] = 0;
    }
    else {
        increment[1] = 1;
    }

    // Move horizontally first then vertically (x represents columns, y represents rows)
    for (int x = (start[1] + increment[1]); fabs(x-end[1]) > 0; x = x + increment[1]) {
        inputArray[start[0]][x] = 3;
    }
    if (inputArray[start[0]][end[1]] == 0) {
        inputArray[start[0]][end[1]] = 3; // Makes sure on the last repeat that it also adds the extra 3 to the path
    }
    for (int y = (start[0] + increment[0]); fabs(y-end[0]) > 0; y = y + increment[0]) {
        inputArray[y][end[1]] = 3;
    }
}",1
mmak111,1696231089,1,"void PelletRoute(int warehouse[10][10])
{
    int r, row;
    int c, column;
    int drow, dcolumn;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                r = i;
                c = j;
            }
            if (warehouse[i][j] == 2) {
                row = i;
                column = j;
            }
        }
    }

    drow = row - r;
    dcolumn = column - c;

    if (dcolumn > 0) {
        for (; c < column; c++) {
            warehouse[r][c + 1] = 3;
        }
    }
    else if (dcolumn < 0) {
        for (; c > column; c--) {
            warehouse[r][c - 1] = 3;
        }
    }

    if (drow > 0) {
        for (; r < row; r++) {
            warehouse[r][c] = 3;
        }
    }
    else if (drow < 0) {
        for (; r > row; r--) {
            warehouse[r][c] = 3;
        }
    }
}",0
mmak111,1696231174,2,"void PelletRoute(int warehouse[10][10])
{
    int r, row;
    int c, column;
    int drow, dcolumn;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                r = i;
                c = j;
            }
            if (warehouse[i][j] == 2) {
                row = i;
                column = j;
            }
        }
    }

    drow = row - r;
    dcolumn = column - c;

    if (dcolumn > 0) {
        for (; c < column; c++) {
            warehouse[r][c] = 3;
        }
    }
    else if (dcolumn < 0) {
        for (; c > column; c--) {
            warehouse[r][c] = 3;
        }
    }

    if (drow > 0) {
        for (; r < row; r++) {
            warehouse[r][c] = 3;
        }
    }
    else if (drow < 0) {
        for (; r > row; r--) {
            warehouse[r][c] = 3;
        }
    }
}
",0
mman402,1696216759,1,"void PelletRoute(int warehouse[10][10])
{
    int startRow,startCol;
    int stopRow, stopCol;
    int i,j;
    int temp,counter=0;


    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                startRow = i;
                startCol = j;
            }

            if (warehouse[i][j] == 2)
            {
                stopRow = i;
                stopCol = j;
            }
        }
    }

    if (startCol > stopCol)
    {
        temp = startCol;
        startCol = stopCol;
        stopCol = temp;
        counter=1;
    }
   

if (startRow==stopRow)
{
  
        for (i = startCol+1; i < stopCol; i++)
        {
            warehouse[startRow][i] = 3;
        }
        
}
else 
{

     for (i = startCol + 1; i <= stopCol; i++)
    {
        warehouse[startRow][i] = 3;
    }
}
if (counter==1)
{
    temp = startCol;
    startCol = stopCol;
    stopCol = temp;
    counter = 0;
}




if (startRow>stopRow)
   {
       temp=startRow;
       startRow=stopRow;
       stopRow=temp;
       counter=1;
   }
printf(""%d %d\n%d %d\n"",startCol,stopCol,startRow,stopRow);
if (startCol == stopCol)
{

    for (i = startRow + 1; i < stopRow; i++)
    {
        warehouse[i][startCol] = 3;
    }
}
else
{

    for (i = startRow + 1; i < stopRow; i++)
    {
        warehouse[i][stopCol] = 3;
    }
}



}
",0
mman402,1696239607,2,"void PelletRoute(int warehouse[10][10])
{
    int startRow,startCol;
    int stopRow, stopCol;
    int i,j;
    int temp,counter=0;


    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                startRow = i;
                startCol = j;
            }

            if (warehouse[i][j] == 2)
            {
                stopRow = i;
                stopCol = j;
            }
        }
    }

   if(startCol<stopCol)
   {
    for(i=startCol+1;i<stopCol;i++)
    {
    warehouse[startRow][i]=3;
    }
   }
   if (startCol>stopCol)
   {
   for(i=startCol-1;i>stopCol;i--)
   {
    warehouse[startRow][i] = 3;
   }
   }

   if (startRow < stopRow)
   {
    if(startCol==stopCol){
        startRow=startRow+1;
    }
   for (i = startRow; i < stopRow; i++)
   {
    warehouse[i][stopCol] = 3;
   }
   }
   if (startRow > stopRow)
   {
   if (startCol == stopCol)
   {
    startRow = startRow -1;
   }
   for (i = startRow ; i > stopRow; i--)
   {
    warehouse[i][stopCol] = 3;
   }
   }
}",0
mman402,1696239620,3,"void PelletRoute(int warehouse[10][10])
{
    int startRow,startCol;
    int stopRow, stopCol;
    int i,j;
    


    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                startRow = i;
                startCol = j;
            }

            if (warehouse[i][j] == 2)
            {
                stopRow = i;
                stopCol = j;
            }
        }
    }

   if(startCol<stopCol)
   {
    for(i=startCol+1;i<stopCol;i++)
    {
    warehouse[startRow][i]=3;
    }
   }
   if (startCol>stopCol)
   {
   for(i=startCol-1;i>stopCol;i--)
   {
    warehouse[startRow][i] = 3;
   }
   }

   if (startRow < stopRow)
   {
    if(startCol==stopCol){
        startRow=startRow+1;
    }
   for (i = startRow; i < stopRow; i++)
   {
    warehouse[i][stopCol] = 3;
   }
   }
   if (startRow > stopRow)
   {
   if (startCol == stopCol)
   {
    startRow = startRow -1;
   }
   for (i = startRow ; i > stopRow; i--)
   {
    warehouse[i][stopCol] = 3;
   }
   }
}",1
mman808,1696240653,1,"void PelletRoute(int warehouse[10][10]){
int workerRow, workerCol, boxRow, boxCol;
for (int i = 0; i < 10; i++){
    for (int j = 0; j < 10; j++){
        if (warehouse[i][j] == 1){
            workerRow = i;
            workerCol = j;
        }
        if (warehouse[i][j] == 2){
            boxRow = i;
            boxCol = j;
        }
    }
}
//move horizontally until columns line up (displaying 3s with each iteration)
while (workerCol != boxCol){
    if (boxCol > workerCol){
        workerCol++;
    } else{
        workerCol--;
    }
    warehouse[workerRow][workerCol] = 3;
}

//move vertically until rows line up (displaying 3s with each iteration)
while (workerRow != boxRow){
    if (boxRow > workerRow){
        workerRow++;
    } else{
        workerRow--;
    }
    warehouse[workerRow][workerCol] = 3;
}
}",0
mman808,1696241217,2,"
void PelletRoute(int warehouse[10][10]){
int workerRow, workerCol, boxRow, boxCol;
for (int i = 0; i < 10; i++){
    for (int j = 0; j < 10; j++){
        if (warehouse[i][j] == 1){
            workerRow = i;
            workerCol = j;
        }
        if (warehouse[i][j] == 2){
            boxRow = i;
            boxCol = j;
        }
    }
}
while (warehouse[workerRow][workerCol]!= warehouse[boxRow][boxCol]){
//move horizontally until columns line up (displaying 3s with each iteration)
while (workerCol != boxCol){
    if (boxCol > workerCol){
        workerCol++;
    } else{
        workerCol--;
    }
    if (warehouse[workerRow][workerCol]!= warehouse[boxRow][boxCol]){
    warehouse[workerRow][workerCol] = 3;
    }
}

//move vertically until rows line up (displaying 3s with each iteration)
while (workerRow != boxRow){
    if (boxRow > workerRow){
        workerRow++;
    } else{
        workerRow--;
    }
    if (warehouse[workerRow][workerCol]!= warehouse[boxRow][boxCol]){
    warehouse[workerRow][workerCol] = 3;
    }
}
}
}",1
mmas199,1696230063,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int rowPellet, collumnPellet, collumn, row;

    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++) 
        {
            if (warehouse[i][j] == 1) 
            {
                rowPellet = i;
                collumnPellet = j;
            }
            else if (warehouse[i][j] == 2) 
            {
                row = i;
                collumn = j;
            }
        }
    }

    while (collumnPellet < collumn) 
    {
        collumnPellet++;
        if (warehouse[rowPellet][collumnPellet] != 2) 
        {
            warehouse[rowPellet][collumnPellet] = 3;
        }
    }

    while (collumnPellet > collumn) 
    {
        collumnPellet--;
        if (warehouse[rowPellet][collumnPellet] != 2) 
        {
            warehouse[rowPellet][collumnPellet] = 3;
        }
    }

    while (rowPellet < row)
    {
        rowPellet++;

        if (warehouse[rowPellet][collumnPellet] != 2) 
        {
            warehouse[rowPellet][collumnPellet] = 3;
        }
    }

    while (rowPellet > row) 
    {
        rowPellet--;

        if (warehouse[rowPellet][collumnPellet] != 2) 
        {
            warehouse[rowPellet][collumnPellet] = 3;
        }
    }
}
",1
mmca276,1695901443,1,"void PelletRoute(int warehouse[10][10])
{
int i;
int j;
int start_row;
int start_col;
int end_row;
int end_col;
for(i = 0; i < 10; i++) {
    for (j = 0; j < 10; j++) {
        if (warehouse[i][j] == 1) {
            start_row = i;
            start_col = j;
        }
        if (warehouse[i][j] == 2) {
            end_row = i;
            end_col = j;
        }
    }
}
int count_col;
int count_row;
if (end_col > start_col) {
    for(count_col = start_col + 1; count_col < end_col; count_col++){
        warehouse[start_row][count_col] = 3;
    } } else {
    for(count_col = end_col + 1; count_col < start_col; count_col++){
        warehouse[start_row][count_col] = 3;
    }
}

if (end_row > start_row) {
    for(count_row = start_row + 1; count_row < end_row; count_row++){
        warehouse[end_col][count_row] = 3;
    } } else  {
    for(count_row = end_row + 1; count_row < start_row; count_row++){
        warehouse[end_col][count_row] = 3;
    }
}
}
",0
mmca276,1695901911,2,"void PelletRoute(int warehouse[10][10])
{
int i;
int j;
int start_row;
int start_col;
int end_row;
int end_col;
for(i = 0; i < 10; i++) {
    for (j = 0; j < 10; j++) {
        if (warehouse[i][j] == 1) {
            start_row = i;
            start_col = j;
        }
        if (warehouse[i][j] == 2) {
            end_row = i;
            end_col = j;
        }
    }
}
int count_col;
int count_row;
if (end_col > start_col) {
    for(count_col = start_col + 1; count_col == end_col; count_col++){
        warehouse[start_row][count_col] = 3;
    } } 
    else if (end_col < start_col) {
    for(count_col = end_col + 1; count_col == start_col; count_col++){
        warehouse[start_row][count_col] = 3;
    }
}

if (end_row > start_row) {
    for(count_row = start_row + 1; count_row < end_row; count_row++){
        warehouse[count_row][end_col] = 3;
    } } 
    else if (end_row < start_row) {
    for(count_row = end_row + 1; count_row < start_row; count_row++){
        warehouse[count_row][end_col] = 3;
    }
}

}
",0
mmca276,1695903517,3,"void PelletRoute(int warehouse[10][10])
{
int i;
int j;
int start_row;
int start_col;
int end_row;
int end_col;
for(i = 0; i < 10; i++) {
    for (j = 0; j < 10; j++) {
        if (warehouse[i][j] == 1) {
            start_row = i;
            start_col = j;
        }
        if (warehouse[i][j] == 2) {
            end_row = i;
            end_col = j;
        }
    }
}
int count_col;
int count_row;
if (end_col > start_col) {
    for(count_col = start_col + 1; count_col < end_col + 1; count_col++){
        warehouse[start_row][count_col] = 3;
    } } 
    else if (end_col < start_col) {
    for(count_col = end_col ; count_col < start_col ; count_col++){
        warehouse[start_row][count_col] = 3;
    }
}

if (end_row > start_row) {
    for(count_row = start_row + 1; count_row < end_row; count_row++){
        warehouse[count_row][end_col] = 3;
    } } 
    else if (end_row < start_row) {
    for(count_row = end_row + 1; count_row < start_row; count_row++){
        warehouse[count_row][end_col] = 3;
    }
}
else { warehouse[end_row][end_col] = 2;
}
}",1
mmoh314,1696240334,1,"void PelletRoute(int warehouse[10][10])
{
    int i, j, rowWorker, colWorker, rowBox, colBox;
    
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] = 1){
                rowWorker = i;
                colWorker = j;
            }
            else if (warehouse[i][j] = 2){
                rowBox = i;
                colBox = j;
            }
        }
    }
    
    if (colBox < colWorker){
        for (j = (colWorker - 1); j > (colBox - 1); j--){
            warehouse[rowWorker][j] = 3;
        }
    }
    else if (colBox > colWorker){
        for (j = (colWorker + 1); j < (colBox + 1); j++){
            warehouse[rowWorker][j] = 3;
        }
    }
    
    if (rowBox < rowWorker){
        for (i = (rowWorker - 1); i > (rowBox - 1); i--){
            warehouse[i][colBox] = 3;
        }
    }
    else if (rowBox > rowWorker){
        for (i = (rowWorker + 1); i < (rowBox + 1); i++){
            warehouse[i][colBox] = 3;
        }
    }
}",0
mmoh314,1696240360,2,"void PelletRoute(int warehouse[10][10])
{
    int i, j, rowWorker, colWorker, rowBox, colBox;
    
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                rowWorker = i;
                colWorker = j;
            }
            else if (warehouse[i][j] == 2){
                rowBox = i;
                colBox = j;
            }
        }
    }
    
    if (colBox < colWorker){
        for (j = (colWorker - 1); j > (colBox - 1); j--){
            warehouse[rowWorker][j] = 3;
        }
    }
    else if (colBox > colWorker){
        for (j = (colWorker + 1); j < (colBox + 1); j++){
            warehouse[rowWorker][j] = 3;
        }
    }
    
    if (rowBox < rowWorker){
        for (i = (rowWorker - 1); i > (rowBox - 1); i--){
            warehouse[i][colBox] = 3;
        }
    }
    else if (rowBox > rowWorker){
        for (i = (rowWorker + 1); i < (rowBox + 1); i++){
            warehouse[i][colBox] = 3;
        }
    }
}",0
mmoh314,1696240469,3,"void PelletRoute(int warehouse[10][10])
{
    int i, j, rowWorker, colWorker, rowBox, colBox;
    
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                rowWorker = i;
                colWorker = j;
            }
            else if (warehouse[i][j] == 2){
                rowBox = i;
                colBox = j;
            }
        }
    }
    
    if (colBox < colWorker){
        for (j = (colWorker - 1); j > colBox; j--){
            warehouse[rowWorker][j] = 3;
        }
    }
    else if (colBox > colWorker){
        for (j = (colWorker + 1); j < colBox; j++){
            warehouse[rowWorker][j] = 3;
        }
    }
    
    if (rowBox < rowWorker){
        for (i = (rowWorker - 1); i > rowBox; i--){
            warehouse[i][colBox] = 3;
        }
    }
    else if (rowBox > rowWorker){
        for (i = (rowWorker + 1); i < rowBox; i++){
            warehouse[i][colBox] = 3;
        }
    }
}",0
mmoh314,1696240635,4,"void PelletRoute(int warehouse[10][10])
{
    int i, j, rowWorker, colWorker, rowBox, colBox;
    
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                rowWorker = i;
                colWorker = j;
            }
            else if (warehouse[i][j] == 2){
                rowBox = i;
                colBox = j;
            }
        }
    }
    
    if (colBox < colWorker){
        for (j = (colWorker - 1); j > (colBox - 1); j--){
            if (warehouse[rowWorker][j] != 2){
                warehouse[rowWorker][j] = 3;
            }
        }
    }
    else if (colBox > colWorker){
        for (j = (colWorker + 1); j < (colBox + 1); j++){
            if (warehouse[rowWorker][j] != 2){
                warehouse[rowWorker][j] = 3;
            }
        }
    }
    
    if (rowBox < rowWorker){
        for (i = (rowWorker - 1); i > (rowBox - 1); i--){
            if (warehouse[i][colBox] != 2){
                warehouse[i][colBox] = 3;
            }
        }
    }
    else if (rowBox > rowWorker){
        for (i = (rowWorker + 1); i < (rowBox + 1); i++){
            if (warehouse[i][colBox] != 2){
                warehouse[i][colBox] = 3;
            }
        }
    }
}",1
mnay503,1696150050,1,"void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, destRow, destCol;

    
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++) 
        {
            if (warehouse[i][j] == 1) 
            {
                pelletRow = i;
                pelletCol = j;
            } 
            else if (warehouse[i][j] == 2)
            {
                destRow = i;
                destCol = j;
            }
        }
    }


    for (int j = 0; j < 10; j++)
    {
        if (j == pelletCol) 
        {
            continue; 
        }
        warehouse[pelletRow][j] = 3; 
    }

    
    for (int i = 0; i < 10; i++) 
    {
        if (i == destRow) 
        {
            continue; 
        }
        warehouse[i][destCol] = 3; 
    }
}
",0
mnay503,1696231630,2,"void PelletRoute(int warehouse[10][10])
{
     int workerRow, workerCol, boxRow, boxCol;
     for (int i = 0; i < 10; i++)
     {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1) 
            {
                workerRow = i;
                workerCol = j;
            } 
             else if (warehouse[i][j] == 2) 
            {
                boxRow = i;
                boxCol = j;
            }
        }
    }

   
   
 for (int j = workerCol; j < 10 && j <= boxCol && warehouse[workerRow][j] != 2; j++) 
{
    if (warehouse[workerRow][j] != 1) 
    {
        warehouse[workerRow][j] = 3;
        if (j + 1 < 10 && j + 1 < boxCol && warehouse[workerRow][j + 1] != 2) 
        {
            warehouse[workerRow][j + 1] = 3; 
        }
    }
}


    for (int i = workerRow + 1; i < 10 && warehouse[i][boxCol] != 2; i++)
    {
        if (warehouse[i][boxCol] != 1) 
        {
            warehouse[i][boxCol] = 3; 
        }
    }
   
}
",0
mnay503,1696233310,3,"
void PelletRoute(int warehouse[10][10])
{
    
    int workerRow, workerCol,destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                workerRow = i;
                workerCol = j;
            } else if (warehouse[i][j] == 2) {
                
                destCol = j;
            }
        }
    }

    
    for (int j = workerCol; j < 10 && j <= destCol && warehouse[workerRow][j] != 2; j++) {
        if (warehouse[workerRow][j] != 1) {
            warehouse[workerRow][j] = 3; 
            if (j + 1 < 10 && j + 1 <= destCol && warehouse[workerRow][j + 1] != 2) {
                warehouse[workerRow][j + 1] = 3; 
            }
        }
    }

   
    for (int i = workerRow + 1; i < 10 && warehouse[i][destCol] != 2; i++) {
        if (warehouse[i][destCol] != 1) {
            warehouse[i][destCol] = 3; 
        }
    }
}
",0
mpar342,1696232937,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow, pelletCol, destRow, destCol;
    
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++) 
        {
            if (warehouse[i][j] == 1) 
            {
                pelletRow = i;
                pelletCol = j;
            } 
            else if (warehouse[i][j] == 2) 
            {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    while (pelletCol != destCol) 
    {
        if (pelletCol < destCol) 
        {
            pelletCol++;
        } else 
        {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    
    while (pelletRow != destRow) 
    {
        if (pelletRow < destRow) 
        {
            pelletRow++;
        } else 
        {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
mpar342,1696233095,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
mpar342,1696233268,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j, pellet_row, pellet_col, dest_row, dest_col;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    if (pellet_col < dest_col) {
        for (j = pellet_col; j <= dest_col; j++) {
            warehouse[pellet_row][j] = 3;
        }
    } else if (pellet_col > dest_col) {
        for (j = pellet_col; j >= dest_col; j--) {
            warehouse[pellet_row][j] = 3;
        }
    }

    if (pellet_row < dest_row) {
        for (i = pellet_row; i <= dest_row; i++) {
            warehouse[i][dest_col] = 3;
        }
    } else if (pellet_row > dest_row) {
        for (i = pellet_row; i >= dest_row; i--) {
            warehouse[i][dest_col] = 3;
        }
    }
}

",0
mpat501,1695701694,1,"void PelletRoute(int warehouse[10][10])
{
	int startrow, startcol, endrow, endcol ;
	for (int i=0 ; i<10 ; i++) {
		for (int j=0 ; j<10 ; j++) {
			if (warehouse[i][j]==1){
				startrow=i ;
	 			startcol=j ;
			}
			else if ( warehouse[i][j] == 2 ) {
	 			endrow=i ;
	 			endcol=j ;
			}
		}
	}

	for (int i=startcol+1 ; i<=endcol ; i++) {
		warehouse[startrow][i]=3 ;
	}

	for (int i=startcol-1 ; i>=endcol ; i--) {
		warehouse[startrow][i]=3 ;
	}

	for (int i=startrow+1 ; i<endrow ; i++) {
		warehouse[i][endcol]=3 ;
	} 

	for (int i=startrow-1 ; i>endrow ; i--) {
			warehouse[i][endcol]=3 ;
	} 

}",0
mpat501,1695702047,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int startrow, startcol, endrow, endcol ;
	for (int i=0 ; i<10 ; i++) {
		for (int j=0 ; j<10 ; j++) {
			if (warehouse[i][j]==1){
				startrow=i ;
	 			startcol=j ;
			}
			else if ( warehouse[i][j] == 2 ) {
	 			endrow=i ;
	 			endcol=j ;
			}
		}
	}

	for (int i=startcol+1 ; i<=endcol ; i++) {
		if (warehouse[startrow][i]==0) {
			warehouse[startrow][i]=3 ;
		}
	}

	for (int i=startcol-1 ; i>=endcol ; i--) {
		if (warehouse[startrow][i]==0) {
			warehouse[startrow][i]=3 ;
		}
	}

	for (int i=startrow+1 ; i<endrow ; i++) {
		if (warehouse[startrow][i]==0) {
			warehouse[startrow][i]=3 ;
		}
	} 

	for (int i=startrow-1 ; i>endrow ; i--) {
		if (warehouse[startrow][i]==0) {
			warehouse[startrow][i]=3 ;
		}
	} 

}",0
mpat501,1695702284,3,"void PelletRoute(int warehouse[10][10])
{
	int startrow, startcol, endrow, endcol ;
	for (int i=0 ; i<10 ; i++) {
		for (int j=0 ; j<10 ; j++) {
			if (warehouse[i][j]==1){
				startrow=i ;
	 			startcol=j ;
			}
			else if ( warehouse[i][j] == 2 ) {
	 			endrow=i ;
	 			endcol=j ;
			}
		}
	}

	for (int i=startcol+1 ; i<=endcol ; i++) {
		if (warehouse[startrow][i]==0) {
			warehouse[startrow][i]=3 ;
		}
	}

	for (int i=startcol-1 ; i>=endcol ; i--) {
		if (warehouse[startrow][i]==0) {
			warehouse[startrow][i]=3 ;
		}
	}

	for (int i=startrow+1 ; i<endrow ; i++) {
		warehouse[i][endcol]=3 ;
	} 

	for (int i=startrow-1 ; i>endrow ; i--) {
		warehouse[i][endcol]=3 ;
	} 

}",1
mpey262,1695789333,1,"void PelletRoute(int warehouse[10][10]) {
    int i,j,m,n,a,b;
    //find the position '1' in the array
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                //find the position '2' in the array
                for (m = 0; m < 10 ;m++) {
                    for (n = 0; n < 10; n++) {
                        if (warehouse[m][n] == 2) {
                            printf(""m = %d, n = %d, i = %d, j = %d\n"",m,n,i,j);
                            //Assign the position that overlap the direct path with '3'
                            //determine whether to move left or right
                            if (j < n) {
                                for (b = j + 1; b <= n; b++) {
                                    if (warehouse[i][b] == 0) {
                                        warehouse[i][b] = 3; 
                                        printf(""%d|%d\n"", i, b);
                                    }
                                }
                            }
                            else {
                                for (b = n; b <= j; b++) {
                                    if (warehouse[i][b] == 0) {
                                        warehouse[i][b] = 3; 
                                        printf(""%d|%d\n"", m, b);
                                    }
                                }
                            }
                            //determine whether to move up or down
                            
                            if (i < m) {
                                for (a = i; a <= m; a++) {
                                    if (warehouse[a][n] == 0) {
                                        warehouse[a][n] = 3; 
                                        printf(""%d|%d\n"", a, m);
                                    }
                                }
                            }
                            else {
                                for (a = m; a <= i; a++) {
                                    if (warehouse[a][n] == 0) {
                                    warehouse[a][n] = 3; 
                                    printf(""%d|%d\n"", a, j);
                                    }
                                }
                            }
                        }
                    }
                }        
            }
        }
    }
}
",0
mpey262,1695789427,2,"void PelletRoute(int warehouse[10][10]) {
    int i,j,m,n,a,b;
    //find the position '1' in the array
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                //find the position '2' in the array
                for (m = 0; m < 10 ;m++) {
                    for (n = 0; n < 10; n++) {
                        if (warehouse[m][n] == 2) {
                            //Assign the position that overlap the direct path with '3'
                            //determine whether to move left or right
                            if (j < n) {
                                for (b = j + 1; b <= n; b++) {
                                    if (warehouse[i][b] == 0) {
                                        warehouse[i][b] = 3; 
                                    }
                                }
                            }
                            else {
                                for (b = n; b <= j; b++) {
                                    if (warehouse[i][b] == 0) {
                                        warehouse[i][b] = 3; 
                                    }
                                }
                            }
                            //determine whether to move up or down
                            
                            if (i < m) {
                                for (a = i; a <= m; a++) {
                                    if (warehouse[a][n] == 0) {
                                        warehouse[a][n] = 3; 
                                    }
                                }
                            }
                            else {
                                for (a = m; a <= i; a++) {
                                    if (warehouse[a][n] == 0) {
                                    warehouse[a][n] = 3; 
                                    }
                                }
                            }
                        }
                    }
                }        
            }
        }
    }
}
",1
mron793,1696048929,1,"#define NUM_ROWS 10
#define NUM_COLS 10



void FindTile(int warehouse[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);



void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
    int startRow, startCol, endRow, endCol;

    FindTile(warehouse, 1, &startRow, &startCol);
    FindTile(warehouse, 2, &endRow, &endCol);

    int i = startRow;
    int j = startCol;
    
     if (startCol < endCol)
    {
         while (j < endCol)
            {
                warehouse[i][j+1] = 3;
                j++;
                
            }
    }
    else if (startCol > endCol)
    {
         while (j > endCol)
            {
                warehouse[i][j-1] = 3;
                j--;
                
            }
    }
   


    if (startRow < endRow)
    {        
        while (i < endRow-1)
            {
                warehouse[i+1][j] = 3;
                i++;
                
            }
            
        
        
    }
    else if (startRow > endRow)
    {
        while (i > endRow+1)
            {
                warehouse[i-1][j] = 3;
                i--;
                
            }
    }

   
}


void FindTile(int warehouse[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (warehouse[i][j]==tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
			
		}
		
	}
	
}",0
mron793,1696049501,2,"#define NUM_ROWS 10
#define NUM_COLS 10



void FindTile(int warehouse[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);



void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS])
{
    int startRow, startCol, endRow, endCol;

    FindTile(warehouse, 1, &startRow, &startCol);
    FindTile(warehouse, 2, &endRow, &endCol);

    int i = startRow;
    int j = startCol;
    
     if (startCol < endCol)
    {
         while (j < (startRow == endRow? endCol - 1:endCol))
            {
                           
                warehouse[i][j+1] = 3;
                j++;
                
            }
    }
    else if (startCol > endCol)
    {
         while (j > (startRow == endRow? endCol + 1:endCol))
            {
                warehouse[i][j-1] = 3;
                j--;
                
            }
    }
   


    if (startRow < endRow)
    {        
        while (i < endRow-1)
            {
                warehouse[i+1][j] = 3;
                i++;
                
            }
            
        
        
    }
    else if (startRow > endRow)
    {
        while (i > endRow+1)
            {
                warehouse[i-1][j] = 3;
                i--;
                
            }
    }
 
}


void FindTile(int warehouse[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (warehouse[i][j]==tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
			
		}
		
	}
	
}",1
msil440,1696242106,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destinationRow, destinationCol;

    // Locating the positions of the pellet (1) and destination (2)
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++) 
        {
            if (warehouse[i][j] == 1) 
            {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) 
            {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    // Moving the pellet horizontally so as to match the destination
    while (pelletCol != destinationCol) {
        if (pelletCol < destinationCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Moving the pellet vertically so as to reach its destination
    while (pelletRow != destinationRow) 
    {
        if (pelletRow < destinationRow) 
        {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
msil440,1696242483,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destinationRow, destinationCol;

    // Locating the positions of the pellet, 1, and destination, 2.
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++) 
        {
            if (warehouse[i][j] == 1) 
            {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) 
            {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

       // Firstly, move horizontally til it reaches the desired destination column
    for (int j = 0; j < 10; j++) {
        if (warehouse[pelletRow][j] != 3) {
            warehouse[pelletRow][j] = 3;
        }
        if (j == destinationCol) {
            break;  // Reached the desired destination column
        }
    }

    // Now, moving vertically til it reaches the desired destination row
    for (int i = 0; i < 10; i++) {
        if (warehouse[i][destinationCol] != 3) {
            warehouse[i][destinationCol] = 3;
        }
        if (i == destinationRow) {
            break;  // Reached the desired destination row
        }
    }
}",0
msil440,1696242527,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destinationRow, destinationCol;

    // Locating the positions of the pellet, 1, and destination, 2.
    for (int i = 0; i < 10; i++) 
    {
        for (int j = 0; j < 10; j++) 
        {
            if (warehouse[i][j] == 1) 
            {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) 
            {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

       // Firstly, move horizontally til it reaches the desired destination column
    for (int j = 0; j < 10; j++) {
        if (warehouse[pelletRow][j] != 3) {
            warehouse[pelletRow][j] = 3;
        }
        if (j == destinationCol) {
            break;  // Reached the desired destination column
        }
    }

    // Now, moving vertically til it reaches the desired destination row
    for (int i = 0; i < 10; i++) {
        if (warehouse[i][destinationCol] != 3) {
            warehouse[i][destinationCol] = 3;
        }
        if (i == destinationRow) {
            break;  // Reached the desired destination row
        }
    }
}
// Now to reset any remaining 3s to = 0
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 3) {
                warehouse[i][j] = 0;
            }
        }
    }
}",0
msin609,1696139128,1,"void PelletRoute(int warehouse[10][10])
{
	int i;
	int j;
	int onerow = -1;
	int onecol = -1;
	int tworow = -1;
	int twocol = -1;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				onerow = i;
				onecol = j;
			}
			if (warehouse[i][j] == 2) {
				tworow = i;
				twocol = j;
			}
		}
	}
	if (onerow == -1 || onecol == -1 || tworow == -1 || twocol == -1) {
		return;
	}
	for (i = onecol; i <= twocol; i++) {
		if (warehouse[onerow][i] == 0) {
			warehouse[onerow][i] = 3;
		}
	}
	for (i = onerow; i <= tworow; i++) {
		if (warehouse[i][twocol] == 0) {
			warehouse[i][twocol] = 3;
		}
	}
	
}",0
msin609,1696139528,2,"void PelletRoute(int warehouse[10][10])
{
	int i;
	int j;
	int onerow = -1;
	int onecol = -1;
	int tworow = -1;
	int twocol = -1;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				onerow = i;
				onecol = j;
			}
			if (warehouse[i][j] == 2) {
				tworow = i;
				twocol = j;
			}
		}
	}
	if (onerow == -1 || onecol == -1 || tworow == -1 || twocol == -1) {
		return;
	}
	if (onecol <= twocol) {
		for (i = onecol; i <= twocol; i++) {
			if (warehouse[onerow][i] == 0) {
				warehouse[onerow][i] = 3;
			}
		}
	}
	if (onerow <= tworow) {
		for (i = onerow; i <= tworow; i++) {
			if (warehouse[i][twocol] == 0) {
				warehouse[i][twocol] = 3;
			}
		}
	}
	if (onecol > twocol) {
		for (i = onecol; i >= twocol; i--) {
			if (warehouse[onerow][i] == 0) {
				warehouse[onerow][i] = 3;
			}
		}
	}
	if (onerow > tworow) {
		for (i = onerow; i >= tworow; i--) {
			if (warehouse[i][twocol] == 0) {
				warehouse[i][twocol] = 3;
			}
		}
	}
}",1
mtha724,1695974852,1,"void PelletRoute(int warehouse[10][10])
{
    int rowWork, colWork, rowEnd, colEnd;
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                rowWork = i;
                colWork = j;
            }
            if (warehouse[i][j] == 2){
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    if (colWork <= colEnd){
        for (int k = colWork+1; k < colEnd; k++){
            warehouse[rowWork][k] = 3;
        }
        if ((warehouse[rowWork][colEnd] != 2) && (warehouse[rowWork][colEnd] != 1)){
            warehouse[rowWork][colEnd] = 3;
        }
    }
    if (colWork > colEnd){
        for (int k = colWork-1; k > colEnd; k--){
            warehouse[rowWork][k] = 3;
        }
        if ((warehouse[rowWork][colEnd] != 2) && (warehouse[rowWork][colEnd] != 1)){
            warehouse[rowWork][colEnd] = 3;
        }
    }
    if (rowWork <= rowEnd){
        for (int l = rowWork+1; l < rowEnd; l++){
            warehouse[l][colEnd] = 3;
        }
    }
    if (rowWork > rowEnd){
        for (int l = rowWork-1; l > rowEnd; l--){
            warehouse[l][colEnd] = 3;
        }
    }
}",1
mtob213,1696194757,1,"/* This function calculates a direct route from the pellet to the destination*/
void PelletRoute(int warehouse[10][10]) 
{
    int i, j, destinationRow, destinationCol, pelletRow, pelletCol;

    // Locate the position of the pellet and destination
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
        }
    }

    // Move horizontally until it lines up with the destination
    for (i = pelletCol; i != destinationCol; i++){
        if (pelletCol > destinationCol) {
            pelletCol--;
        } else {
            pelletCol++;
        }
        warehouse[pelletRow][pelletCol] = 3; // Replace 0 with 3
    }

    // Move vertically until it reaches the destination
    for (i = pelletRow; i != destinationRow; i++){
        if (pelletRow > destinationRow) {
            pelletRow--;
        } else {
            pelletRow++;
        }
        warehouse[pelletRow][pelletCol] = 3; // Replace 0 with 3
    }
    
    // Revert the destination back to 2 from 3
    warehouse[destinationRow][destinationCol] = 2;
}",0
mtob213,1696195028,2,"/* This function calculates a direct route from the pellet to the destination*/
void PelletRoute(int warehouse[10][10]) 
{
    int i, j, destinationRow, destinationCol, pelletRow, pelletCol;

    // Locate the position of the pellet and destination
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
        }
    }

    // Move horizontally until it lines up with the destination
    while (destinationCol != pelletCol){
        if (pelletCol > destinationCol) {
            pelletCol--;
        } else {
            pelletCol++;
        }
        warehouse[pelletRow][pelletCol] = 3; // Replace 0 with 3
    }

    // Move vertically until it reaches the destination
    while (destinationRow != pelletRow){
        if (pelletRow > destinationRow) {
            pelletRow--;
        } else {
            pelletRow++;
        }
        warehouse[pelletRow][pelletCol] = 3; // Replace 0 with 3
    }
    
    // Revert the destination back to 2 from 3
    warehouse[destinationRow][destinationCol] = 2;
}",1
myou984,1695703107,1,"void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    printf(""1 at %d, %d\n"", row1, col1);
    printf(""2 at %d, %d\n"", row2, col2);
    int i,j;
    for (j = (col1+1); j < col2; j++) {
        warehouse[row1][j] = 3;
    }

    for (i = row1; i < row2; i++) {
        warehouse[i][col2] = 3;
    }
}",0
myou984,1695708269,2,"void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    int i,j;

    if (row1 == row2 && col1 < col2) {
        for (j = (col1+1); j < col2; j++) {
            warehouse[row1][j] = 3;
        }
    }

    if (col1 == col2 && row1 < row2) {
        for (i = (row1+1); i < row2; i++) {
            warehouse[i][col1] = 3;
        }
    }

    if (col1 == col2 && row1 > row2) {
        for (i = (row2+1); i < row1; i++) {
            warehouse[i][col2] = 3;
        }
    }

    if (row1 == row2 && col1 > col2) {
        for (j = (col2+1); j < col1; j++) {
            warehouse[row1][j] = 3;
        }
    }

    if (row1 != row2 && col1 < col2) {
        for (j = (col1+1); j < col2; j++) {
            warehouse[row1][j] = 3;
        }
    }

    if (col1 != col2 && row1 < row2) {
        for (i = row1; i < row2; i++) {
            warehouse[i][col2] = 3;
        }
    }

    if (row1 != row2 && col1 > col2) {
        for (j = col2; j < col1; j++) {
            warehouse[row1][j] = 3;
        }
    }

    if (col1 != col2 && row1 > row2) {
        for (i = (row2+1); i < row1; i++) {
            warehouse[i][col2] = 3;
        }
    }

}",0
nask472,1696228522,1,"#include <stdio.h>

void PelletRoute(int array[10][10]) {
   int i, j, rowPos1, colPos1;
	   for (i=0; i < 10; i ++){
		   for (j=0; j < 10; j++ ){
		      if (array[i][j]== 1){
			      rowPos1 = i;
			      colPos1 = j;
		      }
   
         }
      }   
   int rowPos2, colPos2;
      for (i=0; i < 10; i ++) {
         for (j=0; j < 10 ; j++ ) {
            if (array[i][j]== 2){
               rowPos2 = i;
               colPos2 = j;
            }   
         }
      }   
     
   if (colPos2 > colPos1 && rowPos2 > rowPos1 ){
      for(int x = rowPos1; x < rowPos1 + 1; x++){
         for (int y = colPos1 + 1 ; y < (colPos2 + 1 ); y++){
            array[x][y]= 3;
         }
      
      for (int y = colPos2; y < colPos2 + 1; y++){
         for (int x = rowPos1; x < rowPos2; x++ ){
               array[x][y]=3;
         } 
      } 
   }
   }

   if (colPos2 < colPos1 && rowPos2 < rowPos1) {
      for(int x = rowPos1; x < rowPos1 + 1; x++){
            for (int y = colPos1 - 1 ; y > (colPos2 -1 ); y--){
               array[x][y]= 3;
            }
         }
      
      for(int y = colPos2; y < colPos2 + 1; y++){
            for (int x = rowPos1; x > rowPos2; x-- ){
               array[x][y]=3;
            } 
      } 
   }

if ( rowPos1 == rowPos2)  {
   if (colPos2 > colPos1){
      for (int x = rowPos1; x < rowPos1 + 1; x++){
         for (int y = colPos1 + 1; y < colPos2; y++ ){
            array[x][y]=3;
         }
      }
   }
   else if (colPos1 > colPos2) {
      for (int x = rowPos1; x < rowPos1 + 1; x++){
         for (int y = colPos1 - 1; y > colPos2; y-- ){
            array[x][y]=3;
         }
      }
   }

}


if ( colPos1 == colPos2)  {
   if (rowPos2 > rowPos1){
      for (int y = colPos1;  y < colPos1 + 1; y++ ){
         for (int x = rowPos1 + 1; x < rowPos2; x++){
            array[x][y]=3;
         }
      }
   }
   else if (rowPos1 > rowPos2) {
      for (int y = colPos1;  y < colPos1 + 1; y++ ){
         for (int x = rowPos1 - 1; x > rowPos2; x--){
            array[x][y]=3;
         }
      }
   }

}

if(rowPos1 > rowPos2 && colPos2 > colPos1) {
   for (int x = rowPos1; x < rowPos1 + 1; x++) {
      for (int y = colPos1 + 1; y < colPos2 + 1; y++){
         array[x][y]=3;

      }
   }
   for (int y = colPos2 ; y < colPos2 + 1; y++)
      for (int x = rowPos1; x > rowPos2 ; x--){
         array[x][y]=3;
      }
}

if (rowPos2 > rowPos1 && colPos1 > colPos2){
for (int x = rowPos1; x < rowPos1 + 1; x++) {
      for (int y = colPos2; y < colPos1 ; y++){
         array[x][y]=3;

      }
   }
   for (int y = colPos2 ; y < colPos2 + 1; y++) {
      for (int x = rowPos1; x < rowPos2 ; x++){
         array[x][y]=3;
      }
   }
}

}
",1
ncha509,1695942169,1,"void PelletRoute(int warehouse[10][10]){
    int row, col, pellet_row,pellet_col, destination_row,destination_col, vertical, horizontal,i,j;
  
    for (row=0;row<10;row++){
        for (col=0;col<10;col++){
            if (warehouse[row][col]==1){
                pellet_row=row;
                pellet_col=col;
            }
            else if (warehouse[row][col]==2) {
                destination_row=row;
                destination_col=col;

        }
    } 
    }
    horizontal=destination_col - pellet_col;
    vertical=destination_row - pellet_row;
    
    if (horizontal>0){
        for (i=1; i<horizontal;i++){
            warehouse[pellet_row][pellet_col+i]=3;
        }
    }
    else if (horizontal<0){
        for (i=-1; i>horizontal;i--){
            warehouse[pellet_row][pellet_col+i]=3;
        }
    }
    if (vertical>0){
        for (j=1; j<vertical;j++){
            warehouse[pellet_row+j][destination_col]=3;
    }
    }
    else if (vertical<0){
       for (j=-1; j>vertical;j--){
            warehouse[pellet_row+j][destination_col]=3;
        } 
    }
    if (horizontal!=0 && vertical!=0){
        warehouse[pellet_row][destination_col]=3;
    }
}",1
ndas832,1696199150,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;
    int i; 
    int j; 
    
    //The for loop iterates through the elements in the array (layout of the warehouse which is a 10 by 10 array) and assigns the elemenst 1 and 2
    //The element 1 represents the location of the pellet, and the element 2 represents the destination the pellet 
    //has to be delivered (dest)
    for (i = 0; i < 10; i++) {
        
        for (j = 0; j < 10; j++) {
            
            if (warehouse[i][j] == 1) {
                
                pelletRow = i;
                pelletCol = j;
                
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    //Write 4 if statements to account for the different possible routes based on where the pellet (1) and 
    //dest(2) is. These if statements will determine whether the routes will move vertically, horizontally, left or right in 
    //order to reach the destination

//The pellet needs to move horizontally before moving vertically, so this means the if loops needs to iterate first through the columns 
//to determine the horizontal movement. When the pellet moves horizontally (either to the right or left), the pellet will move in the 
//pellet row until it reaches the column where destined value (2) is located. The distance between the pellet and the column with the value 2 
//will be replaced with value 3 

    if (pelletCol <= destCol) { //pellet moves to the right
        
        for (j = pelletCol; j <= destCol; j++) {
            
            if (warehouse[pelletRow][j] !=1 && warehouse [pelletRow][j] !=2) {
                
                warehouse[pelletRow][j] = 3;
            }
            
        }
    } if (pelletCol >= destCol) { // pellet moves to the left 
        
        for (j = pelletCol; j >= destCol; j--) {
            
            if (warehouse[pelletRow][j] !=1 && warehouse [pelletRow][j] !=2) {
                
                warehouse[pelletRow][j] = 3; 
            }
        }
    }
    
    //Once value 3 (horizontal route from the previous if loops) have arrived at the destCol, the if loop iterates through the rows to determine the vertical movement. 
    //When the pellet moves upwards or downwards, it will move in the column where the destined value (2) is located instead. The vertical distance 
    //between the value 3 and the value 2 is again replaced with the value 3 
    
    if (pelletRow <= destRow) { //pellet moves downwards 
        
        for (i = pelletRow; i <= destRow; i++) {
            
            if (warehouse[i][destCol] != 1 && warehouse[i][destCol] !=2) {
                
               warehouse[i][destCol] = 3; 
            }
        }
    } if (pelletRow >= destRow){ //pellet moves upwards
        
        for (i = pelletRow; i >= destRow; i--) {
            
            if (warehouse[i][destCol] != 1 && warehouse[i][destCol] !=2) {
                
                warehouse[i][destCol] = 3; 
            }
        }
    }
}
",1
ngan146,1696237255,1,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {
    int pRow = 0;
    int pCol = 0;
    int destRow = 0;
    int destCol = 0;

    for (int j = 0; j < 10; j++) {
        for(int k = 0; k < 10; ) {
            if (warehouse[j][k] == 1) {
                pRow = j;
                pCol = k
            }else if(warehouse[j][k] == 2) {
                destRow = j;
                destCol = k;
            }
        }
    }

    while(pRow != destRow) {
        if (pRow > destRow) {
            pRow--;
        }else {
            pRow++;
        }
        warehouse[pRow][pCol] = 3;
    }
    

     while(pCol != destCol) {
        if (pCol > destCol) {
            pCol--;
        }else {
            pCol++;
        }
        warehouse[pRow][pCol] = 3;
    }
}",0
ngan146,1696237276,2,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {
    int pRow = 0;
    int pCol = 0;
    int destRow = 0;
    int destCol = 0;

    for (int j = 0; j < 10; j++) {
        for(int k = 0; k < 10; ) {
            if (warehouse[j][k] == 1) {
                pRow = j;
                pCol = k;
            }else if(warehouse[j][k] == 2) {
                destRow = j;
                destCol = k;
            }
        }
    }

    while(pRow != destRow) {
        if (pRow > destRow) {
            pRow--;
        }else {
            pRow++;
        }
        warehouse[pRow][pCol] = 3;
    }
    

     while(pCol != destCol) {
        if (pCol > destCol) {
            pCol--;
        }else {
            pCol++;
        }
        warehouse[pRow][pCol] = 3;
    }
}",0
ngan146,1696237794,3,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {
    int pRow = 0;
    int pCol = 0;
    int destRow = 0;
    int destCol = 0;
    int flag1 = 0;
    int flag2 = 0;

    for (int j = 0; j < 10; j++) {
        for(int k = 0; k < 10; ) {
            if (warehouse[j][k] == 1) {
                pRow = j;
                pCol = k
            }else if(warehouse[j][k] == 2) {
                destRow = j;
                destCol = k;
            }
        }
    }

    while(flag != -1) {
        if (pRow > destRow) {
            pRow--;
        }else {
            pRow++;
        }
        warehouse[pRow][pCol] = 3;
        if(pRow != destRow) {
            flag2 = -1;
        }
    }
    

     while(flag1 != -1) {
        if (pCol > destCol) {
            pCol--;
        }else {
            pCol++;
        }
        warehouse[pRow][pCol] = 3;
        if(pCol != destCol) {
            flag1 = -1;
        }
    }
}",0
ngan146,1696237806,4,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {
    int pRow = 0;
    int pCol = 0;
    int destRow = 0;
    int destCol = 0;
    int flag1 = 0;
    int flag2 = 0;

    for (int j = 0; j < 10; j++) {
        for(int k = 0; k < 10; ) {
            if (warehouse[j][k] == 1) {
                pRow = j;
                pCol = k;
            }else if(warehouse[j][k] == 2) {
                destRow = j;
                destCol = k;
            }
        }
    }

    while(flag != -1) {
        if (pRow > destRow) {
            pRow--;
        }else {
            pRow++;
        }
        warehouse[pRow][pCol] = 3;
        if(pRow != destRow) {
            flag2 = -1;
        }
    }
    

     while(flag1 != -1) {
        if (pCol > destCol) {
            pCol--;
        }else {
            pCol++;
        }
        warehouse[pRow][pCol] = 3;
        if(pCol != destCol) {
            flag1 = -1;
        }
    }
}",0
ngan146,1696237815,5,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {
    int pRow = 0;
    int pCol = 0;
    int destRow = 0;
    int destCol = 0;
    int flag1 = 0;
    int flag2 = 0;

    for (int j = 0; j < 10; j++) {
        for(int k = 0; k < 10; ) {
            if (warehouse[j][k] == 1) {
                pRow = j;
                pCol = k;
            }else if(warehouse[j][k] == 2) {
                destRow = j;
                destCol = k;
            }
        }
    }

    while(flag2 != -1) {
        if (pRow > destRow) {
            pRow--;
        }else {
            pRow++;
        }
        warehouse[pRow][pCol] = 3;
        if(pRow != destRow) {
            flag2 = -1;
        }
    }
    

     while(flag1 != -1) {
        if (pCol > destCol) {
            pCol--;
        }else {
            pCol++;
        }
        warehouse[pRow][pCol] = 3;
        if(pCol != destCol) {
            flag1 = -1;
        }
    }
}",0
ngna565,1695983538,1,"#include <iostream>

void PelletRoute(int warehouse[10][10]) {

    int Row, Col, finalRow, finalCol;
    
    
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                
                
                Row = i;
                Col = j;
            } else if (warehouse[i][j] == 2) {
                finalRow = i;
                finalCol = j;
            }
        }
    }

    // Move the pellet horizontally first
    while (Col != finalCol) {
        if (Col < finalCol) {
            Col++;
        } else {
            Col--;
        }
        warehouse[Row][Col] = 3;
    }

    while (Row != finalRow) {
        if (Row < finalRow) {
            Row++;
        } else {
            Row--;
        }
        warehouse[Row][Col] = 3;
    }
}

",0
ngna565,1695983568,2,"
void PelletRoute(int warehouse[10][10]) {

    int Row, Col, finalRow, finalCol;
    
    
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                
                
                Row = i;
                Col = j;
            } else if (warehouse[i][j] == 2) {
                finalRow = i;
                finalCol = j;
            }
        }
    }

    // Move the pellet horizontally first
    while (Col != finalCol) {
        if (Col < finalCol) {
            Col++;
        } else {
            Col--;
        }
        warehouse[Row][Col] = 3;
    }

    while (Row != finalRow) {
        if (Row < finalRow) {
            Row++;
        } else {
            Row--;
        }
        warehouse[Row][Col] = 3;
    }
}

",0
ngna565,1695984745,3,"void PelletRoute(int warehouse[10][10]) {

    int Row, Col, finalRow, finalCol;
    
  int map = warehouse ; 
    
    
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                
                
                Row = i;
                Col = j;
            } else if (warehouse[i][j] == 2) {
                finalRow = i;
                finalCol = j;
            }
        }
    }

    while (Col != finalCol) {
        if (Col < finalCol) {
            Col++;
        } else {
            Col--;
        }
        warehouse[Row][Col] = 3;
    }

    while (Row != finalRow) {
        if (Row < finalRow) {
            Row++;
        } else {
            Row--;
        }
        warehouse[Row][Col] = 3;
    }
    
    warehouse[finalRow][finalCol] = 2;
}",0
ngna565,1695984855,4,"void PelletRoute(int warehouse[10][10]) {

    int Row, Col, finalRow, finalCol;
    
    
    
    for (int i = 0; i < 10; ++i) {
        for (int j = 0; j < 10; ++j) {
            if (warehouse[i][j] == 1) {
                
                
                Row = i;
                Col = j;
            } else if (warehouse[i][j] == 2) {
                finalRow = i;
                finalCol = j;
            }
        }
    }

    while (Col != finalCol) {
        if (Col < finalCol) {
            Col++;
        } else {
            Col--;
        }
        warehouse[Row][Col] = 3;
    }

    while (Row != finalRow) {
        if (Row < finalRow) {
            Row++;
        } else {
            Row--;
        }
        warehouse[Row][Col] = 3;
    }
    
    warehouse[finalRow][finalCol] = 2;
}
",1
nhar865,1696163263,1,"void FindTile(int board[10][10], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < 10; row++) {
        for (int column = 0; column < 10; column++) {
            if (board[row][column] == tile) {
                *rowPos = row;
                *colPos = column;
                return;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10]) {
    int startRow, startColumn, endRow, endColumn;

    FindTile(warehouse, 1, &startRow, &startColumn);
    FindTile(warehouse, 2, &endRow, &endColumn);

    {
        int from = (startColumn < endColumn) ? startColumn + 1 : endColumn;
        int to = (startColumn < endColumn) ? endColumn : startColumn - 1;

        for (int i = from; i <= to; i++) {
            warehouse[startRow][i] = 3;
        }
    }


    {
        int from = (startRow < endRow) ? startRow - 1: endRow + 1;
        int to = (startRow < endRow) ? endRow : startRow;

        for (int i = from; i <= to; i++) {
            warehouse[i][endColumn] = 3;
        }
    }
}
",0
nhar865,1696163496,2,"void FindTile(int board[10][10], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < 10; row++) {
        for (int column = 0; column < 10; column++) {
            if (board[row][column] == tile) {
                *rowPos = row;
                *colPos = column;
                return;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10]) {
    int startRow, startColumn, endRow, endColumn;

    FindTile(warehouse, 1, &startRow, &startColumn);
    FindTile(warehouse, 2, &endRow, &endColumn);

    {
        int from = (startColumn < endColumn) ? startColumn + 1 : endColumn;
        int to = (startColumn < endColumn) ? endColumn : startColumn - 1;

        for (int i = from; i <= to; i++) {
            warehouse[startRow][i] = 3;
        }
    }


    {
        int from = (startRow < endRow) ? startRow - 1: endRow + 1;
        int to = (startRow < endRow) ? endRow - 1 : startRow;

        for (int i = from; i <= to; i++) {
            warehouse[i][endColumn] = 3;
        }
    }
}",0
nhar865,1696164847,3,"void FindTile(int board[10][10], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < 10; row++) {
        for (int column = 0; column < 10; column++) {
            if (board[row][column] == tile) {
                *rowPos = row;
                *colPos = column;
                return;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10]) {
    int startRow, startCol, endRow, endCol;

    FindTile(warehouse, 1, &startRow, &startCol);
    FindTile(warehouse, 2, &endRow, &endCol);

    int rowInc = (startRow < endRow) ? 1 : -1;
    int colInc = (startCol < endCol) ? 1 : -1;

    if (startRow != endRow) {
        for (int i = startRow + rowInc; i != endRow; i += rowInc) { warehouse[i][startCol] = 3; }

        for (int i = startCol; i != endCol; i += colInc) { warehouse[endRow][i] = 3; }
    } else {
        for (int i = startCol + colInc; i != endCol; i += colInc) { warehouse[endRow][i] = 3; }
    }
}",0
nhar865,1696165232,4,"void FindTile(int board[10][10], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < 10; row++) {
        for (int column = 0; column < 10; column++) {
            if (board[row][column] == tile) {
                *rowPos = row;
                *colPos = column;
                return;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10]) {
    int startRow, startCol, endRow, endCol;

    FindTile(warehouse, 1, &startRow, &startCol);
    FindTile(warehouse, 2, &endRow, &endCol);

    int rowInc = (startRow < endRow) ? 1 : -1;
    int colInc = (startCol < endCol) ? 1 : -1;

    if (startCol != endCol) {
        for (int i = startCol + colInc; i != endCol; i += colInc) { warehouse[startRow][i] = 3; }

        for (int i = startRow; i != endRow; i += rowInc) { warehouse[i][endCol] = 3; }
    } else {
        for (int i = startRow + rowInc; i != endRow; i += rowInc) { warehouse[i][endCol] = 3; }
    }
}
",1
nhua986,1695896721,1,"void PelletRoute(int warehouse[10][10])
{
    int start, end, rowStart, colStart, rowEnd, colEnd;
    // finding the 1 and 2 tiles in the array
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }    
            else if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }
    
    // pathfinding 
    // if the start is to the left of the end.
    if ((colEnd > colStart) && (rowEnd != rowStart)) {
        for (int i = 1; i <= (colEnd - colStart); i++) {
            warehouse[rowStart][colStart + i] = 3;
        }
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
    } 
    // if the start is to the right of the end
    else if ((colEnd < colStart) && (rowEnd != rowStart)) {
        for (int i = 1; i <= (colStart - colEnd); i++) {
            warehouse[rowStart][colStart - i] = 3;
        }
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
    } 
    else {
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
        
    }
}",0
nhua986,1695896821,2,"void PelletRoute(int warehouse[10][10])
{
    int rowStart, colStart, rowEnd, colEnd;
    // finding the 1 and 2 tiles in the array
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }    
            else if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }
    
    // pathfinding 
    // if the start is to the left of the end.
    if ((colEnd > colStart) && (rowEnd != rowStart)) {
        for (int i = 1; i <= (colEnd - colStart); i++) {
            warehouse[rowStart][colStart + i] = 3;
        }
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
    } 
    // if the start is to the right of the end
    else if ((colEnd < colStart) && (rowEnd != rowStart)) {
        for (int i = 1; i <= (colStart - colEnd); i++) {
            warehouse[rowStart][colStart - i] = 3;
        }
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
    } 
    else {
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
        
    }
}",0
nhua986,1695897162,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int rowStart, colStart, rowEnd, colEnd;
    // finding the 1 and 2 tiles in the array
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowStart = i;
                colStart = j;
            }    
            else if (warehouse[i][j] == 2) {
                rowEnd = i;
                colEnd = j;
            }
        }
    }
    
    // pathfinding 
    // if the start is to the left of the end.
    if ((colEnd > colStart) && (rowEnd != rowStart)) {
        for (int i = 1; i <= (colEnd - colStart); i++) {
            warehouse[rowStart][colStart + i] = 3;
        }
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
    } 
    // if the start is to the right of the end
    else if ((colEnd < colStart) && (rowEnd != rowStart)) {
        for (int i = 1; i <= (colStart - colEnd); i++) {
            warehouse[rowStart][colStart - i] = 3;
        }
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
    } 
    // same level
    else if (colEnd == colStart) {
        if (rowEnd > rowStart) {            // if the end is below the start
            for (int j = 1; j < (rowEnd - rowStart); j++) {
                warehouse[rowStart + j][colEnd] = 3;
            }
        }
        else {                              // if the end is above the start
            for (int j = 1; j < (rowStart - rowEnd); j++){
                warehouse[rowEnd + j][colEnd] = 3;
            }
        }
        
    }
    else if ((colEnd < colStart) && (rowEnd == rowStart)) {
        for (int i = 1; i < (colStart - colEnd); i++) {
            warehouse[rowStart][colStart - i] = 3;
        }
    }
    else if ((colEnd > colStart) && (rowEnd == rowStart)) {
        for (int i = 1; i < (colEnd - colStart); i++) {
            warehouse[rowStart][colStart + i] = 3;
        }
    }
    else {
        
    }
}",1
nhut042,1695865312,1,"void PelletRoute(int warehouse[10][10])
{
    int craterow, cratecol, endrow, endcol;

    for (int rows = 0; rows < 10; rows++) 
    {
        for (int columns = 0; columns < 10; columns++)
        {
            if (warehouse[rows][columns] == 1)
            {
                cratecol = columns;
                craterow = rows;
                
            }
            if (warehouse[rows][columns] == 2)
            {
                endcol = columns;
                endrow = rows;
                
            }
        }
    }
    
    for (int columns = 0; columns < 10; columns++)
    {
        if (((columns > cratecol) && (columns <= endcol)) || ((columns < cratecol) && (columns >= endcol)))
        {
        warehouse[craterow][columns] = 3;
        }
    }
    for (int rows = 0; rows < 10; rows++)
    {
        if (((rows > craterow) && (rows < endrow)) || ((rows < craterow) && (rows > endrow)))
        {
            warehouse[rows][endcol] = 3;
        }
    }
    return;
}",0
nhut042,1695865834,2,"void PelletRoute(int warehouse[10][10])
{
    int craterow, cratecol, endrow, endcol;

    for (int rows = 0; rows < 10; rows++) 
    {
        for (int columns = 0; columns < 10; columns++)
        {
            if (warehouse[rows][columns] == 1)
            {
                cratecol = columns;
                craterow = rows;
                
            }
            if (warehouse[rows][columns] == 2)
            {
                endcol = columns;
                endrow = rows;
                
            }
        }
    }
    
    for (int columns = 0; columns < 10; columns++)
    {
        if (((columns > cratecol) && (columns < endcol)) || ((columns < cratecol) && (columns > endcol)))
        {
        warehouse[craterow][columns] = 3;
        }
    }
    for (int rows = 0; rows < 10; rows++)
    {
        if (((rows > craterow) && (rows < endrow)) || ((rows < craterow) && (rows > endrow)))
        {
            warehouse[rows][endcol] = 3;
        }
    }
    if ((craterow != endrow) && (cratecol != endcol))
    {
        warehouse[craterow][endcol] = 3;
    }
    return;
}",1
nisa397,1695961744,1,"void PelletRoute(int warehouse[10][10]) {
	
	
	//Finding pellet location and destination
	int i, j;
	int PelRow = 0;
	int PelCol = 0;
	int DestRow = 0;
	int DestCol = 0;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j]==1) {
				PelRow = i;
				PelCol = j;
			}
			if (warehouse[i][j] == 2) {
				DestRow = i;
				DestCol = j;
			}
		}
	}
	
	//Finding number of horizontal steps and vertical steps
	//int HoriSteps, VertSteps;
	
	/*if (PelRow == DestRow) {
		HoriSteps = DestCol - PelCol;
	}
	else {
		HoriSteps = DestCol - PelCol - 1;
	}

	VertSteps = DestRow - PelRow - 1;
	*/
	//Converting all elements in the route to 3
	
	//Horizontal movement
	//Checks whether Destination is on right or left of Pellet and checks whether the column is in line with each other
	if (PelRow == DestRow) {
		if (PelCol < DestCol) {
			for (i = PelCol + 1; i < DestCol; i++) {
				warehouse[PelRow][i] = 3;
			}
		}
		else if (PelCol > DestCol) {
			for (i = PelCol - 1; i > DestCol; i--) {
				warehouse[PelRow][i] = 3;
			}
		}

	}
	else {
		if (PelCol < DestCol) {
			for (i = PelCol + 1; i <= DestCol; i++) {
				warehouse[PelRow][i] = 3;
			}
		}
		else if (PelCol > DestCol) {
			for (i = PelCol - 1; i >= DestCol; i--) {
				warehouse[PelRow][i] = 3;
			}
		}
	}
	
	


	//Vertical movement
	//Checks whether destination is above or below pellet

	if (PelRow<DestRow) {
		for (i = PelRow + 1; i < DestRow; i++) {
			warehouse[i][DestCol] = 3;
		}
	}
	else if (PelRow > DestRow) {
		for (i = PelRow - 1; i > DestRow; i--) {
			warehouse[i][DestCol] = 3;
		}
	}
	

}
",1
nlal162,1695899607,1,"/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void PelletRoute(int layout_floor[10][10])
{
    int pellet_row, pellet_col;
    int destination_row, destination_col;
    int i, j;
    
    //position of pellet and destination.
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (layout_floor[i][j] == 1){
                pellet_row = i;
                pellet_col = j;
            }
            else if (layout_floor[i][j == 2]){
                destination_row = i;
                destination_col = j;
            }
        } 
    } 
    //move horizontally to align with destination
    while (pellet_col != destination_col){
        if (pellet_col < destination_col){
            pellet_col++;
        }
        else {
            pellet_col--;
        }
        // mark route with 3
        layout_floor[pellet_row][pellet_col] == 3;
    }
    //move vertically to reach destination
    while (pellet_row != destination_row){
        if (pellet_row < destination_row){
            pellet_row++;
        }
        else{
            pellet_row--;
        }
        //mark route with 3 
        layout_floor[pellet_row][pellet_col] = 3;
    }
   
}
",0
nlal162,1695899744,2,"
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int pellet_row, pellet_col;
    int destination_row, destination_col;
    int i, j;
    
    //position of pellet and destination.
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                pellet_row = i;
                pellet_col = j;
            }
            else if (warehouse[i][j == 2]){
                destination_row = i;
                destination_col = j;
            }
        } 
    } 
    //move horizontally to align with destination
    while (pellet_col != destination_col){
        if (pellet_col < destination_col){
            pellet_col++;
        }
        else {
            pellet_col--;
        }
        // mark route with 3
        warehouse[pellet_row][pellet_col] == 3;
    }
    //move vertically to reach destination
    while (pellet_row != destination_row){
        if (pellet_row < destination_row){
            pellet_row++;
        }
        else{
            pellet_row--;
        }
        //mark route with 3 
        warehouse[pellet_row][pellet_col] = 3;
    }
   
}
",0
nlal162,1695899782,3,"
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int pellet_row, pellet_col;
    int destination_row, destination_col;
    int i, j;
    
    //position of pellet and destination.
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                pellet_row = i;
                pellet_col = j;
            }
            else if (warehouse[i][j == 2]){
                destination_row = i;
                destination_col = j;
            }
        } 
    } 
    //move horizontally to align with destination
    while (pellet_col != destination_col){
        if (pellet_col < destination_col){
            pellet_col++;
        }
        else {
            pellet_col--;
        }
        // mark route with 3
        warehouse[pellet_row][pellet_col] = 3;
    }
    //move vertically to reach destination
    while (pellet_row != destination_row){
        if (pellet_row < destination_row){
            pellet_row++;
        }
        else{
            pellet_row--;
        }
        //mark route with 3 
        warehouse[pellet_row][pellet_col] = 3;
    }
   
}
",0
nlal162,1695899897,4,"
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int pellet_row, pellet_col;
    int destination_row, destination_col;
    int i, j;
    
    //position of pellet and destination.
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                pellet_row = i;
                pellet_col = j;
            }
            else if (warehouse[i][j == 2]){
                destination_row = i;
                destination_col = j;
            }
        } 
    } 
    //move horizontally to align with destination
    while (pellet_col != destination_col){
        if (pellet_col < destination_col){
            pellet_col++;
        }
        else {
            pellet_col--;
        }
        // mark route with 3
        warehouse[pellet_row][pellet_col] = 3;
    }
    //move vertically to reach destination
    while (pellet_row != destination_row){
        if (pellet_row < destination_row){
            pellet_row++;
        }
        else{
            pellet_row--;
        }
        //mark route with 3 
        warehouse[pellet_row][pellet_col] = 3;
    }
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }
}
   
}
",0
nlal162,1695899974,5,"
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int pellet_row, pellet_col;
    int destination_row, destination_col;
    int i, j;
    
    //position of pellet and destination.
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                pellet_row = i;
                pellet_col = j;
            }
            else if (warehouse[i][j == 2]){
                destination_row = i;
                destination_col = j;
            }
        } 
    } 
    //move horizontally to align with destination
    while (pellet_col != destination_col){
        if (pellet_col < destination_col){
            pellet_col++;
        }
        else {
            pellet_col--;
        }
        // mark route with 3
        warehouse[pellet_row][pellet_col] = 3;
    }
    //move vertically to reach destination
    while (pellet_row != destination_row){
        if (pellet_row < destination_row){
            pellet_row++;
        }
        else{
            pellet_row--;
        }
        //mark route with 3 
        warehouse[pellet_row][pellet_col] = 3;
    }
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }
}
   

",0
nmah920,1696144432,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int start_row, start_col;
    int end_row, end_col;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1)
            {
                start_row = i;
                start_col = j;
            }
            
            else if (warehouse[i][j] == 2)
            {
                end_row = i;
                end_col = j;
            }
        }
    }

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {

            if (start_col < end_col && i == start_row && start_row != end_row)
            {
                for (int k = start_col + 1; k <= end_col; k++)
                {
                    warehouse[i][k] = 3;
                }
            }

            else if (start_col > end_col && i == start_row && start_row != end_row)
            {
                for (int k = end_col; k < start_col; k++)
                {
                    warehouse[i][k] = 3;
                }
            }

            if (start_row == end_row && i == start_row)
            {
                if (start_col < end_col)
                {
                    for (int k = start_col + 1; k < end_col; k++)
                    {
                        warehouse[i][k] = 3;
                    }
                }

                else if (start_col > end_col )
                {
                    for (int k = end_col + 1; k < start_col; k++)
                    {
                        warehouse[i][k] = 3;
                    }
                }
            }

            if (warehouse[i][j] == 3 && j == end_col)
            {
                if (i < end_row && start_col != end_col)
                {
                    for (int n = i + 1; n < end_row; n++)
                    {
                        warehouse[n][j] = 3;
                    }
                }

                else if (i > end_row && start_col != end_col)
                {
                    for (int n = end_row + 1; n < start_row; n++)
                    {
                        warehouse[n][j] = 3;
                    }
                }
            }

            if (start_col == end_col && j == start_col)
            {
                if (start_row < end_row)
                {
                    for (int n = start_row + 1; n < end_row; n++)
                    {
                        warehouse[n][j] = 3;
                    }
                }

                else if (start_row > end_row )
                {
                    for (int n = end_row + 1; n < start_row; n++)
                    {
                        warehouse[n][j] = 3;
                    }
                }
            } 

            
        }
    }
}",1
nrub019,1695859741,1,"void Locate(int warehouse[10][10], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == tile) {
                *colPos = j;
                *rowPos = i;
                return;
            }
        }
    }
}


void PelletRoute(int warehouse[10][10]) {

    // locate staring and ending position
    int starty, startx, endy, endx;
    Locate(warehouse, 1, &starty, &startx);
    Locate(warehouse, 2, &endy, &endx);


    if (endx - startx >= 0) {
        for (int i = startx; i < endx; i++) {
            warehouse[starty][i+1] = 3;
        }

    } else {
        for (int i = startx; i > endx; i--) {
            warehouse[starty][i-1] = 3;
        }
    }

    if (endy - starty >= 0) {
        for (int i = starty; i < endy; i++) {
            warehouse[i][endx] = 3;
        }
    } else {
        for (int i = starty; i > endy; i--) {
            warehouse[i][endx] = 3;
        }
    }
}",0
nrub019,1695861011,2,"void Locate(int warehouse[10][10], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == tile) {
                *colPos = j;
                *rowPos = i;
                return;
            }
        }
    }
}


void PelletRoute(int warehouse[10][10]) {

    // locate staring and ending position
    int starty, startx, endy, endx;
    Locate(warehouse, 1, &starty, &startx);
    Locate(warehouse, 2, &endy, &endx);

printf(""startx = %d\n starty = %d\n endx = %d\n endy = %d\n"", startx, starty, endx, endy);
    if (endx - startx > 0) {
        for (int i = startx + 1; i < endx; i++) {
            warehouse[starty][i] = 3;
        }

    } else {
        for (int i = startx - 1; i > endx; i--) {
            warehouse[starty][i] = 3;
        }
    }


    if (endy - starty > 0) {
        for (int i = starty + 1; i < endy; i++) {
            warehouse[i][endx] = 3;
        }
    } else {
        for (int i = starty -1; i > endy; i--) {
            warehouse[i][endx] = 3;
        }
    }
    if ((endy-starty != 0)&& (endx - startx != 0)) {

        warehouse[starty][endx] = 3;

    }

}",0
nrub019,1695861051,3,"void Locate(int warehouse[10][10], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == tile) {
                *colPos = j;
                *rowPos = i;
                return;
            }
        }
    }
}


void PelletRoute(int warehouse[10][10]) {

    // locate staring and ending position
    int starty, startx, endy, endx;
    Locate(warehouse, 1, &starty, &startx);
    Locate(warehouse, 2, &endy, &endx);


    if (endx - startx > 0) {
        for (int i = startx + 1; i < endx; i++) {
            warehouse[starty][i] = 3;
        }

    } else {
        for (int i = startx - 1; i > endx; i--) {
            warehouse[starty][i] = 3;
        }
    }


    if (endy - starty > 0) {
        for (int i = starty + 1; i < endy; i++) {
            warehouse[i][endx] = 3;
        }
    } else {
        for (int i = starty -1; i > endy; i--) {
            warehouse[i][endx] = 3;
        }
    }
    if ((endy-starty != 0)&& (endx - startx != 0)) {

        warehouse[starty][endx] = 3;

    }

}",1
ntur101,1695897132,1,"void PelletRoute(int warehouse[10][10])
{
	int WorkerRow, WorkerCol, BoxRow,BoxCol;

	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				WorkerRow = i;
				WorkerCol = j;
			}
			if (warehouse[i][j] == 2)
			{
				BoxRow = i;
				BoxCol = j;
				//printf(""row %d and col %d \n"", BoxRow, BoxCol);
			}
		}
	}

	int horz, vert;

	horz = BoxCol - WorkerCol;
	vert = BoxRow - WorkerRow;

	if (horz > 0) {
		for (int i = WorkerCol + 1; i <= BoxCol; i++) {
			warehouse[WorkerRow][i] = 3;
		}
	}
	else if (horz < 0) {
		for (int i = WorkerCol - 1; i >= BoxCol; i--) {
			warehouse[WorkerRow][i] = 3;
		}
	}

	if (vert > 0) {
		for (int i = WorkerRow + 1; i < BoxRow; i++) {
			warehouse[i][BoxCol] = 3;
		}
	}
	else if (vert < 0) {
		for (int i = WorkerRow - 1; i > BoxRow; i--) {
			warehouse[i][BoxCol] = 3;
		}
	}
}",0
ntur101,1695897302,2,"void PelletRoute(int warehouse[10][10])
{
	int WorkerRow, WorkerCol, BoxRow,BoxCol;

	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				WorkerRow = i;
				WorkerCol = j;
			}
			if (warehouse[i][j] == 2)
			{
				BoxRow = i;
				BoxCol = j;
				//printf(""row %d and col %d \n"", BoxRow, BoxCol);
			}
		}
	}

	int horz, vert;

	horz = BoxCol - WorkerCol;
	vert = BoxRow - WorkerRow;

	if (horz > 0) {
		for (int i = WorkerCol + 1; i < BoxCol; i++) {
			warehouse[WorkerRow][i] = 3;
		}
	}
	else if (horz < 0) {
		for (int i = WorkerCol - 1; i > BoxCol; i--) {
			warehouse[WorkerRow][i] = 3;
		}
	}

	if (vert > 0) {
		for (int i = WorkerRow + 1; i < BoxRow; i++) {
			warehouse[i][BoxCol] = 3;
		}
	}
	else if (vert < 0) {
		for (int i = WorkerRow - 1; i > BoxRow; i--) {
			warehouse[i][BoxCol] = 3;
		}
	}
}",0
ntur101,1695989563,3,"void PelletRoute(int warehouse[10][10])
{
	int WorkerRow, WorkerCol, BoxRow,BoxCol;

	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				WorkerRow = i;
				WorkerCol = j;
			}
			if (warehouse[i][j] == 2)
			{
				BoxRow = i;
				BoxCol = j;
				//printf(""row %d and col %d \n"", BoxRow, BoxCol);
			}
		}
	}

	int horz, vert;

	horz = BoxCol - WorkerCol;
	vert = BoxRow - WorkerRow;

	if (horz > 0  && vert != 0) {
		for (int i = WorkerCol + 1; i <= BoxCol; i++) {
			warehouse[WorkerRow][i] = 3;
		}
	}
	else if (horz < 0 && vert != 0) {
		for (int i = WorkerCol - 1; i >= BoxCol; i--) {
			warehouse[WorkerRow][i] = 3;
		}
	}

	if (vert > 0 && horz != 0) {
		for (int i = WorkerRow + 1; i < BoxRow; i++) {
			warehouse[i][BoxCol] = 3;
		}
	}
	else if (vert < 0 && horz != 0) {
		for (int i = WorkerRow - 1; i > BoxRow; i--) {
			warehouse[i][BoxCol] = 3;
		}
	}
	
	if (horz > 0 && vert == 0) {
		for (int i = WorkerCol + 1; i < BoxCol; i++) {
			warehouse[WorkerRow][i] = 3;
		}
	}
	else if (horz < 0 && vert == 0) {
		for (int i = WorkerCol - 1; i > BoxCol; i--) {
			warehouse[WorkerRow][i] = 3;
		}
	}

	if (vert > 0 && horz == 0) {
		for (int i = WorkerRow + 1; i < BoxRow; i++) {
			warehouse[i][BoxCol] = 3;
		}
	}
	else if (vert < 0 && horz == 0) {
		for (int i = WorkerRow - 1; i > BoxRow; i--) {
			warehouse[i][BoxCol] = 3;
		}
	}
	
}",1
nwei818,1695697890,1,"void PelletRoute(int warehouse[10][10]) {

    int rowPos = 0;
    int colPos = 0;
    int rowFin = 0;
    int colFin = 0;
    int rowDiff = 0;
    int colDiff = 0;

    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                rowPos = row;
                colPos = col;
            }
            if (warehouse[row][col] == 2) {
                rowFin = row;
                colFin = col;
            }
        }
    }

    //find difference between 2-1 row and col
    rowDiff = rowFin - rowPos;
    colDiff = colFin - colPos;

    //negative row move up
    if (rowDiff < 0) {
        for (int r = rowPos; r > rowFin; r--) {
            warehouse[r][colFin] = 3;
        }
    }
    else if (rowDiff > 0){ //positive row move down 
        for (int r = rowPos; r < rowFin; r++) {
            warehouse[r][colFin] = 3;
        }
    }

    
  
    //negative col move left
    if (colDiff < 0) {
        for (int c = colPos-1; c > colFin; c--) {
            warehouse[rowPos][c] = 3;
        }
    }
    else if (colDiff > 0){ // positive col move right
        for (int c = colPos+1; c < colFin; c++) {
            warehouse[rowPos][c] = 3;
        }
    }
}",0
nwei818,1695699323,2,"void PelletRoute(int warehouse[10][10]) {

    int rowPos = 0;
    int colPos = 0;
    int rowFin = 0;
    int colFin = 0;
    int rowDiff = 0;
    int colDiff = 0;

    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                rowPos = row;
                colPos = col;
            }
            if (warehouse[row][col] == 2) {
                rowFin = row;
                colFin = col;
            }
        }
    }

    //find difference between 2-1 row and col
    rowDiff = rowFin - rowPos;
    colDiff = colFin - colPos;

    //negative row move up
    if (rowDiff < 0) {
        for (int r = rowPos; r > rowFin; r--) {
            warehouse[r][colFin] = 3;
        }
    }
    else if (rowDiff > 0) { //positive row move down 
        for (int r = rowPos; r < rowFin; r++) {
            warehouse[r][colFin] = 3;
        }
    }



    //negative col move left
    if (colDiff < 0) {
        for (int c = colPos - 1; c > colFin; c--) {
            warehouse[rowPos][c] = 3;
        }
    }
    else if (colDiff > 0) { // positive col move right
        for (int c = colPos + 1; c < colFin; c++) {
            warehouse[rowPos][c] = 3;
        }
    }

    warehouse[rowPos][colPos] = 1;
}",1
ogan176,1696055548,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletPosX, pelletPosY, destPosX, destPosY;
    int i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletPosX = i;
                pelletPosY = j;
            }
            if (warehouse[i][j] == 2) {
                destPosX = i;
                destPosY = j;
            }
        }
    }

    while (pelletPosX != destPosX) {
        if (pelletPosX < destPosX) {
            pelletPosX++;
            if (warehouse[pelletPosX][pelletPosY] != 1 && warehouse[pelletPosX][pelletPosY] != 2) {
                warehouse[pelletPosX][pelletPosY] = 3;
            }
        }
        else if (pelletPosX > destPosX) {
            pelletPosX--;
            if (warehouse[pelletPosX][pelletPosY] != 1 && warehouse[pelletPosX][pelletPosY] != 2) {
                warehouse[pelletPosX][pelletPosY = 3];
            }
        }
    }


    while (pelletPosY != destPosY) {
        if (pelletPosY < destPosY) {
            pelletPosY++;
            if (warehouse[pelletPosX][pelletPosY] != 1 && warehouse[pelletPosX][pelletPosY] != 2) {
                warehouse[pelletPosX][pelletPosY] = 3;
            }
            else if (pelletPosY > destPosY) {
                pelletPosY--;
                if (warehouse[pelletPosX][pelletPosY] != 1 && warehouse[pelletPosX][pelletPosY] != 2) {
                    warehouse[pelletPosX][pelletPosY] = 3;
                }
            }
        }

    }
}",0
ogan176,1696055931,2,"void PelletRoute(int warehouse[10][10]) {
    int pelletPosX, pelletPosY, destPosX, destPosY;
    int i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletPosX = i;
                pelletPosY = j;
            }
            if (warehouse[i][j] == 2) {
                destPosX = i;
                destPosY = j;
            }
        }
    }

    while (pelletPosY != destPosY) {
        if (pelletPosY < destPosY) {
            pelletPosY++;
            if (warehouse[pelletPosX][pelletPosY] != 1 && warehouse[pelletPosX][pelletPosY] != 2) {
                warehouse[pelletPosX][pelletPosY] = 3;
            }
        }
        else if (pelletPosY > destPosY) {
            pelletPosY--;
            if (warehouse[pelletPosX][pelletPosY] != 1 && warehouse[pelletPosX][pelletPosY] != 2) {
                warehouse[pelletPosX][pelletPosY] = 3;
            }
        }
    }

    while (pelletPosX != destPosX) {
        if (pelletPosX < destPosX) {
            pelletPosX++;
            if (warehouse[pelletPosX][pelletPosY] != 1 && warehouse[pelletPosX][pelletPosY] != 2) {
                warehouse[pelletPosX][pelletPosY] = 3;
            }
        }
        else if (pelletPosX > destPosX) {
            pelletPosX--;
            if (warehouse[pelletPosX][pelletPosY] != 1 && warehouse[pelletPosX][pelletPosY] != 2) {
                warehouse[pelletPosX][pelletPosY] = 3;
            }
        }
    }
}",1
ogar584,1695869273,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j, startrow, startcol, endrow, endcol, horizontal, vertical, a, b, c, d;
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse [i][j] == 1)
            {
                startrow = i;
                startcol = j;
            }
            if (warehouse [i][j] == 2)
            {
                endrow = i;
                endcol = j;
            }
        }
    }
    if (endcol - startcol < 0)
    {
        horizontal = endcol - startcol; //will move from right to left
        for (a = startcol - 1; a >= endcol; a--)
        {
            warehouse[startrow][a] = 3;
        }
        if (endrow - startrow < 0)
        {
            vertical = endrow - startrow; //will move up
            for (b = startrow + 1; b > endrow; b--)
            {
                warehouse[b][endcol] = 3;
            }
        }
        if (endrow - startcol > 0)
        {
            vertical = startrow - endrow; //will move down
            for (b = startrow + 1; b < endrow; b++)
            {
                warehouse[b][endcol] = 3;
            }
        }
        
    }
    if (endcol - startcol > 0)
    {
        horizontal = startcol - endcol; //will move from left to right
        for (c = startcol + 1; c <= endcol; c++)
        {
            warehouse[startrow][c] = 3;
        }
            if (endrow - startrow < 0)
            {
                vertical = endrow - startrow; //will move up
                for (d = startrow - 1; d > endrow; d--)
                {
                    warehouse[d][endcol] = 3;
                }
            }
            if (endrow - startcol > 0)
            {
                vertical = startrow - endrow; //will move down
                for (d = startrow + 1; d < endrow; d++)
                {
                    warehouse[d][endcol] = 3;
                }
            }
        }
        if (startcol == endcol)
        {
            if (endrow - startrow < 0)
            {
                vertical = endrow - startrow; //will move up
                for (d = startrow - 1; d > endrow; d--)
                {
                    warehouse[d][endcol] = 3;
                }
            }
            if (endrow - startcol > 0)
            {
                vertical = startrow - endrow; //will move down
                for (d = startrow + 1; d < endrow; d++)
                {
                    warehouse[d][endcol] = 3;
                }
            }
        }
        warehouse[startrow][startcol] = 1;
        warehouse[endrow][endcol] = 2;
    }",0
ogar584,1695869677,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j, startrow, startcol, endrow, endcol, a, b, c, d;
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse [i][j] == 1)
            {
                startrow = i;
                startcol = j;
            }
            if (warehouse [i][j] == 2)
            {
                endrow = i;
                endcol = j;
            }
        }
    }
    if (endcol - startcol < 0)
    {
        //will move from right to left
        for (a = startcol - 1; a >= endcol; a--)
        {
            warehouse[startrow][a] = 3;
        }
        if (endrow - startrow < 0)
        {
            //will move up
            for (b = startrow - 1; b > endrow; b--)
            {
                warehouse[b][endcol] = 3;
            }
        }
        if (endrow - startcol > 0)
        {
            //will move down
            for (b = startrow + 1; b < endrow; b++)
            {
                warehouse[b][endcol] = 3;
            }
        }
        
    }
    if (endcol - startcol > 0)
    {
        //will move from left to right
        for (c = startcol + 1; c <= endcol; c++)
        {
            warehouse[startrow][c] = 3;
        }
            if (endrow - startrow < 0)
            {
                //will move up
                for (d = startrow - 1; d > endrow; d--)
                {
                    warehouse[d][endcol] = 3;
                }
            }
            if (endrow - startcol > 0)
            {
                //will move down
                for (d = startrow + 1; d < endrow; d++)
                {
                    warehouse[d][endcol] = 3;
                }
            }
        }
        if (startcol == endcol)
        {
            if (endrow - startrow < 0)
            {
                //will move up
                for (d = startrow - 1; d > endrow; d--)
                {
                    warehouse[d][endcol] = 3;
                }
            }
            if (endrow - startcol > 0)
            {
                //will move down
                for (d = startrow + 1; d < endrow; d++)
                {
                    warehouse[d][endcol] = 3;
                }
            }
        }
        warehouse[startrow][startcol] = 1;
        warehouse[endrow][endcol] = 2;
    }",0
ogar584,1695870490,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j, startrow, startcol, endrow, endcol, a, b, c, d;
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse [i][j] == 1)
            {
                startrow = i;
                startcol = j;
            }
            if (warehouse [i][j] == 2)
            {
                endrow = i;
                endcol = j;
            }
        }
    }
    if (endcol - startcol < 0)
    {
        //will move from right to left
        for (a = startcol - 1; a >= endcol; a--)
        {
            warehouse[startrow][a] = 3;
        }
        if (endrow - startrow < 0)
        {
            //will move up
            for (b = startrow - 1; b > endrow; b--)
            {
                warehouse[b][endcol] = 3;
            }
        }
        if (endrow - startcol > 0)
        {
            //will move down
            for (b = startrow + 1; b < endrow; b++)
            {
                warehouse[b][endcol] = 3;
            }
        }
        
    }
    if (endcol - startcol > 0)
    {
        //will move from left to right
        for (c = startcol + 1; c <= endcol; c++)
        {
            warehouse[startrow][c] = 3;
        }
            if (endrow - startrow < 0)
            {
                //will move up
                for (d = startrow - 1; d > endrow; d--)
                {
                    warehouse[d][endcol] = 3;
                }
            }
            if (endrow - startcol > 0)
            {
                //will move down
                for (d = startrow + 1; d < endrow; d++)
                {
                    warehouse[d][endcol] = 3;
                }
            }
        }
        if (startcol == endcol)
        {
            if (endrow - startrow < 0)
            {
                // will move up
                for (d = startrow - 1; d > endrow; d--)
                {
                    warehouse[d][endcol] = 3;
                }
            }   
            else if (endrow - startrow > 0)
            {
                // will move down
                for (d = startrow + 1; d < endrow; d++)
                {   
                    warehouse[d][endcol] = 3;
                }
            }
        }
        warehouse[startrow][startcol] = 1;
        warehouse[endrow][endcol] = 2;
    }",1
opat597,1696243199,1,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int row1, col1, row2, col2;
	for (i = 0; i < 10; i++){
		for (j = 0; j < 10; j++){
			if (warehouse[i][j] == 1){
                row1 = i;
                col1 = j;
			}
            else if (warehouse[i][j] == 2){
                row2 = i;
                col2 = j;
			}
		}
	}

    int rowDis, colDis;
    rowDis = row2 - row1;
    colDis = col2 - col1;

    if (colDis > 0) {
            // Move right
            for (int i = 0; i < colDis; i++) {
                col1++;
                warehouse[row1][col1] = 3;
            }
        } else if (colDis < 0) {
            // Move left
            for (int i = 0; i > colDis; i--) {
                col1--;
                warehouse[row1][col1] = 3;
            }
        }

        // Determine the direction to move vertically
        if (rowDis > 0) {
            // Move down
            for (int i = 0; i < rowDis; i++) {
                row1++;
                warehouse[row1][col1] = 3;
            }
        } else if (rowDis < 0) {
            // Move up
            for (int i = 0; i > rowDis; i--) {
                row1--;
                warehouse[row1][col1] = 3;
            }
        }
}",0
opat597,1696243536,2,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int row1, col1, row2, col2;
	for (i = 0; i < 10; i++){
		for (j = 0; j < 10; j++){
			if (warehouse[i][j] == 1){
                row1 = i;
                col1 = j;
			}
            else if (warehouse[i][j] == 2){
                row2 = i;
                col2 = j;
			}
		}
	}

    int rowDis, colDis;
    rowDis = row2 - row1;
    colDis = col2 - col1;

    if (colDis > 0) {
            for (int i = 0; i < colDis; i++) {
                col1++;
                warehouse[row1][col1] = 3;
            }
        } else if (colDis < 0) {
            for (int i = 0; i > colDis; i--) {
                col1--;
                warehouse[row1][col1] = 3;
            }
        }


        if (rowDis > 0) {
            for (int i = 0; i < rowDis - 1; i++) {
                row1++;
                warehouse[row1][col1] = 3;
            }
        } else if (rowDis < 0) {
            for (int i = 0; i > rowDis + 1; i--) {
                row1--;
                warehouse[row1][col1] = 3;
            }
        }
}",0
opre469,1696216163,1,"//PelletRoute finds the shortest path from a pellet to its destination//
void PelletRoute(int warehouse[10][10])
{
	int RowOne, ColOne, RowTwo, ColTwo; 

	//for loop to go through each row of the array//
	for (int i = 0; i < 10; i++) {
		//for loop to go through each column of the array//
		for (int j = 0; j < 10; j++) {
			//if statement to find pellet//
			if (warehouse[i][j] == 1) {
				RowOne = i;
				ColOne = j;
			}
			//if statement to find destination//
			if (warehouse[i][j] == 2) {
				RowTwo = i;
				ColTwo = j;
			}
		}
	}

	//if statament to see if destination is to the right of pellet and if they are on same row//
	if (ColTwo > ColOne && RowOne != RowTwo) {
		//for statement to move pellet to the right//
		for (int i = ColOne + 1; i < ColTwo + 1; i++) {
			warehouse[RowOne][i] = 3;
		}
	}
	//if statament to see if destination is to the left of pellet and if they are on same row//
	if (ColTwo < ColOne && RowOne != RowTwo) {
		//for statement to move pellet to the left//
		for (int i = ColTwo; i < ColOne; i++) {
			warehouse[RowOne][i] = 3;
		}
	}
	//if statament to see if destination is to the right of pellet and if they are on same row//
	if (ColTwo > ColOne && RowOne == RowTwo) {
		//for statement to move pellet to the right//
		for (int i = ColOne + 1; i < ColTwo; i++) {
			warehouse[RowOne][i] = 3;
		}
	}
	//if statament to see if destination is to the left of pellet and if they are on same row//
	if (ColTwo < ColOne && RowOne == RowTwo) {
		//for statement to move pellet to the left//
		for (int i = ColTwo + 1; i < ColOne; i++) {
			warehouse[RowOne][i] = 3;
		}
	}
	//if statament to see if destination is below pellet//
	if (RowTwo > RowOne) {
		//for statement to move pellet down//
		for (int i = RowTwo - 1; i > RowOne; i--) {
			warehouse[i][ColTwo] = 3;
		}
	}

	//if statament to see if destination is above pellet//
	if (RowTwo < RowOne) {
		//for statement to move pellet up//
		for (int i = RowTwo + 1; i < RowOne; i++) {
			warehouse[i][ColTwo] = 3;
		}
	}
}",1
orow585,1696230411,1,"void PelletRoute(int layout[10][10]) {
    int pellet_row;
    int pellet_col;

    int destination_row;
    int destination_col;


    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (layout[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if (layout[i][j] == 2) {
                destination_row = i;
                destination_col = j;
            }
        }
    }

    // move horizontally
    if (pellet_row == destination_row) {
        if (pellet_col > destination_col) {
            while ((pellet_col - 1) != destination_col) {
                pellet_col--;
                layout[pellet_row][pellet_col] = 3;
            }
        }

        if (pellet_col < destination_col) {
            while ((pellet_col + 1) != destination_col) {
                pellet_col++;
                layout[pellet_row][pellet_col] = 3;
            }
        }
    }
    else {
        if (pellet_col > destination_col) {
            while ((pellet_col) != destination_col) {
                pellet_col--;
                layout[pellet_row][pellet_col] = 3;
            }
        }

        if (pellet_col < destination_col) {
            while ((pellet_col) != destination_col) {
                pellet_col++;
                layout[pellet_row][pellet_col] = 3;
            }
        }
    }
    //move vertically

    if (pellet_row > destination_row) {
        while ((pellet_row - 1) != destination_row) {
            pellet_row--;
            layout[pellet_row][pellet_col] = 3;
        }
    }

    if (pellet_row < destination_row) {
        while ((pellet_row + 1) != destination_row) {
            pellet_row++;
            layout[pellet_row][pellet_col] = 3;
        }
    }
}",1
osko432,1696243560,1,"#include <stdio.h>
#define Deez_Nuts
#define Doze_Nuts
#define Danka_Chunka
void PelletRoute(int warehouse[10][10]){
int y1,x1,y2,x2;
for (int deez1=0;deez1<10;deez1++){
    for (int deez2=0;deez2<10;deez2++){
        if (warehouse[deez1][deez2]==1){
        y1=deez1;
        x1=deez2;
        }
        else if (warehouse[deez1][deez2]==2){
        y2=deez1;
        x2=deez2;
        }
    }
}
if (x1-x2<0){
   for (int deez=x1+1;deez<x2+1;deez++){
       warehouse[y1][deez]=3;
   }
}
else{ 
   for (int deez=x1-1;deez>x2-1;deez--){
       warehouse[y1][deez]=3;
   }
}
if (y1-y2<0){
   for (int deez=y1+1;deez<y2;deez++){
       warehouse[deez][x2]=3;
   }
}
else{ 
   for (int deez=y1-1;deez>y2;deez--){
       warehouse[deez][x2]=3;
   }
}
}
",0
osko432,1696243624,2,"#include <stdio.h>
#define Deez_Nuts
#define Doze_Nuts
#define Danka_Chunka
void PelletRoute(int warehouse[10][10]){
int y1,x1,y2,x2;
for (int deez1=0;deez1<10;deez1++){
    for (int deez2=0;deez2<10;deez2++){
        if (warehouse[deez1][deez2]==1){
        y1=deez1;
        x1=deez2;
        }
        else if (warehouse[deez1][deez2]==2){
        y2=deez1;
        x2=deez2;
        }
    }
}
if (x1-x2<0){
   for (int deez=x1+1;deez<x2+1;deez++){
       warehouse[y1][deez]=3;
   }
}
else{ 
   for (int deez=x1-1;deez>x2-1;deez--){
       warehouse[y1][deez]=3;
   }
}
if (y1-y2<0){
   for (int deez=y1+1;deez<y2;deez++){
       warehouse[deez][x2]=3;
   }
}
else{ 
   for (int deez=y1-1;deez>y2;deez--){
       warehouse[deez][x2]=3;
   }
}
warehouse[y1][x1]=1;
warehouse[y2][x2]=2;
}",1
pchh683,1695959123,1,"void PelletRoute(int warehouse[10][10])
{
    int IntRow, IntCol, NewRow, NewCol;

    for (int Row = 0; Row < 10; Row++)
    {
        for (int Col = 0; Col < 10; Col++)
        {
            if (warehouse[Row][Col] == 1)
            {
            IntRow = Row;
            IntCol = Col;
            }
        }
    }

    for (int Row = 0; Row < 10; Row++)
    {
        for (int Col = 0; Col < 10; Col++)
        {
            if (warehouse[Row][Col] == 2)
            {
            NewRow = Row;
            NewCol = Col;
            }
        }
    }

    for (int Row = 0; Row < 10; Row++)
    {
        for (int Col = 0; Col < 10; Col++)
        {
            if (NewCol > IntCol)
            {
                if (Col > IntCol && Col < NewCol)
                {
                    warehouse[IntRow][Col] = 3; 
                }
            }
            else if (NewCol < IntCol)
            {
                if (Col < IntCol && Col > NewCol)
                {
                    warehouse[IntRow][Col] = 3; 
                }
            }

            if (NewRow > IntRow)
            {
                if (Row > IntRow && Row < NewRow)
                {
                    warehouse[Row][NewCol] = 3; 
                }
            }
            else if (NewRow < IntRow)
            {
                if (Row < IntRow && Row > NewRow)
                {
                    warehouse[Row][NewCol] = 3; 
                }
            }
        }
    }        
}",0
pchh683,1695959740,2,"void PelletRoute(int warehouse[10][10])
{
    int IntRow, IntCol, NewRow, NewCol;

    for (int Row = 0; Row < 10; Row++)
    {
        for (int Col = 0; Col < 10; Col++)
        {
            if (warehouse[Row][Col] == 1)
            {
            IntRow = Row;
            IntCol = Col;
            }
        }
    }

    for (int Row = 0; Row < 10; Row++)
    {
        for (int Col = 0; Col < 10; Col++)
        {
            if (warehouse[Row][Col] == 2)
            {
            NewRow = Row;
            NewCol = Col;
            }
        }
    }

    for (int Row = 0; Row < 10; Row++)
    {
        for (int Col = 0; Col < 10; Col++)
        {
            if (NewCol > IntCol)
            {
                if (Col > IntCol && Col <= NewCol)
                {
                    warehouse[IntRow][Col] = 3; 
                }
            }
            else if (NewCol < IntCol)
            {
                if (Col < IntCol && Col >= NewCol)
                {
                    warehouse[IntRow][Col] = 3; 
                }
            }

            if (NewRow > IntRow)
            {
                if (Row > IntRow && Row <= NewRow)
                {
                    warehouse[Row][NewCol] = 3; 
                }
            }
            else if (NewRow < IntRow)
            {
                if (Row < IntRow && Row >= NewRow)
                {
                    warehouse[Row][NewCol] = 3; 
                }
            }
        }
    }       
    warehouse[IntRow][IntCol] = 1;
    warehouse[NewRow][NewCol] = 2;
}",1
pfon568,1696234601,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, targetRow, targetCol;
    int i, j;
    
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pelletRow = i;
                pelletCol = j;
            }
            
            if (warehouse[i][j] == 2)
            {
                targetRow = i;
                targetCol = j;
            }
        }
    }
    
    for (j = pelletCol + 1; j < targetCol; j++)
    {
        warehouse[pelletRow][j] = 3;
    }
    
    for (i = pelletRow; i < targetRow; i++)
    {
        warehouse[i][targetCol] = 3;
    }
    
}",0
pfon568,1696235692,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, targetRow, targetCol;
    int i, j;
    
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pelletRow = i;
                pelletCol = j;
            }
            
            if (warehouse[i][j] == 2)
            {
                targetRow = i;
                targetCol = j;
            }
        }
    }
    
    if (pelletRow < targetRow)
    {
        for (j = pelletCol + 1; j < targetCol; j++)
        {
            warehouse[pelletRow][j] = 3;
        }
        
        for (i = pelletRow; i < targetRow; i++)
        {
            warehouse[i][targetCol] = 3;
        }
        
    } else if (pelletRow > targetRow) {
        
        for (j = pelletCol - 1; j > targetCol; j--)
        {
            warehouse[pelletRow][j] = 3;
        }
        
        for (i = pelletRow; i > targetRow; i--)
        {
            warehouse[i][targetCol] = 3;
        }
        
    }
    
}",0
pfon568,1696242691,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, targetRow, targetCol;
    int i, j;
    
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                pelletRow = i;
                pelletCol = j;
            }
            
            if (warehouse[i][j] == 2)
            {
                targetRow = i;
                targetCol = j;
            }
        }
    }
    
    int rowDifference = targetRow - pelletRow;
    int colDifference = targetCol - pelletCol;
    
    if (rowDifference > 0)
    {
        if (colDifference > 0)
        {
            for (j = pelletCol + 1; j <= targetCol; j++)
            {
                warehouse[pelletRow][j] = 3;
            }
            
            for (i = pelletRow + 1; i < targetRow; i++)
            {
                warehouse[i][targetCol] = 3;
            }
            
        } else {
            
            for (j = pelletCol - 1; j >= targetCol; j--)
            {
                warehouse[pelletRow][j] = 3;
            }
            
            for (i = pelletRow + 1; i < targetRow; i++)
            {
                warehouse[i][targetCol] = 3;
            }
            
        }
        
    } else {
        
        if (colDifference > 0)
        {
            for (j = pelletCol + 1; j < targetCol; j++)
            {
                warehouse[pelletRow][j] = 3;
            }
            
            for (i = pelletRow - 1; i > targetRow; i--)
            {
                warehouse[i][targetCol] = 3;
            }
            
        } else {
            
            for (j = pelletCol - 1; j > targetCol; j--)
            {
                warehouse[pelletRow][j] = 3;
            }
            
            for (i = pelletRow - 1; i > targetRow; i--)
            {
                warehouse[i][targetCol] = 3;
            }
            
        }
        
    }
    
}",0
pkim777,1695716125,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int dRow, dCol;
    int pRow, pCol;
    int i, j;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                dRow = i;
                dCol = j;
            } else if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            }
        }
    }

    while (pCol != dCol) {
        if (pCol < dCol) {
            pCol++;
        } else if (pCol > dCol) {
            pCol--;
        }
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3; 
        }
    }

    while (pRow != dRow) {
        if (pRow < dRow) {
            pRow++;
        } else if (pRow > dRow) {
            pRow--;
        }
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3; 
        }
    }
}",1
plah275,1696217599,1,"void PelletRoute(int warehouse[10][10]) {

int i, j, strposr, strposc, finposr, finposc, movrgt, movdwn;

for (i=0;i<10;i++) {
    
    for (j=0;j<10;j++) {
        if (warehouse[i][j] == 1) {
            
            strposr = i;
            strposc = j;
            
        } else if (warehouse[i][j] == 2) {
            
            finposr = i;
            finposc = j;
        }
    }
    
}

movrgt = (finposc > strposc);
movdwn = (finposr > strposr);

if (movrgt) {
    
    for (i=(strposc+1);i <= finposc;i++) {
        
        warehouse[strposr][i] = 3;
        
    }
    
} else {
    
    for (i=(strposc-1);i >= finposc;i--) {
        
        warehouse[strposr][i] = 3;
    }
    
}

if (movdwn) {
    
    for (j=(strposr+1);j < finposr;j++) {
        
        warehouse[j][finposc] = 3;
    }
    
} else {
    
    for (j=(strposr-1);j > finposr;j--) {
        
        warehouse[j][finposc] = 3;
    }
    
}

}",0
plah275,1696218904,2,"void PelletRoute(int warehouse[10][10]) {

int i, j, strposr, strposc, finposr, finposc, movrgt, movdwn;

for (i=0;i<10;i++) {
    
    for (j=0;j<10;j++) {
        if (warehouse[i][j] == 1) {
            
            strposr = i;
            strposc = j;
            
        } else if (warehouse[i][j] == 2) {
            
            finposr = i;
            finposc = j;
        }
    }
    
}

movrgt = (finposc > strposc);
movdwn = (finposr > strposr);

if (movrgt && (strposr != finposr)) {
    
    for (i=(strposc+1);i <= finposc;i++) {
        
        warehouse[strposr][i] = 3;
        
    }
    
} else if (!movrgt && (strposr != finposr)) {
    
    for (i=(strposc-1);i >= finposc;i--) {
        
        warehouse[strposr][i] = 3;
    }
    
}

if (movrgt && (strposr == finposr)) {
    
    for (i=(strposc+1);i < finposc;i++) {
        
        warehouse[strposr][i] = 3;
        
    }
    
} else if (!movrgt && (strposr == finposr)) {
    
    for (i=(strposc-1);i > finposc;i--) {
        
        warehouse[strposr][i] = 3;
    }
    
}

if (movdwn && (strposr != finposr)) {
    
    for (j=(strposr+1);j < finposr;j++) {
        
        warehouse[j][finposc] = 3;
    }
    
} else if (!movdwn && (strposr != finposr)) {
    
    for (j=(strposr-1);j > finposr;j--) {
        
        warehouse[j][finposc] = 3;
    }
    
}

}",1
plan310,1696027968,1,"void PelletRoute(int warehouse[10][10]) {
    
    int i, j, sRow, sCol, eRow, eCol;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                sRow = i;
                sCol = j;
            } else if (warehouse[i][j] == 2) {
                eRow = i;
                eCol = j;
            }
        }
    }
    
    if (eCol > sCol) {
        for (j = sCol + 1; j < eCol; j++) {
            warehouse[sRow][j] = 3;
        }
        if (eRow != sRow) {
            warehouse[sRow][eCol] = 3;
        }
    } else if (eCol < sCol) {
        for (j = sCol - 1; j > eCol; j--) {
            warehouse[sRow][j] = 3;
        }
        if (eRow != sRow) {
            warehouse[sRow][eCol] = 3;
        }
    }
    
    if (eRow > sRow) {
        for (i = sRow + 1; i < eRow; i++) {
            warehouse[i][eCol] = 3;
        }
    } else if (eRow < sRow) {
        for (i = sRow - 1; i > eRow; i--) {
            warehouse[i][eCol] = 3;
        }
    }
    
}
",1
pshe539,1695716153,1,"void PelletRoute(int warehouse[10][10])
{
    int start_row, start_col, end_row, end_col;
    
    FindPos(warehouse, 1, &start_row, &start_col);
    FindPos(warehouse, 2, &end_row, &end_col);

    printf(""Start: (%d, %d)\n"", start_row, start_col);
    printf(""End: (%d, %d)\n"", end_row, end_col);

    int i, j;

    if (start_col < end_col){
        for (i = start_col; i < 11; i++){
            if (i == end_col){
                break;
            }
            warehouse[start_row][i] = 3;
        }
    } else if (start_col > end_col){
        for (i = start_col; i > -1; i--){
            if (i == end_col){
                break;
            }
            warehouse[start_row][i] = 3;
        }
    }

    if (start_row < end_row){
        for (j = start_row; j < 11; j++){
            if (j == end_row){
                break;
            }
            warehouse[j][end_col] = 3;
        }
    } else if (start_row > end_row){
        for (j = start_row; j > -1; j--){
            if (j == end_row){
                break;
            }
            warehouse[j][end_col] = 3;
        }
    }

    warehouse[start_row][start_col] = 1;
    warehouse[end_row][end_col] = 2;
    
}

void FindPos(int warehouse[10][10], int num, int *rowsPos, int *colsPos)
{
    int i, j;

    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == num){
                *rowsPos = i;
                *colsPos = j;
                return;
            }
        }
    }
}",0
pshe539,1695716336,2,"void PelletRoute(int warehouse[10][10])
{
    int start_row, start_col, end_row, end_col;
    
    int a, b, c, d;
    
    for (a = 0; a < 10; a++){
        for (b = 0; b < 10; b++){
            if (warehouse[a][b] == 1){
                start_row = a;
                start_col = b;
                break;
            }
        }
    }
    for (c = 0; c < 10; c++){
        for (d = 0; d < 10; d++){
            if (warehouse[c][d] == 2){
                end_row = c;
                end_col = d;
                break;
            }
        }
    }

    int i, j;

    if (start_col < end_col){
        for (i = start_col; i < 11; i++){
            if (i == end_col){
                break;
            }
            warehouse[start_row][i] = 3;
        }
    } else if (start_col > end_col){
        for (i = start_col; i > -1; i--){
            if (i == end_col){
                break;
            }
            warehouse[start_row][i] = 3;
        }
    }

    if (start_row < end_row){
        for (j = start_row; j < 11; j++){
            if (j == end_row){
                break;
            }
            warehouse[j][end_col] = 3;
        }
    } else if (start_row > end_row){
        for (j = start_row; j > -1; j--){
            if (j == end_row){
                break;
            }
            warehouse[j][end_col] = 3;
        }
    }

    warehouse[start_row][start_col] = 1;
    warehouse[end_row][end_col] = 2;
    
}",1
pwat943,1695804100,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, finalRow, finalCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                finalRow = row;
                finalCol = col;
            }
        }
    }

    // Move the pellet horizontally (left or right) to line up with the destination
    while (pelletCol != finalCol) 
    // check for pellow position whether the horizontal movement is going to be on the same destination Horizontal position
    {
        if (pelletCol < finalCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
    }

    // Move the pellet vertically (up or down) to reach the destination
    while (pelletRow != finalRow)
    // check for pellow position whether the vertical movement is going to be on the same destination vertical position
    { 
        if (pelletRow < finalRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
    }
}
",0
pwat943,1695804458,2,"void PelletRoute(int warehouse[10][10]) {
    // identifying the variables
    int pelletRow, pelletCol, finalRow, finalCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } }
            {
            if (warehouse[row][col] == 2) {
                finalRow = row;
                finalCol = col;
            }
        }
    }

    // Move the pellet horizontally (left or right) to line up with the destination
    while (pelletCol != finalCol) 
    // check for pellow position whether the horizontal movement is going to be on the same destination Horizontal position
    {
        if (pelletCol < finalCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
    }

    // Move the pellet vertically (up or down) to reach the destination
    while (pelletRow != finalRow)
    // check for pellow position whether the vertical movement is going to be on the same destination vertical position
    { 
        if (pelletRow < finalRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
    }
}
",0
pwat943,1695804480,3,"void PelletRoute(int warehouse[10][10]) {
    // identifying the variables
    int pelletRow, pelletCol, finalRow, finalCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                finalRow = row;
                finalCol = col;
            }
        }
    }

    // Move the pellet horizontally (left or right) to line up with the destination
    while (pelletCol != finalCol) 
    // check for pellow position whether the horizontal movement is going to be on the same destination Horizontal position
    {
        if (pelletCol < finalCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
    }

    // Move the pellet vertically (up or down) to reach the destination
    while (pelletRow != finalRow)
    // check for pellow position whether the vertical movement is going to be on the same destination vertical position
    { 
        if (pelletRow < finalRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
    }
}
",0
pwat943,1695825622,4,"void PelletRoute(int warehouse[10][10]) {
    // identifying the variables
    int pelletRow, pelletCol, finalRow, finalCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } 
        }
    }
    
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
                if (warehouse[row][col] == 2) {
                finalRow = row;
                finalCol = col;
            }
        }
    }

    // Move the pellet horizontally (left or right) to line up with the destination
    while (pelletCol != finalCol) 
    // check for pellow position whether the horizontal movement is going to be on the same destination Horizontal position
    {
        if (pelletCol < finalCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
    }

    // Move the pellet vertically (up or down) to reach the destination
    while (pelletRow != finalRow)
    // check for pellow position whether the vertical movement is going to be on the same destination vertical position
    { 
        if (pelletRow < finalRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
    }
}
",0
pwat943,1695825709,5,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;
    int route[10][10] = {0}; // Temporary array to store the route

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Move the pellet horizontally (left or right) to line up with the destination
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        route[pelletRow][pelletCol] = 3; // Mark the route in the temporary array
    }

    // Move the pellet vertically (up or down) to reach the destination
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        route[pelletRow][pelletCol] = 3; // Mark the route in the temporary array
    }

    // Copy the route back to the original warehouse array
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (route[i][j] == 3) {
                warehouse[i][j] = 3; // Only update the route in the original array
            }
        }
    }
}",0
pwu278,1695897409,1,"void PelletRoute(int warehouse[10][10])
{
    int i;
    int j;
    int PelletRowPos;
    int PelletColPos;
    int DestRowPos;
    int DestColPos;
    int HorizontalDistance;
    int VerticalDistance;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                PelletRowPos = i;
                PelletColPos = j;
            }
        }
    }

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                DestRowPos = i;
                DestColPos = j;
            }
        }
    }

    HorizontalDistance = DestColPos - PelletColPos;
    VerticalDistance = DestRowPos - PelletRowPos;

    if (VerticalDistance == 0) {
        if (HorizontalDistance > 0) {
            for (i = PelletColPos + 1; i < DestColPos; i++) {
                warehouse[PelletRowPos][i] = 3;
            }
        }
        if (HorizontalDistance < 0) {
            for (i = PelletColPos - 1; i > DestColPos; i--) {
                warehouse[PelletRowPos][i] = 3;
            }
        }
    } else {
        if (HorizontalDistance > 0) {
            for (i = PelletColPos + 1; i < DestColPos + 1; i++) {
                warehouse[PelletRowPos][i] = 3;
            }
        }
        if (HorizontalDistance < 0) {
            for (i = PelletColPos - 1; i > DestColPos - 1; i--) {
                warehouse[PelletRowPos][i] = 3;
            }
        }
    }


    if (VerticalDistance > 0) {
        for (i = PelletRowPos + 1; i < DestRowPos; i++) {
            warehouse[i][DestColPos] = 3;
        }
    }
    if (VerticalDistance < 0) {
        for (i = PelletRowPos - 1; i > DestRowPos; i--) {
            warehouse[i][DestColPos] = 3;
        }
    }
}",1
pyou182,1695861626,1,"void PelletRoute(int warehouse[10][10])
{
    //Initialise pointers for pellet location
    int rowPellet;
    int colPellet;

    //Find and store pellet location
    int i, j;
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
            rowPellet = i;
            colPellet = j;
            }
        }
    }

    //Initialise pointers for destination
    int rowDestination;
    int colDestination;

    //Find and store destination location
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                rowDestination = i;
                colDestination = j;
            }
        }
    }

    //Initialising indexing variables
    int cP;
    int cD;
    cP = colPellet;
    cD = colDestination;

    int rP;
    rP = rowPellet;
    int rD;
    rD = rowDestination;

    //Horizontal 3's
    if (cP < cD) {
        for (j = cP + 1; j <= cD;j++){
            i = rP;
            warehouse[i][j] = 3;
        }
    } else if (cP > cD){
        for ( j = cP -1; j >= cD; j--){
            i = cP;
            warehouse[i][j] = 3;
        }
    }

    //Vertical 3's
    if (rP < rD) {
        for (i = rP; i <= rD - 1; i++){
            j = cD;
            warehouse[i][j] = 3;
        }
    } else if (rP > rD) {
        for (i = rP; i >= rD + 1; i--){
            j = cD;
            warehouse[i][j] = 3;
        }
    }
}",0
pyou182,1695863315,2,"void PelletRoute(int warehouse[10][10])
{
    //Initialise pointers for pellet location
    int rowPellet;
    int colPellet;

    //Find and store pellet location
    int i, j;
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
            rowPellet = i;
            colPellet = j;
            }
        }
    }


    //Initialise pointers for destination
    int rowDestination;
    int colDestination;

    //Find and store destination location
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                rowDestination = i;
                colDestination = j;
            }
        }
    }


    //Horizontal 3's
    
    if (colPellet < colDestination) {
        for (j = colPellet + 1; j <= colDestination;j++){
            i = rowPellet;
            if (warehouse[i][j] == 0) {
            warehouse[i][j] = 3;
            }
        }
    } else if (colPellet > colDestination){
        for ( j = colPellet -1; j >= colDestination; j--){
             i = rowPellet;
            if (warehouse[i][j] == 0) {
            warehouse[i][j] = 3;
            }
        }
    }
    

    //Vertical 3's
        if (rowPellet < rowDestination) {
        for (i = rowPellet; i <= rowDestination - 1; i++){
            j = colDestination;
            if (warehouse[i][j] == 0) {
            warehouse[i][j] = 3;
            }
        }
    } else if (rowPellet > rowDestination) {
        for (i = rowPellet; i >= rowDestination + 1; i--){
            j = colDestination;
            if (warehouse[i][j] == 0) {
            warehouse[i][j] = 3;
            }
        }
    }
    
}",1
qkan386,1695982938,1,"void PelletRoute(int warehouse[10][10]) {

	int RowPal = 0, ColPal = 0, RowPos = 0, ColPos = 0;

	//Find the postions of the pallet & location to transport to
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

			if (warehouse[i][j] == 1) {
				RowPal = i;
				ColPal = j;
			}

			if (warehouse[i][j] == 2) {
				RowPos = i;
				ColPos = j;
			}
		}
	}
	for (int i = 0; i < 10; i++) {
		warehouse[i][ColPos] = 3;
	}

	for (int j = 0; j < 10; j++) {
		warehouse[RowPal][j] = 3;
	}

	warehouse[RowPos][ColPos] = 2;
	warehouse[RowPal][ColPal] = 1;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			//if the pallet is above the destination
			if (RowPal <= RowPos) {
				if (i<RowPal || i>RowPos) {
					warehouse[i][j] = 0;
				}
			}

			//if the pallet is below the destination
			if (RowPal >= RowPos) {
				if (i>RowPal || i<RowPos) {
					warehouse[i][j] = 0;
				}
			}

			//if the pallet is on the left to destination
			if (ColPal <= ColPos) {
				if (j<ColPal || j>ColPos) {
					warehouse[i][j] = 0;
				}
			}

			//if the pallet is on the right to destination
			if (ColPal >= ColPos) {
				if (j>ColPal || j<ColPos) {
					warehouse[i][j] = 0;
				}
			}
		}
	}
}",1
qmcc945,1695767420,1,"#include<stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int boxRow, boxCol, destRow, destCol, i, j;

    for(i=0; i<10; i++) {
        for(j=0; j<10; j++) {
            if(warehouse[i][j] == 1) {
                boxRow = i;
                boxCol = j;
            }
            if(warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    if (destCol > boxCol) {
        while(destCol > boxCol) {
            boxCol++;
            warehouse[boxRow][boxCol] = 3;
        }
    }

    if (destCol < boxCol) {
        while(destCol < boxCol) {
            boxCol--;
            warehouse[boxRow][boxCol] = 3;
        }
    }

    if (destRow > boxRow) {
        while(destRow > boxRow) {
            boxRow++;
            if(warehouse[boxRow][boxCol] == 2) {
                return;
            }
            warehouse[boxRow][boxCol] = 3;
        }
    }

    if (destRow < boxRow) {
        while(destRow < boxRow) {
            boxRow--;
            if(warehouse[boxRow][boxCol] == 2) {
                return;
            }
            warehouse[boxRow][boxCol] = 3;
        }
    }

}",0
qmcc945,1695767934,2,"#include<stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int boxRow, boxCol, destRow, destCol, i, j;

    for(i=0; i<10; i++) {
        for(j=0; j<10; j++) {
            if(warehouse[i][j] == 1) {
                boxRow = i;
                boxCol = j;
            }
            if(warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    if (destCol > boxCol) {
        while(destCol > boxCol) {
            boxCol++;
            if(warehouse[boxRow][boxCol] == 2) {
                return;
            }
            if(warehouse[boxRow][boxCol] != 1) {
            warehouse[boxRow][boxCol] = 3;
            }
        }
    }

    if (destCol < boxCol) {
        while(destCol < boxCol) {
            boxCol--;
            if(warehouse[boxRow][boxCol] == 2) {
                return;
            }
            if(warehouse[boxRow][boxCol] != 1) {
            warehouse[boxRow][boxCol] = 3;
            }
        }
    }

    if (destRow > boxRow) {
        while(destRow > boxRow) {
            boxRow++;
            if(warehouse[boxRow][boxCol] == 2) {
                return;
            }
            if(warehouse[boxRow][boxCol] != 1 && warehouse[boxRow][boxCol] != 2) {
            warehouse[boxRow][boxCol] = 3;
            }
        }
    }

    if (destRow < boxRow) {
        while(destRow < boxRow) {
            boxRow--;
            if(warehouse[boxRow][boxCol] == 2) {
                return;
            }
            if(warehouse[boxRow][boxCol] != 1 && warehouse[boxRow][boxCol] != 2) {
            warehouse[boxRow][boxCol] = 3;
            }
        }
    }

}",1
qtra338,1695638880,1,"
void PelletRoute(int warehouse[10][10]) {
    int i, j, pellet_row, pellet_col, dest_row, dest_col, row_lower, row_upper, col_lower, col_upper, row_lower_corr, col_lower_corr, col_upper_corr;

	for ( i = 0; i < 10; i++) {
		for ( j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pellet_row = i;
                pellet_col = j;
			}
            else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
		}
	}

    //row_dist = dest_row - pellet_row;
    //col_dist = dest_col - pellet_col;

    if (dest_row < pellet_row) {
        row_lower = dest_row;
        row_upper = pellet_row;
        row_lower_corr = 1;   
    }

    else {
        row_lower = pellet_row;
        row_upper = dest_row; 
        row_lower_corr = 0;
    }

    if (dest_col <= pellet_col) {
        col_lower = dest_col;
        col_upper = pellet_col;
        col_lower_corr = 0;
        col_upper_corr = 0;
    }
    else {
        col_lower = pellet_col;
        col_upper = dest_col;
        col_lower_corr = 1;
        col_upper_corr = 1;
    }

    if (dest_row == pellet_row)
    {
        for (i = row_lower + row_lower_corr; i < row_upper; i++) {
            warehouse[i][dest_col] = 3;
        }
        for (j = col_lower + col_lower_corr; j < col_upper; j++) {
            warehouse[pellet_row][j] = 3;
        }
        return;
    }
    else if (dest_col == pellet_col)
    {
        for (i = row_lower + 1; i < row_upper; i++) {
            warehouse[i][dest_col] = 3;
        }

    for (j = col_lower + col_lower_corr; j < col_upper + col_upper_corr; j++) {
            warehouse[pellet_row][j] = 3;
        }
        return;
    }
    
    

    
    for (i = row_lower + row_lower_corr; i < row_upper; i++) {
        warehouse[i][dest_col] = 3;
    }

    for (j = col_lower + col_lower_corr; j < col_upper + col_upper_corr; j++) {
        warehouse[pellet_row][j] = 3;
    }
    

}",0
qtra338,1695639276,2,"void PelletRoute(int warehouse[10][10]) {
    int i, j, pellet_row, pellet_col, dest_row, dest_col, row_lower, row_upper, col_lower, col_upper, row_lower_corr, col_lower_corr, col_upper_corr;

	for ( i = 0; i < 10; i++) {
		for ( j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pellet_row = i;
                pellet_col = j;
			}
            else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
		}
	}

    //row_dist = dest_row - pellet_row;
    //col_dist = dest_col - pellet_col;

    if (dest_row < pellet_row) {
        row_lower = dest_row;
        row_upper = pellet_row;
        row_lower_corr = 1;   
    }

    else {
        row_lower = pellet_row;
        row_upper = dest_row; 
        row_lower_corr = 0;
    }

    if (dest_col < pellet_col && dest_row == pellet_row) {
        col_lower = dest_col;
        col_upper = pellet_col;
        col_lower_corr = 1;
        col_upper_corr = 0;
    }
    else if (dest_col < pellet_col)
    {
        col_lower = dest_col;
        col_upper = pellet_col;
        col_lower_corr = 0;
        col_upper_corr = 0;
    }
    else {
        col_lower = pellet_col;
        col_upper = dest_col;
        col_lower_corr = 1;
        col_upper_corr = 1;
    }

    if (dest_row == pellet_row)
    {
        for (i = row_lower + row_lower_corr; i < row_upper; i++) {
            warehouse[i][dest_col] = 3;
        }
        for (j = col_lower + col_lower_corr; j < col_upper; j++) {
            warehouse[pellet_row][j] = 3;
        }
        return;
    }
    else if (dest_col == pellet_col)
    {
        for (i = row_lower + 1; i < row_upper; i++) {
            warehouse[i][dest_col] = 3;
        }

        for (j = col_lower + col_lower_corr; j < col_upper + col_upper_corr; j++) {
            warehouse[pellet_row][j] = 3;
        }
        return;
    }
    
    

    
    for (i = row_lower + row_lower_corr; i < row_upper; i++) {
        warehouse[i][dest_col] = 3;
    }

    for (j = col_lower + col_lower_corr; j < col_upper + col_upper_corr; j++) {
        warehouse[pellet_row][j] = 3;
    }
    

}",1
qzho943,1695709527,1,"#include <stdio.h>


void PelletRoute(int warehouse[10][10]) {
    int row1, col1, row2, col2;
   
    //find 1 and 2
    int r;
    int c;
    for (r=0; r<10;r++){
        for (c=0; c<10; c++){
            if (warehouse[r][c] == 1){
                 row1=r;
                 col1=c;
            }
            if (warehouse[r][c] == 2){
                 row2=r;
                 col2=c;
            }
        }
    }
    

    int i = row1;
    int j = col1;
    

         // 2 is upleft
    if (col2 < col1&& row2 < row1) {

        for (j = col1 - 1; j >= col2; j--) {
            warehouse[row1][j] = 3;
        }
        for (i = row1 - 1; i > row2; i--) {
            warehouse[i][col2] = 3;
        }
    }

    //2 is up right
    if (col2 > col1 && row2 < row1) {

        for (j = col1 + 1; j <= col2; j++) {
            warehouse[row1][j] = 3;
        }
        for (i = row1 - 1; i > row2; i--) {
            warehouse[i][col2] = 3;
        }
    }

    //2 is down left
    if (col2<col1 && row2>row1) {

        for (j = col1 - 1; j >= col2; j--) {
            warehouse[row1][j] = 3;
        }
        for (i = row1 + 1; i < row2; i++) {
            warehouse[i][col2] = 3;
        }
    }
    //2 is down right
    if (col2 > col1 && row2 > row1) {

        for (j = col1 + 1; j <= col2; j++) {
            warehouse[row1][j] = 3;
        }
        for (i = row1 + 1; i < row2; i++) {
            warehouse[i][col2] = 3;
        }
    }
    //same row
    if (row1 == row2) {
        //2 left
        if (col1 > col2) {
            for (j = col1 - 1; j > col2; j--) {
                warehouse[row1][j] = 3;
            }
        }
        //2 right
        if (col1 < col2) {
            for (j = col1 + 1; j < col2; j++) {
                warehouse[row1][j] = 3;
            }
        }
    }

    //same column
    if (col1 == col2) {
        //2 up
        if (row1 > row2) {
            for (i = row1 - 1; i > row2; i--) {
                warehouse[i][col1] = 3;
            }
        }
        //2 down
        if (row1 < row2) {
            for (i = row1 + 1; i < row2; i++) {
                warehouse[i][col1] = 3;
            }
        }
    }
}

",1
raic989,1696156862,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pellet_row, pellet_col, dest_row, dest_col;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if  (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    
    int m, n;
    m = pellet_col;
    n = pellet_row;

    if (dest_col - pellet_col < 0) {
        m = m - 1;
        while (m >=dest_col) {
            warehouse[n][m] = 3;
            m--;
        }
        m + 1;
    }
    else (dest_col - pellet_col > 0); {
        m = m + 1;
        while (m <= dest_col) {
            warehouse[n][m] = 3;
            m++;
        }
        m = m - 1;
    }
        
    if (dest_row - pellet_row > 0) {
        n = n + 1;
        while (n < dest_row) {
            warehouse[n][m] = 3;
            n++;
        }
    }
    else (dest_row - pellet_row < 0); {
        n = n - 1;
        while (n > dest_row) {
            warehouse[n][m] = 3;
            n--;
        }
    }
}",0
raic989,1696158278,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pellet_row, pellet_col, dest_row, dest_col;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if  (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    
    int m, n;
    m = pellet_col;
    n = pellet_row;

    if ((dest_col - pellet_col) < 0){
        m--;
        while (m >=dest_col) {
            warehouse[n][m] = 3;
            m--;
        }
        m++;
    } else ((dest_col - pellet_col) > 0);{
        m++;
        while (m <= dest_col) {
            warehouse[n][m] = 3;
            m++;
        }
        m--;
    }
        
    if ((dest_row - pellet_row) > 0){
        n++;
        while (n<dest_row) {
            warehouse[n][m] = 3;
            n++;
        }
    } else ((dest_row - pellet_row) < 0);{
        n--;
        while (n>dest_row) {
            warehouse[n][m] = 3;
            n--;
        }
    }
}",0
raic989,1696158521,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pellet_row, pellet_col, dest_row, dest_col;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if  (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    
    int m, n;
    m = pellet_col;
    n = pellet_row;

    if ((dest_col - pellet_col) < 0){
        m--;
        while (m >=dest_col) {
            warehouse[n][m] = 3;
            m--;
        }
        m++;
    } else {
        m++;
        while (m <= dest_col) {
            warehouse[n][m] = 3;
            m++;
        }
        m--;
    }
        
    if ((dest_row - pellet_row) > 0){
        n++;
        while (n<dest_row) {
            warehouse[n][m] = 3;
            n++;
        }
    } else {
        n--;
        while (n>dest_row) {
            warehouse[n][m] = 3;
            n--;
        }
    }
}",0
raic989,1696159415,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pellet_row, pellet_col, dest_row, dest_col;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if  (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    
    int m, n;
    m = pellet_col;
    n = pellet_row;

    if ((dest_col - pellet_col) < 0){
        m--;
        while (m >dest_col) {
            warehouse[n][m] = 3;
            m--;
        }
        
    } else {
        m++;
        while (m < dest_col) {
            warehouse[n][m] = 3;
            m++;
        }
    }
        
    if ((dest_row - pellet_row) > 0){
        warehouse[n][dest_col]=3;
        n++;
        while (n<dest_row) {
            warehouse[n][m] = 3;
            n++;
        }
    } 
    if((dest_row - pellet_row) < 0) {
        warehouse[n][dest_col]=3;
        n--;
        while (n>dest_row) {
            warehouse[n][m] = 3;
            n--;
        }
    }
}",0
raic989,1696159645,5,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pellet_row, pellet_col, dest_row, dest_col;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if  (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    
    int m, n;
    m = pellet_col;
    n = pellet_row;

    if ((dest_col - pellet_col) < 0){
        m--;
        while (m >dest_col) {
            warehouse[n][m] = 3;
            m--;
        }
        
    } 
    if ((dest_col - pellet_col) > 0){
        m++;
        while (m < dest_col) {
            warehouse[n][m] = 3;
            m++;
        }
    }
        
    if ((dest_row - pellet_row) > 0){
        warehouse[n][dest_col]=3;
        n++;
        while (n<dest_row) {
            warehouse[n][m] = 3;
            n++;
        }
    } 
    if((dest_row - pellet_row) < 0) {
        warehouse[n][dest_col]=3;
        n--;
        while (n>dest_row) {
            warehouse[n][m] = 3;
            n--;
        }
    }
}",0
raic989,1696160146,6,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pellet_row, pellet_col, dest_row, dest_col;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if  (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    
    int m, n;
    m = pellet_col;
    n = pellet_row;

    if((dest_col - pellet_col) < 0){
        m--;
        while (m >=dest_col) {
            warehouse[n][m] = 3;
            m--;
        }
    } 
    if((dest_col - pellet_col) > 0){
        m++;
        while (m <= dest_col) {
            warehouse[n][m] = 3;
            m++;
        }
    }
    
    if((dest_col-pellet_col)==0) {
        warehouse[n][m]=warehouse[n][m];
    }
        
    if((dest_row - pellet_row) > 0){
        m=dest_col;
        n++;
        while (n<dest_row) {
            warehouse[n][m] = 3;
            n++;
        }
    } 
    if((dest_row - pellet_row) < 0) {
        m=dest_col;
        n--;
        while (n>dest_row) {
            warehouse[n][m] = 3;
            n--;
        }
    }
    
    if ((dest_row-pellet_row)==0) {
        warehouse[n][m]=warehouse[n][m];
    }
}",0
raic989,1696160384,7,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int i, j;
    int pellet_row, pellet_col, dest_row, dest_col;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            }
            if  (warehouse[i][j] == 2)
            {
                dest_row = i;
                dest_col = j;
            }
        }
    }
    
    int m, n;
    m = pellet_col;
    n = pellet_row;

    if((dest_col - pellet_col) < 0){
        m--;
        while (m >dest_col) {
            warehouse[n][m] = 3;
            m--;
        }
    } 
    if((dest_col - pellet_col) > 0){
        m++;
        while (m <dest_col) {
            warehouse[n][m] = 3;
            m++;
        }
    }
    
    if((dest_col-pellet_col)==0) {
        warehouse[n][m]=warehouse[n][m];
    }
        
    if((dest_row - pellet_row) > 0){
        m=dest_col;
        n++;
        while (n<dest_row) {
            warehouse[n][m] = 3;
            n++;
        }
    } 
    if((dest_row - pellet_row) < 0) {
        m=dest_col;
        n--;
        while (n>dest_row) {
            warehouse[n][m] = 3;
            n--;
        }
    }
    
    if ((dest_row-pellet_row)==0) {
        warehouse[n][m]=warehouse[n][m];
    }
}",0
rand321,1695635700,1,"void PelletRoute(int warehouse[10][10]){
    int i, j, start[2], end[2];
    for (i=0;i<10;i++){
        for (j=0;j<10;j++){
            if (warehouse[i][j]==1){
             start[0] = i;
             start[1] = j;
            }
            if (warehouse[i][j]==2){
             end[0] = i;
             end[1] = j;
            }
           
        }
        
        
    }
    for(j=start[1]+1;j<=end[1];j++){
        warehouse[start[0]][j] = 3;
    }
    for(i=start[0];i<=end[0]-1;i++){
        warehouse[i][end[1]] = 3;
    }
}",0
rand321,1695636746,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void){
int map[10][10] = {
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 2, 0, 0, 1, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0} };


PelletRoute(map);

int i, j;
for (i = 0; i < 10; i++) {
   for (j = 0; j < 10; j++) {
      printf(""%d "", map[i][j]);
   }
   printf(""\n"");
}
}
void PelletRoute(int warehouse[10][10]){
    int i, j, start[2], end[2];
    for (i=0;i<10;i++){
        for (j=0;j<10;j++){
            if (warehouse[i][j]==1){
             start[0] = i;
             start[1] = j;
            }
            if (warehouse[i][j]==2){
             end[0] = i;
             end[1] = j;
            }
           
        }
        
        
    }
    
    if (start[1] - end[1] < 0){
        for (i=start[1]+1; i < end[1];i++){
            warehouse[start[0]][i] = 3;
        }
        warehouse[start[0]][i]=3;
    }
    
     if (start[0] - end[0] < 0){
        for (i=start[0]+1; i < end[0];i++){
            warehouse[i][end[1]] = 3;
        }
    }
    
    if (start[1] - end[1] > 0){
        for (i=start[1]-1; i > end[1];i--){
            warehouse[start[0]][i] = 3;
        }
        warehouse[start[0]][i]=3;
    }
        
    if (start[0] - end[0] > 0){
        for (i=start[0]-1; i > end[0];i--){
            warehouse[i][end[1]] = 3;
        }
    }
   warehouse[end[0]][end[1]]=2;   
}",0
rand321,1695636777,3,"
void PelletRoute(int warehouse[10][10]){
    int i, j, start[2], end[2];
    for (i=0;i<10;i++){
        for (j=0;j<10;j++){
            if (warehouse[i][j]==1){
             start[0] = i;
             start[1] = j;
            }
            if (warehouse[i][j]==2){
             end[0] = i;
             end[1] = j;
            }
           
        }
        
        
    }
    
    if (start[1] - end[1] < 0){
        for (i=start[1]+1; i < end[1];i++){
            warehouse[start[0]][i] = 3;
        }
        warehouse[start[0]][i]=3;
    }
    
     if (start[0] - end[0] < 0){
        for (i=start[0]+1; i < end[0];i++){
            warehouse[i][end[1]] = 3;
        }
    }
    
    if (start[1] - end[1] > 0){
        for (i=start[1]-1; i > end[1];i--){
            warehouse[start[0]][i] = 3;
        }
        warehouse[start[0]][i]=3;
    }
        
    if (start[0] - end[0] > 0){
        for (i=start[0]-1; i > end[0];i--){
            warehouse[i][end[1]] = 3;
        }
    }
   warehouse[end[0]][end[1]]=2;   
}",1
rbui853,1695982094,1,"void PelletRoute(int warehouse[10][10]) {
	int i, j;
	int startRow, startCol, endRow, endCol;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}
	int tempStartCol = startCol;
	int tempStartRow = startRow;
	if (startRow != endRow) {
		// if needing to move right
		if (startCol < endCol) {
			tempStartCol = startCol + 1;
			warehouse[startRow][tempStartCol] = 3;
			while (tempStartCol  < endCol) {
				tempStartCol++;
				warehouse[startRow][tempStartCol] = 3;
			}
		}
		// if needing to move left
		if (startCol > endCol) {
			tempStartCol = startCol - 1;
			warehouse[startRow][tempStartCol] = 3;
			while (tempStartCol > endCol) {
				tempStartCol--;
				warehouse[startRow][tempStartCol] = 3;
			}
		}
	}
	if (startRow == endRow) {
		// if needing to move right
		if (startCol < endCol) {
			tempStartCol = startCol + 1;
			warehouse[startRow][tempStartCol] = 3;
			while (tempStartCol + 1 < endCol) {
				tempStartCol++;
				warehouse[startRow][tempStartCol] = 3;
			}
		}
		// if needing to move left
		if (startCol > endCol) {
			tempStartCol = startCol - 1;
			warehouse[startRow][tempStartCol] = 3;
			while (tempStartCol -1 > endCol) {
				tempStartCol--;
				warehouse[startRow][tempStartCol] = 3;
			}
		}
	}
	// if needing to move down
	if (startRow < endRow) {
		tempStartRow = startRow + 1;
		warehouse[tempStartRow][tempStartCol] = 3;
		while (tempStartRow + 1 < endRow) {
			tempStartRow++;
			warehouse[tempStartRow][tempStartCol] = 3;
		}
	}
	// if needing to move up
	if (startRow > endRow) {
		tempStartRow = startRow - 1;
		warehouse[tempStartRow][tempStartCol] = 3;
		while (tempStartRow - 1 > endRow) {
			tempStartRow--;
			warehouse[tempStartRow][tempStartCol] = 3;
		}
	}
}",0
rbui853,1695983889,2,"void PelletRoute(int warehouse[10][10]) {
	int i, j;
	int startRow, startCol, endRow, endCol;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}
	int tempStartCol = startCol;
	int tempStartRow = startRow;
	if (startRow != endRow) {
		// if needing to move right
		if (startCol < endCol) {
			tempStartCol = startCol + 1;
			warehouse[startRow][tempStartCol] = 3;
			while (tempStartCol < endCol) {
				tempStartCol++;
				warehouse[startRow][tempStartCol] = 3;
			}
		}
		// if needing to move left
		if (startCol > endCol) {
			tempStartCol = startCol - 1;
			warehouse[startRow][tempStartCol] = 3;
			while (tempStartCol > endCol) {
				tempStartCol--;
				warehouse[startRow][tempStartCol] = 3;
			}
		}
	}
	if (startRow == endRow) {
		// if needing to move right
		if (startCol < endCol) {
			tempStartCol = startCol + 1;
			warehouse[startRow][tempStartCol] = 3;
			while (tempStartCol + 1 < endCol) {
				tempStartCol++;
				warehouse[startRow][tempStartCol] = 3;
			}
		}
		// if needing to move left
		if (startCol > endCol) {
			tempStartCol = startCol - 1;
			warehouse[startRow][tempStartCol] = 3;
			while (tempStartCol - 1 > endCol) {
				tempStartCol--;
				warehouse[startRow][tempStartCol] = 3;
			}
		}
	}
	// if needing to move down
	if (startRow < endRow) {
		tempStartRow = startRow + 1;
		warehouse[tempStartRow][tempStartCol] = 3;
		while (tempStartRow + 1 < endRow) {
			tempStartRow++;
			warehouse[tempStartRow][tempStartCol] = 3;
		}
	}
	// if needing to move up
	if (startRow > endRow) {
		tempStartRow = startRow - 1;
		warehouse[tempStartRow][tempStartCol] = 3;
		while (tempStartRow - 1 > endRow) {
			tempStartRow--;
			warehouse[tempStartRow][tempStartCol] = 3;
		}
	}
	warehouse[endRow][endCol] = 2;
}",1
rbus291,1696119044,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    if (pelletCol < destCol) {
        for (int j = pelletCol + 1; j <= destCol; j++) {
            warehouse[pelletRow][j] = 3;
        }
    } else if (pelletCol > destCol) {
        for (int j = pelletCol - 1; j >= destCol; j--) {
            warehouse[pelletRow][j] = 3;
        }
    }

    if (pelletRow < destRow) {
        for (int i = pelletRow + 1; i <= destRow; i++) {
            warehouse[i][destCol] = 3;
        }
    } else if (pelletRow > destRow) {
        for (int i = pelletRow - 1; i >= destRow; i--) {
            warehouse[i][destCol] = 3;
        }
    }
}",0
rbus291,1696120825,2,"#include <stdio.h>
void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

  
    for (int j = pelletCol; j != destCol; j += (destCol > pelletCol) ? 1 : -1) {
        warehouse[pelletRow][j] = 3;
    }

    for (int i = pelletRow; i != destRow; i += (destRow > pelletRow) ? 1 : -1) {
        warehouse[i][destCol] = 3;
    }

    warehouse[pelletRow][pelletCol] = 1;
    warehouse[destRow][destCol] = 2;
}
",1
rdon807,1696242216,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    // This part is to find the location of the cargo
    
    int cargorow,cargocol;
    int i, j;
    
    for (i=0; i<10;i++){
        for (j=0; j<10; j++){
            if(warehouse[i][j]==1){
                cargorow=i;
                cargocol=j;
            }
        }
    }
    
    
    //This part is to find the location of the desired place
    
    int movedrow, movedcol;
    
    for (int a=0;a<10;a++){
        for (int b=0;b<10;b++){
            if(warehouse[a][b]==2){
                movedrow=a;
                movedcol=b;
            }
        }
    }
    
    
    // This part is for making the pathway = 3 
    
    int pathrow, pathcol;
    
    pathrow=movedrow-cargorow;
    pathcol=movedcol-cargocol;
    
    // For making the horizontal movement
    
    if (pathrow<<0){
        for (int c=0; c<(-pathrow-1);c++){
            warehouse[cargorow-c-1][movedcol]=3;
        }
    }
    
    if(pathrow>>0){
        for (int d=0;d<(pathrow-1);d++){
            warehouse[cargorow+d+1][movedcol]=3;
        }
    }
    
    // For making vertical movement
    
    if (pathcol<<0){
        for(int f=0; f<(-pathcol);f++){
            warehouse[cargorow][cargocol-f-1]=3;
        }
    }
    
    if (pathcol>>0){
        for(int g=0; g<(pathcol);g++){
            warehouse[cargorow][cargocol+g+1]=3;
        }
    }
    
    // For the destination of the cargo
    
    
}",0
rdon807,1696242279,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    // This part is to find the location of the cargo
    
    int cargorow,cargocol;
    int i, j;
    
    for (i=0; i<10;i++){
        for (j=0; j<10; j++){
            if(warehouse[i][j]==1){
                cargorow=i;
                cargocol=j;
            }
        }
    }
    
    
    //This part is to find the location of the desired place
    
    int movedrow, movedcol;
    
    for (int a=0;a<10;a++){
        for (int b=0;b<10;b++){
            if(warehouse[a][b]==2){
                movedrow=a;
                movedcol=b;
            }
        }
    }
    
    
    // This part is for making the pathway = 3 
    
    int pathrow, pathcol;
    
    pathrow=movedrow-cargorow;
    pathcol=movedcol-cargocol;
    
    // For making the horizontal movement
    
    if (pathrow<0){
        for (int c=0; c<(-pathrow-1);c++){
            warehouse[cargorow-c-1][movedcol]=3;
        }
    }
    
    if(pathrow>0){
        for (int d=0;d<(pathrow-1);d++){
            warehouse[cargorow+d+1][movedcol]=3;
        }
    }
    
    // For making vertical movement
    
    if (pathcol<0){
        for(int f=0; f<(-pathcol);f++){
            warehouse[cargorow][cargocol-f-1]=3;
        }
    }
    
    if (pathcol>0){
        for(int g=0; g<(pathcol);g++){
            warehouse[cargorow][cargocol+g+1]=3;
        }
    }
    
    // For the destination of the cargo
    
    
}",0
rdon807,1696242471,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    // This part is to find the location of the cargo
    
    int cargorow,cargocol;
    int i, j;
    
    for (i=0; i<10;i++){
        for (j=0; j<10; j++){
            if(warehouse[i][j]==1){
                cargorow=i;
                cargocol=j;
            }
        }
    }
    
    
    //This part is to find the location of the desired place
    
    int movedrow, movedcol;
    
    for (int a=0;a<10;a++){
        for (int b=0;b<10;b++){
            if(warehouse[a][b]==2){
                movedrow=a;
                movedcol=b;
            }
        }
    }
    
    
    // This part is for making the pathway = 3 
    
    int pathrow, pathcol;
    
    pathrow=movedrow-cargorow;
    pathcol=movedcol-cargocol;
    
    // For making the horizontal movement
    
    if (pathrow<0){
        for (int c=1; c<(-pathrow-1);c++){
            warehouse[cargorow-c][movedcol]=3;
        }
    }
    
    if(pathrow>0){
        for (int d=1;d<(pathrow-1);d++){
            warehouse[cargorow+d][movedcol]=3;
        }
    }
    
    // For making vertical movement
    
    if (pathcol<0){
        for(int f=1; f<(-pathcol);f++){
            warehouse[cargorow][cargocol-f]=3;
        }
    }
    
    if (pathcol>0){
        for(int g=1; g<(pathcol);g++){
            warehouse[cargorow][cargocol+g]=3;
        }
    }
    
    // For the destination of the cargo
    
    
}",0
rdon807,1696242686,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    // This part is to find the location of the cargo
    
    int cargorow,cargocol;
    int i, j;
    
    for (i=0; i<10;i++){
        for (j=0; j<10; j++){
            if(warehouse[i][j]==1){
                cargorow=i;
                cargocol=j;
            }
        }
    }
    
    
    //This part is to find the location of the desired place
    
    int movedrow, movedcol;
    
    for (int a=0;a<10;a++){
        for (int b=0;b<10;b++){
            if(warehouse[a][b]==2){
                movedrow=a;
                movedcol=b;
            }
        }
    }
    
    
    // This part is for making the pathway = 3 
    
    int pathrow, pathcol;
    
    pathrow=movedrow-cargorow;
    pathcol=movedcol-cargocol;
    
    // For making the horizontal movement
    
    if (pathrow<0){
        for (int c=0; c<(-pathrow-1);c++){
            warehouse[cargorow-c-1][movedcol]=3;
        }
    }
    
    if(pathrow>0){
        for (int d=0;d<(pathrow-1);d++){
            warehouse[cargorow+d+1][movedcol]=3;
        }
    }
    
    // For making vertical movement
    
    if (pathcol<0){
        for(int f=0; f<(-pathcol);f++){
            warehouse[cargorow][cargocol-f-1]=3;
        }
    }
    
    if (pathcol>0){
        for(int g=0; g<(pathcol);g++){
            warehouse[cargorow][cargocol+g+1]=3;
        }
    }
    
    // For the destination of the cargo
    
    if (warehouse[movedrow][movedcol]==3){
        warehouse[movedrow][movedcol]=2;
    }
}",1
rger104,1695872518,1,"void PelletRoute(int warehouse[10][10]) 
{
	
	
	int workerrow;
	int workercol;
	int boxrow;
	int boxcol;
	int i;
	int j;
	int horizon=-1;
	
	
	//find worker position
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				workerrow = i;
				workercol = j;
			}
		}
	}

	//find box position
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				boxrow = i;
				boxcol = j;
			}
		}
	}


	

	
	//calculate if box is to the left, right or same row as location
	if (workercol>boxcol) {
		// to the left
		//draw the line if its to the left
		for (i = workercol-1;i>boxcol-1;i--) {
			warehouse[workerrow][i] = 3;
			if (i == boxcol) {
				warehouse[workerrow][i] = 4;
			}
			
		}
	}
	else if (workercol<boxcol) {
		// to the right
		//draw the line if its to the right
		for (i = workercol+1;i<boxcol+1;i++) {
			warehouse[workerrow][i] = 3;
			if (i == boxcol) {
				
				warehouse[workerrow][i] = 4;
			}
			
		}

	}
	
	
	//look for 2 if no two return
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				horizon = 1;
			}
		}
	}
		
		if (horizon == -1) {
			// find the 4 and make it a two
			for (i = 0; i < 10; i++) {
				for (j = 0; j < 10; j++) {
					if (warehouse[i][j] == 4) {
						warehouse[i][j] = 2;
						}
					}
				}
				return;
		}
	
	
	
	
	//calculate if its above or below 
	if (workerrow > boxrow) {
		// 1 is above 2
		//draw the line down
		for (i = workerrow - 1; i > boxrow; i--) {
			warehouse[i][boxcol] =3;
		}
	}
	else if (workerrow < boxrow) {
			// 2 is above 1
			//draw the line up
		for (i = workerrow + 1; i < boxrow; i++) {
			warehouse[i][boxcol] = 3;
		}

	}
		//remove the 4 marker of the turning point

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 4) {
				warehouse[i][j]=3;
			}
		}
	}

	}",1
rkan756,1696216917,1,"void PelletRoute(int warehouse[10][10]) {

int i;
int j;
int worker[2];
int box[2];

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				worker[0] = i;
                worker[1] = j;
            }
            if (warehouse[i][j] == 2){
				box[0] = i;
                box[1] = j;
            }
        }
    }

    if (box[1] > worker[1]) {
        for (j = worker[1] + 1; j <= box[1]; j++) {
            warehouse[worker[0]][j] = 3;
        }
    }
    else {
        for (j = worker[1] - 1; j >= box[1]; j--) {
            warehouse[worker[0]][j] = 3;
        }
    }

    if (box[0] > worker[0]) {
        for (i = worker[0] + 1; i <= box[0] - 1; i++) {
            warehouse[i][box[1]] = 3;
        }
    }
    else {
        for (i = worker[1] - 1; i >= box[1] + 1; i--) {
            warehouse[i][box[1]] = 3;
        }
    }
}",0
rkan756,1696220027,2,"void PelletRoute(int warehouse[10][10]) {

int i;
int j;
int worker[2];
int box[2];

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				worker[0] = i;
                worker[1] = j;
            }
            if (warehouse[i][j] == 2){
				box[0] = i;
                box[1] = j;
            }
        }
    }

if (box[0] == worker[0]) {
    if (box[1] > worker[1]) {
        for (j = worker[1] + 1; j <= box[1] - 1; j++) {
            warehouse[worker[0]][j] = 3;
        }
    }
    else if (box[1] < worker[1]) {
        for (j = worker[1] - 1; j >= box[1] + 1; j--) {
            warehouse[worker[0]][j] = 3;
        }
    }
}
else {
   if (box[1] > worker[1]) {
        for (j = worker[1] + 1; j <= box[1]; j++) {
            warehouse[worker[0]][j] = 3;
        }
    }
    else if (box[1] < worker[1]) {
        for (j = worker[1] - 1; j >= box[1]; j--) {
            warehouse[worker[0]][j] = 3;
        }
    } 
}

if (box[1] == worker[1]) {
    if (box[0] > worker[0]) {
        for (i = worker[0] + 1; i <= box[0] - 1; i++) {
            warehouse[i][box[1]] = 3;
        }
    }
    else if (box[0] < worker[0]) {
        for (i = worker[0] - 1; i >= box[0] + 1; i--) {
            warehouse[i][box[1]] = 3;
        }
    }
}
else {
    if (box[0] > worker[0]) {
        for (i = worker[0] + 1; i <= box[0] - 1; i++) {
            warehouse[i][box[1]] = 3;
        }
    }
    else if (box[0] < worker[0]) {
        for (i = worker[0] - 1; i >= box[0] + 1; i--) {
            warehouse[i][box[1]] = 3;
        }
    }
}
}",1
rkar406,1695638322,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int startrow, startcol, endrow, endcol;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startrow = i;
				startcol = j;
			}
		}
	}
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				endrow = i;
				endcol = j;
			}
		}
	}
	for (i = startcol + 1; i <= endcol; i++) {
		warehouse[startrow][i] = 3;
	}
	for (j = startrow + 1; j < endrow; j++) {
		warehouse[j][endcol] = 3;
	}
}",0
rkar406,1695682537,2,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int startrow, startcol, endrow, endcol;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startrow = i;
                startcol = j;
            }
            else if (warehouse[i][j] == 2) {
                endrow = i;
                endcol = j;
            }
        }
    }

    if (startrow == endrow) {
        if (startcol > endcol) {
            for (i = startcol - 1; i > endcol; i--) {
                warehouse[startrow][i] = 3;
            }
        }
        else if (startcol < endcol) {
            for (i = startcol + 1; i < endcol; i++) {
                warehouse[startrow][i] = 3;
            }
        }
    }
    if (startrow != endrow) {
        if (startcol > endcol) {
            for (i = startcol - 1; i >= endcol; i--) {
                warehouse[startrow][i] = 3;
            }
        }
        else if (startcol < endcol) {
            for (i = startcol + 1; i <= endcol; i++) {
                warehouse[startrow][i] = 3;
            }
        }
    }

    if (startcol == endcol) {
        if (startrow > endrow) {
            for (j = startrow - 1; j > endrow; j--) {
                warehouse[j][endcol] = 3;
            }
        }
        else if (startrow < endrow) {
            for (j = startrow + 1; j < endrow; j++) {
                warehouse[j][endcol] = 3;
            }
        }
    }

    if (startcol != endcol) {
        if (startrow > endrow) {
            for (j = startrow - 1; j > endrow; j--) {
                warehouse[j][endcol] = 3;
            }
        }
        else if (startrow < endrow) {
            for (j = startrow + 1; j < endrow; j++) {
                warehouse[j][endcol] = 3;
            }
        }
    }
}",1
rkha931,1696232670,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int InitialX, InitialY, destX, destY;

    for (int i  = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                InitialX = i;
                InitialY = j;
            }
            if (warehouse[i][j] == 2) {
                destX = i;
                destY = j;
            }
        }
    }

    while (InitialY <= destY-1) {
        if (InitialY < destY) {
            InitialY++;
        } else if (InitialY > destY) {
            InitialY--;
        }
        warehouse[InitialX][InitialY] = 3;
    }

     while (InitialX < destX-1) {
        if (InitialX < destX) {
            InitialX++;
        } else if (InitialX > destX) {
            InitialX--;
        }
        warehouse[InitialX][InitialY] = 3;
    }
}",0
rkir245,1696227072,1,"void PelletRoute(int warehouse[10][10])
{
    int i,j;
    int person_row, person_col, box_row, box_col;
    //int current_location;

    // Finding the persons starting location

    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                person_row = i;
                person_col = j;
            }
        }
    }

    // Finding the end where the box will be stored
    for (i = 0; i < 10; i++)
    {
        for (j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 2)
            {
                box_row = i;
                box_col = j;
            }
        }
    }

    // Get pallet moving left of right depending on way to end
    if (box_col > person_col)
    {
        //Move to the right
        for (i = 0; i < (box_col - person_col); i++)
        {
            if (i >= 1 && i < (box_col - person_col))
            {
                warehouse[person_row][person_col + i] = 3;
            }
            else
            {

            }
        }
    }
    
    else if (box_col < person_col)
    {
        //Move to the left
        for (i = 0; i < (person_col - box_col); i++)
        {
            if (i >= 1 && i < (person_col - box_col))
            {
                warehouse[person_row][person_col - i] = 3;
            }
            else
            {

            }
        }
    }

    else
    {
        //Go straight down or up
    }

    // Get pallet moving up or down depending on way to end
    if (box_row > person_row)
    {
        //Move down
        for (i = 0; i < (box_row - person_row); i++)
        {
            if (i >= 1 && i < (box_row - person_row))
            {
                warehouse[person_row + i][box_col] = 3;
            }
            else
            {

            }
        }
    }

    else if (box_row < person_row)
    {
        // Move up
        for (i = 0; i < (person_row - box_row); i++)
        {
            if (i >= 1 && i < (person_row - box_row))
            {
                warehouse[person_row - i][box_col] = 3;
            }
            else
            {

            }
        }
    }
    else
    {
        // You should've arrived
    }

    if ((person_row != box_row) & (person_col != box_col))
    {
        warehouse[person_row][box_col] = 3;
    }
}",1
rmur989,1696217138,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]){
    int rowPos1;
    int colPos1;
    int rowPos2;
    int colPos2;
    int rowposition;
    int colposition;
    
        for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                rowPos1 = i;
                colPos1 = j;
            }
        }
    }
    
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if(warehouse[i][j] == 2){
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    
    rowposition = rowPos1;
    colposition = colPos1;
    
    while(colposition < colPos2){
        colposition++;
        warehouse[rowposition][colposition] = 3;
    }
    
    while(rowposition < (rowPos2-1)){
        rowposition++;
        warehouse[rowposition][colposition] = 3;
    }
    
    
}


int main()
{
    int warehouse[10][10] = { 
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 2, 0, 0, 0, 0} };

PelletRoute(warehouse);

int i, j;
for (i = 0; i < 10; i++) {
   for (j = 0; j < 10; j++) {
      printf(""%d "", warehouse[i][j]);
   }
   printf(""\n"");
}
}
",0
rmur989,1696217184,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]){
    int rowPos1;
    int colPos1;
    int rowPos2;
    int colPos2;
    int rowposition;
    int colposition;
    
        for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                rowPos1 = i;
                colPos1 = j;
            }
        }
    }
    
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if(warehouse[i][j] == 2){
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    
    rowposition = rowPos1;
    colposition = colPos1;
    
    while(colposition < colPos2){
        colposition++;
        warehouse[rowposition][colposition] = 3;
    }
    
    while(rowposition < (rowPos2-1)){
        rowposition++;
        warehouse[rowposition][colposition] = 3;
    }
    
    
}",0
rmur989,1696217804,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]){
    int rowPos1;
    int colPos1;
    int rowPos2;
    int colPos2;
    int rowposition;
    int colposition;
    
        for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                rowPos1 = i;
                colPos1 = j;
            }
        }
    }
    
    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if(warehouse[i][j] == 2){
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    
    rowposition = rowPos1;
    colposition = colPos1;
    
    if (colPos1 < colPos2){
        while(colposition < colPos2){
        colposition++;
        warehouse[rowposition][colposition] = 3;
    }
    }
    else{
        while(colposition > colPos2){
        colposition--;
        if(warehouse[rowposition][colposition]==2){
            warehouse[rowposition][colposition] = 2;
        }
        else{
            warehouse[rowposition][colposition] = 3;
        }
        
        }
    }
    
    if (rowPos1 < rowPos2){
        while(rowposition < (rowPos2-1)){
        rowposition++;
        warehouse[rowposition][colposition] = 3;
    }
    }
    else{
        while(rowposition > (rowPos2+1)){
        rowposition--;
        warehouse[rowposition][colposition] = 3;
    }
    }
    
    
    
}
",1
rnig735,1696071299,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int start[2], finish[2];
    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                start[0] = i;
                start[1] = j;
            } 
            if (warehouse[i][j] == 2) {
                finish[0] = i;
                finish[1] = j;
            }
        }
    }
    if ((start[0] != finish[0]) && (start[1] != finish[1])) {
    warehouse[start[0]][finish[1]] = 3;
    }
    if (finish[1] - start[1] > 0) {
        for (int k=start[1]+1; k<finish[1]; k++) {
            warehouse[start[0]][k] = 3;
        }
    } else if (finish[1] - start[1] < 0) {
        for (int k=start[1]-1; k>finish[1]; k--) {
            warehouse[start[0]][k] = 3;
        }
    }
     if (finish[0] - start[0] > 0) {
        for (int p=start[0]+1; p<finish[0]; p++) {
            warehouse[p][finish[1]] = 3;
        }
    } else if (finish[1] - start[1] < 0) {
        for (int p=start[1]-1; p>finish[1]; p--) {
            warehouse[p][finish[1]] = 3;
        }
    }
}",0
rnig735,1696071532,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int start[2], finish[2];
    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                start[0] = i;
                start[1] = j;
            } 
            if (warehouse[i][j] == 2) {
                finish[0] = i;
                finish[1] = j;
            }
        }
    }
    if ((start[0] != finish[0]) && (start[1] != finish[1])) {
    warehouse[start[0]][finish[1]] = 3;
    }
    if (finish[1] - start[1] > 0) {
        for (int k=start[1]+1; k<finish[1]; k++) {
            warehouse[start[0]][k] = 3;
        }
    } else if (finish[1] - start[1] < 0) {
        for (int k=start[1]-1; k>finish[1]; k--) {
            warehouse[start[0]][k] = 3;
        }
    }
     if (finish[0] - start[0] > 0) {
        for (int p=start[0]+1; p<finish[0]; p++) {
            warehouse[p][finish[1]] = 3;
        }
    } else if (finish[0] - start[0] < 0) {
        for (int p=start[1]-1; p>finish[1]; p--) {
            warehouse[p][finish[1]] = 3;
        }
    }
}",0
rnig735,1696072270,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int start[2], finish[2];
    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                start[0] = i;
                start[1] = j;
            } 
            if (warehouse[i][j] == 2) {
                finish[0] = i;
                finish[1] = j;
            }
        }
    }
    if ((start[0] != finish[0]) && (start[1] != finish[1])) {
    warehouse[start[0]][finish[1]] = 3;
    }
    
    if (finish[1] - start[1] > 0) {
        for (int k=start[1]+1; k<finish[1]; k++) {
            warehouse[start[0]][k] = 3;
        }
    } else if (finish[1] - start[1] < 0) {
        for (int k=start[1]-1; k>finish[1]; k--) {
            warehouse[start[0]][k] = 3;
        }
    }
    
     if (finish[0] - start[0] > 0) {
        for (int p=start[0]+1; p<finish[0]; p++) {
            warehouse[p][finish[1]] = 3;
        }
    } else if (finish[0] - start[0] < 0) {
        for (int p=start[0]-1; p>finish[0]; p--) {
            warehouse[p][finish[1]] = 3;
        }
    }
}",1
rpar376,1696044080,1,"void
PelletRoute (int warehouse[10][10])
{
  int starti, startj, endi, endj, hormove, vertmove;
  for (int i = 0; i < 10; i++)
    {
      for (int j = 0; j < 10; j++)
	{
	  if (warehouse[i][j] == 1)
	    {
	      starti = i;
	      startj = j;
	    }
	  if (warehouse[i][j] == 2)
	    {
	      endi = i;
	      endj = j;
	    }
	}
    }

  vertmove = endi - starti;
  hormove = endj - startj;
  if (hormove > 0)
    {
      startj++;
    }
  else if (hormove < 0)
    {
      startj--;
    }
  else
    {
      if (vertmove > 0)
	{
	  starti++;
	}
      else if (vertmove < 0)
	{
	  starti--;
	}
    }

  if (hormove >= 0)
    {
      for (startj; startj < endj; startj++)
	{
	  warehouse[starti][startj] = 3;
	}
    }
  else
    {
      for (startj; startj > endj; startj--)
	{
	  warehouse[starti][startj] = 3;
	}
    }

  if (vertmove >= 0)
    {
      for (starti; starti < endi; starti++)
	{
	  warehouse[starti][startj] = 3;
	}
    }
  else
    {
      for (starti; starti > endi; starti--)
	{
	  warehouse[starti][startj] = 3;
	}
    }
}",0
rpar376,1696044346,2,"void PelletRoute (int warehouse[10][10])
{
  int starti, startj, endi, endj, hormove, vertmove;
  for (int i = 0; i < 10; i++)
    {
      for (int j = 0; j < 10; j++)
	{
	  if (warehouse[i][j] == 1)
	    {
	      starti = i;
	      startj = j;
	    }
	  if (warehouse[i][j] == 2)
	    {
	      endi = i;
	      endj = j;
	    }
	}
    }

  vertmove = endi - starti;
  hormove = endj - startj;
  if (hormove > 0)
    {
      startj++;
    }
  else if (hormove < 0)
    {
      startj--;
    }
  else
    {
      if (vertmove > 0)
	{
	  starti++;
	}
      else if (vertmove < 0)
	{
	  starti--;
	}
    }

  if (hormove >= 0)
    {
      for (; startj < endj; startj++)
	{
	  warehouse[starti][startj] = 3;
	}
    }
  else
    {
      for (; startj > endj; startj--)
	{
	  warehouse[starti][startj] = 3;
	}
    }

  if (vertmove >= 0)
    {
      for (; starti < endi; starti++)
	{
	  warehouse[starti][startj] = 3;
	}
    }
  else
    {
      for (; starti > endi; starti--)
	{
	  warehouse[starti][startj] = 3;
	}
    }
}",1
rpat943,1695878965,1,"#include <stdio.h>

int PelletRoute(int warehouse[10][10])
{
    int i, j, startrow, startcol, endrow, endcol;
    
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startrow = i;
                startcol = j;
            }
            if (warehouse[i][j] == 2) {
                endrow = i;
                endcol = j;
            }
        }
    }
    
    if (startrow < endrow && startcol < endcol) {
        for (i = startcol + 1; i <= endcol; i++) {
            warehouse[startrow][i] = 3;
        }
        
        for (i = startrow + 1; i < endrow; i++) {
            warehouse[i][endcol] = 3;
        }
    }
    
    if (startcol > endcol && startrow < endrow) {
        for (i = startcol - 1; i >= endcol; i--) {
            warehouse[startrow][i] = 3;
        }
        
        for (i = startrow + 1; i < endrow; i++) {
            warehouse[i][endcol] = 3;
        }
    }
    
    if (startrow > endrow && startcol > endcol) {
        for (i = startcol - 1 ; i >= endcol; i--) {
            warehouse[startrow][i] = 3;
        }
        
        for (i = startrow - 1; i > endrow; i--) {
            warehouse[i][endcol] = 3;
        }
    } 
    
    if (startrow > endrow && startcol < endcol) {
        for (i = startcol + 1 ; i <= endcol; i++) {
            warehouse[startrow][i] = 3;
        }
        
        for (i = startrow - 1; i > endrow; i--) {
            warehouse[i][endcol] = 3;
        }
    } 
    
    if (startrow > endrow && startcol == endcol) {
        for (i = startrow - 1; i > endrow; i--) {
            warehouse[i][endcol] = 3;
        } 
        } else if (startrow < endrow && startcol == endcol) {
        for (i = startrow + 1; i < endrow; i++) {
            warehouse[i][endcol] = 3;
        }
    }

    if (startrow == endrow && startcol < endcol) {
        for (i = startcol + 1; i < endcol; i++) {
            warehouse[startrow][i] = 3;
        } 
        } else if (startrow == endrow && startcol > endcol) {
        for (i = startcol - 1; i > endcol; i--) {
            warehouse[startrow][i] = 3;
        }
    }
    
    
}",0
rpat943,1695879111,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i, j, startrow, startcol, endrow, endcol;
    
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startrow = i;
                startcol = j;
            }
            if (warehouse[i][j] == 2) {
                endrow = i;
                endcol = j;
            }
        }
    }
    
    if (startrow < endrow && startcol < endcol) {
        for (i = startcol + 1; i <= endcol; i++) {
            warehouse[startrow][i] = 3;
        }
        
        for (i = startrow + 1; i < endrow; i++) {
            warehouse[i][endcol] = 3;
        }
    }
    
    if (startcol > endcol && startrow < endrow) {
        for (i = startcol - 1; i >= endcol; i--) {
            warehouse[startrow][i] = 3;
        }
        
        for (i = startrow + 1; i < endrow; i++) {
            warehouse[i][endcol] = 3;
        }
    }
    
    if (startrow > endrow && startcol > endcol) {
        for (i = startcol - 1 ; i >= endcol; i--) {
            warehouse[startrow][i] = 3;
        }
        
        for (i = startrow - 1; i > endrow; i--) {
            warehouse[i][endcol] = 3;
        }
    } 
    
    if (startrow > endrow && startcol < endcol) {
        for (i = startcol + 1 ; i <= endcol; i++) {
            warehouse[startrow][i] = 3;
        }
        
        for (i = startrow - 1; i > endrow; i--) {
            warehouse[i][endcol] = 3;
        }
    } 
    
    if (startrow > endrow && startcol == endcol) {
        for (i = startrow - 1; i > endrow; i--) {
            warehouse[i][endcol] = 3;
        } 
        } else if (startrow < endrow && startcol == endcol) {
        for (i = startrow + 1; i < endrow; i++) {
            warehouse[i][endcol] = 3;
        }
    }

    if (startrow == endrow && startcol < endcol) {
        for (i = startcol + 1; i < endcol; i++) {
            warehouse[startrow][i] = 3;
        } 
        } else if (startrow == endrow && startcol > endcol) {
        for (i = startcol - 1; i > endcol; i--) {
            warehouse[startrow][i] = 3;
        }
    }
    
    
}",1
rraj313,1695787874,1,"void PelletRoute(int warehouse[10][10]) {

    int i, j, PelletRow = 0, PelletCol = 0, FinalRow = 0, FinalCol = 0, RowDiff, ColDiff;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                PelletRow = i;
                PelletCol = j;
            } else if (warehouse[i][j] == 2) {
                FinalRow = i;
                FinalCol = j;
            }
        }
    }

    RowDiff = FinalRow - PelletRow;
    ColDiff = FinalCol - PelletCol;

    if (ColDiff*ColDiff > 1 && RowDiff*RowDiff > 1) {
        warehouse[PelletRow][FinalCol] = 3;
    }

    if (ColDiff > 1)
    {
        for (i = PelletCol + 1; i < FinalCol; i++) {
            warehouse[PelletRow][i] = 3;
        }
    } else if (ColDiff < -1) {
        for (i = PelletCol - 1; i > FinalCol; i--) {
            warehouse[PelletRow][i] = 3;
        }
    }

    if (RowDiff > 1) {
        for (i = PelletRow + 1; i < FinalRow; i++) {
            warehouse[i][FinalCol] = 3;
        }
    } else if (RowDiff < -1) {
        for (i = PelletRow - 1; i > FinalRow; i--) {
            warehouse[i][FinalCol] = 3;
        }
    }
}",0
rraj313,1695788507,2,"void PelletRoute(int warehouse[10][10]) {

    int i, j, PelletRow = 0, PelletCol = 0, FinalRow = 0, FinalCol = 0, RowDiff, ColDiff;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                PelletRow = i;
                PelletCol = j;
            } else if (warehouse[i][j] == 2) {
                FinalRow = i;
                FinalCol = j;
            }
        }
    }

    RowDiff = FinalRow - PelletRow;
    ColDiff = FinalCol - PelletCol;

    if (ColDiff*ColDiff >= 1 && RowDiff*RowDiff >= 1) {
        warehouse[PelletRow][FinalCol] = 3;
    }

    if (ColDiff > 1)
    {
        for (i = PelletCol + 1; i < FinalCol; i++) {
            warehouse[PelletRow][i] = 3;
        }
    } else if (ColDiff < -1) {
        for (i = PelletCol - 1; i > FinalCol; i--) {
            warehouse[PelletRow][i] = 3;
        }
    }

    if (RowDiff > 1) {
        for (i = PelletRow + 1; i < FinalRow; i++) {
            warehouse[i][FinalCol] = 3;
        }
    } else if (RowDiff < -1) {
        for (i = PelletRow - 1; i > FinalRow; i--) {
            warehouse[i][FinalCol] = 3;
        }
    }
}",1
rroz381,1696238988,1,"void PelletRoute(int wh[10][10])
{
    int i, j;
    int prow, pcol;
    int drow, dcol;
   
    for(i = 0; i < 10; i++) {
        for (j=0; i < 10; j++) {
            if (wh[i][j] == 1) {
               prow = i;
               drow = j;
            }
        }
    } 
    
    /*across cols*/
    while (dcol != pcol) {
        if (dcol > pcol) {
            pcol++;
        } 
        else if (dcol < pcol) {
            pcol--;
        }
        if (wh[prow][pcol] != 2) { 
            wh[prow][pcol] = 3;
        }
    }
    
    /*arcoss rows*/
    while (drow != prow) {
        if (drow > prow) {
            prow++;
        }
        else if (drow < prow) {
            prow--;
        }
        if (wh[prow][pcol] != 2) { 
            wh[prow][pcol] = 3;
        }
    }
}
",0
rroz381,1696239290,2,"void PelletRoute(int wh[10][10])
{
    int i, j;
    int prow = -1; 
    int pcol = -1;
    int drow = -1;
    int dcol = -1;
   
    for(i = 0; i < 10; i++) {
        for (j=0; i < 10; j++) {
            if (wh[i][j] == 1) {
               prow = i;
               drow = j;
            }
        }
    } 
    
    /*across cols*/
    while (dcol != pcol) {
        if (pcol < dcol) {
            pcol++;
        } 
        else if (pcol > dcol) {
            pcol--;
        }
        if (wh[prow][pcol] != 2) { 
            wh[prow][pcol] = 3;
        }
    }
    
    /*arcoss rows*/
    while (drow != prow) {
        if (prow < drow) {
            prow++;
        }
        else if (prow > drow) {
            prow--;
        }
        if (wh[prow][pcol] != 2) { 
            wh[prow][pcol] = 3;
        }
    }
}
",0
rroz381,1696240695,3,"void PelletRoute(int wh[10][10])
{
    int i, j;
    int prow = -1; 
    int pcol = -1;
    int drow = -1;
    int dcol = -1;
   
    for(i = 0; i < 10; i++) {
        for (j = 0; i < 10; j++) {
            if (wh[i][j] == 1) {
               prow = i;
               pcol = j;
            }
            else if (wh[i][j] == 2) {
                drow = i;
                dcol = j;
                
            }
        }
    } 
    
    /*across cols*/
    while (dcol != pcol) {
        if (pcol < dcol) {
            ++pcol;
        } 
        else if (pcol > dcol) {
            --pcol;
        }
        if (wh[prow][pcol] != 2) { 
            wh[prow][pcol] = 3;
        }
    }
    
    /*arcoss rows*/
    while (drow != prow) {
        if (prow < drow) {
            ++prow;
        }
        else if (prow > drow) {
            --prow;
        }
        if (wh[prow][pcol] != 2) { 
            wh[prow][pcol] = 3;
        }
    }
}
",0
rsin531,1696228447,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol < destCol) {
        pelletCol++;
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
    while (pelletCol > destCol) {
        pelletCol--;
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }

    while (pelletRow < destRow) {
        pelletRow++;
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
    while (pelletRow > destRow) {
        pelletRow--;
        if (warehouse[pelletRow][pelletCol] != 2) {
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
}",1
rsin719,1696065600,1,"void PelletRoute(int warehouse[10][10]) {
    int pellet_row = -1, pellet_col = -1;
    int destination_row = -1, destination_col = -1;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                destination_row = i;
                destination_col = j;
            }
        }
    }

    if (pellet_col != destination_col) {
        for (int j = (pellet_col < destination_col) ? pellet_col : destination_col;
             j <= ((pellet_col < destination_col) ? destination_col : pellet_col); j++) {
            warehouse[pellet_row][j] = 3;
        }
    }

    if (pellet_row != destination_row) {
        for (int i = (pellet_row < destination_row) ? pellet_row : destination_row;
             i <= ((pellet_row < destination_row) ? destination_row : pellet_row); i++) {
            warehouse[i][destination_col] = 3;
        }
    }
}
",0
rsin719,1696066649,2,"

void PelletRoute(int warehouse[10][10]) {
    int pellet_row, pellet_col, dest_row, dest_col;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    // Move horizontally 
    while (pellet_col != dest_col) {
        pellet_col += (pellet_col < dest_col) ? 1 : -1;
        warehouse[pellet_row][pellet_col] = 3;
    }

    // Move vertically
    while (pellet_row != dest_row) {
        pellet_row += (pellet_row < dest_row) ? 1 : -1;
        warehouse[pellet_row][pellet_col] = 3;
    }

    // Mark the final destination as 2
    warehouse[dest_row][dest_col] = 2;
}",1
rsmi948,1695680712,1,"
void PelletRoute(int warehouse[10][10]){
    
    int rowPos_1, colPos_1, rowPos_2, colPos_2;

    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                rowPos_1 = i;
                colPos_1 = j;
            } else if (warehouse[i][j] == 2){
                rowPos_2 = i;
                colPos_2 = j;
            }
        }
    }

    for (int i = 0; i < 10 ; i++){
        if (i == colPos_2 && i != colPos_1){
            warehouse[rowPos_1][i] = 3;
        } else if ((colPos_2 < i && i < colPos_1) || (colPos_1 < i && i < colPos_2)){
            warehouse[rowPos_1][i] = 3;
        }
    }
    for (int i = 0; i < 10 ; i++){
        if ((rowPos_2 < i && i < rowPos_1) || (rowPos_1 < i && i < rowPos_2)){
            warehouse[i][colPos_2] = 3;
        }
    }
}",0
rsmi948,1695681077,2,"void PelletRoute(int warehouse[10][10]){
    
    int rowPos_1, colPos_1, rowPos_2, colPos_2;

    for (int i = 0; i < 10; i++){
        for (int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                rowPos_1 = i;
                colPos_1 = j;
            } else if (warehouse[i][j] == 2){
                rowPos_2 = i;
                colPos_2 = j;
            }
        }
    }

    for (int i = 0; i < 10 ; i++){
        if (i == colPos_2 && i != colPos_1 && rowPos_1 != rowPos_2){
            warehouse[rowPos_1][i] = 3;
        } else if ((colPos_2 < i && i < colPos_1) || (colPos_1 < i && i < colPos_2)){
            warehouse[rowPos_1][i] = 3;
        }
    }
    for (int i = 0; i < 10 ; i++){
        if ((rowPos_2 < i && i < rowPos_1) || (rowPos_1 < i && i < rowPos_2)){
            warehouse[i][colPos_2] = 3;
        }
    }
}",1
rtan654,1695711464,1,"#define numrows 10
#define numcols 10


void PelletRoute(int warehouse[numrows][numrows]){
    //Initalisng the variables
    int ipellet, jpellet;
    int idestination, jdestination; 
    
    //Creating a nested for loop in order to find the position of the pellet and also its destination 
    for (int i = 0; i < numrows; i++){
        for (int j = 0; j < numcols; j++)
        {
            if (warehouse[i][j] == 1){
                ipellet = i;
                jpellet = j;
            } else if (warehouse[i][j] == 2){
                idestination = i;
                jdestination = j;
            }
        }
        
    }
    printf(""%d, %d\n"", ipellet, jpellet);
    printf(""%d, %d\n"", idestination, jdestination);

    while(jpellet != jdestination){
        if(jpellet < jdestination){
            jpellet++;
        } else {
            jpellet--;
        }
        warehouse[ipellet][jpellet] = 3;
    }
    
    while (ipellet != idestination){
        if(ipellet < idestination){
            ipellet++;
        } else {
            ipellet--;
        }
        warehouse[ipellet][jpellet] = 3;
    }

    warehouse[idestination][jdestination] = 2;


}",0
rtan654,1695711521,2,"#define numrows 10
#define numcols 10


void PelletRoute(int warehouse[numrows][numrows]){
    //Initalisng the variables
    int ipellet, jpellet;
    int idestination, jdestination; 
    
    //Creating a nested for loop in order to find the position of the pellet and also its destination 
    for (int i = 0; i < numrows; i++){
        for (int j = 0; j < numcols; j++)
        {
            if (warehouse[i][j] == 1){
                ipellet = i;
                jpellet = j;
            } else if (warehouse[i][j] == 2){
                idestination = i;
                jdestination = j;
            }
        }
        
    }

    while(jpellet != jdestination){
        if(jpellet < jdestination){
            jpellet++;
        } else {
            jpellet--;
        }
        warehouse[ipellet][jpellet] = 3;
    }
    
    while (ipellet != idestination){
        if(ipellet < idestination){
            ipellet++;
        } else {
            ipellet--;
        }
        warehouse[ipellet][jpellet] = 3;
    }

    warehouse[idestination][jdestination] = 2;


}
",1
rtap592,1696224309,1,"void PelletRoute(int warehouse[10][10])
{
	int startRow, startCol, endRow, endCol; 
		
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {

				startRow = i;
				startCol = j;
	
			}
			else if(warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	while (startCol != endCol) {
		/*int moveX = abs(endCol - startCol);*/
		
		if (startCol < endCol) {
			startCol++;

		}
		else {
			startCol--;
		}

		warehouse[startRow][startCol] = 3;
	}

	while (startRow != endRow) {
		
		if (startRow < endRow) {
			startRow++;
		}
		else {
			endRow--;
		}

		if (warehouse[startRow][startCol] != 2) {
			warehouse[startRow][startCol] = 3;
		}


	}
	




}
",0
rtap592,1696224920,2,"void PelletRoute(int warehouse[10][10])
{
	int startRow, startCol, endRow, endCol; 
		
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {

				startRow = i;
				startCol = j;
	
			}
			else if(warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	while (startCol != endCol) {
		/*int moveX = abs(endCol - startCol);*/
		
		if (startCol < endCol) {
			startCol++;

		}
		else {
			startCol--;
		}

		warehouse[startRow][startCol] = 3;
	}

	while (startRow != endRow) {
		
		if (startRow < endRow) {
			startRow++;
		}
		else {
			startRow--;
		}

		if (warehouse[startRow][startCol] != 2) {
			warehouse[startRow][startCol] = 3;
		}


	}
	




}",0
rtap592,1696224976,3,"void PelletRoute(int warehouse[10][10])
{
	int startRow, startCol, endRow, endCol; 
		
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {

				startRow = i;
				startCol = j;
	
			}
			else if(warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	while (startCol != endCol) {
		/*int moveX = abs(endCol - startCol);*/
		
		if (startCol < endCol) {
			startCol++;

		}
		else {
			startCol--;
		}
		
		if (warehouse[startRow][startCol] != 2) {
			warehouse[startRow][startCol] = 3;
		}

		
	}

	while (startRow != endRow) {
		
		if (startRow < endRow) {
			startRow++;
		}
		else {
			startRow--;
		}

		if (warehouse[startRow][startCol] != 2) {
			warehouse[startRow][startCol] = 3;
		}


	}
	




}",1
rzha972,1696141831,1,"#include<stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int posx, posy, desPosx, desPosy;

    // Find the coordinates of pellet and destination
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                posx = j;
                posy = i;
            }
            if (warehouse[i][j] == 2) {
                desPosx = j;
                desPosy = i;
            }
        }
    }

    // Move horizontally and set route values to 3
    while (posx != desPosx) {
        if (posx < desPosx) {
            posx++;
        } else {
            posx--;
        }
        warehouse[posy][posx] = 3;
    }

    // Move vertically and set route values to 3
    while (posy != desPosy) {
        if (posy < desPosy) {
            posy++;
        } else {
            posy--;
        }
        warehouse[posy][posx] = 3;
    }
}

int main() {
    int warehouse[10][10] = {
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0, 0, 0}
    };

    PelletRoute(warehouse);

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0
rzha972,1696141845,2,"#include<stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int posx, posy, desPosx, desPosy;

    // Find the coordinates of pellet and destination
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                posx = j;
                posy = i;
            }
            if (warehouse[i][j] == 2) {
                desPosx = j;
                desPosy = i;
            }
        }
    }

    // Move horizontally and set route values to 3
    while (posx != desPosx) {
        if (posx < desPosx) {
            posx++;
        } else {
            posx--;
        }
        warehouse[posy][posx] = 3;
    }

    // Move vertically and set route values to 3
    while (posy != desPosy) {
        if (posy < desPosy) {
            posy++;
        } else {
            posy--;
        }
        warehouse[posy][posx] = 3;
    }
}

int main(void) {
    int warehouse[10][10] = {
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0, 0, 0}
    };

    PelletRoute(warehouse);

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}
",0
rzha972,1696141867,3,"#include<stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int posx, posy, desPosx, desPosy;

    // Find the coordinates of pellet and destination
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                posx = j;
                posy = i;
            }
            if (warehouse[i][j] == 2) {
                desPosx = j;
                desPosy = i;
            }
        }
    }

    // Move horizontally and set route values to 3
    while (posx != desPosx) {
        if (posx < desPosx) {
            posx++;
        } else {
            posx--;
        }
        warehouse[posy][posx] = 3;
    }

    // Move vertically and set route values to 3
    while (posy != desPosy) {
        if (posy < desPosy) {
            posy++;
        } else {
            posy--;
        }
        warehouse[posy][posx] = 3;
    }
}

",0
rzha972,1696141926,4,"#include<stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int posx, posy, desPosx, desPosy;

    // Find the coordinates of pellet and destination
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                posx = j;
                posy = i;
            }
            if (warehouse[i][j] == 2) {
                desPosx = j;
                desPosy = i;
            }
        }
    }

    // Move horizontally and set route values to 3
    while (posx != desPosx) {
        if (posx < desPosx) {
            posx++;
        } else {
            posx--;
        }
        if (warehouse[posy][posx] != 2) {
            warehouse[posy][posx] = 3;
        }
    }

    // Move vertically and set route values to 3
    while (posy != desPosy) {
        if (posy < desPosy) {
            posy++;
        } else {
            posy--;
        }
        if (warehouse[posy][posx] != 2) {
            warehouse[posy][posx] = 3;
        }
    }
}",1
sabo272,1695864287,1,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE FOUR - PelletRoute
   This function finds a path through an array from the value 1 to the value 2 while
   leaving a trail of 3s to depict the path taken.
*/
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int i,j, startRow,startCol,finishRow,finishCol;
	startRow = 0;
	startCol = 0;
	finishRow = 0;
	finishCol = 0;
	// find location of starting and ending positions.
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			if (warehouse[i][j] == 2) {
				finishRow = i;
				finishCol = j;
			}
		}

	}
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j ++) {
			if ((finishCol > startCol) && (i == startRow) && (j <= finishCol) && (j>startCol)){
				// need to move to the right
				warehouse[i][j] = 3;

			}
			if ((finishCol < startCol) && (i == startRow) && (j >= finishCol) && (j<startCol)){
				warehouse[i][j] = 3; // move to the left
				
			}
			if ((finishRow > startRow) && (j == finishCol) && (i < finishRow ) && (i >= startRow)){
				warehouse[i][j] = 3; // need to move down
								
			}
			if ((finishRow < startRow) && (j == finishCol) && (i > finishRow) && (i < startRow)){
				warehouse[i][j] = 3; // need to move up
							
			}
		}
	}

    return;
}",0
sabo272,1695865124,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE FOUR - LastIndexOf
   This function finds a path through an array from the value 1 to the value 2 while
   leaving a trail of 3s to depict the path taken.
*/
#include <stdio.h>

// only allowed one input.
void PelletRoute(int warehouse[10][10])
{
	int i,j, startRow,startCol,finishRow,finishCol;
	startRow = 0;
	startCol = 0;
	finishRow = 0;
	finishCol = 0;
	// Find starting and ending positions of route.
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j ++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			if (warehouse[i][j] == 2) {
				finishRow = i;
				finishCol = j;
			}
		}

	}
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j ++) {
			if ((finishCol > startCol) && (i == startRow) && (j <= finishCol) && (j>startCol)){
				// need to move to the right
				warehouse[i][j] = 3;

			}
			if ((finishCol < startCol) && (i == startRow) && (j >= finishCol) && (j<startCol)){
				warehouse[i][j] = 3;
				// move to the left
			}
			if ((finishRow > startRow) && (j == finishCol) && (i < finishRow ) && (i > startRow)){
				warehouse[i][j] = 3;
								// need to move down
			}
			if ((finishRow < startRow) && (j == finishCol) && (i > finishRow) && (i < startRow)){
				warehouse[i][j] = 3;
							// need to move up
			}
			if (warehouse[finishRow][finishCol] != 2){
				warehouse[finishRow][finishCol] = 2; 
			}
			if (warehouse[startRow][startCol] != 1){
				warehouse[startRow][startCol] = 1;
			}
		}
	}

    return;
}






",1
sali153,1696211150,1,"void PelletRoute(int warehouse[10][10]) {

	int one_x,one_y;
	int two_x, two_y;
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1) { one_x = i; one_y = j; }
			if (warehouse[i][j] == 2) { two_x = i; two_y = j; }
		}
	}

	int x_steps, min_horz, max_horz;
	int y_steps, min_vert, max_vert;
	if(two_x > one_x)
	{
		 max_horz = two_x ;
		 min_horz = one_x ;
	}
	else
	{
		max_horz = one_x;
		min_horz = two_x;
	}

	if (two_y > one_y)
	{
		max_vert = two_y;
		min_vert = one_y;
	}
	else
	{
		max_vert = one_y;
		min_vert = two_y;
	}
	
	for (int i = min_horz + 1; i < max_horz; i++)
	{
		if(two_y > one_y)
		{
			warehouse[i][max_vert] = 3;
		}
		else
		{
			warehouse[i][min_vert] = 3;
		}
		
	}

	for (int j = min_vert + 1; j < max_vert; j++)
	{
		if(two_x > one_x)
		{
			warehouse[min_horz][j] = 3;
		}
		else
		{
			warehouse[max_horz][j] = 3;
			
		}
		
	}

	warehouse[one_x][two_y] = 3;
    return; 

}
",0
sali153,1696211325,2,"void PelletRoute(int warehouse[10][10]) {

	int one_x,one_y;
	int two_x, two_y;
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1) { one_x = i; one_y = j; }
			if (warehouse[i][j] == 2) { two_x = i; two_y = j; }
		}
	}

	int min_horz, max_horz;
	int min_vert, max_vert;
	if(two_x > one_x)
	{
		 max_horz = two_x ;
		 min_horz = one_x ;
	}
	else
	{
		max_horz = one_x;
		min_horz = two_x;
	}

	if (two_y > one_y)
	{
		max_vert = two_y;
		min_vert = one_y;
	}
	else
	{
		max_vert = one_y;
		min_vert = two_y;
	}
	
	for (int i = min_horz + 1; i < max_horz; i++)
	{
		if(two_y > one_y)
		{
			warehouse[i][max_vert] = 3;
		}
		else
		{
			warehouse[i][min_vert] = 3;
		}
		
	}

	for (int j = min_vert + 1; j < max_vert; j++)
	{
		if(two_x > one_x)
		{
			warehouse[min_horz][j] = 3;
		}
		else
		{
			warehouse[max_horz][j] = 3;
			
		}
		
	}

	warehouse[one_x][two_y] = 3;
    return; 

}
",0
sban919,1695630376,1,"#include <stdio.h>

/* PelletRoute function takes a 10 by 10 integer array as input,
finds the position of 1 and 2,
returns the array by replacing the horizontal and vertical movement from 1 to 2 with 3. */

/* Author: Subeen Ban */

void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, destinationRow, destinationCol;

    for (int row = 0; row < 10; row++)
    {
        for (int col = 0; col < 10; col++)
        {
            if (warehouse[row][col] == 1)
            {
                pelletRow = row;
                pelletCol = col;
            }
            else if (warehouse[row][col] == 2)
            {
                destinationRow = row;
                destinationCol = col;
            }
        }
    }
    
    if (pelletRow == destinationRow || pelletCol == destinationCol){
        while (pelletCol < destinationCol-1)
        {
            pelletCol++;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletCol > destinationCol+1)
        {
            pelletCol--;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletRow < destinationRow-1)
        {
            pelletRow++;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletRow > destinationRow+1)
        {
            pelletRow--;
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
    
    
    else{
        while (pelletCol < destinationCol)
        {
            pelletCol++;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletCol > destinationCol)
        {
            pelletCol--;
            warehouse[pelletRow][pelletCol] = 3;
        }
            
        while (pelletRow < destinationRow-1)
        {
            pelletRow++;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletRow > destinationRow)
        {
            pelletRow--;
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
}",0
sban919,1695631035,2,"#include <stdio.h>

/* PelletRoute function takes a 10 by 10 integer array as input,
finds the position of 1 and 2,
returns the array by replacing the horizontal and vertical movement from 1 to 2 with 3. */

/* Author: Subeen Ban */

void PelletRoute(int warehouse[10][10])
{
    int pelletRow, pelletCol, destinationRow, destinationCol;

    for (int row = 0; row < 10; row++)
    {
        for (int col = 0; col < 10; col++)
        {
            if (warehouse[row][col] == 1)
            {
                pelletRow = row;
                pelletCol = col;
            }
            else if (warehouse[row][col] == 2)
            {
                destinationRow = row;
                destinationCol = col;
            }
        }
    }
    
    if (pelletRow == destinationRow || pelletCol == destinationCol){
        while (pelletCol < destinationCol-1)
        {
            pelletCol++;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletCol > destinationCol+1)
        {
            pelletCol--;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletRow < destinationRow-1)
        {
            pelletRow++;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletRow > destinationRow+1)
        {
            pelletRow--;
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
    
    
    else{
        while (pelletCol < destinationCol)
        {
            pelletCol++;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletCol > destinationCol)
        {
            pelletCol--;
            warehouse[pelletRow][pelletCol] = 3;
        }
            
        while (pelletRow < destinationRow-1)
        {
            pelletRow++;
            warehouse[pelletRow][pelletCol] = 3;
        }
        while (pelletRow > destinationRow+1)
        {
            pelletRow--;
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
}",1
sben564,1696132062,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    
    int pellet_row, pellet_col, final_row, final_col;
    
    for (int i = 0; i < 10; i++) {
        
        for (int j = 0; j < 10; j++) {
            
            if (warehouse[i][j] == 1) {
                
                pellet_row = i;
                pellet_col = j;
                
            }
            
            else if (warehouse[i][j] == 2) {
                
                final_row = i;
                final_col = j;
                
            }
            
        }
        
    }
    
    while (final_col != pellet_col) {
        
        if (pellet_col < final_col) {
            
            pellet_col++;
            
        }
        
        else {
            pellet_col--;
        }
        
        warehouse[pellet_row][pellet_col] = 3;
        
    }
    
    while (final_row != pellet_row) {
        
        if (pellet_row < final_row) {
            
            pellet_row++;
            
        }
        
        else {
            
            pellet_row--;
            
        }
            
        warehouse[pellet_row][pellet_col] = 3;    
        
    }
        
}
",0
sben564,1696132205,2,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    
    int pellet_row, pellet_col, final_row, final_col;
    
    for (int i = 0; i < 10; i++) {
        
        for (int j = 0; j < 10; j++) {
            
            if (warehouse[i][j] == 1) {
                
                pellet_row = i;
                pellet_col = j;
                
            }
            
            else if (warehouse[i][j] == 2) {
                
                final_row = i;
                final_col = j;
                
            }
            
        }
        
    }
    
    while (final_col != pellet_col) {
        
        if (pellet_col < final_col) {
            
            pellet_col++;
            
        }
        
        else {
            pellet_col--;
        }
        
        if (warehouse[pellet_row][pellet_col] != 2 {
            
            warehouse[pellet_row][pellet_col] = 3;
        }
    }
    
    while (final_row != pellet_row) {
        
        if (pellet_row < final_row) {
            
            pellet_row++;
            
        }
        
        else {
            
            pellet_row--;
            
        }
            
        if (warehouse[pellet_row][pellet_col] != 2 {
            
            warehouse[pellet_row][pellet_col] = 3;
        }
        
    }
        
}

",0
sben564,1696132230,3,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    
    int pellet_row, pellet_col, final_row, final_col;
    
    for (int i = 0; i < 10; i++) {
        
        for (int j = 0; j < 10; j++) {
            
            if (warehouse[i][j] == 1) {
                
                pellet_row = i;
                pellet_col = j;
                
            }
            
            else if (warehouse[i][j] == 2) {
                
                final_row = i;
                final_col = j;
                
            }
            
        }
        
    }
    
    while (final_col != pellet_col) {
        
        if (pellet_col < final_col) {
            
            pellet_col++;
            
        }
        
        else {
            pellet_col--;
        }
        
        if (warehouse[pellet_row][pellet_col] != 2) {
            
            warehouse[pellet_row][pellet_col] = 3;
        }
    }
    
    while (final_row != pellet_row) {
        
        if (pellet_row < final_row) {
            
            pellet_row++;
            
        }
        
        else {
            
            pellet_row--;
            
        }
            
        if (warehouse[pellet_row][pellet_col] != 2) {
            
            warehouse[pellet_row][pellet_col] = 3;
        }
        
    }
        
}

",1
sbha564,1696238210,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    while (pelletCol != destCol) {
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
    }

    while (pelletRow != destRow) {
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
    }

    warehouse[destRow][destCol] = 3;
}",0
sbha564,1696239952,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    while (pelletCol != destCol) {
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
    }

    while (pelletRow != destRow) {
        warehouse[pelletRow][pelletCol] = 3; // Mark the route
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
    }

    warehouse[destRow][destCol] = 3;
}
",0
sbro373,1695784012,1,"void PelletRoute(int warehouse[10][10]) {

    int startRow, startCol, endRow, endCol;

    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
		}
	}

    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

    int below = 0;
    int above = 0;
    int right = 0;
    int left = 0;

    if (startRow < endRow) {
        below = 1;
    }
    else if (startRow > endRow) {
        above = 1;
    }

    if (endCol > startCol) {
        right = 1;
    }
    else if (endCol < startCol) {
        left = 1;
    }

    if (above == 1) {
        int distance = startRow - endRow + 1; 
        printf(""above by = %d\n"", distance);
        for (int i = 1; i < distance; i++) {
            warehouse[endRow + i][endCol] = 3;
        }
    }

    if (below == 1) {
        int distance = endRow - startRow + 1; 
        printf(""below by = %d\n"", distance);
        for (int i = 1; i < distance; i++) {
            warehouse[endRow - i][endCol] = 3;
        }   
    }

    if (right == 1) {
        int distance = endCol - startCol + 1;
        printf(""right by = %d\n"", distance);
        for (int i = 1; i < distance; i++) {
            printf(""row = %d, col = %d\n"", endRow, endCol + 1);
            warehouse[startRow][startCol + i] = 3;
        }
    }

    if (left == 1) {
        int distance = startCol - endCol + 1;
        printf(""left by = %d\n"", distance);
        for (int i = 1; distance - i != 0; i++) {
            warehouse[startRow][startCol - i] = 3;
        }
    }
    warehouse[startRow][startCol] = 1;
    warehouse[endRow][endCol] = 2;
}",0
sbro373,1695784064,2,"void PelletRoute(int warehouse[10][10]) {

    int startRow, startCol, endRow, endCol;

    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
		}
	}

    for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

    int below = 0;
    int above = 0;
    int right = 0;
    int left = 0;

    if (startRow < endRow) {
        below = 1;
    }
    else if (startRow > endRow) {
        above = 1;
    }

    if (endCol > startCol) {
        right = 1;
    }
    else if (endCol < startCol) {
        left = 1;
    }

    if (above == 1) {
        int distance = startRow - endRow + 1; 
        for (int i = 1; i < distance; i++) {
            warehouse[endRow + i][endCol] = 3;
        }
    }

    if (below == 1) {
        int distance = endRow - startRow + 1; 
        for (int i = 1; i < distance; i++) {
            warehouse[endRow - i][endCol] = 3;
        }   
    }

    if (right == 1) {
        int distance = endCol - startCol + 1;
        for (int i = 1; i < distance; i++) {
            warehouse[startRow][startCol + i] = 3;
        }
    }

    if (left == 1) {
        int distance = startCol - endCol + 1;
        for (int i = 1; distance - i != 0; i++) {
            warehouse[startRow][startCol - i] = 3;
        }
    }
    warehouse[startRow][startCol] = 1;
    warehouse[endRow][endCol] = 2;
}",1
sche525,1695639574,1,"void PelletRoute(int warehouse[10][10]){
    int rowStart, colStart, rowEnd, colEnd;
    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                rowStart = i;
                colStart = j;
            }
            if(warehouse[i][j] == 2){
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    if(colStart < colEnd){
        for(int i = colStart + 1; i <= colEnd; i++){
            warehouse[rowStart][i] = 3; 
        }
    }
    if(colStart > colEnd){
        for(int i = colEnd + 1; i <= colStart; i++){
            warehouse[rowStart][i] = 3;
        }
    }

    if(rowStart < rowEnd){
        for(int i = rowStart + 1; i < rowEnd; i++){
            warehouse[i][colEnd] = 3; 
        }
    }
    if(rowStart > rowEnd){
        for(int i = colEnd + 1; i < colStart; i++){
            warehouse[i][colEnd] = 3;
        }
    }
}",0
sche525,1695640216,2,"void PelletRoute(int warehouse[10][10]){
    int rowStart, colStart, rowEnd, colEnd;
    for(int i = 0; i < 10; i++){
        for(int j = 0; j < 10; j++){
            if(warehouse[i][j] == 1){
                rowStart = i;
                colStart = j;
            }
            if(warehouse[i][j] == 2){
                rowEnd = i;
                colEnd = j;
            }
        }
    }

    if(colStart < colEnd){
        if(rowStart == rowEnd){
            for(int i = colStart + 1; i < colEnd; i++){
                warehouse[rowStart][i] = 3; 
            }
        }
        else{
            for(int i = colStart + 1; i <= colEnd; i++){
                warehouse[rowStart][i] = 3; 
            }
        }
    }

    if(colStart > colEnd){
        if(rowStart == rowEnd){
            for(int i = colStart - 1; i > colEnd; i--){
                warehouse[rowStart][i] = 3;
            }
        }
        else{
            for(int i = colStart - 1; i >= colEnd; i--){
                warehouse[rowStart][i] = 3;
            }
        }
    }

    if(rowStart < rowEnd){
        for(int i = rowStart + 1; i < rowEnd; i++){
            warehouse[i][colEnd] = 3; 
        }
    }

    if(rowStart > rowEnd){
        for(int i = rowStart - 1; i > rowEnd; i--){
            warehouse[i][colEnd] = 3;
        }
    }
}",1
scho575,1696205880,1,"void PelletRoute(int warehouse[ROWS][COLS]) {
    int pellet_row, pellet_col;
    int dest_row, dest_col;

    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    // Horizontal movement
    while (pellet_col != dest_col) {
        if (pellet_col < dest_col)
            pellet_col++;
        else
            pellet_col--;
        warehouse[pellet_row][pellet_col] = 3;
    }

    // Vertical movement
    while (pellet_row != dest_row) {
        if (pellet_row < dest_row)
            pellet_row++;
        else
            pellet_row--;
        warehouse[pellet_row][pellet_col] = 3;
    }
}",0
scho575,1696206024,2,"void PelletRoute(int warehouse[ROWS][COLS]) {
    int pellet_row, pellet_col;
    int dest_row, dest_col;

    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    // Horizontal movement
    while (pellet_col != dest_col) {
        if (pellet_col < dest_col)
            pellet_col++;
        else
            pellet_col--;
        warehouse[pellet_row][pellet_col] = 3;
    }

    // Vertical movement
    while (pellet_row != dest_row) {
        if (pellet_row < dest_row)
            pellet_row++;
        else
            pellet_row--;
        warehouse[pellet_row][pellet_col] = 3;
    }
}

int main() {
    int warehouse[ROWS][COLS] = { 
      {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0,
",0
scho575,1696206030,3,"void PelletRoute(int warehouse[ROWS][COLS]) {
    int pellet_row, pellet_col;
    int dest_row, dest_col;

    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    // Horizontal movement
    while (pellet_col != dest_col) {
        if (pellet_col < dest_col)
            pellet_col++;
        else
            pellet_col--;
        warehouse[pellet_row][pellet_col] = 3;
    }

    // Vertical movement
    while (pellet_row != dest_row) {
        if (pellet_row < dest_row)
            pellet_row++;
        else
            pellet_row--;
        warehouse[pellet_row][pellet_col] = 3;
    }
}",0
schu718,1695955382,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int desrow;
    int descol;
    int craterow;
    int cratecol;
    
        for(int i = 0; i < 10; i++){
        
        for(int j = 0; j < 10; j++){
            
            if(warehouse[i][j] == 2){
                
                desrow = i;
                descol = j;
            }
        }
    }
    
        for(int i = 0; i < 10; i++){
        
        for(int j = 0; j < 10; j++){
            
            if(warehouse[i][j] == 1){
                
                craterow = i;
                cratecol = j;
            }
        }
    }
    
    if(descol > cratecol)
    {
        for(int j = cratecol + 1; j < descol; j++)
        {
            warehouse[craterow][j] = 3;
        }
    }
    
    if(descol < cratecol)
    {
        for(int j = cratecol - 1; j > descol; j--)
        {
            warehouse[craterow][j] = 3;
        }
    }
    
    if(desrow > craterow)
    {
        for(int i = craterow + 1; i < desrow; i++)
        {
            warehouse[i][descol] = 3;
        }
    }
    
    if(desrow < craterow)
    {
        for(int i = craterow - 1; i > desrow; i--)
        {
            warehouse[i][descol] = 3;
        }
    }
    
    if(craterow != desrow && cratecol != descol)
    {
        warehouse[craterow][descol] = 3;
    }
}
",1
sdal739,1696234722,1,"void PelletRoute(int warehouse[10][10]) {

	int i;
	int j;

	int s_rowPos;
	int s_colPos;
	int d_rowPos;
	int d_colPos;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {

			if (warehouse[i][j] == 1) {
				s_rowPos = i;
				s_colPos = j;
			}

		}
	}

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {

			if (warehouse[i][j] == 2) {
				d_rowPos = i;
				d_colPos = j;
			}

		}
	}

	if (d_colPos != s_rowPos + 1) {
		if (d_colPos > s_colPos) { // COUNT RIGHT
			for (j = s_colPos; j < d_colPos; j++) {
				warehouse[s_rowPos][j + 1] = 3;
			}
		}
	}
	if (d_colPos != s_rowPos - 1) {
		if (d_colPos < s_colPos) { // COUNT LEFT
			for (j = s_colPos; j > d_colPos; j--) {
				warehouse[s_rowPos][j - 1] = 3;
			}
		}
	}
	if ((d_rowPos != s_rowPos + 1)) {
		if (d_rowPos > s_rowPos) { // COUNT DOWN
			for (j = s_rowPos; j < d_rowPos; j++) {
				warehouse[j][d_colPos] = 3;
			}
		}
	}
	if ((d_rowPos != s_rowPos - 1)) {
		if (s_rowPos > d_rowPos) { // COUNT UP
			for (j = s_rowPos; j > d_rowPos; j--) {
				warehouse[j][d_colPos] = 3;
			}
		}
	}
}",0
sdal739,1696236332,2,"void PelletRoute(int warehouse[10][10]) {

	int i;
	int j;

	int s_rowPos;
	int s_colPos;
	int d_rowPos;
	int d_colPos;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {

			if (warehouse[i][j] == 1) {
				s_rowPos = i;
				s_colPos = j;
			}

		}
	}

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {

			if (warehouse[i][j] == 2) {
				d_rowPos = i;
				d_colPos = j;
			}

		}
	}

	if (d_colPos > s_colPos) { // COUNT RIGHT
		for (j = s_colPos + 1; j < d_colPos; j++) {
			warehouse[s_rowPos][j] = 3;
		}
	}
	if (d_colPos < s_colPos) { // COUNT LEFT
		for (j = s_colPos - 1; j > d_colPos; j--) {
			warehouse[s_rowPos][j] = 3;
		}
	}
	if (d_rowPos > s_rowPos) { // COUNT DOWN
		for (j = s_rowPos; j < d_rowPos; j++) {
			warehouse[j][d_colPos] = 3;
		}
	}
	if (s_rowPos > d_rowPos) { // COUNT UP
		for (j = s_rowPos; j > d_rowPos; j--) {
			warehouse[j][d_colPos] = 3;
		}
	}
}",0
sdal739,1696239997,3,"void PelletRoute(int warehouse[10][10]) {

	int i;
	int j;

	int s_rowPos;
	int s_colPos;
	int d_rowPos;
	int d_colPos;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {

			if (warehouse[i][j] == 1) {
				s_rowPos = i;
				s_colPos = j;
			}

		}
	}

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {

			if (warehouse[i][j] == 2) {
				d_rowPos = i;
				d_colPos = j;
			}

		}
	}

	if (d_colPos > s_colPos) { // COUNT RIGHT
		for (j = s_colPos + 1; j < d_colPos; j++) {
			warehouse[s_rowPos][j] = 3;
		}
	}
	if (d_colPos < s_colPos) { // COUNT LEFT
		for (j = s_colPos - 1; j > d_colPos; j--) {
			warehouse[s_rowPos][j] = 3;
		}
	}
	if (d_rowPos > s_rowPos) { // COUNT DOWN
		for (j = s_rowPos; j < d_rowPos; j++) {
			warehouse[j][d_colPos] = 3;
		}
	}
	if (s_rowPos > d_rowPos) { // COUNT UP
		for (j = s_rowPos; j > d_rowPos; j--) {
			warehouse[j][d_colPos] = 3;
		}
	}

	warehouse[s_rowPos][s_colPos] = 1;
	warehouse[d_rowPos][d_colPos] = 2;

}",1
sden589,1696243981,1,"void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow, pelletCol;
    int desRow, desCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } 
        }
    }
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                desRow = i;
                desCol = j;
            } 
        }
    }

    while (pelletCol != desCol) {
        if (pelletCol < desCol) {
            pelletCol++;
        } else if (pelletCol > desCol) {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != desRow) {
        if (pelletRow < desRow) {
            pelletRow++;
        } else if (pelletRow > desRow) {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
sden589,1696244184,2,"void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow, pelletCol;
    int desRow, desCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } 
        }
    }
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                desRow = i;
                desCol = j;
            } 
        }
    }

    while (pelletCol != desCol) {
        if (pelletCol < desCol) {
            pelletCol++;
        } else if (pelletCol > desCol) {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != desRow) { {
        if (pelletRow < desRow) {
            pelletRow++;
        } else if (pelletRow > desRow) {
            pelletRow--;
        }
        if (pelletRow != desRow) {
        warehouse[pelletRow][pelletCol] = 3;
        }
    }
}",0
sden589,1696244244,3,"void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow, pelletCol;
    int desRow, desCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } 
        }
    }
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                desRow = i;
                desCol = j;
            } 
        }
    }

    while (pelletCol != desCol) {
        if (pelletCol < desCol) {
            pelletCol++;
        } else if (pelletCol > desCol) {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

     while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
sden589,1696244272,4,"void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow, pelletCol;
    int desRow, desCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } 
        }
    }
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                desRow = i;
                desCol = j;
            } 
        }
    }

    while (pelletCol != desCol) {
        if (pelletCol < desCol) {
            pelletCol++;
        } else if (pelletCol > desCol) {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

     while (pelletRow != desRow) {
        if (pelletRow < desRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
sekb555,1695680206,1,"#include <stdio.h>

//Author: Shrirang Ekbote
//finds the path from the worker to the crate and replaces the 0's in the 2D array that represents the path to 3's
void PelletRoute(int warehouse[10][10])
{
    //initilises the row and column values for the worker(1) and the crate(2)
    int one_pos_r, one_pos_c, two_pos_r, two_pos_c;
    //finds the position of the 1 and the 2
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                one_pos_r = i;
                one_pos_c = j; 
            }

            if (warehouse[i][j] == 2)
            {
                two_pos_r = i;
                two_pos_c = j; 
            }
        }
    }

    //puts a 3 in the intersecting column and row for the 1 and 2
    warehouse[one_pos_r][two_pos_c] = 3;
    int three_pos_r = one_pos_r;
    int three_pos_c = two_pos_c;

    // makes all of the zeros inbetween 3 and 1 into 3
    while(three_pos_c != one_pos_c)
    {
        if (three_pos_c < one_pos_c)
        {
            three_pos_c++;
            warehouse[one_pos_r][three_pos_c] = 3;
        }
        if (three_pos_c > one_pos_c)
        {
            three_pos_c--;
            warehouse[one_pos_r][three_pos_c] = 3;
        }
        
    }

    //makes all of the zeros inbetween 3 and 2 into 3
    while(three_pos_r != two_pos_r)
    {
        if (three_pos_r < two_pos_r)
        {
            three_pos_r++;
            warehouse[three_pos_r][two_pos_c] = 3;
        }
        if (three_pos_r > two_pos_r)
        {
            three_pos_r--;
            warehouse[three_pos_r][two_pos_c] = 3;
        }
        
    }

    // makes sure that 1 and 2 are at their starting points
    warehouse[one_pos_r][one_pos_c] = 1;
    warehouse[two_pos_r][two_pos_c] = 2;

    printf(""%d %d %d %d %d %d\n"", one_pos_r, one_pos_c, two_pos_r, two_pos_c, three_pos_r, three_pos_c);
}
",0
sekb555,1695680242,2,"#include <stdio.h>

//Author: Shrirang Ekbote
//finds the path from the worker to the crate and replaces the 0's in the 2D array that represents the path to 3's
void PelletRoute(int warehouse[10][10])
{
    //initilises the row and column values for the worker(1) and the crate(2)
    int one_pos_r, one_pos_c, two_pos_r, two_pos_c;
    //finds the position of the 1 and the 2
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1)
            {
                one_pos_r = i;
                one_pos_c = j; 
            }

            if (warehouse[i][j] == 2)
            {
                two_pos_r = i;
                two_pos_c = j; 
            }
        }
    }

    //puts a 3 in the intersecting column and row for the 1 and 2
    warehouse[one_pos_r][two_pos_c] = 3;
    int three_pos_r = one_pos_r;
    int three_pos_c = two_pos_c;

    // makes all of the zeros inbetween 3 and 1 into 3
    while(three_pos_c != one_pos_c)
    {
        if (three_pos_c < one_pos_c)
        {
            three_pos_c++;
            warehouse[one_pos_r][three_pos_c] = 3;
        }
        if (three_pos_c > one_pos_c)
        {
            three_pos_c--;
            warehouse[one_pos_r][three_pos_c] = 3;
        }
        
    }

    //makes all of the zeros inbetween 3 and 2 into 3
    while(three_pos_r != two_pos_r)
    {
        if (three_pos_r < two_pos_r)
        {
            three_pos_r++;
            warehouse[three_pos_r][two_pos_c] = 3;
        }
        if (three_pos_r > two_pos_r)
        {
            three_pos_r--;
            warehouse[three_pos_r][two_pos_c] = 3;
        }
        
    }

    // makes sure that 1 and 2 are at their starting points
    warehouse[one_pos_r][one_pos_c] = 1;
    warehouse[two_pos_r][two_pos_c] = 2;
}
",1
sgal263,1696238960,1,"void PelletRoute(int warehouse[10][10]) {

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

			if (warehouse[i][j] == 1) {
				int StartRow = i;
				int StartCol = j;
			}

			if (warehouse[i][j] == 2) {
				int EndRow = i;
				int EndCol = j;
			}
		}
	}

	while (StartCol != EndCol) {
		if (StartCol < EndCol) {
			warehouse[StartRow][StartCol++] = 3;
		}
		else {
			warehouse[StartRow][StartCol--] = 3;
		}
	}
	while (StartRow != EndRow) {
		if (StartRow < EndRow) {
			warehouse[StartRow++][StartCol] = 3;
		}
		else {
			warehouse[StartRow--][StartCol] = 3;
		}
	}
	return;
}
	",0
shan333,1696233566,1,"void PelletRoute(int warehouse[10][10]) {
    int row1, col1, row2, col2;

    int i, j;
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            } else if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }    
    int rowpos = row1;
    int colpos = col1; 

    
    while (colpos != col2) {
        if (colpos < col2) {
            warehouse[rowpos][colpos] = 3;
            colpos++;
        } else {
            warehouse[rowpos][colpos] = 3;
            colpos--;
        }
    }

    while (rowpos != row2) {
        if (rowpos < row2) {
            warehouse[rowpos][colpos] = 3;
            rowpos++;
        } else {
            warehouse[rowpos][colpos] = 3;
            rowpos--;
        }
    }

    warehouse[row1][col1] = 1;
    warehouse[row2][col2] = 2;   

}",1
shan790,1695901446,1,"void PelletRoute(int warehouse[10][10]) {

	int rowStart, colStart, rowFinish, colFinish;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
			else if (warehouse[i][j] == 2) {
				rowFinish = i;
				colFinish = j;
			}
		}
	}

	for (int k = colStart + 1; k <= colFinish; k++) {
		warehouse[rowStart][k] = 3;
	}

	for (int l = rowStart + 1; l < rowFinish; l++) {
		warehouse[l][colFinish] = 3;
	}

}",0
shan790,1695902483,2,"void PelletRoute(int warehouse[10][10]) {

	int rowStart, colStart, rowFinish, colFinish;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
			else if (warehouse[i][j] == 2) {
				rowFinish = i;
				colFinish = j;
			}
		}
	}

	if (colStart < colFinish) {
		if (rowStart == rowFinish) {
			for (int k = colStart + 1; k < colFinish; k++) {
				warehouse[rowStart][k] = 3;
			}
		}
		else {
			for (int k = colStart + 1; k <= colFinish; k++) {
				warehouse[rowStart][k] = 3;
			}
		}
		
	}
	else if (colStart > colFinish) {
		if (rowStart == rowFinish) {
			for (int k = colStart - 1; k > colFinish; k--) {
				warehouse[rowStart][k] = 3;
			}
		}
		else {
			for (int k = colStart - 1; k >= colFinish; k--) {
				warehouse[rowStart][k] = 3;
			}
		}
		
	}

	
	if (rowStart < rowFinish) {
		for (int l = rowStart + 1; l < rowFinish; l++) {
			warehouse[l][colFinish] = 3;
		}
	}
	else if (rowStart > rowFinish) {
		for (int l = rowStart - 1; l > rowFinish; l--) {
			warehouse[l][colFinish] = 3;
		}
	}
	

}",1
she940,1695850050,1,"void PelletRoute(int warehouse[10][10])
{
	int i;
	int j;
	int row1;
	int col1;
	int row2;
	int col2;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
		}
	}
	//printf(""row1 %d\n"", row1);
	//printf(""col1 %d\n"", col1);

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}
		}
	}
	//printf(""row2 %d\n"", row2);
	//printf(""col2 %d\n"", col2);

	if (col1 <= col2 && row1 < row2){
		for (j = col1 + 1; j <= col2; j++) {
			warehouse[row1][j] = 3;
		}

		for (i = row1 + 1; i < row2; i++) {
			warehouse[i][col2] = 3;
		}
	}

	if (col1 <= col2 && row1 > row2) {
		for (j = col1 + 1; j <= col2; j++) {
			warehouse[row1][j] = 3;
		}

		for (i = row1 - 1; i > row2; i--) {
			warehouse[i][col2] = 3;
		}
	}


	if (col1 > col2 && row1 < row2)  {
		for (j = col1 - 1; j >= col2; j--) {
			warehouse[row1][j] = 3;
		}

		for (i = row1 + 1; i < row2; i++) {
			warehouse[i][col2] = 3;
		}
	}

	if (col1 > col2 && row1 > row2) {
		for (j = col1 - 1; j >= col2; j--) {
			warehouse[row1][j] = 3;
		}

		for (i = row1 - 1; i > row2; i--) {
			warehouse[i][col2] = 3;
		}
	}

	if (row1 == row2 && col1 > col2) {
		for (j = col1 - 1; j > col2; j--) {
			warehouse[row1][j] = 3;
		}

		
	}

	if (row1 == row2 && col1 < col2) {
		for (j = col1 + 1; j < col2; j++) {
			warehouse[row1][j] = 3;
		}
	}

	
}",1
shsa718,1696047143,1,"void PelletRoute(int warehouse[10][10]){

    //Find the position of the worker and the destination
    int i,j,row_worker=-1,col_worker=-1;
    int row_final=-1, col_final=-1;

    for(i=0;i<10;i++){
        for (j=0;j<10;j++){

            // record worker location
            if(warehouse[i][j]==1){
                row_worker = i;
                col_worker = j;
            }

            // record destination location
            if(warehouse[i][j]==2){
                row_final = i;
                col_final = j;
            }

            if (col_worker>-1&&col_final>-1){
                break;
            }  
        }
           
        if (col_worker>-1&&col_final>-1){
                break;
        }
    }

    // Pre-determine directions of movement
    int vert=0;// 0: no vertical movement, 1: up, 2:down
    int horiz=0; // 0: no horiz movement, 1: left, 2:right

    if (row_worker>row_final){
        vert = 1; //up
    }
    else if (row_worker<row_final){
        vert = 2; //down
    }

    if (col_worker>col_final){
        horiz = 1; //left
    }
    else if(col_worker<col_final){
        horiz = 2; //right
    }

    //Move horizontally if needed
    if (horiz==1){ // move left
        for(j=(col_worker-1);j>=col_final;j--){
            warehouse[row_worker][j] = 3;
        }
    }
    else if (horiz==2){ // move right
        for(j=(col_worker+1);j<=col_final;j++){
            if (warehouse[row_worker][j]==2){
                break;
            }
            warehouse[row_worker][j] = 3;
    }
    }

    //Move vertically if needed
    if (vert==1){ // move up
        for(i=row_worker-1;i>row_final;i--){
            warehouse[i][col_final] = 3;
        }
    }

    else if (vert==2){ // move down
        for(i=row_worker+1;i<row_final;i++){
            warehouse[i][col_final] = 3;
        }
    }
}",0
shsa718,1696047409,2,"void PelletRoute(int warehouse[10][10]){

    //Find the position of the worker and the destination
    int i,j,row_worker=-1,col_worker=-1;
    int row_final=-1, col_final=-1;

    for(i=0;i<10;i++){
        for (j=0;j<10;j++){

            // record worker location
            if(warehouse[i][j]==1){
                row_worker = i;
                col_worker = j;
            }

            // record destination location
            if(warehouse[i][j]==2){
                row_final = i;
                col_final = j;
            }

            if (col_worker>-1&&col_final>-1){
                break;
            }  
        }
           
        if (col_worker>-1&&col_final>-1){
                break;
        }
    }

    // Pre-determine directions of movement
    int vert=0;// 0: no vertical movement, 1: up, 2:down
    int horiz=0; // 0: no horiz movement, 1: left, 2:right

    if (row_worker>row_final){
        vert = 1; //up
    }
    else if (row_worker<row_final){
        vert = 2; //down
    }

    if (col_worker>col_final){
        horiz = 1; //left
    }
    else if(col_worker<col_final){
        horiz = 2; //right
    }

    //Move horizontally if needed
    if (horiz==1){ // move left
        for(j=(col_worker-1);j>=col_final;j--){
            if (warehouse[row_worker][j]==2){
                break;
            }
            warehouse[row_worker][j] = 3;
        }
    }
    else if (horiz==2){ // move right
        for(j=(col_worker+1);j<=col_final;j++){
            if (warehouse[row_worker][j]==2){
                break;
            }
            warehouse[row_worker][j] = 3;
    }
    }

    //Move vertically if needed
    if (vert==1){ // move up
        for(i=row_worker-1;i>row_final;i--){
            warehouse[i][col_final] = 3;
        }
    }

    else if (vert==2){ // move down
        for(i=row_worker+1;i<row_final;i++){
            warehouse[i][col_final] = 3;
        }
    }
}",1
shua365,1695702446,1,"void PelletRoute(int warehouse[10][10])
{
    int row1, row2, col1, col2, row_step=0, col_step=0, i, j;
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                row1 = i;
                col1 = j;
            }else if (warehouse[i][j] == 2){
                row2 = i;
                col2 = j;
            }
        }
    }

    if (col2>col1){
        col_step=1;
    } else if(col2<col1){
        col_step=-1;
    }

    if (row2>row1){
        row_step=1;
    } else if(row2<row1){
        row_step=-1;
    }

    for (i=col1+col_step;i!=col2;i=i+col_step){
        warehouse[row1][i]=3;
    }
    if (row1!=row2){
        warehouse[row1][i]=3;
    }
    for (j=row1+row_step;j!=row2;j=j+row_step){
        warehouse[j][i]=3;
    }
    warehouse[row1][col1]=1;
    warehouse[row2][col2]=2;

}",1
sjaf029,1696234692,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {

	int startRow;
	int startCol;
	int endRow;
	int endCol;
	int i;
	int j;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
			else if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

	while (startCol != endCol) {
		if (startCol < endCol) {
			startCol++;
		} else {
			startCol--;
		}
		warehouse[startRow][startCol] = 3;
	}

	while (startRow != endRow) {
		if (startRow < endRow) {
			startRow++;
		} else {
			startRow--;
		}
		warehouse[startRow][startCol] = 3;
	}

	warehouse[endRow][endCol] = 2;
}",1
sjai563,1696044152,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int startRow, startCol ;
    int finishRow, finishCol ;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startRow = i ;
                startCol = j ;
            }
            if (warehouse[i][j] == 2) {
                finishRow = i ;
                finishCol = j ;
            }
        }
    }

    while (startCol != finishCol) {
        if (startCol < finishCol) {
            startCol++ ;
            warehouse[startRow][startCol] = 3 ;
            warehouse[finishRow][finishCol] = 2 ;
        } else {
            startCol-- ;
            warehouse[startRow][startCol] = 3 ;
            warehouse[finishRow][finishCol] = 2 ;
        }
    }

    while (startRow != finishRow) {
        if (startRow < finishRow) {
            startRow++ ;
            warehouse[startRow][startCol] = 3 ;
            warehouse[finishRow][finishCol] = 2 ;
        } else {
            startRow-- ;
            warehouse[startRow][startCol] = 3 ;
            warehouse[finishRow][finishCol] = 2 ;
        }

    }
}",1
sjob296,1696227511,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    for (int j = pelletCol; j != destCol; j += (pelletCol < destCol) ? 1 : -1) {
        warehouse[pelletRow][j] = 3;
    }

    for (int i = pelletRow; i != destRow; i += (pelletRow < destRow) ? 1 : -1) {
        warehouse[i][destCol] = 3;
    }
}

",0
sjob296,1696227632,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    for (int j = pelletCol; j != destCol; j += (pelletCol < destCol) ? 1 : -1) {
        warehouse[pelletRow][j] = 3;
    }

    for (int i = pelletRow; i != destRow; i += (pelletRow < destRow) ? 1 : -1) {
        warehouse[i][destCol] = 3;
    }

    warehouse[pelletRow][pelletCol] = 3;
}

",0
sjob296,1696229729,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow, pelletCol, destRow, destCol;
    
    for (int i = 0; i < 10; ++i) 
    {
        for (int j = 0; j < 10; ++j) 
        {
            if (warehouse[i][j] == 1) 
            {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) 
            {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) 
    {
        if (pelletCol < destCol) 
        {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow) 
    {
        if (pelletRow < destRow) 
        {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}

void printWarehouse(int warehouse[10][10]) 
{
    for (int i = 0; i < 10; ++i) 
    {
        for (int j = 0; j < 10; ++j) 
        {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }
}",0
skea516,1695847040,1,"void PelletRoute(int warehouse[10][10])
{
    int i;
    int j;
    int pelletrow, pelletcol;
    int destinationrow, destinationcol; 
    // find position of pellet and destination
    for (i = 0; i < 10; i++) {
	    for(j=0; j < 10; j++) {
	        if (warehouse[i][j] == 1) {
	            pelletrow = i;
	            pelletcol = j;
	        } if (warehouse[i][j] == 2) {
	            destinationrow = i;
	            destinationcol = j;
	        }
	    }
    }
	// create path of 3s 
	 
   // for pelletrow to destination row in column destinationcol
	  
   if (pelletrow < destinationrow) {          // whether go right or left 
       for (i = pelletrow; i < destinationrow; i++) {
           warehouse[i][destinationcol] = 3;
       }} else {
           for (i = pelletrow; i > destinationrow; i--) {
               warehouse[i][destinationcol] = 3; }
       }
   
   // for pelletcol to destination col in row pelletrow 
   
   if (pelletcol < destinationcol) {
       for (j = pelletcol+1; j < destinationcol; j++) {
           warehouse[pelletrow][j] = 3;
       } } else {
           for (j = pelletcol-1; j < destinationcol; j--) {
               warehouse[pelletrow][j] = 3; }
       }
}",0
skea516,1695847501,2,"void PelletRoute(int warehouse[10][10])
{
    int i;
    int j;
    int pelletrow, pelletcol;
    int destinationrow, destinationcol; 
    // find position of pellet and destination
    for (i = 0; i < 10; i++) {
	    for(j=0; j < 10; j++) {
	        if (warehouse[i][j] == 1) {
	            pelletrow = i;
	            pelletcol = j;
	        } if (warehouse[i][j] == 2) {
	            destinationrow = i;
	            destinationcol = j;
	        }
	    }
    }
	// create path of 3s 
	 
   // for pelletrow to destination row in column destinationcol
	  
   if (pelletrow < destinationrow) {          // whether go right or left 
       for (i = pelletrow; i < destinationrow; i++) {
           warehouse[i][destinationcol] = 3;
       }} else {
           for (i = pelletrow; i > destinationrow; i--) {
               warehouse[i][destinationcol] = 3; }
       }
   
   // for pelletcol to destination col in row pelletrow 
   
   if (pelletcol < destinationcol) {
       for (j = pelletcol+1; j < destinationcol; j++) {
           warehouse[pelletrow][j] = 3;
       } } else { for (j = destinationcol+1; j < pelletcol; j++) {
               warehouse[pelletrow][j] = 3; }
       }
}",0
skea516,1695848280,3,"void PelletRoute(int warehouse[10][10])
{
    int i;
    int j;
    int pelletrow, pelletcol;
    int destinationrow, destinationcol; 
    // find position of pellet and destination
    for (i = 0; i < 10; i++) {
	    for(j=0; j < 10; j++) {
	        if (warehouse[i][j] == 1) {
	            pelletrow = i;
	            pelletcol = j;
	        } if (warehouse[i][j] == 2) {
	            destinationrow = i;
	            destinationcol = j;
	        }
	    }
    }
	// create path of 3s 
	 
   // for pelletrow to destination row in column destinationcol
	  
   if (pelletrow < destinationrow) {          // whether go right or left 
       for (i = pelletrow+1; i < destinationrow; i++) {
           warehouse[i][destinationcol] = 3;
       }} else {
           for (i = pelletrow-1; i > destinationrow; i--) {
               warehouse[i][destinationcol] = 3; }
       }
   
   // for pelletcol to destination col in row pelletrow 
   
   if (pelletcol < destinationcol) {
       for (j = pelletcol+1; j < destinationcol; j++) {
           warehouse[pelletrow][j] = 3;
       } } else { for (j = destinationcol+1; j < pelletcol; j++) {
               warehouse[pelletrow][j] = 3; }
       }
    if (pelletrow == destinationrow || pelletcol == destinationcol)  { 
    } else {
        warehouse[pelletrow][destinationcol] = 3;   
    }
   
}",1
skop291,1696136047,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX, pelletY, destX, destY;

    // Find the coordinates of the pellet (1) and the destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletX = j;
                pelletY = i;
            }
            if (warehouse[i][j] == 2) {
                destX = j;
                destY = i;
            }
        }
    }

    // Move horizontally until lined up with the destination
    while (pelletX != destX) {
        if (pelletX < destX) {
            warehouse[pelletY][pelletX] = 3;
            pelletX++;
        } else {
            warehouse[pelletY][pelletX] = 3;
            pelletX--;
        }
    }

    // Move vertically until the destination is reached
    while (pelletY != destY) {
        warehouse[pelletY][pelletX] = 3;
        if (pelletY < destY) {
            pelletY++;
        } else {
            pelletY--;
        }
    }
}
",0
skop291,1696136264,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX = -1, pelletY = -1, destinationX = -1, destinationY = -1;
    
    // Find pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletY = i;
                pelletX = j;
            } else if (warehouse[i][j] == 2) {
                destinationY = i;
                destinationX = j;
            }
        }
    }
    
    // Move the pellet horizontally until it lines up with the destination
    if (pelletX < destinationX) {
        for (int x = pelletX + 1; x < destinationX; x++) {
            warehouse[pelletY][x] = 3;
        }
    } else {
        for (int x = pelletX - 1; x > destinationX; x--) {
            warehouse[pelletY][x] = 3;
        }
    }
    
    // Move the pellet vertically until it reaches the destination
    if (pelletY < destinationY) {
        for (int y = pelletY; y < destinationY; y++) {
            warehouse[y][destinationX] = 3;
        }
    } else {
        for (int y = pelletY; y > destinationY; y--) {
            warehouse[y][destinationX] = 3;
        }
    }
}",0
skop291,1696136468,3,"void PelletRoute(int warehouse[10][10]) {
    int pelletX = -1, pelletY = -1, destinationX = -1, destinationY = -1;
    
    // Find pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletY = i;
                pelletX = j;
            } else if (warehouse[i][j] == 2) {
                destinationY = i;
                destinationX = j;
            }
        }
    }
    
    // Move the pellet vertically until it reaches the destination
    if (pelletY < destinationY) {
        for (int y = pelletY + 1; y < destinationY; y++) {
            warehouse[y][pelletX] = 3;
        }
    } else {
        for (int y = pelletY - 1; y > destinationY; y--) {
            warehouse[y][pelletX] = 3;
        }
    }
}",0
skop291,1696136555,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX = -1, pelletY = -1, destinationX = -1, destinationY = -1;
    
    // Find pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletY = i;
                pelletX = j;
            } else if (warehouse[i][j] == 2) {
                destinationY = i;
                destinationX = j;
            }
        }
    }
    
    // Move the pellet horizontally until it lines up with the destination
    if (pelletX < destinationX) {
        for (int x = pelletX + 1; x < destinationX; x++) {
            warehouse[pelletY][x] = 3;
        }
    } else {
        for (int x = pelletX - 1; x > destinationX; x--) {
            warehouse[pelletY][x] = 3;
        }
    }
    
    // Move the pellet vertically until it reaches the destination
    if (pelletY < destinationY) {
        for (int y = pelletY; y < destinationY; y++) {
            warehouse[y][destinationX] = 3;
        }
    } else {
        for (int y = pelletY; y > destinationY; y--) {
            warehouse[y][destinationX] = 3;
        }
    }
}",0
skul970,1695772419,1,"#include <stdio.h>

void PelletRoute(int layout[NUM_ROWS][NUM_COLS]) {
    int rowPos_start, rowPos_end, colPos_start, colPos_end = -1;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (layout[i][j] == 1) {
                rowPos_start = i;
                colPos_start = j;
                
            } else if (layout[i][j] == 2) {
                rowPos_end = i;
                colPos_end = j;
            }
        }
    }    
    
    if (rowPos_end > rowPos_start && colPos_end > colPos_start) {
        
        for (int col_count = colPos_start; col_count <= colPos_end; col_count++) {
            layout[rowPos_start][col_count] = 3;
        }
        for (int row_count = rowPos_start; row_count <= rowPos_end; row_count++) {
            layout[row_count][colPos_end] = 3;
        }    
    } else if (rowPos_end < rowPos_start && colPos_end < colPos_start) {
        
        for (int col_count = colPos_start; col_count <= colPos_end; col_count--) {
            layout[rowPos_start][col_count] = 3;
        }
        for (int row_count = rowPos_end; row_count >= rowPos_start; row_count--) {
            layout[row_count][colPos_end] = 3;
        }
    } else if (rowPos_end < rowPos_start) {
        if (colPos_end > colPos_start) {
            for (int col_count = colPos_start; col_count <= colPos_end; col_count++ ) {
                layout[rowPos_start][col_count] = 3;
            }    
            for (int row_count = rowPos_start; row_count <= rowPos_end; row_count--) {
                layout[row_count][colPos_end] = 3;               
        }

        }
    } else if (colPos_end < colPos_start) {
        if (rowPos_end > rowPos_start) {
            
            for (int col_count = colPos_end; col_count >=colPos_start; col_count--) {
                layout[rowPos_start][col_count] = 3;
            }    
            for (int row_count = rowPos_start; row_count <= rowPos_end; row_count++) {
                layout[row_count][colPos_end] = 3;
            }
        }
    }
    
    layout[rowPos_start][colPos_start] = 1;
    layout[rowPos_end][colPos_end] = 2;
            
}",0
skul970,1695778443,2,"#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int layout[NUM_ROWS][NUM_COLS]) {
    int rowPos_start, rowPos_end, colPos_start, colPos_end = -1;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (layout[i][j] == 1) {
                rowPos_start = i;
                colPos_start = j;
                
            } else if (layout[i][j] == 2) {
                rowPos_end = i;
                colPos_end = j;
            }
        }
    }    
    
    if (rowPos_end >= rowPos_start && colPos_end >= colPos_start) {
        
        for (int col_count = colPos_start; col_count <= colPos_end; col_count++) {
            layout[rowPos_start][col_count] = 3;
        }
        for (int row_count = rowPos_start; row_count <= rowPos_end; row_count++) {
            layout[row_count][colPos_end] = 3;
        }    
    } else if (rowPos_end <= rowPos_start && colPos_end < colPos_start) {
        
        for (int col_count = colPos_start; col_count <= colPos_end; col_count--) {
            layout[rowPos_start][col_count] = 3;
        }
        for (int row_count = rowPos_end; row_count >= rowPos_start; row_count--) {
            layout[row_count][colPos_end] = 3;
        }
    } else if (rowPos_end <= rowPos_start) {
        if (colPos_end >= colPos_start) {
            for (int col_count = colPos_start; col_count <= colPos_end; col_count++ ) {
                layout[rowPos_start][col_count] = 3;
            }    
            for (int row_count = rowPos_start; row_count <= rowPos_end; row_count--) {
                layout[row_count][colPos_end] = 3;               
        }

        }
    } else if (colPos_end <= colPos_start) {
        if (rowPos_end >= rowPos_start) {
            
            for (int col_count = colPos_start; col_count >=colPos_end; col_count--) {
                layout[rowPos_start][col_count] = 3;
            }    
            for (int row_count = rowPos_start; row_count <= rowPos_end; row_count++) {
                layout[row_count][colPos_end] = 3;
            }
        }
    }
    
    layout[rowPos_start][colPos_start] = 1;
    layout[rowPos_end][colPos_end] = 2;
            
}",0
skul970,1695782678,3,"#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int layout[NUM_ROWS][NUM_COLS]) {
    int rowPos_start, rowPos_end, colPos_start, colPos_end = -1;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (layout[i][j] == 1) {
                rowPos_start = i;
                colPos_start = j;
                
            } else if (layout[i][j] == 2) {
                rowPos_end = i;
                colPos_end = j;
            }
        }
    }    
    
    if (rowPos_end >= rowPos_start && colPos_end >= colPos_start) {
        
        for (int col_count = colPos_start; col_count <= colPos_end; col_count++) {
            layout[rowPos_start][col_count] = 3;
        }
        for (int row_count = rowPos_start; row_count <= rowPos_end; row_count++) {
            layout[row_count][colPos_end] = 3;
        }    
    } else if (rowPos_end <= rowPos_start && colPos_end <= colPos_start) {
        
        for (int col_count = colPos_start; col_count >= colPos_end; col_count--) {
            layout[rowPos_start][col_count] = 3;
        }
        for (int row_count = rowPos_start; row_count >= rowPos_end; row_count--) {
            layout[row_count][colPos_end] = 3;
        }
    } else if (rowPos_end <= rowPos_start) {
        if (colPos_end >= colPos_start) {
            for (int col_count = colPos_start; col_count <= colPos_end; col_count++ ) {
                layout[rowPos_start][col_count] = 3;
            }    
            for (int row_count = rowPos_start; row_count <= rowPos_end; row_count--) {
                layout[row_count][colPos_end] = 3;               
        }

        }
    } else if (colPos_end <= colPos_start) {
        if (rowPos_end >= rowPos_start) {
            
            for (int col_count = colPos_start; col_count >=colPos_end; col_count--) {
                layout[rowPos_start][col_count] = 3;
            }    
            for (int row_count = rowPos_start; row_count <= rowPos_end; row_count++) {
                layout[row_count][colPos_end] = 3;
            }
        }
    }
    
    layout[rowPos_start][colPos_start] = 1;
    layout[rowPos_end][colPos_end] = 2;
            
}",0
skul970,1695782876,4,"#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int layout[NUM_ROWS][NUM_COLS]) {
    int rowPos_start, rowPos_end, colPos_start, colPos_end = -1;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (layout[i][j] == 1) {
                rowPos_start = i;
                colPos_start = j;
                
            } else if (layout[i][j] == 2) {
                rowPos_end = i;
                colPos_end = j;
            }
        }
    }    
    
    if (rowPos_end >= rowPos_start && colPos_end >= colPos_start) {
        
        for (int col_count = colPos_start; col_count <= colPos_end; col_count++) {
            layout[rowPos_start][col_count] = 3;
        }
        for (int row_count = rowPos_start; row_count <= rowPos_end; row_count++) {
            layout[row_count][colPos_end] = 3;
        }    
    } else if (rowPos_end <= rowPos_start && colPos_end <= colPos_start) {
        
        for (int col_count = colPos_start; col_count >= colPos_end; col_count--) {
            layout[rowPos_start][col_count] = 3;
        }
        for (int row_count = rowPos_start; row_count >= rowPos_end; row_count--) {
            layout[row_count][colPos_end] = 3;
        }
    } else if (rowPos_end <= rowPos_start) {
        if (colPos_end >= colPos_start) {
            for (int col_count = colPos_start; col_count <= colPos_end; col_count++ ) {
                layout[rowPos_start][col_count] = 3;
            }    
            for (int row_count = rowPos_start; row_count >= rowPos_end; row_count--) {
                layout[row_count][colPos_end] = 3;               
        }

        }
    } else if (colPos_end <= colPos_start) {
        if (rowPos_end >= rowPos_start) {
            
            for (int col_count = colPos_start; col_count >=colPos_end; col_count--) {
                layout[rowPos_start][col_count] = 3;
            }    
            for (int row_count = rowPos_start; row_count <= rowPos_end; row_count++) {
                layout[row_count][colPos_end] = 3;
            }
        }
    }
    
    layout[rowPos_start][colPos_start] = 1;
    layout[rowPos_end][colPos_end] = 2;
            
}",1
slam669,1695875044,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i,j,startRow, startCol;
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1){
                startRow = i;
                startCol = j;
            }
            
        }
    }
    
    int a,b,endRow,endCol;
    for (a = 0; a < 10; a++){
        for (b = 0; b < 10; b++) {
            if (warehouse[a][b] == 2){
                endRow = a;
                endCol = b;
            }
            
        }
    }
    if (startRow<endRow && startCol< endCol){    //If 1 is left and above 2
        int route;
        route = 3; 
        for (j = startCol+1; j <= endCol; j++) {
            warehouse[startRow][j] = route;
        }
    
        for (i = startRow+1; i < endRow; i++) {
            warehouse[i][endCol] = route;
        }
    }
    
    else if (startRow == endRow && startCol < endCol){    //If 1 is left of 2
        int route;
        route = 3; 
        for (j = startCol+1; j < endCol; j++) {
            warehouse[startRow][j] = route;
        }
    
    }
    
    else if (startRow > endRow && startCol < endCol){   //If 1 is left and below 2
        int route;
        route = 3; 
        
        for (j = startCol+1; j <= endCol; j++) {
            warehouse[startRow][j] = route;
        }
    
        for (i = startRow-1; i > endRow; i--) {
            warehouse[i][endCol] = route;
        }
    
    }
    
    else if (startRow > endRow && startCol == endCol){   //If 1 is below 2
        int route;
        route = 3; 
    
        for (i = startRow-1; i > endRow; i--) {
            warehouse[i][endCol] = route;
        }
    
    }
    
    else if (startRow > endRow && startCol > endCol){   //If 1 is below and right of 2
        int route;
        route = 3; 
        
        for (j = startCol-1; j >= endCol; j--) {
            warehouse[startRow][j] = route;
        }
        
        for (i = startRow-1; i > endRow; i--) {
            warehouse[i][endCol] = route;
        }
    
    }
    
    else if (startRow == endRow && startCol > endCol){   //If 1 is right of 2
        int route;
        route = 3; 
        for (j = startCol-1; j > endCol; j--) {
            warehouse[startRow][j] = route;
        }
    
    }
    
    else if (startRow < endRow && startCol > endCol){   //If 1 is right and above 2
        int route;
        route = 3; 
        
        for (j = startCol-1; j >= endCol; j--) {
            warehouse[startRow][j] = route;
        }
        
        for (i = startRow+1; i < endRow; i++) {
            warehouse[i][endCol] = route;
        }
    
    }
    
    else if (startRow < endRow && startCol == endCol) {   //If 1 is above 2
        int route;
        route = 3; 
        
        for (i = startRow+1; i < endRow; i++) {
            warehouse[i][endCol] = route;
        }
    
    }
    

}",1
smac708,1696236888,1,"#include <stdio.h>

void FindTile(int board[10][10], int tile, int *rowPos, int *colPos)
{ 
	int i; 
	int j; 
	for (i=0; i < 10; i++){
		for (j=0; j < 10; j++) {
			if (board[i][j] == tile) { 
				*rowPos = i; 
				*colPos = j;
			}
		}
	}
} 

void PelletRoute(int warehouse[10][10])
{ 
    int row; 
	int col; 
    int move_col; 
    int move_row; 
    int move; 

	// find the spot that is wanting to be moved from 
	FindTile(warehouse, 1, &row, &col);

    // Find where moving to 
    FindTile(warehouse, 2, &move_row, &move_col);

    int i; 

	// compare if the tile is able to be moved
	
	// Check if it can go right 
    // if col is less than 8 can move across until reaches the same value as the number of cols as to where to move 
	if (col < 8) {
        for (i = col; col < move_col; col++) { 
        warehouse[row][col] = 3;
		} 
	} 

	// check if it can go left 
    // if col is greater than 0 
	if (col > 0) {
        for (i = col; col < move_col; col--) {
        warehouse[row][col] = 3;
         } 
	} 

    // check if it can go down  
	if (row < 8) {
		for (i = row; row < move_row; row++) {
        warehouse[row][col] = 3;
		} 
	} 

	// check if it can go up 
	if (row > 0) {
		for (i = row; row < move_row; row--) {
        warehouse[row][col] = 3;
        } 
    }

	}

",0
smac708,1696237577,2,"#include <stdio.h>

// void FindTile(int board[10][10], int tile, int *rowPos, int *colPos)


void PelletRoute(int warehouse[10][10])
{ 
    int row; 
	int col; 
    int move_col; 
    int move_row; 
    int move; 

	// find the spot that is wanting to be moved from 
	// FindTile(warehouse, 1, &row, &col);
    { 
	int i; 
	int j; 
	for (i=0; i < 10; i++){
		for (j=0; j < 10; j++) {
			if (warehouse[i][j] == 1) { 
				row = i; 
				col = j;
			}
		}
	}
} 

    // Find where moving to 
    //(warehouse, 2, &move_row, &move_col);

    { 
	int i; 
	int j; 
	for (i=0; i < 10; i++){
		for (j=0; j < 10; j++) {
			if (warehouse[i][j] == 2) { 
				move_row = i; 
				move_col = j;
			}
		}
	}
} 

    int i; 

	// compare if the tile is able to be moved
	warehouse[row][col] = 1; 
	
	// Check if it can go right 
    // if col is less than 8 can move across until reaches the same value as the number of cols as to where to move 
	if (col < 8) {
        for (i = col; col < move_col; col++) { 
        warehouse[row][col+1] = 3;
		} 
	} 

	// check if it can go left 
    // if col is greater than 0 
	if (col > 0) {
        for (i = col-1; col < move_col; col--) {
        warehouse[row][col-1 ] = 3;
         } 
	} 

    // check if it can go down  
	if (row < 8) {
		for (i = row+1; row < move_row; row++) {
        warehouse[row][col] = 3;
		} 
	} 

	// check if it can go up 
	if (row > 0) {
		for (i = row; row < move_row; row--) {
        warehouse[row-1][col] = 3;
        } 
    }


	}
	",0
smac708,1696237756,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{ 
    int row; 
	int col; 
    int move_col; 
    int move_row; 
    int move; 

	// find the spot that is wanting to be moved from 
	
	int i; 
	int j; 
	for (i=0; i < 10; i++){
		for (j=0; j < 10; j++) {
			if (warehouse[i][j] == 1) { 
				row = i; 
				col = j;
			}
		}
	}
 

    // Find where moving to 
    
	int i; 
	int j; 
	for (i=0; i < 10; i++){
		for (j=0; j < 10; j++) {
			if (warehouse[i][j] == 2) { 
				move_row = i; 
				move_col = j;
			}
		}
	} 


    int i; 

	// compare if the tile is able to be moved
	
	// Check if it can go right 
    // if col is less than 8 can move across until reaches the same value as the number of cols as to where to move 
	if (col < 8) {
        for (i = col; col < move_col; col++) { 
        warehouse[row][col+1] = 3;
		} 
	} 

	// check if it can go left 
    // if col is greater than 0 
	if (col > 0) {
        for (i = col-1; col < move_col; col--) {
        warehouse[row][col-1 ] = 3;
         } 
	} 

    // check if it can go down  
	if (row < 8) {
		for (i = row+1; row < move_row; row++) {
        warehouse[row][col] = 3;
		} 
	} 

	// check if it can go up 
	if (row > 0) {
		for (i = row; row < move_row; row--) {
        warehouse[row-1][col] = 3;
        } 
    }


	}
	",0
sman821,1696125714,1,"void PelletRoute(int warehouse[10][10]) {

    int i, j, start_row, start_col, dest_row, dest_col;
    //Find start and dest
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                start_row = i;
                start_col = j;
            }

            if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    //Define path
    if (start_col < dest_col) {
        for (j = start_col+1; j <= dest_col; j++) {
        warehouse[start_row][j] = 3;
    }
    } else if (start_col > dest_col) {
        for (j = dest_col; j < start_col; j++) {
        warehouse[start_row][j] = 3;
    }
    }
    

    if (start_row < dest_row) {
        for (i = start_row; i < dest_row; i++) {
        warehouse[i][dest_col] = 3;
    }
    } else if (start_row > dest_row) {
        for (i = dest_row+1; i <= start_row; i++) {
        warehouse[i][dest_col] = 3;
    }
    }
    

}",0
sman821,1696126166,2,"void PelletRoute(int warehouse[10][10]) {

    int i, j, start_row, start_col, dest_row, dest_col;
    //Find start and dest
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                start_row = i;
                start_col = j;
            }

            if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    //Define path
    if (start_col < dest_col) {
        for (j = start_col+1; j <= dest_col; j++) {
            if (warehouse[start_row][j] == 0) {
                warehouse[start_row][j] = 3;
            }
        
    }
    } else if (start_col > dest_col) {
        for (j = dest_col; j < start_col; j++) {
            if (warehouse[start_row][j] ==0) {
                warehouse[start_row][j] = 3;
            }
        } 
    }
    
    

    if (start_row < dest_row) {
        for (i = start_row; i < dest_row; i++) {
            if (warehouse[i][dest_col] == 0) {
                warehouse[i][dest_col] = 3;
            }  
        }
    } else if (start_row > dest_row) {
        for (i = dest_row+1; i <= start_row; i++) {
            if (warehouse[i][dest_col] == 0) {
                warehouse[i][dest_col] = 3;
            }
        }
    }
}",1
smou122,1695783707,1,"void PelletRoute(int warehouse[10][10]){
    int row, column;
    int start_row, start_column;
    int finish_row, finish_column;
    for (row = 0; row < 10; row++){
        for (column = 0; column < 10; column++){
            if (warehouse[row][column] == 1){
                start_row = row;
                start_column = column;
                }
            }
        }
    for (row = 0; row < 10; row++){
        for (column = 0; column < 10; column++){
            if (warehouse[row][column] == 2){
                finish_row = row;
                finish_column = column;
                }
            }
        }
    
    if (finish_column > start_column){
        while (finish_column != start_column){
            start_column ++;
            warehouse[start_row][start_column] = 3;
        }
    }
    else if (finish_column < start_column){
        while (finish_column != start_column){
            start_column --;
            warehouse[start_row][start_column] = 3;
        }
    }
    if (finish_row > start_row){
        while (finish_row != start_row){
            start_row ++;
            warehouse[start_row][start_column] = 3;
        }
    }
    else if (finish_row < start_row){
        while (finish_row != start_row){
            start_row --;
            warehouse[start_row][start_column] = 3;
        }
    }
    warehouse[start_row][start_column] = 2;
}",1
span558,1695621915,1,"void PelletRoute(int warehouse[ROWS][COLS]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLS; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow) {
        if (pelletRow < destRow ) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    warehouse[destRow][destCol] = 2;
}",0
span558,1695622213,2,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    while (pelletRow != destRow) {
        if (pelletRow < destRow ) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    warehouse[destRow][destCol] = 2;
}",1
spar473,1695987654,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;
    int i, j;
    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    while (col1 != col2) {
        if (col1 < col2) {
            col1++;
        }    else {
            col1--;
        }
        warehouse[row1][col1] = 3;
    }
    while (row1 != row2) {
        if (row1 < row2) {
            row1++;
        }    else {
            row1--;
        }
        warehouse[row1][col1] = 3;
    }
    warehouse[row2][col2] = 2;
}
",0
spar473,1695987711,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;

    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    while (col1 != col2) {
        if (col1 < col2) {
            col1++;
        }    else {
            col1--;
        }
        warehouse[row1][col1] = 3;
    }
    while (row1 != row2) {
        if (row1 < row2) {
            row1++;
        }    else {
            row1--;
        }
        warehouse[row1][col1] = 3;
    }
    warehouse[row2][col2] = 2;
}
",1
ssco465,1695889459,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pRow, pCol, lRow, lCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            }
            else if (warehouse[i][j] == 2) {
                lRow = i;
                lCol = j;
            }
        }
    }

    while (pCol != lCol) {
        if (pCol < lCol) {
            pCol++;
        }
        else {
            pCol--;
        }
        warehouse[pRow][pCol] = 3;
    }

    while (pRow != lRow) {
        if (pRow < lRow) {
            pRow++;
        }
        else {
            pRow--;
        }
        warehouse[pRow][pCol] = 3;
    }
}",0
ssco465,1695889839,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pRow, pCol, lRow, lCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pRow = i;
                pCol = j;
            }
            else if (warehouse[i][j] == 2) {
                lRow = i;
                lCol = j;
            }
        }
    }

    while (pCol != lCol) {
        if (pCol < lCol) {
            pCol++;
        }
        else {
            pCol--;
        }
        
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3;
        }
    }

    while (pRow != lRow) {
        if (pRow < lRow) {
            pRow++;
        }
        else {
            pRow--;
        }
       
        if (warehouse[pRow][pCol] != 2) {
            warehouse[pRow][pCol] = 3;
        }
    }
}
",1
ssey266,1696227457,1,"#include <stdio.h>

 void
PelletRoute (int warehouse[10][10])
{
  
int pelletRow, pelletCol, destRow, destCol;
  
 
for (int row = 0; row < 10; row++)
    {
      
for (int col = 0; col < 10; col++)
	{
	  
if (warehouse[row][col] == 1)
	    {
	      
pelletRow = row;
	      
pelletCol = col;
	    
}
	  else if (warehouse[row][col] == 2)
	    {
	      
destRow = row;
	      
destCol = col;
	    
}
	
}
    
}
  
 
int horizontalDistance = destCol - pelletCol;
  
 
while (pelletCol != destCol)
    {
      
if (pelletCol < destCol)
	{
	  
pelletCol++;
	
}
      else
	{
	  
pelletCol--;
	
}
      
warehouse[pelletRow][pelletCol] = 3;
    
}
  
 
int verticalDistance = destRow - pelletRow;
  
 
while (pelletRow != destRow)
    {
      
if (pelletRow < destRow)
	{
	  
pelletRow++;
	
}
      else
	{
	  
pelletRow--;
	
}
      
warehouse[pelletRow][pelletCol] = 3;
    
}

}",0
ssey266,1696227657,2," void
PelletRoute (int warehouse[10][10])
{
  
int pRow1, pCol1, dRow2, dCol2, cRow, cCol;
  
 
for (int i = 0; i < 10; i++)
    {
      
for (int j = 0; j < 10; j++)
	{
	  
if (warehouse[i][j] == 1)
	    {
	      
pRow1 = i;
	      
pCol1 = j;
	    
}
	
}
    
}
  
 
for (int i = 0; i < 10; i++)
    {
      
for (int j = 0; j < 10; j++)
	{
	  
if (warehouse[i][j] == 2)
	    {
	      
dRow2 = i;
	      
dCol2 = j;
	    
}
	
}
    
}
  
 
cRow = pRow1;
  
cCol = pCol1;
  
 
if (pCol1 < dCol2)
    {
      
while (cCol < dCol2)
	{
	  
cCol++;
	  
warehouse[cRow][cCol] = 3;
	
}
    
}
  else
    {
      
while (cCol > dCol2)
	{
	  
cCol--;
	  
if (warehouse[cRow][cCol] == 2)
	    {
	      
warehouse[cRow][cCol] = 2;
	    
}
	  else
	    {
	      
warehouse[cRow][cCol] = 3;
	    
}
	
}
    
}
  
 
if (pRow1 < dRow2)
    {
      
while (cRow < (dRow2 - 1))
	{
	  
cRow++;
	  
warehouse[cRow][cCol] = 3;
	
}
    
}
  else
    {
      
while (cRow > (dRow2 + 1))
	{
	  
cRow--;
	  
warehouse[cRow][cCol] = 3;
	
}
    
}

}",1
ssri357,1695963499,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

/* The dimensions */
#define NUM_ROWS 10
#define NUM_COLS 10


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}


}

int PelletRoute(int board[NUM_ROWS][NUM_COLS])
{
	int locationRow, locationCol;
	int destinationRow, destinationCol;
	int i;
	int j;
	int k;
	int l;
	int m;
	int n;

	FindTile(board, 1, &locationRow, &locationCol);
	FindTile(board, 2, &destinationRow, &destinationCol);

	// for the columns

	if (locationCol != destinationCol && locationRow != destinationRow)
	{
		if (locationCol < destinationCol) {
			for (i = locationCol + 1; i <= destinationCol; i++) {

				board[locationRow][i] = 3;

			}
		}

		else if (locationCol > destinationCol) {
			for (i = locationCol - 1; i >= destinationCol; i--) {

				board[locationRow][i] = 3;

			}
		}

		// for the rows

		if (locationRow < destinationRow) {
			for (j = locationRow + 1; j < destinationRow; j++) {

				board[j][destinationCol] = 3;

			}
		}

		else if (locationRow > destinationRow) {
			for (j = locationRow - 1; j > destinationRow; j--) {

				board[j][destinationCol] = 3;

			}
		}
	}


	else
	{
		if (locationCol == destinationCol) {

			if (locationRow > destinationRow) {
				for (k = destinationRow + 1; k < locationRow; k++)
				{
					board[k][locationCol] = 3;
				}
			}

			else if (locationRow < destinationRow) {
				for (l = locationRow + 1; l < destinationRow; l++)
				{
					board[l][locationCol] = 3;
				}
			}

		}

		if (locationRow == destinationRow) {

			if (locationCol > destinationCol) {
				for (m = destinationCol + 1; m < locationCol; m++)
				{
					board[locationRow][m] = 3;
				}
			}

			else if (locationCol < destinationCol) {
				for (n = locationCol + 1; n < destinationCol; n++)
				{
					board[locationRow][n] = 3;
				}
			}


		}

	}
    

	

}
	
",0
ssri357,1695965853,2,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void PelletRoute(int warehouse[10][10]); 
void FindTile(int warehouse[10][10], int tile, int* rowPos, int* colPos);


void FindTile(int warehouse[10][10], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}


}

void PelletRoute(int warehouse[10][10])
{
	int locationRow, locationCol;
	int destinationRow, destinationCol;
	int i;
	int j;
	int k;
	int l;
	int m;
	int n;

	FindTile(warehouse, 1, &locationRow, &locationCol);
	FindTile(warehouse, 2, &destinationRow, &destinationCol);

	// for the columns

	if (locationCol != destinationCol && locationRow != destinationRow)
	{
		if (locationCol < destinationCol) {
			for (i = locationCol + 1; i <= destinationCol; i++) {

				warehouse[locationRow][i] = 3;

			}
		}

		else if (locationCol > destinationCol) {
			for (i = locationCol - 1; i >= destinationCol; i--) {

				warehouse[locationRow][i] = 3;

			}
		}

		// for the rows

		if (locationRow < destinationRow) {
			for (j = locationRow + 1; j < destinationRow; j++) {

				warehouse[j][destinationCol] = 3;

			}
		}

		else if (locationRow > destinationRow) {
			for (j = locationRow - 1; j > destinationRow; j--) {

				warehouse[j][destinationCol] = 3;

			}
		}
	}


	else
	{
		if (locationCol == destinationCol) {

			if (locationRow > destinationRow) {
				for (k = destinationRow + 1; k < locationRow; k++)
				{
					warehouse[k][locationCol] = 3;
				}
			}

			else if (locationRow < destinationRow) {
				for (l = locationRow + 1; l < destinationRow; l++)
				{
					warehouse[l][locationCol] = 3;
				}
			}

		}

		if (locationRow == destinationRow) {

			if (locationCol > destinationCol) {
				for (m = destinationCol + 1; m < locationCol; m++)
				{
					warehouse[locationRow][m] = 3;
				}
			}

			else if (locationCol < destinationCol) {
				for (n = locationCol + 1; n < destinationCol; n++)
				{
					warehouse[locationRow][n] = 3;
				}
			}


		}

	}
    

	

}

	
",1
steb012,1695786117,1,"void PelletRoute(int warehouse[10][10]) {
    int rowi = -1, colj = -1, rowx = -1, coly = -1;

    int i, j;

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                rowi = i;
                colj = j;
                break;
            }
        }
        if (rowi != -1 && colj != -1)
            break;
    }

    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                rowx = i;
                coly = j;
                break;
            }
        }
        if (rowx != -1 && coly != -1)
            break;
    }

    int b, a;

    if (colj != coly) {
        b = colj - coly;
    } else {
        b = 0;
    }

    if (b < 0) {
        for (j = colj + 1; j <= coly; j++) {
            warehouse[rowi][j] = 3;
        }
    } else if (b > 0) {
        for (j = colj - 1; j >= coly; j--) {
            warehouse[rowi][j] = 3;
        }
    }

    if (rowi != rowx) {
        a = rowi - rowx;
    } else {
        a = 0;
    }

    if (a < 0) {
        for (i = rowi + 1; i < rowx; i++) {
            warehouse[i][coly] = 3;
        }
    } else if (a > 0) {
        for (i = rowi - 1; i > rowx; i--) {
            warehouse[i][coly] = 3;
        }
    }
}",0
sum778,1695986601,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int i, j, BoxRow, BoxCol, DestinationRow, DestinationCol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				BoxRow = i;
				BoxCol = j;
			}
			else if (warehouse[i][j] == 2) {
				DestinationRow = i;
				DestinationCol = j;
			}
		}
	}


	for (j = 0; j < 10; j++) {
		if (j > BoxCol && j <= DestinationCol && DestinationCol > BoxCol) {
			warehouse[BoxRow][j] = 3;
		}
		else if (j < BoxCol && j >= DestinationCol && DestinationCol < BoxCol) {
			warehouse[BoxRow][j] = 3;
		}
	}

	 
	for (i = 0; i < 10; i++) {
		if (DestinationRow > BoxRow && i > BoxRow && i <= DestinationRow && i!= DestinationRow) {
			warehouse[i][DestinationCol] = 3;
		}
		else if (DestinationRow > BoxRow && i < BoxRow && i >= DestinationRow && i!= DestinationRow) {
			warehouse[i][DestinationCol] = 3;
		}
	}
}",0
sum778,1695986892,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int i, j, BoxRow, BoxCol, DestinationRow, DestinationCol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				BoxRow = i;
				BoxCol = j;
			}
			else if (warehouse[i][j] == 2) {
				DestinationRow = i;
				DestinationCol = j;
			}
		}
	}


	for (j = 0; j < 10; j++) {
		if (j > BoxCol && j <= DestinationCol && DestinationCol > BoxCol) {
			warehouse[BoxRow][j] = 3;
		}
		else if (j < BoxCol && j >= DestinationCol && DestinationCol < BoxCol) {
			warehouse[BoxRow][j] = 3;
		}
	}

	 
	for (i = 0; i < 10; i++) {
		if (DestinationRow > BoxRow && i > BoxRow && i <= DestinationRow && i != DestinationRow) {
			warehouse[i][DestinationCol] = 3;
		}
		else if (DestinationRow < BoxRow && i < BoxRow && i >= DestinationRow && i != DestinationRow) {
			warehouse[i][DestinationCol] = 3;
		}
	}
}",0
sum778,1695987618,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int i, j, BoxRow, BoxCol, DestinationRow, DestinationCol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				BoxRow = i;
				BoxCol = j;
			}
			else if (warehouse[i][j] == 2) {
				DestinationRow = i;
				DestinationCol = j;
			}
		}
	}

	for (j = 0; j < 10; j++) {
		if (j > BoxCol && j <= DestinationCol && DestinationCol > BoxCol) {
			warehouse[BoxRow][j] = 3;
		}
		else if (j < BoxCol && j >= DestinationCol && DestinationCol < BoxCol) {
			warehouse[BoxRow][j] = 3;
		}
	}

	for (i = 0; i < 10; i++) {
		if (DestinationRow > BoxRow && i > BoxRow && i <= DestinationRow && i != DestinationRow) {
			warehouse[i][DestinationCol] = 3;
		}
		else if (DestinationRow < BoxRow && i < BoxRow && i >= DestinationRow && i != DestinationRow) {
			warehouse[i][DestinationCol] = 3;
		}
	}
	warehouse[BoxRow][BoxCol] = 1;
	warehouse[DestinationRow][DestinationCol] = 2;
}",1
swan472,1695939353,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;
    
    // Find the positions of the pellet (1) and the destination (2).
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    
    // Move horizontally (left or right) to line up with the destination.
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    
    // Move vertically (up or down) to reach the destination.
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}

",0
swan472,1696233864,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletX, pelletY, destX, destY;

    // Find the positions of the pellet (1) and destination (2)
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletX = i;
                pelletY = j;
            }
            if (warehouse[i][j] == 2) {
                destX = i;
                destY = j;
            }
        }
    }

    // Move horizontally
    for (int i = pelletY; i < destY; i++) {
        warehouse[pelletX][i] = 3;
    }

    // Move vertically
    for (int i = pelletX; i < destX; i++) {
        warehouse[i][destY] = 3;
    }
}
",0
sweb390,1695703730,1,"void PelletRoute(int warehouse[10][10]) {
	/* find location of the start (1)*/
	/* find the location of the end (2)*/
	int i;
	int j;
	int rowStart;
	int colStart;
	int rowEnd;
	int colEnd;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
			if (warehouse[i][j] == 2) {
				rowEnd = i;
				colEnd = j;
			}
		}
		
	}
	/* calculate horizontal and vertical displacement*/
	int horizontal;
	int vertical;

	horizontal = rowEnd - rowStart;
	vertical = colEnd - colStart;

	/* replace values on the route with 3s*/
	i = colEnd;
	while (i != colStart) {
		if (horizontal > 0) {
			warehouse[rowStart][i] = 3;
			i--;
		}
		else {
			warehouse[rowStart][i] = 3;
			i++;
		}
	}
	i = rowEnd;
	if (vertical > 0) {
		i--;
	}
	else {
		;
		i++;
	}
	while (i != rowStart) {
		if (vertical > 0) {
			warehouse[i][colEnd] = 3;
			i--;
		}
		else {
			warehouse[i + 1][colEnd] = 3;
			i++;
		}
	}
	return;
}",0
syok443,1695764997,1,"void PelletRoute(int warehouse[10][10]){

    //find the position of both 1 and 2
    int i, j;
    int numRow = 10;
    int numCol = 10;
    int startx, starty;
    int endingx, endingy;

    for(i = 0; i < numRow; i++){
        for(j = 0; j < numCol; j++){

            if(warehouse[i][j] == 1){
                startx = j;
                starty = i;
            } else if (warehouse[i][j] == 2){
                endingx = j;
                endingy = i;
            }

        }
    }


    //loops horizontal and place values
    for(i = startx; i <= endingx; i++){
        warehouse[starty][i] = 3;
    }
    for(i = starty; i <= endingy; i++){
        warehouse[i][endingx] = 3;
    }

    //places the 1 and 2 back onto the board
    warehouse[starty][startx] = 1;
    warehouse[endingy][endingx] = 2;
}",0
syok443,1695770513,2,"void PelletRoute(int warehouse[10][10]){

    //find the position of both 1 and 2
    int i, j;
    int numRow = 10;
    int numCol = 10;
    int startx, starty;
    int endingx, endingy;

    for(i = 0; i < numRow; i++){
        for(j = 0; j < numCol; j++){

            if(warehouse[i][j] == 1){
                startx = j;
                starty = i;
            } else if (warehouse[i][j] == 2){
                endingx = j;
                endingy = i;
            }

        }
    }
    
    int endXindex = endingx;
    int strtXindex = startx;
    int endYindex = endingy;
    int strtYindex = starty;

    int horiMove = starty;
    int vertiMove = endingx;
    
    if(startx > endingx){
        endXindex = startx;
        strtXindex = endingx;
    }
    if(starty > endingy){
        endYindex = starty;
        strtYindex = endingy;
    }

    if(startx > endingx && starty > endingy){
        horiMove = starty;
        vertiMove = endingx;
    }
    

    //loops horizontal and place values
    for(i = strtXindex; i <= endXindex; i++){
        warehouse[horiMove][i] = 3;
    }
    for(j = strtYindex; j <= endYindex; j++){
        warehouse[j][vertiMove] = 3;
    }

    //places the 1 and 2 back onto the board
    warehouse[starty][startx] = 1;
    warehouse[endingy][endingx] = 2;
}",1
szen566,1695870138,1,"#define numrows 10
#define numcols 10

void PelletRoute(int warehouse[10][10])
{
	int i, j;
	int startrow = 0;
	int startcol = 0;
	int endrow = 0;
	int endcol = 0;

	// 1. Go thru array, locate 1 and store its position
	for (i = 0; i < numrows; i++) {
		for (j = 0; j < numcols; j++) {
			if (warehouse[i][j] == 1) {
				startrow = i;
				startcol = j;
			}
		}
	}

	// 2. Go thru array, locate 2 and store its position
	for (i = 0; i < numrows; i++) {
		for (j = 0; j < numcols; j++) {
			if (warehouse[i][j] == 2) {
				endrow = i;
				endcol = j;
			}
		}
	}
	
	// IF END DESITATION BOTTOM RIGHT OF START
	if (endrow > startrow && endcol > startcol) {
		// 3. Move the box horizonally;  Replace every value from startcol to endcol with a 3 in the startrow
		for (i = startcol + 1; i < endcol + 1; i++) {
			warehouse[startrow][i] = 3;
		}
		// 4. Move the box vertically; Replace every value from startrow to endrow with a 3 in the endcol
		for (j = startrow; j < endrow; j++) {
			warehouse[j][endcol] = 3;
		}
	}

	// IF END DESTINATION BOTTOM LEFT OF START
	if (endrow > startrow && endcol < startcol) {
		// 3. Horizonally
		for (i = endcol; i < startcol; i++) {
			warehouse[startrow][i] = 3;
		}
		// 4. Vertically
		for (j = startrow; j < endrow; j++) {
			warehouse[j][endcol] = 3;
		}
	}

	// IF END DESTINATION UPPER RIGHT OF START
	if (endrow < startrow && endcol > startcol) {
		// 3. Horizonally
		for (i = startcol + 1; i < endcol + 1; i++) {
			warehouse[startrow][i] = 3;
		}
		// 4. Vertically
		for (j = endrow + 1; j < startrow + 1; j++) {
			warehouse[j][endcol] = 3;
		}
	}

	// IF END DESTINATION UPPER LEFT OF START
	if (endrow < startrow && endcol < startcol) {
		// 3. Horizonally
		for (i = endcol; i < startcol; i++) {
			warehouse[startrow][i] = 3;
		}
		// 4. Vertically
		for (j = endrow + 1; j < startrow + 1; j++) {
			warehouse[j][endcol] = 3;
		}
	}

	// IF END DESTINATION IS DIRECTLY BELOW START
	if (endrow > startrow && startcol == endcol) {
		for (i = startrow + 1; i < endrow; i++) {
			warehouse[i][startcol] = 3;
		}
	}

	// IF END DESTINATION IS DIRECTLY ABOVE START
	if (endrow < startrow && startcol == endcol) {
		for (i = endrow + 1; i < startrow; i++) {
			warehouse[i][startcol] = 3;
		}
	}

	// IF END DESTINATION IS DIRECTLY LEFT START
	if (endrow == startrow && startcol > endcol) {
		for (i = endcol + 1; i < startcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}

	// IF END DESTINATION IS DIRECTLY RIGHT START
	if (endrow == startrow && startcol < endcol) {
		for (i = startcol + 1; i < endcol; i++) {
			warehouse[startrow][i] = 3;
		}
	}
}",1
tais804,1695765388,1,"void PelletRoute(int floor[10][10]) {
    int i, j, row, col, rowPellet, colPellet, rowFinal, colFinal, rowStart, rowFinish, colStart, colFinish;

    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++) {
            if (floor[i][j] == 1){
                rowPellet = i;
                colPellet = j;
            } else if (floor[i][j] == 2) {
                rowFinal = i;
                colFinal = j;
            } 
        }
    }

    if (rowPellet > rowFinal) {
        rowStart = rowFinal;
        rowFinish = rowPellet + 1;
    } else {
        rowStart = rowPellet;
        rowFinish = rowFinal + 1;
    }

    if (colPellet > colFinal) {
        colStart = colFinal;
        colFinish = colPellet + 1;
    } else {
        colStart = colPellet;
        colFinish = colFinal + 1;
    }

    for (col = colStart; col < colFinish; col++) {
        floor[rowPellet][col] = 3;
    }

    for (row = rowStart; row < rowFinish; row++) {
        floor[row][colFinal] = 3;
    }

    floor[rowPellet][colPellet] = 1;
    floor[rowFinal][colFinal] = 2;
 }",1
tbar968,1695905240,1,"#include <stdio.h>

void PelletRoute(int values[10][10]){

	int a;
	int b;
	int i;
	int j;
	int oldRow;
	oldRow =-1;
	int oldCol;
	oldCol = -1;
	int newRow;
	newRow = -1;
	int newCol;
	newCol = -1;


	for (a = 0; a < 10; a++) {
		for (b = 0; b < 10; b++) {
			if (values[a][b] == 1) {
				oldRow = a;
				oldCol = b;
			}
			else if (values[a][b] == 2) {
				newRow = a;
				newCol = b;
			}
		}
	}

	if (oldRow == -1 || oldCol == -1 || newRow == -1 || newCol == -1)
		return;

	if (newCol - oldCol > 0) {
		for (j = oldCol; j <= newCol; j++) {
			if (values[oldRow][j] == 0) {
				values[oldRow][j] = 3;
			}
		}
	}
	else if (newCol - oldCol < 0) {
		for (j = oldCol; j >= newCol; j--) {
			if (values[oldRow][j] == 0) {
				values[oldRow][j] = 3;

			}
		}
	}

	if (newRow - oldRow > 0) {
		for (i = oldRow; i <= newRow; i++) {
			if (values[i][newCol] == 0) {
				values[i][newCol] = 3;

			}
		}
	}
	else if (newRow - oldRow < 0) {
		for (i = oldRow; i >= newRow; i--) {
			if (values[i][newCol] == 0) {
				values[i][newCol] = 3;

			}
		}
	}

	return;

}
",1
tche867,1695978467,1,"void PelletRoute(int warehouse[10][10])
{
	int row1, col1;
	int row2, col2;
	int medium,col_diff;
	int hori_start, hori_end;
	int ver_start, ver_end;
	for (int i = 0; i <= 9; i++)
	{
		for (int j = 0; j <= 9; j++)
		{
			if (warehouse[i][j] == 1)
			{
				row1 = i;
				col1 = j;
			}
			if (warehouse[i][j] == 2)
			{
				row2 = i;
				col2 = j;
			}
		}
	}

	if (col1 < col2)
	{
		hori_start = col1;
		hori_end = col2;
	}
	else if(col1 == col2)
	{
		hori_start = col1;
		hori_end = col2;
	}
	else
	{
		hori_start = col2;
		hori_end = col1;
	}

	//update horzitonl line
	for (int j = hori_start+1; j <= hori_end; j++)
	{
		warehouse[row1][j] = 3;
	}
	if (row1 < row2)
	{
		ver_start = row1;
		ver_end = row2;
	}
	else if (row1 == row2)
	{
		ver_start = row1;
		ver_end = row2;
	}
	else if (row1 == row2)
	{
		ver_start = row2;
		ver_end = row1;
	}
	for (int i = ver_start; i < ver_end; i++)
	{
		warehouse[i][col2] = 3;
	}
	
}",0
tche867,1695978521,2,"void PelletRoute(int warehouse[10][10])
{
	int row1, col1;
	int row2, col2;
	int hori_start, hori_end;
	int ver_start, ver_end;
	for (int i = 0; i <= 9; i++)
	{
		for (int j = 0; j <= 9; j++)
		{
			if (warehouse[i][j] == 1)
			{
				row1 = i;
				col1 = j;
			}
			if (warehouse[i][j] == 2)
			{
				row2 = i;
				col2 = j;
			}
		}
	}

	if (col1 < col2)
	{
		hori_start = col1;
		hori_end = col2;
	}
	else if(col1 == col2)
	{
		hori_start = col1;
		hori_end = col2;
	}
	else
	{
		hori_start = col2;
		hori_end = col1;
	}

	//update horzitonl line
	for (int j = hori_start+1; j <= hori_end; j++)
	{
		warehouse[row1][j] = 3;
	}
	if (row1 < row2)
	{
		ver_start = row1;
		ver_end = row2;
	}
	else if (row1 == row2)
	{
		ver_start = row1;
		ver_end = row2;
	}
	else if (row1 == row2)
	{
		ver_start = row2;
		ver_end = row1;
	}
	for (int i = ver_start; i < ver_end; i++)
	{
		warehouse[i][col2] = 3;
	}
	
}",0
tche867,1695979041,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
	int row1, col1;
	int row2, col2;
	int hori_start, hori_end;
	int ver_start, ver_end;
	for (int i = 0; i <= 9; i++)
	{
		for (int j = 0; j <= 9; j++)
		{
			if (warehouse[i][j] == 1)
			{
				row1 = i;
				col1 = j;
			}
			if (warehouse[i][j] == 2)
			{
				row2 = i;
				col2 = j;
			}
		}
	}

	if (col1 < col2)
	{
		hori_start = col1;
		hori_end = col2;
	}
	else if(col1 == col2)
	{
		hori_start = col1;
		hori_end = col2;
	}
	else
	{
		hori_start = col2;
		hori_end = col1;
	}

	//update horzitonl line
	for (int j = hori_start; j <= hori_end; j++)
	{
		if (warehouse[row1][j] == 0)
		{
			warehouse[row1][j] = 3;
		}
	}

	if (row1 < row2)
	{
		ver_start = row1;
		ver_end = row2;
	}
	else if (row1 == row2)
	{
		ver_start = row1;
		ver_end = row2;
	}
	else if (row1 > row2)
	{
		ver_start = row2;
		ver_end = row1;
	}
	for (int i = ver_start; i < ver_end; i++)
	{
		if (warehouse[i][col2] == 0)
		{
			warehouse[i][col2] = 3;
		}
		
	}
	
}

void main(void) {
	int warehouse[10][10] = {
  {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
  {0, 0, 0, 0, 0, 2, 0, 0, 0, 0} };

	PelletRoute(warehouse);

	int i, j;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			printf(""%d "", warehouse[i][j]);
		}
		printf(""\n"");
	}
}",0
tche867,1695979121,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
	int row1, col1;
	int row2, col2;
	int hori_start, hori_end;
	int ver_start, ver_end;
	for (int i = 0; i <= 9; i++)
	{
		for (int j = 0; j <= 9; j++)
		{
			if (warehouse[i][j] == 1)
			{
				row1 = i;
				col1 = j;
			}
			if (warehouse[i][j] == 2)
			{
				row2 = i;
				col2 = j;
			}
		}
	}

	if (col1 < col2)
	{
		hori_start = col1;
		hori_end = col2;
	}
	else if(col1 == col2)
	{
		hori_start = col1;
		hori_end = col2;
	}
	else
	{
		hori_start = col2;
		hori_end = col1;
	}

	//update horzitonl line
	for (int j = hori_start; j <= hori_end; j++)
	{
		if (warehouse[row1][j] == 0)
		{
			warehouse[row1][j] = 3;
		}
	}

	if (row1 < row2)
	{
		ver_start = row1;
		ver_end = row2;
	}
	else if (row1 == row2)
	{
		ver_start = row1;
		ver_end = row2;
	}
	else if (row1 > row2)
	{
		ver_start = row2;
		ver_end = row1;
	}
	for (int i = ver_start; i < ver_end; i++)
	{
		if (warehouse[i][col2] == 0)
		{
			warehouse[i][col2] = 3;
		}
		
	}
	
}",1
tdic873,1695690675,1,"void PelletRoute(int warehouse[10][10]){
    int pelletx = 0, pellety = 0, destx = 0, desty = 0;
    
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1) { pelletx = j; pellety = i; }
            if (warehouse[i][j] == 2) { destx = j; desty = i; }
        }   
    }

    if (pelletx + 1 < destx){
        for (int i = pelletx + 1; i <= destx; i++)
        {
            warehouse[pellety][i] = 3;
        }
    } else if (pelletx + 1 > destx){
        for (int i = destx + 1; i < pelletx; i++)
        {
            warehouse[pellety][i] = 3;
        }
    }

    if (pellety + 1 < desty){
        for (int i = pellety + 1; i < desty; i++)
        {
            warehouse[i][destx] = 3;
        }
    } else if (pellety + 1 > desty){
        for (int i = desty + 1; i < pellety + 1; i++)
        {
            warehouse[i][destx] = 3;
        }
    } 
}",0
tdic873,1695690758,2,"void PelletRoute(int warehouse[10][10]){
    int pelletx = 0, pellety = 0, destx = 0, desty = 0;
    
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1) { pelletx = j; pellety = i; }
            if (warehouse[i][j] == 2) { destx = j; desty = i; }
        }   
    }

    if (pelletx + 1 < destx){
        for (int i = pelletx + 1; i <= destx; i++)
        {
            warehouse[pellety][i] = 3;
        }
    } else if (pelletx + 1 > destx){
        for (int i = destx + 1; i < pelletx; i++)
        {
            warehouse[pellety][i] = 3;
        }
    }

    if (pellety + 1 < desty){
        for (int i = pellety + 1; i < desty; i++)
        {
            warehouse[i][destx] = 3;
        }
    } else if (pellety + 1 > desty){
        for (int i = desty + 1; i < pellety; i++)
        {
            warehouse[i][destx] = 3;
        }
    } 
}",0
tdic873,1695690864,3,"void PelletRoute(int warehouse[10][10]){
    int pelletx = 0, pellety = 0, destx = 0, desty = 0;
    
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1) { pelletx = j; pellety = i; }
            if (warehouse[i][j] == 2) { destx = j; desty = i; }
        }   
    }

    if (pelletx + 1 < destx){
        for (int i = pelletx + 1; i <= destx; i++)
        {
            warehouse[pellety][i] = 3;
        }
    } else if (pelletx + 1 > destx){
        for (int i = destx + 1; i < pelletx; i++)
        {
            warehouse[pellety][i] = 3;
        }
    }

    if (pellety + 1 < desty){
        for (int i = pellety + 1; i < desty; i++)
        {
            warehouse[i][destx] = 3;
        }
    } else if (pellety + 1 > desty){
        for (int i = desty + 1; i < pellety + 1; i++)
        {
            if (warehouse[i][destx] == 0) warehouse[i][destx] = 3;
        }
    } 
}",0
tdu824,1696241478,1,"void PelletRoute(int warehouse[10][10])
{
	int rowStart, columnStart, rowEnd, columnEnd, i, j;
    i = 0;
    j = 0;
	while (i < 10) {
        j = 0;
		while (j < 10) {
			if (warehouse[i][j] == 1){
				rowStart=i ;
	 			columnStart=j ;
			}

            j++;
		}
        i++;
	}
    i = 0;
    j = 0;
	while (i<10) {
        j = 0;
		while (j<10) {
    		if ( warehouse[i][j] == 2 ) {
	 			rowEnd=i ;
	 			columnEnd=j ;
			}

            j++;
		}
        i++;
	}

if (columnStart < columnEnd) {
	for (int i = columnStart + 1 ; i<=columnEnd ; i++) {
	
			warehouse[rowStart][i]=3;

	}
}
if (columnStart > columnEnd) {
	for (int i = columnStart - 1 ; i>=columnEnd ; i--) {
	
			warehouse[rowStart][i]=3;

	}
}
if (rowStart < rowEnd) {
	for (int i = rowStart + 1 ; i<rowEnd ; i++) {
	
			warehouse[i][columnEnd]=3;

	}
}
if (rowStart > rowEnd) {
	for (int i = rowStart - 1 ; i>rowEnd ; i--) {
	
			warehouse[i][columnEnd]=3;

	}
}

}",0
tdu824,1696242175,2,"void PelletRoute(int warehouse[10][10])
{
	int rowStart, columnStart, rowEnd, columnEnd, i, j;
    i = 0;
    j = 0;
	while (i < 10) {
        j = 0;
		while (j < 10) {
			if (warehouse[i][j] == 1){
				rowStart=i ;
	 			columnStart=j ;
			}

            j++;
		}
        i++;
	}
    i = 0;
    j = 0;
	while (i<10) {
        j = 0;
		while (j<10) {
    		if ( warehouse[i][j] == 2 ) {
	 			rowEnd=i ;
	 			columnEnd=j ;
			}

            j++;
		}
        i++;
	}

if (columnStart < columnEnd) {
	for (int i = columnStart + 1 ; i<=columnEnd ; i++) {
            if (warehouse[rowStart][i] != 1 && warehouse[rowStart][i] != 2){
			warehouse[rowStart][i]=3;
            }
	}
}
if (columnStart > columnEnd) {
	for (int i = columnStart - 1 ; i>=columnEnd ; i--) {
	
            if (warehouse[rowStart][i] != 1 && warehouse[rowStart][i] != 2){
			warehouse[rowStart][i]=3;
            }
	}
}
if (rowStart < rowEnd) {
	for (int i = rowStart + 1 ; i<rowEnd ; i++) {
        
        if (warehouse[i][columnEnd] != 1 && warehouse[i][columnEnd] != 2){
			warehouse[i][columnEnd]=3;
        }
	}
}
if (rowStart > rowEnd) {
	for (int i = rowStart - 1 ; i>rowEnd ; i--) {
	
        if (warehouse[i][columnEnd] != 1 && warehouse[i][columnEnd] != 2){
			warehouse[i][columnEnd]=3;
        }

	}
}

}",1
tfai092,1695959554,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    
    int PelletRow, PelletCol, DestinationRow, DestinationCol;
    
    for (int i=0; i < 10; i++) {
        for (int j=0; j < 10; j++) {
            if (warehouse[i][j]==1) {
                PelletRow = i;
                PelletCol = j;
            }
            if (warehouse[i][j]==2) {
                DestinationRow = i;
                DestinationCol = j;
            }
        }
    }
    
    if (PelletCol<DestinationCol){
        for (int g=PelletCol+1; g<DestinationCol; g++) {
            warehouse[PelletRow][g] = 3;
    }
    }
    if (PelletCol>DestinationCol){
        for (int g=PelletCol-1; g>DestinationCol; g--) {
            warehouse[PelletRow][g] = 3;
    }
    }
    
    if (PelletRow<DestinationRow) {
        
        if (PelletCol==DestinationCol) {
            for (int k=PelletRow+1; k<DestinationRow; k++) {
                warehouse[k][DestinationCol] = 3;            
        }
        }
        else {
        for (int k=PelletRow; k<DestinationRow; k++) {
            warehouse[k][DestinationCol] = 3;
        }
        }
    }
    
    if (PelletRow>DestinationRow) {
        if (PelletCol==DestinationCol) {
            for (int k=PelletRow+1; k<DestinationRow; k--) {
                warehouse[k][DestinationCol] = 3;            
        }
        }
        else {
        for (int k=PelletRow; k<DestinationRow; k--) {
            warehouse[k][DestinationCol] = 3;
        }
        }
    }
    
    
    return;
}",0
tfai092,1695961101,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int PelletRow, PelletCol, DestinationRow, DestinationCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                PelletRow = i;
                PelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                DestinationRow = i;
                DestinationCol = j;
            }
        }
    }

    while (PelletCol != DestinationCol) {
        if (PelletCol < DestinationCol) {
            PelletCol=PelletCol+1;
        } 
        else {
            PelletCol=PelletCol-1;
        }
        warehouse[PelletRow][PelletCol] = 3;
    }

    while (PelletRow != DestinationRow) {
        if (PelletRow < DestinationRow) {
            PelletRow=PelletRow+1;
        } 
        else {
            PelletRow=PelletRow-1;
        }
        warehouse[PelletRow][PelletCol] = 3;
    }
    
    warehouse[DestinationRow][DestinationCol] = 2;
}",1
tfai653,1696141128,1,"void PelletRoute(int warehouse[10][10])
{
    // Define variables.
    int i, j, workerRow, workerCol, boxRow, boxCol;

    // Find the position of the worker and the box.
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1) {
                workerRow = i;
                workerCol = j;
            }
            if (warehouse[i][j] == 2) {
                boxRow = i;
                boxCol = j;
            }

        }
    }

    // Check to see if worker is already in same row as the box.
    if (workerRow == boxRow && workerCol < boxCol) {
        while (workerCol < boxCol - 1) {
            workerCol ++;
            warehouse[workerRow][workerCol] = 3;
        }
    }

    if (workerRow == boxRow && workerCol > boxCol) {
        while (workerCol > boxCol + 1) {
            workerCol --;
            warehouse[workerRow][workerCol] = 3;
        }
    }
    
    // Move the worker to inline with the same column as the box.
    while (workerCol < boxCol && workerRow != boxRow) {
        workerCol ++;
        warehouse[workerRow][workerCol] = 3;
    }
    while (workerCol > boxCol && workerRow != boxRow) {
        workerCol --;
        warehouse[workerRow][workerCol] = 3;
    }
    
    // Move the worker to the same position (row) as the box.
    while (workerRow < boxRow - 1) {
        workerRow ++;
        warehouse[workerRow][workerCol] = 3;
    }

    while (workerRow > boxRow + 1) {
        workerRow --;
        warehouse[workerRow][workerCol]= 3;
    }
}",1
thal182,1695615075,1,"void PelletRoute(int warehouse[10][10]) {
    int pellet_row, pellet_col, dest_row, dest_col;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_row = i;
                pellet_col = j;
            } else if (warehouse[i][j] == 2) {
                dest_row = i;
                dest_col = j;
            }
        }
    }

    while (pellet_col != dest_col) {
        if (pellet_col < dest_col) {
            pellet_col++;
        } else {
            pellet_col--;
        }
        if (warehouse[pellet_row][pellet_col] != 2) {
            warehouse[pellet_row][pellet_col] = 3;
        }
    }

    while (pellet_row != dest_row) {
        if (pellet_row < dest_row) {
            pellet_row++;
        } else {
            pellet_row--;
        }
        if (warehouse[pellet_row][pellet_col] != 2) {
            warehouse[pellet_row][pellet_col] = 3;
        }
    }
}",1
thar970,1696235205,1,"void PelletRoute(int warehouse[10][10]){
    int row_s,col_s,row_end,col_end;
    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
            if(warehouse[i][j]==1){
                row_s=i;
                col_s=j;
            }else if(warehouse[i][j]==2){
                row_end=i;
                col_end=j;
            }
        }
    }


    while (col_s != col_end) {
        if (col_s < col_end) {
            col_s++;
        } else {
            col_s--;
        }
        warehouse[row_s][col_s] = 3;
    }
    
    while (row_s != row_end) {
        if (row_s < row_end) {
            row_s++;
            if(row_s==row_end){
                break;
            }
        } else {
            row_s--;
            if(row_s==row_end){
                break;
            }
        }
        warehouse[row_s][col_s] = 3;
    }

}",0
thar970,1696235312,2,"void PelletRoute(int warehouse[10][10]){
    int row_s,col_s,row_end,col_end;
    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
            if(warehouse[i][j]==1){
                row_s=i;
                col_s=j;
            }else if(warehouse[i][j]==2){
                row_end=i;
                col_end=j;
            }
        }
    }
    while (col_s != col_end) {
        if (col_s < col_end) {
            col_s++;
            if(col_s==col_end){
                break;
            }
        } else {
            col_s--;
            if(col_s==col_end){
                break;
            }
        }
        warehouse[row_s][col_s] = 3;
    }
    
    while (row_s != row_end) {
        if (row_s < row_end) {
            row_s++;
            if(row_s==row_end){
                break;
            }
        } else {
            row_s--;
            if(row_s==row_end){
                break;
            }
        }
        warehouse[row_s][col_s] = 3;
    }


    
}",0
thar970,1696235953,3,"
void PelletRoute(int warehouse[10][10]){
    int row_s,col_s,row_end,col_end;
    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
            if(warehouse[i][j]==1){
                row_s=i;
                col_s=j;
            }else if(warehouse[i][j]==2){
                row_end=i;
                col_end=j;
            }
        }
    }
    warehouse[row_s][col_end] = 3;
    while (col_s != col_end) {
        if (col_s < col_end) {
            col_s++;
            if(col_s==col_end){
                break;
            }
        } else {
            col_s--;
            if(col_s==col_end){
                break;
            }
        }
        warehouse[row_s][col_s] = 3;
    }
    
    while (row_s != row_end) {
        if (row_s < row_end) {
            row_s++;
            if(row_s==row_end){
                break;
            }
        } else {
            row_s--;
            if(row_s==row_end){
                break;
            }
        }
        warehouse[row_s][col_s] = 3;
    }


    
}",0
thar970,1696236310,4,"void PelletRoute(int warehouse[10][10]){
    int row_s,col_s,row_end,col_end;
    for(int i=0;i<10;i++){
        for(int j=0;j<10;j++){
            if(warehouse[i][j]==1){
                row_s=i;
                col_s=j;
            }else if(warehouse[i][j]==2){
                row_end=i;
                col_end=j;
            }
        }
    }
    int a=row_s;
    int b=col_s;
    int c=row_end;
    int d=col_end;
    warehouse[row_s][col_end] = 3;
    while (col_s != col_end) {
        if (col_s < col_end) {
            col_s++;
            if(col_s==col_end){
                break;
            }
        } else {
            col_s--;
            if(col_s==col_end){
                break;
            }
        }
        warehouse[row_s][col_s] = 3;
    }
    
    while (row_s != row_end) {
        if (row_s < row_end) {
            row_s++;
            if(row_s==row_end){
                break;
            }
        } else {
            row_s--;
            if(row_s==row_end){
                break;
            }
        }
        warehouse[row_s][col_s] = 3;
    }
    warehouse[a][b] = 1;
    warehouse[c][d] = 2;


    
}
",1
thid924,1696081856,1,"void PelletRoute(int warehouse[10][10])
{
	int ogRow, ogCol, findRow, findCol, i, j;
	int sameRow, sameCol;

	//find the position of the 1
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

		if (warehouse[i][j] == 1){
			ogRow = i;
			ogCol = j;
			break;
			}
		}
	}

	//find the position of the destination
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

			if (warehouse[i][j] == 2) {
				findRow = i;
				findCol = j;
			}
		}
	}
	//initiazlie booleans
	sameRow = 0;
	sameCol = 0;
	if (ogRow == findRow) {
		sameRow = 1;
	}
	if (ogCol == findCol) {
		sameCol = 1;
	}

	//COLUMNS then replace the left/right or same with ""3""
	
		//same for when they are in the same row
	if (findRow == ogRow) {
		//left without overwrite
		if (findCol < ogCol) {
			for (j = ogCol - 1; j > findCol; j--) {
				warehouse[ogRow][j] = 3;
			}
		}
		//right without overwrite
		else if (findCol > ogCol) {
			for (j = ogCol + 1; j <= findCol; j++) {
				warehouse[ogRow][j] = 3;
			}
		}
	}
	
	//control flow for when it is a regular fucking thing:
	if (sameRow == 0) {
		//left
		if (findCol < ogCol) {
			for (j = ogCol - 1; j >= findCol; j--) {
				warehouse[ogRow][j] = 3;
		      }
		}

		//right
		if (findCol > ogCol) {
			for (j = ogCol + 1; j <= findCol; j++) {
				warehouse[ogRow][j] = 3;
				 }
		}
	}

	//FOR DA ROWS, no issue with overwriting as when going left/right it will automatically overwrite the hting 
	//up
	if (findRow < ogRow) {
		for (i = ogRow - 1; i > findRow; i--) {
			warehouse[i][findCol] = 3;
		}
	}

	//down
	if (findRow > ogRow) {
		for (i = ogRow + 1; i < findRow; i++) {
			warehouse[i][findCol] = 3;
		}
	}

}",0
thid924,1696082133,2,"void PelletRoute(int warehouse[10][10])
{
	int ogRow, ogCol, findRow, findCol, i, j;
	int sameRow;

	//find the position of the 1
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

		if (warehouse[i][j] == 1){
			ogRow = i;
			ogCol = j;
			break;
			}
		}
	}

	//find the position of the destination
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

			if (warehouse[i][j] == 2) {
				findRow = i;
				findCol = j;
			}
		}
	}
	//initiazlie booleans
	sameRow = 0;



	if (ogRow == findRow) {
		sameRow = 1;
	}
	int sameCol = 0;
	if (ogCol == findCol) {
		sameCol = 1;
	}



	//COLUMNS then replace the left/right or same with ""3""
	
		//same for when they are in the same row
	if (findRow == ogRow) {
		//left without overwrite
		if (findCol < ogCol) {
			for (j = ogCol - 1; j > findCol; j--) {
				warehouse[ogRow][j] = 3;
			}
		}
		//right without overwrite
		else if (findCol > ogCol) {
			for (j = ogCol + 1; j <= findCol; j++) {
				warehouse[ogRow][j] = 3;
			}
		}
	}
	
	//control flow for when it is a regular fucking thing:
	if (sameRow == 0) {
		//left
		if (findCol < ogCol) {
			for (j = ogCol - 1; j >= findCol; j--) {
				warehouse[ogRow][j] = 3;
		      }
		}

		//right
		if (findCol > ogCol) {
			for (j = ogCol + 1; j <= findCol; j++) {
				warehouse[ogRow][j] = 3;
				 }
		}
	}

	//FOR DA ROWS, no issue with overwriting as when going left/right it will automatically overwrite the hting 
	//up
	if (findRow < ogRow) {
		for (i = ogRow - 1; i > findRow; i--) {
			warehouse[i][findCol] = 3;
		}
	}

	//down
	if (findRow > ogRow) {
		for (i = ogRow + 1; i < findRow; i++) {
			warehouse[i][findCol] = 3;
		}
	}

	
	

}",0
thid924,1696082376,3,"void PelletRoute(int warehouse[10][10])
{
	int ogRow, ogCol, findRow, findCol, i, j;
	int sameRow;

	//find the position of the 1
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

		if (warehouse[i][j] == 1){
			ogRow = i;
			ogCol = j;
			break;
			}
		}
	}

	//find the position of the destination
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {

			if (warehouse[i][j] == 2) {
				findRow = i;
				findCol = j;
			}
		}
	}
	//initiazlie booleans
	sameRow = 0;



	if (ogRow == findRow) {
		sameRow = 1;
	}
	int sameCol = 0;
	if (ogCol == findCol) {
		sameCol = 1;
	}



	//COLUMNS then replace the left/right or same with ""3""
	
		//same for when they are in the same row
	if (findRow == ogRow) {
		//left without overwrite
		if (findCol < ogCol) {
			for (j = ogCol - 1; j > findCol; j--) {
				warehouse[ogRow][j] = 3;
			}
		}
		//right without overwrite
		else if (findCol > ogCol) {
			for (j = ogCol + 1; j <= findCol; j++) {
				warehouse[ogRow][j] = 3;
			}
		}
	}
	
	//control flow for when it is a regular fucking thing:
	if (sameRow == 0) {
		//left
		if (findCol < ogCol) {
			for (j = ogCol - 1; j >= findCol; j--) {
				warehouse[ogRow][j] = 3;
		      }
		}

		//right
		if (findCol > ogCol) {
			for (j = ogCol + 1; j <= findCol; j++) {
				warehouse[ogRow][j] = 3;
				 }
		}
	}

	//FOR DA ROWS, no issue with overwriting as when going left/right it will automatically overwrite the hting 
	//up

	if (sameCol == 0 || sameCol == 1)
	if (findRow < ogRow) {
		for (i = ogRow - 1; i > findRow; i--) {
			warehouse[i][findCol] = 3;
		}
	}

	//down
	if (findRow > ogRow) {
		for (i = ogRow + 1; i < findRow; i++) {
			warehouse[i][findCol] = 3;
		}
	}

	
	

}",1
thua238,1695892445,1,"void PelletRoute(int warehouse[10][10])
{
    //find indices of pellet and destination
    int pellet_r, pellet_c, dest_r, dest_c;
    for (int i=0; i<10; i++) {
		for (int j=0; j<10; j++) {
			if (warehouse[i][j] == 1) {
                pellet_r = i;
                pellet_c = j;
            } else if (warehouse[i][j] == 2) {
                dest_r = i;
                dest_c = j;
            }
		}
	}

    //create horizontal path
    if (pellet_c < dest_c) {
        for (int j=pellet_c; j<=dest_c; j++) {
            warehouse[pellet_r][j] = 3;
        }
    } else {
        for (int j=pellet_c; j>=dest_c; j--) {
            warehouse[pellet_r][j] = 3;
        }
    }

    //create vertical path
    if (pellet_r < dest_r) {
        for (int i=pellet_r; i<=dest_r; i++) {
            warehouse[i][dest_c] = 3;
        }
    } else {
        for (int i=pellet_r; i>=pellet_r; i--) {
            warehouse[i][dest_c] = 3;
        }
    }

    //reinstate pellet and destination locations
    warehouse[pellet_r][pellet_c] = 1;
    warehouse[dest_r][dest_c] = 2;
}",0
thua238,1695892880,2,"void PelletRoute(int warehouse[10][10])
{
    //find indices of pellet and destination
    int pellet_r, pellet_c, dest_r, dest_c;
    for (int i=0; i<10; i++) {
		for (int j=0; j<10; j++) {
			if (warehouse[i][j] == 1) {
                pellet_r = i;
                pellet_c = j;
            } else if (warehouse[i][j] == 2) {
                dest_r = i;
                dest_c = j;
            }
		}
	}

    //create horizontal path
    if (pellet_c < dest_c) {
        for (int j=pellet_c; j<=dest_c; j++) {
            warehouse[pellet_r][j] = 3;
        }
    } else {
        for (int j=pellet_c; j>=dest_c; j--) {
            warehouse[pellet_r][j] = 3;
        }
    }

    //create vertical path
    if (pellet_r < dest_r) {
        for (int i=pellet_r; i<=dest_r; i++) {
            warehouse[i][dest_c] = 3;
        }
    } else {
        for (int i=pellet_r; i>=dest_r; i--) {
            warehouse[i][dest_c] = 3;
        }
    }

    //reinstate pellet and destination locations
    warehouse[pellet_r][pellet_c] = 1;
    warehouse[dest_r][dest_c] = 2;
}",1
tkan918,1695880820,1,"
void PelletRoute(int warehouse[10][10])
{
    //Find the row and column of the 1 and 2
        int onerow, onecol, tworow, twocol;
        FindTile(warehouse, 1, &onerow, &onecol);
        FindTile(warehouse, 2, &tworow, &twocol);

    //Determine how the 3's will be placed horizontally
        int i;

    //If twocol value is less than oneroll (two is on the left of one)
        if (onecol > twocol) {
            for(i = 1; i<onecol-twocol; i++) {
             warehouse[onerow][onecol-i] = 3;  
            }
        }
    //If twocol value is more than oneroll (two is on the right of one)
        if (onecol < twocol) {
            for(i = 1; i<twocol-onecol; i++) {
            warehouse[onerow][onecol+i] = 3;
            }
        }

        
    //Determine how the 3's will be placed vertically
        i = 0;
    //If onecol and two col are the same
        if (onecol == twocol) {
        i = 1;
        }   
        //If tworow value is lower than onerow (two is above one)
            if(onerow > tworow){
                for(i; i<onerow-tworow; i++) {
                warehouse[onerow-i][twocol] = 3;  
                }
            }
        //If tworow value is higher than onerow (two is below one)
            if(onerow<tworow){
                for(i; i<tworow-onerow; i++) {
                warehouse[onerow+i][twocol] = 3;  
                }       
            }

}
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;
	col = 0;
	row = 0;
	for(row=0; row<(NUM_ROWS); row++) {
		for(col=0; col<(NUM_COLS); col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}
}",0
tkan918,1695880990,2,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);
void PelletRoute(int warehouse[10][10]);

void PelletRoute(int warehouse[10][10])
{
    //Find the row and column of the 1 and 2
        int onerow, onecol, tworow, twocol;
        FindTile(warehouse, 1, &onerow, &onecol);
        FindTile(warehouse, 2, &tworow, &twocol);

    //Determine how the 3's will be placed horizontally
        int i;

    //If twocol value is less than oneroll (two is on the left of one)
        if (onecol > twocol) {
            for(i = 1; i<onecol-twocol; i++) {
             warehouse[onerow][onecol-i] = 3;  
            }
        }
    //If twocol value is more than oneroll (two is on the right of one)
        if (onecol < twocol) {
            for(i = 1; i<twocol-onecol; i++) {
            warehouse[onerow][onecol+i] = 3;
            }
        }

        
    //Determine how the 3's will be placed vertically
        i = 0;
    //If onecol and two col are the same
        if (onecol == twocol) {
        i = 1;
        }   
        //If tworow value is lower than onerow (two is above one)
            if(onerow > tworow){
                for(i; i<onerow-tworow; i++) {
                warehouse[onerow-i][twocol] = 3;  
                }
            }
        //If tworow value is higher than onerow (two is below one)
            if(onerow<tworow){
                for(i; i<tworow-onerow; i++) {
                warehouse[onerow+i][twocol] = 3;  
                }       
            }

}
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;
	col = 0;
	row = 0;
	for(row=0; row<(NUM_ROWS); row++) {
		for(col=0; col<(NUM_COLS); col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}
}",0
tkan918,1695881438,3,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);
void PelletRoute(int warehouse[10][10]);

void PelletRoute(int warehouse[10][10])
{
    //Find the row and column of the 1 and 2
        int onerow, onecol, tworow, twocol;
        FindTile(warehouse, 1, &onerow, &onecol);
        FindTile(warehouse, 2, &tworow, &twocol);

    //Determine how the 3's will be placed horizontally
        int i;

    //If twocol value is less than oneroll (two is on the left of one)
        if (onecol > twocol) {
            for(i = 1; i<onecol-twocol; i++) {
             warehouse[onerow][onecol-i] = 3;  
            }
        }
    //If twocol value is more than oneroll (two is on the right of one)
        if (onecol < twocol) {
            for(i = 1; i<twocol-onecol; i++) {
            warehouse[onerow][onecol+i] = 3;
            }
        }

        
    //Determine how the 3's will be placed vertically
        
    //If onecol and two col are the same
        if ((onecol == twocol) && (onerow > tworow)) {
                for(i = 1; i<onerow-tworow; i++) {
                warehouse[onerow-i][twocol] = 3;  
                }
                return;
            }

        if ((onecol == twocol) && (onerow < tworow)) {
                for(i = 1; i<tworow-onerow; i++) {
                warehouse[onerow+i][twocol] = 3; 
                }
            }        
          
        //If tworow value is lower than onerow (two is above one)
            if(onerow > tworow){
                for(i = 0; i<onerow-tworow; i++) {
                warehouse[onerow-i][twocol] = 3;  
                }
            }
        //If tworow value is higher than onerow (two is below one)
            if(onerow<tworow){
                for(i = 0; i<tworow-onerow; i++) {
                warehouse[onerow+i][twocol] = 3;  
                }       
            }

}
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;
	col = 0;
	row = 0;
	for(row=0; row<(NUM_ROWS); row++) {
		for(col=0; col<(NUM_COLS); col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}
}",0
tkan918,1695881946,4,"#define NUM_ROWS 10
#define NUM_COLS 10

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);
void PelletRoute(int warehouse[10][10]);

void PelletRoute(int warehouse[10][10])
{
    //Find the row and column of the 1 and 2
        int onerow, onecol, tworow, twocol;
        FindTile(warehouse, 1, &onerow, &onecol);
        FindTile(warehouse, 2, &tworow, &twocol);

    //Determine how the 3's will be placed horizontally
        int i;
    //If twocol value is less than oneroll (two is on the left of one)
        if (onecol > twocol) {
            for(i = 1; i<onecol-twocol; i++) {
             warehouse[onerow][onecol-i] = 3;  
            }
        }
    //If twocol value is more than oneroll (two is on the right of one)
        if (onecol < twocol) {
            for(i = 1; i<twocol-onecol; i++) {
            warehouse[onerow][onecol+i] = 3;
            }
        }

        
    //Determine how the 3's will be placed vertically
        
    //If onecol and two col are the same
        if ((onecol == twocol) && (onerow > tworow)) {
                for(i = 1; i<onerow-tworow; i++) {
                warehouse[onerow-i][twocol] = 3;  
                }
                return;
            }

        if ((onecol == twocol) && (onerow < tworow)) {
                for(i = 1; i<tworow-onerow; i++) {
                warehouse[onerow+i][twocol] = 3; 
                }
                return;
            }        
          
        //If tworow value is lower than onerow (two is above one)
            if(onerow > tworow){
                for(i = 0; i<onerow-tworow; i++) {
                warehouse[onerow-i][twocol] = 3;  
                }
            }
        //If tworow value is higher than onerow (two is below one)
            if(onerow<tworow){
                for(i = 0; i<tworow-onerow; i++) {
                warehouse[onerow+i][twocol] = 3;  
                }       
            }

}
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;
	col = 0;
	row = 0;
	for(row=0; row<(NUM_ROWS); row++) {
		for(col=0; col<(NUM_COLS); col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}
}",1
tlu253,1695885721,1,"void FindLocation(int warehouse[10][10], int item, int *rowPos, int *colPos)
{
    int i, j;
        for (i = 0; i < 10; i++) {
            for (j = 0; j < 10; j++) {
                if (warehouse[i][j] == item) {
                    *rowPos = i;
                    *colPos = j;
                }
            }
        }
}


void PelletRoute(int warehouse[10][10])
{
    int i, j;

    // Find 1
    int pelRow;
    int pelCol;

    FindLocation(warehouse, 1, &pelRow, &pelCol);

    //Find 2
    int desRow;
    int desCol;

    FindLocation(warehouse, 2, &desRow, &desCol);

    // move pellet horizontally until lines up w destination
    // if in same col don't do anything

    // if pellet in diff row and col than destination
    if (pelRow != desRow) { 
        // make in between values 3

        // if destination to right than pellet
        if (desCol > pelCol) {
            for (j = (pelCol+1); j <= desCol; j++) {
            warehouse[pelRow][j] = 3;
            }

        // if destination to left than pellet
        } else if (desCol < pelCol) {
            for (j = (pelCol-1); j >= desCol; j--) {
            warehouse[pelRow][j] = 3;
            }
        }

    // if in same row (and therefore diff col)
    } else if (pelRow == desRow) {
        // make in between values 3

        // if destination to right than pellet
        if (desCol > pelCol) {
            for (j = (pelCol+1); j < desCol; j++) {
                warehouse[pelRow][j] = 3;
            }

        // if destination to right than pellet
        } else if (desCol < pelCol) {
            for (j = (pelCol-1); j > desCol; j--) {
            warehouse[pelRow][j] = 3;
            }
        }
    
    }


    // move pellet vertically until reaches destination
    // make in between values 3

    // if destination below pellet
    if (desRow > pelRow) {
        for (i = (pelRow+1); i < desRow; i++) {
            warehouse[i][desCol] = 3;
        }

    // if destination above pellet
    } else if (desRow < pelRow) {
        for (i = (pelRow-1); i > desRow; i--) {
            warehouse[i][desCol] = 3;
        }
    }
    

}",1
tluu816,1695853108,1,"void PelletRoute(int warehouse[10][10])
{
	int r, c, rp1, cp1, rp2, cp2, x, y;
	for (r = 0; r < 10; r++) {
		for (c = 0; c < 10; c++) {
			if (warehouse[r][c] == 1) {
				rp1 = r;
				cp1 = c;
			}
			if (warehouse[r][c] == 2) {
				rp2 = r;
				cp2 = c;
			}
		}
	}
	// this one goes to the right
	if ((cp2 - cp1) > 0) {
		for (x = (cp1 + 1); x < cp2; x++) {
			warehouse[rp1][x] = 3;
			if ((warehouse[rp1][x+1]) == 0) {
				warehouse[rp1][x + 1] = 3;
			}
		}
	}
	// this one goes to left
	else if ((cp1 - cp2) > 0) {
		for (x = (cp1 -1); x > cp2; x--) {
			warehouse[rp1][x] = 3;
			if ((warehouse[rp1][x - 1]) == 0) {
				warehouse[rp1][x - 1] = 3;
			}
		}
	}
	else {
		x = cp2;
	}
	// this one goes down
	if ((rp2 - rp1) > 0) {
		for (y = (rp1+1); y < rp2; y++) {
			warehouse[y][cp2] = 3;
		}
	}
	// this one goes up
	else if ((rp1 - rp2) > 0) {
		for (y = (rp1 - 1); y > rp2; y--) {
			warehouse[y][cp2] = 3;
		}
	}
}",1
tmen190,1695631591,1,"//	PelletRoute finds index position of the last occurrence of the value being searched for
//
//	Input:
//	warehouse = the 10x10 layout of the floor with 0 (empty), 1 (initial location), 2 (final location)
// 
//	Output:
//	Change the layout to include 3 (pathway)

void PelletRoute(int warehouse[10][10]) {
	// Declare the variables
	int initialRow, initialCol, finalRow, finalCol;

	// Find the positions of the initial and final locations
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j]==1)
			{
				initialRow = i;
				initialCol = j;
			}
			else if (warehouse[i][j] == 2)
			{
				finalRow = i;
				finalCol = j;
			}
		}
	}

	// Find the path for the horizontal path
	for (int x = initialCol + 1; x <= finalCol; x++)
	{
		warehouse[initialRow][x] = 3;
	}

	// Find the path for the vertical path
	for (int y = initialRow + 1; y < finalRow; y++)
	{
		warehouse[y][finalCol] = 3;
	}
}",0
tmen190,1695632896,2,"//	PelletRoute finds index position of the last occurrence of the value being searched for
//
//	Input:
//	warehouse = the 10x10 layout of the floor with 0 (empty), 1 (initial location), 2 (final location)
// 
//	Output:
//	Change the layout to include 3 (pathway)

void PelletRoute(int warehouse[10][10]) {
	// Declare the variables
	int initialRow, initialCol, finalRow, finalCol;

	// Find the positions of the initial and final locations
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j]==1)
			{
				initialRow = i;
				initialCol = j;
			}
			else if (warehouse[i][j] == 2)
			{
				finalRow = i;
				finalCol = j;
			}
		}
	}


	// Find the path for the horizontal path
	if (finalCol > initialCol)
	{
		for (int x = initialCol + 1; x < finalCol; x++)
		{
			warehouse[initialRow][x] = 3;
		}
	}
	else if (finalCol < initialCol)
	{
		for (int x = finalCol + 1; x < initialCol; x++)
		{
			warehouse[initialRow][x] = 3;
		}
	}
	

	// Find the path for the vertical path
	if (finalRow > initialRow)
	{
		for (int y = initialRow + 1; y < finalRow; y++)
		{
			warehouse[y][finalCol] = 3;
		}
	}
	else if (finalRow < initialRow)
	{
		for (int y = finalRow + 1; y < initialRow; y++)
		{
			warehouse[y][finalCol] = 3;
		}
	}
	

	// Deal with corners
	if (finalCol != initialCol && finalRow != initialRow)
	{
		warehouse[initialRow][finalCol] = 3;
	}
}",1
tpan328,1695818739,1,"#include <stdio.h>

void FindPallet(int warehouse[10][10], int *rowLoc, int *colLoc, int *rowDes, int *colDes) 
{
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                *rowLoc = i;
                *colLoc = j;
            }
            if (warehouse[i][j] == 2) {
                *rowDes = i;
                *colDes = j;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10])
{
    int lRow, lCol, dRow, dCol;

    // Getting the location of the pallet and its destination
    FindPallet(warehouse, &lRow, &lCol, &dRow, &dCol);

printf(""lRow is: %d\nlCol is: %d\ndRow is: %d\ndCol is: %d\n"", lRow, lCol, dRow, dCol);

int row, col;

    // moving the pallet horizontally
    if (dCol > lCol) {
        col = lCol + 1;
    } else if (dCol < lCol) {
        col = lCol - 1;
    }

    while (col != dCol) {
        warehouse[lRow][col] = 3;
        if (dCol > lCol) {
            col++;
        } else if (dCol < lCol) {
            col--;
        }
    }

    // moving the pallet vertically
    row = lRow;
    while (row != dRow) {
        warehouse[row][dCol] = 3;
        if (dRow > lRow) {
            row++;
        } else if (dRow < lRow) {
            row--;
        }
    }

}",0
tpan328,1695818832,2,"#include <stdio.h>

void FindPallet(int warehouse[10][10], int *rowLoc, int *colLoc, int *rowDes, int *colDes) 
{
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                *rowLoc = i;
                *colLoc = j;
            }
            if (warehouse[i][j] == 2) {
                *rowDes = i;
                *colDes = j;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10])
{
    int lRow, lCol, dRow, dCol;

    // Getting the location of the pallet and its destination
    FindPallet(warehouse, &lRow, &lCol, &dRow, &dCol);

int row, col;

    // moving the pallet horizontally
    if (dCol > lCol) {
        col = lCol + 1;
    } else if (dCol < lCol) {
        col = lCol - 1;
    }

    while (col != dCol) {
        warehouse[lRow][col] = 3;
        if (dCol > lCol) {
            col++;
        } else if (dCol < lCol) {
            col--;
        }
    }

    // moving the pallet vertically
    row = lRow;
    while (row != dRow) {
        warehouse[row][dCol] = 3;
        if (dRow > lRow) {
            row++;
        } else if (dRow < lRow) {
            row--;
        }
    }

}",0
tpan328,1695855080,3,"#include <stdio.h>

void FindPallet(int warehouse[10][10], int *rowLoc, int *colLoc, int *rowDes, int *colDes) 
{
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                *rowLoc = i;
                *colLoc = j;
            }
            if (warehouse[i][j] == 2) {
                *rowDes = i;
                *colDes = j;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10])
{
    int lRow, lCol, dRow, dCol;

    // Getting the location of the pallet and its destination
    FindPallet(warehouse, &lRow, &lCol, &dRow, &dCol);

    int row, col;

    // moving the pallet horizontally
    if (dCol > lCol) {
        col = lCol + 1;
        while (col != dCol) {
            warehouse[lRow][col] = 3;
            col++;
        }
    } else if (dCol < lCol) {
        col = lCol - 1;
        while (col != dCol) {
            warehouse[lRow][col] = 3;
            col--;
        }
    }

    // filling in the corner
    if (lRow != dRow && lCol != dCol) {
        warehouse[lRow][dCol] = 3;
    }

    // moving the pallet vertically
    if (dRow > lRow) {
        row = lRow + 1;
        while (row != dRow) {
            warehouse[row][dCol] = 3;
            row++;
        }
    } else if (dRow < lRow) {
        row = lRow - 1;
        while (row != dRow) {
            warehouse[row][dCol] = 3;
            row--;
        }   
    }
}",1
tpil529,1695812982,1,"void PelletRoute(int warehouse[10][10])
{

    int one_row_pos, one_col_pos, two_row_pos, two_col_pos;

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {

            if (warehouse[i][j] == 1)

            {
            one_row_pos = i;
            one_col_pos = j;

            }
        }
    }

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {

            if (warehouse[i][j] == 2){

            two_row_pos = i;
            two_col_pos = j;

            }
        }
    }

    if (one_col_pos < two_col_pos)
    {
        for (int i = one_col_pos + 1; i <= two_col_pos; i++)
        {
            warehouse[one_row_pos][i] = 3;
        }
    }
    else if (one_col_pos > two_col_pos)
    {
        for (int i = two_col_pos; i < one_col_pos; i++)
        {
            warehouse[one_row_pos][i] = 3;
        }
    }

    if (one_row_pos < two_row_pos)
    {
        for (int i = one_row_pos + 1; i < two_row_pos; i++)
        {
            warehouse[i][two_col_pos] = 3;
        }
    }
    else if (one_row_pos > two_row_pos)
    {
        for (int i = two_row_pos + 1; i < one_row_pos; i++)
        {
            warehouse[i][two_col_pos] = 3;
        }
    }

return;




}",0
tpil529,1695816351,2,"void PelletRoute(int warehouse[10][10])
{

    int one_row_pos, one_col_pos, two_row_pos, two_col_pos;

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {

            if (warehouse[i][j] == 1)

            {
            one_row_pos = i;
            one_col_pos = j;

            }
        }
    }

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {

            if (warehouse[i][j] == 2){

            two_row_pos = i;
            two_col_pos = j;

            }
        }
    }

    if (one_col_pos < two_col_pos)
    {

        if (one_row_pos < two_row_pos)
        {
            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = one_row_pos; i < two_row_pos; i++)
            {
                warehouse[i][two_col_pos] = 3;
            }
        }
        else if (one_row_pos > two_row_pos)
        {
            for (int i = one_col_pos + 1; i <= two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = one_row_pos; i < two_row_pos; i++)
            {
                warehouse[i][two_col_pos] = 3;
            }
        }
        else if (one_row_pos == two_row_pos)
        {

            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
        }
    }

    else if (one_col_pos > two_col_pos)
    {

        if (one_row_pos < two_row_pos)
        {
            for (int i = two_col_pos + 1; i < one_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = one_row_pos; i < two_row_pos; i++)
            {
                warehouse[i][two_col_pos] = 3;
            }
        }
        else if (one_row_pos > two_row_pos)
        {
            for (int i = two_col_pos; i < one_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = two_row_pos+1; i < one_row_pos; i++)
            {
                warehouse[i][two_col_pos] = 3;
            }
        }
        else if (one_row_pos == two_row_pos)
        {
            for (int i = two_col_pos + 1; i < one_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }

            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
        }

    }

    else if (one_col_pos == two_col_pos)
    {

        if (one_row_pos > two_row_pos)
        {
            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = two_row_pos + 1; i < one_row_pos; i++)
            {
                warehouse[i][one_col_pos] = 3;
            }
        }
        if (one_row_pos < two_row_pos)
        {
            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = one_row_pos + 1; i < two_row_pos; i++)
            {
                warehouse[i][one_col_pos] = 3;
            }
        }

    }



return;


}
",0
tpil529,1695816699,3,"void PelletRoute(int warehouse[10][10])
{

    int one_row_pos, one_col_pos, two_row_pos, two_col_pos;

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {

            if (warehouse[i][j] == 1)

            {
            one_row_pos = i;
            one_col_pos = j;

            }
        }
    }

    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {

            if (warehouse[i][j] == 2){

            two_row_pos = i;
            two_col_pos = j;

            }
        }
    }

    if (one_col_pos < two_col_pos)
    {

        if (one_row_pos < two_row_pos)
        {
            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = one_row_pos; i < two_row_pos; i++)
            {
                warehouse[i][two_col_pos] = 3;
            }
        }
        else if (one_row_pos > two_row_pos)
        {
            for (int i = one_col_pos + 1; i <= two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = two_row_pos +1; i < one_row_pos; i++)
            {
                warehouse[i][two_col_pos] = 3;
            }
        }
        else if (one_row_pos == two_row_pos)
        {

            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
        }
    }

    else if (one_col_pos > two_col_pos)
    {

        if (one_row_pos < two_row_pos)
        {
            for (int i = two_col_pos + 1; i < one_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = one_row_pos; i < two_row_pos; i++)
            {
                warehouse[i][two_col_pos] = 3;
            }
        }
        else if (one_row_pos > two_row_pos)
        {
            for (int i = two_col_pos; i < one_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = two_row_pos+1; i < one_row_pos; i++)
            {
                warehouse[i][two_col_pos] = 3;
            }
        }
        else if (one_row_pos == two_row_pos)
        {
            for (int i = two_col_pos + 1; i < one_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }

            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
        }

    }

    else if (one_col_pos == two_col_pos)
    {

        if (one_row_pos > two_row_pos)
        {
            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = two_row_pos + 1; i < one_row_pos; i++)
            {
                warehouse[i][one_col_pos] = 3;
            }
        }
        if (one_row_pos < two_row_pos)
        {
            for (int i = one_col_pos + 1; i < two_col_pos; i++)
            {
                warehouse[one_row_pos][i] = 3;
            }
            for (int i = one_row_pos + 1; i < two_row_pos; i++)
            {
                warehouse[i][one_col_pos] = 3;
            }
        }

    }



return;


}
",1
tpur744,1695796989,1,"#include <stdio.h>
void PelletRoute(int warehouse[10][10]){
	int pelletRow, pelletCol;
	int destinationRow, destinationCol;

	for (int i=0;i<10;i++){
		for (int j=0;j<10;j++){
			if (warehouse[i][j] == 1){
				pelletRow = i;
				pelletCol = j;
			}
			if (warehouse[i][j] == 2){
				destinationRow = i;
				destinationCol = j;
			}
		}
		
	}
	while(pelletCol != destinationCol){
		if (pelletCol > destinationCol){
			pelletCol--;
		}else{
			pelletCol++;
		}
		if (warehouse[pelletRow][pelletCol] != 2){
			warehouse[pelletRow][pelletCol] = 3;
		}
	}
	while (pelletRow != destinationRow){
		if(pelletRow > destinationRow){
			pelletRow--;
		}else{
			pelletRow++;
		}
		if (warehouse[pelletRow][pelletCol] != 2){
			warehouse[pelletRow][pelletCol] = 3;
		}
	}
}",1
tqhu735,1695670663,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, iPellet, jPellet, iDest, jDest, hDist, vDist;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				iPellet = i;
				jPellet = j;
			}
			else if (warehouse[i][j] == 2) {
				iDest = i;
				jDest = j;
			}
		}
	}

	vDist = abs(iPellet - iDest); // Finds the vertical distance between points (rows)
	hDist = abs(jPellet - jDest); // Finds the horizontal distance between points (columns)

	int jInt, iInt;

	if (jDest > jPellet) { // When the pellet needs to move to the right
		int d;
		if (iPellet == iDest) {
			hDist--;
			for (d = 1; d <= hDist; d++) {
				warehouse[iPellet][jPellet + d] = 3;
			}
			jInt = jPellet + d - 1;
		}
		for (d = 1; d <= hDist; d++) {
			warehouse[iPellet][jPellet + d] = 3;
		}
		jInt = jPellet + d - 1;
	}
	else if (jDest < jPellet) { // When the pellet needs to move to the left
		int d;
		if (iPellet == iDest) {
			hDist--;
			for (d = 1; d <= hDist; d++) {
				warehouse[iPellet][jPellet - d] = 3;
			}
			jInt = jPellet - d + 1;
		}
		for (d = 1; d <= hDist; d++) {
			warehouse[iPellet][jPellet - d] = 3;
		}
		jInt = jPellet - d + 1;
	}
	else if (jDest == jPellet) { // When the pellet and destination are in the same column
		jInt = jPellet;
	}

	if (iDest > iPellet) { // When the pellet needs to move down
		int d;
		for (d = 1; d < vDist; d++) {
			warehouse[iPellet + d][jInt] = 3;
		}
		iInt = iPellet + d;
	}
	else if (iDest < iPellet) { // When the pellet needs to move up
		int d;
		for (d = 1; d < vDist; d++) {
			warehouse[iPellet - d][jInt] = 3;
		}
		iInt = iPellet + d;
	}
	else if (iDest == iPellet) { //When the pellet and destination are in the same row
		iInt = iPellet;
	}
}",0
tqhu735,1695670905,2,"void PelletRoute(int warehouse[10][10])
{
	int i, j, iPellet, jPellet, iDest, jDest, hDist, vDist;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				iPellet = i;
				jPellet = j;
			}
			else if (warehouse[i][j] == 2) {
				iDest = i;
				jDest = j;
			}
		}
	}

	vDist = abs(iPellet - iDest); // Finds the vertical distance between points (rows)
	hDist = abs(jPellet - jDest); // Finds the horizontal distance between points (columns)

	int jInt;

	if (jDest > jPellet) { // When the pellet needs to move to the right
		int d;
		if (iPellet == iDest) {
			hDist--;
			for (d = 1; d <= hDist; d++) {
				warehouse[iPellet][jPellet + d] = 3;
			}
			jInt = jPellet + d - 1;
		}
		for (d = 1; d <= hDist; d++) {
			warehouse[iPellet][jPellet + d] = 3;
		}
		jInt = jPellet + d - 1;
	}
	else if (jDest < jPellet) { // When the pellet needs to move to the left
		int d;
		if (iPellet == iDest) {
			hDist--;
			for (d = 1; d <= hDist; d++) {
				warehouse[iPellet][jPellet - d] = 3;
			}
			jInt = jPellet - d + 1;
		}
		for (d = 1; d <= hDist; d++) {
			warehouse[iPellet][jPellet - d] = 3;
		}
		jInt = jPellet - d + 1;
	}
	else if (jDest == jPellet) { // When the pellet and destination are in the same column
		jInt = jPellet;
	}

	if (iDest > iPellet) { // When the pellet needs to move down
		int d;
		for (d = 1; d < vDist; d++) {
			warehouse[iPellet + d][jInt] = 3;
		}
	}
	else if (iDest < iPellet) { // When the pellet needs to move up
		int d;
		for (d = 1; d < vDist; d++) {
			warehouse[iPellet - d][jInt] = 3;
		}
	}
}",1
twol698,1695805852,1,"
void PelletRoute(int warehouse[10][10]){
    int rowPos1, rowPos2, colPos1,colPos2;
    for(int i = 0; i<10 ;i++){
		for (int j = 0; j<10; j++){
			if (warehouse[i][j] == 1){
				rowPos1 = i;
				colPos1 = j;
			}
            if (warehouse[i][j] == 2){
			    rowPos2 = i;
				colPos2 = j;
			}
		}
	}
    while (colPos2-colPos1!=0){
        if (colPos2-colPos1 >0){
            colPos1++;
            warehouse[rowPos1][colPos1] = 3; 
        }
        if (colPos2-colPos1<0){
            colPos1--;
            warehouse[rowPos1][colPos1]= 3; 
        }
    }

    while ((rowPos2-rowPos1>1)|(rowPos2-rowPos1<-1)){
        if (rowPos2-rowPos1 >0){
            rowPos1++;
            warehouse[rowPos1][colPos1] = 3; 
        }
        if (rowPos2-rowPos1<0){
            rowPos1--;
            warehouse[rowPos1][colPos1]= 3; 
        }
    }
}",0
twol698,1695806332,2,"void PelletRoute(int warehouse[10][10]){
    int rowPos1, rowPos2, colPos1,colPos2;
    for(int i = 0; i<10 ;i++){
		for (int j = 0; j<10; j++){
			if (warehouse[i][j] == 1){
				rowPos1 = i;
				colPos1 = j;
			}
            if (warehouse[i][j] == 2){
			    rowPos2 = i;
				colPos2 = j;
			}
		}
	}
    while (colPos2-colPos1!=0){
        if ((warehouse[rowPos1][colPos1 +1]== 2)|(warehouse[rowPos1][colPos1-1] == 2)){
            break;
        }
        if (colPos2-colPos1 >0){
            colPos1++;
            warehouse[rowPos1][colPos1] = 3; 
        }
        if (colPos2-colPos1<0){
            colPos1--;
            warehouse[rowPos1][colPos1]= 3; 
        }
    }

    while ((rowPos2-rowPos1>1)|(rowPos2-rowPos1<-1)){
        if ((warehouse[rowPos1+1][colPos1]== 2)|(warehouse[rowPos1-1][colPos1] == 2)){
            break;
        }
        if (rowPos2-rowPos1 >0){
            rowPos1++;
            warehouse[rowPos1][colPos1] = 3; 
        }
        if (rowPos2-rowPos1<0){
            rowPos1--;
            warehouse[rowPos1][colPos1]= 3; 
        }
    }
}",1
tyou333,1695634865,1,"void PelletRoute(int warehouse[10][10]) {
    int startRow, startCol, endRow, endCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                startRow = i;
                startCol = j;
            } else if (warehouse[i][j] == 2) {
                endRow = i;
                endCol = j;
            }
        }
    }

    int horizDis = abs(endCol - startCol) + 1;
    int vertDis = abs(endRow - startRow);
    int stopCol;

    if (vertDis == 0) {
        horizDis -= 1;
    }

    if (startCol < endCol) {
        stopCol = endCol;
    } else {
        stopCol = startCol;
    }

    for (int a = 1; a < horizDis; a++) {
        if (startCol < endCol) {
            warehouse[startRow][startCol + a] = 3;
            stopCol = startCol + a;
        } else if (endCol < startCol) {
            warehouse[startRow][startCol - a] = 3;
            stopCol = startCol - a;
        }
    }

    for (int b = 1; b < vertDis; b++) {
        if (startRow < endRow) {
            warehouse[startRow + b][stopCol] = 3;
        } else if (endRow < startRow) {
            warehouse[startRow - b][stopCol] = 3;
        }
    }
}",1
tyou421,1695977587,1,"void PelletRoute(int warehouse[10][10])
{
	/*This function maps the most efficient way to move a pellet from position 1
	  to position 2. The pellets can only move horizontally and vertically, from
	  a bird's eye view.

	 Inputs:
			warehouse: A 10-by-10 2D array with an element of 1 representing the
			location of the pellet, an element of 2 representing the location the
			pellet is to be moved to, and every other element is 0.
	 Outputs:
			None.

	 Author: Toma Yousif*/

	 // Declare the indexers and storing variables.
	int i;
	int j;
	int oneRow, oneCol;
	int twoRow, twoCol;

	// Iterate through the 2D array and look for 1, then store its position.
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				oneRow = i;
				oneCol = j;
			}
		}
	}

	// Iterate through the 2D array and look for 2, then store its position.
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 2)
			{
				twoRow = i;
				twoCol = j;
			}
		}
	}


	// If 2 is found to the right of 1 and on different rows,
	// replace every element between them with a 3.
	if ((twoCol > oneCol) && (oneRow != twoRow))
	{
		for (j = oneCol + 1; j = twoCol; j++);
		{
			warehouse[oneRow][j] = 3;
		}

	}

	// If 2 is found to the right of 1 and on the same row,
	// replace every element between them with a 3.
	else if ((twoCol > oneCol) && (oneRow == twoRow))
	{
		for (j = oneCol + 1; j < twoCol; j++)
		{
			warehouse[oneRow][j] = 3;
		}
	}

	// If 2 is found to the left of 1 and on different rows,
	// replace every element between them with a 3.
	if ((oneCol > twoCol) && (oneRow != twoRow))
	{
		for (j = twoCol + 1; j = oneCol; j++);
		{
			warehouse[oneRow][j] = 3;
		}

	}

	// If 2 is found on the left of 1 and on the same row,
	// replace every element between them with a 3.
	else if ((oneCol > twoCol) && (oneRow == twoRow))
	{
		for (j = twoCol + 1; j < oneCol; j++)
		{
			warehouse[oneRow][j] = 3;
		}
	}

	// If 2 is found further down relative to 1, iterate
	// through every value in between the two values (but
	// on the same column) and replace it with a 3.
	if (twoRow > oneRow)
	{
		for (i = oneRow + 1; i < twoRow; i++)
		{
			warehouse[i][twoCol] = 3;
		}
	}

	// Else, 2 is found further up relative to 1. Iterate
	// through every value in between the two values (but
	// on the same column) and replace it with a 3.
	else
	{
		for (i = twoRow + 1; i < oneRow; i++)
		{
			warehouse[i][oneCol] = 3;
		}
	}
}",0
tyou421,1696143178,2,"void PelletRoute(int warehouse[10][10])
{
	/*This function maps the most efficient way to move a pellet from position 1
	  to position 2. The pellets can only move horizontally and vertically, from
	  a bird's eye view. The pellet should move horizontally first, then vertically.

	 Inputs:
		warehouse: A 10-by-10 2D array with an element of 1 representing the
		location of the pellet, an element of 2 representing the location the
		pellet is to be moved to, and every other element is 0.
	 Outputs:
		None.

	 Author: Toma Yousif*/



	// Declare the indexers and variables.
	int i, j;
	int oneRow, oneCol;
	int twoRow, twoCol;


	// Loop through the 2D array and find the location of 1.
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				oneRow = i;
				oneCol = j;
			}
		}
	}


	// Loop through the 2D array and find the location of 2.
	for (i = 0; i < 10; i++)
	{
		for (j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 2)
			{
				twoRow = i;
				twoCol = j;
			}
		}
	}


	// Scenario 1 - Different columns, same row, 1 appears first.
	if ((twoCol > oneCol) && (twoRow == oneRow))
	{
		for (i = oneCol + 1; i < twoCol; i++)
		{
			warehouse[oneRow][i] = 3;
		}
	}


	// Scenario 2 - Different columns, same row, 2 appears first.
	else if ((oneCol > twoCol) && (twoRow == oneRow))
	{
		for (i = oneCol - 1;  twoCol < i; i--)
		{
			warehouse[oneRow][i] = 3;
		}
	}


	// Scenario 3 - Same column, different rows, 1 appears first.
	if ((twoRow > oneRow) && (oneCol == twoCol))
	{
		for (i = oneRow + 1; i < twoRow; i++)
		{
			warehouse[i][oneCol] = 3;
		}
	}


	// Scenario 4 - Same column, different rows, 2 appears first.
	else if ((oneRow > twoRow) && (oneCol == twoCol))
	{
		for (i = twoRow + 1; i < oneRow; i++)
		{
			warehouse[i][oneCol] = 3;
		}
	}


	// Scenario 5 - 1 Appears in the top left relative to 2.
	if ((twoCol > oneCol) && (twoRow > oneRow))
	{
		for (i = oneCol + 1; i < twoCol + 1; i++)
		{
			warehouse[oneRow][i] = 3;
		}

		for (i = oneRow + 1; i < twoRow; i++)
		{
			warehouse[i][twoCol] = 3;
		}
	}


	// Scenario 6 - 1 Appears in the top right relative to 2.
	if ((oneCol > twoCol) && (twoRow > oneRow))
	{
		for (i = oneCol - 1; twoCol - 1 < i; i--)
		{
			warehouse[oneRow][i] = 3;
		}

		for (i = oneRow; i < twoRow; i++)
		{
			warehouse[i][twoCol] = 3;
		}
	}


	// Scenario 7 - 1 Appears in the bottom right relative to 2.
	if ((oneRow > twoRow) && (oneCol > twoCol))
	{
		for (i = oneCol - 1; twoCol - 1 < i; i--)
		{
			warehouse[oneRow][i] = 3;
		}

		for (i = oneRow - 1; twoRow < i; i--)
		{
			warehouse[i][twoCol] = 3;
		}
	}


	// Scenario 8 - 1 Appears in the bottom left relative to 2.
	if ((oneRow > twoRow) && (twoCol > oneCol))
	{
		for (i = oneCol + 1; i < twoCol + 1; i++)
		{
			warehouse[oneRow][i] = 3;
		}

		for (i = oneRow - 1; i > twoRow; i--)
		{
			warehouse[i][twoCol] = 3;
		}
	}
}",1
tzha578,1695618003,1,"#include <stdio.h>
void PelletRoute(int array[10][10]){
    int row1,row2,col1,col2,i,j;
    for (i = 0;i<10;++i){
        for (j = 0;j<10;++j){
            if(array[i][j] == 1){
                row1 = i;
                col1 = j;
            }
            if(array[i][j] == 2){
                row2 = i;
                col2 = j;
            }
        }
    }
    for (i = row1;i<row2;i++){
        array[i][col2] = 3;
    }
    for (i = row1;i>row2;i--){
        array[i][col2] = 3;
    }
    for (j = col2;j>col1;j--){
        array[row1][j] = 3;
    }
    for(j = col2;j<col1;j++){
        array[row1][j] = 3;
    }
}",0
tzha578,1695618419,2,"#include <stdio.h>
void PelletRoute(int array[10][10]){
    int row1,row2,col1,col2,i,j;
    for (i = 0;i<10;++i){
        for (j = 0;j<10;++j){
            if(array[i][j] == 1){
                row1 = i;
                col1 = j;
            }
            if(array[i][j] == 2){
                row2 = i;
                col2 = j;
            }
        }
    }
    for (i = row1;i<row2;i++){
        array[i][col2] = 3;
    }
    for (i = row1;i>row2;i--){
        array[i][col2] = 3;
    }
    for (j = col2;j>col1;j--){
        array[row1][j] = 3;
    }
    for(j = col2;j<col1;j++){
        array[row1][j] = 3;
    }
    if ((row1 == row2) || (col1 == col2)){
        array[row1][col1] = 1;
        array[row2][col2] = 2;
    }
}",1
ujai264,1696032781,1,"void PelletRoute(int warehouse[10][10]){
int row1 = -1;
int col1 = -1;
int row2 = -1;
int col2 = -1;

for (int i = 0; i < 10; i++){
    for(int j = 0; j < 10; j++){
    
        if (warehouse[i][j] == 1){
            row1 = i;
            col1 = j;
        }
        if (warehouse[i][j] == 2){
            row2 = i;
            col2 = j;
        }
    }
}
if (col1 != col2){

    while (col1+1 < col2){
        col1++;
        warehouse[row1][col1] = 3;

    }
    if (warehouse[row1][col1+1] == 0 && col1 < col2){
        col1++;
        warehouse[row1][col1] = 3;
    }
    while (col1-1 > col2){
        col1--;
        warehouse[row1][col1] = 3;

    }
    if (warehouse[row1][col1-1] == 0){
        col1--;
        warehouse[row1][col1] = 3;
    }
    
}
if (row1 != row2){
    while (row1+1 < row2){
        row1++;
        warehouse[row1][col1] = 3;
    }
    if (warehouse[row1 + 1][col1] == 0 && row1 < row2){
        warehouse[row1][col1] = 3;
    }
    while (row1-1 > row2){
        row1--;
        warehouse[row1][col1] = 3;
    }
    if (warehouse[row1 - 1][col1] == 0){
        row1--;
        warehouse[row1][col1] = 3;
    }
}
}",0
ujai264,1696033109,2,"void PelletRoute(int warehouse[10][10]){
int row1 = -1;
int col1 = -1;
int row2 = -1;
int col2 = -1;

for (int i = 0; i < 10; i++){
    for(int j = 0; j < 10; j++){
    
        if (warehouse[i][j] == 1){
            row1 = i;
            col1 = j;
        }
        if (warehouse[i][j] == 2){
            row2 = i;
            col2 = j;
        }
    }
}
if (col1 != col2){

    while (col1+1 < col2){
        col1++;
        warehouse[row1][col1] = 3;

    }
    if (warehouse[row1][col1+1] == 0 && col1 < col2){
        col1++;
        warehouse[row1][col1] = 3;
    }
    while (col1-1 > col2){
        col1--;
        warehouse[row1][col1] = 3;

    }
    if (warehouse[row1][col1-1] == 0 && col1 > col2){
        col1--;
        warehouse[row1][col1] = 3;
    }
    
}
if (row1 != row2){
    while (row1+1 < row2){
        row1++;
        warehouse[row1][col1] = 3;
    }
    if (warehouse[row1 + 1][col1] == 0 && row1 < row2){
        warehouse[row1][col1] = 3;
    }
    while (row1-1 > row2){
        row1--;
        warehouse[row1][col1] = 3;
    }
    if (warehouse[row1 - 1][col1] == 0 && row2 < row1){
        row1--;
        warehouse[row1][col1] = 3;
    }
}
}",1
vxie208,1695867011,1,"void PelletRoute(int warehouse[10][10]) {
	int i, j;
	int	rowOne;
	int	colOne, rowTwo, colTwo;
	//Finding positions of 1 and 2 in the array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowOne = i;
				colOne = j;
			}
		}
	}
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowTwo = i;
				colTwo = j;
			}
		}
	}
	// Moving horizontally
	while (colOne != colTwo) {
		if (colOne < colTwo) {
			colOne++;
		}
		else {
			colOne--;
		}
		warehouse[rowOne][colOne] = 3;
	}

	// Moving vertically
	while (rowOne != rowTwo) {
		warehouse[rowOne][colOne] = 3;
		if (rowOne < rowTwo) {
			rowOne++;
		}
		else {
			rowOne--;
		}
	}
}",0
vxie208,1695868055,2,"void PelletRoute(int warehouse[10][10]) {
	int i, j;
	int	rowOne;
	int	colOne, rowTwo, colTwo;
	//Finding positions of 1 and 2 in the array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowOne = i;
				colOne = j;
			}
		}
	}
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowTwo = i;
				colTwo = j;
				//printf(""%d %d\n"", rowTwo, colTwo);
			}
		}
	}
	// Moving horizontally
	while (colOne != colTwo) {
		if (colOne < colTwo) {
			colOne++;
		}
		else {
			colOne--;
		}
		if (colOne != colTwo) {
			warehouse[rowOne][colOne] = 3;
		}
	}

	// Moving vertically
	while (rowOne != rowTwo) {
		if (rowOne < rowTwo) {
			rowOne++;
		}
		else {
			rowOne--;
		}
		if (rowOne != rowTwo) {
			warehouse[rowOne][colOne] = 3;
		}
	}
}",0
vxie208,1695868455,3,"void PelletRoute(int warehouse[10][10]) {
	int i, j;
	int	rowOne;
	int	colOne, rowTwo, colTwo;
	//Finding positions of 1 and 2 in the array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowOne = i;
				colOne = j;
			}
		}
	}
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowTwo = i;
				colTwo = j;
				//printf(""%d %d\n"", rowTwo, colTwo);
			}
		}
	}
	// Moving horizontally
	while (colOne != colTwo) {
		if (colOne < colTwo) {
			colOne++;
		}
		else {
			colOne--;
		}
		if (colOne != colTwo) {
			warehouse[rowOne][colOne] = 3;
		}
		if (rowOne != rowTwo) {
			warehouse[rowOne][colOne] = 3;
		}
	}",0
vxie208,1695868487,4,"void PelletRoute(int warehouse[10][10]) {
	int i, j;
	int	rowOne;
	int	colOne, rowTwo, colTwo;
	//Finding positions of 1 and 2 in the array
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				rowOne = i;
				colOne = j;
			}
		}
	}
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 2) {
				rowTwo = i;
				colTwo = j;
				//printf(""%d %d\n"", rowTwo, colTwo);
			}
		}
	}
	// Moving horizontally
	while (colOne != colTwo) {
		if (colOne < colTwo) {
			colOne++;
		}
		else {
			colOne--;
		}
		if (colOne != colTwo) {
			warehouse[rowOne][colOne] = 3;
		}
		if (rowOne != rowTwo) {
			warehouse[rowOne][colOne] = 3;
		}
	}

	// Moving vertically
	while (rowOne != rowTwo) {
		if (rowOne < rowTwo) {
			rowOne++;
		}
		else {
			rowOne--;
		}
		if (rowOne != rowTwo) {
			warehouse[rowOne][colOne] = 3;
		}
	}
}",1
wany079,1695995716,1,"#include <stdio.h>
void PelletRoute(int warehouse[10][10]) {
	int i;
	int j;
	int k;
	int l;
	int rowStart;
	int rowFinish;
	int colStart;
	int colFinish;

	// finds the position of the start location and destination
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {	
			if (warehouse[i][j] == 1) {
				rowStart = i;
				colStart = j;
			}
			if (warehouse[i][j] == 2) {
				rowFinish = i;
				colFinish = j;
			}
		}
	}

	// horizontal movement
	if (colStart < colFinish && rowStart != rowFinish) {
		for (k = colStart + 1; k <= colFinish; k++) {
			warehouse[rowStart][k] = 3;
		}
	}
	else if (colStart > colFinish && rowStart != rowFinish) {
		for (k = colStart - 1; k >= colFinish; k--) {
			warehouse[rowStart][k] = 3;
		}
	}
	else if (rowStart == rowFinish && colStart < colFinish) {
		for (k = colStart + 1; k < colFinish; k++) {
			warehouse[rowStart][k] = 3;
		}
	}
	else if (rowStart == rowFinish && colStart > colFinish) {
		for (k = colStart - 1; k > colFinish; k--) {
			warehouse[rowStart][k] = 3;
		}
	}

	// vertical movement
	if (rowStart < rowFinish && colStart != colFinish) {
		for (l = rowStart + 1; l < rowFinish; l++) {
			warehouse[l][colFinish] = 3;
		}
	}
	else if (rowStart > rowFinish && colStart != colFinish) {
		for (l = rowStart - 1; l > rowFinish; l--) {
			warehouse[l][colFinish] = 3;
		}
	}
	else if (colStart == colFinish && rowStart < rowFinish) {
		for (l = rowStart + 1; l < rowFinish; l++) {
			warehouse[l][colFinish] = 3;
		}
	}
	else if (colStart == colFinish && rowStart > rowFinish) {
		for (l = rowStart - 1; l > rowFinish; l--) {
			warehouse[l][colFinish] = 3;
		}
	}
}",1
wany722,1695700784,1,"#include<stdio.h>
void PelletRoute(int warehouse[10][10]){
    int i, j, po1i, po1j, po2i, po2j;
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                po1i = i;
                po1j = j;
            }
            if (warehouse[i][j] == 2){
                po2i = i;
                po2j = j;
            }
        }
    }
    while(po1j != po2j){
        if (po1j < po2j){
            po1j++;
        }
        else if(po1j > po2j){
            po1j--;
        }
        warehouse[po1i][po1j] = 3;
    }
    while(po1i != po2i){
        if (po1i < po2i){
            po1i++;
        }
        else if(po1i > po2i){
            po1i--;
        }
        warehouse[po1i][po1j] = 3;
    }
    warehouse[po1i][po1j] = 2;
}
",1
wany843,1695699420,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletX, pelletY, destX, destY;

    // 找到初始位置和目标位置
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletX = j;
                pelletY = i;
            } else if (warehouse[i][j] == 2) {
                destX = j;
                destY = i;
            }
        }
    }

    // 水平移动至目标列
    while (pelletX != destX) {
        if (pelletX < destX) {
            warehouse[pelletY][pelletX + 1] = 3;
            pelletX++;
        } else {
            warehouse[pelletY][pelletX - 1] = 3;
            pelletX--;
        }
    }

    // 垂直移动至目标行
    while (pelletY != destY) {
        if (pelletY < destY) {
            warehouse[pelletY + 1][pelletX] = 3;
            pelletY++;
        } else {
            warehouse[pelletY - 1][pelletX] = 3;
            pelletY--;
        }
    }
}
",0
wany843,1695699773,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int start_i = -1, start_j = -1;
    int end_i = -1, end_j = -1;

    // 寻找起始点和终止点
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                start_i = i;
                start_j = j;
            }
            if (warehouse[i][j] == 2) {
                end_i = i;
                end_j = j;
            }
        }
    }

    // 标记路径为3
    int j = start_j;
    while (j != end_j) {
        j++;
        warehouse[start_i][j] = 3;
    }

    int i = start_i;
    while (i != end_i) {
        if (end_i > start_i) {
            i++;
        } else {
            i--;
        }
        warehouse[i][j] = 3;
    }
}",0
wany843,1695699873,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int start_i = -1, start_j = -1;
    int end_i = -1, end_j = -1;

    // 寻找起始点和终止点
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                start_i = i;
                start_j = j;
            }
            if (warehouse[i][j] == 2) {
                end_i = i;
                end_j = j;
            }
        }
    }

    // 标记路径为3
    // 首先处理水平方向
    while (start_j != end_j) {
        if (end_j > start_j) {
            start_j++;
        } else {
            start_j--;
        }
        warehouse[start_i][start_j] = 3;
    }

    // 接着处理垂直方向
    while (start_i != end_i) {
        if (end_i > start_i) {
            start_i++;
        } else {
            start_i--;
        }
        warehouse[start_i][start_j] = 3;
    }
}",0
wany843,1695700842,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int start_i = -1, start_j = -1;
    int end_i = -1, end_j = -1;

    // 寻找起始点和终止点
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                start_i = i;
                start_j = j;
            }
            if (warehouse[i][j] == 2) {
                end_i = i;
                end_j = j;
            }
        }
    }

    // 标记路径为3
    // 首先处理水平方向
    while (start_j != end_j) {
        if (end_j > start_j) {
            start_j++;
        } else {
            start_j--;
        }
        warehouse[start_i][start_j] = 3;
    }

    // 接着处理垂直方向
    while (start_i != end_i) {
        if (end_i > start_i) {
            start_i++;
        } else {
            start_i--;
        }
        warehouse[start_i][start_j] = 3;
    }
    warehouse[start_i][start_j] = 2;
}",1
wkev690,1695854894,1,"void PelletRoute(int warehouse[10][10]){
    // find where 1 and 2 is
    int rowOrigin1;
    int colOrigin1;
    int rowOrigin2;
    int colOrigin2;
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1){
                rowOrigin1 = i;
                colOrigin1 = j;
                
            }else if (warehouse[i][j] == 2){
                rowOrigin2 = i;
                colOrigin2 = j;
            }
        }     
    }

    // find difference in position
    int newCol = colOrigin1;    
    if (colOrigin2 > colOrigin1){
        for (int i = colOrigin1; i < colOrigin2; i++)
        {
            warehouse[rowOrigin1][i+1] = 3;
            newCol++;
        }

    }else if (colOrigin2 < colOrigin1){
        for (int i = colOrigin1; i > colOrigin2; i--)
        {
            warehouse[rowOrigin1][i-1] = 3;
            newCol--;
        }
        
    }

    if (rowOrigin2 > rowOrigin1)
    {
        // go to 2
        for (int i = rowOrigin1; i < rowOrigin2-1; i++)
        {
            warehouse[i+1][newCol] = 3;
            
        }
        
    }else if (rowOrigin2 < rowOrigin1)
    {   
        // go to 2
        for (int i = rowOrigin1; i > rowOrigin2-1; i--)
        {
            warehouse[i+1][newCol] = 3;
        }
        
    }
}",0
wkev690,1695856638,2,"void PelletRoute(int warehouse[10][10]){
    // find where 1 and 2 is
    int rowOrigin1;
    int colOrigin1;
    int rowOrigin2;
    int colOrigin2;
    for (int i = 0; i < 10; i++)
    {
        for (int j = 0; j < 10; j++)
        {
            if (warehouse[i][j] == 1){
                rowOrigin1 = i;
                colOrigin1 = j;
                
            }else if (warehouse[i][j] == 2){
                rowOrigin2 = i;
                colOrigin2 = j;
            }
        }     
    }

    // find difference in position
    int newCol = colOrigin1;    
    if (colOrigin2 > colOrigin1){
        if (rowOrigin1 == rowOrigin2){
            for (int i = colOrigin1; i < colOrigin2-1; i++)
            {
            warehouse[rowOrigin1][i+1] = 3;
            newCol++;
            }
        }else
        {
            for (int i = colOrigin1; i < colOrigin2; i++)
            {
            warehouse[rowOrigin1][i+1] = 3;
            newCol++;
            } 
        }
        
        

    }else if (colOrigin2 < colOrigin1){
        if (rowOrigin1 == rowOrigin2){
            for (int i = colOrigin1; i > colOrigin2+1; i--)
            {
            warehouse[rowOrigin1][i-1] = 3;
            newCol--;
            }
        }else
        {
            for (int i = colOrigin1; i > colOrigin2; i--)
            {
            warehouse[rowOrigin1][i-1] = 3;
            newCol--;
            }
        }
        
        
        
    }

    if (rowOrigin2 > rowOrigin1)
    {
        // go to 2
        for (int i = rowOrigin1; i < rowOrigin2-1; i++)
        {
            warehouse[i+1][newCol] = 3;
            
        }
        
    }else if (rowOrigin2 < rowOrigin1)
    {   
        // go to 2
        for (int i = rowOrigin1; i > rowOrigin2; i--)
        {
            warehouse[i][newCol] = 3;
        }
        
    }
}",0
wli798,1696223619,1,"#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[10][10]) {
    int row1, row2, col1, col2, i, j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }

    if (col1 < col2 && row2 > row1) {
        for (j = col1 + 1; j <= col2; j++) {
            warehouse[row1][j] = 3;
        }
        for (i = row1; i < row2; i++) {
            warehouse[i][col2] = 3;
        }
    }

    if (col1 > col2 && row2 > row1) {
        for (j = col1 - 1; j >= col2; j--) {
            warehouse[row1][j] = 3;
        }
        for (i = row1; i < row2; i++) {
            warehouse[i][col2] = 3;
        }
    }

    if (col1 > col2 && row2 < row1) {
        for (j = col2 + 1; j <= col1; j++) {
            warehouse[row2][j] = 3;
        }
        for (i = row2; i < row1; i++) {
            warehouse[i][col1] = 3;
        }
    }

    if (col2 > col1 && row2 < row1) {
        for (j = col2 - 1; j >= col1; j--) {
            warehouse[row2][j] = 3;
        }
        for (i = row2; i < row1; i++) {
            warehouse[i][col1] = 3;
        }
    }

    if ((col1 == col2) && (row1 < row2)) {
        for (i = row1 + 1; i < row2; i++) {
            warehouse[i][col1] = 3;
        }
    }

    if ((row1 == row2) && (col1 < col2)) {
        for (j = col1 + 1; j < col2; j++) {
            warehouse[row1][j] = 3;
        }
    }

    if ((col1 == col2) && (col2 < col1)) {
        for (i = row2 + 1; i < row1; i++) {
            warehouse[i][col1] = 3;
        }
    }

    if ((row1 == row2) && (row2 < row1)) {
        for (j = col2 + 1; j < col1; j++) {
            warehouse[row2][j] = 3;
        }
    }
}



",0
wli798,1696228148,2,"#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[NUM_ROWS][NUM_COLS]) {
    int row1, col1, row2, col2, i, j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }
    if (col1 < col2 && row2 < row1) {
        for (j = col1 + 1; j <= col2; j++) {
            warehouse[row1][j] = 3;
        }
        for (i = row2 + 1; i < row1; i++) {
            warehouse[i][col2] = 3;
        }
    }

    if (col1 > col2 && row2 > row1) {
        for (j = col1 - 1; j >= col2; j--) {
            warehouse[row1][j] = 3;
        }
        for (i = row1; i < row2; i++) {
            warehouse[i][col2] = 3;
        }
    }

    if (col1 > col2 && row2 < row1) {
        for (j = col2; j < col1; j++) {
            warehouse[row1][j] = 3;
        }
        for (i = row2 + 1; i < row1; i++) {
            warehouse[i][col2] = 3;
        }
    }

    if (col2 > col1 && row2 > row1) {
        for (j = col1 + 1; j <= col2; j++) {
            warehouse[row1][j] = 3;
        }
        for (i = row1 + 1; i < row2; i++) {
            warehouse[i][col2] = 3;
        }
    }

    if ((col1 == col2) && (row1 < row2)) {
        for (i = row1 + 1; i < row2; i++) {
            warehouse[i][col1] = 3;
        }
    }

    if ((row1 == row2) && (col1 < col2)) {
        for (j = col1 + 1; j < col2; j++) {
            warehouse[row1][j] = 3;
        }
    }

    if ((col1 == col2) && (row2 < row1)) {
        for (i = row2 + 1; i < row1; i++) {
            warehouse[i][col1] = 3;
        }
    }

    if ((row1 == row2) && (col2 < col1)) {
        for (j = col2 + 1; j < col1; j++) {
            warehouse[row2][j] = 3;
        }
    }
    warehouse[row1][col1] = 1;
    warehouse[row2][col2] = 2;
}

",1
wlin709,1696242330,1,"void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow, pelletCol, destinationRow, destinationCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destinationRow = i;
                destinationCol = j;
            }
        }
    }

    for (int j = pelletCol; j != destinationCol; j += (destinationCol > pelletCol) ? 1 : -1) {
        warehouse[pelletRow][j] = 3; 
    }

    for (int i = pelletRow; i != destinationRow; i += (destinationRow > pelletRow) ? 1 : -1) {
        warehouse[i][destinationCol] = 3; 
    }

    warehouse[pelletRow][pelletCol] = 1;
    warehouse[destinationRow][destinationCol] = 2;
}
",1
wmas516,1695634705,1,"int PelletRoute(int warehouse[10][10]) {
	int row1; int col1; int row2; int col2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}
		}
	}
	int coli = col1, colf = col2, rowi = row1, rowf = row2;

	if (row1>row2) {
		rowi = row2;
		rowf = row1;
	}
	if (col1 > col2) {
		coli = col2;
		colf = col1;
	}
	for (int i = coli+1; i <colf; i++) {
		warehouse[row1][i]=3;
	}
	for (int j = rowi+1; j < rowf; j++) {
		warehouse[j][col2] = 3;
	}
	if ((coli-colf)*(rowi-rowf)) {
		warehouse[row1][col2]=3;
	}
	return 0;
}
",0
wmas516,1695634725,2,"int PelletRoute(int warehouse[10][10]) {
	int row1; int col1; int row2; int col2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				row1 = i;
				col1 = j;
			}
			else if (warehouse[i][j] == 2) {
				row2 = i;
				col2 = j;
			}
		}
	}
	int coli = col1, colf = col2, rowi = row1, rowf = row2;

	if (row1>row2) {
		rowi = row2;
		rowf = row1;
	}
	if (col1 > col2) {
		coli = col2;
		colf = col1;
	}
	for (int i = coli+1; i <colf; i++) {
		warehouse[row1][i]=3;
	}
	for (int j = rowi+1; j < rowf; j++) {
		warehouse[j][col2] = 3;
	}
	if ((coli-colf)&&(rowi-rowf)) {
		warehouse[row1][col2]=3;
	}
	return 0;
}
",1
wwan296,1695771712,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int row, col;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row = i;
                col = j;
                break;
            }
        }
    }
    int nrow, ncol;
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 2) {
                nrow = i;
                ncol = j;
                break;
            }
        }
    }
    for (int j = col; j <= ncol; j++) {
        if (warehouse[row][j] != 1 && warehouse[row][j] != 2) {
            warehouse[row][j] = 3;
        }
    }
    for (int i = row; i <= nrow; i++) {
        if (warehouse[i][ncol] != 1 && warehouse[i][ncol] != 2) {
            warehouse[i][ncol] = 3;
        }
    }
    return;
}",0
wwan296,1695772861,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            else if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }

    int rowStart, colStart, rowEnd, colEnd;
    rowStart = row1;
    colStart = col1;
    rowEnd = row2;
    colEnd = col2;

    if (row1 > row2) {
        rowStart = row2;
        rowEnd = row1;
    }
    if (col1 > col2) {
        colStart = col2;
        colEnd = col1;
    }
    for (int j = colStart; j <= colEnd; j++) {
        if (warehouse[rowStart][j] != 1 && warehouse[rowStart][j] != 2) {
            warehouse[rowStart][j] = 3;
        }
    }
    for (int i = rowStart; i <= rowEnd; i++) {
        if (warehouse[i][colEnd] != 1 && warehouse[i][colEnd] != 2) {
            warehouse[i][colEnd] = 3;
        }
    }
    return;
}n ",0
wwan296,1695772868,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;
                col1 = j;
            }
            else if (warehouse[i][j] == 2) {
                row2 = i;
                col2 = j;
            }
        }
    }

    int rowStart, colStart, rowEnd, colEnd;
    rowStart = row1;
    colStart = col1;
    rowEnd = row2;
    colEnd = col2;

    if (row1 > row2) {
        rowStart = row2;
        rowEnd = row1;
    }
    if (col1 > col2) {
        colStart = col2;
        colEnd = col1;
    }
    for (int j = colStart; j <= colEnd; j++) {
        if (warehouse[rowStart][j] != 1 && warehouse[rowStart][j] != 2) {
            warehouse[rowStart][j] = 3;
        }
    }
    for (int i = rowStart; i <= rowEnd; i++) {
        if (warehouse[i][colEnd] != 1 && warehouse[i][colEnd] != 2) {
            warehouse[i][colEnd] = 3;
        }
    }
    return;
}",0
wwan296,1695780682,4,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int row1, col1, row2, col2;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;//9
                col1 = j;//0
            }
            else if (warehouse[i][j] == 2) {
                row2 = i;//0
                col2 = j;//9
            }
        }
    }

    int rowStart, colStart, rowEnd, colEnd;
    rowStart = row1;//9
    colStart = col1;//0
    rowEnd = row2;//0
    colEnd = col2;//9

    if (row1 > row2) {
        rowStart = row2;//0
        rowEnd = row1;//9
    }
    if (col1 > col2) {
        colStart = col2;
        colEnd = col1;
    }
    for (int j = colStart; j <= colEnd; j++) {//0 -> 9
        if (warehouse[row1][j] != 1 && warehouse[row1][j] != 2) {
            warehouse[row1][j] = 3;
        }
    }
    for (int i = rowStart; i <= rowEnd; i++) {// 0->9
        if (warehouse[i][col2] != 1 && warehouse[i][col2] != 2) {
            warehouse[i][col2] = 3;
        }
    }
    return;
}",1
wwon485,1695794004,1,"void PelletRoute(int warehouse[10][10]) {
    // Finds the Starting and the ending positions
    int startRow, startCol, stopRow, stopCol;

    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            // Checks each value
            if (warehouse[row][col] == 1) {
                startRow = row;
                startCol = col;
            } else if (warehouse[row][col] == 2) {
                stopRow = row;
                stopCol = col;
            }
        }
    }

    int rowStep, colStep;
    int rowDistance = stopRow - startRow;
    int colDistance = stopCol - startCol;
    
    if (rowDistance < 0) {
        rowStep = -1;
    }else {
        rowStep = 1;
    }

    if (colDistance < 0) {
        colStep = -1;
    } else { 
        colStep = 1;
    }

    if (startCol != stopCol) {
        for (int col = startCol + colStep; col != stopCol + colStep; col += colStep) {
            if (warehouse[startRow][col] == 2){
                break;
            }
            warehouse[startRow][col] = 3;
        }
    }

    if (startRow != stopRow){
        for (int row = startRow + rowStep; row != stopRow; row += rowStep) {
            if (warehouse[row][stopCol] == 1) {
                break;
            }

            warehouse[row][stopCol] = 3;
        }   
    } 
    
}",1
wwu295,1696106109,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j, pelletRow, pelletCol, destinationRow, destinationCol;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletCol = j;
				pelletRow = i;
			}
			else if (warehouse[i][j] == 2) {
				destinationCol = j;
				destinationRow = i;
			}
		}
	}

	if (pelletCol < destinationCol) {
		for (i = pelletCol; i <= destinationCol; i++) {
			warehouse[pelletRow][i] = 3;
		}
	}
	if (pelletCol > destinationCol) {
		for (i = destinationCol; i <= pelletCol; i++) {
			warehouse[pelletRow][i] = 3;
		}
	}
	if (pelletRow < destinationRow) {
		for (i = pelletRow; i <= destinationRow; i++) {
			warehouse[i][destinationCol] = 3;
		}
	}
	if (pelletRow < destinationRow) {
		for (i = destinationRow; i <= pelletRow; i++) {
			warehouse[i][destinationCol] = 3;
		}
	}
	warehouse[pelletRow][pelletCol] = 1;
	warehouse[destinationRow][destinationCol] = 2;
}",0
wwu295,1696106216,2,"void PelletRoute(int warehouse[10][10])
{
	int i, j, pelletRow, pelletCol, destinationRow, destinationCol;
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				pelletCol = j;
				pelletRow = i;
			}
			else if (warehouse[i][j] == 2) {
				destinationCol = j;
				destinationRow = i;
			}
		}
	}

	if (pelletCol < destinationCol) {
		for (i = pelletCol; i <= destinationCol; i++) {
			warehouse[pelletRow][i] = 3;
		}
	}
	if (pelletCol > destinationCol) {
		for (i = destinationCol; i <= pelletCol; i++) {
			warehouse[pelletRow][i] = 3;
		}
	}
	if (pelletRow < destinationRow) {
		for (i = pelletRow; i <= destinationRow; i++) {
			warehouse[i][destinationCol] = 3;
		}
	}
	if (pelletRow > destinationRow) {
		for (i = destinationRow; i <= pelletRow; i++) {
			warehouse[i][destinationCol] = 3;
		}
	}
	warehouse[pelletRow][pelletCol] = 1;
	warehouse[destinationRow][destinationCol] = 2;
}",1
xkan320,1695763821,1,"void PelletRoute(int warehouse[10][10]){
    int i,j, rowStart, colStart, rowFinish, colFinish;
    for (i=0; i<10; i++){
        for (j=0;j<10;j++){
            if (warehouse[i][j] == 1){
                rowStart = i;
                colStart = j;
            }
            if (warehouse[i][j] == 2){
                rowFinish = i;
                colFinish = j;
            }
        }
    }
    
    int rs,rf,cs,cf;
    rs = rowStart;
    rf = rowFinish;
    cs = colStart;
    cf = colFinish;
    while (cs != cf){
        if (cs > cf){
            cs--;
        }else{
            cs++;
        }
        warehouse[rs][cs]=3;
    }
    while (rs != rf){
        if (rs > rf){
            rs--;
        }else{
            rs++;
        }
        warehouse[rs][cs]=3;
    }
    
    warehouse[rowStart][colStart] = 1;
    warehouse[rowFinish][colFinish] = 2;
}",1
xli330,1695852324,1,"void PelletRoute(int warehouse[10][10]) {
    int i, j, oneRowPos, oneColPos, twoRowPos, twoColPos;

    // Find positions of 1 and 2.
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                oneRowPos = i;
                oneColPos = j;
            }
            if (warehouse[i][j] == 2) {
                twoRowPos = i;
                twoColPos = j;
            }
        }
    }

    // Draw horizontal ""3""s between two column positions.
    if (oneColPos < twoColPos) {
        for (i = oneColPos + 1; i < twoColPos; i++) {
            warehouse[oneRowPos][i] = 3;
        }
    }
    if (twoColPos < oneColPos) {
        for (i = twoColPos + 1; i < oneColPos; i++) {
            warehouse[oneRowPos][i] = 3;
        }
    }

    // Draw vertical ""3""s between two row positions.
    if (oneRowPos < twoRowPos) {
        for (j = oneRowPos + 1; j < twoRowPos; j++) {
            warehouse[j][twoColPos] = 3;
        }
    }
    if (twoRowPos < oneRowPos) {
        for (j = twoRowPos + 1; j < oneRowPos; j++) {
            warehouse[j][twoColPos] = 3;
        }
    }

    // Add a missing corner.
    if (oneRowPos != twoRowPos && oneColPos != twoColPos) {
            warehouse[oneRowPos][twoColPos] = 3;
        }
}",1
xugn489,1695718625,1,"void PelletRoute(int warehouse[10][10])
{
	int row_robot, col_robot;
	int row_des, col_des;
	int up, down, left, right;
	
	for (int row = 0; row < 10; row++){
		for (int col = 0; col < 10; col++) {
			if (warehouse[row][col] == 1) {
				row_robot = row;
				col_robot = col;
			}
		}
	}
	
	for (int row = 0; row < 10; row++){
		for (int col = 0; col < 10; col++) {
			if (warehouse[row][col] == 2) {
				row_des = row;
				col_des = col;
			}
		}
	}
	
	if (row_robot > row_des) {
		down = row_des;
		up = row_robot;
	}
	else {
		down = row_robot;
		up = row_des;
	}
	
	if (col_robot > col_des) {
		right = col_robot;
		left = col_des;
	}
	else {
		right = col_des;
		left = col_robot;
	}
	
	for (int col = left; col <= right; col++) {
		warehouse[row_robot][col] = 3;
	}
	
	for (int row = down; row <= up; row++) {
		warehouse[row][col_des] = 3;
	}
	
	warehouse[row_robot][col_robot] = 1;
	warehouse[row_des][col_des] = 2;
}",1
ybha528,1696230385,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int pellet1, pellet2, location1, location2;

	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < 10; j++)
		{
			if (warehouse[i][j] == 1)
			{
				pellet1 = i;
				pellet2 = j;
			}
			else if (warehouse[i][j] == 2)
			{
				location1 = i;
				location2 = j;
			}
		} 
	}

	while (pellet2 != location2) {
		if (pellet2 < location2) {
			pellet2++;
		}
		else {
			pellet2--;
		}
		warehouse[pellet1][pellet2] = 3;
	}

	while (pellet1 != location1)
	{
		if (pellet1 < location1)
		{
			pellet1++;
		}
		else
		{
			pellet1--;
		}
		warehouse[pellet1][pellet2] = 3; 
	}
}",0
ybha528,1696232023,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
	int pelletRow, pelletCol, rowPos, colPos;

	for (int row = 0; row < 10; row++)
	{
		for (int col = 0; col < 10; col++)
		{
			if (warehouse[row][col] == 1)
			{
				pelletRow = row;
				pelletCol = col;
			}
			else if (warehouse[row][col] == 2)
			{
				rowPos = row;
				colPos = col;
			}
		} 
	}

	while (pelletCol != colPos) 
	{
		if (pelletCol < colPos) 
		{
			pelletCol++;
		}
		else 
		{
			pelletCol--;
		}
		warehouse[pelletRow][pelletCol] = 3;
	}

	while (pelletRow != rowPos)
	{
		if (pelletRow < rowPos)
		{
			pelletRow++;
		}
		else
		{
			pelletRow--;
		}
		warehouse[pelletRow][pelletCol] = 3; 
	}

	warehouse[rowPos][colPos] = 2;
}

",1
ycho749,1696116181,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow = 0;
    int pelletColumn = 0;
    int destRow = 0;
    int destColumn = 0;
    
    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletColumn = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destColumn = j;
            }
        }
    }
    
    while(pelletColumn != destColumn){
        if(pelletColumn < destColumn){
            ++pelletColumn;
        } else{
            --pelletColumn;
        }

        warehouse[pelletRow][pelletColumn] = 3; 
     }
     
     while(pelletRow != destRow)
     {
         if(pelletRow < destRow)
         {
              warehouse[pelletRow][pelletColumn] = 3;
             ++pelletRow; 
         } else{
             --pelletRow; 
         }
      }
}
",0
ycho749,1696127074,2,"void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow = 0;
    int pelletColumn = 0;
    int destRow = 0;
    int destColumn = 0;

    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletColumn = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destColumn = j;
            }
        }
    }

     // Move horizontally first
     while(pelletColumn != destColumn){
         if(pelletColumn < destColumn){
             ++pelletColumn ;
         } else{
             --pelletColumn ;
         }
         
         warehouse[pelletRow][pelletColumn] = 3;
     }

     // Then move vertically
     while(pelletRow != destRow ){
      if(pelletRow < destRow ){
             ++pelletRow;  
         } else{
             --pelletRow;  
         }
         warehouse[pelletRow][pelletColumn] = 3;
      }
      warehouse[destRow][destColumn] = 2;
}
",1
ycho749,1696127087,3,"void PelletRoute(int warehouse[10][10]) 
{
    int pelletRow = 0;
    int pelletColumn = 0;
    int destRow = 0;
    int destColumn = 0;

    for (int i=0; i<10; i++) {
        for (int j=0; j<10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletColumn = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destColumn = j;
            }
        }
    }

     while(pelletColumn != destColumn){
         if(pelletColumn < destColumn){
             ++pelletColumn ;
         } else{
             --pelletColumn ;
         }
         
         warehouse[pelletRow][pelletColumn] = 3;
     }

     while(pelletRow != destRow ){
      if(pelletRow < destRow ){
             ++pelletRow;  
         } else{
             --pelletRow;  
         }
         warehouse[pelletRow][pelletColumn] = 3;
      }
      warehouse[destRow][destColumn] = 2;
}
",1
ydai729,1696240603,1,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Move horizontally first
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move vertically
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}
",0
ydai729,1696240721,2,"void PelletRoute(int warehouse[10][10]) {
 void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Move horizontally first
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
    }

    // Move vertically
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
    }

    // Mark the route with 3s
    warehouse[pelletRow][pelletCol] = 3;
}
 
  ",0
ydai729,1696240932,3,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Move horizontally first
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
    }

    // Move vertically
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
    }

    // Mark the route with 3s
    warehouse[pelletRow][pelletCol] = 3;
}
}
  ",0
ydai729,1696240947,4,"void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    // Find the positions of the pellet (1) and the destination (2)
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            } else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }

    // Move horizontally first
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
    }

    // Move vertically
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
    }

    // Mark the route with 3s
    warehouse[pelletRow][pelletCol] = 3;
}
",0
ydai729,1696241215,5,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally to align with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}


    ",0
ydai729,1696241332,6,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally to align with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}


 ",0
ydai729,1696241455,7,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally to align with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}
PelletRoute(warehouse);

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}

 ",0
ydai729,1696241488,8,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally to align with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}


 ",0
ydai729,1696241611,9,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally to align with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}

 

 ",0
ydai729,1696241811,10,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally to align with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}
    PelletRoute(warehouse);

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}






 

 ",0
ydai729,1696241825,11,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol;
    int destRow, destCol;

    // Find the pellet and destination locations
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    // Move the pellet horizontally to align with the destination
    while (pelletCol < destCol) {
        pelletCol++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletCol > destCol) {
        pelletCol--;
        warehouse[pelletRow][pelletCol] = 3;
    }

    // Move the pellet vertically to reach the destination
    while (pelletRow < destRow) {
        pelletRow++;
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow > destRow) {
        pelletRow--;
        warehouse[pelletRow][pelletCol] = 3;
    }
}
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf(""%d "", warehouse[i][j]);
        }
        printf(""\n"");
    }

    return 0;
}






 

 ",0
yfan919,1696190490,1,"#include <stdio.h>

int PelletRoute(int *warehouse)
{
    int a,b,c,d;
    int i=0;
    int j=0;
    for(i=0;i<10;i++){
        for(j=0;j<10;j++){
            if (warehouse[i][j]==1){
                a=i;
                b=j;
                return a;
                return b;
            }
            if (warehouse[i][j]==2){
                c=i;
                d=j;
                return c;
                return d;
            }
            
        }
    }
    for (i=a+1;a<c;i++){
        warehouse[i][b]=3;
    }
    for (j=d-1;d>b;d--){
        warehouse[c][j]=3
    }
    return warehouse;
}",0
yfan919,1696190521,2,"#include <stdio.h>

int PelletRoute(int *warehouse)
{
    int a,b,c,d;
    int i=0;
    int j=0;
    for(i=0;i<10;i++){
        for(j=0;j<10;j++){
            if (*warehouse[i][j]==1){
                a=i;
                b=j;
                return a;
                return b;
            }
            if (*warehouse[i][j]==2){
                c=i;
                d=j;
                return c;
                return d;
            }
            
        }
    }
    for (i=a+1;a<c;i++){
        *warehouse[i][b]=3;
    }
    for (j=d-1;d>b;d--){
        *warehouse[c][j]=3
    }
    return *warehouse;
}",0
yfan919,1696190553,3,"#include <stdio.h>

int PelletRoute(int warehouse)
{
    int a,b,c,d;
    int i=0;
    int j=0;
    for(i=0;i<10;i++){
        for(j=0;j<10;j++){
            if (warehouse[i][j]==1){
                a=i;
                b=j;
                return a;
                return b;
            }
            if (warehouse[i][j]==2){
                c=i;
                d=j;
                return c;
                return d;
            }
            
        }
    }
    for (i=a+1;a<c;i++){
        warehouse[i][b]=3;
    }
    for (j=d-1;d>b;d--){
        warehouse[c][j]=3;
    }
    return warehouse;
}",0
yfan919,1696190726,4,"#include <stdio.h>

int PelletRoute(int warehouse)
{
    int a,b,c,d;
    int i=0;
    int j=0;
    for(i=0;i<10;i++){
        for(j=0;j<10;j++){
            if (warehouse[i][j]==1){
                a=i;
                b=j;
                return a;
                return b;
            }
            if (warehouse[i][j]==2){
                c=i;
                d=j;
                return c;
                return d;
            }
            
        }
    }
    for (i=a;a<c;i++){
        warehouse[i][b]=3;
    }
    for (j=d;d>b;d--){
        warehouse[c][j]=3;
    }
    return warehouse;
}",0
yfan919,1696190764,5,"#include <stdio.h>

int PelletRoute(int *warehouse)
{
    int a,b,c,d;
    int i=0;
    int j=0;
    for(i=0;i<10;i++){
        for(j=0;j<10;j++){
            if (warehouse[i][j]==1){
                a=i;
                b=j;
                return a;
                return b;
            }
            if (warehouse[i][j]==2){
                c=i;
                d=j;
                return c;
                return d;
            }
            
        }
    }
    for (i=a;a<c;i++){
        warehouse[i][b]=3;
    }
    for (j=d;d>b;d--){
        warehouse[c][j]=3;
    }
    return warehouse;
}",0
yfan919,1696190778,6,"#include <stdio.h>

int PelletRoute(int *warehouse)
{
    int a,b,c,d;
    int i=0;
    int j=0;
    for(i=0;i<10;i++){
        for(j=0;j<10;j++){
            if (*warehouse[i][j]==1){
                a=i;
                b=j;
                return a;
                return b;
            }
            if (warehouse[i][j]==2){
                c=i;
                d=j;
                return c;
                return d;
            }
            
        }
    }
    for (i=a;a<c;i++){
        warehouse[i][b]=3;
    }
    for (j=d;d>b;d--){
        warehouse[c][j]=3;
    }
    return warehouse;
}",0
yfen481,1695773939,1,"void PelletRoute (int warehouse[10][10])
{
  int i, j, startRow=-1, startCol=-1, endRow=-1, endCol=-1, r, c;
  for (i = 0; i < 10; i++)
    {
      for (j = 0; j < 10; j++)
	{
	  if (warehouse[i][j] == 1)
	    {
	      startRow = i;
	      startCol = j;
	    }
	  else if (warehouse[i][j] == 2)
	    {
	      endRow = i;
	      endCol = j;
	    }
    }
    }
    
if (startCol==-1 || startRow==-1 || endCol==-1 || endRow==-1){
    return;
}

  if (endCol - startCol > 0)
    {
      for (c = startCol + 1; c <= endCol; c++)
	{
	  warehouse[startRow][c] = 3;
	
      if (endRow - startRow > 0)
	{
	  for (r = startRow + 1; r < endRow; r++)
	    {
	      warehouse[r][endCol] = 3;
	    }
	}
      else if (endRow - startRow < 0)
	{
	  for (r = startRow - 1; r > endRow; r--)
	    {
	      warehouse[r][endCol] = 3;
	    }
	}
	else{
	    if (endCol-startCol>0){
	        for (c=startCol+1;c<endCol;c++){
	            warehouse[startRow][c]=3;
	        }
	    }
	    else if (endCol-startCol<0){
	        for (c=startCol-1;c>endCol;c--){
	            warehouse[startRow][c]=3;
	        }
	    }
	}
    }
    }

  else if (endCol - startCol < 0)
    {
      for (c = startCol - 1; c >= endCol; c--)
	{
	  warehouse[startRow][c] = 3;
	
      if (endRow - startRow > 0)
	{
	  for (r = startRow + 1; r < endRow; r++)
	    {
	      warehouse[r][endCol] = 3;
	    }
	}
      else if (endRow - startRow < 0)
	{
	  for (r = startRow - 1; r > endRow; r--)
	    {
	      warehouse[r][endCol] = 3;
	    }
	}
		else{
	    if (endCol-startCol>0){
	        for (c=startCol+1;c<endCol;c++){
	            warehouse[startRow][c]=3;
	        }
	    }
	    else if (endCol-startCol<0){
	        for (c=startCol-1;c>endCol;c--){
	            warehouse[startRow][c]=3;
	        }
	    }
	}
	}
    }
    else {
        if (endRow-startRow>0){
            for (r=startRow+1;r<endRow;r++){
                warehouse[r][endCol]=3;
            }
        }
        else if (endRow-startRow<0){
            for (r=startRow-1;r>endRow;r--){
                warehouse[r][endCol]=3;
            }
        }
    }
return;
    
}",1
yjun129,1695778762,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
	int i, j, k, l, startRow, startCol, endRow, endCol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}

			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}
	
	for (k = startCol + 1; k<endCol; k++) {
		warehouse[startRow][k] = 3;
	}

	for (l = startRow; l<endRow; l++) {
		warehouse[l][endCol] = 3;
	}


}",0
yjun129,1695781999,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
void PelletRoute(int warehouse[10][10])
{
	int i, j, k, l, startRow, startCol, endRow, endCol;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}

			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}
	
	if (startCol < endCol && startRow < endRow){
	    for (k = startCol + 1; k < endCol; k++) {
		    warehouse[startRow][k] = 3;
	    }

	    for (l = startRow; l < endRow; l++) {
		    warehouse[l][endCol] = 3;
	    }
    }
    else if(startCol < endCol && startRow == endRow){
        for (k = startCol + 1; k < endCol; k++) {
		    warehouse[startRow][k] = 3;
	    }
    }

    else if(startCol < endCol && startRow > endRow){
       	for (k = startCol + 1; k < endCol; k++) {
		    warehouse[startRow][k] = 3;
	    }

	    for (l = endRow + 1; l <= startRow; l++) {
		    warehouse[l][endCol] = 3;
	    } 
    }
    else if(startCol > endCol && startRow < endRow){
        for (k = endCol; k < startCol; k++) {
		    warehouse[startRow][k] = 3;
	    }

	    for (l = startRow; l < endRow; l++) {
		    warehouse[l][endCol] = 3;
	    }
    }
    else if(startCol > endCol && startRow == endRow){
	    for (k = endCol + 1; k < startCol; k++) {
		    warehouse[startRow][k] = 3;
	    }
    }
    else if(startCol > endCol && startRow > endRow){
	    for (k = endCol + 1; k < startCol; k++) {
		    warehouse[startRow][k] = 3;
	    }

	    for (l = endRow + 1; l <= startRow; l++) {
		    warehouse[l][endCol] = 3;
	    }
    }
    else if(startCol == endCol && startRow < endRow){
	    for (l = startRow + 1; l < endRow; l++) {
		    warehouse[l][endCol] = 3;
	    }
    }
    else if(startCol == endCol && startRow > endRow){
	    for (l = endRow + 1; l < startRow; l++) {
		    warehouse[l][endCol] = 3;
	    }    
    }

}",1
ysun512,1695902313,1,"void PelletRoute(int warehouse[10][10]) {
    int pR, pC, destR, destC;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pR = i;
                pC = j;
            } else if (warehouse[i][j] == 2) {
                destR = i;
                destC = j;
            }
        }
    }
    

    while (pR != destR) {
        if (pR > destR) {
            pR--;
        } else {
            pR++;
        }
        warehouse[pR][pC] = 3;
    }

    while (pC != destC) {
        if (pC > destC) {
            pC--;
        } else {
            pC++;
        }
        warehouse[pR][pC] = 3;
    }
}",0
ysun512,1695903169,2,"void PelletRoute(int warehouse[10][10]) {
    int pR, pC, destR, destC;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pR = i;
                pC = j;
            } else if (warehouse[i][j] == 2) {
                destR = i;
                destC = j;
            }
        }
    }
    

    while (pR != destR) {
        if (pR < destR) {
            pR++;
        } else {
            pR--;
        }
        warehouse[pR][pC] = 3;
    }

    while (pC != destC) {
        if (pC < destC) {
            pC++;
        } else {
            pC--;
        }
        warehouse[pR][pC] = 3;
    }
}",0
ysun512,1695903607,3,"void PelletRoute(int warehouse[10][10]) {
    int pR, pC, destR, destC;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pR = i;
                pC = j;
            } else if (warehouse[i][j] == 2) {
                destR = i;
                destC = j;
            }
        }
    }
    

    while (pR != destR) {
        if (pR < destR) {
            pR++;
        } else {
            pR--;
        }
        warehouse[pR][pC] = 3;
    }

    while (pC != destC) {
        if (pC < destC) {
            pC++;
        } else {
            pC--;
        }
        warehouse[pR][pC] = 3;
    }
}



int main() {
    int warehouse[10][10] = { 
        {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 0, 0, 0} 
    };
",0
ytho155,1695723351,1,"#include <stdio.h>
//this code charts a path through the warehouse to find the best route for package shippers
//represented by '3'.
//Author:Yi Shun

void PelletLoc(int warehouse[10][10], int *rowPos1, int *colPos1, int *rowPos2, int *colPos2) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                *rowPos1 = i;
                *colPos1 = j;
            }
            if (warehouse[i][j] == 2) {
                *rowPos2 = i;
                *colPos2 = j;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10], int rowPos1, int colPos1, int rowPos2, int colPos2) {
    int x,y;
    
    for (y = colPos1+1; y < colPos2; y++) {
        warehouse[rowPos1][y] = 3;
    }
    for (x = rowPos1; x < rowPos2; x++) {
        warehouse[x][colPos2]=3;
    }
}",0
ytho155,1695724612,2,"#include <stdio.h>
//this code charts a path through the warehouse to find the best route for package shippers
//represented by '3'.
//Author:Yi Shun

void PelletLoc(int warehouse[10][10], int *rowPos1, int *colPos1, int *rowPos2, int *colPos2) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                *rowPos1 = i;
                *colPos1 = j;
            }
            if (warehouse[i][j] == 2) {
                *rowPos2 = i;
                *colPos2 = j;
            }
        }
    }
}

int rowPos1, colPos1, rowPos2, colPos2;

void PelletRoute(int warehouse[10][10]) {
    int x,y;
    PelletLoc(warehouse, &rowPos1, &colPos1, &rowPos2, &colPos2);
    if (rowPos1<rowPos2 && colPos1<colPos2){
        for (y = colPos1+1; y < colPos2; y++) {
         warehouse[rowPos1][y] = 3;
        }
        for (x = rowPos1; x < rowPos2; x++) {
            warehouse[x][colPos2]=3;
        }
    }
    else if (rowPos1>rowPos2 && colPos1<colPos2){
        for (y = colPos1+1; y < colPos2; y++) {
         warehouse[rowPos1][y] = 3;
        }
        for (x = rowPos2+1; x <= rowPos1; x++) {
            warehouse[x][colPos2]=3;
        }
    }
    else if (rowPos1>rowPos2 && colPos1>colPos2){
        for (y = colPos2; y < colPos1; y++) {
         warehouse[rowPos1][y] = 3;
        }
        for (x = rowPos2+1; x <= rowPos1; x++) {
            warehouse[x][colPos2]=3;
        }
    }
    else if (rowPos1<rowPos2 && colPos1>colPos2){
        for (y = colPos2; y < colPos1; y++) {
         warehouse[rowPos1][y] = 3;
        }
        for (x = rowPos1; x < rowPos2; x++) {
            warehouse[x][colPos2]=3;
        }
    }
   
}",0
ytho155,1695726336,3,"#include <stdio.h>
//this code charts a path through the warehouse to find the best route for package shippers
//represented by '3'.
//Author:Yi Shun

void PelletLoc(int warehouse[10][10], int *rowPos1, int *colPos1, int *rowPos2, int *colPos2) {
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                *rowPos1 = i;
                *colPos1 = j;
            }
            if (warehouse[i][j] == 2) {
                *rowPos2 = i;
                *colPos2 = j;
            }
        }
    }
}

int rowPos1, colPos1, rowPos2, colPos2;

void PelletRoute(int warehouse[10][10]) {
    int x,y;
    PelletLoc(warehouse, &rowPos1, &colPos1, &rowPos2, &colPos2);
    if (rowPos1<rowPos2 && colPos1<colPos2){
        for (y = colPos1+1; y < colPos2; y++) {
         warehouse[rowPos1][y] = 3;
        }
        for (x = rowPos1; x < rowPos2; x++) {
            warehouse[x][colPos2]=3;
        }
    }
    else if (rowPos1>rowPos2 && colPos1<colPos2){
        for (y = colPos1+1; y < colPos2; y++) {
         warehouse[rowPos1][y] = 3;
        }
        for (x = rowPos2+1; x <= rowPos1; x++) {
            warehouse[x][colPos2]=3;
        }
    }
    else if (rowPos1>rowPos2 && colPos1>colPos2){
        for (y = colPos2; y < colPos1; y++) {
         warehouse[rowPos1][y] = 3;
        }
        for (x = rowPos2+1; x <= rowPos1; x++) {
            warehouse[x][colPos2]=3;
        }
    }
    else if (rowPos1<rowPos2 && colPos1>colPos2){
        for (y = colPos2; y < colPos1; y++) {
         warehouse[rowPos1][y] = 3;
        }
        for (x = rowPos1; x < rowPos2; x++) {
            warehouse[x][colPos2]=3;
        }
    }
    
    else if (rowPos1==rowPos2 && colPos1>colPos2){
        for (y = colPos2+1; y < colPos1; y++) {
         warehouse[rowPos2][y] = 3;
        
        }
    }
    else if (rowPos1>rowPos2 && colPos1==colPos2){
        for (x = rowPos2+1; x < rowPos1; x++) {
            warehouse[x][colPos2]=3;
        }
        
    }
    else if (rowPos1<rowPos2 && colPos1==colPos2){
        for (x = rowPos1+1; x < rowPos2; x++) {
            warehouse[x][colPos2]=3;
        }
        
    }
    else if (rowPos1==rowPos2 && colPos1<colPos2){
        for (y = colPos1+1; y < colPos2; y++) {
         warehouse[rowPos2][y] = 3;
        
        }
    }
}
",1
ytse120,1695633928,1,"void PelletRoute(int warehouse[10][10]) {
    int startRow,startCol,endRow,endCol;

    for (int i = 0; i<10; i++) {
		for (int j = 0; j<10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
		}
	}
    for (int i = 0; i<10; i++) {
		for (int j = 0; j<10; j++) {
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}
    for (int i = startCol+1; i<endCol+1; i++) {
		warehouse[startRow][i] = 3;
	}
    for (int i = startRow+1; i<endRow; i++) {
		warehouse[i][endCol] = 3;
	}
}",0
ytse120,1695634779,2,"void PelletRoute(int warehouse[10][10]) {
    int startRow,startCol,endRow,endCol;

    for (int i = 0; i<10; i++) {
		for (int j = 0; j<10; j++) {
			if (warehouse[i][j] == 1) {
				startRow = i;
				startCol = j;
			}
		}
	}
    for (int i = 0; i<10; i++) {
		for (int j = 0; j<10; j++) {
			if (warehouse[i][j] == 2) {
				endRow = i;
				endCol = j;
			}
		}
	}

    if (startCol < endCol) {
        for (int i = startCol+1; i<endCol+1; i++) {
		    if (warehouse[startRow][i] != 2) {
                warehouse[startRow][i] = 3;
            }
	    }
    } else if (startCol > endCol) {
        for (int i = endCol; i<startCol; i++) {
            if (warehouse[startRow][i] != 2) {
                warehouse[startRow][i] = 3;
            }
        }
    }

    if (startRow < endRow) {
        for (int i = startRow+1; i<endRow; i++) {
		    if (warehouse[i][endCol] != 2) {
                warehouse[i][endCol] = 3;
            }
	    }
    } else if (startRow > endRow) {
        for (int i = endRow+1; i<startRow; i++) {
            if (warehouse[i][endCol] != 2) {
                warehouse[i][endCol] = 3;
            }
        }
    }
}",1
yxie884,1695703503,1,"/*The PelletRoute function calculates a direct route from the pellet to the destination and is indicated by setting all 
array elements on the route to the value 3.*/
//Author: Jessica Xie

#include <stdio.h>
#include <stdlib.h>
void PelletRoute(int warehouse[10][10])
{
    
//two for loops to find the position of 1 and 2
    int i, j, startrow, startcol, endrow, endcol, rowdiff, coldiff;

    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                startrow = i;
                startcol = j;
            }
            if(warehouse[i][j] == 2){
                endrow = i;
                endcol = j;

            }

        }
    }

    //finding the difference of the rows and columns
    rowdiff = abs(endrow - startrow);
    coldiff = abs(endcol - startcol);


    //end is down and right
    if (endrow > startrow && endcol > startcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol+j] = 3;
        }

        for (i = 0; i < rowdiff; i++){
            warehouse[startrow+i][endcol] = 3;
        }
    }
    
    //end is down and left
    if (startrow < endrow && startcol > endcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol+j] = 3;
        }

        for (i = 0; i < rowdiff; i++){
            warehouse[startrow+i][endcol] = 3;
        }
    }

    //end is up and left
    if (startrow > endrow && startcol > endcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol+j] = 3;
        }

        for (i = 0; i < rowdiff; i++){
            warehouse[startrow-i][endcol] = 3;
        }
    }

    //end is up and right
    if (startrow > endrow && startcol < endcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol-j] = 3;
        }

        for (i = 0; i < rowdiff; i++){
            warehouse[startrow-i][endcol] = 3;
        }
    }
        
}",0
yxie884,1695704287,2,"/*The PelletRoute function calculates a direct route from the pellet to the destination and is indicated by setting all 
array elements on the route to the value 3.*/
//Author: Jessica Xie

#include <stdio.h>
#include <stdlib.h>
void PelletRoute(int warehouse[10][10])
{

//two for loops to find the position of 1 and 2
    int i, j, startrow, startcol, endrow, endcol, rowdiff, coldiff;

    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1){
                startrow = i;
                startcol = j;
            }
            if(warehouse[i][j] == 2){
                endrow = i;
                endcol = j;

            }

        }
    }

    //finding the difference of the rows and columns
    rowdiff = abs(endrow - startrow);
    coldiff = abs(endcol - startcol);


    //end is down and right
    if (endrow > startrow && endcol > startcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol-j] = 3;
        }

        for (i = 0; i < rowdiff; i++){
            warehouse[startrow+i][endcol] = 3;
        }
    }
    
    //end is down and left
    if (startrow < endrow && startcol > endcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol+j] = 3;
        }

        for (i = 0; i < rowdiff; i++){
            warehouse[startrow+i][endcol] = 3;
        }
    }

    //end is up and left
    if (startrow > endrow && startcol > endcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol+j] = 3;
        }

        for (i = 0; i < rowdiff; i++){
            warehouse[startrow-i][endcol] = 3;
        }
    }

    //end is up and right
    if (startrow > endrow && startcol < endcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol-j] = 3;
        }

        for (i = 0; i < rowdiff; i++){
            warehouse[startrow-i][endcol] = 3;
        }
    }

    //end is right
    if (startrow == endrow && startcol < endcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol-j] = 3;
        }
    }

    //end is left
    if (startrow == endrow && startcol > endcol){
        for (j = 1; j < coldiff; j++){
            warehouse[startrow][endcol+j] = 3;
        }
    }

    //end is up
    if (startrow > endrow && startcol == endcol){
        for (i = 1; i < rowdiff; i++){
            warehouse[startrow-i][endcol] = 3;
        }
    }
    
    //end is down
    if (startrow < endrow && startcol == endcol){
        for (i = 1; i < rowdiff; i++){
            warehouse[startrow+i][endcol] = 3;
        }
    }
}",1
yzhe520,1695732413,1,"void PelletRoute(int warehouse[10][10])
{
	int i, j,k,g,wr, wc,br,bc,horizd,verticald; //location of worker row, column; location of box row, column

	
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			//first identify the position of the worker
			if (warehouse[i][j] == 1) {
				wr = i;
				wc = j;
			}
			//identify the position of the box
			if (warehouse[i][j] == 2) {
				br = i;
				bc = j;
			}
		}
	}

			//schedule the route horizontally first

			if (wc > bc) //if worker is in front of the box
			{
				//horizd = wc - bc; //horizontal distance between the two
				//change all the values in between on the same row to 3
				for (k = bc; k < wc; k++) {
					warehouse[wr][k] = 3;
				}
			}

			if (wc < bc) //if worker is behind box
			{
				//horizd = bc - wc;//horizontal distance between the two
				//change all the values in between on the same row to 3
				for (k = wc+1; k < bc+1; k++) {
					warehouse[wr][k] = 3;
				}
			}
			
			//schedule the route vertically
			if (wr > br) //if worker is below the box
			{
				//change all the values in between on the same column to 3
				for (g = br+1; g < wr; g++) {
					warehouse[g][bc] = 3;
				}

			}
			if (wr < br) //if worker is above the box
			{
				//change all the values in between on the same column to 3
				for (g = wr+1; g < br; g++) {
					warehouse[g][bc] = 3;
				}
			}
}",0
yzhe520,1695733509,2,"void PelletRoute(int warehouse[10][10])
{
	int i,j,k,g,wr,wc,br,bc; //location of worker row, column; location of box row, column

	
	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			//first identify the position of the worker
			if (warehouse[i][j] == 1) {
				wr = i;
				wc = j;
			}
			//identify the position of the box
			if (warehouse[i][j] == 2) {
				br = i;
				bc = j;
			}
		}
	}

			//schedule the route horizontally first

			if ((wc > bc) && (wr!= br)) //if worker is in front of the box, and they are on different rows
			{
				
				//change all the values in between on the same row to 3
				for (k = bc; k < wc; k++) {
					warehouse[wr][k] = 3;
				}
			}

			if ((wc < bc) && (wr != br)) //if worker is behind box, and they are on different rows
			{
				
				//change all the values in between on the same row to 3
				for (k = wc+1; k < bc+1; k++) {
					warehouse[wr][k] = 3;
				}
			}

			if ((wc > bc) && (wr == br))//if worker is in front of the box, and they are on the same row
			{
				//change the values in between on the same row to 3
				for (k = bc+1; k < wc; k++) {
					warehouse[wr][k] = 3;
				}
			}

			if ((wc < bc) && (wr == br)) //if worker is behind the box, and they are on the same row
			{
				//change all values in between on the same row to 3
				for (k = wc + 1; k < bc; k++) {
					warehouse[wr][k] = 3;
				}
			}


			
			//schedule the route vertically
			if (wr > br) //if worker is below the box
			{
				//change all the values in between on the same column to 3
				for (g = br+1; g < wr; g++) {
					warehouse[g][bc] = 3;
				}

			}
			if (wr < br) //if worker is above the box
			{
				//change all the values in between on the same column to 3
				for (g = wr+1; g < br; g++) {
					warehouse[g][bc] = 3;
				}
			}
}",1
zche975,1696237121,1,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            } else if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }

    for (int j = pelletCol; j < destCol; j++) {
        warehouse[pelletRow][j] = 3;
    }

    for (int i = pelletRow; i < destRow; i++) {
        warehouse[i][destCol] = 3;
    }
}
",0
zcol623,1695730289,1,"//Author:zcol623
void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    //Find the location of the pellet and target destination
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            }
            else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }
    //Move the pellet horizontally until it lines up with the destination
    while (pelletCol != destCol) {
        //Check if the destination is to left or the right of the pellet's current position 
        if (pelletCol < destCol) {
            pelletCol++; //If it's to the right move the pellet right
        }
        else {
            pelletCol--; //If it's to the left move the pellet left
        }
        warehouse[pelletRow][pelletCol] = 3;//Set the values of the columns between the pellet and the destination to 3 (inclusive of destination row) 
    }
    // Move the pellet vertically until it reaches the destination
    while (pelletRow != destRow - 1) {
        //Check if the destination is below or above the pellet's current position 
        if (pelletRow < destRow) {
            pelletRow++; //If it's to the below move the pellet up
        }
        else {
            pelletRow--; //If it's above move the pellet down
        }
        warehouse[pelletRow][pelletCol] = 3;//Set the values of the rows between the pellet and the destination to 3 
    }
}",0
zcol623,1695732671,2,"//Author:zcol623
void PelletRoute(int warehouse[10][10]) {
    int pelletRow, pelletCol, destRow, destCol;

    //Find the location of the pellet and target destination
    for (int row = 0; row < 10; row++) {
        for (int col = 0; col < 10; col++) {
            if (warehouse[row][col] == 1) {
                pelletRow = row;
                pelletCol = col;
            }
            else if (warehouse[row][col] == 2) {
                destRow = row;
                destCol = col;
            }
        }
    }
    //Move the pellet horizontally until it lines up with the destination
    while (pelletCol != destCol) {
        //Check if the destination is to left or the right of the pellet's current position 
        if (pelletCol < destCol) {
            pelletCol++; //If it's to the right move the pellet right
        }
        else {
            pelletCol--; //If it's to the left move the pellet left
        }
        warehouse[pelletRow][pelletCol] = 3;//Set the values of the columns between the pellet and the destination to 3 (inclusive of destination col) 
    }
    if (pelletRow == destRow) //If the pellet and the destination are in the same row don't set the destination column to 3;
    {
        warehouse[pelletRow][pelletCol] = 2;
    }

    //Check if the destination is below or above the pellet's current position 
    if (pelletRow < destRow) {
        // Move the pellet vertically upwards until it reaches the destination
        while (pelletRow != destRow - 1) {
            pelletRow++; //Move the pellet up until the destination is reached
            warehouse[pelletRow][pelletCol] = 3;//Set the values of the rows between the pellet and the destination to 3 
        }
    }
    else if (pelletRow > destRow) {
        // Move the pellet vertically downwards until it reaches the destination
        while (pelletRow != destRow + 1) {
            pelletRow--; //Move the pellet down until the destination is reached
            warehouse[pelletRow][pelletCol] = 3;//Set the values of the rows between the pellet and the destination to 3 
        }
    }
}",1
zfu276,1696118120,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PelletRoute(int warehouse[10][10])
{
    int i,j;
    int row1 = 0;
    int row2 = 0;
    int col1 = 0;
    int col2 = 0;

    for (i = 0; i < 10; i++) {
        for (j = 0; j <10; j++) {
            if (warehouse[i][j] == 1) {
                row1 = i;  
                col1 = j;  
            } else if (warehouse[i][j] == 2) {
                row2 = i;  
                col2 = j;  
            }
        }
    }
    
    while (col1 != col2) {     
        if (col1 < col2) {     
            col1++;
        } else {
            col1--;
        }
        warehouse[row1][col1] = 3;   
    }

    while (row1 != row2) {           
        if (row1 < (row2) ) {         
            row1++;
        } else {
            row1--;
        }
        warehouse[row1][col2] = 3;   
    }

    warehouse[row2][col2] = 2;

}
",1
zgar110,1696234592,1,"#include <stdio.h>


void PelletRoute()oute(int warehouse[10][10]) {
    int pellet_x, pellet_y, destination_x, destination_y;

   
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_x = i + rand() % 10; 
                pellet_y = j - rand() % 10; 
            }
            if (warehouse[i][j] == 2) {
                destination_x = i;
                destination_y = j;
            }
        }
    }

    while (1) {
        if (pellet_x < destination_x) {
            pellet_x += rand() % 3;
        } else {
            pellet_x = rand();
        }
        warehouse[pellet_x][pellet_y] = 3;


        if (rand() % 100 == 0) {
            break;
        }
    }

   
  
}",0
zgar110,1696236177,2,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
	int pellet_x, pellet_y, destination_x, destination_y;

	 for (int i = 0; i < 10; i++) {
     for (int j = 0; j < 10; j++) {
        	if (warehouse[i][j] == 1) {
            	pellet_x = i;
            	pellet_y = j;
        	}
        	if (warehouse[i][j] == 2) {
            	destination_x = i;
            	 destination_y = j;
        	}
    	}
	}
	while (pellet_x != destination_x) {
    	if (pellet_x < destination_x) {
          	 pellet_x++;
     	} else {
             	pellet_x--;
    	}
    	 warehouse[pellet_x][pellet_y] = 3;
	}

 
	while (pellet_y != destination_y) {
    	if (pellet_y < destination_y) {
        	pellet_y++;
    	} else {
        	pellet_y--;
     	}
    	warehouse[pellet_x][pellet_y] = 3;
	 } 
}



",0
zgar110,1696237600,3,"#include <stdio.h>

void PelletRoute(int warehouse[10][10]) {
    int pellet_i, pellet_j, dest_i, dest_j;
    pellet_i = pellet_j = dest_i = dest_j = -1;
    
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                pellet_i = i;
                pellet_j = j;
            } else if (warehouse[i][j] == 2) {
                dest_i = i;
                dest_j = j;
            }
        }
    }


    if (pellet_j < dest_j) {
        for (int j = pellet_j + 1; j < dest_j; j++) {
            warehouse[pellet_i][j] = 3;
        }
    } else if (pellet_j > dest_j) {
         for (int j = dest_j + 1; j < pellet_j; j++) {
            warehouse[pellet_i][j] = 3;
        }
    }

   
    if (pellet_i < dest_i) {
        for (int i = pellet_i + 1; i < dest_i; i++) {
            warehouse[i][dest_j] = 3;
        }
    } else if (pellet_i > dest_i) {
        for (int i = dest_i + 1; i < pellet_i; i++) {
            warehouse[i][dest_j] = 3;
        }
    }
}",0
zgin653,1695632365,1,"void findPosition(int warehouse[10][10], int tile, int *rowPos, int *colPos){
    for (int i=0; i < 10; i ++){
        for (int j = 0; j < 10; j++){
            if (warehouse[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}

void PelletRoute(int warehouse[10][10]){
    int worRow,worCol,boxRow,boxCol;
    findPosition(warehouse, 1, &worRow,&worCol);
    findPosition(warehouse, 2, &boxRow, &boxCol);

    if (boxCol - worCol > 0){
        for (int i = worCol + 1; i <= boxCol; i++) warehouse[worRow][i] = 3;
    } else {
        for (int i = boxCol; i < worCol; i++) warehouse[worRow][i] = 3;
    }
    if (boxRow - worRow > 0){
        for (int i = worRow + 1; i < boxRow; i++) warehouse[i][boxCol] = 3;
    } else {
        for (int i = boxRow + 1; i <= worRow; i++) warehouse[i][boxCol] = 3;
    }

    warehouse[boxRow][boxCol] = 2;
    warehouse[worRow][worCol] = 1;

}",1
zliu578,1696043148,1,"void PelletRoute(int values[10][10]) {
	int r1;
	int c1;
	int r2;
	int c2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (values[i][j] == 1) {
				r1 = i;
				c1 = j;
			}
			if (values[i][j] == 2) {
				r2 = i;
				c2 = j;
			}
		}
	}
	for (int i = r1; i < r2; i++) {
		values[i][c2] = 3;
	}
	for (int i = c1 +1; i < c2; i++) {
		values[r1][i] = 3;
	}
}",0
zliu578,1696045784,2,"void PelletRoute(int values[10][10]) {
	int r1;
	int c1;
	int r2;
	int c2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (values[i][j] == 1) {
				r1 = i;
				c1 = j;
			}
			if (values[i][j] == 2) {
				r2 = i;
				c2 = j;
			}
		}
	}
	if (c1 < c2) {
		for (int i = c1 + 1; i < c2; i++) {
			values[r1][i] = 3;
		}
	}
	else if (c1 > c2) {
		for (int i = c2 + 1; i < c1; i++) {
			values[r1][i] = 3;
		}
	}
	if (r1 > r2) {
		for (int i = r2 + 1; i <= r1; i++) {
			values[i][c2] = 3;
		}
	}
	else if (r1 < r2) {
		for (int i = r1; i < r2; i++) {
			values[i][c2] = 3;
		}
	}
}",0
zliu578,1696047014,3,"void PelletRoute(int values[10][10]) {
	int r1;
	int c1;
	int r2;
	int c2;
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			if (values[i][j] == 1) {
				r1 = i;
				c1 = j;
			}
			if (values[i][j] == 2) {
				r2 = i;
				c2 = j;
			}
		}
	}
	if (c1 < c2) {
		for (int i = c1 + 1; i < c2; i++) {
			values[r1][i] = 3;
		}
	}
	else if (c1 > c2) {
		for (int i = c2 + 1; i < c1; i++) {
			values[r1][i] = 3;
		}
	}
	if (r1 > r2) {
		for (int i = r2 + 1; i <= r1; i++) {
			values[i][c2] = 3;
		}
	}
	else if (r1 < r2) {
		for (int i = r1; i <= r2; i++) {
			values[i][c2] = 3;
		}
	}
	values[r1][c1] = 1;
	values[r2][c2] = 2;
}",1
zpen457,1696066189,1,"void PelletRoute(int warehouse[10][10])
{
    int i,j;
    int rowPos1, colPos1, rowPos2, colPos2;
    for (i = 0; i < 10; i++){
        for (j = 0; j < 10; j++){
            if (warehouse[i][j] == 1)
            {
                rowPos1 = i;
                colPos1 = j;
            }
            if (warehouse[i][j] == 2)
            {
                rowPos2 = i;
                colPos2 = j;
            }
        }
    }
    
    int lower, higher;
    if (colPos1 < colPos2)
    {
        lower = colPos1;
        higher = colPos2;
    }
    else
    {
        higher = colPos1;
        lower = colPos2;
    }
    
    for (j = lower; j <= higher; j++)
    {
        if (warehouse[rowPos1][j] == 0)
        {
            warehouse[rowPos1][j] = 3;
        }
    }
    
    if (rowPos1 < rowPos2)
    {
        lower = rowPos1;
        higher = rowPos2;
    }
    else
    {
        higher = rowPos1;
        lower = rowPos2;
    }
    
    for (i = lower; i < higher; i++)
    {
        if (warehouse[i][colPos2] == 0)
        {
            warehouse[i][colPos2] = 3;
        }
    }
}",1
zshi453,1695621093,1,"#include <stdio.h>

#define NUM_ROWS 10
#define NUM_COLS 10

void PelletRoute(int warehouse[10][10])
{
    int onerow,onecol,tworow,twocol,i,j,k,l;
    for (i = 0; i < NUM_ROWS; ++i){
      for (j = 0; j < NUM_COLS; ++j){
        if (warehouse[i][j] == 1){
            onerow = i;
            onecol = j;
        }
        else if (warehouse[i][j] == 2){
            tworow = i;
            twocol = j;
        }
        }
    }
    warehouse[onerow][onecol] = 1;
    warehouse[tworow][twocol] = 2;
    for (k = onerow;k < tworow;++k){
        warehouse[k][twocol] = 3;
        }
    for (k = onerow;k > tworow;k--){
        warehouse[k][twocol] = 3;
        }
    for (l = twocol;l > onecol;l--){
        warehouse[onerow][l] = 3;
        }
    for (l = twocol;l < onecol;++l){
        warehouse[onerow][l] = 3;
        }
}",0
zshi453,1695621302,2,"#include <stdio.h>
#define NUM_ROWS 10
#define NUM_COLS 10
void PelletRoute(int warehouse[10][10])
{
    int onerow,onecol,tworow,twocol,i,j,k,l;
    for (i = 0; i < NUM_ROWS; ++i){
      for (j = 0; j < NUM_COLS; ++j){
        if (warehouse[i][j] == 1){
            onerow = i;
            onecol = j;
        }
        else if (warehouse[i][j] == 2){
            tworow = i;
            twocol = j;
        }
        }
    }
    warehouse[onerow][onecol] = 1;
    warehouse[tworow][twocol] = 2;
    for (k = onerow;k < tworow;++k){
        warehouse[k][twocol] = 3;
        }
    for (k = onerow;k > tworow;k--){
        warehouse[k][twocol] = 3;
        }
    for (l = twocol;l > onecol;l--){
        warehouse[onerow][l] = 3;
        }
    for (l = twocol;l < onecol;++l){
        warehouse[onerow][l] = 3;
        }
    warehouse[onerow][onecol] = 1;
    warehouse[tworow][twocol] = 2;
}",1
zvor566,1695976034,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10]) 
{
	int Startrow, Startcol, Endrow, Endcol;
	int i, j;
	int dirx, diry;

	FindTile(warehouse, 1, &Startrow, &Startcol);
	FindTile(warehouse, 2, &Endrow, &Endcol);
	if (Startcol > Endcol) {
		dirx = -1;
	}
	else {
		dirx = 1;
	}

	if (Startrow > Endrow) {
		diry = -1;
	}
	else {
		diry = 1;
	}

	i = Startcol;
	while (i != Endcol) {
		i += dirx;
		warehouse[Startrow][i] = 3;
	}
	j = Startrow;
	while (j != Endrow){
		j += diry;
		warehouse[j][i] = 3;
	}
	warehouse[Endrow][Endcol] = 2;
}",0
zvor566,1695976174,2,"void FindTile(int board[10][10], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < 10; i++) {
		for (j = 0; j < 10; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}

void PelletRoute(int warehouse[10][10]) 
{
	int Startrow, Startcol, Endrow, Endcol;
	int i, j;
	int dirx, diry;

	FindTile(warehouse, 1, &Startrow, &Startcol);
	FindTile(warehouse, 2, &Endrow, &Endcol);
	if (Startcol > Endcol) {
		dirx = -1;
	}
	else {
		dirx = 1;
	}

	if (Startrow > Endrow) {
		diry = -1;
	}
	else {
		diry = 1;
	}

	i = Startcol;
	while (i != Endcol) {
		i += dirx;
		warehouse[Startrow][i] = 3;
	}
	j = Startrow;
	while (j != Endrow){
		j += diry;
		warehouse[j][i] = 3;
	}
	warehouse[Endrow][Endcol] = 2;
}",1
zwan373,1695771530,1,"#include <stdio.h>

#define SIZE 10

void PelletRoute(int warehouse[SIZE][SIZE]) {
    int pelletRow, pelletCol, destRow, destCol;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
}",0
zwan373,1695772303,2,"#include <stdio.h>

#define SIZE 10

void PelletRoute(int warehouse[SIZE][SIZE]) {
    int pelletRow, pelletCol, destRow, destCol;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (warehouse[i][j] == 1) {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) {
                destRow = i;
                destCol = j;
            }
        }
    }
    while (pelletCol != destCol) {
        if (pelletCol < destCol) {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow != destRow) {
        if (pelletRow < destRow) {
            pelletRow++;
        } else {
            pelletRow--;
        }
        warehouse[pelletRow][pelletCol] = 2;
    }
}",0
zwan373,1695772463,3,"
#include <stdio.h>

#define SIZE 10

void PelletRoute(int warehouse[SIZE][SIZE]) 
{
    int pelletRow, pelletCol, destRow, destCol;
    for (int i = 0; i < SIZE; i++) 
    {
        for (int j = 0; j < SIZE; j++) 
        {
            if (warehouse[i][j] == 1) 
            {
                pelletRow = i;
                pelletCol = j;
            }
            if (warehouse[i][j] == 2) 
            {
                destRow = i;
                destCol = j;
            }
        }
    }
    while (pelletCol != destCol) 
    {
        if (pelletCol < destCol) 
        {
            pelletCol++;
        } else {
            pelletCol--;
        }
        warehouse[pelletRow][pelletCol] = 3;
    }
    while (pelletRow != destRow) 
    {
        if (pelletRow < destRow) 
        {
            pelletRow++;
        } else {
            pelletRow--;
        }
        if (pelletRow != destRow) 
        { 
            warehouse[pelletRow][pelletCol] = 3;
        }
    }
    warehouse[destRow][destCol] = 2;
}",1
zwon694,1695700766,1,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int start_row, start_col;
    int finish_row, finish_col;

// find start and end position
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                start_row = i;
                start_col = j;
            } else if (warehouse[i][j] == 2) {
                finish_row = i;
                finish_col = j;
            }
        }
    }

    i = start_row;

// add 3s horizontally from starting column to ending column
    for (j = start_col + 1; j < finish_col; j++) {
        warehouse[i][j] = 3;
    }

    j = finish_col;

// add 3s vertically from starting row to ending row
    for (i = start_row; i < finish_row; i++) {
        warehouse[i][j] = 3;
    }

}",0
zwon694,1695702787,2,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int start_row, start_col;
    int finish_row, finish_col;

// find start and end position
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                start_row = i;
                start_col = j;
            }

            if (warehouse[i][j] == 2) {
                finish_row = i;
                finish_col = j;
            }
        }
    }

// add 3s horizontally

i = start_row;

if (start_col < finish_col) { // if start is to left of finish

    for (j = start_col + 1; j < finish_col; j++) {
        warehouse[i][j] = 3;
    }

} else if (start_col > finish_col) { // if start is to right of finish


    for (j = finish_col + 1; j < start_col; j++) {
        warehouse[i][j] = 3;
    }

}

// add 3s vertically

j = finish_col;

if (start_row < finish_row) {

    for (i = start_row + 1; i < finish_row; i++) { // if start is above finish
        warehouse[i][j] = 3;
    }

} else if (start_row > finish_row) {

    for (i = finish_row + 1; i < start_row; i++) { // if start is below finish
        warehouse[i][j] = 3;
    }

}

if ((start_row - finish_row) != 0 && (start_col - finish_col) != 0){
    warehouse[start_row][finish_col] = 3;
}

}",1
zwu591,1695995320,1,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int workerRow = 0, workerCol = 0, boxRow = 0, boxCol = 0;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                workerRow = i;
                workerCol = j;
            }

            if (warehouse[i][j] == 2) {
                boxRow = i;
                boxCol = j;
            }
        }
    }

    while (workerRow != boxRow || workerCol != boxCol) {
        if (workerCol < boxCol) {
            workerCol = workerCol + 1;
        } else if (workerCol > boxCol) {
            workerCol = workerCol - 1;
        } else if (workerRow < boxRow) {
            workerRow = workerRow + 1;
        } else if (workerRow > boxRow) {
            workerRow = workerRow - 1;
        }

        warehouse[workerRow][workerCol] = 3;
    }

    warehouse[boxRow][boxCol] = 2;
}",1
zwu591,1696122969,2,"void PelletRoute(int warehouse[10][10])
{
    int i, j;
    int workerRow = 0, workerCol = 0, boxRow = 0, boxCol = 0;
    
    for (i = 0; i < 10; i++) {
        for (j = 0; j < 10; j++) {
            if (warehouse[i][j] == 1) {
                workerRow = i;
                workerCol = j;
            }

            if (warehouse[i][j] == 2) {
                boxRow = i;
                boxCol = j;
            }
        }
    }

    while ((workerRow != boxRow || workerCol != boxCol)) {
        if (workerCol < boxCol) {
            workerCol = workerCol + 1;
        } else if (workerCol > boxCol) {
            workerCol = workerCol - 1;
        } else if (workerRow < boxRow) {
            workerRow = workerRow + 1;
        } else if (workerRow > boxRow) {
            workerRow = workerRow - 1;
        }

        warehouse[workerRow][workerCol] = 3;
    }

    warehouse[boxRow][boxCol] = 2;
}",1
zyao804,1695708773,1,"#include <stdio.h>
void PelletRoute(int array[][10])
{
    int rows=10;
    int cols=10;
    int worker[2];
    int final[2];
    for (int i=0;i<rows;i++)
    {
        for (int j=0;j<cols;j++)
        {
            if (array[i][j] == 1)
            {
                worker[0] = j;
                worker[1] = i;
            }
            if (array[i][j]==2)
            {
                final[0] = j;
                final [1] = i;
            }
        }
    }
    int x = final[0]-worker[0];
    int y = final[1]-worker[1];
    
    if (x>0 && y>0)
    {
        for (int i=worker[0]+1;i<final[0];i++)
        {
            array[worker[1]][i] = 3;
        }
        for (int j=worker[1];j<final[1];j++)
        {
            array[j][final[0]] = 3;
        }
        
    }
    if (x>0 && y<0)
    {
        for (int i=worker[0]+1;i<final[0];i++)
        {
            array[worker[1]][i]=3;
        }
        for (int j=worker[1];j>final[1];j--)
        {
            array[j][final[0]] = 3;
        }
    }
    if (x<0 && y>0)
    {
        for (int i=worker[0]-1;i>final[0];i--)
        {
            array[worker[1]][i] = 3;
        }
        for (int j=worker[1];j<final[1];j++)
        {
            array[j][final[0]] = 3;
        }
    }
    if (x<0 && y<0)
    {
        for (int i=worker[0]-1;i>final[0];i--)
        {
            array[worker[1]][i] = 3;
        }
        for (int j=worker[1];j>final[1];j--)
        {
            array[j][final[0]] = 3;
        }
    }
}",0
zyao804,1695709397,2,"#include <stdio.h>
void PelletRoute(int array[][10])
{
    int rows=10;
    int cols=10;
    int worker[2];
    int final[2];
    for (int i=0;i<rows;i++)
    {
        for (int j=0;j<cols;j++)
        {
            if (array[i][j] == 1)
            {
                worker[0] = j;
                worker[1] = i;
            }
            if (array[i][j]==2)
            {
                final[0] = j;
                final [1] = i;
            }
        }
    }
    int x = final[0]-worker[0];
    int y = final[1]-worker[1];
    
    if (x>0 && y>0)
    {
        for (int i=worker[0]+1;i<final[0];i++)
        {
            array[worker[1]][i] = 3;
        }
        for (int j=worker[1];j<final[1];j++)
        {
            array[j][final[0]] = 3;
        }
        
    }
    if (x>0 && y<0)
    {
        for (int i=worker[0]+1;i<final[0];i++)
        {
            array[worker[1]][i]=3;
        }
        for (int j=worker[1];j>final[1];j--)
        {
            array[j][final[0]] = 3;
        }
    }
    if (x<0 && y>0)
    {
        for (int i=worker[0]-1;i>final[0];i--)
        {
            array[worker[1]][i] = 3;
        }
        for (int j=worker[1];j<final[1];j++)
        {
            array[j][final[0]] = 3;
        }
    }
    if (x<0 && y<0)
    {
        for (int i=worker[0]-1;i>final[0];i--)
        {
            array[worker[1]][i] = 3;
        }
        for (int j=worker[1];j>final[1];j--)
        {
            array[j][final[0]] = 3;
        }
    }
    if (x==0 && y>0)
    {
     for (int j=worker[1]+1;j<final[1];j++)
        {
            array[j][final[0]] = 3;
        }
    }
    if (x==0 && y<0)
    {
        for (int j=worker[1]-1;j>final[1];j--)
        {
            array[j][final[0]] = 3;
        }
    }
    if (x>0 && y==0)
    {
       for (int i=worker[0]+1;i<final[0];i++)
        {
            array[worker[1]][i] = 3;
        } 
    }
    if (x<0 && y==0)
    {
        for (int i=worker[0]-1;i>final[0];i--)
        {
            array[worker[1]][i] = 3;
        }
    }
}",1
zyu100,1695724553,1,"void  PelletRoute (int warehouse[10][10]){
    int rows1,rows2,cols1,cols2;
    for (int i=0;i<10; i++){
        for (int j=0;j<10;j++){
            if (warehouse[i][j]==1){
                 rows1=i;
                 cols1=j;
            }else if (warehouse[i][j]==2){
                 rows2=i;
                 cols2=j;
                 
            }
            
}
}
for (int C=cols1+1;C<=cols2;C++){
    
    warehouse[rows1][C]=3;
}
for (int R=rows1+1;R<rows2;R++){
    
    warehouse[R][cols2]=3;
}

return;
}",0
zyu100,1695775039,2,"void  PelletRoute (int warehouse[10][10]){
    int rows1,rows2,cols1,cols2;
    for (int i=0;i<10; i++){
        for (int j=0;j<10;j++){
            if (warehouse[i][j]==1){
                 rows1=i;
                 cols1=j;
            }else if (warehouse[i][j]==2){
                 rows2=i;
                 cols2=j;
                 
            }
            
}
}
if(rows1<rows2 && cols1 < cols2){
for (int C=cols1+1;C<=cols2;C++){
    
    warehouse[rows1][C]=3;
}
for (int R=rows1+1;R<rows2;R++){
    
    warehouse[R][cols2]=3;
}
}

if(rows1>rows2 && cols1>cols2){
    
    for (int C=cols1-1;C>=cols2;C--){
    
    warehouse[rows1][C]=3;
    }
     for (int R=rows1-1;R>rows2;R--){

    warehouse[R][cols2]=3;
}
}

if(rows1<rows2 && cols1> cols2){
for (int C=cols1-1;C>=cols2;C--){
    
    warehouse[rows1][C]=3;
}
for (int R=rows1+1;R<rows2;R++){
    
    warehouse[R][cols2]=3;
}
}

if(rows1>rows2 && cols1<cols2){
    
    for (int C=cols1+1;C<=cols2;C++){
    
    warehouse[rows1][C]=3;
    }
    
     for (int R=rows1-1;R>rows2;R--){

    warehouse[R][cols2]=3;
}
}

if(rows1==rows2 && cols1<cols2){
    
    for (int C=cols1+1;C<cols2;C++){
    
    warehouse[rows2][C]=3;
    }
    }
    
  if (rows1==rows2 && cols1>cols2){
    
     for (int C=cols2+1;C<cols1;C++){

    warehouse[rows2][C]=3;
}
}

if(cols1==cols2 && rows1<rows2){
    
     for (int R=rows1+1;R<rows2;R++){

    warehouse[R][cols1]=3;
}
}
if (cols1==cols2 && rows1>rows2){
    for (int R=rows2+1;R<rows1;R++){

    warehouse[R][cols2]=3;
    
}
} 
return;
}",1
