upi,time,try,answer,rawfraction
aahk798,1697688835,1,"int Choose(int x, int y)
{
if (y == 0 || y == x)
        return 1;
    return Choose(x - 1, y - 1) + Choose(x - 1, y);
}",
aahk798,1697688840,2,"int Choose(int x, int y)
{
if (y == 0 || y == x)
        return 1;
    return Choose(x - 1, y - 1) + Choose(x - 1, y);
}",1
aana675,1697746619,1,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
aana675,1697746630,2,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 && m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
aana675,1697746643,3,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
aana675,1697746645,4,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
aaza463,1697433758,1,"int Choose(int n, int m){
    if (m == 0){
        return 1;
    }
    else if (n == m){
        return 1;
    }
    else{
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
aaza463,1697433760,2,"int Choose(int n, int m){
    if (m == 0){
        return 1;
    }
    else if (n == m){
        return 1;
    }
    else{
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",1
aazh582,1698133737,1,"#include <stdio.h>


int factorial(int num) {

    if (num <= 1) {
        return 1;
    }
    
    return num * factorial(num - 1);
}

// create the Choose function using the factorial function.
int Choose(int n, int m) {
  
    if (m > n) {
        printf(""Error! m can't be greater than n.\n"");
        return -1;  // I'll return -1 for error.
    }

  
    int result = factorial(n) / (factorial(m) * factorial(n - m));
    return result;
}
",
aazh582,1698133744,2,"#include <stdio.h>


int factorial(int num) {

    if (num <= 1) {
        return 1;
    }
    
    return num * factorial(num - 1);
}

// create the Choose function using the factorial function.
int Choose(int n, int m) {
  
    if (m > n) {
        printf(""Error! m can't be greater than n.\n"");
        return -1;  // I'll return -1 for error.
    }

  
    int result = factorial(n) / (factorial(m) * factorial(n - m));
    return result;
}
",0
abha257,1697535448,1,"int Choose(int n, int m) {
	int result = 0;
	if (m == 0 || m == n) {
		result++;
	}
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return result;
}",1
abro522,1697425240,1,"void Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else if (m > n) {
        return 0;
    } else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
abro522,1697425247,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else if (m > n) {
        return 0;
    } else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
abro522,1697425296,3,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else if (m > n) {
        return 0;
    } else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",1
acam267,1697970398,1,"int Choose(int n, int m) {
    if(m > n) {
        return 0;
    } else if(n == m || m == 0) {
        return 1;
    }
    int chosenValue = Choose(n - 1, m - 1) + Choose(n - 1, m);
    return chosenValue;
}",
acam267,1697970401,2,"int Choose(int n, int m) {
    if(m > n) {
        return 0;
    } else if(n == m || m == 0) {
        return 1;
    }
    int chosenValue = Choose(n - 1, m - 1) + Choose(n - 1, m);
    return chosenValue;
}",1
ache725,1697985358,1,"int Choose(int n, int m) {
    int choose1 = 0;
    int choose2 = 0;
    int result = 0;

    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    }

    choose1 = Choose(n - 1, m);
    choose2 = Choose(n - 1, m - 1);

    result = choose1 + choose2;
    return result;
}",
ache725,1697985647,2,"int Choose(int n, int m) {
    int choose1 = 0;
    int choose2 = 0;
    int choose3 = 0;
    int result = 0;

    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    }

    if (n % 2 == 0) {
        choose1 = Choose(n / 2, m / 2);
        choose2 = Choose(n / 2, m - m / 2);
    } else {
        choose1 = Choose(n / 2, m / 2);
        choose2 = Choose(n / 2, m - m / 2);
        choose3 = Choose(n - n / 2, m - m / 2);
    }

    result = choose1 + choose2 + choose3;
    return result;
}",
achi359,1697796893,1,"int choose(int n, int k) {
    
    if (k == 0) {
        return 1;
    }
    
    return (n * choose(n - 1, k - 1)) / k;
    
}",
achi359,1697796914,2,"int Choose(int n, int k) {
    
    if (k == 0) {
        return 1;
    }
    
    return (n * choose(n - 1, k - 1)) / k;
    
}",
achi359,1697796920,3,"int Choose(int n, int k) {
    
    if (k == 0) {
        return 1;
    }
    
    return (n * Choose(n - 1, k - 1)) / k;
    
}",
achi359,1697796923,4,"int Choose(int n, int k) {
    
    if (k == 0) {
        return 1;
    }
    
    return (n * Choose(n - 1, k - 1)) / k;
    
}",1
acoc261,1697496775,1,"int choose(int n, int m)
{
    int sum = 0;
    if (m == 0 || m == n){
        return 1;
    } else {
        sum = sum + choose(n - 1, m) + choose(n-1, m-1);
    }
    return sum;
}
int main()
{
    printf(""Result = %d"", choose(6,2));

    return 0;
}",
acoc261,1697496784,2,"int choose(int n, int m)
{
    int sum = 0;
    if (m == 0 || m == n){
        return 1;
    } else {
        sum = sum + choose(n - 1, m) + choose(n-1, m-1);
    }
    return sum;
}",
acoc261,1697496852,3,"int Choose(int n, int m)
{
    int sum = 0;
    if (m == 0 || m == n){
        return 1;
    } else {
        sum = sum + Choose(n - 1, m) + Choose(n-1, m-1);
    }
    return sum;
}",
acoc261,1697496854,4,"int Choose(int n, int m)
{
    int sum = 0;
    if (m == 0 || m == n){
        return 1;
    } else {
        sum = sum + Choose(n - 1, m) + Choose(n-1, m-1);
    }
    return sum;
}",1
adav221,1697975559,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
adav221,1697975561,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
adey750,1697889160,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base case: nC0 = nCn = 1
    } else {
        // Recursive formula: nCm = (n-1)C(m-1) + (n-1)Cm
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
adey750,1697889200,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
afal438,1697503058,1,"#include <stdio.h>

int Choose(int n, int m)
{
	int top = n;
	int BL = m;
	int BR = n - m;

	int newtop = 1;
	int newBL = 1;
	int newBR = 1;

	while (top > 1)
	{
		newtop = top * newtop;
		top--;
	}

	while (BL > 1)
	{
		newBL = BL * newBL;
		BL--;
	}

	while (BR > 1)
	{
		newBR = BR * newBR;
		BR--;
	}

	int final;

	final = newtop / (newBL * newBR);

	return final;

}",0
afal438,1697589162,2,"#include <stdio.h>

int Choose(int n, int m)
{

	if (m == 0 || n == m)
	{
		return 1;
	}

	return Choose(n - 1, m) + Choose(n - 1, m - 1);

}",1
afit324,1698121697,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else {
        return Choose(n-1,m) + Choose(n-1,m-1); 
    }
}",
afit324,1698121698,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else {
        return Choose(n-1,m) + Choose(n-1,m-1); 
    }
}",1
agan859,1697873509,1,"int Choose(int n, int m) {
	if (m == n || m == 0) {
		return 1;
	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
agan859,1697873511,2,"int Choose(int n, int m) {
	if (m == n || m == 0) {
		return 1;
	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
agay279,1698023188,1,"int Choose(int n, int m)
{
    if (m==0){
        return 1;
    }
    else if (m==n){
            return 1;
        }
    

    else{
        return Choose(n-1,m) + Choose(n-1, m-1);
    }

}",
agay279,1698023193,2,"int Choose(int n, int m)
{
    if (m==0){
        return 1;
    }
    else if (m==n){
            return 1;
        }
    

    else{
        return Choose(n-1,m) + Choose(n-1, m-1);
    }

}",1
agou682,1697886550,1,"#include <stdio.h>

// Recursive function to calculate n choose m
int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
agou682,1697886554,2,"#include <stdio.h>

// Recursive function to calculate n choose m
int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
ahac139,1697888595,1,"int Choose(int n, int m)
{
    if ((0 < m)&&(m < n))
    {
        return Choose(n-1,m) + Choose(n-1,m-1);
    } else
    {
        return 1;
    }
}",1
ahac223,1698039238,1,"int Choose(int n, int m)
{
    
    if(m == 0 || n == m){
        return 1;
    }
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
    
}",
ahac223,1698039240,2,"int Choose(int n, int m)
{
    
    if(m == 0 || n == m){
        return 1;
    }
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
    
}",1
ahac223,1698039399,3,"int Choose(int n, int m)
{
    
    if(m == 0 || n == m){
        return 1;
    }
    int ans = Choose(n - 1, m) + Choose(n - 1, m - 1);
    
    return ans;
    
}",
ahac223,1698039404,4,"int Choose(int n, int m)
{
    
    if(m == 0 || n == m){
        return 1;
    }
    int ans = Choose(n - 1, m) + Choose(n - 1, m - 1);
    
    return ans;
    
}",1
ahai431,1697848189,1,"int Choose(int num1, int num2) {
	int Rec1;
	int Rec2;
	
	
	if ((num2 == 0) || (num1 == num2)) {
		return 1;
	}
	else {
		Rec1 = Choose((num1 - 1), num2);
		Rec2 = Choose((num1 - 1), (num2 - 1));
		return Rec1 + Rec2;
	}
}",
ahai431,1697848190,2,"int Choose(int num1, int num2) {
	int Rec1;
	int Rec2;
	
	
	if ((num2 == 0) || (num1 == num2)) {
		return 1;
	}
	else {
		Rec1 = Choose((num1 - 1), num2);
		Rec2 = Choose((num1 - 1), (num2 - 1));
		return Rec1 + Rec2;
	}
}",1
ahas673,1697513048,1,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    }else if (n==m){
        return 1;
    }else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
ahas673,1697513054,2,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    }else if (n==m){
        return 1;
    }else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
ahua579,1697674893,1,"int Choose(int n, int m) {
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
ahua579,1697674895,2,"int Choose(int n, int m) {
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
ahus071,1697930631,1,"#include <stdio.h>

int Choose (int n, int m)
{
    if (m == 0)
    {
        return 0;
    }
    else if (n == m)
    {
        return 1;
    }
    else
    {
        if ( (0 < m ) && (m < n))
        {
            return (Choose(n-1,m) + Choose(n-1,m-1));
        }
    }
}",
ahus071,1697930685,2,"#include <stdio.h>

int Choose (int n, int m)
{
    if (m == 0)
    {
        return 0;
    }
    else if (n == m)
    {
        return 1;
    }
    else
    {
        return (Choose(n-1,m) + Choose(n-1,m-1));
    }
}",
ahus071,1697930702,3,"#include <stdio.h>

int Choose (int n, int m)
{
    if (m == 0)
    {
        return 1;
    }
    else if (n == m)
    {
        return 1;
    }
    else
    {
        return (Choose(n-1,m) + Choose(n-1,m-1));
    }
}",
ahus071,1697930704,4,"#include <stdio.h>

int Choose (int n, int m)
{
    if (m == 0)
    {
        return 1;
    }
    else if (n == m)
    {
        return 1;
    }
    else
    {
        return (Choose(n-1,m) + Choose(n-1,m-1));
    }
}",1
ajam744,1697513620,1,"int Choose(int n, int m)
{
    if ((m == 0) || (m == n))
    {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1); 
}",
ajam744,1697513623,2,"int Choose(int n, int m)
{
    if ((m == 0) || (m == n))
    {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1); 
}",1
ajeo563,1697507634,1,"int Choose(int n, int m ) {

	if (m == 0) {

		return 1;
	}
	else if(m == n) {

		return 1;
	}
	else {

		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
ajhz010,1697517224,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose((n - 1), m) + Choose((n - 1), (m - 1));
    }
}",
ajhz010,1697517226,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose((n - 1), m) + Choose((n - 1), (m - 1));
    }
}",1
ajhz011,1697418230,1,"#include <stdio.h>

int Choose(int n, int m)
{
	if (n == m + 1) {
		return 0;
	}
	else {
		return n + Choose(n - 1, m);
	}
}",0
ajhz011,1697431465,2,"#include <stdio.h>

int i;

int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
ajhz216,1698098733,1,"int Choose(int n, int m) {
	int result;
	int choose1;
	int choose2;

	if (m == 0 || m == n) {
		return 1;
	}
	else {
		choose1 = Choose(n - 1, m);
		choose2 = Choose(n - 1, m - 1);
		result = choose1 + choose2;
		return result;
	}
}",
ajhz216,1698098735,2,"int Choose(int n, int m) {
	int result;
	int choose1;
	int choose2;

	if (m == 0 || m == n) {
		return 1;
	}
	else {
		choose1 = Choose(n - 1, m);
		choose2 = Choose(n - 1, m - 1);
		result = choose1 + choose2;
		return result;
	}
}",1
ajhz318,1697974463,1,"int Choose(int n, int m) {
    int fact1;
    int fact2;
    int fact3;

    int p = n - m;

    for(int i = 1; i < n; i++) {
        fact1 = fact1 * i;
    }
    for(int i = 1; i < m; i++) {
        fact2 = fact2 * i;
    }
    for(int i = 1; i < p; i++) {
        fact3 = fact3 * i;
    }
    
    
    return (fact1/(fact2*((n-m)*fact3)));
}",
ajhz318,1697976971,2,"int Choose(int n, int m) {
    int choose1 = 0;
    int choose2 = 0;
    int result = 0;

    if(0 < m < n) {
        n *= (n - 1);
        m *= (m - 1);

        choose1 = Choose(n - 1, m);
        choose2 = Choose(n - 1,m - 1);

        result = choose1 + choose2;
        return result;
    }
}",
ajhz318,1697976989,3,"int Choose(int n, int m) {
    int choose1 = 0;
    int choose2 = 0;
    int result = 0;

    if(0 < m && m < n) {
        n *= (n - 1);
        m *= (m - 1);

        choose1 = Choose(n - 1, m);
        choose2 = Choose(n - 1,m - 1);

        result = choose1 + choose2;
        return result;
    }
}",
ajhz318,1697977147,4,"int Choose(int n, int m) {
    int choose1 = 0;
    int choose2 = 0;
    int result = 0;

    if(m == 0) {
        return 1;
    }
    else if(n == m) {
        return 1;
    }
    choose1 = Choose(n - 1, m);
    choose2 = Choose(n - 1,m - 1);

    result = choose1 + choose2;
    return result;
}",
ajhz318,1697977173,5,"int Choose(int n, int m) {
    int choose1 = 0;
    int choose2 = 0;
    int result = 0;

    if(m == 0) {
        return 1;
    }
    else if(n == m) {
        return 1;
    }
    choose1 = Choose(n - 1, m);
    choose2 = Choose(n - 1,m - 1);

    result = choose1 + choose2;
    return result;
}",1
ajhz444,1697594940,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else if ((0 < m) && (m < n)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else
		printf(""error"");
		return -1;
}",
ajhz444,1697594979,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else if ((0 < m) && (m < n)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else {
		printf(""error"");
		return -1;
	}
}",
ajhz444,1697594980,3,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else if ((0 < m) && (m < n)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else {
		printf(""error"");
		return -1;
	}
}",1
ajhz488,1698139750,1,"int Choose(int n, int m)  {
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
ajhz488,1698139751,2,"int Choose(int n, int m)  {
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",1
ajin489,1697607182,1,"int Choose (int n, int m){
    if (m == 0 || m == n){
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
ajin489,1697607183,2,"int Choose (int n, int m){
    if (m == 0 || m == n){
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
ajoh511,1697667022,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
ajoh511,1697667025,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
akam677,1698136235,1,"#include <stdio.h>

int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
akam677,1698136244,2,"#include <stdio.h>

int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
aker238,1697440354,1,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    
    if (0<m && m<n){
        int i = Choose(n-1, m);
        int j = Choose(n-1, m-1);
        return i+j;
    }
    
}",
aker238,1697440410,2,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    
    if (0<m && m<n){
        int i = Choose(n-1, m);
        int j = Choose(n-1, m-1);
        return i+j;
    }
    return 0;
}",
aker238,1697440426,3,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    
    if (0<m && m<n){
        int i = Choose(n-1, m);
        int j = Choose(n-1, m-1);
        return i+j;
    }
    return 1;
}",
aker238,1697440436,4,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    
    if (0<m && m<n){
        int i = Choose(n-1, m);
        int j = Choose(n-1, m-1);
        return i+j;
    }
    return 0;
}",
aker238,1697440453,5,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    
    if (0<m && m<n){
        int i = Choose(n-1, m);
        int j = Choose(n-1, m-1);
        return i+j;
    }
    return 0;
}",1
akin699,1698049327,1,"#include <stdio.h>
#include <string.h>

// find the number of ways of selecting 'm' things out of a total of 'n' things
int Choose(int n, int m) {
	int number;
	if ((m == 0)||(m == n)) {
		return 1;
	}
	return Choose(n-1, m) + Choose(n-1, m-1);
}",
akin699,1698049338,2,"#include <stdio.h>
#include <string.h>

// find the number of ways of selecting 'm' things out of a total of 'n' things
int Choose(int n, int m) {
	if ((m == 0)||(m == n)) {
		return 1;
	}
	return Choose(n-1, m) + Choose(n-1, m-1);
}",
akin699,1698049340,3,"#include <stdio.h>
#include <string.h>

// find the number of ways of selecting 'm' things out of a total of 'n' things
int Choose(int n, int m) {
	if ((m == 0)||(m == n)) {
		return 1;
	}
	return Choose(n-1, m) + Choose(n-1, m-1);
}",1
akmu146,1698058125,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
akmu146,1698058128,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
akod059,1697674032,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m)
	{
		return 1;
	}
	else if(m > 0 && m < n)
	{
		int value = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return value;
	}
}",
akod059,1697674062,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m)
	{
		return 1;
	}
	else
	{
		int value = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return value;
	}
}",
akod059,1697674079,3,"int Choose(int n, int m)
{
	if (m == 0 || n == m)
	{
		return 1;
	}
	else
	{
		int value = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return value;
	}
}",1
akri368,1697955296,1,"int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
akri368,1697955298,2,"int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
akwo440,1697983569,1,"int Choose(int n, int m){
    if ((m==0)||(m == n)){
        return 1;
    } else {
        return Choose(n-1, m)+Choose(n-1, m-1);
    }

}",
akwo440,1697983571,2,"int Choose(int n, int m){
    if ((m==0)||(m == n)){
        return 1;
    } else {
        return Choose(n-1, m)+Choose(n-1, m-1);
    }

}",1
ali867,1698019619,1,"#include <stdio.h>

int Choose(int i, int j) {
    return (j == 0 || j == i) ? 1 : Choose(i - 1, j - 1) + Choose(i - 1, j);
}",
ali867,1698019621,2,"#include <stdio.h>

int Choose(int i, int j) {
    return (j == 0 || j == i) ? 1 : Choose(i - 1, j - 1) + Choose(i - 1, j);
}",1
alum086,1697441306,1,"#include <stdio.h>

// Function to calculate n choose m recursively
int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;  // C(n, 0) and C(n, n) are both 1
    } else {
        // Recursive case: C(n, m) = C(n-1, m-1) + C(n-1, m)
        int result = Choose(n - 1, m - 1) + Choose(n - 1, m);
        return result;
    }
}
",
alum086,1697441313,2,"#include <stdio.h>

// Function to calculate n choose m recursively
int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;  // C(n, 0) and C(n, n) are both 1
    } else {
        // Recursive case: C(n, m) = C(n-1, m-1) + C(n-1, m)
        int result = Choose(n - 1, m - 1) + Choose(n - 1, m);
        return result;
    }
}
",1
amac853,1697502757,1,"int Choose(int n, int m)
{
    if(n == m || m == 0)
    {
        return 1;
    }
    else
    {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",
amac853,1697502759,2,"int Choose(int n, int m)
{
    if(n == m || m == 0)
    {
        return 1;
    }
    else
    {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",1
amag544,1698144775,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
amag544,1698144779,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
amah664,1697950173,1,"#include <stdio.h> 

int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1; 
        }
    else {
        return Choose(n-1, m) + Choose(n-1, m-1); 
        
    }
}",
amah664,1697950175,2,"#include <stdio.h> 

int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1; 
        }
    else {
        return Choose(n-1, m) + Choose(n-1, m-1); 
        
    }
}",1
amal783,1697938878,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
amal783,1697938880,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
amar704,1697700922,1,"int Choose(int n, int m) {

    if ((m > 0) && (m < n)) {
        return Choose(n - 1, m) + Choose(n - 1, m- 1);
    } else {
        return 1;
    }
}
",
amar704,1697700924,2,"int Choose(int n, int m) {

    if ((m > 0) && (m < n)) {
        return Choose(n - 1, m) + Choose(n - 1, m- 1);
    } else {
        return 1;
    }
}
",1
amat407,1697877091,1,"int Choose(int n, int m)
{

 if (m==0) {
     return 1;
 } else if (m==n) {
     return 1;
 } else {
     return Choose((n-1),m) + Choose((n-1),(m-1));
 }

}",
amat407,1697877093,2,"int Choose(int n, int m)
{

 if (m==0) {
     return 1;
 } else if (m==n) {
     return 1;
 } else {
     return Choose((n-1),m) + Choose((n-1),(m-1));
 }

}",1
amcm539,1697898206,1,"int Choose(int input1, int input2){

/*Choose takes the 2 inputs and find the number of possilbe combinations that one can be arranged into the other.

Input: 2 integers
Output: Print the number of combinations to the command line

Author: Adam McMann*/
int combo  = 0;

if((input1 == input2) || (input2 ==0)) {
    combo = 1;
} else {
    combo = Choose(input1-1,input2) + Choose(input1-1,input2-1);
}

return combo;
}",
amcm539,1697898209,2,"int Choose(int input1, int input2){

/*Choose takes the 2 inputs and find the number of possilbe combinations that one can be arranged into the other.

Input: 2 integers
Output: Print the number of combinations to the command line

Author: Adam McMann*/
int combo  = 0;

if((input1 == input2) || (input2 ==0)) {
    combo = 1;
} else {
    combo = Choose(input1-1,input2) + Choose(input1-1,input2-1);
}

return combo;
}",1
amhk647,1697525269,1,"int Choose(int n, int m) {
	// base case
	if (m == 0 || m == n) {
		// pick nothing or pick everything
		return 1;
	}
	// recursive case
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
amok249,1697846208,1,"int Choose(int n, int m) {
    if ((m == n) || (m == 0)) {
        return 1;
    } else {
        int a;
        a = m;
        m--;
        n--;
        return Choose(n,m) + Choose(n,a);
    }
}
",1
amur986,1697942071,1,"int Choose(int n,int m)
{

    if (m == 0 || m == n) {
        return 1;
    }
    return (Choose(n - 1, m)+Choose(n - 1, m - 1));


}",
amur986,1697942074,2,"int Choose(int n,int m)
{

    if (m == 0 || m == n) {
        return 1;
    }
    return (Choose(n - 1, m)+Choose(n - 1, m - 1));


}",1
anig922,1698102841,1,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}",
anig922,1698102872,2,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    else
    return Choose(n-1, m-1) + Choose(n-1, m);
}",
anig922,1698102889,3,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    else{
    return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
anig922,1698103203,4,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    }
    else {
    return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
anig922,1698103357,5,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    }
    else {
    return Choose(n+5 -6, m+10-11) + Choose(n-1, m);
    }
}",
anig922,1698103385,6,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    }
    else {
    return Choose(n+5 -6, m+10-11) + Choose(n+20 - 15 -6, m);
    }
}",
anig922,1698103405,7,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    }
    else {
    return Choose(n+5 +2 -6 -2, m+10-11) + Choose(n+20 - 15 -6, m);
    }
}",
anig922,1698103585,8,"#include <stdio.h>

int Choose(int n, int m){
    
    if (m==0 || m==n){
        
        return 0;
        
    }
    
    else {
        
    return Choose(n+5 +2 -6 -2, m+10-11) + Choose(n+20 - 15 -6, m);
    }
}",
anig922,1698103595,9,"#include <stdio.h>

int Choose(int n, int m){
    
    if (m==0 || m==n){
        
        return 2;
        
    }
    
    else {
        
    return Choose(n+5 +2 -6 -2, m+10-11) + Choose(n+20 - 15 -6, m);
    }
}",
anig922,1698103607,10,"#include <stdio.h>

int Choose(int n, int m){
    
    if (m==0 || m==n){
        
        return 1;
        
    }
    
    else {
        
    return Choose(n+5 +2 -6 -2, m+10-11) + Choose(n+20 - 15 -6, m);
    }
}",
anig922,1698103648,11,"#include <stdio.h>

int Choose(int n, int m){
    
    if (m==0 || m==n){
        
        return 1;
        
    }
    
    else {
        
    return (Choose(n+5 +2 -6 -2, m+10-11) + Choose(n+20 - 15 -6, m));
    }
}",
anig922,1698103660,12,"#include <stdio.h>

int Choose(int n, int m){
    
    if (m==0 || m==n){
        
        return 1;
        
    }
    
    else {
        
    return (Choose(n+5 +2 -6 -2, m+10-11) + Choose(n+20 - 15 -6, m));
    }
}",1
aosm976,1698098747,1,"int Choose(int n, int m) {

    int x = 1;

    // base case
    if (m == 0 || m == n) {
        return 1;
    }

    // recursive case (makes progress towards base case)
    else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
    
}",
aosm976,1698098764,2,"int Choose(int n, int m) {

    // base case
    if (m == 0 || m == n) {
        return 1;
    }

    // recursive case (makes progress towards base case)
    else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
    
}",
aosm976,1698098766,3,"int Choose(int n, int m) {

    // base case
    if (m == 0 || m == n) {
        return 1;
    }

    // recursive case (makes progress towards base case)
    else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
    
}",1
apan786,1697900363,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
apan786,1697900365,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
apat750,1697795224,1,"int Choose(int n, int m){
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
apat824,1698043752,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
apat824,1698043995,2,"#include <stdio.h>

int Choose(int n, int m) {

    if ((m == 0) || (m == n)) {
        
        return 1;
        
    } else {
       
        int result1 = Choose(n - 1, m - 1);
        
        int result2 = Choose(n - 1, m);
        
        return result1 + result2;
    }
}",
apat824,1698044011,3,"#include <stdio.h>

int Choose(int n, int m) {

    if ((m == 0) || (m == n)) {
        
        return 1;
        
    } else {
       
        int result1 = Choose(n - 1, m - 1);
        
        int result2 = Choose(n - 1, m);
        
        return result1 + result2;
    }
}",1
apen181,1698037444,1,"#include <stdio.h>


int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
apen181,1698037446,2,"#include <stdio.h>


int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
apre444,1698141760,1,"#include <stdio.h>
/* The function, Choose, takes two integer inputs of n and m, and returns
the number of ways to select m out of n things.
Author: Amy Prebble*/
int Choose(int n, int m) 
{
    if (m==0) {
        return 1;}
    int result=1;
    for (int i=1; i<=m; i++) {
        result*=(n-i+1);
        result/=i;}
    return result;
}",
apre444,1698141763,2,"#include <stdio.h>
/* The function, Choose, takes two integer inputs of n and m, and returns
the number of ways to select m out of n things.
Author: Amy Prebble*/
int Choose(int n, int m) 
{
    if (m==0) {
        return 1;}
    int result=1;
    for (int i=1; i<=m; i++) {
        result*=(n-i+1);
        result/=i;}
    return result;
}",1
apur448,1698051305,1,"#include <stdio.h>

int Choose(int n, int m)
{
    int new, result = 0;

    if (m == 0 || m == n) {
        result++;
    }
    else if (m < n) {
        result = result + Choose((n-1), m) + Choose((n-1), (m-1));

    }
   return result; 
}",
apur448,1698051319,2,"#include <stdio.h>

int Choose(int n, int m)
{
    int result = 0;

    if (m == 0 || m == n) {
        result++;
    }
    else if (m < n) {
        result = result + Choose((n-1), m) + Choose((n-1), (m-1));

    }
   return result; 
}",
apur448,1698051322,3,"#include <stdio.h>

int Choose(int n, int m)
{
    int result = 0;

    if (m == 0 || m == n) {
        result++;
    }
    else if (m < n) {
        result = result + Choose((n-1), m) + Choose((n-1), (m-1));

    }
   return result; 
}",1
aqu284,1698134095,1,"int Choose(int n, int m) {
    // When there are no more combinations
    if (m == 0 || m == n) {
        return 1;
    }
    // Running through the combinations, where; C(n, m) = C(n-1, m-1) + C(n-1, m)
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
aqu284,1698134101,2,"int Choose(int n, int m) {
    // When there are no more combinations
    if (m == 0 || m == n) {
        return 1;
    }
    // Running through the combinations, where; C(n, m) = C(n-1, m-1) + C(n-1, m)
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
arah160,1697448458,1,"int Choose(int n, int m)
{
    if (n<=m)
    return 1;

    return n*Choose(n-1,m)/(n-m);
}",1
arus530,1697503086,1,"int Choose(int total, int select){
    if (select == 0 || total == select){
        return 1;
    }
    return (Choose(total-1, select) + Choose(total-1, select-1));
}",
arus530,1697503088,2,"int Choose(int total, int select){
    if (select == 0 || total == select){
        return 1;
    }
    return (Choose(total-1, select) + Choose(total-1, select-1));
}",1
aryu462,1697607110,1,"#include <stdio.h> 

int Choose(int n, int m) { 
    if (m == 0 || n==m) { 
        return 1; 
    } 
    return Choose(n-1, m-1) + Choose(n-1, m); 
}",
aryu462,1697607112,2,"#include <stdio.h> 

int Choose(int n, int m) { 
    if (m == 0 || n==m) { 
        return 1; 
    } 
    return Choose(n-1, m-1) + Choose(n-1, m); 
}",1
asaa285,1698135219,1,"int Choose(int n, int m) {
    if (m == 1 || m == n - 1) {
        return n;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
ashe298,1698050585,1,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    else{
        return Choose(n-1,m-1)+Choose(n-1,m);
    }
}",
ashe298,1698050599,2,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    else{
        return Choose(n-1,m-1)+Choose(n-1,m);
    }
}",1
ashi565,1697614942,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
ashi565,1697614944,2,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
asim819,1697779758,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	} else if(n == m) {
		return 1;
	} else if(0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
asim819,1697779768,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	} else if(n == m) {
		return 1;
	} else if(0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0
}",
asim819,1697779773,3,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	} else if(n == m) {
		return 1;
	} else if(0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",
asim819,1697779775,4,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	} else if(n == m) {
		return 1;
	} else if(0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",1
aski294,1698055581,1,"int Choose(int n, int m)
{
    if (n == m || m == 0) {
        return 1; 
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
aski294,1698055584,2,"int Choose(int n, int m)
{
    if (n == m || m == 0) {
        return 1; 
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
asmi629,1698112761,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n){
        return 1; 
    } 
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

",
asmi629,1698138253,2,"int Choose(int n, int m) 
{
    if (m == 0 || m == n){
        return 1; 
    } 
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

",1
atay777,1697929227,1,"int Choose(int m, int n)
{
    while (m>n && n>0)
    {
        return Choose(m-1, n-1)+Choose(m-1, n);
    }
    return 1;
}",1
atee059,1697947291,1,"int Choose(int n, int m) {

	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
atee059,1697947294,2,"int Choose(int n, int m) {

	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
atho643,1697714377,1,"Choose(int n, int m){
    return Choose(n-1,m-1)+Choose(n-1,m);
}",
atho643,1697714388,2,"void Choose(int n, int m){
    return Choose(n-1,m-1)+Choose(n-1,m);
}",
atho643,1697714397,3,"int Choose(int n, int m){
    return Choose(n-1,m-1)+Choose(n-1,m);
}",
atho643,1697714455,4,"int Choose(int n, int m){
    
    if(m==0||m==n){
        return 1;
    }
    
    return Choose(n-1,m-1)+Choose(n-1,m);
}",
atho643,1697714460,5,"int Choose(int n, int m){
    
    if(m==0||m==n){
        return 1;
    }
    
    return Choose(n-1,m-1)+Choose(n-1,m);
}",1
athu157,1697513529,1,"#include <stdio.h>

int Choose(int n, int m)
{
	// base cases
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
athu157,1697513532,2,"#include <stdio.h>

int Choose(int n, int m)
{
	// base cases
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
atup175,1698120999,1,"int Choose(int a, int b){
    if (b > a){
        return 0;
    }
    if (b == 0 || b == a){
        return 1;
    }
    return Choose(a - 1, b - 1) + Choose(a - 1, b);
}",
atup175,1698121004,2,"int Choose(int a, int b){
    if (b > a){
        return 0;
    }
    if (b == 0 || b == a){
        return 1;
    }
    return Choose(a - 1, b - 1) + Choose(a - 1, b);
}",1
avan381,1697932624,1,"int choose(int n, int m)
{
    int result;
    if((m == 0)||( m == n)){
        return result = 1;
     }
    result = choose(n - 1, m) + choose(n - 1, m - 1);
}",
avan381,1697932645,2,"int Choose(int n, int m)
{
    int result;
    if((m == 0)||( m == n)){
        return result = 1;
     }
    result = Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
avan381,1697932890,3,"int Choose(int n, int m)
{
    int result;
    if((m == 0)||( m == n)){
        return result = 1;
     }
    result = Choose(n - 1, m) + Choose(n - 1, m - 1);
",
avan381,1697932895,4,"int Choose(int n, int m)
{
    int result;
    if((m == 0)||( m == n)){
        return result = 1;
     }
    result = Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
avan381,1697932955,5,"int Choose(int n, int m)
{
    int result;
    if((m == 0)||( m == n)){
        return result = 1;
     }
    result = Choose(n - 1, m) + Choose(n - 1, m - 1);
    return result;
}",
avan381,1697932957,6,"int Choose(int n, int m)
{
    int result;
    if((m == 0)||( m == n)){
        return result = 1;
     }
    result = Choose(n - 1, m) + Choose(n - 1, m - 1);
    return result;
}",1
awal599,1698055282,1,"int Choose(int a, int b){
    if ((b == 0) || (a == b)){
        return 1;
    } else {
        return (Choose(a - 1,b) + Choose(a-1,b-1));
    }
}",
awal599,1698055284,2,"int Choose(int a, int b){
    if ((b == 0) || (a == b)){
        return 1;
    } else {
        return (Choose(a - 1,b) + Choose(a-1,b-1));
    }
}",1
awil907,1697426945,1,"int Choose(int n, int m) {

    if (m == 0){
        return 1;
    } else if(m == n){
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
awil907,1697426947,2,"int Choose(int n, int m) {

    if (m == 0){
        return 1;
    } else if(m == n){
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
awri757,1697442469,1,"int Choose(int n, int m)
{
    int result;
    if (m == 0 || n == m) {
        return 1;
    }
    else {
        result = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return result;
    }
    return -1;
}",
awri757,1697442471,2,"int Choose(int n, int m)
{
    int result;
    if (m == 0 || n == m) {
        return 1;
    }
    else {
        result = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return result;
    }
    return -1;
}",1
ayan607,1697798947,1,"int Choose (int n, int m)
{
    if (m == 0 || m >= n){
        return 1;
    }else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
ayan607,1697798949,2,"int Choose (int n, int m)
{
    if (m == 0 || m >= n){
        return 1;
    }else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
ayou303,1697523681,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base case: n choose 0 or n choose n is always 1
    if (m == 0 || m == n) {
        return 1;
    }
    // Recursive case: Use the recursive formula for combinations
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
ayou303,1697523692,2,"#include <stdio.h>

int Choose(int n, int m) {
    // Base case: n choose 0 or n choose n is always 1
    if (m == 0 || m == n) {
        return 1;
    }
    // Recursive case: Use the recursive formula for combinations
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
ayou533,1697786640,1,"int Choose(int n, int m) {
    if (m == 0 || n == m)
        return 1;
    else if (n < m)
        return 0;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
ayua214,1698020423,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
ayua214,1698020424,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
bate521,1698124368,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    } 
    else if (m == n) {
        return 1;
    } 
    else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
bate521,1698124375,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    } 
    else if (m == n) {
        return 1;
    } 
    else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",1
bcar662,1697952633,1,"int Choose(int n, int m) {
	int calls = 0;
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return(Choose(n-1, m) + Choose(n-1,m-1));
	}
}",
bcar662,1697952646,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return(Choose(n-1, m) + Choose(n-1,m-1));
	}
}",
bcar662,1697952648,3,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return(Choose(n-1, m) + Choose(n-1,m-1));
	}
}",1
bcha389,1697506350,1,"int Choose(int n, int m) {
	if (m == 0 || n == m) {
		return 1;
	}

	return (Choose(n - 1, m) + Choose(n - 1, m - 1));
}",
bcha389,1697506352,2,"int Choose(int n, int m) {
	if (m == 0 || n == m) {
		return 1;
	}

	return (Choose(n - 1, m) + Choose(n - 1, m - 1));
}",1
bcha726,1697946133,1,"int Choose(int n, int m) {

    if ((m == 0) || (n == m)) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
bcha726,1697946137,2,"int Choose(int n, int m) {

    if ((m == 0) || (n == m)) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",1
bcos422,1697426159,1,"int Choose(int n, int m) {
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n-1,m) + Choose(n - 1, m - 1);
	}
}",1
bcru157,1697512969,1,"int Choose(int n, int m)
{
	int result = 0;

	if ((m == n) || (m == 0)) {
		return 1;
	}
	else {
		int alter_n = Choose((n - 1), m);
		int alter_both = Choose((n - 1), (m - 1));
		return alter_n + alter_both;
	}
}",
bcru157,1697513007,2,"int Choose(int n, int m)
{
	if ((m == n) || (m == 0)) {
		return 1;
	}
	else {
		int alter_n = Choose((n - 1), m);
		int alter_both = Choose((n - 1), (m - 1));
		return alter_n + alter_both;
	}
}",
bcru157,1697513010,3,"int Choose(int n, int m)
{
	if ((m == n) || (m == 0)) {
		return 1;
	}
	else {
		int alter_n = Choose((n - 1), m);
		int alter_both = Choose((n - 1), (m - 1));
		return alter_n + alter_both;
	}
}",1
bfis965,1698139039,1,"int Choose(int n, int m)
{
	if (n==m||m == 0) {
		return 1;
	}
	else {
		if ((m > 0) && (m < n)) {
			return Choose(n - 1, m) + Choose(n - 1, m - 1);
		}
		return n / m;
	}

}",
bfis965,1698139041,2,"int Choose(int n, int m)
{
	if (n==m||m == 0) {
		return 1;
	}
	else {
		if ((m > 0) && (m < n)) {
			return Choose(n - 1, m) + Choose(n - 1, m - 1);
		}
		return n / m;
	}

}",1
bfla774,1697512258,1,"int Choose(int n, int m)
 {
    if( m == 0 || n ==m){
        return 1;
    } else if(0< m && m<n){
        return 2;
    }
 }
",
bfla774,1697512303,2,"
int Choose(int n, int m)
 {
    if( m == 0 || n == m){
        return 1;
    } else if(0< m && m<n){
        return 2;
    } else{
        return 0;
    }
 }",
bfla774,1697512911,3,"int Choose(int n, int m)
 {
    if( m == 0 || n == m){
        return 1;
    } else if(0< m && m<n){
      return Choose(n -1, m) + Choose(n-1, m-1);
    } else{
        return 0;
    }
 }",
bfla774,1697512914,4,"int Choose(int n, int m)
 {
    if( m == 0 || n == m){
        return 1;
    } else if(0< m && m<n){
      return Choose(n -1, m) + Choose(n-1, m-1);
    } else{
        return 0;
    }
 }",1
bgib630,1697506404,1,"#include <stdio.h>

int Choose(int n, int m)
{
    int num = n * 2;
    num = num / m;
    return num;
}",
bgib630,1697506417,2,"#include <stdio.h>

int Choose(int n, int m)
{
    int num = n * (n - 1);
    num = num / m;
    return num;
}",
bgib630,1697506422,3,"#include <stdio.h>

int Choose(int n, int m)
{
    int num = n * (n - 1);
    num = num / m;
    return num;
}",0
bgib630,1697506671,4,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
bgib630,1697507464,5,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
bgru726,1697790562,1,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    if (n == m) {
        return 1;
    }
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
bgru726,1697790564,2,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    if (n == m) {
        return 1;
    }
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
bguo360,1697424996,1,"int Choose(int n, int m) {
	if (n == m || !m) {
		return 1;
	}
	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
bguo360,1697424998,2,"int Choose(int n, int m) {
	if (n == m || !m) {
		return 1;
	}
	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
bhua898,1697953845,1,"int Choose(int n, int m) {
    int count = 0;
    if (n > m && m > 0) {
        count += Choose(n-1, m);
        count += Choose(n-1, m-1);
    } else if (n == m || (n && !m)) {
        count++;
    }
    return count;
}",
bhua898,1697953846,2,"int Choose(int n, int m) {
    int count = 0;
    if (n > m && m > 0) {
        count += Choose(n-1, m);
        count += Choose(n-1, m-1);
    } else if (n == m || (n && !m)) {
        count++;
    }
    return count;
}",1
bjon836,1697957361,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    if (m == 1) {
        return n;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
bjon836,1697957365,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    if (m == 1) {
        return n;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
bkho028,1697630476,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
bkho028,1697630478,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
bli482,1697514257,1,"#include <stdio.h>

int Choose(int x, int y) {

	int Factorial(int n) {

		if (n > 1) {
			return n * Factorial(n - 1);
		}

	}

	int result;

	if ((y == 0) || (y == x)) {
		result = 1;
	}
	else {
		result = (Factorial(x)) / ((Factorial(y)) * (Factorial(x - y)));
	}

	return result;
}
",
bli482,1697514355,2,"int Factorial(int n) {

		if (n > 1) {
			return n * Factorial(n - 1);
		}

	}


int Choose(int x, int y) {


	int result;

	if ((y == 0) || (y == x)) {
		result = 1;
	}
	else {
		result = (Factorial(x)) / ((Factorial(y)) * (Factorial(x - y)));
	}

	return result;
}
",
bli482,1697514492,3,"#include <stdio.h>

int Factorial(int n) {

		if (n > 1) {
			return n * Factorial(n - 1);
		}
		
		return 1;

	}


int Choose(int x, int y) {


	int result;

	if ((y == 0) || (y == x)) {
		result = 1;
	}
	else {
		result = (Factorial(x)) / ((Factorial(y)) * (Factorial(x - y)));
	}

	return result;
}
",
bli482,1697514495,4,"#include <stdio.h>

int Factorial(int n) {

		if (n > 1) {
			return n * Factorial(n - 1);
		}
		
		return 1;

	}


int Choose(int x, int y) {


	int result;

	if ((y == 0) || (y == x)) {
		result = 1;
	}
	else {
		result = (Factorial(x)) / ((Factorial(y)) * (Factorial(x - y)));
	}

	return result;
}
",0
bli482,1697514756,5,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (m > n) {
        return 0;  // Invalid input
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
bli482,1697514758,6,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (m > n) {
        return 0;  // Invalid input
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
bli775,1697543922,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0; // Return 0 if m is invalid
    }

    int result = 1;
    int i;

    for (i = 1; i <= m; i++) {
        result *= (n - i + 1);
        result /= i;",
bli775,1697543937,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0; // Return 0 if m is invalid
    }

    int result = 1;
    int i;

    for (i = 1; i <= m; i++) {
        result *= (n - i + 1);
        result /= i;
    }
}",
bli775,1697543951,3,"#include <stdio.h>

int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0; // Return 0 if m is invalid
    }

    int result = 1;
    int i;

    for (i = 1; i <= m; i++) {
        result *= (n - i + 1);
        result /= i;
    }

    return result;
}",
bli775,1697543957,4,"#include <stdio.h>

int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0; // Return 0 if m is invalid
    }

    int result = 1;
    int i;

    for (i = 1; i <= m; i++) {
        result *= (n - i + 1);
        result /= i;
    }

    return result;
}",1
bmac148,1697779393,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
bmac148,1697779396,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
bora417,1697615442,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
bora417,1697615445,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
bpak212,1697950560,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
bpak212,1697950577,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 5;
    } 
    else 
    {
        return Choose(n - 5, m - 5) + Choose(n - 5, m);
    }
}",
bpak212,1697950607,3,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 0;
    } 
    else 
    {
        return Choose(n - 0, m - 0) + Choose(n - 0, m);
    }
}",
bpak212,1697950638,4,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - , m - 0) + Choose(n - 0, m);
    }
}",
bpak212,1697950645,5,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - 0, m - 0) + Choose(n - 0, m);
    }
}",
bpak212,1697950658,6,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - 2, m - 2) + Choose(n - 2, m);
    }
}",
bpak212,1697950705,7,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
bpak212,1697950734,8,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
bpat907,1697765083,1,"int Choose(int n, int m)
{
	int combinations;

	if (m == 0 || m == n) {
		combinations = 1;
		return combinations;
	}
	else {
		combinations = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return combinations;
}",
bpat907,1697765085,2,"int Choose(int n, int m)
{
	int combinations;

	if (m == 0 || m == n) {
		combinations = 1;
		return combinations;
	}
	else {
		combinations = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return combinations;
}",1
bril841,1698094065,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;  
    } 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
bril841,1698094073,2,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;  
    } 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
bsil719,1697580324,1,"#include <stdio.h>

void Choose(int n, int m)
{
    if (m == 0 || n == m){
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
bsil719,1697580408,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m){
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
bsil719,1697580411,3,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m){
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
bvau704,1697500392,1,"int Choose(int n, int m){
    
    
    if (m == 0 || n == m){
        
        return 1;
    }
    else{
        
        return Choose(n-1, m) + Choose(n-1, m-1);
       
    }
    
}",
bvau704,1697500395,2,"int Choose(int n, int m){
    
    
    if (m == 0 || n == m){
        
        return 1;
    }
    else{
        
        return Choose(n-1, m) + Choose(n-1, m-1);
       
    }
    
}",1
bwis161,1697508128,1,"int Choose(int n, int m) {

	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (0 < m && m < n) {
		int x = Choose((n - 1), m);
		int y = Choose((n-1), (m - 1));
		return x+y;
	}
}",
bwis161,1697508161,2,"int Choose(int n, int m) {

	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (0 < m && m < n) {
		int x = Choose((n - 1), m);
		int y = Choose((n-1), (m - 1));
		return x+y;
	} else {
	    return 0;
	}
	
}",
bwis161,1697508177,3,"int Choose(int n, int m) {

	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (0 < m && m < n) {
		int x = Choose((n - 1), m);
		int y = Choose((n-1), (m - 1));
		return x+y;
	} else {
	    return 0;
	}
	
}",1
bwoo348,1698034659,1,"int Choose(int n, int m)
{
   if (m==0){
      return 0;
   } else if (m==1){
       return n;
   }
   
   if (n == m) {
      return 1;
   } else {
      //return (m-1)*2^(n-1) + Choose(n - 1, m);
      //printf(""R: %d\n"", (m-1)*2^(n-1) + Choose(n - 1, m));
      if (m==2){
        return (n-1)+Choose(n-1,m);
      } else {
        return Choose(n-1,m-1)+Choose(n-1,m);
        //return (n-1)+Choose(n-1,m);
      }
   }
}",
bwoo348,1698034662,2,"int Choose(int n, int m)
{
   if (m==0){
      return 0;
   } else if (m==1){
       return n;
   }
   
   if (n == m) {
      return 1;
   } else {
      //return (m-1)*2^(n-1) + Choose(n - 1, m);
      //printf(""R: %d\n"", (m-1)*2^(n-1) + Choose(n - 1, m));
      if (m==2){
        return (n-1)+Choose(n-1,m);
      } else {
        return Choose(n-1,m-1)+Choose(n-1,m);
        //return (n-1)+Choose(n-1,m);
      }
   }
}",1
byiu331,1697438011,1,"int Choose(int n, int m) {

	int value=0;

	if ((m==0)||(n==m)) {
		value = 1;
	}
	else if ((m > 0) && (n > m)) {
	
		value = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}

	return value;
}
",1
byul423,1697445361,1,"int Choose(int n, int m) {

	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m - 1) + Choose(n - 1, m);
	}
}",
byul423,1697445364,2,"int Choose(int n, int m) {

	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m - 1) + Choose(n - 1, m);
	}
}",1
cada577,1697804471,1,"int Choose(int n, int m)
{
    if(m==0 || m==n ){
        return 1;
    }
    
    return(Choose(n-1,m) + Choose(n-1, m-1));
",
cada577,1697804483,2,"int Choose(int n, int m)
{
    if(m==0 || m==n ){
        return 1;
    }
    
    return(Choose(n-1,m) + Choose(n-1, m-1));
} ",
cada577,1697804486,3,"int Choose(int n, int m)
{
    if(m==0 || m==n ){
        return 1;
    }
    
    return(Choose(n-1,m) + Choose(n-1, m-1));
} ",1
cana544,1697506831,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	n--;
	int m1 = m;
	int m2 = m - 1;

	return Choose(n, m1) + Choose(n, m2);
}",
cana544,1697506833,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	n--;
	int m1 = m;
	int m2 = m - 1;

	return Choose(n, m1) + Choose(n, m2);
}",1
cang688,1697707373,1,"int Choose(int n, int m) {
    int numComb = 0;
    if ((m == 0) || (n == m))  {
        numComb++;
    } else if ((0 < m) && (m < n)) {
        int call1 = Choose(n - 1, m);
        int call2 = Choose(n - 1, m - 1);
        numComb += call1 + call2;
    }
    return numComb;
}",
cang688,1697707378,2,"int Choose(int n, int m) {
    int numComb = 0;
    if ((m == 0) || (n == m))  {
        numComb++;
    } else if ((0 < m) && (m < n)) {
        int call1 = Choose(n - 1, m);
        int call2 = Choose(n - 1, m - 1);
        numComb += call1 + call2;
    }
    return numComb;
}",1
cbee072,1697429054,1,"int Choose(int n, int m)
{
   
   if ((m == 0) || (n == m)) {
       return 1;
   }
   else {
       int x;
       int y;
       int z;
       
       x = Choose((n - 1), m);
       y = Choose((n - 1), (m - 1));
       z = x + y;
       return z;
   }

}
",
cbee072,1697429058,2,"int Choose(int n, int m)
{
   
   if ((m == 0) || (n == m)) {
       return 1;
   }
   else {
       int x;
       int y;
       int z;
       
       x = Choose((n - 1), m);
       y = Choose((n - 1), (m - 1));
       z = x + y;
       return z;
   }

}
",1
cbro223,1697431087,1,"int Choose(int n, int m) {
    if (m == 0 || n ==m) {
        return 1;
    }
    else {
        return (Choose(n-1,m) + Choose(n-1,m-1));
    }
}",
cbro223,1697431089,2,"int Choose(int n, int m) {
    if (m == 0 || n ==m) {
        return 1;
    }
    else {
        return (Choose(n-1,m) + Choose(n-1,m-1));
    }
}",1
cbro435,1697441412,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m){
    if(m==0 || m==n){
        return 1;
    }
    else{
    if(m>0 && m<n){
        int nm= Choose(n-1,m-1)+Choose(n-1,m);
        return nm;
    }    
    }
}",
cbro435,1697441440,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m){
    if(m==0 || m==n){
        return 1;
    }
    else{
    if(m>0 && m<n){
        int nm= Choose(n-1,m-1)+Choose(n-1,m);
        return nm;
    }    
    }
",
cbro435,1697441447,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m){
    if(m==0 || m==n){
        return 1;
    }
    else{
    if(m>0 && m<n){
        int nm= Choose(n-1,m-1)+Choose(n-1,m);
        return nm;
    }    
    }
}",
cbro435,1697441501,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m){
    if(m==0 || m==n){
        return 1;
    }
    else{
    if(m>0 && m<n){
        return Choose(n-1,m-1)+Choose(n-1,m);
    }    
    }
}

",
cbro435,1697441531,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m){
    if(m==0 || m==n){
        return 1;
    }
    else{
        int nm= Choose(n-1,m-1)+Choose(n-1,m);
        return nm;
    }
}",
cbro435,1697441599,6,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m){
    if(m==0 || m==n){
        return 1;
    }
    else{
        int nm= Choose(n-1,m-1)+Choose(n-1,m);
        return nm;
    }
}",1
cbro989,1697492515,1,"int Choose(int n, int m)
{
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
cbro989,1697492558,2,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
    return 1;
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
cbro989,1697492631,3,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
    return 1;}
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
cbro989,1697492661,4,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
    return 1;}
    
    return Choose((n - 1), (m - 1)) + Choose((n - 1), m);
}",
cbro989,1697492674,5,"int Choose(int n, int m)
{
    if ((m == 0) || (n == m)) {
    return 1;}
    
    return Choose((n - 1), (m - 1)) + Choose((n - 1), m);
}",
cbro989,1697492677,6,"int Choose(int n, int m)
{
    if ((m == 0) || (n == m)) {
    return 1;}
    
    return Choose((n - 1), (m - 1)) + Choose((n - 1), m);
}",1
cbur703,1697682038,1,"int Choose(int n, int m)
{
  if (n == m || m == 0) 
  {
      return 1;
  }  
  else 
  {
      int choose1 = Choose(n - 1, m);
      int choose2 = Choose(n - 1, m - 1);
      return choose1 + choose2;
      
  }
}",
cbur703,1697682041,2,"int Choose(int n, int m)
{
  if (n == m || m == 0) 
  {
      return 1;
  }  
  else 
  {
      int choose1 = Choose(n - 1, m);
      int choose2 = Choose(n - 1, m - 1);
      return choose1 + choose2;
      
  }
}",1
ccha663,1697605225,1,"int Choose(int n,int m) {
    
    
    
    if (n == m || m ==0) {
        return 1;
    }   else {
        return Choose(n-1,m)+Choose(n-1,m-1);
        
        
        
    }
    
    
    
}",1
ccha854,1697696107,1,"int Choose(int n, int m) {
    
    int value;
    
    if (m==0 || m==n) {
        value = 1;
        return value;
    } else if (0<m<n) {
        int a = Choose(n-1, m);
        int b = Choose(n-1, m-1);
        value = a+b;
    }
    
    return value;
}
",
ccha854,1697696231,2,"int Choose(int n, int m) {
    
    int value;
    
    if (m==0 || m==n) {
        value = 1;
        return value;
    } else if (m>n) {
        value = 0;
        return value;
    } else {
        int a = Choose(n-1, m);
        int b = Choose(n-1, m-1);
        value = a+b;
    }
    
    return value;
}
",
ccha854,1697696234,3,"int Choose(int n, int m) {
    
    int value;
    
    if (m==0 || m==n) {
        value = 1;
        return value;
    } else if (m>n) {
        value = 0;
        return value;
    } else {
        int a = Choose(n-1, m);
        int b = Choose(n-1, m-1);
        value = a+b;
    }
    
    return value;
}
",1
cche441,1698031014,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
cche441,1698031017,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
cche873,1697600490,1,"int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
cche873,1697600535,2,"int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
cdel568,1697425167,1,"int Choose(int n, int k)
{
    int tart;

    if (k == 0) {
        tart = 1;
    } else if (n == k) {
        tart = 1;
    } else {
        tart = Choose(n - 1, k) + Choose(n - 1, k - 1);
    }

    return tart;
}",
cdel568,1697425170,2,"int Choose(int n, int k)
{
    int tart;

    if (k == 0) {
        tart = 1;
    } else if (n == k) {
        tart = 1;
    } else {
        tart = Choose(n - 1, k) + Choose(n - 1, k - 1);
    }

    return tart;
}",1
cdin152,1697786544,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
cdin152,1697786548,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
cdin268,1697753576,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
cdin268,1697753581,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
cdsi208,1698115758,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    int c = Choose(n - 1, m - 1) + Choose(n - 1, m);
    return c;
}",
cdsi208,1698115761,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    int c = Choose(n - 1, m - 1) + Choose(n - 1, m);
    return c;
}",1
cgal160,1697781691,1,"int Choose(int n, int m) {
	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
cgal160,1697781753,2,"int Choose(int n, int m) {
	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
cgaz516,1697436262,1,"int Choose(int n, int m)
{
	// For calculating the base case:
	if (n == 0 || m == 0 || n == m) {
	return 1;
	}

	// For calculating the recursive case
	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
chua804,1697890805,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
chua804,1697890808,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
civa625,1698107531,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if ((m <= 0) || (m == n)) {
        return 1;
    } else {
        int result = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return result;
    }
}",
civa625,1698107535,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if ((m <= 0) || (m == n)) {
        return 1;
    } else {
        int result = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return result;
    }
}",1
cjun818,1697945035,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n)
        return 1;
    else
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
cjun818,1697945037,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n)
        return 1;
    else
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
clee482,1697862396,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m)
    {
        return 1;
    }
    else 
    {
        return Choose(n-1,m)+Choose(n-1,m-1);
    }
}",
clee482,1697862405,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m)
    {
        return 1;
    }
    else 
    {
        return Choose(n-1,m)+Choose(n-1,m-1);
    }
}",1
cleu746,1697786156,1,"int Choose(int n, int m)
{
    if(m == 0) {
        return 1;
    } else if(m==n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
cleu746,1697786185,2,"int Choose(int n, int m)
{
    if(m == 0) {
        return 1;
    } else if(m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
cleu746,1697786188,3,"int Choose(int n, int m)
{
    if(m == 0) {
        return 1;
    } else if(m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
cli942,1698137309,1,"int Choose(int a,int b)
{
    int c;
    c = (a*(a - 1)) /(b*(b - 1));
    return c;
}",
cli942,1698137311,2,"int Choose(int a,int b)
{
    int c;
    c = (a*(a - 1)) /(b*(b - 1));
    return c;
}",0
cli942,1698137760,3,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > b; a--){
        c=c*a;
    }
    for(b = b; b > 1; b--){
        d=d*b;
    }
    return c/d;
}
",
cli942,1698137797,4,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > a-b; a--){
        c=c*a;
    }
    for(b = b; b > 1; b--){
        d=d*b;
    }
    return c/d;
}
",
cli942,1698137817,5,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > a - b; a--){
        c=c*a;
    }
    for(b = b; b > 1; b--){
        d=d*b;
    }
    return c/d;
}
",
cli942,1698137856,6,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > c - b; a--){
        c=c*a;
    }
    for(b = b; b > 1; b--){
        d=d*b;
    }
    return c/d;
}
",
cli942,1698137865,7,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b; b > 1; b--){
        d=d*b;
    }
    return c/d;
}
",
cli942,1698137872,8,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > c - b - 1; a--){
        c=c*a;
    }
    for(b = b; b > 1; b--){
        d=d*b;
    }
    return c/d;
}
",
cli942,1698137897,9,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > c - b; a--){
        c=c*a;
    }
    for(b = b; b > 0; b--){
        d=d*b;
    }
    return c/d;
}
",
cli942,1698137966,10,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b; b > 0; b--){
        d=d*b;
    }
    return c/d;
}
",
cli942,1698138139,11,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b; b > 0; b--){
        d=d*b;
    }
    return c / d;
}
",
cli942,1698138496,12,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a - 1; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b; b > 0; b--){
        d=d*b;
    }
    return c / d;
}
",
cli942,1698138504,13,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a - 1; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b - 1; b > 0; b--){
        d=d*b;
    }
    return c / d;
}
",
cli942,1698138520,14,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a + 1; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b + 1; b > 0; b--){
        d=d*b;
    }
    return c / d;
}
",
cli942,1698138529,15,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a + 1; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b ; b > 0; b--){
        d=d*b;
    }
    return c / d;
}
",
cli942,1698138536,16,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a + 1; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b - 1 ; b > 0; b--){
        d=d*b;
    }
    return c / d;
}
",
cli942,1698138543,17,"int Choose(int a,int b)
{
    int c=a;
    int d=b;
    
    for(a = a ; a > c - b + 1; a--){
        c=c*a;
    }
    for(b = b - 1 ; b > 0; b--){
        d=d*b;
    }
    return c / d;
}
",
cli942,1698138752,18,"int Choose(int a,int b)
{
    int c=1;
    int d=1;
    b= Math.min(m,n-m);
    for(int i=m;i>= 1; i--){
        c *= a;
        a--; 
        d *= i;
        
    }
    return c / d;
}
",
cli942,1698138766,19,"int Choose(int a,int b)
{
    int c=1;
    int d=1;
    b= min(m,n-m);
    for(int i=m;i>= 1; i--){
        c *= a;
        a--; 
        d *= i;
        
    }
    return c / d;
}
",
cli942,1698138775,20,"int Choose(int a,int b)
{
    int c=1;
    int d=1;
    for(int i=m;i>= 1; i--){
        c *= a;
        a--; 
        d *= i;
        
    }
    return c / d;
}
",
cli942,1698138784,21,"int Choose(int a,int b)
{
    int c=1;
    int d=1;
    for(int i=a ;i>= 1; i--){
        c *= a;
        a--; 
        d *= i;
        
    }
    return c / d;
}
",
cli942,1698138807,22,"int Choose(int a,int b)
{
    int c=1;
    int d=1;
    b = Math.min(m,n-m);
    for(int i=a ;i>= 1; i--){
        c *= a;
        a--; 
        d *= i;
        
    }
    return c / d;
}
",
cli942,1698138898,23,"int choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    // Recursive case
    return choose(n - 1, m - 1) + choose(n - 1, m);
}

int main() {
    int n = 5;
    int m = 2;
    int result = choose(n, m);
    printf(""%d choose %d is %d\n"", n, m, result);
    return 0;
}",
cli942,1698138909,24,"int choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    // Recursive case
    return choose(n - 1, m - 1) + choose(n - 1, m);
}

",
cli942,1698139064,25,"int choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return choose(n - 1, m - 1) + choose(n - 1, m);
    }
}",
cli942,1698139086,26,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
cli942,1698139089,27,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
cli942,1698139123,28,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } 
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
clob269,1697500648,1,"
int Choose(int n, int k) {
    int en = n;
    int kay = k;

    int top = n;

    while (n != 1) {

        top *= (n - 1);
        n--;
    }

    n = en;

    int kfact = k;

    while (k != 1) {

        kfact *= (k - 1);
        k--;
    }

    k = kay;

    int nmk = n - k;

    int botright = nmk;

    while (nmk != 1) {

        botright *= (nmk - 1);
        nmk--;
    }

    int ans = top / (kfact * botright);

    return ans;

}


",
clob269,1697500652,2,"
int Choose(int n, int k) {
    int en = n;
    int kay = k;

    int top = n;

    while (n != 1) {

        top *= (n - 1);
        n--;
    }

    n = en;

    int kfact = k;

    while (k != 1) {

        kfact *= (k - 1);
        k--;
    }

    k = kay;

    int nmk = n - k;

    int botright = nmk;

    while (nmk != 1) {

        botright *= (nmk - 1);
        nmk--;
    }

    int ans = top / (kfact * botright);

    return ans;

}


",0
clob269,1697502084,3,"

int Choose(int n, int k) {
    int en = n;
    int kay = k;

    double top = n;

    while (n != 1) {

        top *= (n - 1);
        n--;
    }

    n = en;

    double kfact = k;

    while (k != 1) {

        kfact *= (k - 1);
        k--;
    }

    k = kay;

    int nmk = n - k;

    double botright = nmk;

    while (nmk != 1) {

        botright *= (nmk - 1);
        nmk--;
    }

    int ans = top / (kfact * botright);

    return ans;

}

",
clob269,1697502086,4,"

int Choose(int n, int k) {
    int en = n;
    int kay = k;

    double top = n;

    while (n != 1) {

        top *= (n - 1);
        n--;
    }

    n = en;

    double kfact = k;

    while (k != 1) {

        kfact *= (k - 1);
        k--;
    }

    k = kay;

    int nmk = n - k;

    double botright = nmk;

    while (nmk != 1) {

        botright *= (nmk - 1);
        nmk--;
    }

    int ans = top / (kfact * botright);

    return ans;

}

",0
clob269,1697502535,5,"

int Choose(int n, int k) {
    int en = n;
    int kay = k;

    double top = n;

    while (n != 1) {

        top *= (n - 1);
        n--;
    }

    n = en;

    double kfact = k;

    while (k != 1) {

        kfact *= (k - 1);
        k--;
    }

    k = kay;

    int nmk = n - k;

    double botright = nmk;

    while (nmk != 1) {

        botright *= (nmk - 1);
        nmk--;
    }

    int ans = top / (kfact * botright);

    return ans;

}

",
clob269,1697502538,6,"

int Choose(int n, int k) {
    int en = n;
    int kay = k;

    double top = n;

    while (n != 1) {

        top *= (n - 1);
        n--;
    }

    n = en;

    double kfact = k;

    while (k != 1) {

        kfact *= (k - 1);
        k--;
    }

    k = kay;

    int nmk = n - k;

    double botright = nmk;

    while (nmk != 1) {

        botright *= (nmk - 1);
        nmk--;
    }

    double ans = top / (kfact * botright);

    int inted = (int)(ans * 10);

    int dec = inted % 10;

    if (dec >= 5) {
        ans = (int)ans + 1;
    }

    ans = (int)ans;

    return ans;

}


",
clob269,1697502540,7,"

int Choose(int n, int k) {
    int en = n;
    int kay = k;

    double top = n;

    while (n != 1) {

        top *= (n - 1);
        n--;
    }

    n = en;

    double kfact = k;

    while (k != 1) {

        kfact *= (k - 1);
        k--;
    }

    k = kay;

    int nmk = n - k;

    double botright = nmk;

    while (nmk != 1) {

        botright *= (nmk - 1);
        nmk--;
    }

    double ans = top / (kfact * botright);

    int inted = (int)(ans * 10);

    int dec = inted % 10;

    if (dec >= 5) {
        ans = (int)ans + 1;
    }

    ans = (int)ans;

    return ans;

}


",1
cmac377,1698114387,1,"int Choose(int n, int m){
    int a, b, c;
    
    if (m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else if (m > 0 && n > 0 && n > m){
        a = Choose(n - 1, m);
        b = Choose(n - 1, m - 1);
        c = a + b;
        return c;
    }
}",
cmac377,1698114434,2,"int Choose(int n, int m){
    int a, b, c;
    
    if (m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else if (m > 0 && n > 0 && n > m){
        a = Choose(n - 1, m);
        b = Choose(n - 1, m - 1);
        c = a + b;
        return c;
    }
    return;
}",
cmac377,1698114443,3,"int Choose(int n, int m){
    int a, b, c;
    
    if (m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else if (m > 0 && n > 0 && n > m){
        a = Choose(n - 1, m);
        b = Choose(n - 1, m - 1);
        c = a + b;
        return c;
    }
    return 0;
}",
cmac377,1698114447,4,"int Choose(int n, int m){
    int a, b, c;
    
    if (m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else if (m > 0 && n > 0 && n > m){
        a = Choose(n - 1, m);
        b = Choose(n - 1, m - 1);
        c = a + b;
        return c;
    }
    return 0;
}",1
cmad989,1697528003,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n){
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
cmad989,1697528006,2,"int Choose(int n, int m) 
{
    if (m == 0 || m == n){
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
cmas527,1698053777,1,"#include <stdio.h>

int Choose (int n, int m)
{
if (m==0||(n==m))
{return 1;}
else 
{return Choose(n - 1, m - 1) + Choose(n - 1, m);}
}",
cmas527,1698053783,2,"#include <stdio.h>

int Choose (int n, int m)
{
if (m==0||(n==m))
{return 1;}
else 
{return Choose(n - 1, m - 1) + Choose(n - 1, m);}
}",1
cmcm317,1697864155,1,"#include <stdio.h>

int Choose(int n, int m)
{


    if (m == 0) {
        return 1;
    }
    else if (n == m) {
        return 1;
    }
    else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }

}",
cmcm317,1697864157,2,"#include <stdio.h>

int Choose(int n, int m)
{


    if (m == 0) {
        return 1;
    }
    else if (n == m) {
        return 1;
    }
    else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }

}",1
cmia215,1697587167,1,"#include <stdio.h>

int Factorial(int n)
{
	if (n == 0) {
		return 1;
	}
	else {
		return n * Factorial(n - 1);
	}
}

int Choose(int n, int k)
{
	return (Factorial(n) / (Factorial(k) * Factorial(n - k)));
}
",
cmia215,1697587170,2,"#include <stdio.h>

int Factorial(int n)
{
	if (n == 0) {
		return 1;
	}
	else {
		return n * Factorial(n - 1);
	}
}

int Choose(int n, int k)
{
	return (Factorial(n) / (Factorial(k) * Factorial(n - k)));
}
",0
cmia215,1697593818,3,"#include <stdio.h>

long double Factorial(int n)
{
	if (n == 0) {
		return 1;
	}
	else {
		return n * Factorial(n - 1);
	}
}

int Choose(int n, int k)
{
	return (Factorial(n) / (Factorial(k) * Factorial(n - k)));
}
",
cmia215,1697593833,4,"#include <stdio.h>

long double Factorial(int n)
{
	if (n == 0) {
		return 1;
	}
	else {
		return n * Factorial(n - 1);
	}
}

int Choose(int n, int k)
{
	return (Factorial(n) / (Factorial(k) * Factorial(n - k)));
}
",0
cmia215,1697609414,5,"#include <stdio.h>

int Choose(int n, int k)
{
	
	if (n == k)
	{
		return 1;
	}
	else if (k == 0) {
	
		return 1;
	}
	else {
		 return Choose(n - 1, k - 1) + Choose(n - 1, k);
	}
}",
cmia215,1697853001,6,"#include <stdio.h>

int Choose(int n, int k)
{
	
	if (n == k)
	{
		return 1;
	}
	else if (k == 0) {
	
		return 1;
	}
	else {
		 return Choose(n - 1, k - 1) + Choose(n - 1, k);
	}
}",1
cmot464,1697494289,1,"int Choose(int n, int m){ // n is pool m is picking hand
    if((m == 0) || (m == n)){
        return 1;
    }
    else{
        return (Choose(n-1, m) + Choose(n-1,m-1));
    }
}",
cmot464,1697494292,2,"int Choose(int n, int m){ // n is pool m is picking hand
    if((m == 0) || (m == n)){
        return 1;
    }
    else{
        return (Choose(n-1, m) + Choose(n-1,m-1));
    }
}",1
cnai408,1698034608,1,"int Choose (int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    else if (m > 0 && n > m) {
        int choice = (Choose(n - 1, m)) + (Choose(n - 1, m - 1));
        return choice;
    }
    
    else {
        return 0;
    }
}",
cnai408,1698034610,2,"int Choose (int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    else if (m > 0 && n > m) {
        int choice = (Choose(n - 1, m)) + (Choose(n - 1, m - 1));
        return choice;
    }
    
    else {
        return 0;
    }
}",1
cnie825,1698138129,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
cnie825,1698138140,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
coli772,1697512993,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n-1, m) + Choose(n-1, m-1);
}",
coli772,1697512996,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n-1, m) + Choose(n-1, m-1);
}",1
couy656,1697600440,1,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
couy656,1697600443,2,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",1
csan114,1697437617,1,"int Choose(int n, int m)
{
	if (m == n || m == 0) {
		return 1;
	}

	int a = n;
	int b = n - m;
	int d = m; 

	for (int i = 1; i < a; i++) {
		n = n * i; 
	}

	for (int i = 1; (i < (a-m)); i++) {
		b = b * i;
	}

	for (int i = 1; i < d; i++) {
		m = m * i;
	}


	return n/(m*b); 
}",
csan114,1697437619,2,"int Choose(int n, int m)
{
	if (m == n || m == 0) {
		return 1;
	}

	int a = n;
	int b = n - m;
	int d = m; 

	for (int i = 1; i < a; i++) {
		n = n * i; 
	}

	for (int i = 1; (i < (a-m)); i++) {
		b = b * i;
	}

	for (int i = 1; i < d; i++) {
		m = m * i;
	}


	return n/(m*b); 
}",0
csan114,1697438641,3,"int Choose(int n, int m)
{
	if (m == n || m == 0) {
		return 1;
	}

	int a = 1;
	if (m < n) {
		m = n - m;
	}

	for (int i = 0; i < m; i++) {
		a *= (n - i);
		a /= (i + 1);
	}

	return a;
}",
csan114,1697438643,4,"int Choose(int n, int m)
{
	if (m == n || m == 0) {
		return 1;
	}

	int a = 1;
	if (m < n) {
		m = n - m;
	}

	for (int i = 0; i < m; i++) {
		a *= (n - i);
		a /= (i + 1);
	}

	return a;
}",0
csan114,1697438681,5,"int Choose(int n, int m)
{
	if (m == n || m == 0) {
		return 1;
	}

	int a = 1;
	if (m > n-m) {
		m = n - m;
	}

	for (int i = 0; i < m; i++) {
		a *= (n - i);
		a /= (i + 1);
	}

	return a;
}",
csan114,1697438683,6,"int Choose(int n, int m)
{
	if (m == n || m == 0) {
		return 1;
	}

	int a = 1;
	if (m > n-m) {
		m = n - m;
	}

	for (int i = 0; i < m; i++) {
		a *= (n - i);
		a /= (i + 1);
	}

	return a;
}",1
cset571,1697506924,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else {
		int x;
		x = Choose(n - 1, m) + Choose(n - 1, m - 1);

		return x;
	}
}
",
cset571,1697506926,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else {
		int x;
		x = Choose(n - 1, m) + Choose(n - 1, m - 1);

		return x;
	}
}
",1
csin574,1697664717,1,"int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	} else if (m == n) {
		return 1;
	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
csin574,1697664720,2,"int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	} else if (m == n) {
		return 1;
	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
cste189,1697493650,1,"int Choose(int n, int m)
{
	if (n == m) {
		return 1;
	}
	else if (m == 0) {
		return 1;
	}
	else {
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",
cste189,1697493652,2,"int Choose(int n, int m)
{
	if (n == m) {
		return 1;
	}
	else if (m == 0) {
		return 1;
	}
	else {
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",1
ctub889,1698030974,1,"#include <stdio.h>

// Recursive function to calculate n choose m
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;  // Base case: n choose 0 or n choose n is 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);  // Recursive call using the formula for n choose m
    }
}",
ctub889,1698030978,2,"#include <stdio.h>

// Recursive function to calculate n choose m
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;  // Base case: n choose 0 or n choose n is 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);  // Recursive call using the formula for n choose m
    }
}",1
cugn667,1697547409,1,"int Choose(int n, int m) {
    
    if (m < 0 || m > n) {
        
        return 0;
        
    }
    
    if (m == 0 || m == n) {
        
        return 1;
        
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
        
    }
}",1
cwei506,1697859153,1,"int Choose(int n, int m) {
	if (n == m) {
		return 1;
	}
	else if (m == 0){
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
cwei506,1697859156,2,"int Choose(int n, int m) {
	if (n == m) {
		return 1;
	}
	else if (m == 0){
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
cwu200,1698035637,1,"#include <stdio.h>

int Choose(int n, int m) {
  if (m == 0 || m == n) {
    return 1;
  } else if (m > n) {
    return 0;
  } else {
    int result = Choose(n - 1, m) + Choose(n - 1, m - 1);
    return result;
  }
}",
cwu200,1698035639,2,"#include <stdio.h>

int Choose(int n, int m) {
  if (m == 0 || m == n) {
    return 1;
  } else if (m > n) {
    return 0;
  } else {
    int result = Choose(n - 1, m) + Choose(n - 1, m - 1);
    return result;
  }
}",1
cyan312,1697708206,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
cyan312,1697708208,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
cyiu210,1697881475,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    
    if ((m == 0) || (m == n)) {
        return 1;
            
    } else  {
        
    return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
    
}",
cyiu210,1697881478,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    
    if ((m == 0) || (m == n)) {
        return 1;
            
    } else  {
        
    return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
    
}",1
dbar153,1697441500,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) {
	if (m < 1) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (m >= n) {
		return 0;
	}
	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
dcha468,1698101745,1,"int Choose(int n, int m) {
 
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
dcha468,1698101747,2,"int Choose(int n, int m) {
 
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
dche306,1698054369,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}",
dche306,1698054410,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}",1
deri361,1697498242,1,"#include <stdio.h>
int Choose(int n, int m)
{
	if (m == n) {
		return 1;
	}
	else if (m == 0) {
		return 1;
	}
	else if ((m > 0) && (n > m)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",
deri361,1697498244,2,"#include <stdio.h>
int Choose(int n, int m)
{
	if (m == n) {
		return 1;
	}
	else if (m == 0) {
		return 1;
	}
	else if ((m > 0) && (n > m)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",1
dfor626,1697424561,1,"int Choose(int n, int m)
{
    int picks, new_n, new_m;
    if (m == 0 || n <= m) {
        picks =  1;
    }
    else {
        new_n = n - 1;
        new_m = m - 1;
        picks = Choose(new_n, m) + Choose(new_n, new_m);
    }
    return picks;
}",
dfor626,1697424563,2,"int Choose(int n, int m)
{
    int picks, new_n, new_m;
    if (m == 0 || n <= m) {
        picks =  1;
    }
    else {
        new_n = n - 1;
        new_m = m - 1;
        picks = Choose(new_n, m) + Choose(new_n, new_m);
    }
    return picks;
}",1
dgal735,1697506793,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  // The Number of ways selcting 0 things out of n things is 1//
        //Also the number of ways selecting n things out of n things is also 1//
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
dgal735,1697507258,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  // The Number of ways selcting 0 things out of n things is 1//
        //Also the number of ways selecting n things out of n things is also 1//
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
dha524,1697424407,1,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
dha524,1697424409,2,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
dhah941,1697860382,1,"int Choose(int n, int m)
{
	if (0 < m && m < n)
	{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",
dhah941,1697860431,2,"int ChooseHelper(int n, int m)
{
	if (0 <= m && m < n)
	{
		return (Choose((n - 1), m) + Choose((n - 1), (m - 1)));
	}
}",
dhah941,1697860452,3,"int ChooseHelper(int n, int m)
{
	if (0 <= m && m < n)
	{
		return (Choose((n - 1), m) + Choose((n - 1), (m - 1)));
	}
	return 0;
}",
dhah941,1697860459,4,"int ChooseHelper(int n, int m)
{
	if (0 <= m && m < n)
	{
		return (Choose((n - 1), m) + Choose((n - 1), (m - 1)));
	}
	else
	    return 0;
}",
dhah941,1697860473,5,"int Choose(int n, int m)
{
	if (0 < m && m < n)
	{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",
dhah941,1697860619,6,"int Choose(int n, int m)
{
	if (0 < m && m < n)
	{
		int temp = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return temp;
	}
}",
dhar714,1697419391,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    else if (n == m) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
dhen760,1697455419,1,"int Choose(int n, int m)
{
    int z = n;
    for (int i=0; i<m-1;i++) {
        n = (n*(z-1));
        z--;
    }
    
    int y = m;
    int b = m;
    for (int i=0; i<y-1;i++) {
        m = (m*(b-1));
        b--;
    }
    
    printf(""%d %d\n"", n, m);
    return n/m;
}",
dhen760,1697455445,2,"int Choose(int n, int m)
{
    int z = n;
    for (int i=0; i<m-1;i++) {
        n = (n*(z-1));
        z--;
    }
    
    int y = m;
    int b = m;
    for (int i=0; i<y-1;i++) {
        m = (m*(b-1));
        b--;
    }

    return n/m;
}",
dhen760,1697455450,3,"int Choose(int n, int m)
{
    int z = n;
    for (int i=0; i<m-1;i++) {
        n = (n*(z-1));
        z--;
    }
    
    int y = m;
    int b = m;
    for (int i=0; i<y-1;i++) {
        m = (m*(b-1));
        b--;
    }

    return n/m;
}",0
dhen760,1697456787,4,"int Choose(int n, int m) 
{
    if ((m == 0) || (m == n)) {
        return 1;
    } else if (m > n) {
        return 0;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}
",
dhen760,1697456789,5,"int Choose(int n, int m) 
{
    if ((m == 0) || (m == n)) {
        return 1;
    } else if (m > n) {
        return 0;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}
",1
dhul688,1697501050,1,"int Choose(int n, int m)
{
    int i, j;
    if (m >=n || m == 0){
        return 1;
    } else{
        i = Choose(n - 1, m);
        j = Choose(n - 1, m - 1);
        return i + j;
    }
    
}",
dhul688,1697501053,2,"int Choose(int n, int m)
{
    int i, j;
    if (m >=n || m == 0){
        return 1;
    } else{
        i = Choose(n - 1, m);
        j = Choose(n - 1, m - 1);
        return i + j;
    }
    
}",1
dkha055,1697427491,1,"int Choose(int n, int m) {

   if (m == 0) {
    return 1;
   } else if (m == n) {
    return 1;
   } else {
    return (Choose(n-1,m) + Choose(n-1,m-1));
   }

}",
dkha055,1697427492,2,"int Choose(int n, int m) {

   if (m == 0) {
    return 1;
   } else if (m == n) {
    return 1;
   } else {
    return (Choose(n-1,m) + Choose(n-1,m-1));
   }

}",1
dkim848,1697865419,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
dkim848,1697865422,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
dkur670,1698115587,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
dkur670,1698115772,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
dli630,1698104594,1,"int Choose (int n, int m) {

    int Combinations;

    if (m == 0 || m == n) {
        return 1;

    } else if (0 < m && m < n) {
        Combinations = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return Combinations;
    }
}",
dli630,1698104844,2,"int Choose (int n, int m) {

    int Combinations;

    if (m == 0 || m == n) {
        return 1;

    } else if (0 < m < n) {
        Combinations = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return Combinations;
    }
}",
dli630,1698105073,3,"int Choose (int n, int m) {

    int Combinations;

    if (m == 0 || m == n) {
        return 1;

    } else if (0 < m && m < n) {
        Combinations = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return Combinations;
    }
}",
dli630,1698105588,4,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;

    } else if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);

    }
}",
dli630,1698105690,5,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;

    } else if (0 <= m && m <= n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);

    }
}
",
dli630,1698105816,6,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    } else if (0 <= m && m <= n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
dli630,1698105824,7,"int Choose (int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (0 <= m && m <= n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
dli630,1698106071,8,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;    
    } else (0 <= m && m <= n); {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
dli630,1698106086,9,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;    
    } else (0 < m && m < n); {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
dli630,1698106122,10,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;    
    } else if (0 <= m && m <= n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
dli630,1698106221,11,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;    
    } else if ((0 < m && m < n) || m > n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
dli630,1698106232,12,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;    
    } else if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
dli630,1698106318,13,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;    
    } else if ((0 < m && m < n) || m > n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else {
        return 0;
    }

}",
dli630,1698106336,14,"int Choose (int n, int m) {

    if (m == 0 || m == n) {
        return 1;    
    } else if ((0 < m && m < n) || m > n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else {
        return 0;
    }

}",1
dlob194,1697680137,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
dlob194,1697680143,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
dma765,1697981364,1,"int Choose(int n, int m) {
    // Base case: n choose 0 or n choose n is always 1.
    if (m == 0 || m == n) {
        return 1;
    } else {
        // Recursive case: Calculate using the formula.
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
dma765,1697981365,2,"int Choose(int n, int m) {
    // Base case: n choose 0 or n choose n is always 1.
    if (m == 0 || m == n) {
        return 1;
    } else {
        // Recursive case: Calculate using the formula.
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
dmar494,1697710420,1,"int Choose(int num, int choice) {
    int amount = 0;
    for (int i = (num + 1 - choice); i > 0; i--) {
        amount += i;
    }
    return amount;
}",
dmar494,1697710423,2,"int Choose(int num, int choice) {
    int amount = 0;
    for (int i = (num + 1 - choice); i > 0; i--) {
        amount += i;
    }
    return amount;
}",0
dmar494,1697711390,3,"int Choose(int num, int choose) {
    if (choose < num && choose > 0) {
        int amount = 1;
        for (int i = 1; i <= choose; ++i) {
            amount *= (num - i + 1);
            amount /= i;
        }
        return amount;
    } else {
        return 1;
    }
}",
dmar494,1697711393,4,"int Choose(int num, int choose) {
    if (choose < num && choose > 0) {
        int amount = 1;
        for (int i = 1; i <= choose; ++i) {
            amount *= (num - i + 1);
            amount /= i;
        }
        return amount;
    } else {
        return 1;
    }
}",1
dmcn107,1698144233,1,"void Choose(int m, int n){
    int k = m;
    int s = 0;
    for(int i = 0; i < m; i++){
        m = m * (m - i);
    }
    for(int j = 0; j < n; j++){
        n = n * (n - j);
    }
    s = m/((n*k)-n);
    return s;
}",
dmcn107,1698144278,2,"int Choose(int m, int n){
    int k = m;
    int s = 0;
    for(int i = 0; i < m; i++){
        m = m * (m - i);
    }
    for(int j = 0; j < n; j++){
        n = n * (n - j);
    }
    s = m/((n*k)-n);
    return int s;
}",
dmcn107,1698144289,3,"int Choose(int m, int n){
    int k = m;
    int s = 0;
    for(int i = 0; i < m; i++){
        m = m * (m - i);
    }
    for(int j = 0; j < n; j++){
        n = n * (n - j);
    }
    s = m/((n*k)-n);
    return s;
}",
dmcn107,1698144482,4,"int Choose(int n, int r){
    int k = n;
    int s = 0;
    int p = n - r;
    for(int i = 0; i < n; i++){
        n = n * (p - i);
    }
    for(int j = 0; j < p; j++){
        p = p * (p - j);
    }
    s = n/p;
    return s;
}",
dmcn107,1698144540,5,"int Choose(int n, int r){
    int s = 0;
    int p = n - r;
    for(int i = 0; i < n; i++){
        n = n * (p - i);
    }
    for(int j = 0; j < p; j++){
        p = p * (p - j);
    }
    s = n/p;
    return s;
}",
dmcn107,1698144664,6,"int Choose(int n, int r){
    int s = 0;
    int p = n - r;
    for(int i = 0; i < n; i++){
        n = n * (p - i);
    }
    for(int j = 0; j < p; j++){
        p = p * (p - j);
    }
    for(int z = 0; z < r; z++){
        r = r * (r - z)
    }
    s = n/(p*r);
    return s;
}",
dmcn107,1698144679,7,"int Choose(int n, int r){
    int s = 0;
    int p = n - r;
    for(int i = 0; i < n; i++){
        n = n * (p - i);
    }
    for(int j = 0; j < p; j++){
        p = p * (p - j);
    }
    for(int z = 0; z < r; z++){
        r = r * (r - z);
    }
    s = n/(p*r);
    return s;
}",
dmcn107,1698144762,8,"int Choose(int n, int r){
    int s = 1;
    int p = n - r;
    
    for(int i = 1; i <= n; i++){
        s *= i;
    }

    for(int i = 1; i <= p; i++){
        p *= i;
    }

    for(int i = 1; i <= r; i++){
        r *= i;
    }

    s = s / (p * r);
    
    return s;
}",
dmcn107,1698144875,9,"int Choose(int n, int r){
    int s = 0;
    int p = n - r;
    for(int i = 0; i < n; i++){
        n = n * (p - i);
    
    for(int j = 0; j < p; j++){
        p = p * (p - j);
    
    for(int z = 0; z < r; z++){
        r = r * (r - z);
    }
    }
    }
    s = n/(p*r);
    return s;
}",
dmcn107,1698144935,10,"int Choose(float n, float r){
    float s = 0;
    float p = n - r;
    for(int i = 0; i < n; i++){
        n = n * (p - i);
    
    for(float j = 0; j < p; j++){
        p = p * (p - j);
    
    for(float z = 0; z < r; z++){
        r = r * (r - z);
    }
    }
    }
    s = n/(p*r);
    return s;
}",
dmcn107,1698145004,11,"int Choose(int n, int r){
    int s = 0;  // Change the initial value of s to 1
    int p = n - r;

    for(int i = 0; i < n; i++){
        n = n * (p - i);
    }
    for(int j = 0; j < p; j++){
        p = p * (p - j);
    }
    for(int z = 0; z < r; z++){
        r = r * (r - z);
    }

    s = n/(p*r);

    return s;
}",
dmcn107,1698145044,12,"int factorial(int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

int Choose(int n, int r) {
    if (r == 0 || r == n) {
        return 1;
    } else {
        return factorial(n) / (factorial(r) * factorial(n - r));
    }
}",
dmcn107,1698145139,13,"int factorial(int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

int Choose(int n, int r) {
    if (r == 0 || r == n) {
        return 1;
    } else {
        return factorial(n) / (factorial(r) * factorial(n - r));
    }
}",0
dmun793,1697834810,1,"int Choose(int n, int m)
{
	int amount = n;
	if (m > 0)
		amount += Choose(n - 1, m - 1);
	return amount;
}",
dmun793,1697834811,2,"int Choose(int n, int m)
{
	int amount = n;
	if (m > 0)
		amount += Choose(n - 1, m - 1);
	return amount;
}",0
dmun793,1697835469,3,"int Choose(int n, int m)
{
	if (m == 0)
		return 1;
	else if (m == n)
		return 1;

	int amount = 0;

	amount += Choose(n - 1, m);
	amount += Choose(n - 1, m - 1);

	return amount;
}",
dmun793,1697835470,4,"int Choose(int n, int m)
{
	if (m == 0)
		return 1;
	else if (m == n)
		return 1;

	int amount = 0;

	amount += Choose(n - 1, m);
	amount += Choose(n - 1, m - 1);

	return amount;
}",1
dosb979,1698018831,1,"int Choose(int n, int m)
 {
     if ((m == 0) || (m/n == 1)) {
        return 1;
     } else { 
        int r;
        r = Choose(n-1, m) + Choose(n-1, m-1);
        return r;
 }
 }",
dosb979,1698018833,2,"int Choose(int n, int m)
 {
     if ((m == 0) || (m/n == 1)) {
        return 1;
     } else { 
        int r;
        r = Choose(n-1, m) + Choose(n-1, m-1);
        return r;
 }
 }",1
dpar783,1697765705,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
dpar783,1697765707,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
dpat391,1697779400,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
dpat391,1697779410,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
dpat674,1698030742,1,"int useThisFormula(int integer){
int result=1;
int i=1;
while(i<=integer){
result=result*i;
i=i+1;
}
return result;
}


int Choose(int n, int m){
if (m==n){
return 1;
}else if(m==0){
return 1;
} else
return useThisFormula(n)/(useThisFormula(m)*useThisFormula(n-m));
}",
dpet289,1697668671,1,"int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	else if (m == n)
	{
		return 1;
	}
	else
	{
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
dpet289,1697668677,2,"int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	else if (m == n)
	{
		return 1;
	}
	else
	{
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
dric234,1697585755,1,"int Choose(int n, int m) {
    if (m == 0 || m==n){
        return 1;
    }  if (m > n) {
        return 0;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
 
    }
}",
dric234,1697585765,2,"int Choose(int n, int m) {
    if (m == 0 || m==n){
        return 1;
    }  if (m > n) {
        return 0;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
 
    }
}",1
drob588,1698085056,1,"int Choose(int n, int k) {
	if (n == k) {
		return 1;
	}
	else if (k == 0) {
		return 1;
	}
	else {
		return (Choose(n - 1, k) + Choose(n - 1, k - 1));
	}

}",
drob588,1698085058,2,"int Choose(int n, int k) {
	if (n == k) {
		return 1;
	}
	else if (k == 0) {
		return 1;
	}
	else {
		return (Choose(n - 1, k) + Choose(n - 1, k - 1));
	}

}",1
droj056,1698111180,1,"int Choose(int n, int m) {
   
    if (m == 0 || m == n) {
        return 1;

    if (m == 1) {
        return n;  
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
droj056,1698111305,2,"void Choose(int n, int m) {
   
    if (m == 0 || m == n) {
        return 1;

    if (m == 1) {
        return n;  
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
droj056,1698111318,3,"int Choose(int n, int m) {
   
    if (m == 0 || m == n) {
        return 1;

    if (m == 1) {
        return n;  
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
droj056,1698111434,4,"int Choose(int n, int m) {
   
    if (m == 0 || m == n) {
        return 1;

    if (m == 1) {
        return n;  
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
int main() {
    
    printf(""%d\n"", Choose(6, 2));  

 
    return 0;
}",
droj056,1698111461,5,"int Choose(int n, int m) {

    if (m == 1) {
        return n;  
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
droj056,1698111633,6,"int Choose(int n, int m) 
{
    if (m == 0 || n == m) {
        return 1;  
    }
    if (m == 1) {
        return n;  
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
droj056,1698111638,7,"int Choose(int n, int m) 
{
    if (m == 0 || n == m) {
        return 1;  
    }
    if (m == 1) {
        return n;  
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
dryu303,1698051789,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
dryu303,1698051791,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
dsan845,1698116812,1,"#include <stdio.h>

int Choose(int n, int m)
{

    if(m==0 || m==n){
        return 1; 
        
        
    }
    
     return Choose(n-1, m-1) + Choose(n-1, m);
    
    }
    ",
dsan845,1698116814,2,"#include <stdio.h>

int Choose(int n, int m)
{

    if(m==0 || m==n){
        return 1; 
        
        
    }
    
     return Choose(n-1, m-1) + Choose(n-1, m);
    
    }
    ",1
dsaw164,1697438844,1,"int Choose(int n, int m){
    if(m == n || m == 0){
        return 1;
    }
    else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
dsaw164,1697438846,2,"int Choose(int n, int m){
    if(m == n || m == 0){
        return 1;
    }
    else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
dsin316,1698049356,1,"void PrintReverse(int x){

    int y = x % 10;

    if(x > 10){
        printf(""%d"", y);
        PrintReverse(x / 10);
        
    } 
    else{
        printf(""%d"", y);
    }
}",
dsin316,1698049720,2,"int Choose(int n, int m){
    if(m == 0){
        return 1;
    }
    else if (n == m){
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n-1, m);
}",
dsin316,1698049723,3,"int Choose(int n, int m){
    if(m == 0){
        return 1;
    }
    else if (n == m){
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n-1, m);
}",1
dstr542,1698144848,1,"int Choose(int n, int m)
{
	
	int result = 0;
	if (m == 0)
	{
		result += 1;
	}
	else if (m == n)
	{
		 result += 1;
	}
	else
	{
		
		result += Choose(n - 1, m) + Choose(n - 1, m - 1);;

	}
	return result;
}",
dstr542,1698144849,2,"int Choose(int n, int m)
{
	
	int result = 0;
	if (m == 0)
	{
		result += 1;
	}
	else if (m == n)
	{
		 result += 1;
	}
	else
	{
		
		result += Choose(n - 1, m) + Choose(n - 1, m - 1);;

	}
	return result;
}",1
dsut709,1697858647,1,"int Choose(int n, int m) {
	int combos;
	combos = (n+1) * m + 1;
	return combos;
}",
dsut709,1697858651,2,"int Choose(int n, int m) {
	int combos;
	combos = (n+1) * m + 1;
	return combos;
}",0
dsut709,1697860220,3,"int Choose(int n, int m) {
	//base cases
	if (m == n ) {
		return 1;
	}
	else if(m == 0){
		return 1;
	}
	//recursive case
	else {
		int value;
		value = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return value;
	}
}",
dsut709,1697860223,4,"int Choose(int n, int m) {
	//base cases
	if (m == n ) {
		return 1;
	}
	else if(m == 0){
		return 1;
	}
	//recursive case
	else {
		int value;
		value = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return value;
	}
}",1
dtem664,1698102512,1,"int Choose(int n, int m) {
	if (m == 0 || m == n) {
		return 1;
	}

	int result = 1;	
	for (int i = 0; i < m; i++) {
		result *= (n - i);
		result /= (i + 1);
	}
	return result;
}",
dtem664,1698102515,2,"int Choose(int n, int m) {
	if (m == 0 || m == n) {
		return 1;
	}

	int result = 1;	
	for (int i = 0; i < m; i++) {
		result *= (n - i);
		result /= (i + 1);
	}
	return result;
}",1
dten781,1698050601,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
dten781,1698050605,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
dtie151,1697434608,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
dtie151,1697434610,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
dver839,1697964671,1,"int Choose(int n, int m) {
    // Base case
    if (m == 0 || m == n) {
        return 1;
    }
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
dver839,1697964708,2,"int Choose(int n, int m) {
    // Base case
    if (m == 0 || m == n) {
        return 1;
    }
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
dvu878,1698018528,1,"int Choose(int n, int m) {
	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
dvu878,1698018531,2,"int Choose(int n, int m) {
	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
dwu617,1697772998,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
dwu617,1697773003,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
dyu343,1697522816,1,"int Choose(int n, int m)
{
	int case1 = (n != 0 && m == 0);
	int case2 = (n == m);
	if (case1 || case2)
	{
		return 1;
	}
		
	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
dzha497,1698111339,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
dzha497,1698111340,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
ealg928,1698052980,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0)
    {
        return 1;
    }
    
    if (m == n)
    {
        return 1;
    }
    
    if (n == 0)
    {
        return 0;
    }
    
    return Choose(n - 1, m) + (n - 1, m - 1);
}",
ealg928,1698053028,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0)
    {
        return 1;
    }
    
    if (m == n)
    {
        return 1;
    }
    
    if (n == 0)
    {
        return 0;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
ealg928,1698053029,3,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0)
    {
        return 1;
    }
    
    if (m == n)
    {
        return 1;
    }
    
    if (n == 0)
    {
        return 0;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
eara128,1697701462,1,"int Choose(int num, int m){
    if(m == 0){
        return 1;
    } else if (num == m){
        return 1;
    } else {
        return (Choose(num -1, m) + Choose(num -1, m -1));
    }
    return 0;
}",
eara128,1697701466,2,"int Choose(int num, int m){
    if(m == 0){
        return 1;
    } else if (num == m){
        return 1;
    } else {
        return (Choose(num -1, m) + Choose(num -1, m -1));
    }
    return 0;
}",1
earn712,1697868482,1,"int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1;
    }
    else if (m > n > 0) {
        return 1;
    }
    else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
earn712,1697868496,2,"int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1;
    }
    else if (m > n) {
        return 1;
    }
    else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
earn712,1697868509,3,"int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1;
    }
    else if (n < m) {
        return 1;
    }
    else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
earn712,1697868524,4,"int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1;
    }
    else if (n < m) {
        return 1;
    }
    else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",1
ebar824,1697519335,1,"int Choose(int n,int m){
    
    if (m==0 || m==n){
        return 1;
    }
    else{
        return Choose(n-1,m)+Choose(n-1,m-1);
    }

    
}",
ebar824,1697519338,2,"int Choose(int n,int m){
    
    if (m==0 || m==n){
        return 1;
    }
    else{
        return Choose(n-1,m)+Choose(n-1,m-1);
    }

    
}",1
echa931,1698029568,1,"int Choose(int n,int m){
    if (m==0||m==n){
        return 1;
    } else {
        return Choose(n-1,m)+Choose(n-1,m-1);
    }
}",
echa931,1698029570,2,"int Choose(int n,int m){
    if (m==0||m==n){
        return 1;
    } else {
        return Choose(n-1,m)+Choose(n-1,m-1);
    }
}",1
eche101,1697891848,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
eche101,1697892306,2,"int Choose(int n, int m) {
    if (m == n) {
        return 1;
    }
    if (m == 0) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
eche101,1697892308,3,"int Choose(int n, int m) {
    if (m == n) {
        return 1;
    }
    if (m == 0) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
eejl688,1698121550,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
eejl688,1698121551,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
eejl932,1698120626,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    if (m == 1 || m == n - 1) {
        return n;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
eejl932,1698120627,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    if (m == 1 || m == n - 1) {
        return n;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
efra318,1697873426,1,"int Choose(int n, int m) {

	int choice = 0;

	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else {

		choice = Choose((n - 1), m) + Choose((n - 1), (m - 1));

		return choice;

	}

}",
efra318,1697873430,2,"int Choose(int n, int m) {

	int choice = 0;

	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else {

		choice = Choose((n - 1), m) + Choose((n - 1), (m - 1));

		return choice;

	}

}",1
egem265,1698051307,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
egem265,1698051310,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
egho902,1697448138,1,"#include <stdio.h>

int Choose(int n, int m)
int Value;
{
    if (m == n || m == 0)
    {
        return 1;
    }
    else
    {
       Value = Choose(n - 1, m + 1) + Choose(n - 1, m);
       
       return Value;
    }
}",
egho902,1697448213,2,"#include <stdio.h>

int Choose(int n, int m)

{
    int Value;
    
    if (m == n || m == 0)
    {
        return 1;
    }
    else
    {
       Value = Choose(n - 1, m + 1) + Choose(n - 1, m);
       
       return Value;
    }
}",
egho902,1697448266,3,"#include <stdio.h>

int Choose(int n, int m)

{
    int Value;
    
    if (m == n || m == 0)
    {
        return 1;
    }
    else
    {
       Value = Choose(n - 1, m - 1) + Choose(n - 1, m);
       
       return Value;
    }
}",
egho902,1697448282,4,"#include <stdio.h>

int Choose(int n, int m)

{
    int Value;
    
    if (m == n || m == 0)
    {
        return 1;
    }
    else
    {
       Value = Choose(n - 1, m - 1) + Choose(n - 1, m);
       
       return Value;
    }
}",1
ehua682,1698032466,1,"#include <stdio.h>


int Choose(int n, int m) {
    if (m == 0) {
        return 1;
        
    } else if (n == 0) {
        return 0;
        
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
ehua682,1698032469,2,"#include <stdio.h>


int Choose(int n, int m) {
    if (m == 0) {
        return 1;
        
    } else if (n == 0) {
        return 0;
        
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
ejeo051,1697889781,1,"int Choose(int n, int m)
{
    int combos;
    
    if (m == 0) {
        return 1;
        
    } else if (m == n) {
        return 1;
        
    } else if (m > 0 && n > m) {
        combos = (Choose(n - 1, m) + Choose(n - 1, m - 1)); 
        return combos;
    }

}",
ejeo051,1697889782,2,"int Choose(int n, int m)
{
    int combos;
    
    if (m == 0) {
        return 1;
        
    } else if (m == n) {
        return 1;
        
    } else if (m > 0 && n > m) {
        combos = (Choose(n - 1, m) + Choose(n - 1, m - 1)); 
        return combos;
    }

}",0
ejeo051,1697889786,3,"int Choose(int n, int m)
{
    int combos;
    
    if (m == 0) {
        return 1;
        
    } else if (m == n) {
        return 1;
        
    } else if (m > 0 && n > m) {
        combos = (Choose(n - 1, m) + Choose(n - 1, m - 1)); 
        return combos;
    }

}",
ejeo051,1697889819,4,"int Choose(int n, int m)
{
    int combos;
    
    if (m == 0) {
        return 1;
        
    } else if (m == n) {
        return 1;
        
    } else if (m > 0 && n > m) {
        combos = (Choose(n - 1, m) + Choose(n - 1, m - 1)); 
        return combos;
    }
    
    return 0;

}",
ejeo051,1697889820,5,"int Choose(int n, int m)
{
    int combos;
    
    if (m == 0) {
        return 1;
        
    } else if (m == n) {
        return 1;
        
    } else if (m > 0 && n > m) {
        combos = (Choose(n - 1, m) + Choose(n - 1, m - 1)); 
        return combos;
    }
    
    return 0;

}",1
ekmu195,1697451362,1,"int Choose(int n, int m) {
    
    int a;
    int b;
    
    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        a = Choose ((n - 1), m);
        b = Choose ((n - 1), (m - 1));
        return a + b;
    }
}",
ekmu195,1697451364,2,"int Choose(int n, int m) {
    
    int a;
    int b;
    
    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        a = Choose ((n - 1), m);
        b = Choose ((n - 1), (m - 1));
        return a + b;
    }
}",1
elau447,1697848027,1,"int Choose(int n, int m) {
	int a;
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		a = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return a;
}
",
elau447,1697848029,2,"int Choose(int n, int m) {
	int a;
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		a = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return a;
}
",1
eles952,1697861338,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
eles952,1697861353,2,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
elia955,1698139236,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
elia955,1698139237,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
else264,1697966002,1,"int Choose(int n, int m){
    if (n==m || m==0){
        return 1;
    }
    else{
        int recursive=Choose((n-1),m) + Choose((n-1),(m-1));
        return recursive;
    }
}",
else264,1697966046,2,"int Choose(int n, int m){
    if (n==m || m==0){
        return 1;
    }
    else{
        int recursive=Choose((n-1),m) + Choose((n-1),(m-1));
        return recursive;
    }
}",1
ely207,1697438325,1,"int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	else if (m == n)
	{
		return 1;
	}
	else
	{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",
ely207,1697438327,2,"int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	else if (m == n)
	{
		return 1;
	}
	else
	{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",1
ema340,1697713547,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
ema340,1697713553,2,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
emah834,1698138927,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else if{ 
        }else {
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
emah834,1698139183,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }else {
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
emah834,1698140971,3,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }else {
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
emah834,1698140973,4,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }else {
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
emah921,1697835568,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
emar189,1698135343,1,"int Choose(int n, int m) {

    if (m<0 || m>n) {
        return 0; }

    else if (m == 0 || m == n) {
        return 1; }

    else if (m > n/2) {
        m=n-m; }

    return Choose(n-1, m-1) + Choose((n-1), m);
}",
emar189,1698135347,2,"int Choose(int n, int m) {

    if (m<0 || m>n) {
        return 0; }

    else if (m == 0 || m == n) {
        return 1; }

    else if (m > n/2) {
        m=n-m; }

    return Choose(n-1, m-1) + Choose((n-1), m);
}",1
eqiu349,1697515517,1,"#include <stdio.h>

int Choose(int n, int m) {
	int result = 0;

	if (m == 0 || n == m) {
		result++;
	}
	else if (m <= 0 || n <= 0) {
		return 0;
	}
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return result;
}",
eqiu349,1697515521,2,"#include <stdio.h>

int Choose(int n, int m) {
	int result = 0;

	if (m == 0 || n == m) {
		result++;
	}
	else if (m <= 0 || n <= 0) {
		return 0;
	}
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return result;
}",1
esia821,1697976449,1,"int Choose(int n, int m)
{
	int result;
	if (m == 0) {
		result = 1;
	}
	else if (m == n) {
		result = 1;
	}
	else if ((m>0) && (m<n)) {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return result;

}",
esia821,1697976451,2,"int Choose(int n, int m)
{
	int result;
	if (m == 0) {
		result = 1;
	}
	else if (m == n) {
		result = 1;
	}
	else if ((m>0) && (m<n)) {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return result;

}",1
eteo952,1697939330,1,"#include <stdio.h>

int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}

int main(void) {
    int n = 6;
    int m = 2;
    printf(""Result = %d"", Choose(n, m));
    return 0;
}
",
eteo952,1697940823,2,"int count = 0;
int no = 0;

int x,y;


void Choose(int n, int m) {
    if (m == 0 || m == n) {
        count++;
        return;
    }

    if (no == 0) {
        x = n;
        y = m;
    }
    no++;

    Choose(n - 1, m - 1);
    Choose(n - 1, m);

    if (n == x && m == y) {
        printf(""Result = %d\n"", count);
    }

}",
eteo952,1697940856,3,"int count = 0;
int no = 0;
int x,y;


void Choose(int n, int m) {
    if (m == 0 || m == n) {
        count++;
        return;
    }

    if (no == 0) {
        x = n;
        y = m;
    }
    no++;

    Choose(n - 1, m - 1);
    Choose(n - 1, m);

    if (n == x && m == y) {
        printf(""Result = %d\n"", count);
    }

}",
eteo952,1697940861,4,"
void Choose(int n, int m) {
    if (m == 0 || m == n) {
        count++;
        return;
    }

    if (no == 0) {
        x = n;
        y = m;
    }
    no++;

    Choose(n - 1, m - 1);
    Choose(n - 1, m);

    if (n == x && m == y) {
        printf(""Result = %d\n"", count);
    }

}",
eteo952,1697940871,5,"int count = 0;
int no = 0;
int x,y;


void Choose(int n, int m) {
    if (m == 0 || m == n) {
        count++;
        return;
    }

    if (no == 0) {
        x = n;
        y = m;
    }
    no++;

    Choose(n - 1, m - 1);
    Choose(n - 1, m);

    if (n == x && m == y) {
        printf(""Result = %d\n"", count);
    }

}",
eteo952,1697940942,6,"int count = 0;
int no = 0;
int x = 0,y = 0;


void Choose(int n, int m) {
    if (m == 0 || m == n) {
        count++;
        return;
    }

    if (no == 0) {
        x = n;
        y = m;
    }
    no++;

    Choose(n - 1, m - 1);
    Choose(n - 1, m);

    if (n == x && m == y) {
        printf(""Result = %d\n"", count);
    }

}",
eteo952,1697945140,7,"


void Choose(int n, int m)

{
    int count = 0;
int no = 0;
int x = 0,y = 0;
    
    if (m == 0 || m == n) {
        count++;
        return;
    }

    if (no == 0) {
        x = n;
        y = m;
    }
    no++;

    Choose(n - 1, m - 1);
    Choose(n - 1, m);

    if (n == x && m == y) {
        printf(""Result = %d\n"", count);
    }

}",
eteo952,1697945156,8,"


void Choose(int n, int m)

{
    int count = 0;
    int no = 0;
    int x = 0,y = 0;
    
    if (m == 0 || m == n) {
        count++;
        return;
    }

    if (no == 0) {
        x = n;
        y = m;
    }
    no++;

    Choose(n - 1, m - 1);
    Choose(n - 1, m);

    if (n == x && m == y) {
        printf(""Result = %d\n"", count);
    }

}",
eteo952,1697945287,9,"int Choose(int n, int m) 
{
    if (m == 0) {
        return 1;
    }
    else if (m == n){
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
eteo952,1697945290,10,"int Choose(int n, int m) 
{
    if (m == 0) {
        return 1;
    }
    else if (m == n){
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
etri556,1698120939,1,"# include <stdio.h>

int Choose(int n, int m){
    // Meant to determine the number of combinations of m things chosen out of n.
    // Which means n is the amount of different values and m is the size of the deck of unique values you want. 
    
    int denominator = Factorial(n);
    int numerator = (Factorial(n - m) * Factorial(m));
    int sum = denominator / numerator;
    return sum;
}

int Factorial(int n){
    // Calculates the factorial of the inputted value.
    int x = 1;
    
    for (int i = 1; i <= n; i++)
        x = x * i;
    return x;
}",
etri556,1698120963,2,"# include <stdio.h>

int Factorial(int n){
    // Calculates the factorial of the inputted value.
    int x = 1;
    
    for (int i = 1; i <= n; i++)
        x = x * i;
    return x;
}

int Choose(int n, int m){
    // Meant to determine the number of combinations of m things chosen out of n.
    // Which means n is the amount of different values and m is the size of the deck of unique values you want. 
    
    int denominator = Factorial(n);
    int numerator = (Factorial(n - m) * Factorial(m));
    int sum = denominator / numerator;
    return sum;
}

",
etri556,1698120966,3,"# include <stdio.h>

int Factorial(int n){
    // Calculates the factorial of the inputted value.
    int x = 1;
    
    for (int i = 1; i <= n; i++)
        x = x * i;
    return x;
}

int Choose(int n, int m){
    // Meant to determine the number of combinations of m things chosen out of n.
    // Which means n is the amount of different values and m is the size of the deck of unique values you want. 
    
    int denominator = Factorial(n);
    int numerator = (Factorial(n - m) * Factorial(m));
    int sum = denominator / numerator;
    return sum;
}

",0
evic904,1698101397,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    // The only way to pick zero things is to pick nothing
    // The only way to pick n things out of n is to print them all
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursive case - shown in the coursebook
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
evic904,1698101403,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    // The only way to pick zero things is to pick nothing
    // The only way to pick n things out of n is to print them all
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursive case - shown in the coursebook
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
ewil853,1697509052,1,"int Choose (int n,int m){
    int chosen;
if ((m==0) || (m==n)){
    return 1;
}

chosen = Choose(n-1,m) +Choose(n-1,m-1);
return chosen;

}",1
exu922,1697966501,1,"int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }

    // Recursive case using the identity: nCm = (n-1)C(m-1) + (n-1)Cm
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
exu922,1697966503,2,"int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }

    // Recursive case using the identity: nCm = (n-1)C(m-1) + (n-1)Cm
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
eyeo346,1697879170,1,"int Choose(int n, int m) 
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        int things = n * m;
        return Choose((n - 1), m) + Choose((n - 1), (m - 1));
    }
}
",
eyeo346,1697879191,2,"int Choose(int n, int m) 
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose((n - 1), m) + Choose((n - 1), (m - 1));
    }
}
",
eyeo346,1697879193,3,"int Choose(int n, int m) 
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose((n - 1), m) + Choose((n - 1), (m - 1));
    }
}
",1
fcoo305,1697781067,1,"int Choose(int m, int n)
{
    if (n == 1) {
        total = m;
    }
    
    int x;
    for (x = n; x <= m - n + 1; x++) {
        Choose(x, n - 1);
    }
    
    
    
    return total;
}",
fcoo305,1697781079,2,"int Choose(int m, int n)
{
    int total;
    if (n == 1) {
        total = m;
    }
    
    int x;
    for (x = n; x <= m - n + 1; x++) {
        Choose(x, n - 1);
    }
    
    
    
    return total;
}",
fcoo305,1697781108,3,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n; x <= m - n + 1; x++) {
            Choose(x, n - 1);
        }
    }
    
    
    
    return total;
}",
fcoo305,1697781168,4,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    
    
    
    return total;
}",
fcoo305,1697781236,5,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    
    
    
    return total;
}",
fcoo305,1697781351,6,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    total = 4;
    return total;
}",
fcoo305,1697781358,7,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    return total;
}",
fcoo305,1697781381,8,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            printf(""%d %d"", x, n - 1)
            total = total + Choose(x, n - 1);
        }
    }
    return total;
}",
fcoo305,1697781384,9,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            printf(""%d %d"", x, n - 1);
            total = total + Choose(x, n - 1);
        }
    }
    return total;
}",
fcoo305,1697781392,10,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            printf(""%d%d"", x, n - 1);
            total = total + Choose(x, n - 1);
        }
    }
    return total;
}",
fcoo305,1697781398,11,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            printf(""%d%d "", x, n - 1);
            total = total + Choose(x, n - 1);
        }
    }
    return total;
}",
fcoo305,1697781430,12,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    printf(""%d"", total);
    return total;
}",
fcoo305,1697781440,13,"int Choose(int m, int n)
{
    int total, x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    printf(""%d "", total);
    return total;
}",
fcoo305,1697781477,14,"int Choose(int m, int n)
{
    int total = 0;
    int x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    printf(""%d "", total);
    return total;
}",
fcoo305,1697781484,15,"int Choose(int m, int n)
{
    int total = 0;
    int x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    return total;
}",
fcoo305,1697781486,16,"int Choose(int m, int n)
{
    int total = 0;
    int x;
    if (n == 1) {
        total = m;
    }
    else {
        for (x = n - 1; x <= m - n + 1; x++) {
            total = total + Choose(x, n - 1);
        }
    }
    return total;
}",0
fcoo305,1697974177,17,"int Choose(int m, int n)
{
    int total = 0;
    if (n == m || m == 0) {
        total = 1;
    }
    else {
        total = Choose(m, n - 1) + Choose(m - 1, n - 1);
    }
    return total;
}",
fcoo305,1697974250,18,"int Choose(int m, int n)
{
    int total = 0;
    
    if ((n == m) || (m == 0)) { total = 1; }
    else { total = Choose(m, n - 1) + Choose(m - 1, n - 1); }
    return total;
}",
fcoo305,1697974312,19,"int Choose(int n, int m)
{
    int total = 0;
    
    if ((n == m) || (m == 0)) { total = 1; }
    else { total = Choose(m, n - 1) + Choose(m - 1, n - 1); }
    return total;
}",
fcoo305,1697974452,20,"int Choose(int n, int m)
{
    int total = 0;
    
    if ((n == m) || (m == 0)) { total = 1; }
    else { total = Choose(n - 1, m) + Choose(n - 1, m - 1); }
    return total;
}",
fcoo305,1697974455,21,"int Choose(int n, int m)
{
    int total = 0;
    
    if ((n == m) || (m == 0)) { total = 1; }
    else { total = Choose(n - 1, m) + Choose(n - 1, m - 1); }
    return total;
}",1
fesp714,1697574322,1,"int Choose(int n, int m) {
    // Base case: only one way to pick 0; choosing nothing. 
    //            only way to pick n things of n things; pick them all.
    if(m == 0 || n == m) {
        return 1;
    }
    
    // Recursive case: if 0 < m < n 
    return Choose(n - 1, m) + Choose( n - 1, m - 1);
}",
fesp714,1697574325,2,"int Choose(int n, int m) {
    // Base case: only one way to pick 0; choosing nothing. 
    //            only way to pick n things of n things; pick them all.
    if(m == 0 || n == m) {
        return 1;
    }
    
    // Recursive case: if 0 < m < n 
    return Choose(n - 1, m) + Choose( n - 1, m - 1);
}",1
fkee774,1697883644,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
fkee774,1697883645,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
fobr691,1698068340,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

int main() {
    int n = 6;
    int m = 2;
    printf(""%d"", Choose(n, m));
    return 0;
}
",0
fobr691,1698068349,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

",1
fwij709,1697438524,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    } else {
        return (Choose(n - 1, m) + Choose(n  - 1, m - 1));
    }
}",
fwij709,1697438528,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    } else {
        return (Choose(n - 1, m) + Choose(n  - 1, m - 1));
    }
}",1
fwil727,1697781255,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive relation
    return Choose(n-1, m-1) + Choose(n-1, m);
}
",
fwil727,1697781257,2,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive relation
    return Choose(n-1, m-1) + Choose(n-1, m);
}
",1
fyan180,1698074003,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
fyan180,1698074006,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
gcha636,1698055257,1,"int Choose(int n, int m)
{

    if (m == 0 || n == m){
        return 1;
    } else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",
gcha636,1698055259,2,"int Choose(int n, int m)
{

    if (m == 0 || n == m){
        return 1;
    } else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

}",1
ggao363,1698054970,1,"int Choose(int n, int m){
if(m == 0 ||m == n) {
    return 1;
} else if(m == 1){
    return n;
} else{
    return Choose(n - 1, m - 1 ) + Choose(n - 1, m);
}
}",1
gge561,1697763302,1,"int Choose(int n, int m) {

	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else{
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
gge561,1697763304,2,"int Choose(int n, int m) {

	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else{
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
gmal045,1697625350,1,"int factorial(int n) 
{ 
    if (n == 0 || n == 1) 
        return 1; 
    return n * factorial(n - 1); 
} 

int Choose(int n, int m)
{
    int result;
    result = factorial(n)/(factorial(m)*factorial(n-m));
    return result;
}",0
gmal045,1697627188,2,"int Choose(int n, int m)
{
    if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    else
    {
        return 1;
    }
}",1
gmoh887,1697506031,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    } 
    return Choose(n-1, m) + Choose(n-1, m-1);
}",1
gpen695,1697943149,1,"int Choose(int n, int m) 
{
    // Base cases
    if (m == 0 || m == n) 
        return 1;

    // Recursive calculation
    return Choose(n-1, m-1) + Choose(n-1, m);
}",
gpen695,1697943176,2,"int Choose(int n, int m) 
{
   
    if (m == 0 || m == n) 
        return 1;

    return Choose(n-1, m-1) + Choose(n-1, m);
}",1
gvan573,1698108397,1,"int Factorial(n)
{
	if ((n == 0) || (n == 1)) {
		return 1;
	}
	else {
		return n * Factorial(n - 1);
	}
}

//this funtion takes two integers as input and returns n choose m 
//(i.e. the number of ways of selecting m things out of a total of n things).
int Choose(int n, int m)
{
	//(n factorial) / ( (m factorial) times (m - n factorial) )
	int numerator = Factorial(n);
	int denominator = Factorial(m) * Factorial(n - m);

	int a = numerator / denominator;

	return a;
}",
gvan573,1698108408,2,"int Factorial(int n)
{
	if ((n == 0) || (n == 1)) {
		return 1;
	}
	else {
		return n * Factorial(n - 1);
	}
}

//this funtion takes two integers as input and returns n choose m 
//(i.e. the number of ways of selecting m things out of a total of n things).
int Choose(int n, int m)
{
	//(n factorial) / ( (m factorial) times (m - n factorial) )
	int numerator = Factorial(n);
	int denominator = Factorial(m) * Factorial(n - m);

	int a = numerator / denominator;

	return a;
}",
gvan573,1698108411,3,"int Factorial(int n)
{
	if ((n == 0) || (n == 1)) {
		return 1;
	}
	else {
		return n * Factorial(n - 1);
	}
}

//this funtion takes two integers as input and returns n choose m 
//(i.e. the number of ways of selecting m things out of a total of n things).
int Choose(int n, int m)
{
	//(n factorial) / ( (m factorial) times (m - n factorial) )
	int numerator = Factorial(n);
	int denominator = Factorial(m) * Factorial(n - m);

	int a = numerator / denominator;

	return a;
}",0
gvan573,1698119195,4,"//this funtion takes two integers as input and returns n choose m 
//(i.e. the number of ways of selecting m things out of a total of n things).
int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
gvan573,1698119199,5,"//this funtion takes two integers as input and returns n choose m 
//(i.e. the number of ways of selecting m things out of a total of n things).
int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
gxu660,1697593501,1,"int Choose(int n, int m)
{
    if (n == m || m == 0) {
        return 1;
    } else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
gxu660,1697593504,2,"int Choose(int n, int m)
{
    if (n == m || m == 0) {
        return 1;
    } else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",1
gzho986,1697801515,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}",
gzho986,1697801541,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base case: C(n, 0) = C(n, n) = 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); // Recursive formula
    }
}
",
gzho986,1697801556,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}
",
gzho986,1697801558,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}
",1
hama210,1697444956,1,"int Choose(int n, int m)
{  
  if (m == 0 || m == n) 
  {
    return 0; 
  }
    return Choose(n - 1, m) + Choose(n - 1, m - 1); 
}",
hama210,1697444971,2,"int Choose(int n, int m)
{  
  if (m == 0 || m == n) 
  {
    return 1; 
  }
    return Choose(n - 1, m) + Choose(n - 1, m - 1); 
}",
hama210,1697444979,3,"int Choose(int n, int m)
{  
  if (m == 0 || m == n) 
  {
    return 1; 
  }
    return Choose(n - 1, m) + Choose(n - 1, m - 1); 
}",1
haus879,1697524548,1,"int Choose(int n, int m) {
    if ((m == 0) || (m == n)) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
hbas168,1697938336,1,"int Choose(int n, int m) {
	if (n == m || m == 0) return 1;

	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
hbas168,1697938338,2,"int Choose(int n, int m) {
	if (n == m || m == 0) return 1;

	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
hber510,1697521787,1,"int Choose(int n, int m)
{
    int n_m;
    
    if (m == 0 || n == m) {
        return 1;
    } else if (0 < m < n) {
        n_m = Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else {
        return 0;
    }
    
    return n_m;
}",
hber510,1697521820,2,"int Choose(int n, int m)
{
    int n_m;
    
    if (m == 0 || n == m) {
        return 1;
    } else if ((0 < m) && (m < n)) {
        n_m = Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else {
        return 0;
    }
    
    return n_m;
}",
hber510,1697521822,3,"int Choose(int n, int m)
{
    int n_m;
    
    if (m == 0 || n == m) {
        return 1;
    } else if ((0 < m) && (m < n)) {
        n_m = Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else {
        return 0;
    }
    
    return n_m;
}",1
hbhe454,1698121699,1,"int Choose (int x, int y)
{
    if(x==0||x==y){
        return 1;
    }
    
    return (Choose(x-1,y)+ Choose(x-1,y-1));
}",
hbhe454,1698121789,2,"int Choose (int x, int y)
{
    if(y==0||y==x){
        return 1;
    }
    
    return (Choose(x-1,y)+ Choose(x-1,y-1));
}",
hbhe454,1698121794,3,"int Choose (int x, int y)
{
    if(y==0||y==x){
        return 1;
    }
    
    return (Choose(x-1,y)+ Choose(x-1,y-1));
}",1
hbou314,1697771036,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else if (0 < m && m < n) {
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}

	return 0;
}",
hbou314,1697771037,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else if (0 < m && m < n) {
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}

	return 0;
}",1
hcha410,1698025805,1,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
hcha410,1698025809,2,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
hche410,1698138429,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
hche410,1698138430,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
hche864,1697508302,1,"int Choose(int n, int m)
{
	int Result;
	if (m == 0 || m >= n) {
		return 1;
	}
	else {
		Result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return Result;
}",
hche864,1697508306,2,"int Choose(int n, int m)
{
	int Result;
	if (m == 0 || m >= n) {
		return 1;
	}
	else {
		Result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return Result;
}",1
hcop563,1697676055,1,"int Choose(int n, int m) {
	
	if (m == 0 || n ==m) {
		return 1;
	}

	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
hcop563,1697676058,2,"int Choose(int n, int m) {
	
	if (m == 0 || n ==m) {
		return 1;
	}

	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
hcro730,1697526367,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
hcro730,1697526369,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
hgao080,1697438302,1,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
hgao080,1697438303,2,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
hgou636,1697897186,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0) {
        return 1;
        }
        else if (m == n) {
            return 1;
        } else {
            int Value = Choose(n - 1, m - 1) + Choose(n - 1, m);
            return Value;
        }
}",
hgou636,1697897188,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0) {
        return 1;
        }
        else if (m == n) {
            return 1;
        } else {
            int Value = Choose(n - 1, m - 1) + Choose(n - 1, m);
            return Value;
        }
}",1
hhil451,1698140234,1,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	else if (m == n)
	{
		return 1;
	}

	if ((0 < m) && (m < n))
	{
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
hhil451,1698140345,2,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	

	else if ((0 < m) && (m < n))
	{
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else
	{
		return 1;
	}
}",
hhil451,1698140349,3,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	

	else if ((0 < m) && (m < n))
	{
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else
	{
		return 1;
	}
}",1
hkah523,1698043209,1,"#include <stdio.h>
/*author: Harshdeep Kahlon*/

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursively calculate n choose m using the formula: C(n, m) = C(n-1, m-1) + C(n-1, m)
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}

",
hkah523,1698043215,2,"#include <stdio.h>
/*author: Harshdeep Kahlon*/

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursively calculate n choose m using the formula: C(n, m) = C(n-1, m-1) + C(n-1, m)
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}

",1
hkee941,1698137322,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) { //base case
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
hkee941,1698137324,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) { //base case
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
hkim807,1697692752,1,"int Choose(int n, int m)
{
    int result;
    if(m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else {
        result = Choose((n-1),m) + Choose((n-1),(m-1));
        return result;
    }

    return 0;
}",
hkim807,1697692754,2,"int Choose(int n, int m)
{
    int result;
    if(m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else {
        result = Choose((n-1),m) + Choose((n-1),(m-1));
        return result;
    }

    return 0;
}",1
hkon883,1698144681,1,"int Calculate(int x) {
    int result = 1;
    for (int i = 1; i <= x; i++) {
        result *= i;
    }
    return result;
}

int Choose(int n, int m) {
    if (n < m || m < 0) {
        return 0;
    }
    if (n < m) {
        return 0;
    }
    return Calculate(n) / (Calculate(m) * Calculate(n - m));
}",0
hlee999,1697873208,1,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else if (m > 0 && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
hlee999,1697873289,2,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
hlee999,1697873291,3,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
hleu459,1698027636,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }

    if (n == m) {
        return 1;
    }

    if (0 < m && m < n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }

    return -1;
}",
hleu459,1698027649,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }

    if (n == m) {
        return 1;
    }

    if (0 < m && m < n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }

    return -1;
}",1
hliu836,1697721864,1,"int Choose(int first, int second) {
    if ((second == 0) || (first == second)) {
        return 1;
    } else {
        int val;
        val = Choose(first - 1, second - 1) + Choose(first - 1, second);
    }
}",0
hliu836,1697721871,2,"int Choose(int first, int second) {
    if ((second == 0) || (first == second)) {
        return 1;
    } else {
        int val;
        val = Choose(first - 1, second - 1) + Choose(first - 1, second);
    }
}",
hliu836,1697721958,3,"int Choose(int first, int second) {
    if ((second == 0) || (first == second)) {
        return 1;
    } else {
        int val;
        val = Choose(first - 1, second - 1) + Choose(first - 1, second);
        return val;
    }
}",
hliu836,1697721960,4,"int Choose(int first, int second) {
    if ((second == 0) || (first == second)) {
        return 1;
    } else {
        int val;
        val = Choose(first - 1, second - 1) + Choose(first - 1, second);
        return val;
    }
}",1
hly852,1697857734,1,"int Choose(int n, int m) {
    if ((m == 0) || (m == n)) {
        return 1;
    }
    else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",
hly852,1697857736,2,"int Choose(int n, int m) {
    if ((m == 0) || (m == n)) {
        return 1;
    }
    else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",1
hma481,1697792728,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}

	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
hma481,1697792731,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}

	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
hmcm582,1697492365,1,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
hmel649,1697619811,1,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    } else {
        next_n = n - 1;
        next_m = m - 1;
        return Choose(next_n, next_m) + Choose(next_n, m);
    }
}",
hmel649,1697619887,2,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    } else {
        int next_n = n - 1;
        int next_m = m - 1;
        return Choose(next_n, next_m) + Choose(next_n, m);
    }
}",
hmel649,1697620070,3,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    } else {
        int next_n = n - 1;
        int next_m = m - 1;
        int down_both = Choose(next_n, next_m); 
        int down_one = Choose(next_n, m);
        return down_both + down_one;
    }
}",
hmel649,1697620072,4,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    } else {
        int next_n = n - 1;
        int next_m = m - 1;
        int down_both = Choose(next_n, next_m); 
        int down_one = Choose(next_n, m);
        return down_both + down_one;
    }
}",1
hmof971,1697664831,1,"int Choose(int things, int chosen) {
	if (chosen == 0|| chosen == things) {
		return 1;
	}
	else {
		return Choose(things - 1, chosen)+ Choose(things - 1, chosen - 1);
	}
}",
hmof971,1697664836,2,"int Choose(int things, int chosen) {
	if (chosen == 0|| chosen == things) {
		return 1;
	}
	else {
		return Choose(things - 1, chosen)+ Choose(things - 1, chosen - 1);
	}
}",1
hnew638,1697445824,1,"int Choose(int n, int m)
{
    if (n == m || m == 0)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    
}",
hnew638,1697445826,2,"int Choose(int n, int m)
{
    if (n == m || m == 0)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    
}",1
hpan363,1698134049,1,"int Choose(int n, m)
{
    if m > n
    {
        return 0
    }
    if (m == 0 || n == 0)
    {
        return 1
    }
    else
    {
        return Choose(n-1,m-1)+Choose(n-1,m)
    }
}",
hpan363,1698134062,2,"int Choose(int n, m)
{
    if m > n
    {
        return 0;
    }
    if (m == 0 || n == 0)
    {
        return 1;
    }
    else
    {
        return Choose(n-1,m-1)+Choose(n-1,m);
    }
}",
hpan363,1698134073,3,"int Choose(int n, int m)
{
    if m > n
    {
        return 0;
    }
    if (m == 0 || n == 0)
    {
        return 1;
    }
    else
    {
        return Choose(n-1,m-1)+Choose(n-1,m);
    }
}",
hpan363,1698134078,4,"int Choose(int n, int m)
{
    if (m > n)
    {
        return 0;
    }
    if (m == 0 || n == 0)
    {
        return 1;
    }
    else
    {
        return Choose(n-1,m-1)+Choose(n-1,m);
    }
}",
hpan363,1698134155,5,"int Choose(int n, int m)
{
    if (m > n)
    {
        return 0;
    }
    if (m == 0 || n == 0)
    {
        return 1;
    }
    else
    {
        return Choose(n-1,m-1)+Choose(n-1,m);
    }
}",1
hpat916,1697438395,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",1
hpir641,1697526793,1,"int Choose(int n, int m)
{
	if ((n==m)||(m==0)) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
hpir641,1697526796,2,"int Choose(int n, int m)
{
	if ((n==m)||(m==0)) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
hrob997,1697951046,1,"int Choose(int n, int m) 
{
	int c;

	if (m == 0 || m == n) {
		c = 1;
	}
	else {
		c = Choose(n - 1, m) + Choose(n - 1, m - 1); 
	}
	return c; 
}",
hrob997,1697951047,2,"int Choose(int n, int m) 
{
	int c;

	if (m == 0 || m == n) {
		c = 1;
	}
	else {
		c = Choose(n - 1, m) + Choose(n - 1, m - 1); 
	}
	return c; 
}",1
hsan267,1697871414,1,"int Choose(int n, int m)
{
    int newn;
    int newm;
    int result;
    
    if (m == 0) {
        return 1;
    }
    else if (n == m) {
        return 1;
    }
    else {
        newn = n-1;
        newm = m-1;
        result = Choose(newn,m) + Choose(newn, newm);
        
        return result;
    }
}",
hsan267,1697871417,2,"int Choose(int n, int m)
{
    int newn;
    int newm;
    int result;
    
    if (m == 0) {
        return 1;
    }
    else if (n == m) {
        return 1;
    }
    else {
        newn = n-1;
        newm = m-1;
        result = Choose(newn,m) + Choose(newn, newm);
        
        return result;
    }
}",1
hson435,1698061162,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
hson435,1698061164,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
htew916,1698061571,1,"#include <stdio.h>

// The function, Choose takes two integers as inputs (n and m) and returns n choose m.
// Author: Harmony Te Waaka.

int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        int result = 1;
        for (int i = 1; i <= m; i++) {
            result = result * (n - i + 1) / i;
        }
        return result;
    }
}",
htew916,1698061575,2,"#include <stdio.h>

// The function, Choose takes two integers as inputs (n and m) and returns n choose m.
// Author: Harmony Te Waaka.

int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        int result = 1;
        for (int i = 1; i <= m; i++) {
            result = result * (n - i + 1) / i;
        }
        return result;
    }
}",1
htho943,1697419261,1,"#include <stdio.h>
int Choose(int a, int b) {
    // base cases
    if (a==b)
    {
        return 1;
    }
    else if (b==0){
        return 1;
    }
    
    // recursive case calling it twice
    return Choose(a - 1, b) + Choose(a - 1, b - 1);

}",
htho943,1697420143,2,"#include <stdio.h>
int Choose(int a, int b) {
    // base cases
    if (a==b)
    {
        return 1;
    }
    else if (b==0){
        return 1;
    }
    
    // recursive case calling it twice
    return Choose(a - 1, b) + Choose(a - 1, b - 1);

}",1
htyl682,1698142453,1,"#include <stdio.h>
#include <math.h>

int Choose(int n,int k){
    unsigned long int fac1=1;
    unsigned long int fac2=1;
    int i=0;
    for(i=n;i>(n-k);i--){
        fac1=fac1*i;
    }
    for(i=k;i>0;i--){
        fac2=fac2*i;
    }
    int value=fac1/(fac2);
    printf(""n!=%d k!=%d  \n"",fac1,fac2);
    return(value);
}
",
htyl682,1698142464,2,"#include <stdio.h>
#include <math.h>

int Choose(int n,int k){
    unsigned long int fac1=1;
    unsigned long int fac2=1;
    int i=0;
    for(i=n;i>(n-k);i--){
        fac1=fac1*i;
    }
    for(i=k;i>0;i--){
        fac2=fac2*i;
    }
    int value=fac1/(fac2);
    return(value);
}
",
htyl682,1698142466,3,"#include <stdio.h>
#include <math.h>

int Choose(int n,int k){
    unsigned long int fac1=1;
    unsigned long int fac2=1;
    int i=0;
    for(i=n;i>(n-k);i--){
        fac1=fac1*i;
    }
    for(i=k;i>0;i--){
        fac2=fac2*i;
    }
    int value=fac1/(fac2);
    return(value);
}
",0
htyl682,1698143077,4,"#include <stdio.h>
#include <math.h>

int Choose(int n,int k){
    double fac1=1;
    double fac2=1;
    int i=0;
    for(i=n;i>(n-k);i--){
        fac1=fac1*i;
        printf(""%lf "",fac1);
    }
    for(i=k;i>0;i--){
        fac2=fac2*i;
        printf(""%lf "",fac2);
    }
    double value=fac1/(fac2);
    return(value);
}",
htyl682,1698143087,5,"#include <stdio.h>
#include <math.h>

int Choose(int n,int k){
    double fac1=1;
    double fac2=1;
    int i=0;
    for(i=n;i>(n-k);i--){
        fac1=fac1*i;
    }
    for(i=k;i>0;i--){
        fac2=fac2*i;
    }
    double value=fac1/(fac2);
    return(value);
}",
htyl682,1698143088,6,"#include <stdio.h>
#include <math.h>

int Choose(int n,int k){
    double fac1=1;
    double fac2=1;
    int i=0;
    for(i=n;i>(n-k);i--){
        fac1=fac1*i;
    }
    for(i=k;i>0;i--){
        fac2=fac2*i;
    }
    double value=fac1/(fac2);
    return(value);
}",1
hugn924,1698062914,1,"#include <stdio.h>

int Choose(int n, int m){
    if (n == 0 || n == m){
        return 1;
    }

    else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
hugn924,1698063058,2,"#include <stdio.h>

int Choose(int n, int m){
    if (m == 0 || n == m){
        return 1;
    }

    else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
hugn924,1698063059,3,"#include <stdio.h>

int Choose(int n, int m){
    if (m == 0 || n == m){
        return 1;
    }

    else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
hwen116,1697444339,1,"int Choose(int n, int m){

    int value;

    //Base case
    if (m==0){
        return 1;
    }else if (m==n){
        return 1;
    }else if ((m>0)&&(m<n)){//The recursive works by reaching the base term and then unwinding
    //So every time m==n or m==0, it will return 1 and then the returns will add up to 15. 
        return (Choose(n-1,m)+Choose(n-1,m-1));
    }else{
        return 0;
    }
    
}",
hwen116,1697444351,2,"int Choose(int n, int m){

    //Base case
    if (m==0){
        return 1;
    }else if (m==n){
        return 1;
    }else if ((m>0)&&(m<n)){//The recursive works by reaching the base term and then unwinding
    //So every time m==n or m==0, it will return 1 and then the returns will add up to 15. 
        return (Choose(n-1,m)+Choose(n-1,m-1));
    }else{
        return 0;
    }
    
}",
hwen116,1697444355,3,"int Choose(int n, int m){

    //Base case
    if (m==0){
        return 1;
    }else if (m==n){
        return 1;
    }else if ((m>0)&&(m<n)){//The recursive works by reaching the base term and then unwinding
    //So every time m==n or m==0, it will return 1 and then the returns will add up to 15. 
        return (Choose(n-1,m)+Choose(n-1,m-1));
    }else{
        return 0;
    }
    
}",1
hwin877,1697681234,1,"int Choose(int n, int m)
{
	if( (n == m) || (m == 0))
	{
		return 1;
	}
	else
	{
		int first_return = Choose((n - 1), m);
		int second_return = Choose((n - 1), (m - 1));
		return first_return + second_return;
	}
	return 0;
}",
hwin877,1697681237,2,"int Choose(int n, int m)
{
	if( (n == m) || (m == 0))
	{
		return 1;
	}
	else
	{
		int first_return = Choose((n - 1), m);
		int second_return = Choose((n - 1), (m - 1));
		return first_return + second_return;
	}
	return 0;
}",1
hyan713,1697669000,1,"int Choose(int n, int m)
{
    int count = 0;
    
    for (int i=0; i<n; i++){
        
        int j = i;
        while (j+m <= n) {
            count++;
            j++;
        }
    }
    
    return count;
}",
hyan713,1697669003,2,"int Choose(int n, int m)
{
    int count = 0;
    
    for (int i=0; i<n; i++){
        
        int j = i;
        while (j+m <= n) {
            count++;
            j++;
        }
    }
    
    return count;
}",0
hyan713,1697694709,3,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}
",
hyan713,1697694712,4,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}
",1
hye071,1697560726,1,"/******************************************************************************

Lab 12 Question 3

*******************************************************************************/
#include <stdio.h>

int Choose( int n, int m) {
    
    if (m==0 || m==n) {
        return 1;
    }
    
    return Choose(n-1, m-1) + Choose(n-1,m);
    
}",
hye071,1697561073,2,"/******************************************************************************

Lab 12 Question 3

*******************************************************************************/
#include <stdio.h>

int Choose( int n, int m) {
    
    if(m==0) {
        return 1;
    }
    
    if (m==n){
        return 1;
    }
    
    int C1= Choose(n-1, m-1);
    int C2= Choose(n-1, m);
    
    return C1+C2;
}
",
hye071,1697561077,3,"/******************************************************************************

Lab 12 Question 3

*******************************************************************************/
#include <stdio.h>

int Choose( int n, int m) {
    
    if(m==0) {
        return 1;
    }
    
    if (m==n){
        return 1;
    }
    
    int C1= Choose(n-1, m-1);
    int C2= Choose(n-1, m);
    
    return C1+C2;
}
",1
ibha186,1697870505,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        int result = Choose(n-1, m) + Choose(n-1, m-1);
        return result;
    }
}",
ibha186,1697870508,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        int result = Choose(n-1, m) + Choose(n-1, m-1);
        return result;
    }
}",1
ibur427,1697971815,1,"int Choose(int n, int m)
{
int a = n;
int b = m;

while (m - 1 > 0) {
	a = a * (n-1);
	b = b * (m-1);
	n--;
	m--;
}
return a/b;

}",
ibur427,1697971818,2,"int Choose(int n, int m)
{
int a = n;
int b = m;

while (m - 1 > 0) {
	a = a * (n-1);
	b = b * (m-1);
	n--;
	m--;
}
return a/b;

}",0
ibur427,1698020223,3,"int Choose(int n, int m)
{
long long a = n;

if (n-m < m) {
	m = n - m;
}

int b = m;

while (m - 1 > 0) {
	a = a * (n-1);
	b = b * (m-1); 
	n--;
	m--;
}

return a/b;

}",
ibur427,1698020225,4,"int Choose(int n, int m)
{
long long a = n;

if (n-m < m) {
	m = n - m;
}

int b = m;

while (m - 1 > 0) {
	a = a * (n-1);
	b = b * (m-1); 
	n--;
	m--;
}

return a/b;

}",1
iche428,1697927111,1,"int Choose(int n, int m)
{
    int x,y;

    if (m==0 || m==n) {
        return 1;
    }
    else {
        x = Choose(n-1,m);
        y = Choose(n-1,m-1);
        return x+y;
    }
}",
iche428,1697927114,2,"int Choose(int n, int m)
{
    int x,y;

    if (m==0 || m==n) {
        return 1;
    }
    else {
        x = Choose(n-1,m);
        y = Choose(n-1,m-1);
        return x+y;
    }
}",1
ihoo440,1697974635,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
ihoo440,1697974637,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
ikis164,1698029218,1,"#include <stdio.h>
#include <math.h>

int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

    else if (m > 0 && n > 0 && n > m) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

    return 0;
}",
ikis164,1698029220,2,"#include <stdio.h>
#include <math.h>

int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

    else if (m > 0 && n > 0 && n > m) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }

    return 0;
}",1
iko203,1698036246,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",
iko203,1698036249,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",1
ilee973,1698024436,1,"int Choose(int n, int m)
{
 if(m==0 || m==n){
     return 1;
 }   
 if(0<m && m<n){
     
     return Choose(n-1,m) + Choose(n-1,m-1);
 }
 else{
     return -1;
 }
}",
ilee973,1698024449,2,"int Choose(int n, int m)
{
 if(m==0 || m==n){
     return 1;
 }   
 if(0<m && m<n){
     
     return Choose(n-1,m) + Choose(n-1,m-1);
 }
 else{
     return -1;
 }
}",1
imac384,1698029243,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n){
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
imac384,1698029263,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n){
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
imoh000,1697933148,1,"#include <stdio.h>

int Choose(int n, int m) {
    //Scenario 1: if m is equal 0 OR m is equal n
    if (m == 0 || m == n) {
        return 1;
    }
    //Scenario 2: Recursive case: return Choose(n-1, m-1) + Choose(n-1, m) (the relationship)
    else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}

",
imoh000,1697933152,2,"#include <stdio.h>

int Choose(int n, int m) {
    //Scenario 1: if m is equal 0 OR m is equal n
    if (m == 0 || m == n) {
        return 1;
    }
    //Scenario 2: Recursive case: return Choose(n-1, m-1) + Choose(n-1, m) (the relationship)
    else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}

",1
iwes050,1697426874,1,"#include <stdio.h>

int Choose(int n, int m)
{
    // Base cases
    if (m == 0)
    {
        return 1;
    }
    if (m == n)
    {
        return 1;
    }

    // Recursive case
    if (n > m && m > 0)
    {
        int answer = Choose(n - 1, m - 1) + Choose(n - 1, m);
        return answer;
    }
return 0;
}",
iwes050,1697426877,2,"#include <stdio.h>

int Choose(int n, int m)
{
    // Base cases
    if (m == 0)
    {
        return 1;
    }
    if (m == n)
    {
        return 1;
    }

    // Recursive case
    if (n > m && m > 0)
    {
        int answer = Choose(n - 1, m - 1) + Choose(n - 1, m);
        return answer;
    }
return 0;
}",1
iwil997,1697942444,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }
    
    int a=n-1;
    int b=m-1;
    
    return Choose(a, b) + Choose(a, m);
}",
iwil997,1697942446,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }
    
    int a=n-1;
    int b=m-1;
    
    return Choose(a, b) + Choose(a, m);
}",1
iwoo382,1697524088,1,"int Choose(int n, int m)
{
    int total;
    if (m == 0 || m == n) {
        total = 1;
    } else if (0 < m && m < n) {
        total = Choose(n-1, m) + Choose(n-1, m-1);
    }
    return total;
}",
iwoo382,1697524092,2,"int Choose(int n, int m)
{
    int total;
    if (m == 0 || m == n) {
        total = 1;
    } else if (0 < m && m < n) {
        total = Choose(n-1, m) + Choose(n-1, m-1);
    }
    return total;
}",1
ixia229,1697993782,1,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    } else if (m == n){
        return 1;
    }
    else {
        return (Choose(n - 1, m - 1)) + (Choose(n - 1, m));
    }
}",
ixia229,1697993795,2,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    } else if (m == n){
        return 1;
    }
    else {
        return (Choose(n - 1, m - 1)) + (Choose(n - 1, m));
    }
}",1
ixu871,1697716879,1,"unsigned long long factorial(int n) {
    if (n == 0 || n == 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

// Function to calculate n choose m
unsigned long long Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0; // Invalid input, m should be between 0 and n.
    }

    return factorial(n) / (factorial(m) * factorial(n - m));
}",
ixu871,1697716970,2,"unsigned long long Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base case: C(n, 0) or C(n, n) is always 1
    } else {
        // Recursive case: C(n, m) = C(n-1, m-1) + C(n-1, m)
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
ixu871,1697717034,3,"unsigned long long Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base case: C(n, 0) or C(n, n) is always 1
    } else {
        // Recursive case: C(n, m) = C(n-1, m-1) + C(n-1, m)
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

int main() {
    int n = 6, m = 2;
    printf(""%llu\n"", Choose(n, m)); // Use %llu for unsigned long long

    return 0;
}",
ixu871,1697717081,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return (int)Choose(n - 1, m - 1) + (int)Choose(n - 1, m);
    }
}",
ixu871,1697717137,5,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1; 
    } else {
        return (int)Choose(n - 1, m - 1) + (int)Choose(n - 1, m);
    }
}",1
jahn224,1697519076,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",
jahn224,1697519083,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",1
jaus241,1697581045,1,"int Choose(int n, int m)
{
    int x = 0;
    if(m == 0){
        return 1;
    }
    else if(m == n){
        return 1;
    }
    else{
        x = x + (Choose(n - 1, m) + Choose(n - 1, m - 1));
        
    }
    return x;
}",
jaus241,1697581052,2,"int Choose(int n, int m)
{
    int x = 0;
    if(m == 0){
        return 1;
    }
    else if(m == n){
        return 1;
    }
    else{
        x = x + (Choose(n - 1, m) + Choose(n - 1, m - 1));
        
    }
    return x;
}",1
jbam701,1697769635,1,"int Choose(int n, int m) {
	if (m == n || m == 0) {
		return 1;
	}
	else {
		int a = Choose(n - 1, m);
		int b = Choose(n - 1, m - 1);

		return a + b;
	}

}",
jbam701,1697769638,2,"int Choose(int n, int m) {
	if (m == n || m == 0) {
		return 1;
	}
	else {
		int a = Choose(n - 1, m);
		int b = Choose(n - 1, m - 1);

		return a + b;
	}

}",1
jbam753,1698109062,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
jbam753,1698109087,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
jbam753,1698109094,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
jbis394,1697972613,1,"void Choose(int n, int m) {

    if (m == 0) {
        printf(""%d"", 1);
        
    else if (n == m) {
        printf(""%d"", 1);
    }

    } else {
        printf(""%d"", (a % 10));
        a = a / 10;
        PrintReverse(a);
    }
}",
jbis394,1697972719,2,"void Choose(int n, int m) {

    if (m == 0) {
        printf(""%d"", 1);
        
    } else if (n == m) {
        printf(""%d"", 1);
    }

    } else {
        Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697972732,3,"void Choose(int n, int m) {

    if (m == 0) {
        printf(""%d"", 1);
        
    } else if (n == m) {
        printf(""%d"", 1);

    } else {
        Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697972770,4,"void Choose(int n, int m) {

    if (m == 0) {
        printf(""%d"", 1);
        
    } else if (n == m) {
        printf(""%d"", 1);
}

    } else {
        Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697973243,5,"sum = 0;

void Choose(int n, int m) {

    if (m == 0) {
        sum = sum + 1;
        printf(""%d"", 1);
        
    } else if (n == m) {
        sum = sum + 1
        printf(""%d"", sum);
    }

    } else {
        Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697973262,6,"sum = 0;

void Choose(int n, int m) {

    if (m == 0) {
        sum = sum + 1;
        printf(""%d"", 1);
        
    } else if (n == m) {
        sum = sum + 1;
        printf(""%d"", sum);
    }

    } else {
        Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697973727,7,"sum = 0;

void Choose(int n, int m) {

    if (m == 0) {
        return 1;
        
    } else if (n == m) {
        return 1;
    }

    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697973733,8,"void Choose(int n, int m) {

    if (m == 0) {
        return 1;
        
    } else if (n == m) {
        return 1;
    }

    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697974013,9,"
int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jbis394,1697974064,10,"int Choose(int n, int m) {

    if (m == 0) {
        return 1;
        
    } else if (n == m) {
        return 1;
    }

    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697974076,11,"int Choose(int n, int m) {

    if (m == 0) {
        return 1;
        
    } else if (n == m) {
        return 1;
    }

    } } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697974185,12,"int Choose(int n, int m) {

    if (m == 0) {
        return 1;
        
    } else if (n == m) {
        return 1;

    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jbis394,1697974190,13,"int Choose(int n, int m) {

    if (m == 0) {
        return 1;
        
    } else if (n == m) {
        return 1;

    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
jbro301,1697780593,1,"int Choose(int n,int m)
{
    if((m==0) || (m==n)) {
        return 1;
    } 
    else if (m>n) {
        return 0;
    }
    else {
       return Choose(n-1,m) + Choose(n-1,m-1);
    }
}",
jbro301,1697780606,2,"int Choose(int n,int m)
{
    if((m==0) || (m==n)) {
        return 1;
    } 
    else if (m>n) {
        return 0;
    }
    else {
       return Choose(n-1,m) + Choose(n-1,m-1);
    }
}",1
jbru537,1698103541,1,"#include <stdio.h> 





int Choose(int n, int m)
 {
if (m == 0 || n == m) {
 return 1;

 } else {

return Choose(n-1, m) + Choose(n-1,m-1);

 }



 }",
jbru537,1698103549,2,"#include <stdio.h> 





int Choose(int n, int m)
 {
if (m == 0 || n == m) {
 return 1;

 } else {

return Choose(n-1, m) + Choose(n-1,m-1);

 }



 }",1
jbuc296,1698111642,1,"int Choose(int n , int m)
{
 
 if (m == 0) {
  return 1;
 } else if (m == n) {
  return 1;
 } else {
 return Choose(n - 1, m) + Choose(n - 1, m - 1);
 } 
 
}",
jbuc296,1698111646,2,"int Choose(int n , int m)
{
 
 if (m == 0) {
  return 1;
 } else if (m == n) {
  return 1;
 } else {
 return Choose(n - 1, m) + Choose(n - 1, m - 1);
 } 
 
}",1
jcha513,1697622923,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else if (m > 0 && n > m) {
        return Choose(n-1, m) + Choose (n-1, m-1);
    }
}",
jcha513,1697622938,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else if (m > 0 && n > m) {
        return Choose(n-1, m) + Choose (n-1, m-1);
    }
    
    return 0;
}",
jcha513,1697622940,3,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else if (m > 0 && n > m) {
        return Choose(n-1, m) + Choose (n-1, m-1);
    }
    
    return 0;
}",1
jcha574,1698055027,1,"#include <stdio.h>
int Choose(int n, int m)
{
    int y;
    if(m==n || m==0){
        return 1;
    }
    else {
        y = Choose(n-1,m) + Choose(n-1,m-1);
        return y;
    }
}",
jcha574,1698055031,2,"#include <stdio.h>
int Choose(int n, int m)
{
    int y;
    if(m==n || m==0){
        return 1;
    }
    else {
        y = Choose(n-1,m) + Choose(n-1,m-1);
        return y;
    }
}",1
jcha972,1697523658,1,"int Choose(int n, int m) {
    
    if ((m == 0)||(n == m)) {
        return 1;
    } else {
        return (Choose((n-1), m) + Choose((n-1), (m-1)));
    }
}",
jcha972,1697523661,2,"int Choose(int n, int m) {
    
    if ((m == 0)||(n == m)) {
        return 1;
    } else {
        return (Choose((n-1), m) + Choose((n-1), (m-1)));
    }
}",1
jche456,1698120436,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
jche456,1698120438,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
jchi648,1697850397,1,"int Choose(int n, int m) {
    
    if ( m == 0) {
        
        return 1;
        
    } else if ( n == m ) {
        
        return 1;
        
    } else {
        
        int a = Choose(n-1, m);
        int b = Choose(n-1, m-1);
        return a + b;
        
    }
    
}
",
jchi648,1697850399,2,"int Choose(int n, int m) {
    
    if ( m == 0) {
        
        return 1;
        
    } else if ( n == m ) {
        
        return 1;
        
    } else {
        
        int a = Choose(n-1, m);
        int b = Choose(n-1, m-1);
        return a + b;
        
    }
    
}
",1
jchu579,1698050013,1,"int Choose(int n, int m)
{
	if ( (m == 0) || (n == m) )
	{
		return 1;
	}
	else {
		if (n > m && m > 0)
		{
			return Choose(n - 1, m) + Choose(n - 1, m - 1);
		}
	}
}",0
jchu579,1698050018,2,"int Choose(int n, int m)
{
	if ( (m == 0) || (n == m) )
	{
		return 1;
	}
	else {
		if (n > m && m > 0)
		{
			return Choose(n - 1, m) + Choose(n - 1, m - 1);
		}
	}
}",
jchu579,1698050086,3,"int Choose(int n, int m)
{
	if ( (m == 0) || (n == m) )
	{
		return 1;
	}
	else {
		if (n > m && m > 0)
		{
			return Choose(n - 1, m) + Choose(n - 1, m - 1);
		}
		else {
			return 0;
		}
	}
}",
jchu579,1698050087,4,"int Choose(int n, int m)
{
	if ( (m == 0) || (n == m) )
	{
		return 1;
	}
	else {
		if (n > m && m > 0)
		{
			return Choose(n - 1, m) + Choose(n - 1, m - 1);
		}
		else {
			return 0;
		}
	}
}",1
jcla431,1697506709,1,"int Choose(int n, int m);

int Choose(int n, int m)
{
	if ((n == m) || (m == 0))
	{
		return 1;
	}

	else
	{
		if ((n > m) && (m > 0))
		{
			return (Choose(n - 1, m) + Choose(n - 1, m - 1));
		}

		else
		{
			return 0;
		}
	}
}",
jcla431,1697506712,2,"int Choose(int n, int m);

int Choose(int n, int m)
{
	if ((n == m) || (m == 0))
	{
		return 1;
	}

	else
	{
		if ((n > m) && (m > 0))
		{
			return (Choose(n - 1, m) + Choose(n - 1, m - 1));
		}

		else
		{
			return 0;
		}
	}
}",1
jcla755,1697442855,1,"int Choose(int n, int m)
{
    if(m == 0 || n == m)
    {
        return 1;
    }
    else
    {
        return(Choose(n-1, m) + Choose(n-1, m-1));       
    }
}",
jcla755,1697442858,2,"int Choose(int n, int m)
{
    if(m == 0 || n == m)
    {
        return 1;
    }
    else
    {
        return(Choose(n-1, m) + Choose(n-1, m-1));       
    }
}",1
jdal353,1698121252,1,"#include <stdio.h>

int Choose(int n, int m) {

    if (m > n) {
        return 0;
    }

    if (m == 0) {
        return 1;
    }
    
    if (m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);

}",
jdal353,1698121255,2,"#include <stdio.h>

int Choose(int n, int m) {

    if (m > n) {
        return 0;
    }

    if (m == 0) {
        return 1;
    }
    
    if (m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);

}",1
jdea126,1697727469,1,"void Choose(int n, int m)
{
	int total = 0;
	int nloop = n-1;
	int mloop = m-1;
	int nstart = n;
	int mstart = m;
	if (m == 0 || n == m) {
		printf(""%d"", 1);
	}
	else {
		while (nloop > 1 ) {
			n = n * (nloop);
			nloop -= 1;
		}
		while (mloop > 1) {
			m = m * (mloop);
			mloop -= 1;
		}
		int d = nstart - mstart;
		int dloop = d - 1;

		while (dloop > 1) {
			d = d * dloop;
			dloop -= 1;
		}
		total = n / (m*d) ;
		printf(""%d"", total);
	}
}",
jdea126,1697727522,2,"int Choose(int n, int m)
{
	int total = 0;
	int nloop = n-1;
	int mloop = m-1;
	int nstart = n;
	int mstart = m;
	if (m == 0 || n == m) {
		printf(""%d"", 1);
	}
	else {
		while (nloop > 1 ) {
			n = n * (nloop);
			nloop -= 1;
		}
		while (mloop > 1) {
			m = m * (mloop);
			mloop -= 1;
		}
		int d = nstart - mstart;
		int dloop = d - 1;

		while (dloop > 1) {
			d = d * dloop;
			dloop -= 1;
		}
		total = n / (m*d) ;
		return total;
	}
}",
jdea126,1697727535,3,"void Choose(int n, int m)
{
	int total = 0;
	int nloop = n-1;
	int mloop = m-1;
	int nstart = n;
	int mstart = m;
	if (m == 0 || n == m) {
		printf(""%d"", 1);
	}
	else {
		while (nloop > 1 ) {
			n = n * (nloop);
			nloop -= 1;
		}
		while (mloop > 1) {
			m = m * (mloop);
			mloop -= 1;
		}
		int d = nstart - mstart;
		int dloop = d - 1;

		while (dloop > 1) {
			d = d * dloop;
			dloop -= 1;
		}
		total = n / (m*d) ;
		return total;
	}
}",
jdea126,1697727566,4,"int Choose(int n, int m)
{
	int total = 0;
	int nloop = n-1;
	int mloop = m-1;
	int nstart = n;
	int mstart = m;
	if (m == 0 || n == m) {
		printf(""%d"", 1);
	}
	else {
		while (nloop > 1 ) {
			n = n * (nloop);
			nloop -= 1;
		}
		while (mloop > 1) {
			m = m * (mloop);
			mloop -= 1;
		}
		int d = nstart - mstart;
		int dloop = d - 1;

		while (dloop > 1) {
			d = d * dloop;
			dloop -= 1;
		}
	}
	return total;
}",
jdea126,1697727606,5,"int Choose(int n, int m)
{
	int total = 0;
	int nloop = n-1;
	int mloop = m-1;
	int nstart = n;
	int mstart = m;
	if (m == 0 || n == m) {
		printf(""%d"", 1);
	}
	else {
		while (nloop > 1 ) {
			n = n * (nloop);
			nloop -= 1;
		}
		while (mloop > 1) {
			m = m * (mloop);
			mloop -= 1;
		}
		int d = nstart - mstart;
		int dloop = d - 1;

		while (dloop > 1) {
			d = d * dloop;
			dloop -= 1;
		}
		total = n/(m*d);
	}
	return total;
}",
jdea126,1697727609,6,"int Choose(int n, int m)
{
	int total = 0;
	int nloop = n-1;
	int mloop = m-1;
	int nstart = n;
	int mstart = m;
	if (m == 0 || n == m) {
		printf(""%d"", 1);
	}
	else {
		while (nloop > 1 ) {
			n = n * (nloop);
			nloop -= 1;
		}
		while (mloop > 1) {
			m = m * (mloop);
			mloop -= 1;
		}
		int d = nstart - mstart;
		int dloop = d - 1;

		while (dloop > 1) {
			d = d * dloop;
			dloop -= 1;
		}
		total = n/(m*d);
	}
	return total;
}",0
jdea126,1697775590,7,"int Choose(int n, int m)
{
	long long int total = 0;
	long long int ntotal = 1;
	long long int mtotal = 1;
	long long int mtotal2 = 1;
	long long int dtotal = 1;
	long long int dtotal2 = 1;

	if (m == 0 || n == m) {
		printf(""%d"", 1);
	}
	else {
		n = n - 1;
		for (int i = 1; i <= n; i++) {
			ntotal = ntotal*i;
		}
		for (int j = 1; j <= m; j++) {
			mtotal = mtotal*j;
		}
		int d = n - m;
		for (int k = 1; k <= d; k++) {
			dtotal = dtotal*k;
		}

		int total1 = ntotal / (mtotal*dtotal) ;

		int m2 = m - 1;
		for (int h = 1; h <= m2; h++) {
			mtotal2 = mtotal2 * h;
		}
		int d2 = n - m2;
		for (int y = 1; y <= d2; y++) {
			dtotal2 = dtotal2 * y;
		}
		int total2 = ntotal / (mtotal2 * dtotal2);
		total = total1 + total2;
	}
	return total;
}",
jdea126,1697775592,8,"int Choose(int n, int m)
{
	long long int total = 0;
	long long int ntotal = 1;
	long long int mtotal = 1;
	long long int mtotal2 = 1;
	long long int dtotal = 1;
	long long int dtotal2 = 1;

	if (m == 0 || n == m) {
		printf(""%d"", 1);
	}
	else {
		n = n - 1;
		for (int i = 1; i <= n; i++) {
			ntotal = ntotal*i;
		}
		for (int j = 1; j <= m; j++) {
			mtotal = mtotal*j;
		}
		int d = n - m;
		for (int k = 1; k <= d; k++) {
			dtotal = dtotal*k;
		}

		int total1 = ntotal / (mtotal*dtotal) ;

		int m2 = m - 1;
		for (int h = 1; h <= m2; h++) {
			mtotal2 = mtotal2 * h;
		}
		int d2 = n - m2;
		for (int y = 1; y <= d2; y++) {
			dtotal2 = dtotal2 * y;
		}
		int total2 = ntotal / (mtotal2 * dtotal2);
		total = total1 + total2;
	}
	return total;
}",0
jdea126,1697784743,9,"int Choose (int n, int m)
{
    if (m > n)
        return 0;
    if (m == 0 || m == n)
        return 1;


    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
jdea126,1697784745,10,"int Choose (int n, int m)
{
    if (m > n)
        return 0;
    if (m == 0 || m == n)
        return 1;


    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
jdu853,1697796972,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

}",
jdu853,1697796976,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

}",1
jear460,1698099616,1,"unsigned long long Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jear460,1698099629,2,"unsigned long long Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",0
jear460,1698099639,3,"unsigned long long Choose(int n, int m) {
    // Base cases:
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case:
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jear460,1698099694,4,"int Choose(int n, int m) {
    if (m == 0 || m == n)
        return 1;
    else if (m > n)
        return 0;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jear460,1698099696,5,"int Choose(int n, int m) {
    if (m == 0 || m == n)
        return 1;
    else if (m > n)
        return 0;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
jfen705,1698055394,1,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    }
    else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",
jfen705,1698055396,2,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    }
    else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",1
jfet156,1697758597,1,"int Choose(int n, int m)
{
    if ((m == n) || (m == 0)) {
        return 1;
    } else {
        return ((Choose(n-1, m) + Choose(n-1, m-1)));
    }
}",1
jgeo610,1697848979,1,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return ((Choose(n-1, m)) + (Choose(n-1, m-1)));
	}
}",
jgeo610,1697848981,2,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return ((Choose(n-1, m)) + (Choose(n-1, m-1)));
	}
}",1
jgol495,1697418650,1,"// You should almost never be using recursive functions as you can nuke the stack
int Factorial(int n){
    if(n == 0 || n == 1 ){ return 1; }
    return Factorial(n * (n-1));
}

int Choose(int n, int m){
    // nCr = nPr / r! = n!/((n-r)! * r!)
    return Factorial(n) / (Factorial(n - m) * Factorial(m));
}",
jgol495,1697418677,2,"
// You should almost never be using recursive functions as you can nuke the stack
int Factorial(int n){
    if(n == 0 || n == 1 ){ return 1; }
    return n * Factorial(n-1);
}

int Choose(int n, int m){
    // nCr = nPr / r! = n!/((n-r)! * r!)
    return Factorial(n) / (Factorial(n - m) * Factorial(m));
}",
jgol495,1697418679,3,"
// You should almost never be using recursive functions as you can nuke the stack
int Factorial(int n){
    if(n == 0 || n == 1 ){ return 1; }
    return n * Factorial(n-1);
}

int Choose(int n, int m){
    // nCr = nPr / r! = n!/((n-r)! * r!)
    return Factorial(n) / (Factorial(n - m) * Factorial(m));
}",0
jgol495,1697418848,4,"
// You should almost never be using recursive functions as you can nuke the stack
double Factorial(double n){
    if(n <= 1 ){ return 1; }
    return n * Factorial(n-1);
}

int Choose(int n, int m){
    // nCr = nPr / r! = n!/((n-r)! * r!)
    return Factorial(n) / (Factorial(n - m) * Factorial(m));
}",
jgol495,1697418849,5,"
// You should almost never be using recursive functions as you can nuke the stack
double Factorial(double n){
    if(n <= 1 ){ return 1; }
    return n * Factorial(n-1);
}

int Choose(int n, int m){
    // nCr = nPr / r! = n!/((n-r)! * r!)
    return Factorial(n) / (Factorial(n - m) * Factorial(m));
}",1
jhor229,1698119801,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
jhor229,1698119803,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
jhwa027,1698143112,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}


",
jhwa027,1698143114,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}


",1
jjos057,1697956616,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jjos057,1697956618,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
jjun879,1697811597,1,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
jjun879,1697811599,2,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    }
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
jkah253,1697946724,1,"int Choose(int n, int m) {

    if (m==0 || m == n) {
        return 1;
    }

    // if 0 < m < n, then 
    return Choose(n-1, m) + Choose(n-1,m-1);

}",
jkah253,1697946726,2,"int Choose(int n, int m) {

    if (m==0 || m == n) {
        return 1;
    }

    // if 0 < m < n, then 
    return Choose(n-1, m) + Choose(n-1,m-1);

}",1
jkan172,1697428791,1,"int Choose(int n, int m)
{
    if ((n == m) || (m == 0)) {
        return 1;
    } else {
        return (Choose((n-1), m) + Choose((n-1), (m-1)));
    }
}",1
jkim828,1697459309,1,"int Choose(int n, int m)
{
    int x;
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        x = Choose((n - 1), m) + Choose((n - 1), (m - 1));

        return x;
    }
}",
jkim828,1697459312,2,"int Choose(int n, int m)
{
    int x;
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        x = Choose((n - 1), m) + Choose((n - 1), (m - 1));

        return x;
    }
}",1
jkim837,1697856666,1,"int Choose(int n, int m) 
{
    if (m == 0 || n == m) 
    {
        return 1;
    } else 
    {
        return Choose(n - 1, m) + Choose(n - 1, m-1);
    }
}",
jkim837,1697856667,2,"int Choose(int n, int m) 
{
    if (m == 0 || n == m) 
    {
        return 1;
    } else 
    {
        return Choose(n - 1, m) + Choose(n - 1, m-1);
    }
}",1
jkim933,1697516253,1,"int Choose(int n, int m)
{
    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        int ways = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return ways;
    }
}",
jkim933,1697516256,2,"int Choose(int n, int m)
{
    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        int ways = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return ways;
    }
}",1
jkim960,1697459991,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
jlah077,1697516271,1,"int Factorial(int num)
{
    int buf = num - 1;
    while (buf != 1)
    {
        num *= buf;
        buf--;
    }
    return num;
}

int Choose(int n, int m)
{
    return Factorial(n) / (Factorial(m) * Factorial(n - m));
}",
jlah077,1697516275,2,"int Factorial(int num)
{
    int buf = num - 1;
    while (buf != 1)
    {
        num *= buf;
        buf--;
    }
    return num;
}

int Choose(int n, int m)
{
    return Factorial(n) / (Factorial(m) * Factorial(n - m));
}",0
jlah077,1697517701,3,"int Choose(int n, int m)
{
    if (m == 0 || m == n)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jlah077,1697517704,4,"int Choose(int n, int m)
{
    if (m == 0 || m == n)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
jlal056,1697866534,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m)
{
	int result;

	if ((m==0)||(n==m)) {
		result = 1;

	} else {
		int x = n - 1;
		int y = m - 1;
		result = (Choose(x,m)) + (Choose(x,y));

	}

	return result;
}",
jlal056,1697866538,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m)
{
	int result;

	if ((m==0)||(n==m)) {
		result = 1;

	} else {
		int x = n - 1;
		int y = m - 1;
		result = (Choose(x,m)) + (Choose(x,y));

	}

	return result;
}",1
jlew699,1697623120,1,"#include <stdio.h>

int Choose(int n, int m)
{
    int nfac = 1, mfac = 1, nmfac = 1;
    for(int i = 1; i <= n; i++) 
    {
        nfac = nfac * i;
    }
    for(int j = 1; j <= m; j++)
    {
        mfac = mfac * j;
    }
    for(int k = 1; k <= n - m; k++)
    {
       nmfac = nmfac * k; 
    }
    
    int ncr = nfac / (nmfac * mfac);
return ncr;
}",
jlew699,1697623122,2,"#include <stdio.h>

int Choose(int n, int m)
{
    int nfac = 1, mfac = 1, nmfac = 1;
    for(int i = 1; i <= n; i++) 
    {
        nfac = nfac * i;
    }
    for(int j = 1; j <= m; j++)
    {
        mfac = mfac * j;
    }
    for(int k = 1; k <= n - m; k++)
    {
       nmfac = nmfac * k; 
    }
    
    int ncr = nfac / (nmfac * mfac);
return ncr;
}",0
jlew699,1697623528,3,"#include <stdio.h>
int Choose(int n, int m)
{
    long int nfac = 1, mfac = 1, nmfac = 1;
    for(int i = 1; i <= n; i++) 
    {
        nfac = nfac * i;
    }
    for(int j = 1; j <= m; j++)
    {
        mfac = mfac * j;
    }
    for(int k = 1; k <= n - m; k++)
    {
       nmfac = nmfac * k; 
    }
    
    int ncr = nfac / (nmfac * mfac);
return ncr;
}",
jlew699,1697623530,4,"#include <stdio.h>
int Choose(int n, int m)
{
    long int nfac = 1, mfac = 1, nmfac = 1;
    for(int i = 1; i <= n; i++) 
    {
        nfac = nfac * i;
    }
    for(int j = 1; j <= m; j++)
    {
        mfac = mfac * j;
    }
    for(int k = 1; k <= n - m; k++)
    {
       nmfac = nmfac * k; 
    }
    
    int ncr = nfac / (nmfac * mfac);
return ncr;
}",0
jlew699,1697623843,5,"#include <stdio.h>

int Choose(int n, int m)
{
    double nfac = 1, mfac = 1, nmfac = 1;
    for(int i = 1; i <= n; i++) 
    {
        nfac = nfac * i;
    }
    for(int j = 1; j <= m; j++)
    {
        mfac = mfac * j;
    }
    for(int k = 1; k <= n - m; k++)
    {
       nmfac = nmfac * k; 
    }
    
    double ncr = nfac / (nmfac * mfac);
return ncr;
}",
jlew699,1697623844,6,"#include <stdio.h>

int Choose(int n, int m)
{
    double nfac = 1, mfac = 1, nmfac = 1;
    for(int i = 1; i <= n; i++) 
    {
        nfac = nfac * i;
    }
    for(int j = 1; j <= m; j++)
    {
        mfac = mfac * j;
    }
    for(int k = 1; k <= n - m; k++)
    {
       nmfac = nmfac * k; 
    }
    
    double ncr = nfac / (nmfac * mfac);
return ncr;
}",1
jli876,1698112109,1,"int Choose(int n, int m) {
    if (n == m || m == 0) return 1;
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jli876,1698112112,2,"int Choose(int n, int m) {
    if (n == m || m == 0) return 1;
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
jli917,1697859981,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}",
jli917,1697859990,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}",1
jlia486,1697959949,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
jlia948,1698029331,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    if (0 < m && m < n) {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}

int main() {
printf(""%d"", Choose(6, 2));
}",0
jlia948,1698029334,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    if (0 < m && m < n) {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}
",0
jlia948,1698029362,3,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    if (0 < m && m < n) {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}
",
jlia948,1698029417,4,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    if (0 < m && m < n) {
        value = (Choose(n-1, m) + Choose(n-1, m-1));
    }
    return value;
}

",
jlia948,1698029424,5,"#include <stdio.h>

int Choose(int n, int m) {
    int value
    if (m == 0 || m == n) {
        return 1;
    }
    
    if (0 < m && m < n) {
        value = (Choose(n-1, m) + Choose(n-1, m-1));
    }
    return value;
}

",
jlia948,1698029431,6,"#include <stdio.h>

int Choose(int n, int m) {
    int value;
    if (m == 0 || m == n) {
        return 1;
    }
    
    if (0 < m && m < n) {
        value = (Choose(n-1, m) + Choose(n-1, m-1));
    }
    return value;
}

",
jlia948,1698029440,7,"#include <stdio.h>

int Choose(int n, int m) {
    int value;
    if (m == 0 || m == n) {
        return 1;
    }
    
    if (0 < m && m < n) {
        value = (Choose(n-1, m) + Choose(n-1, m-1));
    }
    return value;
}

",1
jliu295,1697851605,1,"int Choose(int n, int m){
    if(m == 0 || m == n){
        return 1;
    }else if(m > 0 && m < n){
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }else{
        return 0;
    }
}",1
jliu778,1698132063,1,"int Choose(int a,int b){

a=a-b;
int c=b;
printf(""%d\n"",a);

for (int i = 0; i < a-1; i++)
{
    c=c*b;

}
return(c-1);",
jliu778,1698132079,2,"int Choose(int a,int b){

a=a-b;
int c=b;
printf(""%d\n"",a);

for (int i = 0; i < a-1; i++)
{
    c=c*b;

}
return(c-1);
}",
jliu778,1698132104,3,"int Choose(int a,int b){
a=a-b;
int c=b;
for (int i = 0; i < a-1; i++)
{
    c=c*b;

}
return(c-1);
}",
jliu778,1698132108,4,"int Choose(int a,int b){
a=a-b;
int c=b;
for (int i = 0; i < a-1; i++)
{
    c=c*b;

}
return(c-1);
}",0
jliu778,1698135735,5,"int Choose(int a, int b){
    if(b==0 || b==a)
            return 1;
    return Choose(a-1,b-1) + Choose(a-1,b);
}",
jliu778,1698135759,6,"int Choose(int a, int b){
    if(b==0 || b==a)
            return 1;
    return Choose(a-1,b-1) + Choose(a-1,b);
}",1
jluo379,1697952018,1,"int Choose(int n, int m) {
    // set base case
    if (m == 0){
        return 1;
    } else if (n == m) {
        return 1;
    } else if ((m > 0) && (n > m)) {
        // set recursive case
        int result = n * m;
        int a = Choose(n-1, m);
        int b = Choose(n -1, m - 1);
        return a + b;
    }
}",
jluo379,1697962346,2,"nt Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  // Base case
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jluo379,1697962352,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  // Base case
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jluo379,1697962355,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  // Base case
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
jmak320,1698056972,1,"int Choose(int n, int m){
    if (n == m || m == 0) {
        return 1;
    } else {
        return Choose(n-1,m) + Choose(n-1,m-1);
    }
}",
jmak320,1698056975,2,"int Choose(int n, int m){
    if (n == m || m == 0) {
        return 1;
    } else {
        return Choose(n-1,m) + Choose(n-1,m-1);
    }
}",1
jmat941,1698051715,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
jmei608,1697864820,1,"int Choose(int n, int m) {
	int x;
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		x = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return x;
}",
jmei608,1697864822,2,"int Choose(int n, int m) {
	int x;
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		x = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return x;
}",1
jmil737,1697710406,1,"
#include <stdio.h>

int Choose(int n, int m){
int x;  

   if(n == m || m == 0){
       return 1;
   } 
   else{
  
       x = Choose(n - 1, m) + Choose(n - 1, m - 1);
       return x;
   } 

}",
jmil737,1697710408,2,"
#include <stdio.h>

int Choose(int n, int m){
int x;  

   if(n == m || m == 0){
       return 1;
   } 
   else{
  
       x = Choose(n - 1, m) + Choose(n - 1, m - 1);
       return x;
   } 

}",1
jmul290,1697506451,1,"int Choose(int n, int m){
    int x;
    if(m == 0){
        return 1;
    }
    else if(m == n){
        return 1;
    }
    
    if(0 < m && n > m){
        x = Choose(n-1, m) + Choose(n-1, m-1);
    }
    return x;
}",1
jpar523,1697693325,1,"#include <stdio.h>

int Factorial(int n) 
{
    if (n == 0) {
        return 1;
    } else {
        return n * Factorial(n - 1);
    }
    
}

int Choose(int n, int m) 
{
    return Factorial(n) / (Factorial(m) * Factorial(n - m));
}",
jpar523,1697693333,2,"#include <stdio.h>

int Factorial(int n) 
{
    if (n == 0) {
        return 1;
    } else {
        return n * Factorial(n - 1);
    }
    
}

int Choose(int n, int m) 
{
    return Factorial(n) / (Factorial(m) * Factorial(n - m));
}",0
jpar523,1697770207,3,"#include <stdio.h>

int choose(int n, int m) 
{
    if (m > n - m) {
        m = n - m; 
    }

    int value = 1;

    for (int i = 1; i <= m; i++) {
        value = value * (n - i + 1) / i;
    }

    return value;
}",
jpar523,1697770218,4,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m > n - m) {
        m = n - m; 
    }

    int value = 1;

    for (int i = 1; i <= m; i++) {
        value = value * (n - i + 1) / i;
    }

    return value;
}",
jpar523,1697770234,5,"#include <stdio.h>

int Choose(int n, int m) 
{
    int value = 1;
    
    if (m > n - m) {
        m = n - m; 
    }

    

    for (int i = 1; i <= m; i++) {
        value = value * (n - i + 1) / i;
    }

    return value;
}",
jpar523,1697770241,6,"#include <stdio.h>

int Choose(int n, int m) 
{
    int value = 1;
    
    if (m > n - m) {
        m = n - m; 
    }

    for (int i = 1; i <= m; i++) {
        value = value * (n - i + 1) / i;
    }

    return value;
}",1
jpar611,1697726280,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jpar611,1697726281,2,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
jpat915,1697493468,1,"#include <stdio.h>

int Choose(int n, int m) {
    int result;
    
    if (m == 0 || m == n) {
        return 1;
   }    else {
            result = Choose(n - 1, m) + Choose(n -1, m - 1);
   }
   return result;
}",
jpat915,1697493472,2,"#include <stdio.h>

int Choose(int n, int m) {
    int result;
    
    if (m == 0 || m == n) {
        return 1;
   }    else {
            result = Choose(n - 1, m) + Choose(n -1, m - 1);
   }
   return result;
}",1
jpau410,1697617286,1,"int Choose(int n, int m)
{
    int count = 0;
    if (m == 0 || n == m) {
        return 1;
    } else if (m > 0 && n > m) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jpau410,1697617296,2,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    } else if (m > 0 && n > m) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
jpau410,1697617312,3,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    } else if (m > 0 && n > m) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else {
        return 0;
    }
}",
jpau410,1697617315,4,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    } else if (m > 0 && n > m) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else {
        return 0;
    }
}",1
jpaz106,1698110090,1,"int Choose(int n, int m) 
{
    int result;
    
    // Assuming n will always be greater than 0:
    if (m == 0 || m == n) {
        result = 1; // Only one way to choose
    } else {
        
        // Fancy recursive way of factorial
        result = Choose(n - 1, m) + Choose(n - 1, m - 1);
        
    }
    
    return result;
}",
jpaz106,1698110094,2,"int Choose(int n, int m) 
{
    int result;
    
    // Assuming n will always be greater than 0:
    if (m == 0 || m == n) {
        result = 1; // Only one way to choose
    } else {
        
        // Fancy recursive way of factorial
        result = Choose(n - 1, m) + Choose(n - 1, m - 1);
        
    }
    
    return result;
}",1
jpud993,1698046749,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jpud993,1698046752,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
jros811,1697700336,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        int final;
        final = Choose(n-1, m) + Choose(n-1, m-1);
        return final;
    }
}",
jros811,1697700338,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        int final;
        final = Choose(n-1, m) + Choose(n-1, m-1);
        return final;
    }
}",1
jsan813,1698101077,1,"int Choose(int n, int m)
{
	int result;

	if (m == 0 || m == n) {
		result = 1;
	}
	else if (0 < m && m < n) {
		int a = Choose((n - 1), m);
		int b = Choose((n - 1), (m - 1));

		result = a + b;
	}
}",
jsan813,1698101098,2,"int Choose(int n, int m)
{
	int result;

	if (m == 0 || m == n) {
		result = 1;
	}
	else if (0 < m && m < n) {
		int a = Choose((n - 1), m);
		int b = Choose((n - 1), (m - 1));

		result = a + b;
	}
	
	return result;
}",
jsan813,1698101100,3,"int Choose(int n, int m)
{
	int result;

	if (m == 0 || m == n) {
		result = 1;
	}
	else if (0 < m && m < n) {
		int a = Choose((n - 1), m);
		int b = Choose((n - 1), (m - 1));

		result = a + b;
	}
	
	return result;
}",1
jsch842,1698103370,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    // Base cases
    if (m == 0 || m == n) 
    {
        return 1;
    }
    
    // Recursive cases
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jsch842,1698103372,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    // Base cases
    if (m == 0 || m == n) 
    {
        return 1;
    }
    
    // Recursive cases
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
jshe464,1698061291,1,"int Choose(int a, int b)
{
	int c, d, e, f;
	d = 1;
	c = 1;
	e = 1;
	for (int i = a; i > 0; i--)
	{
		c = c * i;
		
	}
	
	for (int i = b; i > 0; i--)
	{
		d = d * i;
	}
	
	for (int i = a - b; i > 0; i--)
	{
		e = e * i;
	}
	
	f = c / d;
	
	f = f / e;
	
	return f;
	
}",
jshe464,1698061293,2,"int Choose(int a, int b)
{
	int c, d, e, f;
	d = 1;
	c = 1;
	e = 1;
	for (int i = a; i > 0; i--)
	{
		c = c * i;
		
	}
	
	for (int i = b; i > 0; i--)
	{
		d = d * i;
	}
	
	for (int i = a - b; i > 0; i--)
	{
		e = e * i;
	}
	
	f = c / d;
	
	f = f / e;
	
	return f;
	
}",0
jshe464,1698061748,3,"int Choose(int n, int m) {
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m - 1) + Choose(n - 1, m);
	}
}",
jshe464,1698105751,4,"int Choose(int a, int b) {
	if (b == 0 || b == a) {
		return 1;
	}
	else {
		return Choose(a - 1, b - 1) + Choose(a - 1, b);
	}
}",
jshe464,1698107631,5,"int Choose(int n, int m)
{
	int a = 1;
	int b;
	int c = m;
	if (m == 0 || m == n) {
		return 1;
	}
	else {

		for (int i = 0; i < m; i++)
		{
			b = (n - i);
			a = a * b;
		}
		for(int j = m; j >1; j--)
		{
			a = a / j;

	    } 
		return a;
	}
	return 0;
}",
jshe464,1698107647,6,"int Choose(int n, int m)
{
	int a = 1;
	int b;
	
	if (m == 0 || m == n) {
		return 1;
	}
	else {

		for (int i = 0; i < m; i++)
		{
			b = (n - i);
			a = a * b;
		}
		for(int j = m; j >1; j--)
		{
			a = a / j;

	    } 
		return a;
	}
	return 0;
}",
jshe464,1698107650,7,"int Choose(int n, int m)
{
	int a = 1;
	int b;
	
	if (m == 0 || m == n) {
		return 1;
	}
	else {

		for (int i = 0; i < m; i++)
		{
			b = (n - i);
			a = a * b;
		}
		for(int j = m; j >1; j--)
		{
			a = a / j;

	    } 
		return a;
	}
	return 0;
}",0
jshe464,1698108173,8,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}

	if (m > n - m) {
		m = n - m; 
	}

	int a = 1;
	for (int i = 1; i <= m; i++) {
		a *= (n - m + i);
		a /= i;
	}

	return a;
}",
jshe464,1698108176,9,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}

	if (m > n - m) {
		m = n - m; 
	}

	int a = 1;
	for (int i = 1; i <= m; i++) {
		a *= (n - m + i);
		a /= i;
	}

	return a;
}",1
jshi444,1697685431,1,"int Choose(int n, int m) {
	if (n == m) {
		return 1;
	}
	else if (m == 0) {
		return 1;
	}
	else {
		int first;
		first = Choose(n - 1, m);
		int second;
		second = Choose(n - 1, m - 1);
		return first + second;
	}
}",1
jshr431,1698132380,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) {

	if (n == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
jshr431,1698144253,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) {

	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
jshr431,1698144264,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) {

	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
jsim418,1697438778,1,"#include <stdio.h>
//formula: n!/(m!(n-m)!)

int Factorial(int a) {
    if (a==1) {
        return 1;
    }
    return a*Factorial(a-1);
}

int Choose(int n, int m) {
    return Factorial(n)/(Factorial(m)*Factorial(n-m));
}
",
jsim418,1697438781,2,"#include <stdio.h>
//formula: n!/(m!(n-m)!)

int Factorial(int a) {
    if (a==1) {
        return 1;
    }
    return a*Factorial(a-1);
}

int Choose(int n, int m) {
    return Factorial(n)/(Factorial(m)*Factorial(n-m));
}
",0
jsim418,1697443843,3,"#include <stdio.h>
//formula: n!/(m!(n-m)!)

//using pascals triangle:
// 1, 1 1, 1 2 1, and so on.
int Choose(int n, int m) {
    //bases:
    if (m==n) {
        return 1;
    }
    if (m == 1) {
        return n;
    }
    
    return Choose(n-1,m) + Choose(n-1,m-1);
}
",
jsim418,1697443845,4,"#include <stdio.h>
//formula: n!/(m!(n-m)!)

//using pascals triangle:
// 1, 1 1, 1 2 1, and so on.
int Choose(int n, int m) {
    //bases:
    if (m==n) {
        return 1;
    }
    if (m == 1) {
        return n;
    }
    
    return Choose(n-1,m) + Choose(n-1,m-1);
}
",1
jsim643,1697444181,1,"int Choose(int n, int m) {
    if (m == 0 || m == n ) {
        return 1;
    } else  {
        return Choose(n - 1, m - 1) + Choose(n -1, m);
    }
}",
jsim643,1697444186,2,"int Choose(int n, int m) {
    if (m == 0 || m == n ) {
        return 1;
    } else  {
        return Choose(n - 1, m - 1) + Choose(n -1, m);
    }
}",1
jsta466,1697947081,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (0 < m && m < n) {
        int first = Choose(n - 1, m - 1);
        int second = Choose(n - 1, m);
        return first + second;
    }
}",
jsta466,1697947103,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (0 < m && m < n) {
        int first = Choose(n - 1, m - 1);
        int second = Choose(n - 1, m);
        return first + second;
    } else {
        return 0;
    }
}",
jsta466,1697947107,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (0 < m && m < n) {
        int first = Choose(n - 1, m - 1);
        int second = Choose(n - 1, m);
        return first + second;
    } else {
        return 0;
    }
}",1
jsun284,1697698114,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n)
        return 1;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
jvil318,1698093461,1,"int Choose(int intg1, int intg2, int answer) {
    if (intg1 == 0 || intg1 == intg2) {
        return result;  
    } else {
        int multiplar = intg1 / intg2;
        return Choose(intg1 - 1, intg2 - 1, answer * multiplar );
    }
}
",
jvil318,1698093473,2,"int Choose(int intg1, int intg2, int answer) {
    if (intg1 == 0 || intg1 == intg2) {
        return answer;  
    } else {
        int multiplar = intg1 / intg2;
        return Choose(intg1 - 1, intg2 - 1, answer * multiplar );
    }
}
",
jvil318,1698093573,3,"int Choose(int intg1, int intg2, int answer) {
    int multiplar = intg1/intg2;
    if (intg1 == 0 || intg1 == intg2) {
        return answer;  
    } else {
        return Choose(intg1 - 1, intg2 - 1, answer * multiplar);
    }
}
",
jvil318,1698093587,4,"int Choose(int intg1, int intg2, int answer) {
    if (intg1 == 0 || intg1 == intg2) {
        return answer;  
    } else {
        return Choose(intg1 - 1, intg2 - 1, answer * intg1 / intg2);
    }
}
",
jvil318,1698093641,5,"int Choose(int intg1, int intg2, int answer) {
    if (intg1 == 0 || intg1 == intg2) {
        return answer;
    } else {
        return Choose(intg1 - 1, intg2 - 1, answer * intg1 / intg2);
    }
}",
jwed606,1697587875,1,"


int Factorial(int n)
{
    int factorial = n;
    for (; n-- > 1; )
    {
        factorial *= n;
    }
    return factorial;
}

int Choose(int n, int m)
{
    return (Factorial(n)) / (Factorial(m)*(Factorial(n-m)));
}
",
jwed606,1697587879,2,"


int Factorial(int n)
{
    int factorial = n;
    for (; n-- > 1; )
    {
        factorial *= n;
    }
    return factorial;
}

int Choose(int n, int m)
{
    return (Factorial(n)) / (Factorial(m)*(Factorial(n-m)));
}
",0
jwed606,1697590007,3,"double Factorial(int n)
{
    double factorial = n;
    for (; n-- > 1; )
    {
        factorial *= n;
    }
    return (double)factorial;
}

int Choose(int n, int m)
{
    double fac_n = Factorial(n);
    double fac_m = Factorial(m);
    double fac_n_m = Factorial(n-m);
    double choose = (fac_n / (fac_m*fac_n_m));
    return (int)choose;
}
",
jwed606,1697590011,4,"double Factorial(int n)
{
    double factorial = n;
    for (; n-- > 1; )
    {
        factorial *= n;
    }
    return (double)factorial;
}

int Choose(int n, int m)
{
    double fac_n = Factorial(n);
    double fac_m = Factorial(m);
    double fac_n_m = Factorial(n-m);
    double choose = (fac_n / (fac_m*fac_n_m));
    return (int)choose;
}
",0
jwed606,1697590404,5,"double Factorial(int n)
{
    double factorial = n;
    for (; n-- > 1; )
    {
        factorial *= n;
    }
    return factorial;
}

int Choose(int n, int m)
{
    double fac_n = Factorial(n);
    double fac_m = Factorial(m);
    double fac_n_m = Factorial(n-m);
    double choose = (fac_n / (fac_m*fac_n_m));
    return (int)round(choose);
}
",
jwed606,1697590409,6,"double Factorial(int n)
{
    double factorial = n;
    for (; n-- > 1; )
    {
        factorial *= n;
    }
    return factorial;
}

int Choose(int n, int m)
{
    double fac_n = Factorial(n);
    double fac_m = Factorial(m);
    double fac_n_m = Factorial(n-m);
    double choose = (fac_n / (fac_m*fac_n_m));
    return (int)round(choose);
}
",1
jwil813,1697524380,1,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
	return 1;
	}
	else if (0 < m && m < n)
	{
		return Choose(n - 1, m) + Choose(n - 1, m - 1);

		}
	return 0;
}",1
jwon248,1697442023,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (0 == m || m == n)
    {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
jwon248,1697442025,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (0 == m || m == n)
    {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
jwon253,1697505662,1,"int Choose(int n, int m) {
    // Base cases
    if (m == 0) {
        return 1; // pick nothing.
    }
    if (m == n) {
        return 1; // pick them all
    }

    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
jwon253,1697505716,2,"int Choose(int n, int m) 
{
    // Base cases
    if (m == 0) {
        return 1; // pick nothing.
    }
    if (m == n) {
        return 1; // pick them all
    }

    // Recursive case
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
jwon253,1697505736,3,"int Choose(int n, int m) 
{
    // Base cases
    if (m == 0) {
        return 1; // pick nothing.
    }
    if (m == n) {
        return 1; // pick them all
    }

    // Recursive case
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
jyan420,1697420366,1,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    }
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
jyan420,1697420400,2,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    }
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
jyua529,1697685822,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return(1);       
    } else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
        
    }
}",
jyua529,1697685824,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return(1);       
    } else {
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
        
    }
}",1
jzho786,1698110300,1,"int Choose(int n, int r) {
  if (r > n - r) {
    r = n - r; 

  int result = 1;

  for (int i = 0; i < r; i++) {
    result *= n - i;
  }

  return result/2;
}
",
jzho786,1698110319,2,"int Choose(int n, int m) {
    if (m > n - m) {
        m = n - m;  // Optimize for smaller m
    }

    int result = 1;

    for (int i = 0; i < m; i++) {
        result *= (n - i);
        result /= (i + 1);
    }

    return result;
}",
jzho786,1698110348,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base cases: n choose 0 and n choose n are both 1
    }

    int numerator = 1;
    int denominator = 1;

    if (m > n - m) {
        m = n - m;
    }

    for (int i = 1; i <= m; i++) {
        numerator *= n - m + i;
        denominator *= i;
    }

    return numerator / denominator;
}
",
jzho786,1698110376,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base cases: n choose 0 and n choose n are both 1
    }

    int nu = 1;
    int de = 1;

    if (m > n - m) {
        m = n - m;
    }

    for (int i = 1; i <= m; i++) {
        nu *= n - m + i;
        de *= i;
    }

    return nu/de;
}
",
jzho786,1698110378,5,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base cases: n choose 0 and n choose n are both 1
    }

    int nu = 1;
    int de = 1;

    if (m > n - m) {
        m = n - m;
    }

    for (int i = 1; i <= m; i++) {
        nu *= n - m + i;
        de *= i;
    }

    return nu/de;
}
",0
jzho786,1698110496,6,"int Choose(int n, int m) {
    int result = 1;
    int min = (m < n - m) ? m : n - m;

    for (int i = 0; i < min; i++) {
        result *= (n - i);
        result /= (i + 1);
    }

    return result;
}",
jzho786,1698110498,7,"int Choose(int n, int m) {
    int result = 1;
    int min = (m < n - m) ? m : n - m;

    for (int i = 0; i < min; i++) {
        result *= (n - i);
        result /= (i + 1);
    }

    return result;
}",1
kabb319,1698023085,1,"int Choose(int n, int m) 
{

    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

}",
kabb319,1698023087,2,"int Choose(int n, int m) 
{

    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

}",1
kahk161,1697507510,1,"int Choose(int n, int m)
{
	if ((n == m) || (m == 0)) {
		return 1;
	}
	else {
		n -= 1;
		int tempm = m - 1;

		return (Choose(n, m) + Choose(n, tempm));
	}
}",
kahk161,1697507513,2,"int Choose(int n, int m)
{
	if ((n == m) || (m == 0)) {
		return 1;
	}
	else {
		n -= 1;
		int tempm = m - 1;

		return (Choose(n, m) + Choose(n, tempm));
	}
}",1
kbar402,1697809842,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
kbar402,1697809844,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
kbha969,1697583408,1,"#include <stdio.h>

int Choose(int n, int m) {
    
    int result = 0;
    if ((m == 0) || (n == m)) {
        return 1;
    }
    else {
        return (Choose(n-1,m) + Choose(n-1,m-1)) ;
    }
}
",
kbha969,1697583427,2,"#include <stdio.h>

int Choose(int n, int m) {
    
    if ((m == 0) || (n == m)) {
        return 1;
    }
    else {
        return (Choose(n-1,m) + Choose(n-1,m-1)) ;
    }
}
",
kbha969,1697583472,3,"#include <stdio.h>

int Choose(int n, int m) {
    
    if ((m == 0) || (n == m)) {
        return 1;
    }
    else {
        return (Choose(n-1,m) + Choose(n-1,m-1)) ;
    }
}
",1
kcao565,1697956464,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    } else if (m > n) {
        return 0;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
kcao657,1697792856,1,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == n || m == 0){

		return 1;
	}

	else {

		return((Choose(n - 1, m - 1) + Choose(n - 1, m)));
		
		
	}
}",
kcao657,1697792858,2,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == n || m == 0){

		return 1;
	}

	else {

		return((Choose(n - 1, m - 1) + Choose(n - 1, m)));
		
		
	}
}",1
kfep063,1698038607,1,"int Choose(int n, int m)
{
    if(m == 0 || n == m) { // these will only equal to one.
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m); //these will add up to the correct answer.
    
}",
kfep063,1698038611,2,"int Choose(int n, int m)
{
    if(m == 0 || n == m) { // these will only equal to one.
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m); //these will add up to the correct answer.
    
}",1
kfer833,1698037873,1,"#include <stdio.h>

int Factorial(int num) {
    if (num == 0) {
        return 1;
    }
    return num * Factorial(num - 1);
}

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
kgra470,1697490414,1,"int Choose(int n, int m){
    if(n==0){
        return 0;
    }
    else{
        return ((n+1)-m) + Choose(n-1,m);
    }
}",
kgra470,1697490416,2,"int Choose(int n, int m){
    if(n==0){
        return 0;
    }
    else{
        return ((n+1)-m) + Choose(n-1,m);
    }
}",0
kgra470,1698130359,3,"int Choose(int n, int m){
    double x=1;
    if(n==0){
        return 0;
    }
    for(double i=1;i<=m;i++){
        x=x*(n/i);
        n--;
    }
    return x;
}",
kgra470,1698130361,4,"int Choose(int n, int m){
    double x=1;
    if(n==0){
        return 0;
    }
    for(double i=1;i<=m;i++){
        x=x*(n/i);
        n--;
    }
    return x;
}",1
khew624,1697773056,1,"int Choose(int n, int m)
{
    if (m > n)
        return 0; 

    int result = 1;
    for (int i = 1; i <= m; i++)
    {
        result *= n - i + 1;
        result /= i;
    }
    return result;
}",
khew624,1697773064,2,"int Choose(int n, int m)
{
    if (m > n)
        return 0; 

    int result = 1;
    for (int i = 1; i <= m; i++)
    {
        result *= n - i + 1;
        result /= i;
    }
    return result;
}",1
kjoe685,1697894925,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if(n == m){
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kjoe685,1697894926,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if(n == m){
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
kjun638,1697675727,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    }

    if (m < 0 || m > n) {
        return 0;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
kjun638,1697675730,2,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1;
    }

    if (m < 0 || m > n) {
        return 0;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
kkha484,1698123723,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

",
kkha484,1698123726,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

",1
kkim985,1697458726,1,"int Choose(int n, int m)
{
	int x, m1, m2;

	if (m == 1 || n == m) {
		x = 1;
	}
	else {
		n = n - 1;
		m1 = m;
		m2 = m - 1;
		Choose(n, m1) + Choose(n, m2);
	}
}",
kkim985,1697458755,2,"int Choose(int n, int m)
{
	int x, m1, m2;

	if (m == 1 || n == m) {
		x = 1;
	}
	else {
		n = n - 1;
		m1 = m;
		m2 = m - 1;
		Choose(n, m1) + Choose(n, m2);
	}
	return x;
}",
kkim985,1697458908,3,"int Choose(int n, int m)
{
	if (m == 1 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697458942,4,"int Choose(int n, int m)
{
	if (m == 1 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m - 1) + Choose(n - 1, m);
	}
}",
kkim985,1697459009,5,"int Choose(int n, int m)
{
	if (m == 1) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697459054,6,"int Choose(int n, int m)
{
	if (m == 1 || n == m) {
		return 1;
	}
	else if (m > 0 && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697459069,7,"int Choose(int n, int m)
{
	if (m == 1 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697459095,8,"int Choose(int n, int m)
{
	if (m == 1 || n == m) {
		return 1;
	}
	else {
	    Choose(n, m);
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697459283,9,"int Choose(int n, int m)
{
	if (m == 1 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697459297,10,"int Choose(int n, int m)
{
	if (n == 1 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697459310,11,"int Choose(int n, int m)
{
	if (n == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697459317,12,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
kkim985,1697459328,13,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
klam376,1698055426,1,"int Choose(int n, int m)
{
    int x;
    if (m == 0 || m == n) {
        x = 1;
    } else {
        x = Choose(n-1,m) + Choose(n-1,m-1);
    }
    return x;
}",
klam376,1698055428,2,"int Choose(int n, int m)
{
    int x;
    if (m == 0 || m == n) {
        x = 1;
    } else {
        x = Choose(n-1,m) + Choose(n-1,m-1);
    }
    return x;
}",1
kluc619,1698131884,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
kluc619,1698131886,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
kmag441,1698061113,1,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
kmag441,1698061269,2,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        if (k == 0 || k == n) {
        return 1;
    }
    if (k > n) {
        return 0;
    }
    int res = 1;
    if (k > n - k) {
        k = n - k;
    }
    for (int i = 0; i < k; i++) {
        res *= (n - i);
        res /= (i + 1);
    }
    return res;
}

    }
}",
kmag441,1698061298,3,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    int res = 1;
    if (m > n - m) {
        m = n - m;
    }
    for (int i = 0; i < k; i++) {
        res *= (n - i);
        res /= (i + 1);
    }
    return res;
}

    }
}",
kmag441,1698061305,4,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    int res = 1;
    if (m > n - m) {
        m = n - m;
    }
    for (int i = 0; i < k; i++) {
        res *= (n - i);
        res /= (i + 1);
    }
    return res;
}

    }
",
kmag441,1698061311,5,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    int res = 1;
    if (m > n - m) {
        m = n - m;
    }
    for (int i = 0; i < m; i++) {
        res *= (n - i);
        res /= (i + 1);
    }
    return res;
}

    }
",
kmag441,1698061424,6,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    int res = 1;
    if (m > n - m) {
        m = n - m;
    }
    for (int i = 0; i < m; i++) {
        res = res * (n - i);
        res = res / (i + 1);
    }
    return res;
}

    }
",
kmag441,1698061425,7,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        if (m == 0 || m == n) {
        return 1;
    }
    if (m > n) {
        return 0;
    }
    int res = 1;
    if (m > n - m) {
        m = n - m;
    }
    for (int i = 0; i < m; i++) {
        res = res * (n - i);
        res = res / (i + 1);
    }
    return res;
}

    }
",1
kmal768,1697597572,1,"int Choose(int n, int m) {
	int result = 0;

	// Base Cases
	if (m ==  0) {
		result += 1;
	}
	else if (n == m) {
		result += 1;
	}
	else {
		result += Choose(n-1, m);
		result += Choose(n - 1, m - 1);
	}
	
	return result;
}",1
kmck133,1697791638,1,"int Choose(int n, int m)
{
	if (n == m) {
		return 1;
	}
	else if (m == 0) {
		return 1;
	}
	else {
		return (Choose(n-1, m) + Choose(n-1, m-1));
	}
}",
kmck133,1697791643,2,"int Choose(int n, int m)
{
	if (n == m) {
		return 1;
	}
	else if (m == 0) {
		return 1;
	}
	else {
		return (Choose(n-1, m) + Choose(n-1, m-1));
	}
}",1
kmcv530,1697959092,1,"#include <stdio.h>


int Choose(int n, int m) {
 int num = 0;
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
kmcv530,1697959106,2,"#include <stdio.h>


int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
kmcv530,1697959109,3,"#include <stdio.h>


int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
kmcv530,1697961168,4,"#include <stdio.h>


int Choose(int n, int m) { if (m == 0 || m == n) { return 1;} return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
kng361,1698123054,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } 
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
kpat303,1697417866,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
kpat303,1697417867,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
kpau893,1697883065,1,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
kpau893,1697883071,2,"//#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
kpau893,1697883077,3,"
int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
kpau893,1697883079,4,"
int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
kpay633,1697510472,1,"#include <stdio.h>

int Choose(int n, int m);


int Choose(int n, int m)
{
	if ((m == 0) || m == n) {
		return 1;
	}
	else {
		int temp1 = n - 1;
		int temp2 = m - 1;
		int x = Choose(temp1, m) + Choose(temp1, temp2);
		return x;
	}
}",
kpay633,1697510475,2,"#include <stdio.h>

int Choose(int n, int m);


int Choose(int n, int m)
{
	if ((m == 0) || m == n) {
		return 1;
	}
	else {
		int temp1 = n - 1;
		int temp2 = m - 1;
		int x = Choose(temp1, m) + Choose(temp1, temp2);
		return x;
	}
}",1
kpir468,1698098039,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
kpir468,1698098041,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
kpla566,1697600549,1,"int Choose(int n, int m) {
  if (m == 0) {
    return 1;
  }
  if (m == n) {
    return 1;
  }

  return Choose(n - 1, m) + Choose(n - 1, m - 1);
}

",1
kqua446,1697893183,1,"#include <stdio.h>

int Choose(int n, int m)
{    
    if (n == m || !m) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m -1);
    }
}",1
kraw552,1697417165,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || n == m) 
    {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
kraw552,1697417166,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || n == m) 
    {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
krec980,1697509023,1,"int Choose(int n, int m) {

	if (m == 0 || n == m) {
		return 1;
	}
	else if (0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}

	return 0;
}",
krec980,1697509029,2,"int Choose(int n, int m) {

	if (m == 0 || n == m) {
		return 1;
	}
	else if (0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}

	return 0;
}",1
ksai757,1698037029,1,"int factorial(int n) {
    if (n == 0)
        return 1;
    else
        return n * factorial(n - 1);
}",
ksai757,1698037052,2,"int factorial(int n) {
    if (n == 0)
        return 1;
    else
        return n * factorial(n - 1);
}

int Choose(int n, int m) {
    if (m == 0 || n == m)
        return 1;
    else
        return factorial(n) / (factorial(m) * factorial(n - m));
}",
ksai757,1698037057,3,"int factorial(int n) {
    if (n == 0)
        return 1;
    else
        return n * factorial(n - 1);
}

int Choose(int n, int m) {
    if (m == 0 || n == m)
        return 1;
    else
        return factorial(n) / (factorial(m) * factorial(n - m));
}",0
ksai757,1698037757,4,"int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    else
        return n * factorial(n - 1);
}

int Choose(int n, int m) {
    if (m == 0 || n == m)
        return 1;
    else
        return factorial(n) / (factorial(m) * factorial(n - m));
}",
ksai757,1698037759,5,"int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    else
        return n * factorial(n - 1);
}

int Choose(int n, int m) {
    if (m == 0 || n == m)
        return 1;
    else
        return factorial(n) / (factorial(m) * factorial(n - m));
}",0
ksai757,1698037767,6,"unsigned long long factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    else
        return n * factorial(n - 1);
}

unsigned long long Choose(int n, int m) {
    if (m == 0 || n == m)
        return 1;
    else
        return factorial(n) / (factorial(m) * factorial(n - m));
}",
ksai757,1698038311,7,"int Choose(int n, int m) {
    if (m == 0 || n == m)
        return 1;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
ksai757,1698038313,8,"int Choose(int n, int m) {
    if (m == 0 || n == m)
        return 1;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
ksik996,1697449046,1,"int Choose(int n, int m)
{
  
    if(m == 0){
        return 1;
    }
    else if(n == m){
        return 1;
    }   
    else if(m > 0 && n > m){
        return ((Choose(n -1, m)) + (Choose(n -1, m -1)));
    }
    else{
        return 0;
    }
}",
ksik996,1697449048,2,"int Choose(int n, int m)
{
  
    if(m == 0){
        return 1;
    }
    else if(n == m){
        return 1;
    }   
    else if(m > 0 && n > m){
        return ((Choose(n -1, m)) + (Choose(n -1, m -1)));
    }
    else{
        return 0;
    }
}",1
kwan244,1697957882,1,"int Choose(int n, int m)
{
	int nCm = 1;
	//Base Case
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	//Recursive Case
	else if (m > 0 && n > m) {
		nCm = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}

	return nCm;
}
",
kwan244,1697957885,2,"int Choose(int n, int m)
{
	int nCm = 1;
	//Base Case
	if (m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	//Recursive Case
	else if (m > 0 && n > m) {
		nCm = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}

	return nCm;
}
",1
kwan797,1697495570,1,"int factorial(int n)
{
	if (n == 0) {
		return 1;
	}
	else {
		return n * factorial(n - 1);
	}
}

int Choose(int n, int m)
{
	if (n < m) {
		return 0;
	}
	else {
		return factorial(n) / (factorial(n - m) * factorial(m));
	}",
kwan797,1697495586,2,"int factorial(int n)
{
	if (n == 0) {
		return 1;
	}
	else {
		return n * factorial(n - 1);
	}
}

int Choose(int n, int m)
{
	if (n < m) {
		return 0;
	}
	else {
		return factorial(n) / (factorial(n - m) * factorial(m));
	}
}",
kwan797,1697495591,3,"int factorial(int n)
{
	if (n == 0) {
		return 1;
	}
	else {
		return n * factorial(n - 1);
	}
}

int Choose(int n, int m)
{
	if (n < m) {
		return 0;
	}
	else {
		return factorial(n) / (factorial(n - m) * factorial(m));
	}
}",0
kwan797,1697500477,4,"int Choose(int n, int m) {
    if (n < m)
        return 0;
    if (m == 0 || m == n)
        return 1;
    
    int Nproduct = 1;
    int Mproduct = 1;
    
    for (int i = 0; i < m; i++) {
        Nproduct *= (n - i);
        Mproduct *= (i + 1);
    }
    
    return Nproduct / Mproduct;
}",
kwan797,1697500482,5,"int Choose(int n, int m) {
    if (n < m)
        return 0;
    if (m == 0 || m == n)
        return 1;
    
    int Nproduct = 1;
    int Mproduct = 1;
    
    for (int i = 0; i < m; i++) {
        Nproduct *= (n - i);
        Mproduct *= (i + 1);
    }
    
    return Nproduct / Mproduct;
}",0
kwan797,1697500793,6,"int Choose(int n, int m) {
    
    if (m > n){
        return 0;
    }
    if (m == 0 || m == n) {
        return 1; 
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
kwan797,1697500795,7,"int Choose(int n, int m) {
    
    if (m > n){
        return 0;
    }
    if (m == 0 || m == n) {
        return 1; 
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
kyoo839,1697885640,1,"int Choose(int n, int m)
{
    if ((m == 0) || (n == m)) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
kyoo839,1697885642,2,"int Choose(int n, int m)
{
    if ((m == 0) || (n == m)) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
kzhu796,1697844563,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		int choose = Choose((n - 1), m) + Choose((n - 1), (m - 1));
		return choose;
	}
}",
kzhu796,1697844566,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		int choose = Choose((n - 1), m) + Choose((n - 1), (m - 1));
		return choose;
	}
}",1
laba812,1697944431,1,"int Choose(int first, int second){

    if (second==0||first==second){
        return 1;
    }

   int first_last = first - 1;
   int second_last  = second -1;

    int first_choose = Choose(first_last, second_last);
    int second_choose = Choose(first_last, second);

    return first_choose+second_choose;
}
",
laba812,1697944494,2,"int Choose(int first, int second){

    if (second==0||first==second){
        return 1;
    }

    int first_last = first - 1;
    int second_last  = second -1;

    int first_choose = Choose(first_last, second_last);
    int second_choose = Choose(first_last, second);

    return first_choose+second_choose;
}
",1
lazz729,1697801118,1,"int Choose(int n, int m)
{

    if (m == 0 || m == n) {
        return 1;
    } else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }

}",
lazz729,1697801122,2,"int Choose(int n, int m)
{

    if (m == 0 || m == n) {
        return 1;
    } else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }

}",1
lbla772,1697857429,1,"int Choose(int num, int m2)
 {
    if(m2 == 0){
        return 1;
    }
    if(m2 == num){
        return 1;
    }

    if( m2 > 0 && m2 < num){
        return Choose(num - 1, m2) + Choose(num - 1, m2 - 1);
    }
    return 0;
 }",1
lbou433,1697502210,1,"int Choose(int n, int m)
{
	if (n == m || m == 0) {
		return 1;
	}
	return (Choose(n - 1, m) + Choose(n - 1, m - 1));
}",
lbou433,1697502212,2,"int Choose(int n, int m)
{
	if (n == m || m == 0) {
		return 1;
	}
	return (Choose(n - 1, m) + Choose(n - 1, m - 1));
}",1
lbyr117,1698036841,1,"int Choose(int n,int m)
{
    int temp1=n;
    int temp2=m;
    int r=n-m;
    int temp3=r;

    while(temp1>1)
    {
        n=n*(temp1-1);
        temp1--;
    }
    while(temp2>1)
    {
        m=m*(temp2-1);
        temp2--;
    }
    while(temp3>1)
    {
        r=r*(temp3-1);
        temp3--;
    }
    return (n/(r*m));
}",
lbyr117,1698036844,2,"int Choose(int n,int m)
{
    int temp1=n;
    int temp2=m;
    int r=n-m;
    int temp3=r;

    while(temp1>1)
    {
        n=n*(temp1-1);
        temp1--;
    }
    while(temp2>1)
    {
        m=m*(temp2-1);
        temp2--;
    }
    while(temp3>1)
    {
        r=r*(temp3-1);
        temp3--;
    }
    return (n/(r*m));
}",0
lbyr117,1698037501,3,"int Choose(int n,int m)
{
    if((m==0) || (n==m))
    {  
        return 1;
    }
    else
    {
        return ((Choose((n-1),(m-1)))+(Choose((n-1), m)));        
    }
}",
lbyr117,1698037504,4,"int Choose(int n,int m)
{
    if((m==0) || (n==m))
    {  
        return 1;
    }
    else
    {
        return ((Choose((n-1),(m-1)))+(Choose((n-1), m)));        
    }
}",1
lcam453,1698036493,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
lcam453,1698036496,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
lcan243,1697859967,1,"#include <stdio.h>
int Choose(int n, int m) {

    if (m == 0) {
        return 1;
    }
    else if (n == m) {
        return 1;
    }

    else if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
lcan243,1697860024,2,"#include <stdio.h>
int Choose(int n, int m) {

    if (m == 0) {
        return 1;
    }
    else if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    else{
        return 1;
    }

}",
lcan243,1697860048,3,"#include <stdio.h>
int Choose(int n, int m) {

    if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    else{
        return 1;
    }

}",
lcan243,1697860050,4,"#include <stdio.h>
int Choose(int n, int m) {

    if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    else{
        return 1;
    }

}",1
lche668,1698059075,1,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (m < n) {
		return (Choose(n-1, m) + Choose(n-1, m-1));
	}
}
int main()
{
    printf(""Result = %d"", Choose(6, 2)); 
}",
lche668,1698059081,2,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (m < n) {
		return (Choose(n-1, m) + Choose(n-1, m-1));
	}
}",
lche668,1698059122,3,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	else if (m < n) {
		return (Choose(n-1, m) + Choose(n-1, m-1));
	}
}",
lche668,1698059245,4,"int Choose(int n, int m)
{
	int o;
	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (m < n) {
		o = (Choose(n - 1, m) + Choose(n - 1, m - 1));
		return o;
	}
}",
lche668,1698059288,5,"int Choose(int n, int m)
{
	int o;
	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (m < n) {
		o = (Choose(n - 1, m) + Choose(n - 1, m - 1));
		return o;
	}
	else {
		return 0;
	}
}",
lche668,1698059290,6,"int Choose(int n, int m)
{
	int o;
	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
	if (m < n) {
		o = (Choose(n - 1, m) + Choose(n - 1, m - 1));
		return o;
	}
	else {
		return 0;
	}
}",1
lchu848,1698031548,1,"#include <stdio.h>

int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
ldam917,1697803242,1,"int Choose(int n,int m) 
{
    int nCr=1;
    if (m>n/2)
    {
        m=n-m;
    }
    for (int i=0;i<m;i++) 
    {
        nCr=nCr*(n-i);
        nCr=nCr/(i+1);
    }
    return nCr;
}",
ldam917,1697803296,2,"int Choose(int n,int m) 
{
    int nCr=1;
    if (m>n/2)
    {
        m=n-m;
    }
    for (int i=0;i<m;i++) 
    {
        nCr=nCr*(n-i);
        nCr=nCr/(i+1);
    }
    return nCr;
}",1
ldea753,1697710896,1,"int Choose(int n, int m) {
    if (m == 0)
        return 1;
    if (n == m)
        return 1;
    else
        return Choose((n - 1), m) + Choose((n - 1), (m - 1));
}",
ldea753,1697710899,2,"int Choose(int n, int m) {
    if (m == 0)
        return 1;
    if (n == m)
        return 1;
    else
        return Choose((n - 1), m) + Choose((n - 1), (m - 1));
}",1
ldou101,1698026772,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
ldou101,1698026776,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
lfan827,1698018511,1,"int Choose(int n, int m){
    int a, b, i;
    int x = 1, y = 1, z = 1;
    if (m == 0){
        return 1;
    } else if ( n == m){
        return 1;
    }else{
        for (i = m; i >0;i--){
            x = x*i;
        }
        for (i = n ; i > (n - m);i--){
            y = y*i;
        }
        a = y / x;
        return a;
    }
}",
lfan827,1698018526,2,"int Choose(int n, int m){
    int a, i;
    int x = 1, y = 1,;
    if (m == 0){
        return 1;
    } else if ( n == m){
        return 1;
    }else{
        for (i = m; i >0;i--){
            x = x*i;
        }
        for (i = n ; i > (n - m);i--){
            y = y*i;
        }
        a = y / x;
        return a;
    }
}",
lfan827,1698018533,3,"int Choose(int n, int m){
    int a, i;
    int x = 1, y = 1;
    if (m == 0){
        return 1;
    } else if ( n == m){
        return 1;
    }else{
        for (i = m; i >0;i--){
            x = x*i;
        }
        for (i = n ; i > (n - m);i--){
            y = y*i;
        }
        a = y / x;
        return a;
    }
}",
lfan827,1698018536,4,"int Choose(int n, int m){
    int a, i;
    int x = 1, y = 1;
    if (m == 0){
        return 1;
    } else if ( n == m){
        return 1;
    }else{
        for (i = m; i >0;i--){
            x = x*i;
        }
        for (i = n ; i > (n - m);i--){
            y = y*i;
        }
        a = y / x;
        return a;
    }
}",0
lfan827,1698019078,5,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
lfan827,1698019080,6,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
lgan833,1697949941,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
lgan833,1697949943,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
lhal844,1697498967,1,"int Choose(int a, int b)
{
	if (a == b)
	{
		return 1;
	}
	else if (b == 0)
	{
		return 1;
	}
	return Choose(a - 1, b - 1) + Choose(a - 1, b);
}",1
lhua313,1697899892,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
lhua313,1697899897,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
ljer106,1697830453,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } 
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}",
ljer106,1697830529,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } 
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}",1
ljun123,1697944144,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else if (m > 0 && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    else {
        return -1;
    }
}
",
ljun123,1697944154,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else if (m > 0 && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    else {
        return -1;
    }
}
",1
lkel942,1697573468,1,"int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	int result;
	result = Choose(n - 1, m) + Choose(n - 1, m - 1);

	return result;


}",
lkel942,1697573473,2,"int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	int result;
	result = Choose(n - 1, m) + Choose(n - 1, m - 1);

	return result;


}",1
llat663,1697754935,1,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) return 1;
	else {
		int result = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return result;
	}
}",
llat663,1697754942,2,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) return 1;
	else {
		int result = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return result;
	}
}",1
llei074,1697955676,1,"int Choose(int n, int m) {
	int outcome;

	if (m == 0 || m == n) {
		outcome = 1;
	}
	else if (0 < m && m < n) {
		outcome = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
	return outcome;
}",
llei074,1697955677,2,"int Choose(int n, int m) {
	int outcome;

	if (m == 0 || m == n) {
		outcome = 1;
	}
	else if (0 < m && m < n) {
		outcome = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
	return outcome;
}",1
lli393,1697508887,1,"int Choose(int n, int m){


	if (m == 0 || m == n){
		return 1;
	} else if (0 < m && m < n){
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",
lli393,1697508891,2,"int Choose(int n, int m){


	if (m == 0 || m == n){
		return 1;
	} else if (0 < m && m < n){
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",1
llia622,1698056270,1,"int Choose(int n, int m)
{
    int num;
    if (m == 0 || m == n) {
        return 1;
    } else if ( 0 < m && m < n) {
        num = (Choose(n - 1, m) + (Choose(n - 1, m - 1)));
        return num;
    } else {
        return 0;
    }
    
    return;
}",
llia622,1698056286,2,"int Choose(int n, int m)
{
    int num;
    if (m == 0 || m == n) {
        return 1;
    } else if ( 0 < m && m < n) {
        num = (Choose(n - 1, m) + (Choose(n - 1, m - 1)));
        return num;
    } else {
        return 0;
    }
}",
llia622,1698056288,3,"int Choose(int n, int m)
{
    int num;
    if (m == 0 || m == n) {
        return 1;
    } else if ( 0 < m && m < n) {
        num = (Choose(n - 1, m) + (Choose(n - 1, m - 1)));
        return num;
    } else {
        return 0;
    }
}",1
llig859,1697972793,1,"void Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
llig859,1697972862,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
llig859,1697972866,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
lliu182,1698051949,1,"int Choose(int n, int m) {
	if (m == 0 || m == n) {
		return 1;
	}
	else if (m == 1) {
		return n;
	}
	// 6c2 = 5c1 + 4c1 + 3c1 + 2 c1 +1
	else {
		return Choose(n - 1, m - 1) + Choose(n - 1, m);
	}
}",
lliu182,1698051951,2,"int Choose(int n, int m) {
	if (m == 0 || m == n) {
		return 1;
	}
	else if (m == 1) {
		return n;
	}
	// 6c2 = 5c1 + 4c1 + 3c1 + 2 c1 +1
	else {
		return Choose(n - 1, m - 1) + Choose(n - 1, m);
	}
}",1
llu744,1698117780,1,"int Choose(int n, int m) 
{
    int choices;
    if (m == 0 || m == n) {
        return 1;
    } 
    else {
        choices = Choose(n - 1, m - 1) + Choose(n - 1, m);
        return choices;
    }
}",
llu744,1698117789,2,"int Choose(int n, int m) 
{
    int choices;
    if (m == 0 || m == n) {
        return 1;
    } 
    else {
        choices = Choose(n - 1, m - 1) + Choose(n - 1, m);
        return choices;
    }
}",1
lmen032,1698144290,1,"int Choose(int n, int m) {
    int result =  Choose(n - 1, m - 1) + Choose(n - 1, m);
    return result;
}",
lmen032,1698144317,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
lmen032,1698144345,3,"int Choose(int n, int m) {
    int result;
    result = Choose(n - 1, m - 1) + Choose(n - 1, m);
    return result;
}",
lmen032,1698144360,4,"int Choose(int n, int m) {
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
lmen032,1698144528,5,"int Choose(int n, int m) {
    int i;
    int result = 1;
    
    if (m < 0 || m > n) {
        return 0; 
    }

    if (m > n / 2) {
        m = n - m;
    }


    for (i = 0; i < m; i++) {
        result = result * (n - i);
        result = result / (i + 1);
    }

    return result;
}",
lmen032,1698144530,6,"int Choose(int n, int m) {
    int i;
    int result = 1;
    
    if (m < 0 || m > n) {
        return 0; 
    }

    if (m > n / 2) {
        m = n - m;
    }


    for (i = 0; i < m; i++) {
        result = result * (n - i);
        result = result / (i + 1);
    }

    return result;
}",1
lmor438,1698103603,1,"int Choose(int n, int m) {
    int sum = 0;
    int sum1;
    int sum2;
    int n1 = n;
    int m1 = m;


    if (n == m || m == 0) {

        sum++;
        return sum;
    }
    else {

        sum1 = Choose(n - 1, m);
        sum2 = Choose(n - 1, m - 1);

    }


    int show = sum;
    return sum1 + sum2;
}",
lmor438,1698103617,2,"int Choose(int n, int m) {
    int sum = 0;
    int sum1;
    int sum2;


    if (n == m || m == 0) {

        sum++;
        return sum;
    }
    else {

        sum1 = Choose(n - 1, m);
        sum2 = Choose(n - 1, m - 1);

    }


    int show = sum;
    return sum1 + sum2;
}",
lmor438,1698103625,3,"int Choose(int n, int m) {
    int sum = 0;
    int sum1;
    int sum2;


    if (n == m || m == 0) {

        sum++;
        return sum;
    }
    else {

        sum1 = Choose(n - 1, m);
        sum2 = Choose(n - 1, m - 1);

    }


   
    return sum1 + sum2;
}",
lmor438,1698103628,4,"int Choose(int n, int m) {
    int sum = 0;
    int sum1;
    int sum2;


    if (n == m || m == 0) {

        sum++;
        return sum;
    }
    else {

        sum1 = Choose(n - 1, m);
        sum2 = Choose(n - 1, m - 1);

    }


   
    return sum1 + sum2;
}",1
lpry623,1697889242,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }
    int out = Choose(n - 1, m- 1) + Choose(n - 1, m);
    return out;
}",
lpry623,1697889245,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }
    int out = Choose(n - 1, m- 1) + Choose(n - 1, m);
    return out;
}",1
lrei069,1697489825,1,"int Choose(int n, int m) {
    if (n == m || m == 0) {
        return 1;
    } else {
        return Choose((n - 1), m) + Choose((n - 1), (m - 1));
    }
}",1
lros711,1697579032,1,"#include <stdio.h>

int Choose(int n, int m)
{
	int Result;
	if (m == 0 || n == m) {
		Result = 1;
		return Result;
	}
	else if (m > n)
	{
		Result = 0;
		return Result;
	}
	else
	{
		Result = Choose(n - 1, m - 1)+Choose(n - 1, m);
		return Result;
	}
}",
lros711,1697579035,2,"#include <stdio.h>

int Choose(int n, int m)
{
	int Result;
	if (m == 0 || n == m) {
		Result = 1;
		return Result;
	}
	else if (m > n)
	{
		Result = 0;
		return Result;
	}
	else
	{
		Result = Choose(n - 1, m - 1)+Choose(n - 1, m);
		return Result;
	}
}",1
lrya284,1697517850,1,"#include <stdio.h>

int Choose(int n,int m)
{
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n-1,m-1)+Choose(n-1,m);
}",
lrya284,1697518016,2,"#include <stdio.h>

int Choose(int n,int m)
{
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n-1,m-1)+Choose(n-1,m);
}",1
lrya284,1697518054,3,"#include <stdio.h>

int Choose(int n,int m)
{
    if (m == 0 || n == m) {
        return 0;
    }
    return Choose(n-1,m-1)+Choose(n-1,m);
}",
lrya284,1697518063,4,"#include <stdio.h>

int Choose(int n,int m)
{
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n-1,m-1)+Choose(n-1,m);
}",
lrya284,1697518066,5,"#include <stdio.h>

int Choose(int n,int m)
{
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n-1,m-1)+Choose(n-1,m);
}",1
lsal082,1697880004,1,"int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m)
}",
lsal082,1697880010,2,"int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
lsal082,1697880012,3,"int Choose(int n, int m)
{
    if(m == 0 || m == n){
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
lsen376,1697878648,1,"int Choose(int n, int b) {

	if (b == 0 || b == n)
		return 1;
	else if (n < b)
		return 0;
	else if (n > b)
		return Choose(n - 1,b - 1) + Choose(n - 1, b);

	return -1;
}",
lsen376,1697878654,2,"int Choose(int n, int b) {

	if (b == 0 || b == n)
		return 1;
	else if (n < b)
		return 0;
	else if (n > b)
		return Choose(n - 1,b - 1) + Choose(n - 1, b);

	return -1;
}",1
lsha172,1698032437,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
    return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    
}",
lsha172,1698032445,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
    return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    
}",1
lspu128,1697484492,1,"#include <stdio.h>

int choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    }else{
        return choose(n-1, m) + choose(n-1, m-1);
    }
}",
lspu128,1697484522,2,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    }else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
lspu128,1697484525,3,"#include <stdio.h>

int Choose(int n, int m){
    if (m==0 || m==n){
        return 1;
    }else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
lsu376,1697531569,1,"#include<stdio.h>

int Choose(int x, int y)
{
	if (y == 0 || x == y) {
		return 1;

	}
	//else if (x > y && y < 0) {

	return Choose(x - 1, y) + Choose(x - 1, y - 1);
	} 
",
lsu376,1697531572,2,"#include<stdio.h>

int Choose(int x, int y)
{
	if (y == 0 || x == y) {
		return 1;

	}
	//else if (x > y && y < 0) {

	return Choose(x - 1, y) + Choose(x - 1, y - 1);
	} 
",1
lsua311,1698132441,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
lsua311,1698132444,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
ltan813,1698030648,1,"void PrintReverse(int num) {
    printf(""%d"", num % 10);
    if (num >= 10) PrintReverse(num / 10);
}
",
ltan813,1698060629,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) return 1;
    if (m > n) return 0;
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
ltan813,1698060711,3,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) return 1;
    if (m > n) return 0;
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
lvan346,1697870144,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}",
lvan346,1697870147,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    }
}",1
lvin900,1697950342,1,"int Choose(int top, int bottom) {

	if (bottom == 0 || top == bottom){
		return 1;
	}
	else if (0 < bottom && bottom < top) {
		int final = Choose(top - 1, bottom) + Choose(top - 1, bottom - 1);
		return final;
	}

}",
lvin900,1697950429,2,"int Choose(int top, int bottom) {

	if (bottom == 0 || top == bottom){
		return 1;
	}
	else if (0 < bottom && bottom < top) {
		return Choose(top - 1, bottom) + Choose(top - 1, bottom - 1);
	}

}",
lvin900,1697950554,3,"int Choose(int top, int bottom) {

	if (bottom == 0 || top == bottom){
		return 1;
	}
	else if (0 < bottom && bottom < top) {
		return Choose(top - 1, bottom) + Choose(top - 1, bottom - 1);
	}
	else {
		return 0;
	}

}",
lvin900,1697950557,4,"int Choose(int top, int bottom) {

	if (bottom == 0 || top == bottom){
		return 1;
	}
	else if (0 < bottom && bottom < top) {
		return Choose(top - 1, bottom) + Choose(top - 1, bottom - 1);
	}
	else {
		return 0;
	}

}",1
lwer802,1698140669,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive calculation
    return Choose(n-1, m-1) + Choose(n-1, m);
}

// To test the function, you can call it from the main() function.
// int main() {
//     printf(""%d\n"", Choose(5, 2)); // Should print 10
//     return 0;
// }
",
lwer802,1698140671,2,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive calculation
    return Choose(n-1, m-1) + Choose(n-1, m);
}

// To test the function, you can call it from the main() function.
// int main() {
//     printf(""%d\n"", Choose(5, 2)); // Should print 10
//     return 0;
// }
",1
lwon290,1698028677,1,"int Choose(int n, int m) {
	if (m <= 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
lwon290,1698028680,2,"int Choose(int n, int m) {
	if (m <= 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
lyou975,1697923029,1,"int Choose(int n, int m){

    if ( m == 0 || m == n){

        return 1;
    } else {

    return (Choose(n - 1, m) + Choose(n - 1, m - 1));

    }
}",
lyou975,1697923032,2,"int Choose(int n, int m){

    if ( m == 0 || m == n){

        return 1;
    } else {

    return (Choose(n - 1, m) + Choose(n - 1, m - 1));

    }
}",1
mabb997,1697947408,1,"int Choose(int n, int m) {
	int result;
	if ((m == 0) || (n == m)) {
		return 1;
	}
	else {
		return Choose((n - 1), m)  + Choose((n - 1), (m - 1));
	}
}
",
mabb997,1697947414,2,"int Choose(int n, int m) {
	if ((m == 0) || (n == m)) {
		return 1;
	}
	else {
		return Choose((n - 1), m)  + Choose((n - 1), (m - 1));
	}
}
",
mabb997,1697947418,3,"int Choose(int n, int m) {
	if ((m == 0) || (n == m)) {
		return 1;
	}
	else {
		return Choose((n - 1), m)  + Choose((n - 1), (m - 1));
	}
}
",1
mahu925,1697416496,1,"#include <stdio.h>

int factorial(int n)
{
    int i = 0;
    int sum = 1;
    
    for (i = 1; i <= n; i++)
    {   
        sum = sum* i;
    }
    
    return sum;
}


int choose(int n, int r)
{
    return (factorial(n)/ (factorial(n-r) * factorial(r)));
}",
mahu925,1697416513,2,"#include <stdio.h>

int factorial(int n)
{
    int i = 0;
    int sum = 1;
    
    for (i = 1; i <= n; i++)
    {   
        sum = sum* i;
    }
    
    return sum;
}


int Choose(int n, int r)
{
    return (factorial(n)/ (factorial(n-r) * factorial(r)));
}",
mahu925,1697416516,3,"#include <stdio.h>

int factorial(int n)
{
    int i = 0;
    int sum = 1;
    
    for (i = 1; i <= n; i++)
    {   
        sum = sum* i;
    }
    
    return sum;
}


int Choose(int n, int r)
{
    return (factorial(n)/ (factorial(n-r) * factorial(r)));
}",0
mahu925,1697416813,4,"#include <stdio.h>

double factorial(int n)
{
    double i = 0;
    double sum = 1;
    
    for (i = 1; i <= n; i++)
    {   
        sum = sum* i;
    }
    return sum;
    
}


int choose(int n, int r)
{
    return (factorial(n)/ (factorial(n-r) * factorial(r)));
}",
mahu925,1697416820,5,"#include <stdio.h>

double factorial(int n)
{
    double i = 0;
    double sum = 1;
    
    for (i = 1; i <= n; i++)
    {   
        sum = sum* i;
    }
    return sum;
    
}


int Choose(int n, int r)
{
    return (factorial(n)/ (factorial(n-r) * factorial(r)));
}",
mahu925,1697416823,6,"#include <stdio.h>

double factorial(int n)
{
    double i = 0;
    double sum = 1;
    
    for (i = 1; i <= n; i++)
    {   
        sum = sum* i;
    }
    return sum;
    
}


int Choose(int n, int r)
{
    return (factorial(n)/ (factorial(n-r) * factorial(r)));
}",1
mala824,1698115363,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}",
mala824,1698115449,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}",1
mbah279,1697862508,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
mbah279,1697862510,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
mbal759,1697448030,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else if (0 < m < n) { 
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
mbal759,1697448039,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else if (0 < m && m < n) { 
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
mbal759,1697448062,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else { 
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
mbal759,1697448066,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else { 
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",1
mboy221,1697420409,1,"int fact(int num) {
    int fac = 1;
    if (num < 1) {
        return num;
    }
    for (int i = num; i>0; i--) {
        fac = fac*i;
    }
    return fac;
}

int Choose(int n, int m) {
    int choice = fact(n)/(fact(m)*fact(n-m));
    return choice;
}",
mboy221,1697420414,2,"int fact(int num) {
    int fac = 1;
    if (num < 1) {
        return num;
    }
    for (int i = num; i>0; i--) {
        fac = fac*i;
    }
    return fac;
}

int Choose(int n, int m) {
    int choice = fact(n)/(fact(m)*fact(n-m));
    return choice;
}",0
mboy221,1697420588,3,"#include <stdio.h>

float fact(int num) {
    float fac = 1;
    if (num < 1) {
        return num;
    }
    for (int i = num; i>0; i--) {
        fac = fac*i;
    }
    return fac;
}

int Choose(int n, int m) {
    int choice = fact(n)/(fact(m)*fact(n-m));
    return choice;
}

int main(void) {
    printf(""%d"", Choose(25, 24));
    return 0;
}",
mboy221,1697420596,4,"#include <stdio.h>

float fact(int num) {
    float fac = 1;
    if (num < 1) {
        return num;
    }
    for (int i = num; i>0; i--) {
        fac = fac*i;
    }
    return fac;
}

int Choose(int n, int m) {
    int choice = fact(n)/(fact(m)*fact(n-m));
    return choice;
}
",
mboy221,1697420599,5,"#include <stdio.h>

float fact(int num) {
    float fac = 1;
    if (num < 1) {
        return num;
    }
    for (int i = num; i>0; i--) {
        fac = fac*i;
    }
    return fac;
}

int Choose(int n, int m) {
    int choice = fact(n)/(fact(m)*fact(n-m));
    return choice;
}
",0
mboy221,1697424639,6,"double fact(int num) {
    double fac = num;
    for (int i = num-1; i>0; i--) {
        fac = fac * i;
    }
    return fac;
}

int Choose(int n, int m) {
    int choice = fact(n)/(fact(m)*fact(n-m));
    if (choice < 0) {
        return 1;
    }
    return choice;
}",
mboy221,1697424641,7,"double fact(int num) {
    double fac = num;
    for (int i = num-1; i>0; i--) {
        fac = fac * i;
    }
    return fac;
}

int Choose(int n, int m) {
    int choice = fact(n)/(fact(m)*fact(n-m));
    if (choice < 0) {
        return 1;
    }
    return choice;
}",0
mboy221,1697504422,8,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
mboy221,1697504428,9,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
mbut885,1697841366,1,"int Choose(int n, int m)
{
    if ((n == m) || (m == 0)) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
mbut885,1697841367,2,"int Choose(int n, int m)
{
    if ((n == m) || (m == 0)) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
mcam799,1698115547,1,"int Choose(int n, int m)
{
	//n = Total Number       m = Number selected
	if (m == 0 || m == n) {
		return 1;

	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
mcam799,1698115550,2,"int Choose(int n, int m)
{
	//n = Total Number       m = Number selected
	if (m == 0 || m == n) {
		return 1;

	} else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
mcha833,1697872262,1,"int Choose(int num1, int num2)
{  
    if (num2 == 0 || num1 == num2) {
        return 1;
    }
    
    else {
        return Choose((num1 - 1), num2) + Choose((num1 -  1), (num2 - 1));
    }
}",
mcha833,1697872265,2,"int Choose(int num1, int num2)
{  
    if (num2 == 0 || num1 == num2) {
        return 1;
    }
    
    else {
        return Choose((num1 - 1), num2) + Choose((num1 -  1), (num2 - 1));
    }
}",1
mcha876,1697713090,1,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    } 
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
mcha876,1697713122,2,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    } 
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
mcha876,1697713128,3,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    } 
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
mche403,1697943854,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
mche403,1697943910,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
mcro807,1698122284,1,"int  Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    else if (n == m) {
        return 1;
    }
    
    int a = Choose(n-1, m);
    int b = Choose(n-1, m-1);
    return a + b;
}
",
mcro807,1698122289,2,"int  Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    else if (n == m) {
        return 1;
    }
    
    int a = Choose(n-1, m);
    int b = Choose(n-1, m-1);
    return a + b;
}
",1
mdav506,1697788372,1,"int Choose(int n, int m)
{
	if (n == 0 || m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else if (0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
mdav506,1697788402,2,"int Choose(int n, int m)
{
	if (n == 0 || m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else if (0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}
}",
mdav506,1697788412,3,"int Choose(int n, int m)
{
	if (n == 0 || m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else if (0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
mdav506,1697788449,4,"int Choose(int n, int m)
{
	if (n == 0 || m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
mdav506,1697788451,5,"int Choose(int n, int m)
{
	if (n == 0 || m == 0) {
		return 1;
	}
	else if (n == m) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
mfle888,1697968719,1,"int Choose(int n, int m) {

     if (m == n || m == 0) {
        return 1;
     } else {
        return Choose(n -1, m -1) + Choose(n - 1, m); 
     }
  }
",
mfle888,1697968722,2,"int Choose(int n, int m) {

     if (m == n || m == 0) {
        return 1;
     } else {
        return Choose(n -1, m -1) + Choose(n - 1, m); 
     }
  }
",1
mfuj750,1698553817,1,"int Choose(int n, int m)
{
	int result;
	if ((m == 0) || (n == m)) {
		result = 1;
	}
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
	return result;
}",
mfuj750,1698553821,2,"int Choose(int n, int m)
{
	int result;
	if ((m == 0) || (n == m)) {
		result = 1;
	}
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
	return result;
}",1
mger154,1698047631,1,"int Choose(int n, int m) {

int a;
int b;
int c;

    if (m == 0 || m == n) {
        return 1;
    }

    if (m > n) {
        return 0;
    }

a = Choose(n - 1, m - 1);

b = Choose(n - 1, m);

c = a + b;

return c;
}",
mger154,1698047633,2,"int Choose(int n, int m) {

int a;
int b;
int c;

    if (m == 0 || m == n) {
        return 1;
    }

    if (m > n) {
        return 0;
    }

a = Choose(n - 1, m - 1);

b = Choose(n - 1, m);

c = a + b;

return c;
}",1
mgoy303,1697433411,1,"void Choose(int n, int m) {
    
}",
mgoy303,1697453045,2,"int factorial(int num) {
    if (num == 0) {
        return 1;
    }
    return num * factorial(num - 1);
}

int Choose(int n, int m) {
    return factorial(n) / (factorial(m) * factorial(n - m));
}",0
mgoy303,1697454183,3,"int factorial(int num, int stop) {
    if (num == stop) {
        return 1;
    }
    return num * factorial(num - 1, stop);
}

int Choose(int n, int m) {
    return (factorial(n, n - m) / factorial(m, 1));
}",0
mgoy303,1697461430,4,"int Choose(int n, int m) {
    if (n == 1) {  
        return 1;
    }
    if (m == 1) {
        return n;
    }
    return Choose(n - 1, m - 1) * n / m;
}",1
mgua740,1697773364,1,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    else {

        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
mgua740,1697773368,2,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    else {

        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
mhua821,1698027509,1,"int Choose(int n, int m) {
    
    // Cases where the output will always be 1
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    }
    
    int p = Choose(n - 1, m - 1);
    int q = Choose(n - 1, m);
    
    return p + q;
}",
mhua821,1698027511,2,"int Choose(int n, int m) {
    
    // Cases where the output will always be 1
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    }
    
    int p = Choose(n - 1, m - 1);
    int q = Choose(n - 1, m);
    
    return p + q;
}",1
mjun868,1698045463,1,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    }
    
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
mjun868,1698045466,2,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    }
    
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
mkab524,1697548395,1,"int Choose(int n, int m)
{
	if ((m == 0) || (m == n)) {
		return 1;
	}

	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
mkab524,1697548397,2,"int Choose(int n, int m)
{
	if ((m == 0) || (m == n)) {
		return 1;
	}

	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
mkaj411,1697507943,1,"int Choose(int n,int m) {
	if (n == m || m == 0) {
		return 1; 
	}else if(n>m&&n>0&&m>0){
		return Choose(n - 1, m)+Choose(n-1,m-1);
	} 
	return 0; 
}",
mkaj411,1697507946,2,"int Choose(int n,int m) {
	if (n == m || m == 0) {
		return 1; 
	}else if(n>m&&n>0&&m>0){
		return Choose(n - 1, m)+Choose(n-1,m-1);
	} 
	return 0; 
}",1
mkee115,1697512431,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m)
    {
        return 1;
    }
    
    if (m > 0 && n > m)
    {
        int withoutn = Choose((n-1), m);
        int withn = Choose((n-1), (m-1));
        return (withoutn + withn);
    }
}",0
mkee115,1697512697,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m)
    {
        return 1;
    }
    
    else
    {
        int withoutn = Choose((n-1), m);
        int withn = Choose((n-1), (m-1));
        return (withoutn + withn);
    }
}
",
mkee115,1697512699,3,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || n == m)
    {
        return 1;
    }
    
    else
    {
        int withoutn = Choose((n-1), m);
        int withn = Choose((n-1), (m-1));
        return (withoutn + withn);
    }
}
",1
mken566,1697938460,1,"int Factorial(int input)
{
    if (input == 0)
    {
        return 1;
    } else 
    {
        return input * Factorial(input-1);
    }
}

void Choose(int n, int m)
{
    int result = 0;
    if (m > 0 && m < n)
    {
        int mfact = Factorial(m);
        int nfact = Factorial(n);
        int nsubtractmfact = Factorial(n-m);
        result = (nfact / (mfact*(nsubtractmfact)));
    }
    printf(""%d"", result);
}",
mken566,1697938517,2,"int Factorial(int input)
{
    if (input == 0)
    {
        return 1;
    } else 
    {
        return input * Factorial(input-1);
    }
}

int Choose(int n, int m)
{
    int result = 0;
    if (m > 0 && m < n)
    {
        int mfact = Factorial(m);
        int nfact = Factorial(n);
        int nsubtractmfact = Factorial(n-m);
        result = (nfact / (mfact*(nsubtractmfact)));
    }
    printf(""%d"", result);
}",
mken566,1697938533,3,"int Factorial(int input)
{
    if (input == 0)
    {
        return 1;
    } else 
    {
        return input * Factorial(input-1);
    }
}

void Choose(int n, int m)
{
    int result = 0;
    if (m > 0 && m < n)
    {
        int mfact = Factorial(m);
        int nfact = Factorial(n);
        int nsubtractmfact = Factorial(n-m);
        result = (nfact / (mfact*(nsubtractmfact)));
    }
    printf(""%d"", result);
}",
mken566,1697938565,4,"#include <stdio.h>

int Factorial(int input)
{
    if (input == 0)
    {
        return 1;
    } else 
    {
        return input * Factorial(input-1);
    }
}

void Choose(int n, int m)
{
    int result = 0;
    if (m > 0 && m < n)
    {
        int mfact = Factorial(m);
        int nfact = Factorial(n);
        int nsubtractmfact = Factorial(n-m);
        result = (nfact / (mfact*(nsubtractmfact)));
    }
    printf(""%d"", result);
}",
mken566,1697938669,5,"int Factorial(int input)
{
    if (input == 0)
    {
        return 1;
    } else 
    {
        return input * Factorial(input-1);
    }
}

int Choose(int n, int m)
{
    int result = 0;
    if (m > 0 && m < n)
    {
        int mfact = Factorial(m);
        int nfact = Factorial(n);
        int nsubtractmfact = Factorial(n-m);
        result = (nfact / (mfact*(nsubtractmfact)));
    }
    return result;
}",
mken566,1697938671,6,"int Factorial(int input)
{
    if (input == 0)
    {
        return 1;
    } else 
    {
        return input * Factorial(input-1);
    }
}

int Choose(int n, int m)
{
    int result = 0;
    if (m > 0 && m < n)
    {
        int mfact = Factorial(m);
        int nfact = Factorial(n);
        int nsubtractmfact = Factorial(n-m);
        result = (nfact / (mfact*(nsubtractmfact)));
    }
    return result;
}",0
mken566,1697939862,7,"double Factorial(int input)
{
    if (input == 0)
    {
        return 1;
    } else 
    {
        return input * Factorial(input-1);
    }
}

int Choose(int n, int m)
{
    double result = 0;
    if (m > 0 && m < n)
    {
        double mfact = Factorial(m);
        double nfact = Factorial(n);
        double nsubtractmfact = Factorial(n-m);
        result = (nfact / (mfact*(nsubtractmfact)));
    }
    return result;
}",
mken566,1697939866,8,"double Factorial(int input)
{
    if (input == 0)
    {
        return 1;
    } else 
    {
        return input * Factorial(input-1);
    }
}

int Choose(int n, int m)
{
    double result = 0;
    if (m > 0 && m < n)
    {
        double mfact = Factorial(m);
        double nfact = Factorial(n);
        double nsubtractmfact = Factorial(n-m);
        result = (nfact / (mfact*(nsubtractmfact)));
    }
    return result;
}",1
mket106,1697961701,1,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }

    if (m == n) {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
mket106,1697961704,2,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }

    if (m == n) {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
mkim670,1697713355,1,"int Choose(int n, int m)
{
	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
mkim670,1697713358,2,"int Choose(int n, int m)
{
	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
mkim719,1697929354,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n)
        return 1;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
mkim719,1697929356,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n)
        return 1;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
mlaw649,1698121585,1,"int Choose(int n, int m) {
    
    if (m == 0) || (m == n) {
        return 1;
    }
    
    else
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}
    
    ",
mlaw649,1698121592,2,"int Choose(int n, int m) {
    
    if (m == 0) || (m == n) {
        return 1;
    }
    
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}
    
    ",
mlaw649,1698121607,3,"int Choose(int n, int m) {
    
    if ((m == 0) || (m == n)) {
        return 1;
    }
    
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}
    
    ",
mlaw649,1698121613,4,"int Choose(int n, int m) {
    
    if ((m == 0) || (m == n)) {
        return 1;
    }
    else
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}
    
    ",
mlaw649,1698121620,5,"int Choose(int n, int m) {
    
    if ((m == 0) || (m == n)) {
        return 1;
    }
    else {
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}
}
    
    ",
mlaw649,1698121626,6,"int Choose(int n, int m) {
    
    if ((m == 0) || (m == n)) {
        return 1;
    }
    else {
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}
}
    
    ",1
mle063,1697604994,1,"int Choose(int n, int m)
{
    int count = 0;
    
    if (m == 0 || m == n) {
        return 1;
    
    } else {
        return ((n - 1) *m) + ((n - 1) *(m -1));
    } 

}",
mle063,1697605014,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    
    } else {
        return ((n - 1) *m) + ((n - 1) *(m -1));
    } 

}",
mle063,1697605016,3,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    
    } else {
        return ((n - 1) *m) + ((n - 1) *(m -1));
    } 

}",0
mle063,1697687345,4,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1 );
        
    } 

}",
mle063,1697687349,5,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1 );
        
    } 

}",1
mlin729,1697667147,1,"#include <stdio.h>
int Choose(int n, int m){
    if (m ==0 || m == n){
        return 1;
    }
    else{
       return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
mloh302,1697418725,1,"#include <stdio.h>

int Choose(int n, int m)
{
    // Function returns the value of n choose m
    // (The number of ways of selecting m things out of n)
    // n choose m = n! / (m! * (n - m)!) - FORMULA
    // n! = n * (n - 1) * (n - 2) * ... * 1 - FACTORIAL
    int factorial(int x) 
    {
        if (x == 0) 
            return 1;
        return x * factorial(x - 1);
    }
    
    return factorial(n) / (factorial(m) * factorial(n - m));
}",
mloh302,1697418730,2,"#include <stdio.h>

int Choose(int n, int m)
{
    // Function returns the value of n choose m
    // (The number of ways of selecting m things out of n)
    // n choose m = n! / (m! * (n - m)!) - FORMULA
    // n! = n * (n - 1) * (n - 2) * ... * 1 - FACTORIAL
    int factorial(int x) 
    {
        if (x == 0) 
            return 1;
        return x * factorial(x - 1);
    }
    
    return factorial(n) / (factorial(m) * factorial(n - m));
}",0
mloh302,1697419337,3,"#include <stdio.h>

long long Choose(int n, int m)
{
    // Function returns the value of n choose m
    // (The number of ways of selecting m things out of n)
    // n choose m = n! / (m! * (n - m)!) - FORMULA
    // n! = n * (n - 1) * (n - 2) * ... * 1 - FACTORIAL
    long long factorial(long long x) 
    {
        if (x == 0) 
            return 1;
        return x * factorial(x - 1);
    }
    return factorial(n) / (factorial(m) * factorial(n - m));
}",
mloh302,1697419365,4,"#include <stdio.h>

int Choose(int n, int m)
{
    // Function returns the value of n choose m
    // (The number of ways of selecting m things out of n)
    // n choose m = n! / (m! * (n - m)!) - FORMULA
    // n! = n * (n - 1) * (n - 2) * ... * 1 - FACTORIAL
    long long factorial(long long x) 
    {
        if (x == 0) 
            return 1;
        return x * factorial(x - 1);
    }
    return factorial(n) / (factorial(m) * factorial(n - m));
}",
mloh302,1697419384,5,"#include <stdio.h>

int Choose(int n, int m)
{
    // Function returns the value of n choose m
    // (The number of ways of selecting m things out of n)
    // n choose m = n! / (m! * (n - m)!) - FORMULA
    // n! = n * (n - 1) * (n - 2) * ... * 1 - FACTORIAL
    long long factorial(long long x) 
    {
        if (x == 0) 
            return 1;
        return x * factorial(x - 1);
    }
    return factorial(n) / (factorial(m) * factorial(n - m));
}",0
mloh302,1697422968,6,"#include <stdio.h>

long Choose(int n, int m)
{
    // Function returns the value of n choose m
    // (The number of ways of selecting m things out of n)
    // n choose m = n! / (m! * (n - m)!) - FORMULA
    // n! = n * (n - 1) * (n - 2) * ... * 1 - FACTORIAL
    if (n == m || m == 0) 
        return 1;
        
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
mloh302,1697422982,7,"#include <stdio.h>

int Choose(int n, int m)
{
    // Function returns the value of n choose m
    // (The number of ways of selecting m things out of n)
    // n choose m = n! / (m! * (n - m)!) - FORMULA
    // n! = n * (n - 1) * (n - 2) * ... * 1 - FACTORIAL
    if (n == m || m == 0) 
        return 1;
        
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
mloh302,1697423027,8,"#include <stdio.h>

int Choose(int n, int m)
{
    // Function returns the value of n choose m
    // (The number of ways of selecting m things out of n)
    // n choose m = n! / (m! * (n - m)!) - FORMULA
    // n! = n * (n - 1) * (n - 2) * ... * 1 - FACTORIAL
    if (n == m || m == 0) 
        return 1;
        
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
mmak111,1697939970,1,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else if (n > m > 0) {
		return Choose((n - 1), m) + Choose((n - 1), (m - 1));
	}
}",
mmak111,1697939986,2,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose((n - 1), m) + Choose((n - 1), (m - 1));
	}
}",
mmak111,1697939988,3,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose((n - 1), m) + Choose((n - 1), (m - 1));
	}
}",1
mman402,1697756249,1,"int Choose(int n,int m)
{
    if(m==0)
    {
        return 1;
    }else if(n==m)
    {
        return 1;
    }
    else
    {
        return Choose(n-1,m)+Choose(n-1,m-1);
    }
}",
mman402,1697756252,2,"int Choose(int n,int m)
{
    if(m==0)
    {
        return 1;
    }else if(n==m)
    {
        return 1;
    }
    else
    {
        return Choose(n-1,m)+Choose(n-1,m-1);
    }
}",1
mman808,1698041916,1,"int factorial(int f){
    if (f == 0){
        return 1;
    }else{
        return f * factorial(f - 1);
    }
}

int Choose(int n, int m){
    if (n == 0 || n == m){
        return 1;
    }else{
       return factorial(n)/(factorial(m)*factorial(n-m));
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
mman808,1698041919,2,"int factorial(int f){
    if (f == 0){
        return 1;
    }else{
        return f * factorial(f - 1);
    }
}

int Choose(int n, int m){
    if (n == 0 || n == m){
        return 1;
    }else{
       return factorial(n)/(factorial(m)*factorial(n-m));
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",0
mman808,1698043053,3,"int Choose(int n, int m){
    if (m == 0 || n == m){
        return 1;
    }else{
       return Choose(n - 1, m) + Choose(n - 1, m - 1);;
    }
}",
mman808,1698043057,4,"int Choose(int n, int m){
    if (m == 0 || n == m){
        return 1;
    }else{
       return Choose(n - 1, m) + Choose(n - 1, m - 1);;
    }
}",1
mmas199,1698111022,1,"#include <stdio.h>

int Choose(int a, int b) 
{
    int C[a+1][b+1];
    int i, j;

    for (i = 0; i <= a; i++) 
    {
        for (j = 0; j <= ((i < b) ? i : b); j++) 
        {
            if (j == 0 || j == i)
                C[i][j] = 1;
            else
                C[i][j] = C[i-1][j-1] + C[i-1][j];
        }
    }

    return C[a][b];
}",
mmas199,1698111025,2,"#include <stdio.h>

int Choose(int a, int b) 
{
    int C[a+1][b+1];
    int i, j;

    for (i = 0; i <= a; i++) 
    {
        for (j = 0; j <= ((i < b) ? i : b); j++) 
        {
            if (j == 0 || j == i)
                C[i][j] = 1;
            else
                C[i][j] = C[i-1][j-1] + C[i-1][j];
        }
    }

    return C[a][b];
}",1
mmca276,1698048001,1,"int Choose(int n, int m) {

    if(m == 0 || m == n){
        return 1;
    }

    else if((m > 0) && (m < n)) {
        return (n*Choose(n-1 , m-1))/m ;
        
    }
return 0;
}",
mmca276,1698048006,2,"int Choose(int n, int m) {

    if(m == 0 || m == n){
        return 1;
    }

    else if((m > 0) && (m < n)) {
        return (n*Choose(n-1 , m-1))/m ;
        
    }
return 0;
}",1
mmcg745,1698097311,1,"int Choose(int n, int k){
    if (n == k || k == 0){
        return 1;
    }else {   
        return Choose(n-1, k) + Choose(n-1,k-1);    
    }
}",
mmcg745,1698097314,2,"int Choose(int n, int k){
    if (n == k || k == 0){
        return 1;
    }else {   
        return Choose(n-1, k) + Choose(n-1,k-1);    
    }
}",1
mmoh314,1698124893,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m)
	{
		return 1;
	}
	else
	{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",
mmoh314,1698124895,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m)
	{
		return 1;
	}
	else
	{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",1
mmoh456,1698110678,1,"int Choose(int n, int m)
{
	int rec1;
	int rec2;
	int rec3;
	int comb;

	if (m == 0 || m == n) {
		printf(""1"");
		return;
	}
	else {
		rec1 = n - 1;
		rec2 = m - 1;
		rec3 = m;

		comb = Choose(rec1, rec2) + Choose(rec1, rec3);

		printf(""%d"", comb);

	}


}",
mmoh456,1698110729,2,"int Choose(int n, int m)
{
	int rec1;
	int rec2;
	int rec3;
	int comb;

	if (m == 0 || m == n) {
		printf(""1"");
		return 1;
	}
	else {
		rec1 = n - 1;
		rec2 = m - 1;
		rec3 = m;

		comb = Choose(rec1, rec2) + Choose(rec1, rec3);

		printf(""%d"", comb);

	}


}",
mmoh456,1698110882,3,"int Choose(int n, int m)
{
	int rec1;
	int rec2;
	int rec3;
	int comb;

	if (m == 0 || m == n) {
		return 1;
	}
	else {
		rec1 = n - 1;
		rec2 = m - 1;
		rec3 = m;

		comb = Choose(rec1, rec2) + Choose(rec1, rec3);

		return comb;

	}


}",
mmoh456,1698110889,4,"int Choose(int n, int m)
{
	int rec1;
	int rec2;
	int rec3;
	int comb;

	if (m == 0 || m == n) {
		return 1;
	}
	else {
		rec1 = n - 1;
		rec2 = m - 1;
		rec3 = m;

		comb = Choose(rec1, rec2) + Choose(rec1, rec3);

		return comb;

	}


}",1
mnay503,1697540760,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
mnic190,1698079047,1,"int Choose(int total, int selected) {
    int factorial_function(int input) {
        int factorial = 1;
        for (int i = 1; i <= input; i++){
            factorial *= i;
        }
        return factorial;
    }
    int combinations = factorial_function(total) / (factorial_function(selected)*factorial_function(total-selected));
    return combinations;
}",
mnic190,1698079050,2,"int Choose(int total, int selected) {
    int factorial_function(int input) {
        int factorial = 1;
        for (int i = 1; i <= input; i++){
            factorial *= i;
        }
        return factorial;
    }
    int combinations = factorial_function(total) / (factorial_function(selected)*factorial_function(total-selected));
    return combinations;
}",0
mnic190,1698080277,3,"#include <stdint.h>
int Choose(int total, int selected) {
    int64_t factorial_function(int input) {
        int64_t factorial = 1;
        for (int64_t i = 1; i <= input; i++){
            factorial *= i;
        }
        return factorial;
    }
    int64_t combinations = factorial_function(total) / (factorial_function(selected)*factorial_function(total-selected));
    return combinations;
}",
mnic190,1698080280,4,"#include <stdint.h>
int Choose(int total, int selected) {
    int64_t factorial_function(int input) {
        int64_t factorial = 1;
        for (int64_t i = 1; i <= input; i++){
            factorial *= i;
        }
        return factorial;
    }
    int64_t combinations = factorial_function(total) / (factorial_function(selected)*factorial_function(total-selected));
    return combinations;
}",0
moco678,1697582657,1,"int Choose(int n, int m) {

    if (m == 0) {
        return 1;
    }

    if (n == m) {
        return 1;;
    }
    
   
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    
    }",
moco678,1697582659,2,"int Choose(int n, int m) {

    if (m == 0) {
        return 1;
    }

    if (n == m) {
        return 1;;
    }
    
   
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    
    }",1
mpar342,1698131576,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
mpat501,1697431785,1,"int Choose(int n, int m)
{
    if ( m==0 || m==n ){
        return 1;
    }
    
    return (Choose(n-1, m) + Choose(n-1, m-1));

}",
mpat501,1697431787,2,"int Choose(int n, int m)
{
    if ( m==0 || m==n ){
        return 1;
    }
    
    return (Choose(n-1, m) + Choose(n-1, m-1));

}",1
mpey262,1697431268,1,"int Choose(int n, int m) {
    n--;
    if (n >= m) {
        return n + Choose(n, m);
    }
}",
mpey262,1697431535,2,"int Choose(int n, int m) {
    n--;
    if (n >= m) {
        return n + Choose(n, m);
    }
    return 0;
}",
mpey262,1697431599,3,"int Choose(int n, int m) {
    if (n >= m) {
        n--;
        return n + Choose(n, m);
    }
    return 0;
}",
mpey262,1697431601,4,"int Choose(int n, int m) {
    if (n >= m) {
        n--;
        return n + Choose(n, m);
    }
    return 0;
}",0
mpey262,1697437901,5,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    if (0 < m < n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    } 
}",
mpey262,1697437920,6,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    if (0 < m < n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    } 
    return 1;
}",
mpey262,1697437937,7,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    if (0 < m && m < n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    } 
    return 1;
}",
mpey262,1697437975,8,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    if (0 < m && m < n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    } 
}",
mpey262,1697437990,9,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    if (0 < m && m < n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    } 
    return 1;
}",1
mran851,1698106245,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (m > n) {
        return 0;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
mran851,1698106248,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (m > n) {
        return 0;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
mrog757,1697682508,1,"int Choose(int n, int m)
{
    if (n==m || m==0) {
        return 1;
    }
    else {
        int x = (Choose((n - 1), m));
        int y = Choose((n - 1), (m - 1));
        return x + y;
    }
    return 0;
}",
mrog757,1697682512,2,"int Choose(int n, int m)
{
    if (n==m || m==0) {
        return 1;
    }
    else {
        int x = (Choose((n - 1), m));
        int y = Choose((n - 1), (m - 1));
        return x + y;
    }
    return 0;
}",1
mron793,1697847295,1,"int Choose(int n, int m)
{
    if (m == 0)
    {
        return 1;
    }
    else if (m == n)
    {
        return 1;
    }
    
    else
    {
       return Choose(n-1, m) + Choose(n-1, m-1);
    }


}",
mron793,1697847298,2,"int Choose(int n, int m)
{
    if (m == 0)
    {
        return 1;
    }
    else if (m == n)
    {
        return 1;
    }
    
    else
    {
       return Choose(n-1, m) + Choose(n-1, m-1);
    }


}",1
mshi672,1697855823,1,"int Choose(int n, int m)
{
	if ((m == 0) || (n == m))
	{
		return 1;
	}
	else if ((0 < m) && (m < n))
	{
		int choices;
		choices = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return choices;
	}
	return 0;
}",
mshi672,1697855825,2,"int Choose(int n, int m)
{
	if ((m == 0) || (n == m))
	{
		return 1;
	}
	else if ((0 < m) && (m < n))
	{
		int choices;
		choices = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return choices;
	}
	return 0;
}",1
msin609,1698022544,1,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else if (m > 0 && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else {
		return -1;
	}
}",
msin609,1698022545,2,"int Choose(int n, int m) {
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
	}
	else if (m > 0 && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else {
		return -1;
	}
}",1
msuv992,1698059899,1,"int Choose(int n, int m) {
    // Base cases
    if (m == 0 || n == m) {
        return 1;
    }

    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
msuv992,1698135695,2,"
int Choose(int m, int n) {
    // Base cases
    if (m == 0 || n == m) {
        return 1;
    }

    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",0
msuv992,1698135708,3,"
int Choose(int m, int n) {
    // Base cases
    if (m == 0 || n == m) {
        return 1;
    }

    // Recursive case
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
msuv992,1698135776,4,"int Choose(int n, int m) {
    // Base cases:
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case:
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
msuv992,1698136040,5,"int Choose(int n, int m) {
    // Base cases:
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case:
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
msuv992,1698136044,6,"int Choose(int n, int m) {
    // Base cases:
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive case:
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
mtam709,1698120810,1,"int Choose(int n, int m)
{
    //recursive formula is c(n,k)=c(n−1,k−1)+c(n−1,k)
    if (m == n || m == 0)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
mtam709,1698120812,2,"int Choose(int n, int m)
{
    //recursive formula is c(n,k)=c(n−1,k−1)+c(n−1,k)
    if (m == n || m == 0)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
mtha724,1697510349,1,"int Choose(int n, int m)
{
    if ((m == 0) || (n == m)){
        return 1;
    } else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
mtha724,1697510352,2,"int Choose(int n, int m)
{
    if ((m == 0) || (n == m)){
        return 1;
    } else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
mtob213,1698056279,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n){
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
mtob213,1698056828,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n){
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
mtob213,1698134103,3,"int Choose(int n, int m)
{
    if (m == 0 || m == n){
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
mwan364,1697577133,1,"int Choose(int n, int m) {
    
	int binomialResult = 1;
	
	if ((m == 0) || (m == n)) {
		return binomialResult;
	}
	else if ((m > 0) && (m < n)) {
		binomialResult = Choose((n - 1), m) + Choose((n - 1), (m - 1));
	}
 return binomialResult;

}",
mwan364,1697577136,2,"int Choose(int n, int m) {
    
	int binomialResult = 1;
	
	if ((m == 0) || (m == n)) {
		return binomialResult;
	}
	else if ((m > 0) && (m < n)) {
		binomialResult = Choose((n - 1), m) + Choose((n - 1), (m - 1));
	}
 return binomialResult;

}",1
myou984,1697514158,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else if (0 < m && m < n) {
        return (Choose((n-1), m) + Choose((n-1), (m-1)));
    }
    return 0;
}",
myou984,1697514160,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else if (0 < m && m < n) {
        return (Choose((n-1), m) + Choose((n-1), (m-1)));
    }
    return 0;
}",1
mzha612,1697401638,1,"void Choose(int n, int m){
    return (m == 0 || m == n) ? 1 : Choose(n-1, m) + Choose(n - 1, m-1);
}",0
mzha612,1697401647,2,"int Choose(int n, int m){
    return (m == 0 || m == n) ? 1 : Choose(n-1, m) + Choose(n - 1, m-1);
}",1
nabr105,1697941579,1,"int Choose(int n, int m) 
{
    if (n == m || m == 0)
    {
        return 1;
    } else {
        return (Choose(n-1,m) + Choose(n-1,m-1)); 
    }

}
",
nabr105,1697941580,2,"int Choose(int n, int m) 
{
    if (n == m || m == 0)
    {
        return 1;
    } else {
        return (Choose(n-1,m) + Choose(n-1,m-1)); 
    }

}
",1
nalg484,1698019294,1,"#include <stdio.h>
int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
nalg484,1698019310,2,"#include <stdio.h>
int Choose(int n, int m) {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
nalg484,1698019315,3,"#include <stdio.h>
int Choose(int n, int m) {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
nalg484,1698019326,4,"#include <stdio.h>
int Choose(int n, int m) {
        if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
}",
nalg484,1698019328,5,"#include <stdio.h>
int Choose(int n, int m) {
        if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
}",1
nask472,1697508880,1,"#include <stdio.h>

int Choose(int n, int m)
 {
    if(m == 0){
        return 1;
    }
    if(m == n){
        return 1;
    }

    if( m > 0 && m < n){
        return Choose(n - 1, m) + Choose(n-1, m - 1)
    }
 }
",
nask472,1697508892,2,"#include <stdio.h>

int Choose(int n, int m)
 {
    if(m == 0){
        return 1;
    }
    if(m == n){
        return 1;
    }

    if( m > 0 && m < n){
        return Choose(n - 1, m) + Choose(n-1, m - 1);
    }
 }
",
nask472,1697509010,3,"#include <stdio.h>

int Choose(int n, int m)
 {
    if(m == 0){
        return 1;
    }
    if(m == n){
        return 1;
    }

    if( m > 0 && m < n){
        return Choose(n - 1, m) + Choose(n-1, m - 1);
    }
    return 0;
 }
",
nask472,1697509031,4,"#include <stdio.h>

int Choose(int n, int m)
 {
    if(m == 0){
        return 1;
    }
    if(m == n){
        return 1;
    }

    if( m > 0 && m < n){
        return Choose(n - 1, m) + Choose(n-1, m - 1);
    }
    return 0;
 }
",1
ncha509,1697944281,1,"int Choose(int n, int m){
    if (m==0 || n==m){
        return 1;
    }else{
        return Choose(n-1,m)+Choose(n-1,m-1);
    }
}",
ncha509,1697944288,2,"int Choose(int n, int m){
    if (m==0 || n==m){
        return 1;
    }else{
        return Choose(n-1,m)+Choose(n-1,m-1);
    }
}",1
ndas832,1697768216,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m==0||n==m) {
        return 1; 
    } else {
        return Choose(n-1,m) + Choose(n-1,m-1); 

    }
}",
ndas832,1697768219,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m==0||n==m) {
        return 1; 
    } else {
        return Choose(n-1,m) + Choose(n-1,m-1); 

    }
}",1
ndso791,1698098795,1,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    else{
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
ndso791,1698098798,2,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    else{
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
ngam724,1697700945,1,"int Choose(int n, int m)
{
	int x= 0 ;
	if (m == 0) {
		x = 1;
	}
	if (m == n) {
		x = 1;
	}
	else if (m>0 && m<n) {
		x =	Choose(n - 1, m) + Choose(n - 1, m - 1);
		}
	return x;
}",
ngam724,1697700948,2,"int Choose(int n, int m)
{
	int x= 0 ;
	if (m == 0) {
		x = 1;
	}
	if (m == n) {
		x = 1;
	}
	else if (m>0 && m<n) {
		x =	Choose(n - 1, m) + Choose(n - 1, m - 1);
		}
	return x;
}",1
ngan146,1697514490,1,"#include <stdio.h>

void choose(int n, int m) {
    if (n == m || m == 0) {
        return 1;
    }else {
       return choose(n-1, m-1) + choose(n-1, m);
        
    }
}",
ngan146,1697515632,2,"#include <stdio.h>

int choose(int n, int m) {
    if (n == m || m == 0) {
        return 1;
    }else {
       return choose(n-1, m-1) + choose(n-1, m);
        
    }
}",
ngan146,1697515650,3,"#include <stdio.h>

int Choose(int n, int m) {
    if (n == m || m == 0) {
        return 1;
    }else {
       return choose(n-1, m-1) + choose(n-1, m);
        
    }
}",
ngan146,1697515658,4,"#include <stdio.h>

int Choose(int n, int m) {
    if (n == m || m == 0) {
        return 1;
    }else {
       return Choose(n-1, m-1) + Choose(n-1, m);
        
    }
}",
ngan146,1697515964,5,"#include <stdio.h>

int Choose(int n, int m) {
    if (n == m || m == 0) {
        return 1;
    }else {
       return Choose(n-1, m-1) + Choose(n-1, m);
        
    }
}",1
ngna565,1697492144,1,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
        
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
ngna565,1697492146,2,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
        
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
nhar865,1697459092,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    return Choose(n - 1, m) + (n - 1, m - 1);
}",
nhar865,1697459107,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
nhar865,1697459109,3,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
nhrs452,1697494187,1,"
int Choose(int n, int m){
    if(m == 0){
        return 1;
    }
    if(m == n){
        return 1;
    }
    else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}
",
nhrs452,1697494189,2,"
int Choose(int n, int m){
    if(m == 0){
        return 1;
    }
    if(m == n){
        return 1;
    }
    else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}
",1
nhua986,1698058020,1,"int Choose(int n, int m)
{
    if ((m == 0) || (m == n)) {
       return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    } 
    
}",
nhua986,1698058021,2,"int Choose(int n, int m)
{
    if ((m == 0) || (m == n)) {
       return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
    } 
    
}",1
nhut042,1697672605,1,"int choose(int n,int m)
{
   if((n == m) || (m == 0))
   {
       return 1;
   }
   else
   {
       return choose(n-1,m) + choose(n-1,m-1);
   }
}",
nhut042,1697672622,2,"int Choose(int n,int m)
{
   if((n == m) || (m == 0))
   {
       return 1;
   }
   else
   {
       return Choose(n-1,m) + Choose(n-1,m-1);
   }
}",
nhut042,1697672625,3,"int Choose(int n,int m)
{
   if((n == m) || (m == 0))
   {
       return 1;
   }
   else
   {
       return Choose(n-1,m) + Choose(n-1,m-1);
   }
}",1
nisa397,1697494677,1,"int Choose(int n, int m) {
	if (n==m || m==0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
nisa397,1697494680,2,"int Choose(int n, int m) {
	if (n==m || m==0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
njon803,1697536484,1,"int Choose(int n, int m)
{

	if (m == 0 || m == n) {
		return 1;
	}
	else if (0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);

	}
}",
njon803,1697536555,2,"int Choose(int n, int m)
{

	if (m == 0 || m == n) {
		return 1;
	}
	else if (0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
			}
	else {
		return 0;
	}
}",
njon803,1697536558,3,"int Choose(int n, int m)
{

	if (m == 0 || m == n) {
		return 1;
	}
	else if (0 < m && m < n) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
			}
	else {
		return 0;
	}
}",1
nlal162,1697891712,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
nlal162,1697891715,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
nmah920,1697769496,1,"int choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    }
    
    return choose(n - 1, m) + choose(n - 1, m - 1) +;
}",
nmah920,1697769624,2,"int choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    }
    
    return choose(n - 1, m) + choose(n - 1, m - 1) ;
}",
nmah920,1697769646,3,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1) ;
}",
nmah920,1697769655,4,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1) ;
}",1
nqua370,1698139211,1,"int Choose(int m, int n) {
    if (m == n || m == 0) {
        return 1;
    } else {
        return Choose(m - 1, n - 1) + Choose(m - 1, n);
    }
}",
nqua370,1698139231,2,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
nqua370,1698139297,3,"int Choose(int n, int m) 
{
    if (m == n || m == 0) {
        return 1;
    
        
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
nqua370,1698139300,4,"int Choose(int n, int m) 
{
    if (m == n || m == 0) {
        return 1;
    
        
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
nren130,1697889026,1,"void Choose(int n, int m)
{
    
    if (n == m || n == 0) {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1)
}",0
nren130,1697889093,2,"void Choose(int n, int m)
{
    
    if (n == m || m == 0) {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1)
}",0
nren130,1697889131,3,"void Choose(int n, int m)
{
    
    if (n == m || m == 0) {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
nren130,1697889156,4,"int Choose(int n, int m)
{
    
    if (n == m || m == 0) {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
nren130,1697889163,5,"int Choose(int n, int m)
{
    
    if (n == m || m == 0) {
        return 1;
    }
    
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
nrub019,1697558564,1,"#include <stdio.h>

int CallCount = 1;

int Choose(int n, int m){

    if ((m == 0) || (m == n)){
       //printf(""basecase"");
        return 1;
    }else if ((m > 0) && m < n){
        CallCount++;
        return (Choose(n-1,m) + Choose(n-1,m-1));
    }
}

int main(void){

    Choose(6,2);
    printf(""%d"", CallCount);

}",
nrub019,1697558877,2,"#include <stdio.h>

int CallCount = 1;

int Choose(int n, int m){
    if ((m == 0) || (m == n)){
        return 1;
    }else if ((m > 0) && m < n){
        CallCount++;
        return (Choose(n-1,m) + Choose(n-1,m-1));
    }
    return CallCount;
}",
nrub019,1697558886,3,"#include <stdio.h>

int CallCount = 1;

int Choose(int n, int m){
    if ((m == 0) || (m == n)){
        return 1;
    }else if ((m > 0) && m < n){
        CallCount++;
        return (Choose(n-1,m) + Choose(n-1,m-1));
    }
    return CallCount;
}",1
nthe160,1697962634,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
nthe160,1697962637,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
ntia856,1697934930,1,"#include <stdio.h>

int Choose(int n, int m) {

    if (m == 0 || m == n) 
    {
        return 1;
    }
 
    else if (m == 1) 
    {
        return n;
    }
 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
ntia856,1697934940,2,"#include <stdio.h>

int Choose(int n, int m) {

    if (m == 0 || m == n) 
    {
        return 1;
    }
 
    else if (m == 1) 
    {
        return n;
    }
 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
ntur101,1697987916,1,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

    
}",
ntur101,1697987918,2,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) 
    {
        return 1;
    } 
    else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

    
}",1
nwei818,1697533732,1,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    } else {
        return Choose(n -1, m) + Choose(n -1, m -1);
    }
}",
nwei818,1697533735,2,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    } else {
        return Choose(n -1, m) + Choose(n -1, m -1);
    }
}",1
nwil850,1697507921,1,s,
nwil850,1697508937,2,"int Choose(int n, int m){
    int count = 0;
    if(m == 0){
        return 1;
    }
    else if(n == m){
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
nwil850,1697508962,3,"int Choose(int n, int m){
    if(m == 0){
        return 1;
    }
    else if(n == m){
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}
",
nwil850,1697508969,4,"int Choose(int n, int m){
    if(m == 0){
        return 1;
    }
    else if(n == m){
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}
",1
nyua944,1697503551,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive cases
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
nyua944,1697503553,2,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    
    // Recursive cases
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
obar199,1698116832,1,"int Choose(int n,int k){
    int nf = 1;
    int kf = 1;
    int nkf = 1;
    for (int ni = 1;ni <=n;ni++){
        nf*=ni;
    }
    for (int ki = 1;ki <=k;ki++){
        kf*=ki;
    }
    for (int nki = 1;nki <=(n-k);nki++){
        nkf*=nki;
    }
    return (nf/(kf*nkf));
}
",
obar199,1698116834,2,"int Choose(int n,int k){
    int nf = 1;
    int kf = 1;
    int nkf = 1;
    for (int ni = 1;ni <=n;ni++){
        nf*=ni;
    }
    for (int ki = 1;ki <=k;ki++){
        kf*=ki;
    }
    for (int nki = 1;nki <=(n-k);nki++){
        nkf*=nki;
    }
    return (nf/(kf*nkf));
}
",0
obar199,1698117606,3,"int Choose(int n,int k){
    int nf = 1;
    int kf = 1;
    int nkf = 1;
    for (int ni = 1;ni <=n;ni++){
        nf*=ni;
    }
    for (int ki = 1;ki <=k;ki++){
        kf*=ki;
    }
    for (int nki = 1;nki <=(n-k);nki++){
        nkf*=nki;
    }
    return (nf/(kf*nkf));
}
",
obar199,1698117611,4,"int Choose(int n,int k){
    int nf = 1;
    int kf = 1;
    int nkf = 1;
    for (int ni = n;ni >n-k;ni--){
        nf*=ni;
    }
    for (int ki = 1;ki <=k;ki++){
        kf*=ki;
    }
    return (nf/kf);
}",
obar199,1698117621,5,"int Choose(int n,int k){
    int nf = 1;
    int kf = 1;
    for (int ni = n;ni >n-k;ni--){
        nf*=ni;
    }
    for (int ki = 1;ki <=k;ki++){
        kf*=ki;
    }
    return (nf/kf);
}",
obar199,1698117623,6,"int Choose(int n,int k){
    int nf = 1;
    int kf = 1;
    for (int ni = n;ni >n-k;ni--){
        nf*=ni;
    }
    for (int ki = 1;ki <=k;ki++){
        kf*=ki;
    }
    return (nf/kf);
}",0
obar199,1698125700,7,"int Choose(int n, int k){
    long long fact1=1;
    long long fact2=1;
    if (2*k<=n){
        for(int i = n;i>n-k;i--){
            fact1*=i;
        }
        for(int j = 1;j<=k;j++){
            fact2*=j;
        }
        
    }
    else{
        int k2 =n-k;
        for(int i = n;i>n-k2;i--){
            fact1*=i;
        }
        //printf(""%d\n"",fact1);
        for(int j = 1;j<=k2;j++){
            fact2*=j;
        }
        //printf(""%d\n"",fact2);
        
    }
    return fact1/fact2;
}",
obar199,1698125704,8,"int Choose(int n, int k){
    long long fact1=1;
    long long fact2=1;
    if (2*k<=n){
        for(int i = n;i>n-k;i--){
            fact1*=i;
        }
        for(int j = 1;j<=k;j++){
            fact2*=j;
        }
        
    }
    else{
        int k2 =n-k;
        for(int i = n;i>n-k2;i--){
            fact1*=i;
        }
        //printf(""%d\n"",fact1);
        for(int j = 1;j<=k2;j++){
            fact2*=j;
        }
        //printf(""%d\n"",fact2);
        
    }
    return fact1/fact2;
}",1
ogab251,1697755655,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
} ",
ogab251,1697755723,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 1) {
        return n;
    } else if (m == n || m == 0) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
} ",
ogab251,1697755749,3,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 1) {
        return n;
        
    } else if (m == n || m == 0) {
        return 1;
        
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
} ",1
ogan176,1697520876,1,"int Choose(int n, int m){
    if (m == 0){
        return 1;
    }
    
    if (m == n){
        return 1;
    }

    if (0 < m && m < n){
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    return 0;
}
",1
ogar584,1697773362,1,"int Choose(int n, int m)
{
    if (m == 0 || n == m)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
ogar584,1697773371,2,"int Choose(int n, int m)
{
    if (m == 0 || n == m)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
oguo680,1697855080,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        int recursion1 = Choose(n - 1, m - 1);
        int recursion2 = Choose(n - 1, m);
        return recursion1 + recursion2;
    }
}",
oguo680,1697855082,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        int recursion1 = Choose(n - 1, m - 1);
        int recursion2 = Choose(n - 1, m);
        return recursion1 + recursion2;
    }
}",1
oko158,1698021607,1,"int Choose(int n, int m) {
    if (m == 0) {
       return 1;
    }
    else if (m == n) {
        return 1;
    }
    else {
      int Result = Choose(n - 1, m) + Choose(n - 1, m - 1);
      return Result;
    }

    }",
oko158,1698021609,2,"int Choose(int n, int m) {
    if (m == 0) {
       return 1;
    }
    else if (m == n) {
        return 1;
    }
    else {
      int Result = Choose(n - 1, m) + Choose(n - 1, m - 1);
      return Result;
    }

    }",1
opat597,1698039894,1,"int Choose(int n, int m){
    if m == 0 or m == n:
        return 1
    if m > n:
        return 0
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m)
}",0
opat597,1698039929,2,"int Choose(int n, int m){
    if m == 0 || m == n:
        return 1
    if m > n:
        return 0
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m)
}",0
opat597,1698040043,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    if (m > n) {
        return 0;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
opre469,1697768050,1,"//Function Choose which finds the value of n choose m
int Choose(int n, int m)
{
	//base case//
	if (m == 0 || m == n) {
		return 1;
	}

	//recursive until base case is hit//
	else {
		int ways = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return ways;
	}
}",
opre469,1697768053,2,"//Function Choose which finds the value of n choose m
int Choose(int n, int m)
{
	//base case//
	if (m == 0 || m == n) {
		return 1;
	}

	//recursive until base case is hit//
	else {
		int ways = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return ways;
	}
}",1
orow585,1697968543,1,"int Choose(int n, int m) {

	if (m == 0 || n == (m+1)) {
		return;
	}
	return (Choose(n-1,m-1) + Choose(n - 1, m));

}",
orow585,1697968557,2,"int Choose(int n, int m) {

	if (m == 0 || n == (m+1)) {
		return 0;
	}
	
	return (Choose(n-1,m-1) + Choose(n - 1, m));

}",
orow585,1697968579,3,"int Choose(int n, int m) {


	if (m == 0 || n == (m+1)) {
		return;
	}
	
	return (Choose(n-1,m-1) + Choose(n - 1, m));

}",
orow585,1697968657,4,"int Choose(int n, int m) {

	if (m == 0 || n == m) {
		return 1;
	}
	return (Choose(n-1,m-1) + Choose(n - 1, m));

}",
orow585,1697968660,5,"int Choose(int n, int m) {

	if (m == 0 || n == m) {
		return 1;
	}
	return (Choose(n-1,m-1) + Choose(n - 1, m));

}",1
osca399,1698050882,1,"int factorial(int num) {
    if (num <= 1) {
        return 1;
    } else {
        return num * factorial(num - 1);
    }
}

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return factorial(n) / (factorial(m) * factorial(n - m));
    }
}",
osca399,1698050908,2,"int factorial(int num) {
    if (num <= 1) {
        return 1;
    } else {
        return num * factorial(num - 1);
    }
}


int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return factorial(n) / (factorial(m) * factorial(n - m));
    }
}",0
osca399,1698052056,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
osca399,1698052062,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
oshi740,1697667266,1,"int Choose(int n, int m)
{

	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
			if (0 < m && m < n) {
				return Choose(n - 1, m) + Choose(n - 1, m - 1);
			}
			return 0;
}",
oshi740,1697667268,2,"int Choose(int n, int m)
{

	if (m == 0) {
		return 1;
	}
	if (m == n) {
		return 1;
	}
			if (0 < m && m < n) {
				return Choose(n - 1, m) + Choose(n - 1, m - 1);
			}
			return 0;
}",1
pchh683,1698118532,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 0;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",0
pchh683,1698118538,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
pfon568,1697612009,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n)
    {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
pfon568,1697612013,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 || m == n)
    {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
phao209,1698143362,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) { //m = 0, pick = 1 
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); //
    }
}
",
phao209,1698143552,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == n || m == 0) { //m = 0, pick = 1 
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); //
    }
}
",
phao209,1698143553,3,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == n || m == 0) { //m = 0, pick = 1 
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m); //
    }
}
",1
pkim777,1697425937,1,"int Choose(int n, int m) {
    if ((m == 0) || (n == m)) {
        return 1;
    } else {
        return Choose((n - 1), (m - 1)) + Choose((n - 1), m);
    }
}",1
plah275,1698145092,1,"int Choose(int a,int b) {
    
if (a == b ) {
    return 1;
} else if (b == 0) {
    return 1;
}

return (Choose(a-1,b) + Choose(a-1,b-1));
}",
plah275,1698145095,2,"int Choose(int a,int b) {
    
if (a == b ) {
    return 1;
} else if (b == 0) {
    return 1;
}

return (Choose(a-1,b) + Choose(a-1,b-1));
}",1
plan310,1697514099,1,"int Choose(int n, int m)
{
    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        return (Choose(n - 1, m)) + (Choose(n - 1, m - 1));
    }
}",
plan310,1697514103,2,"int Choose(int n, int m)
{
    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        return (Choose(n - 1, m)) + (Choose(n - 1, m - 1));
    }
}",1
ppax865,1697547556,1,"int Choose(int num1, int num2){
    int combinations, factorial1, factorial2, factorial3, count1, count2, count3;
    
    factorial1 = 1;
    factorial2 = 1;
    factorial3 = 1;
    count1 = num1;
    count2 = num2;
    count3 = num1 - num2;
    combinations = 0;
    if (count3 <= 0){
        return 0;
    }
    
    while (count1 >= 1){
        factorial1 = factorial1 * count1;
        count1--;
    }
    
    while (count2 >= 1){
        factorial2 = factorial2 * count2;
        count2--;
    }
    
    while (count3 >=1){
        factorial3 = factorial3 * count3;
        count3--;
    }
    
    combinations = factorial1 / (factorial2 * factorial3);
    return combinations;
}
",
ppax865,1697547560,2,"int Choose(int num1, int num2){
    int combinations, factorial1, factorial2, factorial3, count1, count2, count3;
    
    factorial1 = 1;
    factorial2 = 1;
    factorial3 = 1;
    count1 = num1;
    count2 = num2;
    count3 = num1 - num2;
    combinations = 0;
    if (count3 <= 0){
        return 0;
    }
    
    while (count1 >= 1){
        factorial1 = factorial1 * count1;
        count1--;
    }
    
    while (count2 >= 1){
        factorial2 = factorial2 * count2;
        count2--;
    }
    
    while (count3 >=1){
        factorial3 = factorial3 * count3;
        count3--;
    }
    
    combinations = factorial1 / (factorial2 * factorial3);
    return combinations;
}
",0
ppax865,1697549735,3,"int Choose(int num1, int num2){
    int combinations, count1, count2, count3;
    double factorial1, factorial2, factorial3;
    
    factorial1 = 1;
    factorial2 = 1;
    factorial3 = 1;
    count1 = num1;
    count2 = num2;
    count3 = (num1 - num2);
    combinations = 0;
    
    if (count3 <= 0){
        return 0;
    }
    
    while (count1 >= 1){
        factorial1 = factorial1 * count1;
        count1--;
    }
    
    while (count2 >= 1){
        factorial2 = factorial2 * count2;
        count2--;
    }
    
    while (count3 >= 1){
        factorial3 = factorial3 * count3;
        count3--;
    }
    
    combinations = factorial1 / (factorial2 * factorial3);
    return combinations;
}",
ppax865,1697549743,4,"int Choose(int num1, int num2){
    int combinations, count1, count2, count3;
    double factorial1, factorial2, factorial3;
    
    factorial1 = 1;
    factorial2 = 1;
    factorial3 = 1;
    count1 = num1;
    count2 = num2;
    count3 = (num1 - num2);
    combinations = 0;
    
    if (count3 <= 0){
        return 0;
    }
    
    while (count1 >= 1){
        factorial1 = factorial1 * count1;
        count1--;
    }
    
    while (count2 >= 1){
        factorial2 = factorial2 * count2;
        count2--;
    }
    
    while (count3 >= 1){
        factorial3 = factorial3 * count3;
        count3--;
    }
    
    combinations = factorial1 / (factorial2 * factorial3);
    return combinations;
}",0
ppax865,1697606187,5,"#include <math.h>

int Choose(int num1, int num2){
    int count1, count2, count3;
    double factorial1, factorial2, factorial3, combinations;
    
    factorial1 = 1;
    factorial2 = 1;
    factorial3 = 1;
    count1 = num1;
    count2 = num2;
    count3 = (num1 - num2);
    combinations = 0;
    
    if (count3 <= 0){
        return 0;
    }
    
    while (count1 >= 1){
        factorial1 = factorial1 * count1;
        count1--;
    }
    
    while (count2 >= 1){
        factorial2 = factorial2 * count2;
        count2--;
    }
    
    while (count3 >= 1){
        factorial3 = factorial3 * count3;
        count3--;
    }
    
    combinations = factorial1 / (factorial2 * factorial3);
    combinations = round(combinations);
    return combinations;
}
",
ppax865,1697606191,6,"#include <math.h>

int Choose(int num1, int num2){
    int count1, count2, count3;
    double factorial1, factorial2, factorial3, combinations;
    
    factorial1 = 1;
    factorial2 = 1;
    factorial3 = 1;
    count1 = num1;
    count2 = num2;
    count3 = (num1 - num2);
    combinations = 0;
    
    if (count3 <= 0){
        return 0;
    }
    
    while (count1 >= 1){
        factorial1 = factorial1 * count1;
        count1--;
    }
    
    while (count2 >= 1){
        factorial2 = factorial2 * count2;
        count2--;
    }
    
    while (count3 >= 1){
        factorial3 = factorial3 * count3;
        count3--;
    }
    
    combinations = factorial1 / (factorial2 * factorial3);
    combinations = round(combinations);
    return combinations;
}
",1
ppax865,1697610680,7,"#include <math.h>

int Choose(int num1, int num2){
    int count1, count2, count3;
    double factorial1, factorial2, factorial3, combinations;
    
    factorial1 = 1;
    factorial2 = 1;
    factorial3 = 1;
    count1 = num1;
    count2 = num2;
    count3 = (num1 - num2);
    combinations = 0;
    
    if (count3 <= 0){
        return 0;
    }
    
    while (count1 >= 1){
        factorial1 = factorial1 * count1;
        count1--;
    }
    
    while (count2 >= 1){
        factorial2 = factorial2 * count2;
        count2--;
    }
    
    while (count3 >= 1){
        factorial3 = factorial3 * count3;
        count3--;
    }
    
    combinations = factorial1 / (factorial2 * factorial3);
    combinations = round(combinations);
    return combinations;
}
// I worte this code and the code for task 1 at 2am before realising it was supposed to be a recursive function. Sorry!",
ppax865,1697610683,8,"#include <math.h>

int Choose(int num1, int num2){
    int count1, count2, count3;
    double factorial1, factorial2, factorial3, combinations;
    
    factorial1 = 1;
    factorial2 = 1;
    factorial3 = 1;
    count1 = num1;
    count2 = num2;
    count3 = (num1 - num2);
    combinations = 0;
    
    if (count3 <= 0){
        return 0;
    }
    
    while (count1 >= 1){
        factorial1 = factorial1 * count1;
        count1--;
    }
    
    while (count2 >= 1){
        factorial2 = factorial2 * count2;
        count2--;
    }
    
    while (count3 >= 1){
        factorial3 = factorial3 * count3;
        count3--;
    }
    
    combinations = factorial1 / (factorial2 * factorial3);
    combinations = round(combinations);
    return combinations;
}
// I worte this code and the code for task 1 at 2am before realising it was supposed to be a recursive function. Sorry!",1
pper327,1697933816,1,"int Choose (int n, int m)
{
    //Base Case
    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        return Choose (n - 1, m) + Choose (n - 1, m - 1);
    }

}",
pper327,1697933818,2,"int Choose (int n, int m)
{
    //Base Case
    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        return Choose (n - 1, m) + Choose (n - 1, m - 1);
    }

}",1
ppra303,1697979232,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base case: n choose 0 or n choose n is 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

int main() {
    int n = 6;
    int m = 2;
    int result = Choose(n, m);
    printf(""%d\n"", result); // Print the result, which is 15
    return 0;
}

",
ppra303,1697979242,2,"

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base case: n choose 0 or n choose n is 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}


",
ppra303,1697979616,3,"int Choose(int Numbern, int mumber) // Define the function

{
    if (mumber == 0 || mumber == Numbern) //  Fundamental combinatorial principles
    
    {
        return 1; //  If mumber is equal to 0 or if mumber is equal to Numbern than return 1
    }
    else // We do he below
    
    {
        // Here we handle the recursive case
        return Choose(Numbern - 1, mumber - 1) + Choose(Numbern - 1, mumber);
    }
}",
ppra303,1697979619,4,"int Choose(int Numbern, int mumber) // Define the function

{
    if (mumber == 0 || mumber == Numbern) //  Fundamental combinatorial principles
    
    {
        return 1; //  If mumber is equal to 0 or if mumber is equal to Numbern than return 1
    }
    else // We do he below
    
    {
        // Here we handle the recursive case
        return Choose(Numbern - 1, mumber - 1) + Choose(Numbern - 1, mumber);
    }
}",1
pshe539,1697418926,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == n || m == 0){
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
pshe539,1697418929,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == n || m == 0){
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
psin207,1698016597,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 ) {
        return 1;
    } else if (m==n) {
        return 1;
    }else{ 
       return Choose(n-1, m) + Choose(n-1, m-1);
    }
}
",
psin207,1698016604,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if (m == 0 ) {
        return 1;
    } else if (m == n) {
        return 1;
    }else{ 
       return Choose(n-1, m) + Choose(n-1, m-1);
    }
}
",1
pwat943,1697677981,1,"int Choose(int n, int m) {
    // Base cases:
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        // Recursive case:
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
pwat943,1697678016,2,"int Choose(int n, int m) {
    // Base cases:
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        // Recursive case:
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
pwil422,1698124427,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
pwil422,1698124482,2,"int Choose(int n, int m) {
    if (m==0 | m==n) {
        return 1;
    } else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",0
pwil422,1698124500,3,"int Choose(int n, int m) {
    if (m==0 || m==n) {
        return 1;
    } else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",
pwil422,1698124503,4,"int Choose(int n, int m) {
    if (m==0 || m==n) {
        return 1;
    } else {
        return Choose(n-1, m-1) + Choose(n-1, m);
    }
}",1
pwu278,1697893281,1,"int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
		}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
pwu278,1697893283,2,"int Choose(int n, int m)
{
	if (m == 0) {
		return 1;
	}
	else if (m == n) {
		return 1;
		}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
pxie161,1697455260,1,"int Choose(int n, int m){

if (m == 0){
    return 1;
}

if (m == n){
    return 1;
}

else if (0 < m && m < n){
    int z = (Choose(n - 1, m)) + (Choose(n - 1, m - 1));
    return z;
}

else{
    return 0;
}

}",
pxie161,1697455262,2,"int Choose(int n, int m){

if (m == 0){
    return 1;
}

if (m == n){
    return 1;
}

else if (0 < m && m < n){
    int z = (Choose(n - 1, m)) + (Choose(n - 1, m - 1));
    return z;
}

else{
    return 0;
}

}",1
pyou182,1697620269,1,"int factorial(int n)
{
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n-1);
    }
}

int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return printf(""%d"", factorial(n) / (factorial(m) * factorial(n - m)));
    }
}",
pyou182,1697620285,2,"int factorial(int n)
{
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n-1);
    }
}

int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return ""%d"", factorial(n) / (factorial(m) * factorial(n - m));
    }
}",
pyou182,1697620294,3,"int factorial(int n)
{
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n-1);
    }
}

int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return factorial(n) / (factorial(m) * factorial(n - m));
    }
}",
pyou182,1697620302,4,"int factorial(int n)
{
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n-1);
    }
}

int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return factorial(n) / (factorial(m) * factorial(n - m));
    }
}",0
pyou182,1697621493,5,"int Choose(int n, int m)
{
    if (m == 0 || m >= n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) * n / m;
    }
}",
pyou182,1697621496,6,"int Choose(int n, int m)
{
    if (m == 0 || m >= n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) * n / m;
    }
}",1
qche619,1698142596,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m < 0 || m > n) 
    {
        return 0;
    }

    int dp[n + 1][m + 1];
    for (int i = 0; i <= n; i++) 
    {
        for (int j = 0; j <= i && j <= m; j++) 
        {
            if (j == 0 || j == i) 
            {
                dp[i][j] = 1;
            } 
            else 
            {
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
            }
        }
    }

    return dp[n][m];
}",
qche619,1698142692,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m > n || m < 0) 
    {
        return 0;
    }

int dp[n + 1][m + 1];
    
    for (int i = 0; i <= n; i++) 
    {
        for (int j = 0; j <= i && j <= m; j++) 
        {
            if (j == 0 || j == i) 
            {
                dp[i][j] = 1;
            } 
            else 
            {
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
            }
        }
    }

    return dp[n][m];
}",
qche619,1698142704,3,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m > n || m < 0) 
    {
        return 0;
    }

int dp[n + 1][m + 1];
    
    for (int i = 0; i <= n; i++) 
    {
        for (int j = 0; j <= i && j <= m; j++) 
        {
            if (j == 0 || j == i) 
            {
                dp[i][j] = 1;
            } 
            else 
            {
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];
            }
        }
    }

    return dp[n][m];
}",1
qkan386,1697418068,1,"int Choose(int n, int m) {

	if (m == 0) {
		return 1;
	}

	else if (m == n) {
		return 1;
	}

	else{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",
qkan386,1697418071,2,"int Choose(int n, int m) {

	if (m == 0) {
		return 1;
	}

	else if (m == n) {
		return 1;
	}

	else{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",1
qmcc945,1697420780,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
qmcc945,1697420782,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",1
qtra338,1697868937,1,"int Choose(int n, int m) 
{
    if (n == m || m == 0) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }   
}",
qtra338,1697868939,2,"int Choose(int n, int m) 
{
    if (n == m || m == 0) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }   
}",1
qwu129,1698144700,1,"int Choose(int n, int m){
        if (m==0){
                return  1;
        }else if( m ==n){
                return 1;
        }
        if (m < n){
                return Choose(n-1,m) + Choose (n-1,m-1);
        }

}",
qwu129,1698144738,2,"int Choose(int n, int m){
        if (m==0){
                return  1;
        }else if( m ==n){
                return 1;
        }
        if (m < n){
                return Choose(n-1,m) 
                + Choose (n-1,m-1);
        }

}",
qwu129,1698144802,3,"int Choose(int n, int m)
{
        if (m==0)
        {
                return  1;
        }else if( m ==n)
        {
                return 1;
        }
        if (m < n)
        {
                return Choose(n-1,m) 
                + Choose (n-1,m-1);
        }

}",
qwu129,1698144838,4,"int Choose(int n, int m)
{
        if (m==0)
        {
                return  1;
        }else if( m ==n)
        {
                return 1;
        }
        if (m < n)
        {
                return Choose(n-1,m)  + Choose (n-1,m-1);
        }

}",
qwu129,1698144856,5,"void Choose(int n, int m)
{
        if (m==0)
        {
                return  1;
        }else if( m ==n)
        {
                return 1;
        }
        if (m < n)
        {
                return Choose(n-1,m)  + Choose (n-1,m-1);
        }

}",
qwu129,1698144872,6,"int Choose(int n, int m)
{
        if (m==0)
        {
                return  1;
        }else if( m ==n)
        {
                return 1;
        }
        if (m < n)
        {
                return Choose(n-1,m)  + Choose (n-1,m-1);
        }

}",
qwu129,1698144877,7,"int Choose(int n, int m)
{
        if (m==0)
        {
                return  1;
        }else if( m ==n)
        {
                return 1;
        }
        if (m < n)
        {
                return Choose(n-1,m)  + Choose (n-1,m-1);
        }

}",0
qwu129,1698145017,8,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (m < 0 || m > n) {
        return 0;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}
",
qwu129,1698145019,9,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (m < 0 || m > n) {
        return 0;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}
",1
qzho943,1697425472,1,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }

    
    return Choose(n-1, m-1) + Choose(n-1, m);
}",
qzho943,1697425475,2,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }

    
    return Choose(n-1, m-1) + Choose(n-1, m);
}",1
raic989,1697972203,1,"int Choose(int n, int m) {
	int result;

	if ((m == 0) || (m == n)) {
		result = 1;
	}
	else {
		result = ( Choose((n-1), m) + Choose((n - 1), (m - 1)));
	}
	return result;
}",
raic989,1697972207,2,"int Choose(int n, int m) {
	int result;

	if ((m == 0) || (m == n)) {
		result = 1;
	}
	else {
		result = ( Choose((n-1), m) + Choose((n - 1), (m - 1)));
	}
	return result;
}",1
rand321,1697507272,1,"int Choose(int n, int m){
    if(m == 0 || m == n){
        return 1;
    }
    return Choose(n - 1 , m) + Choose(n - 1 , m - 1);
}",
rand321,1697507274,2,"int Choose(int n, int m){
    if(m == 0 || m == n){
        return 1;
    }
    return Choose(n - 1 , m) + Choose(n - 1 , m - 1);
}",1
rbaj698,1698115177,1,"int Choose (int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	} else {
		int a = Choose(n-1,m-1) + Choose (n-1,m);
		return a;

	}
}",
rbaj698,1698115181,2,"int Choose (int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	} else {
		int a = Choose(n-1,m-1) + Choose (n-1,m);
		return a;

	}
}",1
rbat374,1697685709,1,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
rbat374,1697685711,2,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
rbat561,1697447364,1,"int Choose(int n, int m) {
    if (m == 0 || n == m)
    {
        return 1;
    } else if (0 < m && m < n)
    {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
rbat561,1697447384,2,"void Choose(int n, int m) {
    if (m == 0 || n == m)
    {
        return 1;
    } else if (0 < m && m < n)
    {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
rbat561,1697447396,3,"int Choose(int n, int m) {
    if (m == 0 || n == m)
    {
        return 1;
    } else if (0 < m && m < n)
    {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
rbat561,1697447429,4,"int Choose(int n, int m) {
    if (m == 0 || n == m)
    {
        return 1;
    } else if (0 < m && m < n)
    {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
    return;
}",
rbat561,1697447439,5,"int Choose(int n, int m) {
    if (m == 0 || n == m)
    {
        return 1;
    } else if (0 < m && m < n)
    {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
    return 0;
}",
rbat561,1697447445,6,"int Choose(int n, int m) {
    if (m == 0 || n == m)
    {
        return 1;
    } else if (0 < m && m < n)
    {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    }
    return 0;
}",1
rbui853,1697462286,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
rbui853,1697462288,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
rbus291,1697603189,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    int result;
    result = 1;
    for (int i = 1; i <= m; i++) {
        result = (result * (n - i + 1) )/ i  ;
    }
    return result;
}",1
rchi339,1698022226,1,"int Choose(int n, int m) 
{ 
    int ways, choose1, choose2;
    
    if (m == 0){
        return 1;
    } 
    if (n == m){
        return 1;
    }
    else if((0 < m) && (m < n)){
        choose1 = Choose((n-1), m);
        choose2 = Choose((n-1), (m-1));
        
        return choose1 + choose2;
    }
}",
rchi339,1698022235,2,"int Choose(int n, int m) 
{ 
    int choose1, choose2;
    
    if (m == 0){
        return 1;
    } 
    if (n == m){
        return 1;
    }
    else if((0 < m) && (m < n)){
        choose1 = Choose((n-1), m);
        choose2 = Choose((n-1), (m-1));
        
        return choose1 + choose2;
    }
}",
rchi339,1698022278,3,"int Choose(int n, int m) 
{ 
    int choose1, choose2;
    
    if (m == 0){
        return 1;
    } 
    if (n == m){
        return 1;
    }
    else if((0 < m) && (m < n)){
        choose1 = Choose((n-1), m);
        choose2 = Choose((n-1), (m-1));
        
        return choose1 + choose2;
    }
    return -1;
}",
rchi339,1698022285,4,"int Choose(int n, int m) 
{ 
    int choose1, choose2;
    
    if (m == 0){
        return 1;
    } 
    if (n == m){
        return 1;
    }
    else if((0 < m) && (m < n)){
        choose1 = Choose((n-1), m);
        choose2 = Choose((n-1), (m-1));
        
        return choose1 + choose2;
    }
    return -1;
}",1
rcou530,1697953769,1,"int Choose(int n, int m) {


    if (m == 0 || m == n) {
		return 1;
	}

    int firstChoose = Choose(n - 1, m);
    int secondChoose = Choose(n - 1, m - 1);
    int totalChoose = firstChoose + secondChoose;
    return totalChoose;
}",
rcou530,1697953772,2,"int Choose(int n, int m) {


    if (m == 0 || m == n) {
		return 1;
	}

    int firstChoose = Choose(n - 1, m);
    int secondChoose = Choose(n - 1, m - 1);
    int totalChoose = firstChoose + secondChoose;
    return totalChoose;
}",1
rdas322,1698106517,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}


",
rdas322,1698106519,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}


",1
rdic384,1698129386,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
rdic384,1698129388,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
rdon807,1698115496,1,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
rdon807,1698115498,2,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
rdun690,1697890302,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
rdun690,1697890305,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
rger104,1697627340,1,"int Choose(int n, int m)
{
	int output=0;
	if ((m == 0) | (n == m)) {
		output = 1;
	} else {
		output = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}

	return output;
}",
rger104,1697627343,2,"int Choose(int n, int m)
{
	int output=0;
	if ((m == 0) | (n == m)) {
		output = 1;
	} else {
		output = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}

	return output;
}",1
rhen291,1698136625,1,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		printf(""%d"", 1);
	}
	else {
		if (m > 0 && m < n) {
			Choose(n - 1, m);
			Choose(n - 1, m - 1);
		}
	}
}",
rhen291,1698136679,2,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		printf(""%d"", 1);
	}
	else {
		if (m > 0 && m < n) {
			Choose(n - 1, m);
			Choose(n - 1, m - 1);
		}
		else {
		    return 0
		}
	}
}",
rhen291,1698136684,3,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		printf(""%d"", 1);
	}
	else {
		if (m > 0 && m < n) {
			Choose(n - 1, m);
			Choose(n - 1, m - 1);
		}
		else {
		    return 0;
		}
	}
}",
rhen291,1698140665,4,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	return	Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
rhen291,1698140682,5,"#include <stdio.h>

int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	return	Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
rkan756,1697582606,1,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    }

     return Choose(n - 1, m) + Choose(n - 1, m- 1);
}",
rkan756,1697582609,2,"int Choose(int n, int m)
{
    if (m == 0 || n == m) {
        return 1;
    }

     return Choose(n - 1, m) + Choose(n - 1, m- 1);
}",1
rkar406,1697668408,1,"int Choose(int n, int m){
    if(m==0||m==n){
        return 1;
    }
    else{
        return Choose(n-1,m-1)+Choose(n-1,m);
    }
}",
rkar406,1697668415,2,"int Choose(int n, int m){
    if(m==0||m==n){
        return 1;
    }
    else{
        return Choose(n-1,m-1)+Choose(n-1,m);
    }
}",1
rkar406,1697753609,3,"int Choose(int n, int m){
    if(m==0||m==n){
        return 1;
        //there is only 1 way of choosing n out of n things
        //there is also only one way of chossing 0 things out n things
    }
    else{
        return Choose(n-1,m-1)+Choose(n-1,m);
        //using the nCr=(n-1)C(r-1)+(n-1)Cr formula logic
    }
}",
rkar406,1697753611,4,"int Choose(int n, int m){
    if(m==0||m==n){
        return 1;
        //there is only 1 way of choosing n out of n things
        //there is also only one way of chossing 0 things out n things
    }
    else{
        return Choose(n-1,m-1)+Choose(n-1,m);
        //using the nCr=(n-1)C(r-1)+(n-1)Cr formula logic
    }
}",1
rkha931,1697443727,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
rkha931,1697443732,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
rkir245,1698137867,1,"int Choose(int n, int m) 
{
    if (n == 0 || m == 0)
    {
        return 1;
    }
    else if (n == m)
    {
        return 1;
    }
    else
    {
       return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
rkir245,1698137871,2,"int Choose(int n, int m) 
{
    if (n == 0 || m == 0)
    {
        return 1;
    }
    else if (n == m)
    {
        return 1;
    }
    else
    {
       return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
rleg709,1698117065,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    int quotient, mod;
    if (n == m || m == 0) {
        return 1; // the number of ways of selecting m things out of a total of n things is only once.
    } else {
        return Choose((n - 1), m) + Choose((n - 1), (m - 1)); // Otherwise use formula to find the number of ways of selecting m things out of a total of n things.
    }
}",
rleg709,1698117075,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (n == m || m == 0) {
        return 1; // the number of ways of selecting m things out of a total of n things is only once.
    } else {
        return Choose((n - 1), m) + Choose((n - 1), (m - 1)); // Otherwise use formula to find the number of ways of selecting m things out of a total of n things.
    }
}",
rleg709,1698117083,3,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (n == m || m == 0) {
        return 1; // the number of ways of selecting m things out of a total of n things is only once.
    } else {
        return Choose((n - 1), m) + Choose((n - 1), (m - 1)); // Otherwise use formula to find the number of ways of selecting m things out of a total of n things.
    }
}",1
rlin108,1697610407,1,"int Choose(n, m)
{
	int result;
	// Base conditions
	if (m == 0) {
		result = 1;
		return result;
	}
	else if (m == n) {
		result = 1;
		return result;
	}
	// Recursive condition
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
rlin108,1697610512,2,"int Choose(int n, int m)
{
	int result;
	// Base conditions
	if (m == 0) {
		result = 1;
		return result;
	}
	else if (m == n) {
		result = 1;
		return result;
	}
	// Recursive condition
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
rlin108,1697610545,3,"int Choose(int n, int m)
{
	int result;
	// Base conditions
	if (m == 0) {
		result = 1;
		return result;
	}
	else if (m == n) {
		result = 1;
		return result;
	}
	// Recursive condition
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return result;
	}
}",
rlin108,1697610549,4,"int Choose(int n, int m)
{
	int result;
	// Base conditions
	if (m == 0) {
		result = 1;
		return result;
	}
	else if (m == n) {
		result = 1;
		return result;
	}
	// Recursive condition
	else {
		result = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return result;
	}
}",1
rmar633,1698109447,1,"int Choose(int n, int r){
    
    int nfact = 1; 
    int rfact = 1;
    int nminrfact = 1;
    int i, combination;
    for (i = 1; i < n; i++) {
        nfact = nfact*(i + 1);
    }
    for (i = 1; i < r; i++) {
        rfact = rfact*(i + 1);
    }
    for (i = 1; i < (n - r); i++) {
        nminrfact = nminrfact*(i + 1);
    }
    
    combination = nfact/(nminrfact*rfact);
    return combination;
    
}",
rmar633,1698109453,2,"int Choose(int n, int r){
    
    int nfact = 1; 
    int rfact = 1;
    int nminrfact = 1;
    int i, combination;
    for (i = 1; i < n; i++) {
        nfact = nfact*(i + 1);
    }
    for (i = 1; i < r; i++) {
        rfact = rfact*(i + 1);
    }
    for (i = 1; i < (n - r); i++) {
        nminrfact = nminrfact*(i + 1);
    }
    
    combination = nfact/(nminrfact*rfact);
    return combination;
    
}",0
rmar633,1698109736,3,"int Choose(int n, int r){
    
    double nfact = 1; 
    double rfact = 1;
    double nminrfact = 1;
    int i, combination;
    for (i = 1; i < n; i++) {
        nfact = nfact*(i + 1);
    }
    for (i = 1; i < r; i++) {
        rfact = rfact*(i + 1);
    }
    for (i = 1; i < (n - r); i++) {
        nminrfact = nminrfact*(i + 1);
    }
    
    combination = nfact/(nminrfact*rfact);
    return combination;
    
}",
rmar633,1698109739,4,"int Choose(int n, int r){
    
    double nfact = 1; 
    double rfact = 1;
    double nminrfact = 1;
    int i, combination;
    for (i = 1; i < n; i++) {
        nfact = nfact*(i + 1);
    }
    for (i = 1; i < r; i++) {
        rfact = rfact*(i + 1);
    }
    for (i = 1; i < (n - r); i++) {
        nminrfact = nminrfact*(i + 1);
    }
    
    combination = nfact/(nminrfact*rfact);
    return combination;
    
}",1
rmur989,1697719576,1,"int Choose(int n,int r) {
    int nfac = 1;
    int rfac = 1;
    int nminusrfac = 1;
    
    for(int i = n; i>0; i--){
        nfac = nfac*i;
    }
    for(int i = r; i>0; i--){
        rfac = rfac*i;
    }
    for(int i = (n-r); i>0; i--){
        nminusrfac = nminusrfac*i;
    }
    
    
    
    int ncr = nfac/(rfac*nminusrfac);
    
    return(ncr);
}",
rmur989,1697719578,2,"int Choose(int n,int r) {
    int nfac = 1;
    int rfac = 1;
    int nminusrfac = 1;
    
    for(int i = n; i>0; i--){
        nfac = nfac*i;
    }
    for(int i = r; i>0; i--){
        rfac = rfac*i;
    }
    for(int i = (n-r); i>0; i--){
        nminusrfac = nminusrfac*i;
    }
    
    
    
    int ncr = nfac/(rfac*nminusrfac);
    
    return(ncr);
}",0
rmur989,1697719830,3,"#include <stdio.h>

int Choose(int n,int r) {
    double nfac = 1;
    double rfac = 1;
    double nminusrfac = 1;
    
    for(int i = n; i>0; i--){
        nfac = nfac*i;
    }
    for(int i = r; i>0; i--){
        rfac = rfac*i;
    }
    for(int i = (n-r); i>0; i--){
        nminusrfac = nminusrfac*i;
    }
    
    
    
    int ncr = nfac/(rfac*nminusrfac);
    
    return(ncr);
}",
rmur989,1697719832,4,"#include <stdio.h>

int Choose(int n,int r) {
    double nfac = 1;
    double rfac = 1;
    double nminusrfac = 1;
    
    for(int i = n; i>0; i--){
        nfac = nfac*i;
    }
    for(int i = r; i>0; i--){
        rfac = rfac*i;
    }
    for(int i = (n-r); i>0; i--){
        nminusrfac = nminusrfac*i;
    }
    
    
    
    int ncr = nfac/(rfac*nminusrfac);
    
    return(ncr);
}",0
rmur989,1697719980,5,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
rmur989,1697719981,6,"int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
rnga701,1697701787,1,"int Choose(int n, int m){
    if (n == 0 || m == 0 || n == m) {
        return 1;
    } else if (m > 0 && m < n) {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
    return 0;
}",
rnga701,1697701789,2,"int Choose(int n, int m){
    if (n == 0 || m == 0 || n == m) {
        return 1;
    } else if (m > 0 && m < n) {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
    return 0;
}",1
rnig735,1698062786,1,"int Choose(int n, int m)
{
    int sum=0;
    if ((m==0)||(m==n)) {
        return 1;
    } else {
        sum += Choose(n-1, m);
        sum += Choose(n-1, m-1);
        return sum;
    }
}",
rnig735,1698062794,2,"int Choose(int n, int m)
{
    int sum=0;
    if ((m==0)||(m==n)) {
        return 1;
    } else {
        sum += Choose(n-1, m);
        sum += Choose(n-1, m-1);
        return sum;
    }
}",1
rpar376,1697683062,1,"int Choose(int n, int m) {
    int combos=0;
    if (m>0 && m<n) {
        combos += Choose((n-1),m);
        combos += Choose((n-1),(m-1));
    } else {
        combos=1;
    }

    return combos;
}",
rpar376,1697683066,2,"int Choose(int n, int m) {
    int combos=0;
    if (m>0 && m<n) {
        combos += Choose((n-1),m);
        combos += Choose((n-1),(m-1));
    } else {
        combos=1;
    }

    return combos;
}",1
rpat943,1697505093,1,"#include <stdio.h>

int Choose(int k, int x) {
    if (x == 0 || x == k) {
        return 1;
    } else {
        return Choose(k - 1, x - 1) + Choose(x - 1, m);
    }
}",0
rpat943,1697505103,2,"#include <stdio.h>

int Choose(int k, int x) {
    if (x == 0 || x == k) {
        return 1;
    } else {
        return Choose(k - 1, x - 1) + Choose(x - 1, x);
    }
}",0
rpat943,1697505260,3,"#include <stdio.h>

int Choose(int k, int x) {
    if (x == 0 || x == k) {
        return 1;
    } else {
        return Choose(k - 1, x - 1) + Choose(k - 1, x);
    }
}",1
rraj313,1697509236,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n)
    {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
rraj313,1697509241,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n)
    {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
rroz381,1697774078,1,"int Choose(int n, int m)
{
    int result = 1;
    
    if (m > 0 && m < n) {
        result = ((n-1) * m) + ((n-1) * (m-1));
    }
    
    return result;
}",
rroz381,1697774081,2,"int Choose(int n, int m)
{
    int result = 1;
    
    if (m > 0 && m < n) {
        result = ((n-1) * m) + ((n-1) * (m-1));
    }
    
    return result;
}",0
rroz381,1697777544,3,"int Choose(int n, int m)
{
    int result = 1;
    
    if (m > 0 && m < n)
    result = Choose(n - 1, m) + Choose(n - 1, m - 1);
    
    return result;
}",
rroz381,1697777548,4,"int Choose(int n, int m)
{
    int result = 1;
    
    if (m > 0 && m < n)
    result = Choose(n - 1, m) + Choose(n - 1, m - 1);
    
    return result;
}",1
rsha769,1698042427,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
rsha769,1698045286,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
rsha970,1697973732,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
rsha970,1697973734,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
rsin531,1698114276,1,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}

int main() {
    int n = 5; 
    int m = 2;
    int result = Choose(n, m);
    
    printf(""%d choose %d is %d\n"", n, m, result);
    return 0;
}
",
rsin531,1698114280,2,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}


",
rsin531,1698114284,3,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}


",1
rsin719,1697447656,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

",
rsin719,1697447667,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}

",1
rsmi948,1697685798,1,"int Choose(int n, int m)
{
    int nFactorial = 1, mFactorial = 1, nmFactorial = 1, combination = 0;

    for (int i = 1; i <= n; i++) {
        nFactorial *= i;
    }

    for (int i = 1; i <= m; i++) {
        mFactorial *= i;
    }

    for (int i = 1; i <= (n - m); i++) {
        nmFactorial *= i;
    }    
    combination = nFactorial / (mFactorial * nmFactorial);

    return combination;
}",
rsmi948,1697685800,2,"int Choose(int n, int m)
{
    int nFactorial = 1, mFactorial = 1, nmFactorial = 1, combination = 0;

    for (int i = 1; i <= n; i++) {
        nFactorial *= i;
    }

    for (int i = 1; i <= m; i++) {
        mFactorial *= i;
    }

    for (int i = 1; i <= (n - m); i++) {
        nmFactorial *= i;
    }    
    combination = nFactorial / (mFactorial * nmFactorial);

    return combination;
}",0
rsmi948,1697686698,3,"int Choose(int n, int m)
{
    long double j, nFactorial = 1, mFactorial = 1, nmFactorial = 1, combination = 0;

    for (int i = 1; i <= n; i++) {
        j = i;
        nFactorial *= j;
    }

    for (int i = 1; i <= m; i++) {
        j = i;
        mFactorial *= (double)i;
    }

    for (int i = 1; i <= (n - m); i++) {
        nmFactorial *= (double)i;
    }
    combination = nFactorial / (mFactorial * nmFactorial);

    return combination;
}",0
rsmi948,1697687546,4,"#include <math.h>

int Choose(int n, int m)
{
    long double j, nFactorial = 1, mFactorial = 1, nmFactorial = 1; 
    int combination = 0;

    for (int i = 1; i <= n; i++) {
        j = i;
        nFactorial *= j;
    }
    for (int i = 1; i <= m; i++) {
        j = i;
        mFactorial *= j;
    }
    for (int i = 1; i <= (n - m); i++) {
        j = i;
        nmFactorial *= j;  
    }
    combination = round(nFactorial / (mFactorial * nmFactorial));

    return combination;
}",
rsmi948,1697687548,5,"#include <math.h>

int Choose(int n, int m)
{
    long double j, nFactorial = 1, mFactorial = 1, nmFactorial = 1; 
    int combination = 0;

    for (int i = 1; i <= n; i++) {
        j = i;
        nFactorial *= j;
    }
    for (int i = 1; i <= m; i++) {
        j = i;
        mFactorial *= j;
    }
    for (int i = 1; i <= (n - m); i++) {
        j = i;
        nmFactorial *= j;  
    }
    combination = round(nFactorial / (mFactorial * nmFactorial));

    return combination;
}",1
rsta265,1697529947,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if ((m == 0) || (n == m)){
        return 1;
    }
    else{
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",
rsta265,1697529950,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if ((m == 0) || (n == m)){
        return 1;
    }
    else{
        return (Choose(n - 1, m) + Choose(n - 1, m - 1));
    }
}",1
rtan654,1697507938,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
rtan654,1697507946,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
rtap592,1698128389,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
rtap592,1698128396,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
rvog842,1698105160,1,"int Choose(int n, int m) {
    return (m == 0 || m == n) ? 1 : Choose(n-1, m-1) + Choose(n-1, m);
}
",
rvog842,1698105164,2,"int Choose(int n, int m) {
    return (m == 0 || m == n) ? 1 : Choose(n-1, m-1) + Choose(n-1, m);
}
",1
rwar748,1697441603,1,"int Choose(int n, int m){
    if(n == m){
        return 1;
    }
    if(m == 0){
        return 1;
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
rwar748,1697441607,2,"int Choose(int n, int m){
    if(n == m){
        return 1;
    }
    if(m == 0){
        return 1;
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
rzha972,1698134096,1,"#include <stdio.h>

int Choose(int n, int m){
    if (m == 0){
        return 1;
    }
    else if (n == 0 && m != 0){
        return 0;
    }
    else if (m > n){
        return 0;
    }
    else{
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
rzha972,1698134099,2,"#include <stdio.h>

int Choose(int n, int m){
    if (m == 0){
        return 1;
    }
    else if (n == 0 && m != 0){
        return 0;
    }
    else if (m > n){
        return 0;
    }
    else{
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
sabo272,1697489594,1,"#include <stdio.h>
int Choose(int n, int m)
{
	if (m == 0){
		return 1;
	}else if (m == n){
		return 1;
	}else if ( (m>0) && (n>m)) {
		return Choose(n-1, m) + Choose(n-1, m-1); // call function recursively twice and add sum.
	}	
		
}",
sabo272,1697489637,2,"#include <stdio.h>
int Choose(int n, int m)
{
	if (m == 0){
		return 1;
	}else if (m == n){
		return 1;
	}else  {
		return Choose(n-1, m) + Choose(n-1, m-1); // call function recursively twice and add sum.
	}	
		
}",
sabo272,1697489650,3,"#include <stdio.h>
int Choose(int n, int m)
{
	if (m == 0){
		return 1;
	}else if (m == n){
		return 1;
	}else {
		return Choose(n-1, m) + Choose(n-1, m-1); // call function recursively twice and add sum.
	}	
		
}",1
sali153,1697788493,1,"int Choose(int A, int B) {

	if (A == B || B == 0)
	{
		return 1;
	}
	else
	{
		return Choose(A - 1, B) + Choose(A - 1, B - 1);
		
	}

}",
sali153,1697788495,2,"int Choose(int A, int B) {

	if (A == B || B == 0)
	{
		return 1;
	}
	else
	{
		return Choose(A - 1, B) + Choose(A - 1, B - 1);
		
	}

}",1
sban919,1697465090,1,"#include <stdio.h>

int Choose (int n, int m){
    
    /* Calculate n! */
    int factorial_n = 1;
    for (int i = 1; i <= n; i++){
        factorial_n *= i;
    }
    
    /* Calculate m! */
    int factorial_m = 1;
    for (int j = 1; j <= m; j++){
        factorial_m *= j;
    }
    
    /* Calculate (n-m)! */
    int factorial_nm = 1;
    for (int k = 1; k <= (n-m); k++){
        factorial_nm *= k;
    }
    
    /* Calculate n choose m */
    int choose = factorial_n / (factorial_m * factorial_nm);
    
    return choose;
}",0
sban919,1697465911,2,"#include <stdio.h>

int Choose (int n, int m){
    
    /* Calculate n!/(n-m)! */
    int factorial_top = 1;
    for (int i = n; i > n-m; i--){
        factorial_top *= i;
    }
    
    /* Calculate m! */
    int factorial_bottom = 1;
    for (int j = 1; j <= m; j++){
        factorial_bottom *= j;
    }
    
    /* Calculate n choose m */
    int choose = factorial_top / factorial_bottom;
    
    return choose;
}",
sban919,1697465920,3,"#include <stdio.h>

int Choose (int n, int m){
    
    /* Calculate n!/(n-m)! */
    int factorial_top = 1;
    for (int i = n; i > n-m; i--){
        factorial_top *= i;
    }
    
    /* Calculate m! */
    int factorial_bottom = 1;
    for (int j = 1; j <= m; j++){
        factorial_bottom *= j;
    }
    
    /* Calculate n choose m */
    int choose = factorial_top / factorial_bottom;
    
    return choose;
}",0
sban919,1697537119,4,"#include <stdio.h>

int Choose (int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
sban919,1697537366,5,"#include <stdio.h>

int Choose (int n, int m)
{
    if (m == 0 || m == n)
    {
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
sbas887,1698042327,1,"int Choose(int number1, int number2) {

	if (number2 == 0) {
		return 1;
	}
	else if (number1 == number2) {
		return 1;
	}
	else {
		return Choose(number1 - 1, number2) + Choose(number1 - 1, number2 - 1);
	}

}",
sbas887,1698042329,2,"int Choose(int number1, int number2) {

	if (number2 == 0) {
		return 1;
	}
	else if (number1 == number2) {
		return 1;
	}
	else {
		return Choose(number1 - 1, number2) + Choose(number1 - 1, number2 - 1);
	}

}",1
sben564,1697878637,1,"int Choose(int x, int y) {
    if (y == 0) {
        
        return 1;
        
    }
    
    if (x == y) {
        
        return 1;
        
    }
    
    return Choose(x - 1, y - 1) + Choose(x - 1, y);
        
}",
sben564,1697878639,2,"int Choose(int x, int y) {
    if (y == 0) {
        
        return 1;
        
    }
    
    if (x == y) {
        
        return 1;
        
    }
    
    return Choose(x - 1, y - 1) + Choose(x - 1, y);
        
}",1
sbha564,1698098744,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
sbha564,1698098746,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
sbro373,1697493520,1,"int Choose(int n, int k)
{
    if (k == 0 || k == n)
        return 1;
    else if (k > n)
        return 0;
    else
        return Choose(n - 1, k - 1) + Choose(n - 1, k);
}",
sbro373,1697508236,2,"int Choose(int n, int k)
{
    if (k == 0 || k == n)  // Only one combination possible.
        return 1;
    else
        return Choose(n - 1, k - 1) + Choose(n - 1, k);
}",
sbro373,1697508240,3,"int Choose(int n, int k)
{
    if (k == 0 || k == n)  // Only one combination possible.
        return 1;
    else
        return Choose(n - 1, k - 1) + Choose(n - 1, k);
}",1
scar362,1697629207,1,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else if ( 0 < m < n){
    return Choose((n-1), m) + Choose((n-1), (m-1));    
    }
    }",
scar362,1697629312,2,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else if ( 0 < m && m < n){
    return Choose((n-1), m) + Choose((n-1), (m-1));    
    }
}",
scar362,1697629513,3,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else if ( 0 < m && m < n){
    return Choose((n-1), m) + Choose((n-1), (m-1));    
    } else {
    return 0;
  }
}",
scar362,1697629526,4,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    } else if (n == m){
        return 1;
    } else if ( 0 < m && m < n){
    return Choose((n-1), m) + Choose((n-1), (m-1));    
    } else {
    return 0;
  }
}",1
sche525,1697802828,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
sche525,1697802829,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
scho575,1698019950,1,"#include <stdio.h>

int Factorial(int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * Factorial(n - 1);
    }
}

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
scho575,1698019953,2,"#include <stdio.h>

int Factorial(int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * Factorial(n - 1);
    }
}

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
schu718,1697767735,1,"#include <stdio.h>

int Choose(int n, int m)
{
    if(m == 0 || m == n)
    {
        return 1;
    }
    else 
    {
       return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
schu718,1697767738,2,"#include <stdio.h>

int Choose(int n, int m)
{
    if(m == 0 || m == n)
    {
        return 1;
    }
    else 
    {
       return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
schu800,1697944668,1,"int Choose(int n, int m){
        if (n==m || m==0){
                return 1;
        }
        else{
                return Choose(n - 1, m) + Choose(n - 1, m - 1);
        }
}
",
schu800,1697944670,2,"int Choose(int n, int m){
        if (n==m || m==0){
                return 1;
        }
        else{
                return Choose(n - 1, m) + Choose(n - 1, m - 1);
        }
}
",1
scol559,1698117630,1,"int Choose(int n, int m)
{
    if (m == 0)
    {
        return 1;
    }

    if (m == n)
    {
        return 1;
    }

    if (m > 0 && m < n)
    {
        int answer = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return answer;
    }
    else
    {
        return 0;
    }
}",
scol559,1698117632,2,"int Choose(int n, int m)
{
    if (m == 0)
    {
        return 1;
    }

    if (m == n)
    {
        return 1;
    }

    if (m > 0 && m < n)
    {
        int answer = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return answer;
    }
    else
    {
        return 0;
    }
}",1
sdal739,1697969294,1,"int Choose(int n, int m) {
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",
sdal739,1697969296,2,"int Choose(int n, int m) {
	if (m == 0 || n == m) {
		return 1;
	}
	else {
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
}",1
sden589,1698132406,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }

    if (0 < m && m < n){
        int a = Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    
    return a;
}",
sden589,1698132439,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    int a;
    
    if (0 < m && m < n){
        a = Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    
    return a;
}",1
sekb555,1697430475,1,"//returns n choose m
int Choose(int n, int m)
{
    if((m == 0) || (m == n))
    {
        return 1;
    }
    else if((0 < m) && ( m < n))
    {
        return (Choose(n-1, m) + (Choose(n-1, m-1)));
    }
    else
    {
        return n;
    }
    
}",1
sekb555,1697432178,2,"//returns n choose m
int Choose(int n, int m)
{
    //checks if either m is 0 or m is = to n and if either is true then returns 1:
    if((m == 0) || (m == n))
    {
        return 1;
    }
    //checks if m is greater then 0 and n is greater then m:
    else if((0 < m) && ( m < n))
    {
        return (Choose(n-1, m) + (Choose(n-1, m-1)));
    }
    //otherwise:
    else
    {
        return n;
    }
    
}",1
sgal263,1698050065,1,"int Choose(int n, int m){

//factorial n:
int factorialn = 1;
for (int i = 0; i < n; i++){
factorialn = factorialn * (n - i);
}


//factorial m
int factorialm = 1;
for (int j = 0; j < m; j++){
factorialm = factorialm * (m - j);
}


//factorial n - m
int factorial = 1;
for (int k = 0; k < (n - m); k++){
factorial = factorial * (n - m - k);
}


int combs = factorialn / (factorialm * factorial);
return combs;

}

int main(void){
printf(""%d"", Choose(6, 2));
}",
sgal263,1698050077,2,"int Choose(int n, int m){

//factorial n:
int factorialn = 1;
for (int i = 0; i < n; i++){
factorialn = factorialn * (n - i);
}


//factorial m
int factorialm = 1;
for (int j = 0; j < m; j++){
factorialm = factorialm * (m - j);
}


//factorial n - m
int factorial = 1;
for (int k = 0; k < (n - m); k++){
factorial = factorial * (n - m - k);
}


int combs = factorialn / (factorialm * factorial);
return combs;

}
",
sgal263,1698050080,3,"int Choose(int n, int m){

//factorial n:
int factorialn = 1;
for (int i = 0; i < n; i++){
factorialn = factorialn * (n - i);
}


//factorial m
int factorialm = 1;
for (int j = 0; j < m; j++){
factorialm = factorialm * (m - j);
}


//factorial n - m
int factorial = 1;
for (int k = 0; k < (n - m); k++){
factorial = factorial * (n - m - k);
}


int combs = factorialn / (factorialm * factorial);
return combs;

}
",0
sgal263,1698050330,4,"int Choose(int n, int m){

//factorial n:
double factorialn = 1;
for (int i = 0; i < n; i++){
factorialn = factorialn * (n - i);
}


//factorial m
double factorialm = 1;
for (int j = 0; j < m; j++){
factorialm = factorialm * (m - j);
}


//factorial n - m
double factorial = 1;
for (int k = 0; k < (n - m); k++){
factorial = factorial * (n - m - k);
}

int combs = factorialn / (factorialm * factorial);
return combs;

}",
sgal263,1698050336,5,"int Choose(int n, int m){

//factorial n:
double factorialn = 1;
for (int i = 0; i < n; i++){
factorialn = factorialn * (n - i);
}


//factorial m
double factorialm = 1;
for (int j = 0; j < m; j++){
factorialm = factorialm * (m - j);
}


//factorial n - m
double factorial = 1;
for (int k = 0; k < (n - m); k++){
factorial = factorial * (n - m - k);
}

int combs = factorialn / (factorialm * factorial);
return combs;

}",0
sgal263,1698050673,6,"int Choose(int n, int m){

    //factorial n:
    double factorialn = 1;
    for (int i = 1; i <= n; i++){
        factorialn = factorialn * i;
    }

    //factorial m
    double factorialm = 1;
    for (int j = 1; j <= m; j++){
        factorialm = factorialm * j;
    }

    //factorial n - m
    double factorial = 1;
    for (int k = 1; k <= (n - m); k++){
        factorial = factorial * k;
    }


int combs = factorialn / (factorialm * factorial);
    

return combs;

}",
sgal263,1698050677,7,"int Choose(int n, int m){

    //factorial n:
    double factorialn = 1;
    for (int i = 1; i <= n; i++){
        factorialn = factorialn * i;
    }

    //factorial m
    double factorialm = 1;
    for (int j = 1; j <= m; j++){
        factorialm = factorialm * j;
    }

    //factorial n - m
    double factorial = 1;
    for (int k = 1; k <= (n - m); k++){
        factorial = factorial * k;
    }


int combs = factorialn / (factorialm * factorial);
    

return combs;

}",1
sgal263,1698056465,8,"int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    } else if (m == 1) {
        return n;
    } else {
        // Recursive call
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
sgal263,1698056468,9,"int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    } else if (m == 1) {
        return n;
    } else {
        // Recursive call
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
sgib237,1698121360,1,"int Choose(int n, int m) {
  
    if (m == 0 || m == n) {
        return 1;
    }

    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
sgib237,1698121387,2,"int Choose(int n, int m) {
  
    if ((m == 0) || (m == n)) {
        return 1;
    }

    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
sgib237,1698121396,3,"int Choose(int n, int m) {
  
    if ((m == 0) || (m == n)) {
        return 1;
    }

    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
shan333,1698115899,1,"int Choose(int n, int m)
{
    if (m == 0 || n == m){
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n-1, m-1);
    }
}",
shan333,1698115902,2,"int Choose(int n, int m)
{
    if (m == 0 || n == m){
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n-1, m-1);
    }
}",1
shan790,1697537485,1,"int Choose(int n, int m) {
	
	if ((m == 0) || (n == m)) {
		return 1;
	}
	else {
		return (Choose(n-1, m) + Choose(n-1, m-1));
	}
}",
shan790,1697537487,2,"int Choose(int n, int m) {
	
	if ((m == 0) || (n == m)) {
		return 1;
	}
	else {
		return (Choose(n-1, m) + Choose(n-1, m-1));
	}
}",1
she940,1697509024,1,"int Choose(int n, int m) {
	/*x = x / 2;*/
	if (m == 0 || m == n) {
		return 1;
	}
	else if (m > 0 && n > m){
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",
she940,1697509028,2,"int Choose(int n, int m) {
	/*x = x / 2;*/
	if (m == 0 || m == n) {
		return 1;
	}
	else if (m > 0 && n > m){
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",1
shsa718,1698110848,1,"int Choose(int n, int m)
{
    // Base cases:
    if (m>n){
        return 0;
    }

    if(m == 0){
        return 1;
    }

    if (m==n){
        return 1;
    }

    // Working towards base cases
    return (Choose(n-1,m)+Choose(n-1,m-1));

}",
shsa718,1698110850,2,"int Choose(int n, int m)
{
    // Base cases:
    if (m>n){
        return 0;
    }

    if(m == 0){
        return 1;
    }

    if (m==n){
        return 1;
    }

    // Working towards base cases
    return (Choose(n-1,m)+Choose(n-1,m-1));

}",1
shua365,1697846512,1,"int Choose(int n, int m){
    if (m==n || m==0){
        return 1;
    } 
    return Choose(n-1,m) + Choose(n-1, m-1);
}",
shua365,1697846515,2,"int Choose(int n, int m){
    if (m==n || m==0){
        return 1;
    } 
    return Choose(n-1,m) + Choose(n-1, m-1);
}",1
shum116,1697799809,1,"int Choose(int n, int m)
{
	
	if (m==0 || m==n) {
		return 1;
	
	}
	else  {
		
		return Choose(n-1, m)+ Choose (n-1,m-1);
	}
	
}",
shum116,1697799814,2,"int Choose(int n, int m)
{
	
	if (m==0 || m==n) {
		return 1;
	
	}
	else  {
		
		return Choose(n-1, m)+ Choose (n-1,m-1);
	}
	
}",1
sike083,1697850993,1,"int Choose(int n, int m) {
    if (m == 0 || m == n)
        return 1;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
sike083,1697850996,2,"int Choose(int n, int m) {
    if (m == 0 || m == n)
        return 1;
    else
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
sjaf029,1698020475,1,"int Choose(int n, int m) {
	if (m == 0 || m == n) {

		return 1;
	}
	else {
		return Choose(n - 1, m - 1) + Choose(n - 1, m);
	}
}",
sjaf029,1698020481,2,"int Choose(int n, int m) {
	if (m == 0 || m == n) {

		return 1;
	}
	else {
		return Choose(n - 1, m - 1) + Choose(n - 1, m);
	}
}",1
sjai563,1697941002,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
sjai563,1697941035,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) 
{
    if (k > n)
        return 0;
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
sjai563,1697941045,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) 
{
    if (n > m)
        return 0;
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
sjai563,1697941055,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) 
{
    if (m > n)
        return 0;
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
sjai563,1697941132,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m) 
{
    if (m > n)
        return 0;
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
sjam309,1697787821,1,"int Choose(int n, int m)
{
    if(m == 0){
        return 1;
    }else if(m == n){
        return 1;
    }else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    
}",
sjam309,1697787889,2,"int Choose(int n, int m)
{
    if(m == 0){
        return 1;
    }else if(m == n){
        return 1;
    }else{
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    
}",1
sjob296,1697531697,1,"#include <stdio.h>

int factorial(int num) 
{
    if (num == 0 || num == 1) 
    {
        return 1;
    } else 
    {
        return num * factorial(num - 1);
    }
}

int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    } else 
    {
        return factorial(n) / (factorial(m) * factorial(n - m));
    }
}",
sjob296,1697531699,2,"#include <stdio.h>

int factorial(int num) 
{
    if (num == 0 || num == 1) 
    {
        return 1;
    } else 
    {
        return num * factorial(num - 1);
    }
}

int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    } else 
    {
        return factorial(n) / (factorial(m) * factorial(n - m));
    }
}",0
sjob296,1697532842,3,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
sjob296,1697532844,4,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
skan221,1697782609,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n)
        return 1;
    return (Choose(n - 1, m - 1) + Choose(n - 1, m));
}",
skan221,1697782701,2,"int Choose(int n, int m) 
{
    if (m == 0 || m == n)
        return 1;
    return (Choose(n - 1, m - 1) + Choose(n - 1, m));
}",1
skea516,1697496176,1,"int Choose(int n, int m) {
    int choose;
    if (n == m || m == 0) {
        choose = 1;
    } else {
        choose = Choose(n - 1, m) + Choose(n - 1, m -1);
    }
return choose; 
}",1
skmu887,1698021198,1,"#include <stdio.h>

int Choose(int n,int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
skmu887,1698021201,2,"#include <stdio.h>

int Choose(int n,int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
skop291,1698114410,1,"#include <stdio.h>

// Function prototypes
int Choose(int n, int m);
int Factorial(int num);

int main() {
    // Test the function with the example provided
    printf(""%d"", Choose(6, 2));
    return 0;
}

// Recursive function to calculate ""n choose m""
int Choose(int n, int m) {
    // Base",
skop291,1698114427,2,"#include <stdio.h>

// Function prototypes
int Choose(int n, int m);
int Factorial(int num);

}

// Recursive function to calculate ""n choose m""
int Choose(int n, int m) {
    // Base",
skop291,1698114450,3,"#include <stdio.h>

// Function prototypes
int Choose(int n, int m);
int Factorial(int num);

int main() {
    // Test the function with the example provided
    printf(""%d"", Choose(6, 2));
    return 0;
}

// Recursive function to calculate ""n choose m""
int Choose(int n, int m) {
    // Base case: when m is 0 or m is equal to",
skop291,1698114457,4,"#include <stdio.h>

// Function prototypes
int Choose(int n, int m);
int Factorial(int num);



// Recursive function to calculate ""n choose m""
int Choose(int n, int m) {
    // Base case: when m is 0 or m is equal to",
skop291,1698114466,5,"#include <stdio.h>

// Function prototypes
int Choose(int n, int m);
int Factorial(int num);



",
skop291,1698114486,6,"#include <stdio.h>

// Function prototypes
int Choose(int n, int m);
int Factorial(int num);
// Test the function with the example provided
    printf(""%d"", Choose(6, 2));
    return 0;
}


",
skop291,1698114507,7,"#include <stdio.h>

// Function prototypes
int Choose(int n, int m);
int Factorial(int num);
int main() {
// Test the function with the example provided
    printf(""%d"", Choose(6, 2));
    return 0;
}


",
skop291,1698114552,8,"#include <stdio.h>

// Function prototype
int Choose(int n, int m);

int main() {
    // Test the function with the example provided
    printf(""%d\n"", Choose(6, 2));
    return 0;
}

// Recursive function to calculate ""n choose m""
int Choose(int n, int m) {
    // Base cases
    if (m == 0) return 1;
    if (m > n) return 0;
    if (m == n) return 1;

    // Recursive step
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}

",
skop291,1698114558,9,"#include <stdio.h>

// Function prototype
int Choose(int n, int m);


// Recursive function to calculate ""n choose m""
int Choose(int n, int m) {
    // Base cases
    if (m == 0) return 1;
    if (m > n) return 0;
    if (m == n) return 1;

    // Recursive step
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}

",
skop291,1698114560,10,"#include <stdio.h>

// Function prototype
int Choose(int n, int m);


// Recursive function to calculate ""n choose m""
int Choose(int n, int m) {
    // Base cases
    if (m == 0) return 1;
    if (m > n) return 0;
    if (m == n) return 1;

    // Recursive step
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}

",1
skul970,1697432121,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
skul970,1697432126,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
slam669,1697442957,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
        
    }else { 
        return Choose(n-1,m) + Choose(n-1,m-1);
    }
}
",1
slie508,1697931855,1,"int Choose(int n, int m) 
{
    if (m == 0 || n == m) {
        return 1;
    } else if (0<m && m<n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    } else {
        return 0;
    }
}",
slie508,1697931859,2,"int Choose(int n, int m) 
{
    if (m == 0 || n == m) {
        return 1;
    } else if (0<m && m<n) {
        return Choose(n-1, m) + Choose(n-1, m-1);
    } else {
        return 0;
    }
}",1
sluo487,1698122567,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (m == 1) {
        return n;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
sluo487,1698122569,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else if (m == 1) {
        return n;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
smac708,1697511904,1,"#include <stdio.h> 

int Choose(int n, int m)
{ 
    if (m == 0) { 
        return 1;

    }else if (n==m) {  
        return 1;
    } else { 
        return Choose(n-1, m) + Choose(n-1, m-1); 
    }
}",1
sman821,1697928361,1,"int Choose(int n, int m) {

    if ((m == 0) || (m == n)) {
        return 1;
    } else {
        return Choose(n-1,m) + Choose(n-1,m-1);
    }
}",1
sman833,1697523802,1,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

    return 0;
}",
sman833,1697523805,2,"int Choose(int n, int m)
{
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

    return 0;
}",1
smck855,1698039856,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
smou122,1697600326,1,"
int Choose(int a, int b){
    int c;
    int placeholder = a - 1;
    int topbracket = a;
    while (placeholder != 0){
        topbracket = topbracket * placeholder;
        placeholder = placeholder - 1;
    }
    int secondbracket = b;
    int placeholdertwo = b - 1;
    while (placeholdertwo != 0){
        secondbracket = secondbracket * placeholdertwo;
        placeholdertwo = placeholdertwo - 1;
    }
    int thirdbracket = a - b;
    int placeholderthree = a - b - 1;
    while (placeholderthree != 0){
        thirdbracket = thirdbracket * placeholderthree;
        placeholderthree = placeholderthree - 1;
    }
    c = topbracket / secondbracket;
    c = c / thirdbracket;
    return c;

    
}",
smou122,1697600328,2,"
int Choose(int a, int b){
    int c;
    int placeholder = a - 1;
    int topbracket = a;
    while (placeholder != 0){
        topbracket = topbracket * placeholder;
        placeholder = placeholder - 1;
    }
    int secondbracket = b;
    int placeholdertwo = b - 1;
    while (placeholdertwo != 0){
        secondbracket = secondbracket * placeholdertwo;
        placeholdertwo = placeholdertwo - 1;
    }
    int thirdbracket = a - b;
    int placeholderthree = a - b - 1;
    while (placeholderthree != 0){
        thirdbracket = thirdbracket * placeholderthree;
        placeholderthree = placeholderthree - 1;
    }
    c = topbracket / secondbracket;
    c = c / thirdbracket;
    return c;

    
}",0
smou122,1697601243,3,"int Choose(int a, int b){
    int answer = 1;
    int c;
    if (b == 1){
        return a;
    }
    if (a == b){
        return 1;
    }
    int diff = a - b;
    int i;
    for (i = diff + 1; i <= a; i++){
        answer = answer * i;
    }
    int j;
    for (j = 1; j <= b; j++){
        answer = answer / j;
    }
    c = answer;
    return c;

    
}",
smou122,1697601245,4,"int Choose(int a, int b){
    int answer = 1;
    int c;
    if (b == 1){
        return a;
    }
    if (a == b){
        return 1;
    }
    int diff = a - b;
    int i;
    for (i = diff + 1; i <= a; i++){
        answer = answer * i;
    }
    int j;
    for (j = 1; j <= b; j++){
        answer = answer / j;
    }
    c = answer;
    return c;

    
}",0
smou122,1697601811,5,"int Choose(int a, int b){
    int answer = 1;
    int c;
    if (b == 1){
        return a;
    }
    if (a == b){
        return 1;
    }
    int diff = a - b;
    int i;
    int divisor = 1;
    for (i = diff + 1; i <= a; i++){
        answer = answer * i;
        if (divisor <= b){
            if ((answer % divisor) == 0){
                answer = answer / divisor;
                divisor++;
            }
        }
    }
    c = answer;
    return c;

    
}",
smou122,1697601813,6,"int Choose(int a, int b){
    int answer = 1;
    int c;
    if (b == 1){
        return a;
    }
    if (a == b){
        return 1;
    }
    int diff = a - b;
    int i;
    int divisor = 1;
    for (i = diff + 1; i <= a; i++){
        answer = answer * i;
        if (divisor <= b){
            if ((answer % divisor) == 0){
                answer = answer / divisor;
                divisor++;
            }
        }
    }
    c = answer;
    return c;

    
}",1
smun623,1698102212,1,"int Choose (int n, int m){
    
    if ( m == 0){
        return 1;
        }
        
        if m( == n){
            return 1;
        }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
        
}",
smun623,1698102220,2,"int Choose (int n, int m){
    
    if ( m == 0){
        return 1;
        }
        
        if (m == n){
            return 1;
        }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
        
}",
smun623,1698102228,3,"int Choose (int n, int m){
    
    if ( m == 0){
        return 1;
        }
        
        if (m == n){
            return 1;
        }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
        
}",1
snas404,1698109174,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m)
{
	if (n == m || m == 0) {
		return 1;
	}else {
		return Choose((n-1), m) + Choose((n-1), (m-1));
	}


}
",
snas404,1698109176,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m)
{
	if (n == m || m == 0) {
		return 1;
	}else {
		return Choose((n-1), m) + Choose((n-1), (m-1));
	}


}
",1
span558,1697429568,1,"int choose(int n, int m) {
    if (m == 0 || m == n)
    return 1;
    
    return choose(n - 1, m - 1) + choose(n - 1, m);
}",
span558,1697429589,2,"int Choose(int n, int m) {
    if (m == 0 || m == n)
    return 1;
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
span558,1697429596,3,"int Choose(int n, int m) {
    if (m == 0 || m == n)
    return 1;
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
spar473,1697596577,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
spar473,1697596580,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
spar820,1697859210,1,"int Choose(int n, int m) {
    
    if ((n == m)||(m == 0)) {
        return 1;
    } else {
      int first = n - 1;
      int second = m - 1;
      int answer1 = Choose (first, m);
      int answer2 = Choose (first, second);
      return answer1 + answer2;
    }
    
}
",
spar820,1697859212,2,"int Choose(int n, int m) {
    
    if ((n == m)||(m == 0)) {
        return 1;
    } else {
      int first = n - 1;
      int second = m - 1;
      int answer1 = Choose (first, m);
      int answer2 = Choose (first, second);
      return answer1 + answer2;
    }
    
}
",1
srak374,1698141763,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
srak374,1698141885,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
srou953,1698059078,1,"int Choose(int n, int m) 
{
    if(m == 0 || m==n)
    {
        return 1;
    }
    
    else
    {
       Recursive_1 = Choose(n-1, m-1);
       Recursive_2 = Choose(n-1, m);
       Recursive_T = Recursive_1 + Recursive_2;
}
return Recursive_T
}",
srou953,1698059097,2,"int Choose(int n, int m) 
{
    if(m == 0 || m==n)
    {
        return 1;
    }
    
    else
    {
       int Recursive_1 = Choose(n-1, m-1);
        int Recursive_2 = Choose(n-1, m);
       int Recursive_T = Recursive_1 + Recursive_2;
}
return Recursive_T
}",
srou953,1698059107,3,"int Choose(int n, int m) 
{
    if(m == 0 || m==n)
    {
        return 1;
    }
    
    else
    {
       int Recursive_1 = Choose(n-1, m-1);
        int Recursive_2 = Choose(n-1, m);
       int Recursive_T = Recursive_1 + Recursive_2;
}
return Recursive_T;
}",
srou953,1698059232,4,"int Choose(int n, int m) 
{
    int Recursive_T;
    
    if(m == 0 || m==n)
    {
        return 1;
    }
    
    else
    {
       int Recursive_1 = Choose(n-1, m-1);
        int Recursive_2 = Choose(n-1, m);
       Recursive_T = Recursive_1 + Recursive_2;
}
return Recursive_T;
}",
srou953,1698059235,5,"int Choose(int n, int m) 
{
    int Recursive_T;
    
    if(m == 0 || m==n)
    {
        return 1;
    }
    
    else
    {
       int Recursive_1 = Choose(n-1, m-1);
        int Recursive_2 = Choose(n-1, m);
       Recursive_T = Recursive_1 + Recursive_2;
}
return Recursive_T;
}",1
ssco465,1698094389,1,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
ssco465,1698094397,2,"#include <stdio.h>

int Choose(int n, int m) {
    
    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
ssey266,1697773347,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }

    int chooseNMinus1MMinus1 = Choose(n - 1, m - 1);
    int chooseNMinus1M = Choose(n - 1, m);

    return chooseNMinus1MMinus1 + chooseNMinus1M;
}
",
ssey266,1697773350,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }

    int chooseNMinus1MMinus1 = Choose(n - 1, m - 1);
    int chooseNMinus1M = Choose(n - 1, m);

    return chooseNMinus1MMinus1 + chooseNMinus1M;
}
",1
ssiv093,1698136562,1,"int Choose(int n, int m) { if (m == 0 || m == n) { return 1; } else { return Choose(n - 1, m - 1) + Choose(n - 1, m); } }",1
sspa275,1698125706,1,"int Factorial(int input){
    int output = 1;
    for(input; input > 0; input--){
        output *= input;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",
sspa275,1698125715,2,"int Factorial(int input){
    int output = 1;
    for( input > 0; input--){
        output *= input;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",
sspa275,1698125720,3,"int Factorial(int input){
    int output = 1;
    for(input > 0; input--){
        output *= input;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",
sspa275,1698125727,4,"int Factorial(int input){
    int output = 1;
    for(input > 0; input--;){
        output *= input;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",
sspa275,1698125741,5,"int Factorial(int input){
    int output = 1;
    for(input--;){
        output *= input;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",
sspa275,1698125759,6,"int Factorial(int input){
    int output = 1;
    for(int i = input; input > 0; input--;){
        output *= input;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",
sspa275,1698125770,7,"int Factorial(int input){
    int output = 1;
    for(int i = input; i > 0; i--;){
        output *= i;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",
sspa275,1698125776,8,"int Factorial(int input){
    int output = 1;
    for(int i = input; i > 0; i--){
        output *= i;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",
sspa275,1698125779,9,"int Factorial(int input){
    int output = 1;
    for(int i = input; i > 0; i--){
        output *= i;
    }
    return output;
}
int Choose(int options, int picks){
    int numerator = Factorial(options);
    int denom1 = Factorial(picks);
    int denom2 = options - picks;
    denom2 = Factorial(denom2);
    int final = numerator/(denom1*denom2);
    return final;
}",0
sspa275,1698131365,10,"int Choose(int options, int picks){
    
    int final = 1;
    int denomTerm = options - picks;
    for (int i = options; i > denomTerm; i--){
        final *= i;
    }
    final /= picks;
    return final;
}",0
sspa275,1698132263,11,"int Choose(int pool, int picks){
    int total = 0;
    if (picks == pool || picks == 0){
        return 1;
    }
    else{
        return (Choose(pool - 1, picks) + Choose(pool - 1, picks - 1));
    }
}",
sspa275,1698132268,12,"int Choose(int pool, int picks){
    if (picks == pool || picks == 0){
        return 1;
    }
    else{
        return (Choose(pool - 1, picks) + Choose(pool - 1, picks - 1));
    }
}",
sspa275,1698132270,13,"int Choose(int pool, int picks){
    if (picks == pool || picks == 0){
        return 1;
    }
    else{
        return (Choose(pool - 1, picks) + Choose(pool - 1, picks - 1));
    }
}",1
ssri357,1697506625,1,"int Choose(int n, int m);

int Choose(int n, int m) {

	// base case

	if ((n == m) || (m == 0)) {
		return 1;
	}

	else {

		if (m > 0 && n > m) {

			return (Choose(n - 1, m) + Choose(n - 1, m - 1));

		}

		else {

			return 0;
		}

	}

}",
ssri357,1697506630,2,"int Choose(int n, int m);

int Choose(int n, int m) {

	// base case

	if ((n == m) || (m == 0)) {
		return 1;
	}

	else {

		if (m > 0 && n > m) {

			return (Choose(n - 1, m) + Choose(n - 1, m - 1));

		}

		else {

			return 0;
		}

	}

}",1
steb012,1697503261,1,"void ConvertToBinary(int number){
    if (number == 0){
        printf(""0"");
        return;
    }
    
    int binary[32];
    int i = 0;
    int j = 0;
    
    
    while (number > 0){
        binary[i++] = number % 2;
        number = number / 2;

    }
    
    
    for (j = i - 1; j >= 0; j--){
      printf(""%d"", binary[j]);
    }
    
    
}",
steb012,1697505828,2,"int Choose(int n, int m){
    
    if (m == 0 || m == n){
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
    
    
    
}",
steb012,1697505829,3,"int Choose(int n, int m){
    
    if (m == 0 || m == n){
        return 1;
    }
    
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
    
    
    
}",1
stia357,1697845572,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
stia357,1697845574,2,"int Choose(int n, int m) 
{
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
sum778,1697921814,1,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
sval918,1698137164,1,"int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursive cases
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
sval918,1698137598,2,"int Choose(int a, int b) {
    if (b == 0 || b == a) {
        return 1;
    }
    return Choose(a - 1, b - 1) + Choose(a - 1, b);
}",
sval918,1698137600,3,"int Choose(int a, int b) {
    if (b == 0 || b == a) {
        return 1;
    }
    return Choose(a - 1, b - 1) + Choose(a - 1, b);
}",1
swan472,1697886193,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
swan472,1697886196,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
sweb390,1697620442,1,"int Choose(int n, int m) {
	
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
		
	}

	
}",1
swil676,1697977827,1,"#include <stdio.h>

int Choose(int n, int m){

    if (m == 0 || m == n){
        return 1;
    }
    else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
swil676,1697977831,2,"#include <stdio.h>

int Choose(int n, int m){

    if (m == 0 || m == n){
        return 1;
    }
    else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
syok443,1697597505,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m){
 
    if( 0 >= m || m >= n ){
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
syok443,1697597507,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Choose(int n, int m){
 
    if( 0 >= m || m >= n ){
        return 1;
    }
    else
    {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
syua841,1698129071,1,"unsigned long long Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
syua841,1698129086,2,"void(Choose(int n, int m)) {

    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
syua841,1698129097,3,"void Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
syua841,1698130189,4,"
int Factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n * Factorial(n - 1);
}
int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0;
    }
    return Factorial(n) / (Factorial(m) * Factorial(n - m));
}",
syua841,1698130252,5,"int Factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n*Factorial(n - 1);
}
int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0;
    }
    return Factorial(n) / (Factorial(m) * Factorial(n - m));
}",
syua841,1698130274,6,"int Factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n*Factorial(n - 1);
}
int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0;
    }
    return Factorial(n) / (Factorial(n - m) * Factorial(m));
}",
syua841,1698130283,7,"int Factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n*Factorial(n - 1);
}
int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0;
    }
    return Factorial(n) / (Factorial(n - m) * Factorial(m));
}",0
syua841,1698130676,8,"int Choose(int n, int m) {
    
    int result = 1;
    
    m = n - m;
    
    for (int i = 0; i < m; i++) {
        result *= (n - i);
        result /= (i + 1);
    }
    return result;
}",
syua841,1698130683,9,"int Choose(int n, int m) {
    
    int result = 1;
    
    m = n - m;
    
    for (int i = 0; i < m; i++) {
        result *= (n - i);
        result /= (i + 1);
    }
    return result;
}",0
syua841,1698130823,10,"int Choose(int n, int m) {
    
    int result = 1;
    
    if (m > n - m) {
        m = n - m;
    }

    
    for (int i = 0; i < m; i++) {
        result *= (n - i);
        result /= (i + 1);
    }
    return result;
}",
syua841,1698130824,11,"int Choose(int n, int m) {
    
    int result = 1;
    
    if (m > n - m) {
        m = n - m;
    }

    
    for (int i = 0; i < m; i++) {
        result *= (n - i);
        result /= (i + 1);
    }
    return result;
}",1
szen566,1697509011,1,"#include <stdio.h>

int Choose(int n, int m) 
{
	// Base case:
	if ((m == 0) || (m == n)) {
		return 1;
	}
	// Recursive case 
	else {
		return (Choose((n - 1), m) + Choose((n - 1), (m - 1)));
	}
}
",
szen566,1697509013,2,"#include <stdio.h>

int Choose(int n, int m) 
{
	// Base case:
	if ((m == 0) || (m == n)) {
		return 1;
	}
	// Recursive case 
	else {
		return (Choose((n - 1), m) + Choose((n - 1), (m - 1)));
	}
}
",1
szho466,1698133702,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
szho466,1698133707,2,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
tais804,1697505937,1,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
      return 1;  
    } else {
    return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",
tais804,1697505939,2,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
      return 1;  
    } else {
    return (Choose(n-1, m) + Choose(n-1, m-1));
    }
}",1
tbad483,1697970170,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}",
tbad483,1697970172,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}",1
tbar968,1697798489,1,"int Choose(int numThings, int numSelect){
    int number=0;
    if (numThings==0 || numSelect==0){
        return 1;
    }
    else{
    number=numThings*(Choose(numThings-1, numSelect-1))/numSelect;
    
    return number;
    }
}",
tbar968,1697798493,2,"int Choose(int numThings, int numSelect){
    int number=0;
    if (numThings==0 || numSelect==0){
        return 1;
    }
    else{
    number=numThings*(Choose(numThings-1, numSelect-1))/numSelect;
    
    return number;
    }
}",1
tbar971,1697693639,1,"int Choose(int n, int m) 
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else if ((0 < m) && (m < n)) {
        return (Choose((n-1), m) + Choose((n - 1), (m - 1)));
    }
}",
tbar971,1697693677,2,"int Choose(int n, int m) 
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else if ((0 < m) && (m < n)) {
        return (Choose((n-1), m) + Choose((n - 1), (m - 1)));
    } else {
        return 0;
    }
}",
tbar971,1697693679,3,"int Choose(int n, int m) 
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else if ((0 < m) && (m < n)) {
        return (Choose((n-1), m) + Choose((n - 1), (m - 1)));
    } else {
        return 0;
    }
}",1
tbas606,1697956707,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else if (m > 0 && m < n) {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    } else {
        return 0;  
    }
}",
tbas606,1697956709,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  
    } else if (m > 0 && m < n) {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    } else {
        return 0;  
    }
}",1
tbed601,1697850657,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
tbed601,1697850700,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
tbri557,1697966504,1,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }
    return (Choose(n - 1, m - 1) * n) / m;
}",
tbri557,1697966506,2,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    if (m == n) {
        return 1;
    }
    return (Choose(n - 1, m - 1) * n) / m;
}",1
tche867,1698109524,1,"int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	else if (n == m)
	{
		return 1;
	}
	else
	{

		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
}",
tche867,1698109528,2,"int Choose(int n, int m)
{
	if (m == 0)
	{
		return 1;
	}
	else if (n == m)
	{
		return 1;
	}
	else
	{

		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
}",1
tcoo725,1697705833,1,"#include <stdio.h>

int Choose(int n, int m){
    
    if (m == n || m == 0){
        
        return 1;
        
    } 
    else {
        return Choose(n - 1, m) + Choose(n -1, m-1);
    }
}",1
tdha392,1698029122,1,"Choose(int n, int m) {
    int x = n - m + 1
    int value = 0;
    for (x; x > 0; x--) {
        value = value + x 
    }
    if (m == 0) {
        value = 1;
    }
    if (m == n) {
        value = 1;
    }
}
",
tdha392,1698029134,2,"Choose(int n, int m) {
    int x = n - m + 1;
    int value = 0;
    for (x; x > 0; x--) {
        value = value + x;
    }
    if (m == 0) {
        value = 1;
    }
    if (m == n) {
        value = 1;
    }
}
",
tdha392,1698029511,3,"int Choose(int n, int m) {
    int x = n - m + 1;
    
    int value = 0;
    for (x; x > 0; x--) {
        value = value + x;
    }
    if (m == 0 || m == n) {
        value = 1;
    }
    return value;
}",
tdha392,1698029591,4,"int Choose(int n, int m) {
    int x = n - m + 1;
    
    int value = 0;
    
    if (m == 0 || m == n) {
        value = 1;
        return value;
    }
    else {
        for (x; x > 0; x--) {
        value = value + x;
    }
    }
    return value;
}",
tdha392,1698029655,5,"int Choose(int n, int m) {
    int x = n - m + 1;
    
    int value = 0;
    
    if (m == 0 || m == n) {
        value = 1;
        return value;
    }
    else {
        while (x > 0) {
        value = value + x;
        x--;
    }
    }
    return value;
}",
tdha392,1698029659,6,"int Choose(int n, int m) {
    int x = n - m + 1;
    
    int value = 0;
    
    if (m == 0 || m == n) {
        value = 1;
        return value;
    }
    else {
        while (x > 0) {
        value = value + x;
        x--;
    }
    }
    return value;
}",0
tdha392,1698031738,7,"int Choose(int n, int m) {
    int x = n - m + 1;
    
    int value = 0;
    
    if (m == 0 || m == n) {
        value = 1;
        return value;
    }
    else {
        while (x > 0) {
        value = value + x;
        x--;
    }
    }
    return value;
}",
tdha392,1698031743,8,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    int value = 1;

    for (int i = 1; i <= m; i++) {
        value = value * (n - i + 1);
        value = value / i;
    }

    return value;
}",
tdha392,1698031751,9,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    
    int value = 1;

    for (int i = 1; i <= m; i++) {
        value = value * (n - i + 1);
        value = value / i;
    }

    return value;
}",1
tdic873,1698017061,1,"void ConvertToBinary(int number) { 
    if (number == 1) printf(""1"");
    else {
        if ((number / 2) > 0) ConvertToBinary(number / 2);
        printf(""%d"", number % 2);
    }
}",
tdic873,1698017273,2,"int Choose(int n, int m) { 
    if (m == 0) return 1;
    else if (m == n) return 1;
    else {
        if (0 < m && m < n){
            return Choose(n - 1, m) + Choose(n - 1, m - 1);
        }
    }
} ",
tdic873,1698017343,3,"int Choose(int n, int m) { 
    if (m == 0) return 1;
    else if (m == n) return 1;
    else {
        if (0 < m && m < n){
            return Choose(n - 1, m) + Choose(n - 1, m - 1);
        }
        return 0;
    }
} ",
tdic873,1698017351,4,"int Choose(int n, int m) { 
    if (m == 0) return 1;
    else if (m == n) return 1;
    else {
        if (0 < m && m < n){
            return Choose(n - 1, m) + Choose(n - 1, m - 1);
        }
        return 0;
    }
} ",1
tdon950,1697883387,1,"int Choose(int n, int m)
{
    int total = 0;
    
    if ((n == 0) || (m == 0)) {
        total++;
        return total;
        
    } else if (n == m) {
        total++;
        return total;
        
    } else {
        
        total = Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
tdon950,1697883465,2,"int Choose(int n, int m)
{
    int total = 0;
    
    if ((n == 0) || (m == 0)) {
        total++;
        
    } else if (n == m) {
        total++;
        
    } else {
        
        total = Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    return total;
}",
tdon950,1697883467,3,"int Choose(int n, int m)
{
    int total = 0;
    
    if ((n == 0) || (m == 0)) {
        total++;
        
    } else if (n == m) {
        total++;
        
    } else {
        
        total = Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    return total;
}",1
tdu824,1698047781,1,"int Choose(int n, int m)
 {
    int result;
    if ((m == 0) || (m == n)){
        return 1;
    } else {
        result = Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    return result;
 } ",
tdu824,1698047784,2,"int Choose(int n, int m)
 {
    int result;
    if ((m == 0) || (m == n)){
        return 1;
    } else {
        result = Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
    return result;
 } ",1
tfai092,1697961231,1,"int Choose(int n, int m) {
    if ((m == 0) || (n == m)) {
        
        return 1; 
        
    } 
    
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
tfai092,1697961234,2,"int Choose(int n, int m) {
    if ((m == 0) || (n == m)) {
        
        return 1; 
        
    } 
    
    else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
tfai653,1697506292,1,"int Choose(int value1, int value2)
{
    if (value2 == 0) {
        return 1;
    } else if (value1 == value2) {
        return 1;
    } else {
        return Choose((value1-1), value2) + Choose((value1 - 1), (value2 - 1));
    }
}",
tfai653,1697506295,2,"int Choose(int value1, int value2)
{
    if (value2 == 0) {
        return 1;
    } else if (value1 == value2) {
        return 1;
    } else {
        return Choose((value1-1), value2) + Choose((value1 - 1), (value2 - 1));
    }
}",1
tfru173,1698134763,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    } else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
tfru173,1698134818,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    if (m == 0 || m == n) 
    {
        return 1;
    } else 
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
thal182,1697507385,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
thal182,1697507391,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
thar970,1697904456,1,"int Choose(int n, int m) {
    if (n == m || m == 0) return 1;
    if (n < m) return 0;
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
thid924,1697975938,1,"int Choose(int n, int m) {

	if (n == m) {
		return 1;

	}
	else if (m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
}",
thid924,1697975940,2,"int Choose(int n, int m) {

	if (n == m) {
		return 1;

	}
	else if (m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
}",1
thua238,1697883094,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 0;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
thua238,1697883183,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
thua238,1697883188,3,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
thut580,1697516642,1,"int Choose(int n, int m)
{
	int selections = 1;
	
	if (m == 0 || m == n) { 
		return selections;
	}
	else {
		selections = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
	return selections;
}",
thut580,1697516645,2,"int Choose(int n, int m)
{
	int selections = 1;
	
	if (m == 0 || m == n) { 
		return selections;
	}
	else {
		selections = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	
	return selections;
}",1
tkan918,1698118127,1,"int Choose(int n, int m)
{

    if(m == 0) {
        return 1;
    } else if(m == n) {
        return 1;
    } else if(m > 0 && m < n) {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    } else {
        return -1;
    }
}",
tkan918,1698118128,2,"int Choose(int n, int m)
{

    if(m == 0) {
        return 1;
    } else if(m == n) {
        return 1;
    } else if(m > 0 && m < n) {
        return (Choose(n-1, m) + Choose(n-1, m-1));
    } else {
        return -1;
    }
}",1
tlal352,1698106170,1,"int Choose(int n, int m)
{
    if ((n == 0 || m == 0) || (n == m)) {
        return 1;
    } else {
        int x = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return x;
    }
}",
tlal352,1698106177,2,"int Choose(int n, int m)
{
    if ((n == 0 || m == 0) || (n == m)) {
        return 1;
    } else {
        int x = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return x;
    }
}",1
tlin438,1697967992,1,"int Choose(int n, int m) {
    // Base case 1: if m is 0 or m equals n, return 1
    if (m == 0 || m == n) {
        return 1;
    }
    // Base case 2: if n is 1, return 1
    if (n == 1) {
        return 1;
    }
    // Recursive case: calculate using the recursive definition
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
tlin438,1697968247,2,"int Choose(int n, int m) {
    //Base case 1: if m is 0 or n, return 1
    if (m == 0 || m == n) {
        return 1;
    }
    //Base case 2: if n is 1, return 1
    if (n == 1) {
        return 1;
    }
    //Recursive case: calculate using the recursive definition
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
tlin438,1697968254,3,"int Choose(int n, int m) {
    //Base case 1: if m is 0 or n, return 1
    if (m == 0 || m == n) {
        return 1;
    }
    //Base case 2: if n is 1, return 1
    if (n == 1) {
        return 1;
    }
    //Recursive case: calculate using the recursive definition
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
tlu253,1697578491,1,"int Choose(int n, int m)
{
    if (n == m) {
        return 1;
    } else if (m < 1) {
        return 1;
    } else {
        return (Choose((n-1), m) + Choose((n-1), (m-1)));
    }

}",
tlu253,1697578508,2,"int Choose(int n, int m)
{
    if (n == m) {
        return 1;
    } else if (m < 1) {
        return 1;
    } else {
        return (Choose((n-1), m) + Choose((n-1), (m-1)));
    }

}",1
tluu816,1697947142,1,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	}
	else if((m > 0) && (n > m)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
tluu816,1697947163,2,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	}
	else ((m > 0) && (n > m)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
tluu816,1697947177,3,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	}
	else if((m > 0) && (n > m)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
tluu816,1697947193,4,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	}
	else if((m > 0) && (n > m)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",
tluu816,1697947195,5,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	}
	else if((m > 0) && (n > m)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return 0;
}",1
tman942,1697850805,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  // Base case: n choose 0 or n choose n is 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
tman942,1697850807,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  // Base case: n choose 0 or n choose n is 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
tmcl219,1698129927,1,"int Choose(int n, int m)
{
    int sum;
    if (m == 0){
        sum = 1;
        return sum;

    } else if (m == n){
        sum = 1;
        return sum;

    } else if (m > 0 && n > m){
        sum = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return sum;
        
    } else {
        return 0;
    }
}",
tmcl219,1698129930,2,"int Choose(int n, int m)
{
    int sum;
    if (m == 0){
        sum = 1;
        return sum;

    } else if (m == n){
        sum = 1;
        return sum;

    } else if (m > 0 && n > m){
        sum = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return sum;
        
    } else {
        return 0;
    }
}",1
tmen190,1697438325,1,"// --------------------------------------------------------------------------------------------------------//
/* Returns the number of ways of selecting m things out of a total of n things */

int Choose(int n, int m) {
	if (m > n)
	{
		return 0;
	} else if (m == 0)
	{
		return 1;
	} else if (m == n)
	{
		return 1;
	}

	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
tmen190,1697438331,2,"// --------------------------------------------------------------------------------------------------------//
/* Returns the number of ways of selecting m things out of a total of n things */

int Choose(int n, int m) {
	if (m > n)
	{
		return 0;
	} else if (m == 0)
	{
		return 1;
	} else if (m == n)
	{
		return 1;
	}

	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
tmir110,1698115257,1,"int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
tmir110,1698115259,2,"int Choose(int n, int m) {
    
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
tmun974,1697510764,1,"int Choose(int n, int m){

    if(m==0 || m==0){
        return 1;
    }
    if (n==1){
        return 1;
    }

    return Choose(n-1, m-1)+ Choose(n-1, m);
}",
tmun974,1697510771,2,"int Choose(int n, int m){

    if(m==0 || m==0){
        return 1;
    }
    if (n==1){
        return 1;
    }

    return Choose(n-1, m-1)+ Choose(n-1, m-1);
}",
tmun974,1697510781,3,"int Choose(int n, int m){

    if(m==0 || m==0){
        return 1;
    }
    if (n==1){
        return 1;
    }

    return Choose(n, m-1)+ Choose(n-1, m);
}",
tmun974,1697510787,4,"int Choose(int n, int m){

    if(m==0 || m==0){
        return 1;
    }
    if (n==1){
        return 1;
    }

    return Choose(n-1, m-1)+ Choose(n-1, m);
}",
tmun974,1697510817,5,"int Choose(int n, int m){

    if(m==0 || m==0){
        return 1;
    }

    return Choose(n-1, m-1)+ Choose(n-1, m);
}",
tmun974,1697510880,6,"int Choose(int n, int m){

    if(m==0 || m==0){
        return 1;
    }
    else{

    return Choose(n-1, m-1)+ Choose(n-1, m);
}
}",
tmun974,1697511021,7,"int Choose(int n, int m){

    if(m==0){
        return 1;
    }
    
    if (n==m){
        return 1;
    }

    return Choose(n-1, m-1)+ Choose(n-1, m);
}",
tmun974,1697511025,8,"int Choose(int n, int m){

    if(m==0){
        return 1;
    }
    
    if (n==m){
        return 1;
    }

    return Choose(n-1, m-1)+ Choose(n-1, m);
}",1
tpan328,1697883258,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else if (m < 0 || m > n) {
        return 0;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
tpan328,1697883260,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else if (m < 0 || m > n) {
        return 0;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
tpil529,1697705434,1,"int Choose(int n, int r)
{


    if (r == 0 || r == n)
    {

        return 1;
    }
    else
    {
        return  Choose(n-1,r) + Choose(n-1,r-1);
    }

}",
tpil529,1697705437,2,"int Choose(int n, int r)
{


    if (r == 0 || r == n)
    {

        return 1;
    }
    else
    {
        return  Choose(n-1,r) + Choose(n-1,r-1);
    }

}",1
tpra228,1697956730,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
tpra228,1697956733,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
tpur744,1697883982,1,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
tpur744,1697883984,2,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    

    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
tqhu735,1697419850,1,"int Choose(int n, int m){
    if (m == 0 || n == m) {
        return 1;
    }
    else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
tqhu735,1697419854,2,"int Choose(int n, int m){
    if (m == 0 || n == m) {
        return 1;
    }
    else{
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
tron042,1697525263,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursive cases
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
tron042,1697525266,2,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursive cases
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
tsan986,1697931986,1,"int Choose(int n, int m){
    
    if (n == m){
        return 1;
        
    } else if (m == 0) {
        return 1;
        
    } else {
        int value = Choose(n-1, m) + Choose(n-1, m-1);
        return value;
    }
}",
tsan986,1697931989,2,"int Choose(int n, int m){
    
    if (n == m){
        return 1;
        
    } else if (m == 0) {
        return 1;
        
    } else {
        int value = Choose(n-1, m) + Choose(n-1, m-1);
        return value;
    }
}",1
tsin304,1698110306,1,"int Choose(int n, int m)
{
    if (m == 0)
        return 1;
    else if (n == m)
        return 1;
    else if (0 < m && m < n)
    {
        int result = Choose(n - 1,m) + Choose(n - 1, m - 1);
        return result;
    }
    else return 0;
    
    
}",1
ttho505,1697948619,1,"int Choose(int n, int m) {
	
	if (m == 0 || m == n) {
		return 1;
	}
	else 
	{
		 return Choose((n - 1), m) + Choose((n - 1), (m - 1));
	}
}",
ttho505,1697948624,2,"int Choose(int n, int m) {
	
	if (m == 0 || m == n) {
		return 1;
	}
	else 
	{
		 return Choose((n - 1), m) + Choose((n - 1), (m - 1));
	}
}",1
ttho743,1697874167,1,"int Choose(int n, int m) 
{
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
ttho743,1697874176,2,"int Choose(int n, int m) 
{
    if (m == 0 || n == m) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
twad520,1698144071,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        int result = 1;
        for (int i = 1; i <= m; i++) {
            result *= n--;
            result /= i;
        }
        return result;
    }
}",
twad520,1698144074,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    else {
        int result = 1;
        for (int i = 1; i <= m; i++) {
            result *= n--;
            result /= i;
        }
        return result;
    }
}",1
twol698,1697777538,1,"int Choose(int n, int k){
    if ((k==0)||(k==n)){
        return 1;
    }else{
        int value = Choose(n-1,k)+Choose(n-1,k-1); 
        return value; 
    }
}",
twol698,1697777542,2,"int Choose(int n, int k){
    if ((k==0)||(k==n)){
        return 1;
    }else{
        int value = Choose(n-1,k)+Choose(n-1,k-1); 
        return value; 
    }
}",1
tyou333,1697438946,1,"int Choose(int n, int m) {
    if (n > m && m > 0) {
        return Choose(n - 1, m) + Choose (n - 1, m - 1);
    } else {
        return 1;
    }
}",
tyou333,1697438948,2,"int Choose(int n, int m) {
    if (n > m && m > 0) {
        return Choose(n - 1, m) + Choose (n - 1, m - 1);
    } else {
        return 1;
    }
}",1
tyou421,1697849303,1,"int Choose(int n, int m)
{
	/*This function recursively computes the number of
	  combinations of m things chosen out of n - ""n choose m.""
	  To do this, it uses 2 base cases and 2 recursive calls.
	  
	 Inputs:
			n: An integer representing the total number of things
			to choose from.
			m: An integer representing how many things we are
			choosing.
			
	 Outputs:
			None.
			
	 Author: Toma Yousif*/



	// Declare the variables.
	int combinations = 0;
	int firstTerm = 0;
	int secondTerm = 0;


	// Base case 1,
	if (m == 0)
	{
		combinations = 1;
	}

	// Base case 2.
	else if (n == m)
	{
		combinations = 1;
	}

	// Recursive case.
	else
	{
		if ((0 < m) && (m < n))
		{
			// Compute the first recursive call.
			firstTerm = Choose((n - 1), m);


			// Compute the second recursive call.
			secondTerm = Choose((n - 1), (m - 1));


			// Compute the sum.
			combinations = firstTerm + secondTerm;
		}
	}

	// Return ""n choose m"".
	return combinations;
}",
tyou421,1697849305,2,"int Choose(int n, int m)
{
	/*This function recursively computes the number of
	  combinations of m things chosen out of n - ""n choose m.""
	  To do this, it uses 2 base cases and 2 recursive calls.
	  
	 Inputs:
			n: An integer representing the total number of things
			to choose from.
			m: An integer representing how many things we are
			choosing.
			
	 Outputs:
			None.
			
	 Author: Toma Yousif*/



	// Declare the variables.
	int combinations = 0;
	int firstTerm = 0;
	int secondTerm = 0;


	// Base case 1,
	if (m == 0)
	{
		combinations = 1;
	}

	// Base case 2.
	else if (n == m)
	{
		combinations = 1;
	}

	// Recursive case.
	else
	{
		if ((0 < m) && (m < n))
		{
			// Compute the first recursive call.
			firstTerm = Choose((n - 1), m);


			// Compute the second recursive call.
			secondTerm = Choose((n - 1), (m - 1));


			// Compute the sum.
			combinations = firstTerm + secondTerm;
		}
	}

	// Return ""n choose m"".
	return combinations;
}",1
tzha578,1697589993,1,"#include<stdio.h>



int Factorial(int n){
    if (n == 0) {
        return 1;
    } else {
        return n * Factorial(n-1);
    }
}

int Factorial2(int n, int m){
    if(m < n / 2)
    m = n - m;
    if(n != m){
        return(n * Factorial2(n - 1,m));
    }else
    return 1;
}

int  Choose(int n, int m){
    return(Factorial2(n, m) / Factorial(m));
}
",
tzha578,1697589995,2,"#include<stdio.h>



int Factorial(int n){
    if (n == 0) {
        return 1;
    } else {
        return n * Factorial(n-1);
    }
}

int Factorial2(int n, int m){
    if(m < n / 2)
    m = n - m;
    if(n != m){
        return(n * Factorial2(n - 1,m));
    }else
    return 1;
}

int  Choose(int n, int m){
    return(Factorial2(n, m) / Factorial(m));
}
",0
tzha578,1697590246,3,"#include<stdio.h>

int Factorial(int n){
    if (n == 0) {
        return 1;
    } else {
        return n * Factorial(n-1);
    }
}

int Factorial2(int n, int m){
    if(m < n / 2)
    m = n - m;
    if(n != m){
        return(n * Factorial2(n - 1,m));
    }else
    return 1;
}

int  Choose(int n, int m){
    if(m < n / 2)
    return(Factorial2(n, m) / Factorial(m));
    else
    return(Factorial2(n, m) / Factorial(n - m));
}",
tzha578,1697590250,4,"#include<stdio.h>

int Factorial(int n){
    if (n == 0) {
        return 1;
    } else {
        return n * Factorial(n-1);
    }
}

int Factorial2(int n, int m){
    if(m < n / 2)
    m = n - m;
    if(n != m){
        return(n * Factorial2(n - 1,m));
    }else
    return 1;
}

int  Choose(int n, int m){
    if(m < n / 2)
    return(Factorial2(n, m) / Factorial(m));
    else
    return(Factorial2(n, m) / Factorial(n - m));
}",0
tzha578,1697688783,5,"# include <stdio.h>
int Choose(int n, int m){
    if(n == m){
        return 1;
    }else if(m == 0){
    return 1;
    }else{
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

}",
tzha578,1697688785,6,"# include <stdio.h>
int Choose(int n, int m){
    if(n == m){
        return 1;
    }else if(m == 0){
    return 1;
    }else{
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }

}",1
tzho903,1698135484,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n-1,m-1) + Choose(n-1,m);
    }
}",
tzho903,1698135486,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (m == n) {
        return 1;
    } else {
        return Choose(n-1,m-1) + Choose(n-1,m);
    }
}",1
uali517,1697526860,1,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else if (m > 0 && m < n) {
		return Choose((n - 1), m) + Choose((n - 1), (m - 1));
	}
}",0
uali517,1697526916,2,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else if (m > 0 && m < n) {
		return (Choose((n - 1), m) + Choose((n - 1), (m - 1)));
	}
}",0
uali517,1697527268,3,"int Choose(int n, int m)
{
	int choose = 1;
	if (m == 0 || m == n) {
		return choose;
	}
	else if (m > 0 && m < n) {
		choose = (Choose((n - 1), m) + Choose((n - 1), (m - 1)));
		return choose;
	}
	else {
		return 0;
	}
}",1
ujai264,1697764261,1,"#include <stdio.h>
int Choose(int n, int m){
    int counter = 0;
    if (m == 0){
        return 1;
    } else if ( m == n) {
        return 1; }
        else{
    
    int a = Choose(n - 1, m);
    int b = Choose(n- 1, m -1);

    return a + b;
    
    
    }


}",
ujai264,1697764271,2,"#include <stdio.h>
int Choose(int n, int m){
    if (m == 0){
        return 1;
    } else if ( m == n) {
        return 1; }
        else{
    
    int a = Choose(n - 1, m);
    int b = Choose(n- 1, m -1);

    return a + b;
    
    
    }


}",
ujai264,1697764276,3,"#include <stdio.h>
int Choose(int n, int m){
    if (m == 0){
        return 1;
    } else if ( m == n) {
        return 1; }
        else{
    
    int a = Choose(n - 1, m);
    int b = Choose(n- 1, m -1);

    return a + b;
    
    
    }


}",1
uuel157,1698136431,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        // Base case: n choose 0 or n choose n is 1
        return 1;
    } else {
        // Recursive case: n choose m = (n-1) choose (m-1) + (n-1) choose m
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
uuel157,1698136434,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        // Base case: n choose 0 or n choose n is 1
        return 1;
    } else {
        // Recursive case: n choose m = (n-1) choose (m-1) + (n-1) choose m
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
vbar374,1698107880,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }

    // Recursive relation
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
vkap589,1697920803,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    else if (m == n) {
        return 1;
    }
    else {
        if (0 < m && m < n) {
            return Choose(n-1,m) + Choose(n-1,m-1);
        }
    }
}",
vkap589,1697920861,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    
    else if (m == n) {
        return 1;
    }
    
    else {
        if (0 < m && m < n) {
            return Choose(n-1,m) + Choose(n-1,m-1);
        }
    }
}",
vkap589,1697920875,3,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    
    else if (m == n) {
        return 1;
    }
    
    else {
        if (0 < m && m < n) {
            return (Choose(n-1,m) + Choose(n-1,m-1));
        }
    }
}",
vkap589,1697920921,4,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    else if (m == n) {
        return 1;
    }
    else {
        if (0 < m && m < n) {
            return Choose(n-1,m) + Choose(n-1,m-1);
        }
    }
}",
vkap589,1697920938,5,"void Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    }
    else if (m == n) {
        return 1;
    }
    else {
        if (0 < m && m < n) {
            return Choose(n-1,m) + Choose(n-1,m-1);
        }
    }
}",
vkap589,1697921067,6,"int Choose(int n, int m)
{
    int result = 0;
    
    if (m == 0) {
        result = 1;
        return result;
    }
    else if (m == n) {
        result = 1;
        return result;
    }
    else {
        if (0 < m && m < n) {
            result = (Choose(n-1,m) + Choose(n-1,m-1));
            return result;
        }
    }
}",
vkap589,1697921075,7,"int Choose(int n, int m)
{
    int result = 0;
    
    if (m == 0) {
        result = 1;
        return result;
    }
    else if (m == n) {
        result = 1;
        return result;
    }
    else {
        if (0 < m && m < n) {
            result = (Choose(n-1,m) + Choose(n-1,m-1));
            return result;
        }
    }
}
}",
vkap589,1697921079,8,"int Choose(int n, int m)
{
    int result = 0;
    
    if (m == 0) {
        result = 1;
        return result;
    }
    else if (m == n) {
        result = 1;
        return result;
    }
    else {
        if (0 < m && m < n) {
            result = (Choose(n-1,m) + Choose(n-1,m-1));
            return result;
        }
    }
",
vkap589,1697921143,9,"int Choose(int n, int m)
{
    int result = 0;
    
    if (m == 0) {
        result = 1;
        return result;
    }
    else if (m == n) {
        result = 1;
        return result;
    }
    else if (0 < m && m < n) {
        result = (Choose(n-1,m) + Choose(n-1,m-1));
        return result;
    }
}",
vkap589,1697921163,10,"int Choose(int n, int m)
{
    int result = 0;
    
    if (m == 0) {
        result = 1;
        return result;
    }
    else if (m == n) {
        result = 1;
        return result;
    }
    else if (0 < m && m < n) {
        result = (Choose(n-1,m) + Choose(n-1,m-1));
        return result;
    }
    
    return 0;
}",
vkap589,1697921173,11,"int Choose(int n, int m)
{
    int result = 0;
    
    if (m == 0) {
        result = 1;
        return result;
    }
    else if (m == n) {
        result = 1;
        return result;
    }
    else if (0 < m && m < n) {
        result = (Choose(n-1,m) + Choose(n-1,m-1));
        return result;
    }
    
    return 0;
}",1
vlai276,1697975506,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } 
    else {
         int x = ((Choose(n - 1, m)) + (Choose(n - 1, m - 1)));
          return x;
    }
}",
vlai276,1697975510,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } 
    else {
         int x = ((Choose(n - 1, m)) + (Choose(n - 1, m - 1)));
          return x;
    }
}",1
vpat188,1698091085,1,"#include <stdio.h>

int Choose(int n, int m){
    
    int WaysofPick;
    
    if (0 < m && m < n){
        
        WaysofPick = Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else if (m == n){
        return 1;
    } else {
        return 1;
    }
    
}
",
vpat188,1698091104,2,"#include <stdio.h>

int Choose(int n, int m){
    
    int WaysofPick;
    
    if (0 < m && m < n){
        
        WaysofPick = Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else if (m == n){
        return 1;
    } else {
        return 1;
    }
    
    return 0;
    
}
",
vpat188,1698091184,3,"#include <stdio.h>

int Choose(int n, int m){
    
    int WaysofPick;
    
    if (0 < m && m < n){
        
        WaysofPick = Choose(n - 1, m) + Choose(n - 1, m - 1);
    } else if (m == n){
        return 1;
    } else {
        return 1;
    }
    

    
}
",
vpat188,1698091336,4,"#include <stdio.h>

int Choose(int n, int m){
    

    if (0 < m && m < n){
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
        
    } else if (m == n){
        return 1;
    } else if (m == 0) {
        return 1;
    } else {
        return 0;
    }

}",
vpat188,1698091342,5,"#include <stdio.h>

int Choose(int n, int m){
    

    if (0 < m && m < n){
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
        
    } else if (m == n){
        return 1;
    } else if (m == 0) {
        return 1;
    } else {
        return 0;
    }

}",1
vwon573,1698060183,1,"void Choose(int n, int m){
    int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
}",
vwon573,1698060187,2,"void Choose(int n, int m){
    int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);

}",
vwon573,1698060206,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
vwon573,1698060209,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
vwu693,1698119632,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
vwu693,1698119634,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
vxie208,1697493732,1,"int choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	 }
	else {
		int combination;
		combination = choose(n - 1, m) + choose(n - 1, m - 1);
		return combination;
	}
}",
vxie208,1697493756,2,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	 }
	else {
		int combination;
		combination = choose(n - 1, m) + choose(n - 1, m - 1);
		return combination;
	}
}",
vxie208,1697493770,3,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	 }
	else {
		int combination;
		combination = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return combination;
	}
}",
vxie208,1697493781,4,"int Choose(int n, int m) {
	if ((m == 0) || (m == n)) {
		return 1;
	 }
	else {
		int combination;
		combination = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return combination;
	}
}",1
wany079,1697794068,1,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",
wany079,1697794070,2,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }
    else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
    }
}",1
wany722,1698050300,1,"int factorial(int num)
{
    int sum = 1;
    for(int i = 1; i <= m; i++)
        sum *= i;
    return sum;
}
int Choose(int n, int m)
{
    int num_ways;
    num_ways = factorial(n) / (factorial(m) * factorial(n - m));
    return num_ways;
}",
wany722,1698050310,2,"int factorial(int num)
{
    int sum = 1;
    for(int i = 1; i <= num; i++)
        sum *= i;
    return sum;
}
int Choose(int n, int m)
{
    int num_ways;
    num_ways = factorial(n) / (factorial(m) * factorial(n - m));
    return num_ways;
}",
wany722,1698050313,3,"int factorial(int num)
{
    int sum = 1;
    for(int i = 1; i <= num; i++)
        sum *= i;
    return sum;
}
int Choose(int n, int m)
{
    int num_ways;
    num_ways = factorial(n) / (factorial(m) * factorial(n - m));
    return num_ways;
}",0
wany722,1698052171,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
wany722,1698052173,5,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
wany843,1697932123,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}
",
wany843,1697932126,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}
",1
wany897,1697593799,1,"int Choose(int n, int m)
{
	if (m == 0 || m == n)
	{
		return 1;
	}
	else
	{
		if (m > 0 && n > m)
		{
			return (Choose(n - 1, m) + Choose(n - 1, m - 1));
		}
	}

}",
wany897,1697594067,2,"int Choose(int n, int m)
{
	if (m == 0 || m == n)
	{
		return 1;
	}
	else 
	{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
	

}

",
wany897,1697594071,3,"int Choose(int n, int m)
{
	if (m == 0 || m == n)
	{
		return 1;
	}
	else 
	{
		return (Choose(n - 1, m) + Choose(n - 1, m - 1));
	}
	

}

",1
wany932,1697857660,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) return 1;
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",
wany932,1697857662,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) return 1;
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}
",1
wkev690,1697768049,1,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }else{
        return (Choose(n-1, m) + Choose(n-1,m-1));
    }
}",
wkev690,1697768054,2,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }else{
        return (Choose(n-1, m) + Choose(n-1,m-1));
    }
}",1
wli798,1697947702,1,"int Choose(int n, int m) 
{
    if ((m == n) || (m == 0)) {
        return 1;
    } else {
        if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
        }
    }
    return 0;
}",
wli798,1697947705,2,"int Choose(int n, int m) 
{
    if ((m == n) || (m == 0)) {
        return 1;
    } else {
        if (0 < m && m < n) {
        return Choose(n - 1, m) + Choose(n - 1, m - 1);
        }
    }
    return 0;
}",1
wlin709,1697913313,1,"#include <stdio.h>

int Choose(int i, int j) {
    // Base cases
    if (j == 0) {
        return 1;
    }
    if (i == 0) {
        return 0;
    }
    // Recursive case
    return Choose(i - 1, j - 1) + Choose(i - 1, j);",
wlin709,1697913375,2,"#include <stdio.h>

int Choose(int i, int j) {
    // Base cases
    if (j == 0) {
        return 1;
    }
    if (i == 0) {
        return 0;
    }
    // Recursive case
    return Choose(i - 1, j - 1) + Choose(i - 1, j);
}
",
wlin709,1697913382,3,"#include <stdio.h>

int Choose(int i, int j) {
    // Base cases
    if (j == 0) {
        return 1;
    }
    if (i == 0) {
        return 0;
    }
    // Recursive case
    return Choose(i - 1, j - 1) + Choose(i - 1, j);
}
",1
wliy226,1698116070,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        int withoutCurrent = Choose(n - 1, m);
        int withCurrent = Choose(n - 1, m - 1);
        return withoutCurrent + withCurrent;
    }
}",
wliy226,1698116159,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) { //checks if either m is 0 or m is 1
        return 1;//returns 1 as there is one way to choose 
    } else { //calculates the combinations by summing up two recursive calls 
        int withoutCurrent = Choose(n - 1, m);
        int withCurrent = Choose(n - 1, m - 1);
        return withoutCurrent + withCurrent; //returns the sum of the combiantion 
    }
}",
wliy226,1698116278,3,"int Choose(int n, int m) {
    if (m == 0 || m == n) { //checks if either m is 0 or m is 1
        return 1;//returns 1 as there is one way to choose 
    } else { //calculates the combinations by summing up two recursive calls 
        int currentCombination = Choose(n - 1, m); //combination when the current is chosen
        int withoutCombination = Choose(n - 1, m - 1);//combinatino without the chosen
        return withoutCombination + currentCombination; //returns the sum of the combiantion 
    }
}",
wliy226,1698116280,4,"int Choose(int n, int m) {
    if (m == 0 || m == n) { //checks if either m is 0 or m is 1
        return 1;//returns 1 as there is one way to choose 
    } else { //calculates the combinations by summing up two recursive calls 
        int currentCombination = Choose(n - 1, m); //combination when the current is chosen
        int withoutCombination = Choose(n - 1, m - 1);//combinatino without the chosen
        return withoutCombination + currentCombination; //returns the sum of the combiantion 
    }
}",1
wmas516,1697807669,1,"int fact(x) {
	int n = 1;
	for (int i = 1; i <= x; i++) n *= i;
	return n;
}
int Choose(int n, int m) {
	int c = fact(n)/(fact(n-m)*fact(m));
	return c;
}

",
wmas516,1697807686,2,"int fact(int x) {
	int n = 1;
	for (int i = 1; i <= x; i++) n *= i;
	return n;
}
int Choose(int n, int m) {
	int c = fact(n)/(fact(n-m)*fact(m));
	return c;
}

",
wmas516,1697807689,3,"int fact(int x) {
	int n = 1;
	for (int i = 1; i <= x; i++) n *= i;
	return n;
}
int Choose(int n, int m) {
	int c = fact(n)/(fact(n-m)*fact(m));
	return c;
}

",0
wmas516,1697808633,4,"int Choose(int n, int m) {

	int c = fact(n,(n-m+1))/fact(2,1);
	return c;
}

int fact(int value, int initial) {
	
	if (value<1) return 0;
	
	int tot = 1;
	for (int i = initial; i <= value; i++) tot *= i;
	
	return tot;
}",
wmas516,1697808679,5,"int fact(int value, int initial) {
	
	if (value<1) return 0;
	
	int tot = 1;
	for (int i = initial; i <= value; i++) tot *= i;
	
	return tot;
}

int Choose(int n, int m) {

	int c = fact(n,(n-m+1))/fact(2,1);
	return c;
}",
wmas516,1697808687,6,"int fact(int value, int initial) {
	
	if (value<1) return 0;
	
	int tot = 1;
	for (int i = initial; i <= value; i++) tot *= i;
	
	return tot;
}

int Choose(int n, int m) {

	int c = fact(n,(n-m+1))/fact(2,1);
	return c;
}",0
wmas516,1697808811,7,"int fact(int value, int initial) {
	
	if (value<1) return 0;
	
	int tot = 1;
	for (int i = initial; i <= value; i++) tot *= i;
	
	return tot;
}

int Choose(int n, int m) {

	int c = fact(n,(n-m+1))/fact(m,1);
	return c;
}",
wmas516,1697808813,8,"int fact(int value, int initial) {
	
	if (value<1) return 0;
	
	int tot = 1;
	for (int i = initial; i <= value; i++) tot *= i;
	
	return tot;
}

int Choose(int n, int m) {

	int c = fact(n,(n-m+1))/fact(m,1);
	return c;
}",0
wmas516,1697881151,9,"int Choose(int n, int m) {

	if ((n == m) | (m == 0)) {
		return 1;
	}
	return (Choose(n - 1, m) + Choose(n - 1, m - 1));
}",
wmas516,1697881155,10,"int Choose(int n, int m) {

	if ((n == m) | (m == 0)) {
		return 1;
	}
	return (Choose(n - 1, m) + Choose(n - 1, m - 1));
}",1
wwan296,1697671588,1,"int Choose(int n, int m)
{
	if (m == 0 || n == m) { 
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
wwan296,1697671591,2,"int Choose(int n, int m)
{
	if (m == 0 || n == m) { 
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
wwon485,1697506599,1,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    return Choose(n -  1, m) + Choose(n - 1, m - 1);
}",
wwon485,1697506603,2,"int Choose(int n, int m) {
    if (m == 0 || n == m) {
        return 1;
    }

    return Choose(n -  1, m) + Choose(n - 1, m - 1);
}",1
wwu295,1697907464,1,"int Choose(int n, int m) {
	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
wwu295,1697907466,2,"int Choose(int n, int m) {
	if (n == m || m == 0) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
wyu523,1697493157,1,"int Choose(int n, int m){
    
    if ((m==0) || (n==m)){
        return 1;
    }
    else {
        return (Choose(n-1, m)+Choose(n-1, m-1));
    }
}",
wyu523,1697493159,2,"int Choose(int n, int m){
    
    if ((m==0) || (n==m)){
        return 1;
    }
    else {
        return (Choose(n-1, m)+Choose(n-1, m-1));
    }
}",1
wyua331,1697969005,1,"int Choose (int num,int num2)
{
    int q=1;
    int w=1;
    int e=1;
    int num3;

    for(int i=1;i<=num;i++)
    {
        q=i*q;
    }

    for(int i=1;i<=num2;i++)
    {
        w=i*w;
    }

    for(int i=1;i<=(num-num2);i++)
    {
        e=i*e;
    }

    num3=q/(w*e);

    return num3;


}",
wyua331,1697969007,2,"int Choose (int num,int num2)
{
    int q=1;
    int w=1;
    int e=1;
    int num3;

    for(int i=1;i<=num;i++)
    {
        q=i*q;
    }

    for(int i=1;i<=num2;i++)
    {
        w=i*w;
    }

    for(int i=1;i<=(num-num2);i++)
    {
        e=i*e;
    }

    num3=q/(w*e);

    return num3;


}",0
wyua331,1697969592,3,"int Choose (double num,double num2)
{
    double q=1;
    double w=1;
    double e=1;
    double num3;

    for(int i=1;i<=num;i++)
    {
        q=i*q;

    }

    for(int i=1;i<=num2;i++)
    {
        w=i*w;
    }

    for(int i=1;i<=(num-num2);i++)
    {
        e=i*e;
    }

    num3=q/(w*e);

    return num3;


}",
wyua331,1697969595,4,"int Choose (double num,double num2)
{
    double q=1;
    double w=1;
    double e=1;
    double num3;

    for(int i=1;i<=num;i++)
    {
        q=i*q;

    }

    for(int i=1;i<=num2;i++)
    {
        w=i*w;
    }

    for(int i=1;i<=(num-num2);i++)
    {
        e=i*e;
    }

    num3=q/(w*e);

    return num3;


}",1
wzha508,1698042148,1,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
wzha508,1698042150,2,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
xche362,1697552795,1,"int Choose(int n, int m) {
    if (m == 1) {
        return n/m;
    } else {
        
        return Choose(n - 1, m - 1)*(n/m);
    }
}",0
xche362,1697553076,2,"int Choose(int n, int m) {
    if (m == 1) {
        return n/m;
    } else {
        
        return Choose(n - 1, m - 1)*n/m;
    }
}",1
xkan320,1697698184,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
xkan320,1697698295,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
xli330,1697591795,1,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
xli330,1697591808,2,"int Choose(int n, int m) {
    if (m == n || m == 0) {
        return 1;
    }
    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
xmet073,1698137467,1,"# include <stdio.h>

int choose(int n, int m) {
    if(m==0||m==n){
    return 1;
     
}

     else {
         choose(n-1,m-1)+choose( n-1,m);
     }   
}
",
xmet073,1698137480,2,"# include <stdio.h>

int Choose(int n, int m) {
    if(m==0||m==n){
    return 1;
     
}

     else {
         Choose(n-1,m-1)+choose( n-1,m);
     }   
}
",
xmet073,1698137489,3,"
int Choose(int n, int m) {
    if(m==0||m==n){
    return 1;
     
}

     else {
         Choose(n-1,m-1)+choose( n-1,m);
     }   
}
",
xmet073,1698137500,4,"
int Choose(int n, int m) {
    if(m==0||m==n){
    return 1;
     
}

     else {
         Choose(n-1,m-1)+Choose( n-1,m);
     }   
}
",
xmet073,1698137854,5,"
int Choose(int n, int m) {
    if(m==0||m==n){
    return 1;
     
}

     else {
        return Choose(n-1,m-1)+Choose( n-1,m);
     }   
}
",
xmet073,1698137858,6,"
int Choose(int n, int m) {
    if(m==0||m==n){
    return 1;
     
}

     else {
        return Choose(n-1,m-1)+Choose( n-1,m);
     }   
}
",1
xsny378,1697448444,1,"int Choose(  int n,  int m)
{
   if( m==0||m==n){
       return 1;
   }
   else {
     return  Choose(n-1,m)+ Choose(n-1,m-1);
   }
}",
xsny378,1697448462,2,"int Choose(  int n,  int m)
{
   if( m==0||m==n){
       return 1;
   }
   else {
     return  Choose(n-1,m)+ Choose(n-1,m-1);
   }
}",1
xtan207,1697681403,1,"# include <stdio.h>
int Choose(int n, int m){
    if(n == m)
    return 1;
    else if(m == 0)
    return 1;
    else
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
xtan207,1697681406,2,"# include <stdio.h>
int Choose(int n, int m){
    if(n == m)
    return 1;
    else if(m == 0)
    return 1;
    else
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
xugn489,1697903279,1,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    else if (m == n) {
        return 1;
    }
    else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
xugn489,1697903281,2,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    }
    else if (m == n) {
        return 1;
    }
    else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
yayo322,1697947785,1,"int Choose (int n, int m) {
    int ans; 
    if (m == 0 || m == n) {
        ans = 1; 
    }
    else {
        int rec1 = Choose(n-1, m);
        int rec2 = Choose(n-1, m-1); 
        ans = rec1 + rec2; 
    }
    return ans; 
}
",
yayo322,1697947790,2,"int Choose (int n, int m) {
    int ans; 
    if (m == 0 || m == n) {
        ans = 1; 
    }
    else {
        int rec1 = Choose(n-1, m);
        int rec2 = Choose(n-1, m-1); 
        ans = rec1 + rec2; 
    }
    return ans; 
}
",1
ybha528,1697779935,1,"int Choose(n, m)
{
	//binomial (n m ) = !n / (m! x (n-m)!)

	if (m == 0) {
		return 1; //base case for function
	}
	if (m == n) {
		return 1; //base case
	}

	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
ybha528,1697779957,2,"int Choose(int n, int m)
{
	//binomial (n m ) = !n / (m! x (n-m)!)

	if (m == 0) {
		return 1; //base case for function
	}
	if (m == n) {
		return 1; //base case
	}

	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
ybha528,1697779964,3,"int Choose(int n, int m)
{
	//binomial (n m ) = !n / (m! x (n-m)!)

	if (m == 0) {
		return 1; //base case for function
	}
	if (m == n) {
		return 1; //base case
	}

	return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
ycho749,1698040849,1,"int Choose(int x, int y) 
{
    if (y == 0 || x == y) 
    {
        return 1;
    }

    return Choose(x - 1, y - 1) + Choose(x - 1, y);
}
",
ycho749,1698040851,2,"int Choose(int x, int y) 
{
    if (y == 0 || x == y) 
    {
        return 1;
    }

    return Choose(x - 1, y - 1) + Choose(x - 1, y);
}
",1
ycho760,1697974752,1,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",
ycho760,1697974756,2,"int Choose(int n, int m)
{
	if (m == 0 || m == n) {
		return 1;
	}
	else {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
}",1
ydai729,1698140449,1,"#include <stdio.h>

int Choose(int n, int m);
int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;  // Base case: C(n, 0) and C(n, n) are both 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
yfan919,1698046972,1,"#include <stdio.h>

int Choose(int a,int b)
{
    int result,n,m;
    if (a > b && a > 0 && b > 0){
        n = a;
        m = n;
    }
    else if(b > a && a > 0 && b > 0){
        n = b;
        m = a;
    }
    else{
        return;
    }
    result = 2 * (n - 1) + 2 * m - 1;
    return result;
}",0
yfan919,1698046980,2,"#include <stdio.h>

int Choose(int a,int b)
{
    int result,n,m;
    if (a > b && a > 0 && b > 0){
        n = a;
        m = n;
    }
    else if(b > a && a > 0 && b > 0){
        n = b;
        m = a;
    }
    else{
        return 0;
    }
    result = 2 * (n - 1) + 2 * m - 1;
    return result;
}",0
yfan919,1698047021,3,"#include <stdio.h>

int Choose(int a,int b)
{
    int result,n,m;
    if (a > b && a > 0 && b > 0){
        n = a;
        m = b;
    }
    else if(b > a && a > 0 && b > 0){
        n = b;
        m = a;
    }
    else{
        return 0;
    }
    result = 2 * (n - 1) + 2 * m - 1;
    return result;
}",0
yfan919,1698047836,4,"#include <stdio.h>

int Choose(int a,int b)
{
    int result,n,m;
    if (a > b && a > 0 && b > 0){
        n = a;
        m = b;
    }
    else if(b > a && a > 0 && b > 0){
        n = b;
        m = a;
    }
    else{
        return 0;
    }
    while (n !== n - m + 1){
        n = n * (n - 1);
        n--;
    }
    while (m != 1){
        m = m * (m - 1);
        m--;
    }
    result = n / m;
    return result;
}",0
yfan919,1698047843,5,"#include <stdio.h>

int Choose(int a,int b)
{
    int result,n,m;
    if (a > b && a > 0 && b > 0){
        n = a;
        m = b;
    }
    else if(b > a && a > 0 && b > 0){
        n = b;
        m = a;
    }
    else{
        return 0;
    }
    while (n != n - m + 1){
        n = n * (n - 1);
        n--;
    }
    while (m != 1){
        m = m * (m - 1);
        m--;
    }
    result = n / m;
    return result;
}",0
yfan919,1698047895,6,"#include <stdio.h>

int Choose(int a,int b)
{
    int result,n,m;
    if (a > b && a > 0 && b > 0){
        n = a;
        m = b;
    }
    else if(b > a && a > 0 && b > 0){
        n = b;
        m = a;
    }
    else{
        return 0;
    }
    while (n != n - m + 1){
        n = n * (n - 1);
        n--;
    }
    while (m != 1){
        m = m * (m - 1);
        m--;
    }
    result = n / m;
    return result;
}",
yfan919,1698047911,7,"#include <stdio.h>

int Choose(int a,int b)
{
    int result,n,m;
    if (a > b && a > 0 && b > 0){
        n = a;
        m = b;
    }
    else if(b > a && a > 0 && b > 0){
        n = b;
        m = a;
    }
    else{
        return 0;
    }
    while (n != n - m + 1){
        n = n * (n - 1);
        n--;
    }
    while (m != 1){
        m = m * (m - 1);
        m--;
    }
    result = n / m;
    return result;
}",0
yfan919,1698062877,8,"#include <stdio.h>
int Choose(int n, int m)
{
    if (m > n)
        return 0;
    else if (n == m || m == 0)
        return 1;
    else
        return Choose(n - 1, m) + Choose(n - 1, m - 1);

}

int main()
{
	printf(""Result = %d"", Choose(6, 2));

}",0
yfan919,1698062882,9,"#include <stdio.h>
int Choose(int n, int m)
{
    if (m > n)
        return 0;
    else if (n == m || m == 0)
        return 1;
    else
        return Choose(n - 1, m) + Choose(n - 1, m - 1);

}

",1
yfen481,1697421054,1,"int Choose(int n, int m){
    int res;
    if (n==m || m==0){
        return 1;
    } else {
        res=Choose(n-1,m)+Choose(n-1,m-1);
        return res;
    }
}",
yfen481,1697421056,2,"int Choose(int n, int m){
    int res;
    if (n==m || m==0){
        return 1;
    } else {
        res=Choose(n-1,m)+Choose(n-1,m-1);
        return res;
    }
}",1
yhaf839,1697438904,1,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base cases: n choose 0 and n choose n are both 1
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
yhaf839,1697438952,2,"int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
yilm466,1697949838,1,"int Choose(int n, int m) {
    // Base cases
    if (m == 0) {
        return 1; // n choose 0 is always 1
    }
    
    if (m == n) {
        return 1; // n choose n is also 1
    }
    
    // Check if m is greater than n
    if (m > n) {
        return 0; // It's not possible to choose more elements than available
    }

    // Recursive cases
    int value1 = Choose(n-1, m-1); // Choose one less from n and one less from m
    int value2 = Choose(n-1, m); // Choose one less from n but same m
    
    int result = value1 + value2; // Sum of two values
    
    return result; // Return the final result
}",
yilm466,1697949840,2,"int Choose(int n, int m) {
    // Base cases
    if (m == 0) {
        return 1; // n choose 0 is always 1
    }
    
    if (m == n) {
        return 1; // n choose n is also 1
    }
    
    // Check if m is greater than n
    if (m > n) {
        return 0; // It's not possible to choose more elements than available
    }

    // Recursive cases
    int value1 = Choose(n-1, m-1); // Choose one less from n and one less from m
    int value2 = Choose(n-1, m); // Choose one less from n but same m
    
    int result = value1 + value2; // Sum of two values
    
    return result; // Return the final result
}",1
yjun129,1697752719,1,"int Choose(int n, int m) 
{
    if (m == 0 || m == n)
    {
        return 1;
    }
    else if (m > n)
    {
        return 0;
    }
    else
    {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
ykwa219,1698016640,1,"int Choose(int n, int m) {
	int x;
	if ((m == n) || (m == 0)) {
		return 1;
	}
	else if ((0 < m) && (m < n)) {
		x = Choose(n - 1, m) + Choose(n - 1, m - 1);
		return x;
	}
}",
ykwa219,1698016736,2,"int Choose(int n, int m) {
	int x;
	if ((m == n) || (m == 0)) {
		return 1;
	}
	else if ((0 < m) && (m < n)) {
		x = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return x;
}",
ykwa219,1698016738,3,"int Choose(int n, int m) {
	int x;
	if ((m == n) || (m == 0)) {
		return 1;
	}
	else if ((0 < m) && (m < n)) {
		x = Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	return x;
}",1
ylee818,1698113259,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
ylee818,1698113262,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
yrah128,1698024065,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; // Base cases: n choose 0 and n choose n are both 1
    } else {
        // Use the recursive formula for n choose m
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
yrah128,1698024077,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
yrah128,1698024079,3,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
ysun512,1697459699,1,"int Choose(int i, int j){
    if (i == j || j == 0){
        return 1;
    }
    else{
        return Choose(i - 1, j - 1) + Choose(i - 1, j);
    }
}",1
ytho155,1697619304,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;//maketh sure code aint broken
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);//do the deed. 
    }
}",
ytho155,1697619307,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;//maketh sure code aint broken
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);//do the deed. 
    }
}",1
ytse120,1697633862,1,"int Choose(int n, int m) {
    int x=n, y=m;
    for (int i = n-1; i > n-m; i--) {
        x *= i;
    }
    for (int i = m-1; i > 0; i--) {
        y *= i;
    }
    return x/y;
}",
ytse120,1697633863,2,"int Choose(int n, int m) {
    int x=n, y=m;
    for (int i = n-1; i > n-m; i--) {
        x *= i;
    }
    for (int i = m-1; i > 0; i--) {
        y *= i;
    }
    return x/y;
}",0
ytse120,1697637901,3,"int Choose(int n, int m) {
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else {
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",1
yxie884,1697947516,1,"int Choose(int n, int m){
    if ((m == 0) ||(n == m)){
        return 1;
    }else{
        return (Choose((n - 1), m) + Choose((n-1), (m-1)));
    }
    return 0;
}",
yxie884,1697947518,2,"int Choose(int n, int m){
    if ((m == 0) ||(n == m)){
        return 1;
    }else{
        return (Choose((n - 1), m) + Choose((n-1), (m-1)));
    }
    return 0;
}",1
yyin299,1697871782,1,"#include <stdio.h>
int Choose(int n, int m)
{
    int poss;
    if (m == 0)
    {
        poss = 1;
        return poss;
    }
    else if (m == n)
    {
        poss = 1;
        return poss;
    }
    else
    {
        poss = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return poss;
    }
}",
yyin299,1697871784,2,"#include <stdio.h>
int Choose(int n, int m)
{
    int poss;
    if (m == 0)
    {
        poss = 1;
        return poss;
    }
    else if (m == n)
    {
        poss = 1;
        return poss;
    }
    else
    {
        poss = Choose(n - 1, m) + Choose(n - 1, m - 1);
        return poss;
    }
}",1
yyin440,1697506601,1,"#include <stdio.h>

int Choose (int a, int b) {
    if (b == a || b == 0){
        return 1;
    }
    if (b == 1) {
        return a ;
    }
    return Choose (a - 1, b - 1);
}
",0
yyin440,1697506664,2,"#include <stdio.h>

int Choose (int a, int b) {
    if (b == a || b == 0){
        return 1;
    }
    if (b == 1) {
        return a ;
    }
    return Choose (a - 1, b - 1);
}",
yyin440,1697506737,3,"#include <stdio.h>

int Choose (int a, int b) {
    if (b == a || b == 0){
        return 1;
    }
    if (b == 1) {
        return a ;
    }
    return Choose (a - 1, b - 1) + Choose(a - 1 , b);
}",
yyin440,1697506738,4,"#include <stdio.h>

int Choose (int a, int b) {
    if (b == a || b == 0){
        return 1;
    }
    if (b == 1) {
        return a ;
    }
    return Choose (a - 1, b - 1) + Choose(a - 1 , b);
}",1
yzhe520,1697757689,1,"int Choose(int n, int m) {
	int n1 = 0, n2 = 0, sum = 0;
	if ((m == 0) || (m==n)) {
		return 1;
	}
	else if ((0<m) && (m<n)){
		return (Choose((n - 1), m)+ Choose((n - 1), (m - 1)));
	}
}",
yzhe520,1697757704,2,"int Choose(int n, int m) {
	if ((m == 0) || (m==n)) {
		return 1;
	}
	else if ((0<m) && (m<n)){
		return (Choose((n - 1), m)+ Choose((n - 1), (m - 1)));
	}
}",
yzhe520,1697757779,3,"int Choose(int n, int m) {
	if ((m == 0) || (m==n)) {
		return 1;
	}
	else if ((0<m) && (m<n)){
		return (Choose(n - 1, m)+ Choose(n - 1, m - 1));
	}
}",
yzhe520,1697757784,4,"int Choose(int n, int m) {
	if ((m == 0) || (m==n)) {
		return 1;
	}
	else {
		return (Choose(n - 1, m)+ Choose(n - 1, m - 1));
	}
}",
yzhe520,1697757786,5,"int Choose(int n, int m) {
	if ((m == 0) || (m==n)) {
		return 1;
	}
	else {
		return (Choose(n - 1, m)+ Choose(n - 1, m - 1));
	}
}",1
zche975,1698130616,1,"#include <stdio.h>

int Choose(int n, int m) {
    // Base cases
    if (m == 0 || m == n) {
        return 1;
    }
    // Recursive formula
    return Choose(n-1, m-1) + Choose(n-1, m);
}
",
zche975,1698130627,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}
",
zche975,1698130632,3,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n-1, m-1) + Choose(n-1, m);
}
",1
zcol623,1697454005,1,"//Author:zcol623
int Choose(int n, int m) {
    
    //Base cases: only one way to pick 0 things and all the things 
    if (m == 0 || m == n) {
        return 1;
    }

    //Recursive cases:
    //Include the current item in the selection(decrease n and m by 1).
    //Exclude the current item from the selection (only decrease n by 1).
    return Choose(n - 1, m - 1) + Choose(n - 1, m);//Add the above together to find how many ways you can choose m things from n things in total
}",
zcol623,1697454008,2,"//Author:zcol623
int Choose(int n, int m) {
    
    //Base cases: only one way to pick 0 things and all the things 
    if (m == 0 || m == n) {
        return 1;
    }

    //Recursive cases:
    //Include the current item in the selection(decrease n and m by 1).
    //Exclude the current item from the selection (only decrease n by 1).
    return Choose(n - 1, m - 1) + Choose(n - 1, m);//Add the above together to find how many ways you can choose m things from n things in total
}",1
zcra120,1697844866,1,"
 #include <stdio.h>
int factorial(int x){
    if (x == 0 || x == 1)
    return 1;
    else {return x *factorial(x-1);}
}

void Choose(int n,int m){
    int x;
  x =  factorial(n)/(factorial(m)*(factorial((n-m))));
    printf(""%d"", x);
}
",
zcra120,1697844963,2,"
 #include <stdio.h>
int factorial(int x){
    if (x == 0 || x == 1)
    return 1;
    else {return x *factorial(x-1);}
}

int Choose(int n,int m){
    int x;
  x =  factorial(n)/(factorial(m)*(factorial((n-m))));
    printf(""%d"", x);
}
",
zcra120,1697844981,3,"
 #include <stdio.h>
int factorial(int x){
    if (x == 0 || x == 1)
    return 1;
    else {return x *factorial(x-1);}
}

int Choose(int n,int m){
    int x;
  x =  factorial(n)/(factorial(m)*(factorial((n-m))));
    return x;
}
",
zcra120,1697844983,4,"
 #include <stdio.h>
int factorial(int x){
    if (x == 0 || x == 1)
    return 1;
    else {return x *factorial(x-1);}
}

int Choose(int n,int m){
    int x;
  x =  factorial(n)/(factorial(m)*(factorial((n-m))));
    return x;
}
",0
zcra120,1697845209,5,"
 #include <stdio.h>
 long long factorial(int x){
    if (x == 0 || x == 1)
    return 1;
    else {return x *factorial(x-1);}
}

void Choose(int n,int m){
    int x;
  x =  factorial(n)/(factorial(m)*(factorial((n-m))));
    printf(""%d"", x);
}


",
zcra120,1697845223,6,"
 #include <stdio.h>
 long long factorial(int x){
    if (x == 0 || x == 1)
    return 1;
    else {return x *factorial(x-1);}
}

int Choose(int n,int m){
    int x;
  x =  factorial(n)/(factorial(m)*(factorial((n-m))));
    return x ;
}


",
zcra120,1697845224,7,"
 #include <stdio.h>
 long long factorial(int x){
    if (x == 0 || x == 1)
    return 1;
    else {return x *factorial(x-1);}
}

int Choose(int n,int m){
    int x;
  x =  factorial(n)/(factorial(m)*(factorial((n-m))));
    return x ;
}


",0
zfu276,1697947467,1,"int Choose(int n, int m) {
    if (m == 0 || m >= n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
zfu276,1697947469,2,"int Choose(int n, int m) {
    if (m == 0 || m >= n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
zgab423,1698021217,1,"int Choose(int n, int m) {
    
    if ((m == n) || (m == 0)) {
        return 1;
    }
    
    else {
        return (Choose(n - 1, m - 1)) + (Choose(n - 1, m));  
    } 
}
",
zgab423,1698021219,2,"int Choose(int n, int m) {
    
    if ((m == n) || (m == 0)) {
        return 1;
    }
    
    else {
        return (Choose(n - 1, m - 1)) + (Choose(n - 1, m));  
    } 
}
",1
zgar110,1698022170,1,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

  
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
zgar110,1698022172,2,"int Choose(int n, int m) {

    if (m == 0 || m == n) {
        return 1;
    }

  
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
zgas053,1698024806,1,"int Choose(int n, int m)
{
     if (m == 0 || m == n) {
        return 1; 
    } else if (m > 0 && m < n) {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    } else {
        return 0; 
    }
    
   
}",
zgas053,1698024809,2,"int Choose(int n, int m)
{
     if (m == 0 || m == n) {
        return 1; 
    } else if (m > 0 && m < n) {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    } else {
        return 0; 
    }
    
   
}",1
zgin653,1697590903,1,"int Choose(int total, int number){
    int sum = 0;
    for (int i = total - number +1; i > 0; i--){
        sum += i;
    }
    return sum;
}",0
zgin653,1697947814,2,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    return Choose(n-1,m)+ Choose(n-1,m-1);
}",
zgin653,1697947818,3,"int Choose(int n, int m){
    if (m == 0 || m == n){
        return 1;
    }
    return Choose(n-1,m)+ Choose(n-1,m-1);
}",1
zguo839,1697946529,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
zguo839,1697946550,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",1
zhon780,1697455656,1,"int Choose(int n, int k)
{
    if (k == 1) return n;
    if (k == n) return 1;
    
    return Choose(n-1, k-1) + Choose(n-1, k);
}",
zhon780,1697455658,2,"int Choose(int n, int k)
{
    if (k == 1) return n;
    if (k == n) return 1;
    
    return Choose(n-1, k-1) + Choose(n-1, k);
}",1
zliu578,1697790640,1,"int Choose(int n, int m)
{
	if (n == m || m == 0) {
		return 1;
	}
	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
zliu578,1697790660,2,"int Choose(int n, int m)
{
	if (n == m || m == 0) {
		return 1;
	}
	return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
zpen457,1697613515,1,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    } else if (m == n){
        return 1;
    } else if (0 < m && m < n){
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
}",
zpen457,1697613536,2,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    } else if (m == n){
        return 1;
    } else if (0 < m && m < n){
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
    return 1;
}",
zpen457,1697613540,3,"int Choose(int n, int m)
{
    if (m == 0){
        return 1;
    } else if (m == n){
        return 1;
    } else if (0 < m && m < n){
        return Choose(n-1, m) + Choose(n-1, m-1);
    }
    return 1;
}",1
zqia091,1698119660,1,"#include <stdio.h>

int Choose(int integer1, int integer2) 
{
    if (integer2==0||integer2==integer1) 
    {
        return 1;
    }
    if (integer2>integer1) 
    {
        return 0;
    }
    return Choose(integer1-1,integer2-1)+Choose(integer1-1,integer2);
}",
zqia091,1698119662,2,"#include <stdio.h>

int Choose(int integer1, int integer2) 
{
    if (integer2==0||integer2==integer1) 
    {
        return 1;
    }
    if (integer2>integer1) 
    {
        return 0;
    }
    return Choose(integer1-1,integer2-1)+Choose(integer1-1,integer2);
}",1
zshi453,1697967298,1,"int Choose (int n, int m){
    if ((m>0)&&(n>m)){
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
zshi453,1697967400,2,"#include <stdio.h>
int Choose (int n, int m){
    if ((m>0)&&(n>m)){
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}",
zshi453,1697967423,3,"#include <stdio.h>

int Choose (int n, int m){
    if ((m>0)&&(n>m)){
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
    else{
        return 1;
    }
}",
zshi453,1697967424,4,"#include <stdio.h>

int Choose (int n, int m){
    if ((m>0)&&(n>m)){
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
    else{
        return 1;
    }
}",1
zvor566,1697856418,1,"int Choose(int n, int m) 
{
	if ((m == 0) || (m == n)) {
		return 1;
	}
	if ((m > 0) && (m < n)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else {
		return 0;
	}
}",
zvor566,1697856423,2,"int Choose(int n, int m) 
{
	if ((m == 0) || (m == n)) {
		return 1;
	}
	if ((m > 0) && (m < n)) {
		return Choose(n - 1, m) + Choose(n - 1, m - 1);
	}
	else {
		return 0;
	}
}",1
zwan373,1698051657,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",
zwan373,1698051673,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1;
    }
    return Choose(n - 1, m - 1) + Choose(n - 1, m);
}",1
zwil198,1698012879,1,"int Choose(int n, int m) {
    
    
    if (m == 0 || m == n) {
        
        return 1;
        
    }
    
    else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
        
    }
    
}",
zwil198,1698012922,2,"int Choose(int m, int n) {
    
    
    if (m == n || m == 0) {
        
        return 1;
        
    }
    
    else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
        
    }
    
}",0
zwil198,1698012929,3,"int Choose(int m, int n) {
    
    
    if (m == n || m == 0) {
        
        return 1;
        
    }
    
    else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
        
    }
    
}",
zwil198,1698012939,4,"int Choose(int m, int n) {
    
    
    if (m == 0 || m == n) {
        
        return 1;
        
    }
    
    else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
        
    }
    
}",
zwil198,1698012958,5,"int Choose(int n, int m) {
    
    
    if (m == n || m == 0) {
        
        return 1;
        
    }
    
    else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
        
    }
    
}",
zwil198,1698012960,6,"int Choose(int n, int m) {
    
    
    if (m == n || m == 0) {
        
        return 1;
        
    }
    
    else {
        
        return Choose(n - 1, m - 1) + Choose(n - 1, m); 
        
    }
    
}",1
zwon694,1697424948,1,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1); 
    }
}",
zwon694,1697424950,2,"int Choose(int n, int m)
{
    if (m == 0) {
        return 1;
    } else if (n == m) {
        return 1;
    } else {
        return Choose(n - 1, m) + Choose(n - 1, m - 1); 
    }
}",1
zwu591,1697885413,1,"int Choose(int n, int m)
{
    int result = 0;

    if (m == 0 || n == m)
    return 1; // There are two cases that only one way to pick, pick 0 thing from something and pick all things from something. So in these case, return 1.

    result = Choose(n - 1, m) + Choose(n - 1, m - 1); // In the othercases (0 < m < n), the way to pick m things from n things is the sum of pick m things from n - 1 things and pick m - 1 things from n - 1 things.

    return result; // return the result to finish the code and return to previous code to finish that and return to teh previous code, and so on.
}",1
zwu591,1697951192,2,"int Choose(int n, int m)
{
    int result = 1;

    if (m != 0 && n != m)
    result = Choose(n - 1, m) + Choose(n - 1, m - 1);

    return result;
}",1
zyah987,1698103746,1,"#include <stdio.h>

int Choose(int n, int m) 
{
    
    for (int delay = 0; delay < 100; delay++) {}

    if (m == 1) {
        return n;
    }

    if (m == 0 || m == n) {
        return 1;
    }

    if (m < 0 || m > n) {
        return 0;
    }

    int initial = Choose(n - 1, m);
    int secondary = Choose(n - 1, m - 1);

    return initial + secondary;
}

",
zyah987,1698103750,2,"#include <stdio.h>

int Choose(int n, int m) 
{
    
    for (int delay = 0; delay < 100; delay++) {}

    if (m == 1) {
        return n;
    }

    if (m == 0 || m == n) {
        return 1;
    }

    if (m < 0 || m > n) {
        return 0;
    }

    int initial = Choose(n - 1, m);
    int secondary = Choose(n - 1, m - 1);

    return initial + secondary;
}

",1
zyao804,1697952814,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == n ||m==0) {
        return 1;
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",
zyao804,1697952818,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == n ||m==0) {
        return 1;
    }

    return Choose(n - 1, m) + Choose(n - 1, m - 1);
}",1
zyu100,1697428051,1,"int Choose (int n, int m){
    if (m == 0 || m==n){
        return 1;
    }else{
        return Choose (n-1,m)+ Choose (n-1,m-1);
    }
   
}
",
zyu100,1697428055,2,"int Choose (int n, int m){
    if (m == 0 || m==n){
        return 1;
    }else{
        return Choose (n-1,m)+ Choose (n-1,m-1);
    }
   
}
",1
zzho965,1698050861,1,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",
zzho965,1698050901,2,"#include <stdio.h>

int Choose(int n, int m) {
    if (m == 0 || m == n) {
        return 1; 
    } else {
        return Choose(n - 1, m - 1) + Choose(n - 1, m);
    }
}
",1
zzol692,1697965619,1,"int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0; 
    }
    int result = 1;
    for (int i = 1; i <= m; i++) {
        result = result * (n - i + 1) / i;
    }
    return result;
}",
zzol692,1697965621,2,"int Choose(int n, int m) {
    if (m < 0 || m > n) {
        return 0; 
    }
    int result = 1;
    for (int i = 1; i <= m; i++) {
        result = result * (n - i + 1) / i;
    }
    return result;
}",1
