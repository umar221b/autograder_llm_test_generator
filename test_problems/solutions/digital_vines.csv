upi,time,try,answer,rawfraction
aaza463,1696887882,1,"int TallestVine(int seedA, int seedB, int days){
    int LowStartVal, HighStartVal, heightA, heightB, tempNum, sum, rem;
    
    if (seedA > seedB){
        LowStartVal = seedB;
        HighStartVal = seedA;
    }
    else if (seedB > seedA){
        LowStartVal = seedA;
        HighStartVal = seedB;
    }
    else {
        return seedA;
    }

    heightA = LowStartVal;
    heightB = HighStartVal;

    for (int i = 0; i <= days; i++){
        for (int j = 0; j <= days; j++){

            if (heightA == heightB){
                return heightA;
            }          

            if (j != days){
                tempNum = heightB;
                sum = 0;
                while (tempNum != 0){
                    rem = tempNum % 10;
                    sum += rem;
                    tempNum = tempNum / 10;
                }
                heightB += sum;
            }
        }

        if (i != days){
            heightB = HighStartVal;
        }

        if (i != days){
            tempNum = heightA;
            sum = 0;
            while (tempNum != 0){
                rem = tempNum % 10;
                sum += rem;
                tempNum = tempNum / 10;
            }
            heightA += sum;
        }

    }

    if (heightA > heightB){
        return heightA;
    }
    else {
        return heightB;
    }


}",1
abha257,1697349108,1,"int TallestVine(int seedA, int seedB, int days) {
	int i, sum = 0, m = 0, temp = seedA, temp2 = seedB;
	int store[500];
	int store2[500];
	store[0] = seedA;
	store2[0] = seedB;
	int max = seedA;
	int max2 = seedB;

	for (i = 1; i <= days; i++) {
		while (temp > 0)
		{	
			m = temp % 10;
			sum = sum + m;
			temp = temp / 10;
		}
		store[i] = store[i - 1] + sum;
		temp = store[i];
		sum = 0;
	}

	for (i = 1; i <= days; i++) {
		while (temp2 > 0)
		{
			m = temp2 % 10;
			sum = sum + m;
			temp2 = temp2 / 10;
		}
		store2[i] = store2[i - 1] + sum;
		temp2 = store2[i];
		sum = 0;
	}

	for (i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (store[i] == store2[j]) {
				return store[i];
			}
		}
	}
	for (i = 1; i <= days; i++) {
		if (store[i] > max) {
			max = store[i];
		}
	}
	for (i = 1; i <= days; i++) {
		if (store2[i] > max2) {
			max2 = store2[i];
		}
	}
	if (max > max2) {
		return max;
	}
	else {
		return max2;
	}
}",0
abha257,1697349278,2,"int TallestVine(int seedA, int seedB, int days) {
	int i, sum = 0, m = 0, temp = seedA, temp2 = seedB;
	int store[days];
	int store2[days];
	store[0] = seedA;
	store2[0] = seedB;
	int max = seedA;
	int max2 = seedB;

	for (i = 1; i <= days; i++) {
		while (temp > 0)
		{	
			m = temp % 10;
			sum = sum + m;
			temp = temp / 10;
		}
		store[i] = store[i - 1] + sum;
		temp = store[i];
		sum = 0;
	}

	for (i = 1; i <= days; i++) {
		while (temp2 > 0)
		{
			m = temp2 % 10;
			sum = sum + m;
			temp2 = temp2 / 10;
		}
		store2[i] = store2[i - 1] + sum;
		temp2 = store2[i];
		sum = 0;
	}

	for (i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (store[i] == store2[j]) {
				return store[i];
			}
		}
	}
	for (i = 1; i <= days; i++) {
		if (store[i] > max) {
			max = store[i];
		}
	}
	for (i = 1; i <= days; i++) {
		if (store2[i] > max2) {
			max2 = store2[i];
		}
	}
	if (max > max2) {
		return max;
	}
	else {
		return max2;
	}
}",0
abha257,1697349553,3,"int TallestVine(int seedA, int seedB, int days) {
	int i, sum = 0, m = 0, temp = seedA, temp2 = seedB;
	int store[100000];
	int store2[100000];
	store[0] = seedA;
	store2[0] = seedB;
	int max = seedA;
	int max2 = seedB;

	for (i = 1; i <= days; i++) {
		while (temp > 0)
		{	
			m = temp % 10;
			sum = sum + m;
			temp = temp / 10;
		}
		store[i] = store[i - 1] + sum;
		temp = store[i];
		sum = 0;
	}

	for (i = 1; i <= days; i++) {
		while (temp2 > 0)
		{
			m = temp2 % 10;
			sum = sum + m;
			temp2 = temp2 / 10;
		}
		store2[i] = store2[i - 1] + sum;
		temp2 = store2[i];
		sum = 0;
	}

	for (i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (store[i] == store2[j]) {
				return store[i];
			}
		}
	}
	for (i = 1; i <= days; i++) {
		if (store[i] > max) {
			max = store[i];
		}
	}
	for (i = 1; i <= days; i++) {
		if (store2[i] > max2) {
			max2 = store2[i];
		}
	}
	if (max > max2) {
		return max;
	}
	else {
		return max2;
	}
}",1
abro522,1696837426,1,"int DigitSum(int v) {
    int r = 0;
    while (v > 0) {
        r += v % 10;
        v /= 10;
    }
    return r;
}

int TallestVine(int seedA, int seedB, int days) {
    int timeA = days;
    int timeB = days;
    while (seedA != seedB && (timeA > 0 || timeB > 0)) {
        if ((seedA < seedB || timeB <= 0) && timeA > 0) {
            seedA += DigitSum(seedA);
            timeA--;
        } else if ((seedB < seedA || timeA <= 0) && timeB > 0) {
            seedB += DigitSum(seedB);
            timeB--;
        }
    }
    return seedA > seedB ? seedA : seedB;
}",1
acam267,1697366655,1,"int TallestVine(int seedA, int seedB, int days) {
    int heightsA[1000] = {0};
    int heightsB[1000] = {0};
    
    int sizeA = 0;
    int sizeB = 0;
    
    for(int i = 0; i < days; i++) {
        
        seedA += CalculateSum(seedA);
        seedB += CalculateSum(seedB);
        
        if(seedA == seedB) {
            return seedA;
        }
        
        for(int a = 0; a < sizeA; a++) {
            if(heightsA[a] == seedB) {
                return seedB;
            }
        }
        
        for(int b = 0;b < sizeB; b++) {
            if(heightsB[b] == seedA) {
                return seedA;
            }
        }
        
        heightsA[sizeA] = seedA;
        heightsB[sizeB] = seedB;
        sizeA++;
        sizeB++;
    }
    
    if(seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}

int CalculateSum(int number) {
    int sum = 0;
    
    while(number != 0) {
        sum += number % 10;
        number /= 10;
    }
    
    return sum;
}",0
acam267,1697366761,2,"int CalculateSum(int number) {
    int sum = 0;
    
    while(number != 0) {
        sum += number % 10;
        number /= 10;
    }
    
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightsA[1000] = {0};
    int heightsB[1000] = {0};
    
    int sizeA = 0;
    int sizeB = 0;
    
    for(int i = 0; i < days; i++) {
        
        seedA += CalculateSum(seedA);
        seedB += CalculateSum(seedB);
        
        if(seedA == seedB) {
            return seedA;
        }
        
        for(int a = 0; a < sizeA; a++) {
            if(heightsA[a] == seedB) {
                return seedB;
            }
        }
        
        for(int b = 0;b < sizeB; b++) {
            if(heightsB[b] == seedA) {
                return seedA;
            }
        }
        
        heightsA[sizeA] = seedA;
        heightsB[sizeB] = seedB;
        sizeA++;
        sizeB++;
    }
    
    if(seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
acam267,1697366975,3,"int CalculateSum(int number) {
    int sum = 0;
    
    while(number != 0) {
        sum += number % 10;
        number /= 10;
    }
    
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightsA[10000] = {0};
    int heightsB[10000] = {0};
    
    int sizeA = 0;
    int sizeB = 0;
    
    for(int i = 0; i < days; i++) {
        
        seedA += CalculateSum(seedA);
        seedB += CalculateSum(seedB);
        
        if(seedA == seedB) {
            return seedA;
        }
        
        for(int a = 0; a < sizeA; a++) {
            if(heightsA[a] == seedB) {
                return seedB;
            }
        }
        
        for(int b = 0;b < sizeB; b++) {
            if(heightsB[b] == seedA) {
                return seedA;
            }
        }
        
        heightsA[sizeA] = seedA;
        heightsB[sizeB] = seedB;
        sizeA++;
        sizeB++;
    }
    
    if(seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",1
acoc261,1696993454,1,"#include <stdio.h>
int SumTheDigits(int Value)
{
    int add = 0;
    int sum = 0;
    while(Value > 0){
        add = Value % 10;
        sum = sum + add;
        Value = Value / 10;
    }
    return sum;
}
int TallestVine(int seedA, int seedB, int days)
{
    int i = 0;
    int j = 0;
    int storageB = seedB;
    if (seedA == seedB){
        return(seedA);
    }
    for(i = 0; i < days; i++){
        for(j = 0; j < days; j++){
            if (seedA == seedB){
                return(seedA);
            } 
            else {
            seedB = seedB + SumTheDigits(seedB);
            }
        }
        if (seedA == seedB){
        return(seedA);
        }
        seedA = seedA + SumTheDigits(seedA);
        seedB = storageB;
    }
    for(i = 0; i < days; i++){
        seedB = seedB + SumTheDigits(seedB);
    } 
    if(seedB > seedA){
        return(seedB);
    } else {
        return(seedA);
    }
}",0
acoc261,1696995030,2,"#include <stdio.h>
int SumTheDigits(int Value)
{
    int add = 0;
    int sum = 0;
    while(Value > 0){
        add = Value % 10;
        sum = sum + add;
        Value = Value / 10;
    }
    return sum;
}
int TallestVine(int seedA, int seedB, int days)
{
    int i = 0;
    int j = 0;
    int storageB = seedB;
    if (seedA == seedB){
        return(seedA);
    }
    for(i = 0; i < days; i++){
        seedA = seedA + SumTheDigits(seedA);
        for(j = 0; j < days; j++){
            seedB = seedB + SumTheDigits(seedB);    
            if (seedA == seedB){
                return(seedA);
            }
        }
        seedB = storageB;
    }
    for(i = 0; i < days; i++){
        seedB = seedB + SumTheDigits(seedB);
    } 
    if(seedB > seedA){
        return(seedB);
    } else {
        return(seedA);
    }
}",1
afit324,1697349014,1,"#include <stdio.h>
#include <string.h>

int digitsum(int number)
{
    int sum = 0;
    char string[100] = {'\0'};

    sprintf(string, ""%d"", number);
    
    for (int i = 0; i < strlen(string); i++) {
        sum += string[i] - '0'; 
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int tempA, tempB;
    tempB = seedB;
    tempA = seedA;
    int tempA2, tempB2;
    
    for (int i = 0; i < days; i++) {
        
        seedA += digitsum(seedA);
        seedB += digitsum(seedB);
        printf(""%d %d\n"", seedA, seedB);
        
        tempB2 = tempB;
        tempA2 = tempA;
        
        for (int j = 0; j < i; j++) {
            
            tempB2 += digitsum(tempB);
            
            if (seedA == tempB2) {
                return seedA;
            }
            
            tempA2 += digitsum(tempA);
            
            if (seedB == tempA2) {
                return seedB;
            }
        }
    }
    
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
    
}",0
afit324,1697349034,2,"#include <stdio.h>
#include <string.h>

int digitsum(int number)
{
    int sum = 0;
    char string[100] = {'\0'};

    sprintf(string, ""%d"", number);
    
    for (int i = 0; i < strlen(string); i++) {
        sum += string[i] - '0'; 
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int tempA, tempB;
    tempB = seedB;
    tempA = seedA;
    int tempA2, tempB2;
    
    for (int i = 0; i < days; i++) {
        
        seedA += digitsum(seedA);
        seedB += digitsum(seedB);
        
        tempB2 = tempB;
        tempA2 = tempA;
        
        for (int j = 0; j < i; j++) {
            
            tempB2 += digitsum(tempB);
            
            if (seedA == tempB2) {
                return seedA;
            }
            
            tempA2 += digitsum(tempA);
            
            if (seedB == tempA2) {
                return seedB;
            }
        }
    }
    
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
    
}",0
afit324,1697349542,3,"#include <stdio.h>
#include <string.h>

int digitsum(int number)
{
    int sum = 0;
    char string[100] = {'\0'};

    sprintf(string, ""%d"", number);
    
    for (int i = 0; i < strlen(string); i++) {
        sum += string[i] - '0'; 
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int tempA, tempB;
    tempB = seedB;
    tempA = seedA;
    int tempA2, tempB2;
    
    for (int i = 0; i < days; i++) {
        
        seedA += digitsum(seedA);
        seedB += digitsum(seedB);
        
        tempB2 = tempB;
        tempA2 = tempA;
        
        for (int j = 0; j < i; j++) {
            
            tempB2 += digitsum(tempB2);
            
            if (seedA == tempB2) {
                return seedA;
            }
            
            tempA2 += digitsum(tempA2);
            
            if (seedB == tempA2) {
                return seedB;
            }
        }
    }
    
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
    
}",0
afit324,1697349646,4,"#include <stdio.h>
#include <string.h>

int digitsum(int number)
{
    int sum = 0;
    char string[100] = {'\0'};

    sprintf(string, ""%d"", number);
    
    for (int i = 0; i < strlen(string); i++) {
        sum += string[i] - '0'; 
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int tempA, tempB;
    tempB = seedB;
    tempA = seedA;
    int tempA2, tempB2;
    
    for (int i = 0; i < days; i++) {
        
        seedA += digitsum(seedA);
        seedB += digitsum(seedB);
        
        tempB2 = tempB;
        tempA2 = tempA;
        
        if (seedA == seedB) {
            return seedA;
        }
        
        
        for (int j = 0; j < i; j++) {
            
            tempB2 += digitsum(tempB2);
            
            if (seedA == tempB2) {
                return seedA;
            }
            
            tempA2 += digitsum(tempA2);
            
            if (seedB == tempA2) {
                return seedB;
            }
        }
    }
    
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
    
}",1
agan859,1697258852,1,"int TallestVine(int seedA, int seedB, int days)
{
    int Time = days;
    int H = 0; int T = 0; int O = 0; int sum = 0;
    int A[100];
    int B[100]; 

    A[0] = seedA;
    B[0] = seedB;
    int i;

    for (i = 0; i < (Time + 1); i++) {
        H = A[i] / 100;
        T = (A[i] - H * 100) / 10;
        O = (A[i] - H * 100 - T * 10);
        sum = H + T + O;

        A[i + 1] = (A[i] + sum);
        
    }
    
    for (i = 0; i < (Time + 1); i++) {
        H = B[i] / 100;
        T = (B[i] - H * 100) / 10;
        O = (B[i] - H * 100 -T * 10);
        sum = H + T + O;

        B[i + 1] = (B[i] + sum);
        

    }

    int k, l;

    for (k = 0; k < (Time+1); k++) {
        for (l = 0; l < (Time + 1); l++) {
            if (A[k] == B[l]) {
                return A[k];
            }
        }
    }

    int a;
    int maxA = A[0];
    int maxB = B[0];

    for (a = 1; a < (Time+1); a++) {
        if (A[a] > maxA) {
            maxA = A[a];
        }
        if (B[a] > maxB) {
            maxB = B[a];
        }
    }
    
    if (maxA >= maxB) {
        return maxA;
    } else {
        return maxB;
    }
}",0
agan859,1697259153,2,"int TallestVine(int seedA, int seedB, int days)
{
    int Time = days;
    int S = 0; 
    int H = 0; int T = 0; int O = 0; int sum = 0;
    int A[100];
    int B[100]; 

    A[0] = seedA;
    B[0] = seedB;
    int i;

    for (i = 0; i < (Time + 1); i++) {
        S = A[i] / 1000;
        H = (A[i] - S*1000) / 100;
        T = (A[i] - H * 100 - S*1000) / 10;
        O = (A[i] - H * 100 - T * 10 - S*1000);
        sum = H + T + O + S;

        A[i + 1] = (A[i] + sum);
        
    }
    
    for (i = 0; i < (Time + 1); i++) {
        S = B[i] / 1000;
        H = (B[i] - S * 1000) / 100;
        T = (B[i] - H * 100 - S * 1000) / 10;
        O = (B[i] - H * 100 - T * 10 - S * 1000);
        sum = H + T + O + S;

        B[i + 1] = (B[i] + sum);
        

    }

    int k, l;

    for (k = 0; k < (Time+1); k++) {
        for (l = 0; l < (Time + 1); l++) {
            if (A[k] == B[l]) {
                return A[k];
            }
        }
    }

    int a;
    int maxA = A[0];
    int maxB = B[0];

    for (a = 1; a < (Time+1); a++) {
        if (A[a] > maxA) {
            maxA = A[a];
        }
        if (B[a] > maxB) {
            maxB = B[a];
        }
    }
    
    if (maxA >= maxB) {
        return maxA;
    } else {
        return maxB;
    }
}",0
agan859,1697275596,3,"int TallestVine(int seedA, int seedB, int days)
{
    int A[5000];
    int B[5000]; 

    A[0] = seedA;
    B[0] = seedB;
    int i, j;
    int temp = seedA;

    for (i = 0; i < days; i++) {
        int num = seedA;
        int total = 0;
        int leftover = 0;
        while (num != 0) {
            leftover = num % 10;
            total += leftover;
            num /= 10;
        }
        temp += total;
        A[i] = temp;
        seedA = temp;
    }

    temp = seedB;
    for (j = 0; j < days; j++) {
        int num = seedB;
        int total = 0;
        int leftover = 0;
        while (num != 0) {
            leftover = num % 10;
            total += leftover;
            num /= 10;
        }

        temp += total;
        B[j] = temp;
        seedB = temp;
    }

    int k, l;

    for (k = 0; k < days; k++) {
        for (l = 0; l < days; l++) {
            if (A[k] == B[l]) {
                return A[k];
            }
        }
    }

    int a;
    int maxA = A[0];
    int maxB = B[0];

    for (a = 1; a < (days); a++) {
        if (A[a] > maxA) {
            maxA = A[a];
        }
        if (B[a] > maxB) {
            maxB = B[a];
        }
    }
    
    if (maxA >= maxB) {
        return maxA;
    } else {
        return maxB;
    }
}",1
agou682,1697434173,1,"#include <stdio.h>

int calculate_growth(int seed) {
    int growth=seed;
    while (seed>0) {
        growth+=seed % 10;
        seed /= 10;
    }
    return growth;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
    int growthA = calculate_growth(heightA);
    int growthB = calculate_growth(heightB);

        if (growthA == growthB) {
            return growthA;
        } else if (growthA > growthB) {
            heightB = growthB;
        } else {
            heightA = growthA;
        }
    }

    
    return (heightA > heightB) ? heightA : heightB;
}
",0
ahac139,1697289043,1,"int DigitSum(int i)
{

    int sum = 0;
    int remainder;

    while(i!=0)
    {
        remainder = i %10;
        sum = sum + remainder;
        i = i / 10;
    }

    return sum;
}

int TallestVine(int seed1, int seed2, int days)
{

    int endReached = 0;

    for (int i = 0; i < days; i++)
    {

        int fSeed2 = seed2;
        for (int j = 0; j < days+1; j++)
        {
            // printf(""seed1: %d, fseed2: %d, seed2: %d\n"", seed1,fSeed2, seed2);
            if (fSeed2 == seed1)
            {
                // printf(""end found!\n"");
                endReached = 1;
                seed2 = fSeed2;
                break;
            }

            fSeed2 += DigitSum(fSeed2);
            
        }

        if (!endReached)
        {
            seed1 += DigitSum(seed1);     
        }
        else
        {
            break;
        }      

    }
    
    if (seed1 > seed2)
    {
        return seed1;
    }
    else
    {
        return seed2;
    }

}",0
ahac139,1697290416,2,"int DigitSum(int i)
{

    int sum = 0;
    int remainder;

    while(i!=0)
    {
        remainder = i % 10;
        sum = sum + remainder;
        i = i / 10;
    }

    return sum;
}

int TallestVine(int seed1, int seed2, int days)
{

    int endReached = 0;
    int Oseed2 = seed2;
    int fSeed2;

    for (int i = 0; i < days+1; i++)
    {

        fSeed2 = Oseed2;
        for (int j = 0; j < days+1; j++)
        {
            // printf(""seed1: %d, fseed2: %d, seed2: %d\n"", seed1,fSeed2, seed2);
            if (fSeed2 == seed1)
            {
                // printf(""end found!\n"");
                endReached = 1;
                seed2 = fSeed2;
                break;
            }

            fSeed2 += DigitSum(fSeed2);
            
        }

        if ((!endReached)&&(i!=days))
        {
            seed1 += DigitSum(seed1);     
            seed2 += DigitSum(seed2);    
        }
        else
        {
            
            break;
        }      

    }
    
    // printf(""LAST: seed1: %d, fseed2: %d, seed2: %d\n"", seed1,fSeed2, seed2);
    if (seed1 > seed2)
    {
        return seed1;
    }
    else
    {
        return seed2;
    }

}",1
ahai431,1697059181,1,"int TallestVine(int seed1, int seed2, int days) {
	int value1;
	int value2;
	int value3;
	int temp;
	int Sum1 = seed1;
	int Sum2 = seed2;

	for (int i = 0; i < days; i++) {
		temp = Sum1 % 100;
		value1 = temp % 10;
		value2 = (temp - value1) / 10;
		value3 = (Sum1 - temp) / 100;
		Sum1 = Sum1 + value1 + value2 + value3;

		Sum2 = seed2;
		for (int j = 0; j < days; j++) {
			temp = Sum2 % 100;
			value1 = temp % 10;
			value2 = (temp - value1) / 10;
			value3 = (Sum2 - temp) / 100;
			Sum2 = Sum2 + value1 + value2 + value3;

			if (Sum1 == Sum2) {
				return Sum1;
			}
		}
	}
	if (Sum1 > Sum2) {
		return Sum1;
	}
	else {
		return Sum2;
	}
}",0
ahai431,1697336986,2,"#include <stdio.h>

int TallestVine(int seed1, int seed2, int days) {
	int value1;
	int value2;
	int value3;
	int temp;
	int j;

	int Sum1 = seed1;
	int Sum2 = seed2;

	for (int i = 0; i < days; i++) {
		
		int number1 = Sum1;
		int numberarray1[20] = { 0 };
		int index1 = 0;
		int count1 = 1;
		while (number1 > 0) {
			numberarray1[index1] = number1 % 10;
			number1 /= 10;
			index1++;
			count1++;
		}
		for (int ar1 = 0; ar1 < count1; ar1++) {
			Sum1 = Sum1 + numberarray1[ar1];
		}

		Sum2 = seed2;

		j = 0;
		while ((Sum1 != Sum2) && ((Sum2 < Sum1) || (i == days-1)) && (j < days)) {
			int number2 = Sum2;
			int numberarray2[20] = { 0 };
			int index2 = 0;
			int count2 = 1;
			while (number2 > 0) {
				numberarray2[index2] = number2 % 10;
				number2 /= 10;
				index2++;
				count2++;
			}
			for (int ar2 = 0; ar2 < count2; ar2++) {
				Sum2 = Sum2 + numberarray2[ar2];
			}

			j++;
		}
		if (Sum1 == Sum2) {
			return Sum1;
		}
	}
	if (Sum1 > Sum2) {
		return Sum1;
	}
	else {
		return Sum2;
	}
}


int main() {

	printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
	printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
	printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
	printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

	printf(""Tallest vine = %d\n"", TallestVine(20, 1000, 72));
	printf(""Tallest vine = %d\n"", TallestVine(20, 1000, 73));
	return 0;
}",0
ahai431,1697337055,3,"#include <stdio.h>

int TallestVine(int seed1, int seed2, int days) {
	int j;

	int Sum1 = seed1;
	int Sum2 = seed2;

	for (int i = 0; i < days; i++) {
		
		int number1 = Sum1;
		int numberarray1[20] = { 0 };
		int index1 = 0;
		int count1 = 1;
		while (number1 > 0) {
			numberarray1[index1] = number1 % 10;
			number1 /= 10;
			index1++;
			count1++;
		}
		for (int ar1 = 0; ar1 < count1; ar1++) {
			Sum1 = Sum1 + numberarray1[ar1];
		}

		Sum2 = seed2;

		j = 0;
		while ((Sum1 != Sum2) && ((Sum2 < Sum1) || (i == days-1)) && (j < days)) {
			int number2 = Sum2;
			int numberarray2[20] = { 0 };
			int index2 = 0;
			int count2 = 1;
			while (number2 > 0) {
				numberarray2[index2] = number2 % 10;
				number2 /= 10;
				index2++;
				count2++;
			}
			for (int ar2 = 0; ar2 < count2; ar2++) {
				Sum2 = Sum2 + numberarray2[ar2];
			}

			j++;
		}
		if (Sum1 == Sum2) {
			return Sum1;
		}
	}
	if (Sum1 > Sum2) {
		return Sum1;
	}
	else {
		return Sum2;
	}
}",1
ahas673,1697255331,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int SumOfDigits(int *value){
    
    int sum = 0;
    int remainder;

    while (*value != 0){
        remainder = *value % 10;
        sum = sum + remainder;
        *value = *value / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    
    int a = 0;
    int b = 0;
    int i = 0;
    int j = 0;
    
    int p = seedA;
    int s = seedB;

    int original = seedA;
    int original2 = seedB;

    if (seedA > seedB){
        i = 0;
        while (i < days){
            a = SumOfDigits(&p);
            seedA = seedA + a;
            p = seedA;
            while (j < days){
                b = SumOfDigits(&s);
                seedB = seedB + b;
                s = seedB;
                if (s==seedA){
                    return s;
                }
                j++;
            }
            i++;
            s = original2;
            seedB = original2;
            j=0;
            
        }
        return seedA;
    }
    
    if (seedA < seedB){
        i = 0;
        while (i < days){
            a = SumOfDigits(&s);
            seedB = seedB + a;
            s = seedB;
            while (j < days){
                b = SumOfDigits(&p);
                seedA = seedA + b;
                p = seedA;
                if (p==s){
                    return p;
                }
                j++;
            }
            i++;
            seedA = original;
            p = original;
            j = 0;
            
        }
        return seedB;
    }
    
}",0
ahas673,1697256019,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int SumOfDigits(int* value) {

    int sum = 0;
    int remainder;

    while (*value != 0) {
        remainder = *value % 10;
        sum = sum + remainder;
        *value = *value / 10;
    }

    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int a = 0;
    int b = 0;
    int i = 0;
    int j = 0;

    int p = seedA;
    int s = seedB;

    int original = seedA;
    int original2 = seedB;

    if (seedA > seedB) {
        i = 0;
        while (i < days) {
            a = SumOfDigits(&p);
            seedA = seedA + a;
            p = seedA;
            while (j < days) {
                b = SumOfDigits(&s);
                seedB = seedB + b;
                s = seedB;
                if (s == seedA) {
                    return s;
                }
                j++;
            }
            i++;
            s = original2;
            seedB = original2;
            j = 0;

        }

    }

    if (seedA < seedB) {
        i = 0;
        while (i < days) {
            a = SumOfDigits(&s);
            seedB = seedB + a;
            s = seedB;
            while (j < days) {
                b = SumOfDigits(&p);
                seedA = seedA + b;
                p = seedA;
                if (p == s) {
                    return p;
                }
                j++;
            }
            i++;
            seedA = original;
            p = original;
            j = 0;

        }
    }

    if (seedA > seedB) {
        return seedA;
    }else if(seedA < seedB){
        return seedB;
    }
    else {
        return seedA;
    }
}",0
ahas673,1697257330,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int SumOfDigits(int* value) {

    int sum = 0;
    int remainder;

    while (*value != 0) {
        remainder = *value % 10;
        sum = sum + remainder;
        *value = *value / 10;
    }

    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int a = 0;
    int b = 0;
    int i = 0;
    int j = 0;

    int p = seedA;
    int s = seedB;

    int original = seedA;
    int original2 = seedB;

    if (seedA > seedB) {
        i = 0;
        while (i < days) {
            a = SumOfDigits(&p);
            seedA = seedA + a;
            p = seedA;
            while (j < days) {
                if (s == p) {
                    return s;
                }
                b = SumOfDigits(&s);
                seedB = seedB + b;
                s = seedB;
                if (s == p) {
                    return s;
                }
                j++;
            }
            i++;
            seedB = original2;
            j = 0;
        }

    }

    if (seedA < seedB) {
        i = 0;
        while (i < days) {
            a = SumOfDigits(&s);
            seedB = seedB + a;
            s = seedB;
            while (j < days) {
                if (s == p) {
                    return s;
                }
                b = SumOfDigits(&p);
                seedA = seedA + b;
                p = seedA;
                if (p == s) {
                    return p;
                }
                j++;
            }
            i++;
            seedA = original;
            j = 0;

        }
    }

    if (s > p) {
        return s;
    }else if(s < p){
        return p;
    }
    else {
        return s;
    }
}",0
ahua579,1696934316,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int findIncrement(int seed) {
	int increment = 0;
	while (seed > 0) {
		increment += (seed % 10);
		seed = seed / 10;
	}
	return increment;
}

int TallestVine(int seedA, int seedB, int days) {
	int daystemp = 0;
	int arrayA[600];
	int arrayB[600];
	int incrementA = 0;
	int incrementB = 0;

	for (int i = 0; i <= days; i++) {
		seedA += incrementA;
		seedB += incrementB;
		arrayA[i] = seedA;
		arrayB[i] = seedB;
		incrementA = findIncrement(seedA);
		incrementB = findIncrement(seedB);
	}

	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (arrayA[i] == arrayB[j]) {
				return arrayA[i];
			}
		}
	}
	if (arrayA[days] > arrayB[days]) {
		return arrayA[days];
	}
	else {
		return arrayB[days];
	}

}",0
ahua579,1696934370,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int findIncrement(int seed) {
	int increment = 0;
	while (seed > 0) {
		increment += (seed % 10);
		seed = seed / 10;
	}
	return increment;
}

int TallestVine(int seedA, int seedB, int days) {
	int arrayA[600];
	int arrayB[600];
	int incrementA = 0;
	int incrementB = 0;

	for (int i = 0; i <= days; i++) {
		seedA += incrementA;
		seedB += incrementB;
		arrayA[i] = seedA;
		arrayB[i] = seedB;
		incrementA = findIncrement(seedA);
		incrementB = findIncrement(seedB);
	}

	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (arrayA[i] == arrayB[j]) {
				return arrayA[i];
			}
		}
	}
	if (arrayA[days] > arrayB[days]) {
		return arrayA[days];
	}
	else {
		return arrayB[days];
	}

}",0
ahua579,1696936469,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int findIncrement(int seed) {
    int increment = 0;
    while (seed > 0) {
        increment += (seed % 10);
        seed = seed / 10;
    }
    return increment;
}

int TallestVine(int seedA, int seedB, int days) {
    int arrayA[10000];
    int arrayB[10000];
    int incrementA = 0;
    int incrementB = 0;

    for (int i = 0; i <= days; i++) {
        seedA += incrementA;
        seedB += incrementB;
        arrayA[i] = seedA;
        arrayB[i] = seedB;
        incrementA = findIncrement(seedA);
        incrementB = findIncrement(seedB);
    }

    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (arrayA[i] == arrayB[j]) {
                return arrayA[i];
            }
        }
    }
    if (arrayA[days] > arrayB[days]) {
        return arrayA[days];
    }
    else {
        return arrayB[days];
    }

}

int main(void)
{
    printf(""Tallest vine = %d\n"", TallestVine(480, 481, 5000));

}",0
ahua579,1696936488,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int findIncrement(int seed) {
    int increment = 0;
    while (seed > 0) {
        increment += (seed % 10);
        seed = seed / 10;
    }
    return increment;
}

int TallestVine(int seedA, int seedB, int days) {
    int arrayA[10000];
    int arrayB[10000];
    int incrementA = 0;
    int incrementB = 0;

    for (int i = 0; i <= days; i++) {
        seedA += incrementA;
        seedB += incrementB;
        arrayA[i] = seedA;
        arrayB[i] = seedB;
        incrementA = findIncrement(seedA);
        incrementB = findIncrement(seedB);
    }

    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (arrayA[i] == arrayB[j]) {
                return arrayA[i];
            }
        }
    }
    if (arrayA[days] > arrayB[days]) {
        return arrayA[days];
    }
    else {
        return arrayB[days];
    }

}
",1
ajhz011,1697155584,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {

	int i, j, k = 0;
	int value1, value2, seedResetterA = seedA, seedResetterB = seedB;

	if (seedA < seedB) {
		for (j = 0; j < days; j++) {
			seedA = seedResetterA;
			if (seedA == seedB) {
				return seedA;
			}
			for (i = 0; i < days; i++) { // Compares each seedA growth to seedB growth
				value1 = seedA;
				while (value1 != 0) {
					seedA = seedA + value1 % 10;
					value1 = value1 / 10;
				}
				if (seedA == seedB) {
					return seedA;
				}
			}
			value2 = seedB;
			while (value2 != 0) {
				seedB = seedB + value2 % 10;
				value2 = value2 / 10;
			}
		}
	}
	else {
		for (j = 0; j < days; j++) {
			seedB = seedResetterB;
			if (seedA == seedB) {
				return seedA;
			}
			for (i = 0; i < days; i++) { // Compares each seedA growth to seedB growth
				value2 = seedB;
				while (value2 != 0) {
					seedB = seedB + value2 % 10;
					value2 = value2 / 10;
				}
				if (seedA == seedB) {
					return seedA;
				}
			}
			value1 = seedA;
			while (value1 != 0) {
				seedA = seedA + value1 % 10;
				value1 = value1 / 10;
			}
		}
	}

	if (seedA > seedB) { // If seedA and seedB never became the same length at some point
		return seedA;
	}
	else {
		return seedB;
	}
}",0
ajhz011,1697155640,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {

	int i, j;
	int value1, value2, seedResetterA = seedA, seedResetterB = seedB;

	if (seedA < seedB) {
		for (j = 0; j < days; j++) {
			seedA = seedResetterA;
			if (seedA == seedB) {
				return seedA;
			}
			for (i = 0; i < days; i++) { // Compares each seedA growth to seedB growth
				value1 = seedA;
				while (value1 != 0) {
					seedA = seedA + value1 % 10;
					value1 = value1 / 10;
				}
				if (seedA == seedB) {
					return seedA;
				}
			}
			value2 = seedB;
			while (value2 != 0) {
				seedB = seedB + value2 % 10;
				value2 = value2 / 10;
			}
		}
	}
	else {
		for (j = 0; j < days; j++) {
			seedB = seedResetterB;
			if (seedA == seedB) {
				return seedA;
			}
			for (i = 0; i < days; i++) { // Compares each seedA growth to seedB growth
				value2 = seedB;
				while (value2 != 0) {
					seedB = seedB + value2 % 10;
					value2 = value2 / 10;
				}
				if (seedA == seedB) {
					return seedA;
				}
			}
			value1 = seedA;
			while (value1 != 0) {
				seedA = seedA + value1 % 10;
				value1 = value1 / 10;
			}
		}
	}

	if (seedA > seedB) { // If seedA and seedB never became the same length at some point
		return seedA;
	}
	else {
		return seedB;
	}
}",1
ajhz318,1697449598,1,"#include <stdio.h>
#include <string.h>

int TallestVine(int seedA, int seedB, int days) {
    int A_Vine[200][3] = {0};
    int vine_a[200] = {0};
    int tempA;

    int B_Vine[200][3] = {0};
    int vine_b[200] = {0};
    int tempB;

    for(int i = 0; i <= days; i++) {
        tempA = seedA;
        for(int j = 0; j < 3; j++) {
            A_Vine[i][j] = seedA % 10;
            seedA /= 10;
        }
        vine_a[i] = (A_Vine[i][2] * 100) + (A_Vine[i][1] * 10) + A_Vine[i][0];
        seedA = tempA + (A_Vine[i][2]) + (A_Vine[i][1]) + A_Vine[i][0];
    }

    for(int i = 0; i <= days; i++) {
        tempB = seedB;
        for(int j = 0; j < 3; j++) {
            B_Vine[i][j] = seedB % 10;
            seedB /= 10;
        }
        vine_b[i] = (B_Vine[i][2] * 100) + (B_Vine[i][1] * 10) + B_Vine[i][0];
        seedB = tempB + (B_Vine[i][2]) + (B_Vine[i][1]) + B_Vine[i][0];
    }

    for(int i = 0; i <= days; i++) {
        for(int j = 0; j <= days; j++) {
            if(vine_a[j] == vine_b[i]) {
                return vine_a[j];
            }
        }
    }

    if(vine_a[days] > vine_b[days]) {
        return vine_a[days];
    }
    else {
        return vine_b[days];
    }
}
",0
ajhz444,1697273814,1,"int TallestVine(int seedA, int seedB, int days) {
	int i_a = 0;
	int i_b = 0;
	int n, digits, tempseed, j, k, res;
	int inProgress = 1;
	while ((seedA != seedB) && (inProgress == 1)) {
		if (((seedA < seedB) || i_b == days) && (i_a < days)) {
			n = 1;
			digits = 0;
			tempseed = seedA;
			res = 0;
			while (seedA / n > 1) {
				n *= 10;
				digits++;
			}
			for (j = digits; j > 0; j--) {
				n /= 10;
				res = tempseed / n;
				seedA += res;
				tempseed -= res * n;
			}
			i_a++;
		}
		else if (i_b < days) {
			n = 1;
			digits = 0;
			tempseed = seedB;
			res = 0;
			while (seedB / n > 1) {
				n *= 10;
				digits++;
			}
			for (k = digits; k > 0; k--) {
				n /= 10;
				res = tempseed / n;
				seedB += res;
				tempseed -= res * n;
			}
			i_b++;
		}
		else {
			inProgress--;
		}
	}
	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",0
ajhz444,1697274184,2,"int TallestVine(int seedA, int seedB, int days) {
	int i_a = 0;
	int i_b = 0;
	int n, digits, tempseed, j, k, res;
	int inProgress = 1;
	while ((seedA != seedB) && (inProgress == 1)) {
		if (((seedA < seedB) || i_b == days) && (i_a < days)) {
			n = 1;
			digits = 0;
			tempseed = seedA;
			res = 0;
			while (seedA / n >= 1) {
				n *= 10;
				digits++;
			}
			for (j = digits; j > 0; j--) {
				n /= 10;
				res = tempseed / n;
				seedA += res;
				tempseed -= res * n;
			}
			i_a++;
		}
		else if (i_b < days) {
			n = 1;
			digits = 0;
			tempseed = seedB;
			res = 0;
			while (seedB / n >= 1) {
				n *= 10;
				digits++;
			}
			for (k = digits; k > 0; k--) {
				n /= 10;
				res = tempseed / n;
				seedB += res;
				tempseed -= res * n;
			}
			i_b++;
		}
		else {
			inProgress--;
		}
	}
	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",1
ajin489,1697446256,1,"#include <stdio.h>

int Climb(int number){
    int digit;
    int digit_sum = 0;
    int temp = number;

    while (temp != 0) {
        digit = temp % 10;
        digit_sum += digit;
        temp /= 10;
    }
    number += digit_sum;
    return number;
}

int TallestVine(int seedA, int seedB, int days){

    int A_days = 0;
    int B_days = 0;

    A_climb:
    while (A_days < days){
        seedA = Climb(seedA);
        A_days++;

        if (seedA == seedB){
            return seedA;
        }

        if (seedA < seedB){
            goto A_climb;
        } else {
            goto A_end;
        }
    }
    A_end:

    B_climb:
    while (B_days < days){
        seedB = Climb(seedB);
        B_days++;

        if (seedA == seedB){
            return seedA;
        }

        if (seedB < seedA){
            goto B_climb;
        } else {
            goto B_end;
        }
    }
    B_end:

    if (A_days < days){
        goto A_climb;
    }
    if (B_days < days){
        goto B_climb;
    }

    // Vines finish climbing
    if (seedA > seedB){
        return seedA;
    } else {
        return seedB;
    }
}",1
aker238,1697166516,1,"int TallestVine(int seedA, int seedB, int days){
    
    int sA = seedA;
    int sB = seedB;
    for (int i=0; i<days; i++){
        int Ga = (sA / 100) + ((sA % 100) / 10) + (sA % 10);
        int Gb = (sB / 100) + ((sB % 100) / 10) + (sB % 10);
        
        sA += Ga;
        sB += Gb;
        
        int x = i;
        int ha = seedA;
        int hb = seedB;
        while (x>0){
            ha = ha + ((ha / 100) + ((ha % 100) / 10) + (ha % 10));
            if (sB == ha){
                return sB;
            }
            hb = hb + ((hb / 100) + ((hb % 100) / 10) + (hb % 10));
            if (sA == hb){
                return sA;
            }
            x--;
        }
        if (sB == ha){
            sB = 0;
        }
            
        if (sA == hb){
            sA = 0;
        }
    
    }
    
    if (sB > sA){
        return sB;
    }
    if (sA > sB){
        return sA;
    }
}",0
aker238,1697166801,2,"int TallestVine(int seedA, int seedB, int days){
    
    int sA = seedA;
    int sB = seedB;
    for (int i=0; i<days; i++){
        int Ga = (sA / 100) + ((sA % 100) / 10) + (sA % 10);
        int Gb = (sB / 100) + ((sB % 100) / 10) + (sB % 10);
        
        sA += Ga;
        sB += Gb;
        
        int x = i;
        int ha = seedA;
        int hb = seedB;
        while (x>0){
            ha = ha + ((ha / 100) + ((ha % 100) / 10) + (ha % 10));
            if (sB == ha){
                return sB;
            }
            hb = hb + ((hb / 100) + ((hb % 100) / 10) + (hb % 10));
            if (sA == hb){
                return sA;
            }
            x--;
        }
        if (sB == ha){
            sB = 0;
        }
            
        if (sA == hb){
            sA = 0;
        }
    }
    
    if (sB > sA){
        return sB;
    }
    if (sA >= sB){
        return sA;
    }
}",0
aker238,1697231899,3,"int TallestVine(int seedA, int seedB, int days) {

    int sA = seedA;
    int sB = seedB;
    for (int i = 0; i < days; i++) {
        int Ga = (sA / 100) + ((sA % 100) / 10) + (sA % 10);
        int Gb = (sB / 100) + ((sB % 100) / 10) + (sB % 10);

        sA += Ga;
        sB += Gb;

        int x = i;
        int ha = seedA;
        int hb = seedB;
        while (x > 0) {
            ha = ha + ((ha / 100) + ((ha % 100) / 10) + (ha % 10));
            if (sB == ha) {
                return sB;
            }
            hb = hb + ((hb / 100) + ((hb % 100) / 10) + (hb % 10));
            if (sA == hb) {
                return sA;
            }
            x--;
        }
        if (sB == ha) {
            return sB;
        }

        if (sA == hb) {
            return sA;
        }
    }

    if (sB > sA) {
        return sB;
    }
    return sA;
    
}",0
aker238,1697429786,4,"int AddSum(int x){
    int sum = 0;
    int d = 0;
    while (x!=0){
        d = x % 10;
        sum += d;
        x = x / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int s;
    for (int i=0; i<days; i++){
        seedA += AddSum(seedA);
        s = seedB;
        for (int j=0; j<days; j++){
            s += AddSum(s);
            if (seedA == s){
                return seedA;
            }
        }
    }
    if (seedA > s){
        return seedA;
    }
    return s;
}",1
akod059,1697264617,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int sumDigits(int num) 
{
	int digit;
	int i = 0;
	int sum = num % 10;
	while (num / 10 != 0) {
		num = num / 10;
		digit = num % 10;
		sum = sum + digit;
		i++;
	}

	return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
	int vineA = seedA;
	int vineB = seedB;
	
	for (int dayA = 1; dayA <= days; dayA++) {
		vineB = seedB;
		vineA += sumDigits(vineA);
		for (int dayB = 1; dayB <= days; dayB++) {
			vineB += sumDigits(vineB);
			if (vineA == vineB)
			{
				return vineA;
			}
		}
	}
	
	if (vineA > vineB) 
	{
		return vineA;
	}
	else 
	{
		return vineB;
	}
}",1
alum086,1697275100,1,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA; // Current height of vine A
    int vineB = seedB; // Current height of vine B
    int joinDay = -1; // Day at which the vines join (initialize to -1, indicating they haven't joined yet)

    for (int day = 1; day <= days; day++) {
        // Calculate the growth for each vine (sum of digits)
        int sumA = 0;
        int sumB = 0;
        int tempA = vineA;
        int tempB = vineB;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        // Update the heights of the vines
        vineA += sumA;
        vineB += sumB;

        // Check if the vines join on this day
        if (vineA == vineB) {
            joinDay = day;
            break;
        }
    }

    // Return the maximum height reached by the vines
    return (joinDay == -1) ? max(vineA, vineB) : vineA;
}
",0
alum086,1697275135,2,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA; // Current height of vine A
    int vineB = seedB; // Current height of vine B
    int joinDay = -1; // Day at which the vines join (initialize to -1, indicating they haven't joined yet)

    for (int day = 1; day <= days; day++) {
        // Calculate the growth for each vine (sum of digits)
        int sumA = 0;
        int sumB = 0;
        int tempA = vineA;
        int tempB = vineB;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        // Update the heights of the vines
        vineA += sumA;
        vineB += sumB;

        // Check if the vines join on this day
        if (vineA == vineB) {
            joinDay = day;
            break;
        }
    }

    // Calculate the maximum height
    if (joinDay == -1) {
        return (vineA > vineB) ? vineA : vineB;
    } else {
        return vineA;
    }
}

",0
alum086,1697275209,3,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA; // Current height of vine A
    int vineB = seedB; // Current height of vine B
    int joinDay = -1; // Day at which the vines join (initialize to -1, indicating they haven't joined yet)

    for (int day = 1; day <= days; day++) {
        // Calculate the growth for each vine (sum of digits)
        int sumA = 0;
        int sumB = 0;
        int tempA = vineA;
        int tempB = vineB;

        // Calculate the sum of digits for vine A
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        // Calculate the sum of digits for vine B
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        // Update the heights of the vines
        vineA += sumA;
        vineB += sumB;

        // Check if the vines join on this day
        if (vineA == vineB) {
            joinDay = day;
            break;
        }
    }

    // Calculate the maximum height
    if (joinDay == -1) {
        // Calculate the maximum height reached by the vines when they don't join
        int maxVine = (vineA > vineB) ? vineA : vineB;

        // Continue growing the taller vine for the remaining days
        for (int day = joinDay + 1; day <= days; day++) {
            int sumMax = 0;
            int tempMax = maxVine;

            // Calculate the sum of digits for the taller vine
            while (tempMax > 0) {
                sumMax += tempMax % 10;
                tempMax /= 10;
            }

            // Update the height of the taller vine
            maxVine += sumMax;
        }

        return maxVine;
    } else {
        return vineA; // The vines have joined, return the height of vine A
    }
}

",0
alum086,1697402494,4,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = heightA;
        int tempB = heightB;

        // Calculate the sum of digits for both vines
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        heightA += sumA;
        heightB += sumB;

        if (heightA == heightB) {
            // The vines have joined, stop growing
            return heightA;
        }
    }

    // If they haven't joined after the specified days, return the taller one
    return (heightA > heightB) ? heightA : heightB;
}

int main() {
    int seedA = 501;
    int seedB = 399;
    int days = 8;
    int result = TallestVine(seedA, seedB, days);
    printf(""The tallest point reached is: %d\n"", result);
    return 0;
}
",0
alum086,1697402503,5,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = heightA;
        int tempB = heightB;

        // Calculate the sum of digits for both vines
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        heightA += sumA;
        heightB += sumB;

        if (heightA == heightB) {
            // The vines have joined, stop growing
            return heightA;
        }
    }

    // If they haven't joined after the specified days, return the taller one
    return (heightA > heightB) ? heightA : heightB;
}",0
alum086,1697402540,6,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = heightA;
        int tempB = heightB;

        // Calculate the sum of digits for both vines
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        heightA += sumA;
        heightB += sumB;

        if (heightA == heightB) {
            // The vines have joined, stop growing
            return heightA;
        }
    }

    // If they haven't joined after the specified days, return the taller one
    return (heightA > heightB) ? heightA : heightB;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));
    printf(""Tallest vine = %d\n"", TallestVine(20, 1000, 72));
    printf(""Tallest vine = %d\n"", TallestVine(20, 1000, 73));

    return 0;
}
",0
alum086,1697402548,7,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = heightA;
        int tempB = heightB;

        // Calculate the sum of digits for both vines
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        heightA += sumA;
        heightB += sumB;

        if (heightA == heightB) {
            // The vines have joined, stop growing
            return heightA;
        }
    }

    // If they haven't joined after the specified days, return the taller one
    return (heightA > heightB) ? heightA : heightB;
}",0
alum086,1697402637,8,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = heightA;
        int tempB = heightB;

        // Calculate the sum of digits for both vines
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        heightA += sumA;
        heightB += sumB;

        if (heightA == heightB) {
            // The vines have joined, stop growing
            return heightA;
        }
    }

    // If they haven't joined after the specified days, return the taller one
    return (heightA > heightB) ? heightA : heightB;
}
",0
amal783,1697019521,1,"#include <stdio.h>

int GrowVine(int branch)
{
	if (branch == 0)
		return 0;
	else
		return branch % 10 + GrowVine(branch / 10);
}

int TallestVine(int seedA, int seedB, int days) {
	int match = (seedA == seedB);
	int growA = 0, growB = 0;
	while ((growA < days || growB < days) && match == 0) {
		if ((seedA < seedB || growB == days) && growA < days) {
			seedA += GrowVine(seedA);
			growA++;
		}
		else if ((seedB < seedA || growA == days) && growB < days) {
			seedB += GrowVine(seedB);
			growB++;
		}
		if (seedA == seedB) {
			match = 1;
		}
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",1
amcm539,1697448297,1,"int TallestVine(int seedA, int seedB, int days){

int copyA,copyB;

    copyA = seedA;
    copyB = seedB;

int arrayleft[100];
int arrayright[100];

int memoryA[days];
int memoryB[days];

int sumleft =seedA;
int sumright = seedB;

/*loop the number of days*/
for (int i=0; i< days; i++){

    memoryA[i] = copyA;
    memoryB[i] = copyB;

    //On any day, find the sum of the values in seed A.
    //determine the individual integers in the seed by using modulus and division
    //integers stored in an array (easier to loop)

    //SeedA separating the individual values
    int a=0;
    while (copyA != 0){
    arrayleft[a] = copyA % 10;
    copyA = (int)(copyA/10);
    a++;
    }

        
    
        //Now sum arrayleft to find the sum of all integers in seedA
        for (int k=0; k<a; k++){
            sumleft = sumleft + arrayleft[k];
        }

                //Now increase the seed value by the sumleft value
                copyA = copyA + sumleft;
                //Now copyA is the next value in the seed

    //SeedB separating the individual values
    int j=0;
    while (copyB != 0){
    arrayright[j] = copyB % 10;
    copyB = (int)(copyB/10);
    j++;
    }

        
        //Now sum arrayright to find the sum of all integers in seedB
        for (int m=0; m<j; m++){
            sumright = sumright + arrayright[m];
        }

                //Now increase the seed value by the sumright value
                copyB = copyB + sumright;
                //Now copyB is the next value in the seed

/*The final step is to compare the new value of A and B against any previous values 
of the opposite vine. This means we must have a mechanism to store every value  */

    //Take the latest value of VineA and compare against all known values of Vine B, which are stored in memoryB
    for (int p = i; p>=0; p--){
        if (copyA == memoryB[p]){
            return copyA;
        }
        if (copyB == memoryA[p]){
            return copyB;
        }
    }

}
if (copyA >=copyB){
    return copyA;

} else {
    return copyB;
}

}",0
amcm539,1697450687,2,"int TallestVine(int seedA, int seedB, int days){

int copyA,copyB;

    copyA = seedA;
    copyB = seedB;

int arrayleft[100];
int arrayright[100];

int memoryA[days];
int memoryB[days];

int sumleft =seedA;
int sumright = seedB;

/*loop the number of days*/
for (int i=0; i< days; i++){

    memoryA[i] = copyA;
    memoryB[i] = copyB;

    //On any day, find the sum of the values in seed A.
    //determine the individual integers in the seed by using modulus and division
    //integers stored in an array (easier to loop)

    //SeedA separating the individual values
    int a=0;
    while (copyA != 0){
    arrayleft[a] = copyA % 10;
    copyA = (int)(copyA/10);
    a++;
    }

        
    
        //Now sum arrayleft to find the sum of all integers in seedA
        for (int k=0; k<a; k++){
            sumleft = sumleft + arrayleft[k];
        }

                //Now increase the seed value by the sumleft value
                copyA = copyA + sumleft;
                //Now copyA is the next value in the seed

    //SeedB separating the individual values
    int j=0;
    while (copyB != 0){
    arrayright[j] = copyB % 10;
    copyB = (int)(copyB/10);
    j++;
    }

        
        //Now sum arrayright to find the sum of all integers in seedB
        for (int m=0; m<j; m++){
            sumright = sumright + arrayright[m];
        }

                //Now increase the seed value by the sumright value
                copyB = copyB + sumright;
                //Now copyB is the next value in the seed

/*The final step is to compare the new value of A and B against any previous values 
of the opposite vine. This means we must have a mechanism to store every value  */

    //Take the latest value of VineA and compare against all known values of Vine B, which are stored in memoryB
    for (int p = i; p>=0; p--){

        if(copyA == copyB){
            return copyA;
        }
        if (copyA == memoryB[p]){
            return copyA;
        }
        if (copyB == memoryA[p]){
            return copyB;
        }
    }

}
if (copyA >=copyB){
    return copyA;

} else {
    return copyB;
}

}",1
amok249,1697355765,1,"int TallestVine(int seedA, int seedB, int days) {
    int i,j,k,sumA,sumB,heightA, heightB, heightC,heightD;
    sumA = 0;
    sumB = 0;
    heightA = seedA;
    heightB = seedA;
    int arrayA[100] = {0};
    
    heightC = seedB;
    heightD = seedB;
    int arrayB[100] = {0};
    
    for (i = 0; i < days; i++ ) {
        while (heightB > 0 || heightD > 0) {
            sumA = sumA + (heightB%10);
            heightB = heightB/10;  
            
            sumB = sumB + (heightD%10);
            heightD = heightD/10;
        }
        heightA += sumA;
        heightB = heightA;
        arrayA[i] = heightA;

        heightC += sumB;
        heightD = heightC;
        arrayB[i] = heightC;
        
        sumA = 0;
        sumB = 0;
        
        
    }
    
    for (j = 0; j < days; j++) {
        for (k = 0; k < days; k++) {
            if (arrayA[j] == arrayB[k]) {
                return arrayA[j];
            } 
        }
    }
    
    if (heightC > heightA) {
        return heightC;
    } else {
        return heightA;
    }

}",0
amok249,1697355837,2,"int TallestVine(int seedA, int seedB, int days) {
    int i,j,k,sumA,sumB,heightA, heightB, heightC,heightD;
    sumA = 0;
    sumB = 0;
    heightA = seedA;
    heightB = seedA;
    int arrayA[100000] = {0};
    
    heightC = seedB;
    heightD = seedB;
    int arrayB[100000] = {0};
    
    for (i = 0; i < days; i++ ) {
        while (heightB > 0 || heightD > 0) {
            sumA = sumA + (heightB%10);
            heightB = heightB/10;  
            
            sumB = sumB + (heightD%10);
            heightD = heightD/10;
        }
        heightA += sumA;
        heightB = heightA;
        arrayA[i] = heightA;

        heightC += sumB;
        heightD = heightC;
        arrayB[i] = heightC;
        
        sumA = 0;
        sumB = 0;
        
        
    }
    
    for (j = 0; j < days; j++) {
        for (k = 0; k < days; k++) {
            if (arrayA[j] == arrayB[k]) {
                return arrayA[j];
            } 
        }
    }
    
    if (heightC > heightA) {
        return heightC;
    } else {
        return heightA;
    }

}",1
aosm976,1697453779,1,"int SumDigits(int number) {
    
    int sum = 0;
    int digit = 0;

    while (number > 0)
    {
        digit = number % 10;
        sum += digit;
        number -= digit;
        number /= 10;
    }

    return sum;

}

int TallestVine(int seedA, int seedB, int days) {

    int day = 1;

    while (seedA != seedB && day <= days)
    {
        if (seedA > seedB) {
            seedA += SumDigits(seedA);
        } else if (seedA > seedB) {
            seedB += SumDigits(seedB);
        }
        day++;

    }

    return (seedA > seedB)*seedA + (seedA < seedB)*seedB;
}",0
aosm976,1697453897,2,"int SumDigits(int number) {
    
    int sum = 0;
    int digit = 0;

    while (number > 0)
    {
        digit = number % 10;
        sum += digit;
        number -= digit;
        number /= 10;
    }

    return sum;

}

int TallestVine(int seedA, int seedB, int days) {

    int day = 1;

    while (seedA != seedB && day <= days)
    {
        if (seedA > seedB) {
            seedA += SumDigits(seedA);
        } else if (seedA > seedB) {
            seedB += SumDigits(seedB);
        }
        else {
            return (seedA > seedB)*seedA + (seedA < seedB)*seedB;
        }
        day++;

    }
    
    return (seedA > seedB)*seedA + (seedA < seedB)*seedB;
    
}",0
apan786,1697377513,1,"#include <stdio.h>

int sum(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = sum(vineA);
        int sumB = sum(vineB);

        if (sumA == sumB) {
            return sumA;
        } else if (sumA > sumB) {
            vineA += sumA;
        } else {
            vineB += sumB;
        }
    }

    int tallest;
    if (vineA > vineB) {
        tallest = vineA;
    } else {
        tallest = vineB;
    }
    
    return tallest;
}",0
apan786,1697450025,2,"#include <stdio.h>

int sum(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int findTallest(int seedA, int seedB, int day) {
    if (day == 0) {
        return (seedA > seedB) ? seedA : seedB;
    }

    int sumA = sum(seedA);
    int sumB = sum(seedB);

    int vineA = seedA + sumA;
    int vineB = seedB + sumB;

    if (vineA == vineB) {
        return vineA;
    } else {
        int tallestA = findTallest(vineA, seedB, day - 1);
        int tallestB = findTallest(seedA, vineB, day - 1);
        return (tallestA > tallestB) ? tallestA : tallestB;
    }
}

int TallestVine(int seedA, int seedB, int days) {
    return findTallest(seedA, seedB, days);
}",0
arus530,1697010266,1,"int TallestVine(int vine1, int vine2, int days){

    int add(int a);

    int temp1 = vine1;
    int temp2 = vine2;
    if (temp1 == temp2){
        return(temp1);
    }

    for (int i = 0; i < days; i++){
        for (int j = 0; j < days; j++){
            temp2 = add(temp2);

            if (temp1 == temp2){
                return(temp1);
            }   
        }
        temp2 = vine2;
        temp1 = add(temp1);
    }

    temp1 = vine1;
    temp2 = vine2;

    for (int i = 0; i < days; i++){
        for (int j = 0; j < days; j++){
            temp1 = add(temp1);

            if (temp2 == temp1){
                return(temp2);
            }   
        }
        temp1 = vine1;
        temp2 = add(temp2);
    }

    for (int i = 0; i < days; i++){
        vine1 = add(vine1);
    }

    for (int i = 0; i < days; i++){
        vine2 = add(vine2);
    }

    if (vine1 > vine2){
        return vine1;
    }
    else {
        return vine2;
    }
}


int add(int a){
    int b = a % 100;
    int temp = a - b;
    int hund = temp / 100;

    int c = b % 10;
    temp = b - c;
    int ten = temp /10;

    int total = hund + ten + c;

    int end = a + total;
    return end;
}",0
arus530,1697011224,2,"int TallestVine(int vine1, int vine2, int days){

    int add(int a);

    int temp1 = vine1;
    int temp2 = vine2;
    if (temp1 == temp2){
        return(temp1);
    }

    for (int i = 0; i < days; i++){
        for (int j = 0; j < days; j++){
            temp2 = add(temp2);

            if (temp1 == temp2){
                return(temp1);
            }   
        }
        temp2 = vine2;
        temp1 = add(temp1);
    }

    temp1 = vine1;
    temp2 = vine2;

    for (int i = 0; i < days; i++){
        for (int j = 0; j < days; j++){
            temp1 = add(temp1);

            if (temp2 == temp1){
                return(temp2);
            }   
        }
        temp1 = vine1;
        temp2 = add(temp2);
    }

    for (int i = 0; i < days; i++){
        vine1 = add(vine1);
    }

    for (int i = 0; i < days; i++){
        vine2 = add(vine2);
    }

    if (vine1 > vine2){
        return vine1;
    }
    else {
        return vine2;
    }
}


int add(int num){

  int start = num;
  int sum = 0;
  while (num != 0){
    sum = sum + (num % 10);
    num = num / 10;
  }

  return sum + start;
}",1
aski294,1697451992,1,"int sumDigits(int number) {
	
	int sumDigits = 0;
	int temp = 0;

	while (number > 0) {
		temp = number % 10;
		sumDigits += temp;
		number /= 10;
	}


	return sumDigits;
}


int TallestVine(int seedA, int seedB, int days) {
	int numberA = seedA;
	int numberB = seedB;
	int iA = 0, iB = 0;
	int newNumber;
	int sumADigits = 0;
	int sumBDigits = 0;
	int continueGrowth = 0;

	while ((iA < days || iB < days)) {
		if ((numberA < numberB && iA < days)) {
			sumADigits = sumDigits(numberA);
			numberA += sumADigits;
			iA++;
		}
		else if ((numberB < numberA && iB < days)) {
			sumBDigits = sumDigits(numberB);
			numberB += sumBDigits;
			iB++;
		}
		else if (numberA == numberB) {
			return numberA;
		}
		else if (iA < days && seedA > numberB) {
			sumADigits = sumDigits(numberA);
			numberA += sumADigits;
			iA++;

		}
		else if (iB < days && seedB > numberA) {
			sumBDigits = sumDigits(numberB);
			numberB += sumBDigits;
			iB++;
		}
		
	}",0
aski294,1697452052,2,"int sumDigits(int number) {
	
	int sumDigits = 0;
	int temp = 0;

	while (number > 0) {
		temp = number % 10;
		sumDigits += temp;
		number /= 10;
	}


	return sumDigits;
}


int TallestVine(int seedA, int seedB, int days) {
	int numberA = seedA;
	int numberB = seedB;
	int iA = 0, iB = 0;
	int sumADigits = 0;
	int sumBDigits = 0;
	int continueGrowth = 0;

	while ((iA < days || iB < days)) {
		if ((numberA < numberB && iA < days)) {
			sumADigits = sumDigits(numberA);
			numberA += sumADigits;
			iA++;
		}
		else if ((numberB < numberA && iB < days)) {
			sumBDigits = sumDigits(numberB);
			numberB += sumBDigits;
			iB++;
		}
		else if (numberA == numberB) {
			return numberA;
		}
		else if (iA < days && seedA > numberB) {
			sumADigits = sumDigits(numberA);
			numberA += sumADigits;
			iA++;

		}
		else if (iB < days && seedB > numberA) {
			sumBDigits = sumDigits(numberB);
			numberB += sumBDigits;
			iB++;
		}
		
	}",0
aski294,1697452094,3,"int sumDigits(int number) {
	
	int sumDigits = 0;
	int temp = 0;

	while (number > 0) {
		temp = number % 10;
		sumDigits += temp;
		number /= 10;
	}


	return sumDigits;
}


int TallestVine(int seedA, int seedB, int days) {
	int numberA = seedA;
	int numberB = seedB;
	int iA = 0, iB = 0;
	int newNumber;
	int sumADigits = 0;
	int sumBDigits = 0;
	int continueGrowth = 0;

	while ((iA < days || iB < days)) {
		if ((numberA < numberB && iA < days)) {
			sumADigits = sumDigits(numberA);
			numberA += sumADigits;
			iA++;
		}
		else if ((numberB < numberA && iB < days)) {
			sumBDigits = sumDigits(numberB);
			numberB += sumBDigits;
			iB++;
		}
		else if (numberA == numberB) {
			return numberA;
		}
		else if (iA < days && seedA > numberB) {
			sumADigits = sumDigits(numberA);
			numberA += sumADigits;
			iA++;

		}
		else if (iB < days && seedB > numberA) {
			sumBDigits = sumDigits(numberB);
			numberB += sumBDigits;
			iB++;
		}
		
	}

	if (numberA > numberB) {
		return numberA;
	}
	else {
		return numberB;
	}
}
",0
aski294,1697452128,4,"int sumDigits(int number) {
	
	int sumDigits = 0;
	int temp = 0;

	while (number > 0) {
		temp = number % 10;
		sumDigits += temp;
		number /= 10;
	}


	return sumDigits;
}


int TallestVine(int seedA, int seedB, int days) {
	int numberA = seedA;
	int numberB = seedB;
	int iA = 0, iB = 0;
	int sumADigits = 0;
	int sumBDigits = 0;

	while ((iA < days || iB < days)) {
		if ((numberA < numberB && iA < days)) {
			sumADigits = sumDigits(numberA);
			numberA += sumADigits;
			iA++;
		}
		else if ((numberB < numberA && iB < days)) {
			sumBDigits = sumDigits(numberB);
			numberB += sumBDigits;
			iB++;
		}
		else if (numberA == numberB) {
			return numberA;
		}
		else if (iA < days && seedA > numberB) {
			sumADigits = sumDigits(numberA);
			numberA += sumADigits;
			iA++;

		}
		else if (iB < days && seedB > numberA) {
			sumBDigits = sumDigits(numberB);
			numberB += sumBDigits;
			iB++;
		}
		
	}

	if (numberA > numberB) {
		return numberA;
	}
	else {
		return numberB;
	}
}
",0
atay777,1697343265,1,"int OneDay(int value)
{
    int i=10;
    int sum=0;
    double j=1;
    int originalvalue=value;
    for (i = 10; i < value; i=10*i)
    {
        j=i;
    }
    while (j>=1)
    {
        while (value>=j)
        {
            sum++;
            value=value-j;
            //printf(""%d sum=%d\n"", value, sum);
        }
        j=j/10;
    }
    return (originalvalue+sum);
}

int TallestVine(int seedA, int seedB, int days)
{
    int i=0;
    int j=0;
    int seedAgrow=seedA;
    int seedBgrow=seedB;
    for (i = 0; i < days; i++)
    {
        seedAgrow = OneDay(seedAgrow);
        //printf(""%d"", seedAgrow);

        for (j = 0; j < days; j++)
        {
            seedBgrow = OneDay(seedBgrow);
            if (seedAgrow==seedBgrow)
            {
                return seedAgrow;
            }
        }
        seedBgrow=seedB;
        
    }
    for (i = 0; i < days; i++)
    {
        seedBgrow=OneDay(seedBgrow);
    }
    if (seedAgrow<seedBgrow)
    {
        return seedB;
    }
    else
    {
        return(seedAgrow);
    }
    
}",0
atay777,1697343591,2,"int OneDay(int value)
{
    int i=10;
    int sum=0;
    double j=1;
    int originalvalue=value;
    for (i = 10; i <= value; i=10*i)
    {
        j=i;
    }
    while (j>=1)
    {
        while (value>=j)
        {
            sum++;
            value=value-j;
            //printf(""%d sum=%d\n"", value, sum);
        }
        j=j/10;
    }
    return (originalvalue+sum);
}

int TallestVine(int seedA, int seedB, int days)
{
    int i=0;
    int j=0;
    int seedAgrow=seedA;
    int seedBgrow=seedB;
    for (i = 0; i < days; i++)
    {
        seedAgrow = OneDay(seedAgrow);
        //printf(""%d"", seedAgrow);

        for (j = 0; j < days; j++)
        {
            seedBgrow = OneDay(seedBgrow);
            if (seedAgrow==seedBgrow)
            {
                return seedAgrow;
            }
        }
        seedBgrow=seedB;
        
    }
    for (i = 0; i < days; i++)
    {
        seedBgrow=OneDay(seedBgrow);
    }
    if (seedAgrow<seedBgrow)
    {
        return seedBgrow;
    }
    else
    {
        return(seedAgrow);
    }
    
}",1
atee059,1697417899,1,"int GrowValue(int seed){
   
    int value = 0;
    int num100 = 0, num10 = 0, num1 = 0;
   
    num100 = seed / 100;
    num10 = (seed / 10) % 10;
    num1 = seed % 10;
   

   
    value = num100 + num10 + num1;
   
    return value;
}

int TallestVine(int seedA, int seedB, int days){
   
    int growA = 0;
    int growB = 0;
    int startB = seedB;
    
    if (seedA == seedB){
       return seedA;
    }
   
   for (int i = 0; i < days; i++){
       
       seedB = startB;
       
       for (int j = 0; j < days; j++){
          
           growB = GrowValue(seedB);
           seedB += growB;
           
           if (seedA == seedB){
               return seedA;
           }
           
       }
       
       growA = GrowValue(seedA);
       seedA += growA;
   }
   
    if (seedA > seedB){
        return seedA;
    }
    else if (seedB > seedA){
        return seedB;
    }
}",0
atee059,1697418167,2,"#include <stdio.h>

int GrowValue(int seed){
   
    int value = 0;
    int num100 = 0, num10 = 0, num1 = 0;
   
    num100 = seed / 100;
    num10 = (seed / 10) % 10;
    num1 = seed % 10;
   

   
    value = num100 + num10 + num1;
   
    return value;
}

int TallestVine(int seedA, int seedB, int days){
   
    int growA = 0;
    int growB = 0;
    int startB = seedB;
    
    if (seedA == seedB){
       return seedA;
    }
   
   for (int i = 0; i < days; i++){
       
       seedB = startB;
       
       for (int j = 0; j < days; j++){
          
           growB = GrowValue(seedB);
           seedB += growB;
           
           if (seedA == seedB){
               return seedA;
           }
           
       }
       
       growA = GrowValue(seedA);
       seedA += growA;
   }
   
    if (seedA > seedB){
        return seedA;
    }
    else{
        return seedB;
    }
}",0
atee059,1697430214,3,"int GrowValue(int seed){
   
    int value = 0;
    int digit = 0;
   
    while (seed > 0) {
        digit = seed % 10;
        value += digit;
        seed /= 10;
    }
   
    return value;
}

int TallestVine(int seedA, int seedB, int days){
   
    int growA = 0;
    int growB = 0;
    int startB = seedB;
   
    if (seedA == seedB){
       return seedA;
    }
   
   for (int i = 0; i < days; i++){
       
       seedB = startB;
       
       for (int j = 0; j < days; j++){
         
           growB = GrowValue(seedB);
           seedB += growB;
           
           if (seedA == seedB){
               return seedA;
           }
           
       }
       
       growA = GrowValue(seedA);
       seedA += growA;
   }
   
   seedB = startB;
       
   for (int j = 0; j < days; j++){
     
       growB = GrowValue(seedB);
       seedB += growB;
       
       if (seedA == seedB){
           return seedA;
       }
       
   }
   
    if (seedA > seedB){
        return seedA;
    }
    else{
        return seedB;
    }
}",1
athu157,1696951318,1,"int TallestVine(int seedA, int seedB, int days) {

	int heightA = seedA;
	int heightB = seedB;
	int arrayA[200];
	int arrayB[200];

	for (int i = 0; i < days; i++) {
		// seed a
		int sumA = 0;
		int tempA = heightA;

		while (tempA > 0) {
			int rem = tempA % 10;
			sumA += rem;
			tempA = tempA / 10;
		}
		heightA = heightA += sumA;
		arrayA[i] = heightA;

		// seed b
		int sumB = 0;
		int tempB = heightB;

		while (tempB > 0) {
			int rem = tempB % 10;
			sumB += rem;
			tempB = tempB / 10;
		}
		heightB = heightB += sumB;
		arrayB[i] = heightB;
	}

	// check for connections
	for (int a = 0; a < days; a++) {
		for (int b = 0; b < days; b++) {
			if (arrayA[a] == arrayB[b]) {
				return arrayA[a];
			}
		}
	}
	// no connections
	if (heightA > heightB) {
		return heightA;
	}
	else
		return heightB;
}",0
athu157,1696951581,2,"int TallestVine(int seedA, int seedB, int days) {

	int heightA = seedA;
	int heightB = seedB;
	int arrayA[200];
	int arrayB[200];

	for (int i = 0; i < days; i++) {
		// seed a
		int sumA = 0;
		int tempA = heightA;

		while (tempA > 0) {
			int rem = tempA % 10;
			sumA += rem;
			tempA = tempA / 10;
		}
		heightA += sumA;
		arrayA[i] = heightA;

		// seed b
		int sumB = 0;
		int tempB = heightB;

		while (tempB > 0) {
			int rem = tempB % 10;
			sumB += rem;
			tempB = tempB / 10;
		}
		heightB += sumB;
		arrayB[i] = heightB;
	}

	// check for connections
	for (int a = 0; a < days; a++) {
		for (int b = 0; b < days; b++) {
			if (arrayA[a] == arrayB[b]) {
				return arrayA[a];
			}
		}
	}
	// no connections
	if (heightA > heightB) {
		return heightA;
	}
	else
		return heightB;
}",0
athu157,1696953222,3,"int TallestVine(int seedA, int seedB, int days) {

	int heightA = seedA;
	int heightB;
	for (int a = 0; a < days; a++) {
		// seed a
		int sumA = 0;
		int tempA = heightA;

		while (tempA > 0) {
			int rem = tempA % 10;
			sumA += rem;
			tempA = tempA / 10;
		}
		heightA += sumA;

			heightB = seedB;
			for (int b = 0; b < days; b++) {
				// seed b
				int sumB = 0;
				int tempB = heightB;

				while (tempB > 0) {
					int rem = tempB % 10;
					sumB += rem;
					tempB = tempB / 10;
				}
				heightB += sumB;

				if (heightA == heightB) {
					return heightA;
				}
			}
	}

	// no connections
	if (heightA > heightB) {
		return heightA;
	}
	else
		return heightB;
}",1
awar747,1697440062,1,"
int SumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        // Calculate growth for each vine
        int growthA = SumOfDigits(heightA);
        int growthB = SumOfDigits(heightB);

        // Update vine heights
        heightA += growthA;
        heightB += growthB;

        // Check if vines have joined
        if (heightA == heightB) {
            break;
        }
    }

    // Return the maximum height reached by both vines
    return (heightA > heightB) ? heightA : heightB;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

    return 0;
}",0
awar747,1697440122,2,"int SumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        // Calculate growth for each vine
        int growthA = SumOfDigits(heightA);
        int growthB = SumOfDigits(heightB);

        // Update vine heights
        heightA += growthA;
        heightB += growthB;

        // Check if vines have joined
        if (heightA == heightB) {
            break;
        }
    }

    // Return the maximum height reached by both vines
    return (heightA > heightB) ? heightA : heightB;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

    return 0;
}",0
awri757,1697266556,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumDigits(int number)
{
	int sum = 0;
	int digit;

	while (number != 0) {
		digit = number % 10; // gives LSD
		sum += digit; // adds LSD to sum
		number /= 10; // removes LSD from number by integer division
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int heightsA[50] = { 0 };
	int heightsB[50] = { 0 };
	int i, j, k;
	int maxHeight = -1;
	int meet = 1;

	heightsA[0] = seedA;
	heightsB[0] = seedB;
	
	//printf(""A:  B:  \n"");
	//printf(""%-3d %-3d\n"", heightsA[0], heightsB[0]);
	// grow each vine individually to a max height
	for (i = 1; i <= days; i++) {
		heightsA[i] = heightsA[i - 1] + SumDigits(heightsA[i - 1]);
		heightsB[i] = heightsB[i - 1] + SumDigits(heightsB[i - 1]);
		//printf(""%-3d %-3d\n"", heightsA[i], heightsB[i]);
	}

	// find if at any point the 2 values are equal
	i = 0;
	while (i <= days && meet) {
		j = 0;
		while (j <= days) {
			if (heightsA[i] == heightsB[j]) {
				meet = 0;

				// set values above meeting to 0			
				for (k = i + 1; k <= days; k++){
					heightsA[k] = 0;
				}
				for (k = j + 1; k <= days; k++) {
					heightsB[k] = 0;
				}

				break;
			}
			j++;
		}
		i++;
	}


	//find max value
	for (i = 0; i <= days; i++) {
		if (heightsA[i] >= maxHeight) {
			maxHeight = heightsA[i];
		}
		if (heightsB[i] >= maxHeight) {
			maxHeight = heightsB[i];
		}
	}

	return maxHeight;
}",0
awri757,1697266609,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumDigits(int number)
{
	int sum = 0;
	int digit;

	while (number != 0) {
		digit = number % 10; // gives LSD
		sum += digit; // adds LSD to sum
		number /= 10; // removes LSD from number by integer division
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int heightsA[1000] = { 0 };
	int heightsB[1000] = { 0 };
	int i, j, k;
	int maxHeight = -1;
	int meet = 1;

	heightsA[0] = seedA;
	heightsB[0] = seedB;
	
	//printf(""A:  B:  \n"");
	//printf(""%-3d %-3d\n"", heightsA[0], heightsB[0]);
	// grow each vine individually to a max height
	for (i = 1; i <= days; i++) {
		heightsA[i] = heightsA[i - 1] + SumDigits(heightsA[i - 1]);
		heightsB[i] = heightsB[i - 1] + SumDigits(heightsB[i - 1]);
		//printf(""%-3d %-3d\n"", heightsA[i], heightsB[i]);
	}

	// find if at any point the 2 values are equal
	i = 0;
	while (i <= days && meet) {
		j = 0;
		while (j <= days) {
			if (heightsA[i] == heightsB[j]) {
				meet = 0;

				// set values above meeting to 0			
				for (k = i + 1; k <= days; k++){
					heightsA[k] = 0;
				}
				for (k = j + 1; k <= days; k++) {
					heightsB[k] = 0;
				}

				break;
			}
			j++;
		}
		i++;
	}


	//find max value
	for (i = 0; i <= days; i++) {
		if (heightsA[i] >= maxHeight) {
			maxHeight = heightsA[i];
		}
		if (heightsB[i] >= maxHeight) {
			maxHeight = heightsB[i];
		}
	}

	return maxHeight;
}",0
awri757,1697267036,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumDigits(int number)
{
	int sum = 0;
	int digit;

	while (number != 0) {
		digit = number % 10; // gives LSD
		sum += digit; // adds LSD to sum
		number /= 10; // removes LSD from number by integer division
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int heightsA[10000] = { 0 };
	int heightsB[10000] = { 0 };
	int i, j, k;
	int maxHeight = -1;
	int meet = 1;

	heightsA[0] = seedA;
	heightsB[0] = seedB;
	
	//printf(""A:  B:  \n"");
	//printf(""%-3d %-3d\n"", heightsA[0], heightsB[0]);
	// grow each vine individually to a max height
	for (i = 1; i <= days; i++) {
		heightsA[i] = heightsA[i - 1] + SumDigits(heightsA[i - 1]);
		heightsB[i] = heightsB[i - 1] + SumDigits(heightsB[i - 1]);
		//printf(""%-3d %-3d\n"", heightsA[i], heightsB[i]);
	}

	// find if at any point the 2 values are equal
	i = 0;
	while (i <= days && meet) {
		j = 0;
		while (j <= days) {
			if (heightsA[i] == heightsB[j]) {
				meet = 0;

				// set values above meeting to 0			
				for (k = i + 1; k <= days; k++){
					heightsA[k] = 0;
				}
				for (k = j + 1; k <= days; k++) {
					heightsB[k] = 0;
				}

				break;
			}
			j++;
		}
		i++;
	}


	//find max value
	for (i = 0; i <= days; i++) {
		if (heightsA[i] >= maxHeight) {
			maxHeight = heightsA[i];
		}
		if (heightsB[i] >= maxHeight) {
			maxHeight = heightsB[i];
		}
	}

	return maxHeight;
}",1
ayan607,1697278111,1,"int TallestVine (int seedA, int seedB, int days)
{
    int i = 0;
    int j = 0;
    int k = 0;


    while (j <= days && i <= days && k <= days){

        if (seedA < seedB && i < days){
            int digitThreeA = seedA / 100;
            int digitTwoA = (seedA - digitThreeA * 100) / 10;
            int digitOneA = seedA - digitThreeA * 100 - digitTwoA * 10;

            seedA = seedA + digitThreeA + digitTwoA + digitOneA;
            i++;
        }else if (seedB < seedA && j < days){
            int digitThreeB = seedB / 100;
            int digitTwoB = (seedB - digitThreeB * 100) / 10;
            int digitOneB = seedB - digitThreeB * 100 - digitTwoB * 10;

            seedB = seedB + digitThreeB + digitTwoB + digitOneB;
            j++;
        }else if (j == days || i == days){
            k++;
        }
        
        if (seedA == seedB){
            return seedA;
        }
    }
    
    for (k = 0; k < days - j; k++){
        int digitThreeB = seedB / 100;
        int digitTwoB = (seedB - digitThreeB * 100) / 10;
        int digitOneB = seedB - digitThreeB * 100 - digitTwoB * 10;

        seedB = seedB + digitThreeB + digitTwoB + digitOneB;
    }
    
    for (k = 0; k < days - i; k++){
        int digitThreeA = seedA / 100;
        int digitTwoA = (seedA - digitThreeA * 100) / 10;
        int digitOneA = seedA - digitThreeA * 100 - digitTwoA * 10;

        seedA = seedA + digitThreeA + digitTwoA + digitOneA;
    }

    if (seedA > seedB){
        return seedA;
    }else{
        return seedB;
    }
}",0
ayan607,1697278873,2,"int TallestVine (int seedA, int seedB, int days)
{
    int i = 0;
    int j = 0;
    int k = 0;


    while (j <= days && i <= days && k <= days){

        if (seedA < seedB && i < days){
            int digitFiveA = seedA / 10000;
            int digitFourA = (seedA - digitFiveA * 10000) / 1000;
            int digitThreeA = (seedA - digitFiveA * 10000 - digitFourA * 1000) / 100;
            int digitTwoA = (seedA - digitFiveA * 10000 - digitFourA * 1000 - digitThreeA * 100) / 10;
            int digitOneA = seedA - digitFiveA * 10000 - digitFourA * 1000 - digitThreeA * 100 - digitTwoA * 10;

            seedA = seedA + digitFiveA + digitFourA + digitThreeA + digitTwoA + digitOneA;
            i++;
        }else if (seedB < seedA && j < days){
            int digitFiveB = seedB / 10000;
            int digitFourB = (seedB - digitFiveB * 10000) / 1000;
            int digitThreeB = (seedB - digitFiveB * 10000 - digitFourB * 1000) / 100;
            int digitTwoB = (seedB - - digitFiveB * 10000 - digitFourB * 1000 - digitThreeB * 100) / 10;
            int digitOneB = seedB - digitFiveB * 10000 - digitFourB * 1000 - digitThreeB * 100 - digitTwoB * 10;

            seedB = seedB + digitFiveB + digitFourB + digitThreeB + digitTwoB + digitOneB;
            j++;
        }else if (j == days || i == days){
            k++;
        }
        
        if (seedA == seedB){
            return seedA;
        }
    }
    
    for (k = 0; k < days - j; k++){
        int digitFiveB = seedB / 10000;
        int digitFourB = (seedB - digitFiveB * 10000) / 1000;
        int digitThreeB = (seedB - digitFiveB * 10000 - digitFourB * 1000) / 100;
        int digitTwoB = (seedB - - digitFiveB * 10000 - digitFourB * 1000 - digitThreeB * 100) / 10;
        int digitOneB = seedB - digitFiveB * 10000 - digitFourB * 1000 - digitThreeB * 100 - digitTwoB * 10;

        seedB = seedB + digitFiveB + digitFourB + digitThreeB + digitTwoB + digitOneB;
    }
    
    for (k = 0; k < days - i; k++){
        int digitFiveA = seedA / 10000;
        int digitFourA = (seedA - digitFiveA * 10000) / 1000;
        int digitThreeA = (seedA - digitFiveA * 10000 - digitFourA * 1000) / 100;
        int digitTwoA = (seedA - digitFiveA * 10000 - digitFourA * 1000 - digitThreeA * 100) / 10;
        int digitOneA = seedA - digitFiveA * 10000 - digitFourA * 1000 - digitThreeA * 100 - digitTwoA * 10;

        seedA = seedA + digitFiveA + digitFourA + digitThreeA + digitTwoA + digitOneA;
    }

    if (seedA > seedB){
        return seedA;
    }else{
        return seedB;
    }
}",0
ayan607,1697281453,3,"int TallestVine (int seedA, int seedB, int days)
{
    int i = 0;
    int j = 0;
    int k = 0;
    int n;
    int c;
    int temp;
    int num;

    while (j <= days && i <= days && k <= days){

        if (seedA < seedB && i < days){
            temp = seedA;
            for (n = 10; n >= 0; n--){
                int base = 1;
                for (c = n; c > 0; c--){
                    base = base * 10;
                }
                seedA = seedA + temp / base;
                num = temp / base;
                temp = temp - num * base;
            }
            i++;
        }else if (seedB < seedA && j < days){
            temp = seedB;
            for (n = 10; n >= 0; n--){
                int base = 1;
                for (c = n; c > 0; c--){
                    base = base * 10;
                }
                seedB = seedB + temp / base;
                num = temp / base;
                temp = temp - num * (base);
            }
            j++;
        }else if (j == days || i == days){
            k++;
        }
        
        if (seedA == seedB){
            return seedA;
        }
    }
    
    for (k = 0; k < days - j; k++){
        temp = seedB;
        for (n = 10; n >= 0; n--){
            int base = 1;
            for (c = n; c > 0; c--){
                base = base * 10;
            }
            seedB = seedB + temp / (base);
            temp = temp - (temp / (base)) * (base);
        }
    }
    
    for (k = 0; k < days - i; k++){
        temp = seedA;
        for (n = 10; n >= 0; n--){
            int base = 1;
            for (c = n; c > 0; c--){
                base = base * 10;
            }
            seedA = seedA + temp / (base);
            temp = temp - (temp / (base)) * (base);
        }
    }

    if (seedA > seedB){
        return seedA;
    }else{
        return seedB;
    }
}",1
ayua214,1697248751,1,"int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int tallest = 0;
    
    for (int i = 0; i < days; i++) {
        seedA += SumOfDigits(seedA);
        seedB += SumOfDigits(seedB);
        
        if (seedA == seedB) {
            tallest = seedA;  // The vines join at this value
            break;
        }
        
        if (seedA > seedB && seedA > tallest)
            tallest = seedA;
        else if (seedB > tallest)
            tallest = seedB;
    }
    
    return tallest;
}
",0
ayua214,1697248807,2,"#include <stdio.h>

int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int tallestA = seedA, tallestB = seedB;

    for (int i = 0; i < days; i++) {
        int sumA = tallestA + SumOfDigits(tallestA);
        int sumB = tallestB + SumOfDigits(tallestB);

        if (sumA == sumB) {
            return sumA;  // The vines join at this value
        } else if (sumA > sumB) {
            tallestA = sumA;
        } else {
            tallestB = sumB;
        }
    }

    // If the vines haven't joined, return the tallest of the two
    return (tallestA > tallestB) ? tallestA : tallestB;
}",0
ayua214,1697248898,3,"#include <stdio.h>

int calculateSumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int tallestVine = seedA > seedB ? seedA : seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = calculateSumOfDigits(vineA);
        int sumB = calculateSumOfDigits(vineB);

        if (vineA == vineB) {
            return vineA; // The vines have joined, so the tallest point is the value at which they joined
        }

        if (sumA > sumB) {
            vineA += sumA;
            tallestVine = vineA > tallestVine ? vineA : tallestVine;
        } else if (sumB > sumA) {
            vineB += sumB;
            tallestVine = vineB > tallestVine ? vineB : tallestVine;
        }
    }

    return tallestVine;
}",0
ayua214,1697248943,4,"#include <stdio.h>

int calculateSumOfDigits(int num) {
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int tallestVine = seedA > seedB ? seedA : seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = calculateSumOfDigits(vineA);
        int sumB = calculateSumOfDigits(vineB);

        if (vineA == vineB) {
            return vineA; // The vines have joined, so the tallest point is the value at which they joined
        }

        if (sumA > sumB) {
            vineA += sumA;
            tallestVine = vineA > tallestVine ? vineA : tallestVine;
        } else if (sumB > sumA) {
            vineB += sumB;
            tallestVine = vineB > tallestVine ? vineB : tallestVine;
        }
    }

    return tallestVine;
}",0
ayua214,1697248981,5,"#include <stdio.h>

int calculateSumOfDigits(int num) {
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int tallestVine = seedA > seedB ? seedA : seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = calculateSumOfDigits(vineA);
        int sumB = calculateSumOfDigits(vineB);

        if (sumA > sumB) {
            vineA += sumA;
            if (vineA > tallestVine) {
              tallestVine = vineA;
            }
        } else if (sumB > sumA) {
            vineB += sumB;
            if (vineB > tallestVine) {
              tallestVine = vineB;
            }
        }

        if (vineA == vineB) {
            return vineA; // The vines have joined, so the tallest point is the value at which they joined
        }
    }

    return tallestVine;
}",0
ayua214,1697249013,6,"#include <iostream>

int sumOfDigits(int num) {
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA, vineB = seedB;

    for (int day = 1; day <= days; ++day) {
        vineA += sumOfDigits(vineA);
        vineB += sumOfDigits(vineB);

        if (vineA == vineB) {
            // Vines join at this value, no further growth
            return vineA;
        }
    }

    // Vines didn't join, return the tallest height reached by either vine
    return std::max(vineA, vineB);
}",0
ayua214,1697249024,7,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA, vineB = seedB;

    for (int day = 1; day <= days; ++day) {
        vineA += sumOfDigits(vineA);
        vineB += sumOfDigits(vineB);

        if (vineA == vineB) {
            // Vines join at this value, no further growth
            return vineA;
        }
    }

    // Vines didn't join, return the tallest height reached by either vine
    return (vineA > vineB) ? vineA : vineB;
}",0
ayua214,1697249171,8,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA, vineB = seedB;
    int jointValue = 0;

    for (int day = 1; day <= days; ++day) {
        vineA += sumOfDigits(vineA);
        vineB += sumOfDigits(vineB);

        if (vineA == vineB) {
            // Vines join at this value, no further growth
            jointValue = vineA;
            break;
        }
    }",0
ayua214,1697249183,9,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA, vineB = seedB;
    int jointValue = 0;

    for (int day = 1; day <= days; ++day) {
        vineA += sumOfDigits(vineA);
        vineB += sumOfDigits(vineB);

        if (vineA == vineB) {
            // Vines join at this value, no further growth
            jointValue = vineA;
            break;
        }
    }

    // If vines joined, return the joint value, else return the taller vine
    return (jointValue != 0) ? jointValue : ((vineA > vineB) ? vineA : vineB);
}",0
bcar662,1697432305,1,"int TallestVine(int seedA, int seedB, int days)
{
	int seedAHeight[200] = { 0 };
	int seedBHeight[200] = { 0 };
	int height;
	int growth;

	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedAHeight[i] = seedA;
		}
		growth = seedA % 10;
		growth += (seedA % 100) / 10;
		growth += seedA / 100;
		seedA += growth;
		seedAHeight[i + 1] = seedA;
		
	}
	
	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedBHeight[i] = seedB;
		}
		growth = seedB % 10;
		growth += (seedB % 100) / 10;
		growth += seedB / 100;
		seedB += growth;
		seedBHeight[i + 1] = seedB;
	}
	
	for (int i = 0; i < (days + 1); i++) {
		for (int j = 0; j < (days + 1); j++) {
			if (seedAHeight[i] == seedBHeight[j]) {
				return seedAHeight[i];
			}
		}
	}

	if (seedAHeight[days] > seedBHeight[days]) {
		return seedAHeight[days];
	}
	else {
		return seedBHeight[days];
	}

}
",0
bcar662,1697432324,2,"int TallestVine(int seedA, int seedB, int days)
{
	int seedAHeight[200] = { 0 };
	int seedBHeight[200] = { 0 };
	int growth;

	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedAHeight[i] = seedA;
		}
		growth = seedA % 10;
		growth += (seedA % 100) / 10;
		growth += seedA / 100;
		seedA += growth;
		seedAHeight[i + 1] = seedA;
		
	}
	
	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedBHeight[i] = seedB;
		}
		growth = seedB % 10;
		growth += (seedB % 100) / 10;
		growth += seedB / 100;
		seedB += growth;
		seedBHeight[i + 1] = seedB;
	}
	
	for (int i = 0; i < (days + 1); i++) {
		for (int j = 0; j < (days + 1); j++) {
			if (seedAHeight[i] == seedBHeight[j]) {
				return seedAHeight[i];
			}
		}
	}

	if (seedAHeight[days] > seedBHeight[days]) {
		return seedAHeight[days];
	}
	else {
		return seedBHeight[days];
	}

}
",0
bcar662,1697441452,3,"int SumDigits(int num, int sum) {
	
	if (num / 10 == 0) {
		sum += num % 10;
		return sum;
	}
	else {
		sum += (num % 10);
		SumDigits(num / 10,sum);
	}
}


int TallestVine(int seedA, int seedB, int days)
{
	int seedAHeight[200] = { 0 };
	int seedBHeight[200] = { 0 };
	int growth;

	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedAHeight[i] = seedA;
		}
		seedA += SumDigits(seedA,0);
		seedAHeight[i + 1] = seedA;
		
	}
	
	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedBHeight[i] = seedB;
		}
		seedB += SumDigits(seedB,0);
		seedBHeight[i + 1] = seedB;
	}
	
	for (int i = 0; i < (days + 1); i++) {
		for (int j = 0; j < (days + 1); j++) {
			if (seedAHeight[i] == seedBHeight[j]) {
				return seedAHeight[i];
			}
		}
	}

	if (seedAHeight[days] > seedBHeight[days]) {
		return seedAHeight[days];
	}
	else {
		return seedBHeight[days];
	}

}",0
bcar662,1697441474,4,"int SumDigits(int num, int sum) {
	
	if (num / 10 == 0) {
		sum += num % 10;
		return sum;
	}
	else {
		sum += (num % 10);
		SumDigits(num / 10,sum);
	}
}


int TallestVine(int seedA, int seedB, int days)
{
	int seedAHeight[200] = { 0 };
	int seedBHeight[200] = { 0 };

	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedAHeight[i] = seedA;
		}
		seedA += SumDigits(seedA,0);
		seedAHeight[i + 1] = seedA;
		
	}
	
	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedBHeight[i] = seedB;
		}
		seedB += SumDigits(seedB,0);
		seedBHeight[i + 1] = seedB;
	}
	
	for (int i = 0; i < (days + 1); i++) {
		for (int j = 0; j < (days + 1); j++) {
			if (seedAHeight[i] == seedBHeight[j]) {
				return seedAHeight[i];
			}
		}
	}

	if (seedAHeight[days] > seedBHeight[days]) {
		return seedAHeight[days];
	}
	else {
		return seedBHeight[days];
	}

}",0
bcar662,1697442074,5,"int SumDigits(int num, int sum) {
	
	if (num / 10 == 0) {
		sum += num % 10;
		return sum;
	}
	else {
		sum += (num % 10);
		return SumDigits(num / 10,sum);
	}
}


int TallestVine(int seedA, int seedB, int days)
{
	int seedAHeight[200] = { 0 };
	int seedBHeight[200] = { 0 };

	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedAHeight[i] = seedA;
		}
		seedA += SumDigits(seedA,0);
		seedAHeight[i + 1] = seedA;
		
	}
	
	for (int i = 0; i < days; i++) {
		if (i == 0) {
			seedBHeight[i] = seedB;
		}
		seedB += SumDigits(seedB,0);
		seedBHeight[i + 1] = seedB;
	}
	
	for (int i = 0; i < (days + 1); i++) {
		for (int j = 0; j < (days + 1); j++) {
			if (seedAHeight[i] == seedBHeight[j]) {
				return seedAHeight[i];
			}
		}
	}

	if (seedAHeight[days] > seedBHeight[days]) {
		return seedAHeight[days];
	}
	else {
		return seedBHeight[days];
	}

}",0
bcar662,1697447964,6,"
int SumDigits(int num, int sum) {
	
	if (num / 10 == 0) {
		sum += num % 10;
		return sum;
	}
	else {
		sum += (num % 10);
		return SumDigits(num / 10,sum);
	}
}


int TallestVine(int seedA, int seedB, int days)
{
	int seedARef = seedA;

	for (int i = 0; i < days; i++) {
		seedB += SumDigits(seedB, 0);
		for (int j = 0; j < days; j++) {
			if (j == 0) {
				seedA = seedARef;
			}
			seedA += SumDigits(seedA, 0);
			if (seedA == seedB) {
				return seedA;
			}
		}
	}
	
	

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}

}",1
bcha389,1697251386,1,"int TallestVine(int seedA, int seedB, int days)
{
	int tempB = seedB;

	//If both seed values are equal, return that value.
	if (seedA == seedB) {
		return seedA;
	}

	//Run through all of A's values.
	for (int i = 0; i < days; i++) {
		seedA += (seedA / 100) + (seedA / 10 - seedA / 100 * 10) + (seedA - seedA / 10 * 10);
		//A is now at day i.

		//Check if current A is equal to any of B.
		seedB = tempB;
		for (int j = 0; j < days; j++) {
			seedB += (seedB / 100) + (seedB / 10 - seedB / 100 * 10) + (seedB - seedB / 10 * 10);
			//B is now at day i.

			//Return current A value if equal to any of B's values 
			if (seedA == seedB) {
				return seedA;
			}
		}
	}

	//If there were no equal values, return taller value on last day.
	if (seedA >= seedB) {
		return seedA;
	}
	else {
		return seedB;
	}

}",0
bcha389,1697252314,2,"int TallestVine(int seedA, int seedB, int days)
{
	int origB = seedB;
	int tempA;
	int tempB;

	int sumA, sumB;

	//If both seed values are equal, return that value.
	if (seedA == seedB) {
		return seedA;
	}

	//Run through all of A's values.
	for (int i = 0; i < days; i++) {
		//Find sum of A's digits.
		tempA = seedA;
		sumA = 0;
		while (seedA > 0) {
			sumA += seedA % 10;
			seedA /= 10;
		}
		seedA = tempA;

		seedA += sumA;
		//A is now at day i.

		//printf(""\nA is %d "", seedA);

		//Check if current A is equal to any of B.
		seedB = origB;
		for (int j = 0; j < days; j++) {
			//Find sum of B's digits.
			tempB = seedB;
			sumB = 0;
			while (seedB > 0) {
				sumB += seedB % 10;
				seedB /= 10;
			}
			seedB = tempB;

			seedB += sumB;
			//A is now at day i.

			//Return current A value if equal to any of B's values 
			if (seedA == seedB) {
				return seedA;
			}
			else {
				//printf(""%d "", seedB);
			}
		}
	}

	//If there were no equal values, return taller value on last day.
	if (seedA >= seedB) {
		return seedA;
	}
	else {
		return seedB;
	}

}",1
bcos422,1697189439,1,"int TallestVine(int seedA, int seedB, int days) {
	int a, b, c, d, e, f, i, j, num1, num2;
	a = seedA / 100;
	b = (seedA%100)/10;
	c = seedA % 10;
	for (i = 0; i < days; i++) {
		c = a + b + 2 * c;
		b = b + c / 10;
		c = c % 10;
		a = a + b / 10;
		b = b % 10;

		d = seedB / 100;
		e = (seedB % 100) / 10;
		f = seedB % 10;

		for (j = 0; j <= days; j++) {
			if (d != a || e != b || f != c) {
				f = d + e + 2 * f;
				e = e + f / 10;
				f = f % 10;
				d = d + e / 10;
				e = e % 10;
			}
			else {
				num1 = 100 * a + 10 * b + c;
				num2 = 100 * d + 10 * e + f;
				if (num1 > num2) {
					return num1;
				}
				else {
					return num2;
				}
			}

		}
	}
	num1 = 100 * a + 10 * b + c;
	num2 = 100 * d + 10 * e + f;
	if (num1 > num2) {
		return num1;
	}
	else {
		return num2;
	}
	
}
",0
bcos422,1697194373,2,"int TallestVine(int seedA, int seedB, int days) {
	int x,a, b, c, y,d, e, f, i, j, num1, num2;
	x = seedA / 1000;
	a = (seedA%1000)/100;
	b = (seedA%100)/10;
	c = seedA % 10;
	for (i = 0; i < days; i++) {
		c = x + a + b + 2 * c;
		b = b + c / 10;
		c = c % 10;
		a = a + b / 10;
		b = b % 10;
		x = x + a / 10;
		a = a % 10;

		y = seedB / 1000;
		d = (seedB%1000) / 100;
		e = (seedB % 100) / 10;
		f = seedB % 10;
		y = y + d / 10;
		d = d % 10;

		for (j = 0; j < days+1; j++) {
			num1 = 1000* x + 100 * a + 10 * b + c;
			num2 = 1000* y + 100 * d + 10 * e + f;
			if (num1!=num2){
				f = y + d + e + 2 * f;
				e = e + f / 10;
				f = f % 10;
				d = d + e / 10;
				e = e % 10;
				y = y + d / 10;
				d = d % 10;
			}
			else {

				if (num1 > num2) {
					return num1;
				}
				else {
					return num2;
				}
			}

		}
	}
	if (num1 > num2) {
		return num1;
	}
	else {
		return num2;
	}
	
}
",0
bcos422,1697197070,3,"int TallestVine(int seedA, int seedB, int days) {
	int i, j,k, num1, num2;
	int sum = 0;
	int divisor = 1;
	num1 = seedA;
	for (i = 0; i < days; i++) {

		for (k = 0; k < 10; k++) {
			sum = sum + (num1 % (10*divisor)) / divisor;
			divisor = divisor * 10;

		}
		num1 = num1 + sum;
		sum = 0;
		divisor = 1;

		num2 = seedB;
		for (j = 0; j < days; j++) {
			for (k = 0; k < 10; k++) {
				sum = sum + (num2 % (10 * divisor)) / (divisor);
				divisor = 10 * divisor;

			}
			num2 = num2 + sum;
			sum = 0;
			divisor = 1;
			if (num1==num2){
				return num1;
			}
			
		}
	}
	if (num1 > num2) {
		return num1;
	}
	else {
		return num2;
	}
	
}",1
bcru157,1697442205,1,"Too hard for me, Can the admin marking this please give me pity marks",0
bfis965,1697078726,1,rahh,0
bgib630,1697409094,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    
    
    int remainderA = 0;
    int remainderB = 0;
    
    int seedAArray[days + 1];
    int seedBArray[days + 1];
    
    seedAArray[0] = seedA;
    seedBArray[0] = seedB;
    
    for (int i = 0; i < days; i++)
    {
        int sumA = 0;
        int sumB = 0;
        int tempA = seedAArray[i];
        int tempB = seedBArray[i];
        
        while (tempA != 0)
        {
            remainderA = tempA % 10;
            sumA = sumA + remainderA;
            tempA = tempA / 10;
        }
        while (tempB != 0)
        {
            remainderB = tempB % 10;
            sumB = sumB + remainderB;
            tempB = tempB / 10;
        }
        seedAArray[i + 1] = sumA + seedAArray[i];
        seedBArray[i + 1] = sumB + seedBArray[i];
        printf(""Seed A: %d\nSeed B: %d\n"", seedAArray[i + 1], seedBArray[i + 1]);
    }
    
    for (int i = 0; i < days + 1; i++)
    {
        for (int j = 0; j < days + 1; j++)
        {
            if (seedAArray[i] == seedBArray[j])
            {
                return seedAArray[i];
            }
        }
    }
    
    if (seedAArray[days] > seedBArray[days])
    {
        return seedAArray[days];
    }
    else
    {
        return seedBArray[days];
    }
}",0
bgib630,1697409138,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    
    
    int remainderA = 0;
    int remainderB = 0;
    
    int seedAArray[days + 1];
    int seedBArray[days + 1];
    
    seedAArray[0] = seedA;
    seedBArray[0] = seedB;
    
    for (int i = 0; i < days; i++)
    {
        int sumA = 0;
        int sumB = 0;
        int tempA = seedAArray[i];
        int tempB = seedBArray[i];
        
        while (tempA != 0)
        {
            remainderA = tempA % 10;
            sumA = sumA + remainderA;
            tempA = tempA / 10;
        }
        while (tempB != 0)
        {
            remainderB = tempB % 10;
            sumB = sumB + remainderB;
            tempB = tempB / 10;
        }
        seedAArray[i + 1] = sumA + seedAArray[i];
        seedBArray[i + 1] = sumB + seedBArray[i];
    }
    
    for (int i = 0; i < days + 1; i++)
    {
        for (int j = 0; j < days + 1; j++)
        {
            if (seedAArray[i] == seedBArray[j])
            {
                return seedAArray[i];
            }
        }
    }
    
    if (seedAArray[days] > seedBArray[days])
    {
        return seedAArray[days];
    }
    else
    {
        return seedBArray[days];
    }
}",1
bgru726,1697291467,1,"int TallestVine(int seedA, int seedB, int days)
{
	int treeA[100] = {seedA};
	int treeB[100] = { seedB };
	int digits, sum;


	//This loop builds complete trees for seed A and B, stored inside treeA and treeB respectively.  
	for (int i = 1; i <= days; i++) {
		sum = 0;
		digits = treeA[i - 1];
		while (digits != 0) {
			sum += digits % 10;
			digits /= 10;
		}
		treeA[i] = treeA[i - 1] + sum;

		sum = 0;
		digits = treeB[i - 1];
		while (digits != 0) {
			sum += digits % 10;
			digits /= 10;
		}
		treeB[i] = treeB[i - 1] + sum;
	}
	
	//Check if there are any connection points between the two trees, and if so return that value.
	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (treeA[i] == treeB[j]) {
				return treeA[i];
			}
		}
	}

	//If theres not a connection, return the largest value within the trees (will always be at the max # of days)
	if (treeA[days] > treeB[days]) {
		return treeA[days];
	}
	else {
		return treeB[days];
	}
}",0
bgru726,1697292509,2,"int TallestVine(int seedA, int seedB, int days) {
	int digits, sum, i, j, seedsB;
	for (i = 0; i < days; i++) {
		seedsB = seedB;
		for (j = 0; j < days; j++) {
			if (seedA == seedsB) {
				return seedA;
			}
			sum = 0;
			digits = seedsB;
			while (digits != 0) {
				sum += digits % 10;
				digits /= 10;
			}
			seedsB += sum;
		}
		sum = 0;
		digits = seedA;
		while (digits != 0) {
			sum += digits % 10;
			digits /= 10;
		}
		seedA += sum;
	}
		
	
	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",0
bgru726,1697292631,3,"int TallestVine(int seedA, int seedB, int days) {
	int digits, sum, i, j, seedsB;
	for (i = 0; i < days; i++) {
		seedsB = seedB;
		for (j = 0; j < days; j++) {
			if (seedA == seedsB) {
				return seedA;
			}
			sum = 0;
			digits = seedsB;
			while (digits != 0) {
				sum += digits % 10;
				digits /= 10;
			}
			seedsB += sum;
		}
		sum = 0;
		digits = seedA;
		while (digits != 0) {
			sum += digits % 10;
			digits /= 10;
		}
		seedA += sum;
	}
		
	
	if (seedA > seedsB) {
		return seedA;
	}
	else {
		return seedsB;
	}
}",0
bgru726,1697302008,4,"int sumDigits(int num) {
	int sum = 0;
	while (num != 0) {
		sum += num % 10;
		num /= 10;
	}
	return sum;
}


int TallestVine(int seedA, int seedB, int days) {
	int i, j, seedsB;
	for (i = 1; i <= days; i++) {
		seedsB = seedB;
		for (j = 1; j <= days; j++) {
//			printf(""A:%d B:%d\n"", seedA, seedsB);
			if (seedA == seedsB) {
				return seedA;
			}
			seedsB += sumDigits(seedsB);
		}
		if (seedA == seedsB) {
			return seedA;
		}
		seedA += sumDigits(seedA);
	}
		
	
	if (seedA > seedsB) {
		return seedA;
	}
	else {
		return seedsB;
	}
}",0
bgru726,1697302488,5,"int sumDigits(int num) {
	int sum = 0;
	while (num != 0) {
		sum += num % 10;
		num /= 10;
	}
	return sum;
}


int TallestVine(int seedA, int seedB, int days) {
	int i, j, seedsB;
	for (i = 1; i <= days; i++) {
		seedsB = seedB;
		for (j = 1; j <= days; j++) {
//			printf(""A:%d B:%d\n"", seedA, seedsB);
			if (seedA == seedsB) {
				return seedA;
			}
			seedsB += sumDigits(seedsB);
			if (seedA == seedsB) {
				return seedA;
			}
		}
		if (seedA == seedsB) {
			return seedA;
		}
		seedA += sumDigits(seedA);
		if (seedA == seedsB) {
			return seedA;
		}
	}
		
	
	if (seedA > seedsB) {
		return seedA;
	}
	else {
		return seedsB;
	}
}
",0
bguo360,1696884479,1,"#include <math.h>

int SumDigits(int num) {
	int size = log10(num), sum = 0;
	for (int i = 0; i <= size; i++) {
		sum += (num / (int)(pow(10, i))) % 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) {
	int countA = 0, countB = 0;
	while (countA < days || countB < days) {
		if (seedA == seedB) {
			return seedA;
		}
		if (seedA < seedB || countB == days) {
			seedA += SumDigits(seedA);
			countA++;
			continue;
		}
		seedB += SumDigits(seedB);
		countB++;
	}
	if (seedA > seedB) {
		return seedA;
	}
	return seedB;
}",0
bguo360,1696884842,2,"#include <math.h>

int SumDigits(int num) {
	int size = log10(num), sum = 0;
	for (int i = 0; i <= size; i++) {
		sum += (num / (int)(pow(10, i))) % 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) {
	int countA = 0, countB = 0;
	while (countA < days || countB < days) {
		if (seedA == seedB) {
			return seedA;
		}
		if ((seedA < seedB && countA < days)|| countB == days) {
			seedA += SumDigits(seedA);
			countA++;
			continue;
		}
		seedB += SumDigits(seedB);
		countB++;
	}
	if (seedA > seedB) {
		return seedA;
	}
	return seedB;
}",1
bhua898,1697005674,1,"int TallestVine(int seedA, int seedB, int days) {
    int daysA = 0;
    int daysB = 0;
    int sumDigits = 0;
    
    while (daysA < days || daysB < days) {
        if (seedA == seedB) {
            return seedA;
        } else if (seedA < seedB || (daysB == days && daysA < days)) {
            sumDigits = seedA / 100 + (seedA % 100) / 10 + (seedA % 100) % 10;
            seedA += sumDigits;
            daysA++;
        } else if (seedB < seedA || (daysA == days && daysB < days)) {
            sumDigits = seedB / 100 + (seedB % 100) / 10 + (seedB % 100) % 10;
            seedB += sumDigits;
            daysB++;
        }
    }

    return (seedA > seedB ? seedA : seedB);
}",0
bhua898,1697081529,2,"#include <stdio.h>

int SumOfDigits(int number) {
    int sum = 0;
    int endDigit;
    while (number > 0) {
        endDigit = number % 10;
        sum += endDigit;
        number = number / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int daysA = 0;
    int daysB = 0;
    int sumDigits = 0;
    while (daysA < days || daysB < days) {
        if (seedA == seedB) {
            return seedA;
        } else if ((seedA < seedB && daysA < days) || (daysB == days && daysA < days)) {
            seedA += SumOfDigits(seedA);
            daysA++;
        } else if ((seedB < seedA && daysB < days) || (daysA == days && daysB < days)) {
            seedB += SumOfDigits(seedB);
            daysB++;
        }
    }
    
    return (seedA > seedB ? seedA : seedB);
}",0
bhua898,1697081549,3,"#include <stdio.h>

int SumOfDigits(int number) {
    int sum = 0;
    int endDigit;
    while (number > 0) {
        endDigit = number % 10;
        sum += endDigit;
        number = number / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int daysA = 0;
    int daysB = 0;
    while (daysA < days || daysB < days) {
        if (seedA == seedB) {
            return seedA;
        } else if ((seedA < seedB && daysA < days) || (daysB == days && daysA < days)) {
            seedA += SumOfDigits(seedA);
            daysA++;
        } else if ((seedB < seedA && daysB < days) || (daysA == days && daysB < days)) {
            seedB += SumOfDigits(seedB);
            daysB++;
        }
    }
    
    return (seedA > seedB ? seedA : seedB);
}",1
bjon836,1697020099,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int i = 0; i < days; i++) {
        int sumA = 0;
        int tempA = vineA;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        vineA += sumA;
        vineB = seedB;

        for (int j = 0; j < days; j++) {
            int sumB = 0;
            int tempB = vineB;

            while (tempB > 0) {
                sumB += tempB % 10;
                tempB /= 10;
            }

            vineB += sumB;
            if (vineA == vineB) {
            return vineB;
        }
        
        }
    }
    if (vineA > vineB) {
        return vineA;
    } else {
        return vineB;
    }
}",1
bkho028,1697015212,1,"int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++)
    {
        int nextGrowthA = 0;
        int nextGrowthB = 0;

        int tempA = vineA;
        while (tempA > 0)
        {
            nextGrowthA += tempA % 10;
            tempA /= 10;
        }

        int tempB = vineB;
        while (tempB > 0)
        {
            nextGrowthB += tempB % 10;
            tempB /= 10;
        }

        vineA += nextGrowthA;
        vineB += nextGrowthB;
    }

    if (vineA == vineB)
    {
        return vineA;
    }

    return (vineA > vineB) ? vineA : vineB;
}",0
bli482,1697245118,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {

	int hundred_digit_1, hundred_digit_2, ten_digit_1, ten_digit_2, one_digit_1, one_digit_2;
	int N1 = seedA;
	int	N2 = seedB;
	int Add_1, Add_2;
	int Record_1[200];
	int Record_2[200];
	Record_1[0] = seedA;
	Record_2[0] = seedB;
	int k = 0;

	while (k != days) {
		hundred_digit_1 = N1 / 100;
		ten_digit_1 = (N1 - hundred_digit_1 * 100) / 10;
		one_digit_1 = (N1 - hundred_digit_1 * 100 - ten_digit_1 * 10) / 1;
		hundred_digit_2 = N2 / 100;
		ten_digit_2 = (N2 - hundred_digit_2 * 100) / 10;
		one_digit_2 = (N2 - hundred_digit_2 * 100 - ten_digit_2 * 10) / 1;

		Add_1 = hundred_digit_1 + ten_digit_1 + one_digit_1;
		Add_2 = hundred_digit_2 + ten_digit_2 + one_digit_2;

		Record_1[k + 1] = N1 + Add_1;
		Record_2[k + 1] = N2 + Add_2;

		N1 = Record_1[k + 1];
		N2 = Record_2[k + 1];

		k++;
	}

	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (Record_1[i] == Record_2[j]) {
				return Record_1[i];
			}
		}
	}

	if (Record_1[days] > Record_2[days]) {
		return Record_1[days];
	}
	else {
		return Record_2[days];
	}


}

",0
bli482,1697245581,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {

	int hundred_digit_1, hundred_digit_2, ten_digit_1, ten_digit_2, one_digit_1, one_digit_2;
	int thousand_digit_1, thousand_digit_2;
	int N1 = seedA;
	int	N2 = seedB;
	int Add_1, Add_2;
	int Record_1[200];
	int Record_2[200];
	Record_1[0] = seedA;
	Record_2[0] = seedB;
	int k = 0;

	while (k != days) {
		thousand_digit_1 = N1 / 1000;
		hundred_digit_1 = (N1 - thousand_digit_1 * 1000) / 100;
		ten_digit_1 = (N1 - thousand_digit_1 * 1000 - hundred_digit_1 * 100) / 10;
		one_digit_1 = (N1 - thousand_digit_1 * 1000 - hundred_digit_1 * 100 - ten_digit_1 * 10) / 1;
		
		thousand_digit_2 = N2 / 1000;
		hundred_digit_2 = (N2 - thousand_digit_2 * 1000) / 100;
		ten_digit_2 = (N2 - thousand_digit_2 * 1000 - hundred_digit_2 * 100) / 10;
		one_digit_2 = (N2 - thousand_digit_2 * 1000 - hundred_digit_2 * 100 - ten_digit_2 * 10) / 1;

		Add_1 = thousand_digit_1 + hundred_digit_1 + ten_digit_1 + one_digit_1;
		Add_2 = thousand_digit_2 + hundred_digit_2 + ten_digit_2 + one_digit_2;

		Record_1[k + 1] = N1 + Add_1;
		Record_2[k + 1] = N2 + Add_2;

		N1 = Record_1[k + 1];
		N2 = Record_2[k + 1];

		k++;
	}

	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (Record_1[i] == Record_2[j]) {
				return Record_1[i];
			}
		}
	}

	if (Record_1[days] > Record_2[days]) {
		return Record_1[days];
	}
	else {
		return Record_2[days];
	}


}



",0
bli482,1697285802,3,"#include <stdio.h>

int digitsum(int number){
    int sum;
    int n;
    
    sum = 0;
    
    while (number>0){
        n = number % 10;
        sum += n;
        number = number / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

	
	int N1 = seedA;
	int	N2;
	int Add_1 = 0; 
	int Add_2 = 0;
	int k = 0;
	
	while (k < days) {

		Add_1 = digitsum(N1);
		
    	N2 = seedB;		
        
		if (N1 == N2) {
			return N2;
		}
		
		if (k == days - 1){
		    N1 = N1 + Add_1;
		}
		

		for (int i = 0; i < days; i++) {

			Add_2 = digitsum(N2);

            N2 = N2 + Add_2;
            
			if (N1 == N2) {
				return N2;
			}
		}
		
		if (k != days - 1){
		    N1 = N1 + Add_1;
		}
		
		k++;
	}


	if (N1 > N2) {
		return N1;
	}
	else {
		return N2;
	}

}",0
bli482,1697286763,4,"#include <stdio.h>

// Function to calculate the sum of the digits of a number
int digitsum(int number) {
    int sum;
    int n;
    
    sum = 0;
    
    while (number > 0) {
        n = number % 10;  // Extract the last digit
        sum += n;         // Add the digit to the sum
        number = number / 10;  // Remove the last digit
    }
    return sum;
}

// Function to find the tallest vine after a certain number of days
int TallestVine(int seedA, int seedB, int days) {
    int N1 = seedA;       // Initialize vine 1 with seedA
    int N2;               // Initialize vine 2
    int Add_1 = 0;        // Initialize the sum of digits of vine 1
    int Add_2 = 0;        // Initialize the sum of digits of vine 2
    int k = 0;            // Initialize a loop counter

    while (k < days) {
        Add_1 = digitsum(N1);  // Calculate the sum of digits for vine 1
        
        N2 = seedB;  // Initialize vine 2 with seedB
        
        if (k == days - 1) {
            N1 = N1 + Add_1;  // Update vine 1 on the last day
        }

        for (int i = 0; i < days; i++) {
            Add_2 = digitsum(N2);  // Calculate the sum of digits for vine 2

            N2 = N2 + Add_2;  // Update vine 2

            if (N1 == N2) {
                return N2;  // If both vines are equal, return the result
            }
        }
        
        if (k != days - 1) {
            N1 = N1 + Add_1;  // Update vine 1 on all days except the last day
        }
        
        k++;  // Increment the day counter
    }

    if (N1 > N2) {
        return N1;  // Return the taller vine if N1 is taller
    } else {
        return N2;  // Return the taller vine if N2 is taller
    }
}",0
bli482,1697322966,5,"#include <stdio.h>

// Function to find the tallest vine after a certain number of days
int TallestVine(int seedA, int seedB, int days) {
    
    // Function to calculate the sum of the digits of a number
    int digitsum(int number) {
        int sum;
        int n;
        
        sum = 0;
        
        while (number > 0) {
            n = number % 10;  // Extract the last digit
            sum += n;         // Add the digit to the sum
            number = number / 10;  // Remove the last digit
        }
        return sum;
    }
    
    int N1 = seedA;       // Initialize vine 1 with seedA
    int N2;               // Initialize vine 2
    int Add_1 = 0;        // Initialize the sum of digits of vine 1
    int Add_2 = 0;        // Initialize the sum of digits of vine 2
    int k = 0;            // Initialize a loop counter

    while (k < days) {
        Add_1 = digitsum(N1);  // Calculate the sum of digits for vine 1
        
        N2 = seedB;  // Initialize vine 2 with seedB
        
        if (k == days - 1) {
            N1 = N1 + Add_1;  // Update vine 1 on the last day
        }

        for (int i = 0; i < days; i++) {
            Add_2 = digitsum(N2);  // Calculate the sum of digits for vine 2

            N2 = N2 + Add_2;  // Update vine 2

            if (N1 == N2) {
                return N2;  // If both vines are equal, return the result
            }
        }
        
        if (k != days - 1) {
            N1 = N1 + Add_1;  // Update vine 1 on all days except the last day
        }
        
        k++;  // Increment the day counter
    }

    if (N1 > N2) {
        return N1;  // Return the taller vine if N1 is taller
    } else {
        return N2;  // Return the taller vine if N2 is taller
    }
}",0
bli482,1697328443,6,"// Function to find the tallest vine after a certain number of days
int TallestVine(int seedA, int seedB, int days) {
    
    // Function to calculate the sum of the digits of a number
    int digitsum(int number) {
        int sum = 0;
        int n;
        while (number > 0) {
            n = number % 10;  // Extract the last digit
            sum += n;         // Add the digit to the sum
            number = number / 10;  // Remove the last digit
        }
        return sum;
    }

    int N1 = seedA;  // Initialize vine 1 with seedA
    int N2;
    for (int k = 0; k < days; k++) {
        N2 = seedB;  // Initialize vine 2 with seedB
        N1 += digitsum(N1);  // Update vine 1
        for (int i =0; i<days;i++){
            N2 += digitsum(N2);  // Update vine 2
            if (N1==N2){
                return N1;
            }
        }
    }

    if (N1 > N2) {
        return N1;
    } 
    else {
        return N2;
    }
}",1
bli482,1697328526,7,"// Function to find the tallest vine after a certain number of days
int TallestVine(int seedA, int seedB, int days) {
    
    // Function to calculate the sum of the digits of a number
    int digitsum(int number) {
        int sum;
        int n;
        
        sum = 0;
        
        while (number > 0) {
            n = number % 10;  // Extract the last digit
            sum += n;         // Add the digit to the sum
            number = number / 10;  // Remove the last digit
        }
        return sum;
    }
    
    int N1 = seedA;       // Initialize vine 1 with seedA
    int N2;               // Initialize vine 2
    int Add_1 = 0;        // Initialize the sum of digits of vine 1
    int Add_2 = 0;        // Initialize the sum of digits of vine 2
    int k = 0;            // Initialize a loop counter

    while (k < days) {
        Add_1 = digitsum(N1);  // Calculate the sum of digits for vine 1
        
        N2 = seedB;  // Initialize vine 2 with seedB
        
        if (k == days - 1) {
            N1 = N1 + Add_1;  // Update vine 1 on the last day
        }

        for (int i = 0; i < days; i++) {
            Add_2 = digitsum(N2);  // Calculate the sum of digits for vine 2

            N2 = N2 + Add_2;  // Update vine 2

            if (N1 == N2) {
                return N2;  // If both vines are equal, return the result
            }
        }
        
        if (k != days - 1) {
            N1 = N1 + Add_1;  // Update vine 1 on all days except the last day
        }
        
        k++;  // Increment the day counter
    }

    if (N1 > N2) {
        return N1;  // Return the taller vine if N1 is taller
    } else {
        return N2;  // Return the taller vine if N2 is taller
    }
}",0
bli482,1697328612,8,"// Function to find the tallest vine after a certain number of days
int TallestVine(int seedA, int seedB, int days) {
    
    // Function to calculate the sum of the digits of a number
    int digitsum(int number) {
        int sum = 0;
        int n;
        while (number > 0) {
            n = number % 10;  // Extract the last digit
            sum += n;         // Add the digit to the sum
            number = number / 10;  // Remove the last digit
        }
        return sum;
    }

    int N1 = seedA;  // Initialize vine 1 with seedA
    int N2;
    for (int k = 0; k < days; k++) {
        N2 = seedB;  // Initialize vine 2 with seedB
        N1 += digitsum(N1);  // Update vine 1
        for (int i =0; i<days;i++){
            N2 += digitsum(N2);  // Update vine 2
            if (N1==N2){
                return N1;
            }
        }
    }

    if (N1 > N2) {
        return N1;
    } 
    else {
        return N2;
    }
}",1
bli775,1697189196,1,"#include <stdio.h>

int SumOfDigits(int value) {
    int sum = 0;
    while (value > 0) {
        sum += value % 10;
        value /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int maxA = seedA;
    int maxB = seedB;

    for (int day = 1; day <= days; day++) {
        vineA += SumOfDigits(vineA);
        vineB += SumOfDigits(vineB);

        if (vineA == vineB) {
            // The vines join at this value, and growth stops
            return vineA;
        }

        if (vineA > maxA) {
            maxA = vineA;
        }

        if (vineB > maxB) {
            maxB = vineB;
        }

        if (day == days) {
            // If this is the last day, return the maximum height reached
            if (maxA > maxB) {
                return maxA;
            } else {
                return maxB;
            }
        }
    }

    // If the loop completes without joining, return the maximum height reached
    if (maxA > maxB) {
        return maxA;
    } else {
        return maxB;
    }
}",0
bwoo348,1697437478,1,"int TallestVine(int seedA, int seedB, int days){
    int next, a, hundreds, tens, ones;
    int arrayA[200], arrayB[200];
    // if not equal to other string
    arrayA[0] = seedA;
    arrayB[0] = seedB;
    for (int k=1;k<days+1;k++){
        hundreds = seedA / 100;
        tens = (seedA - (hundreds*100))/10;
        ones = (seedA - (hundreds*100) - (tens*10));
        seedA = seedA+hundreds+tens+ones;
        arrayA[k] = seedA;
        
        if (seedB == seedA){
            return seedB;
        }
    }
    for (int i=1;i<days+1;i++){
        seedA = arrayA[0];
        if (seedB == seedA){
            return seedB;
        }
        
        hundreds = seedB / 100;
        tens = (seedB - (hundreds*100))/10;
        ones = (seedB - (hundreds*100) - (tens*10));
        seedB = seedB+hundreds+tens+ones;
        arrayB[i] = seedB;
        
        for (int k=1;k<days+1;k++){
            hundreds = seedA / 100;
            tens = (seedA - (hundreds*100))/10;
            ones = (seedA - (hundreds*100) - (tens*10));
            seedA = seedA+hundreds+tens+ones;
            arrayA[k] = seedA;
            
            if (seedB == seedA){
                return seedB;
            }
        }
    }
    
    if (seedA > seedB){
        return seedA;
    } else {
        return seedB;
    }
    return -1;
}",0
bwoo348,1697437574,2,"/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int TallestVine(int seedA, int seedB, int days){
    int hundreds, tens, ones;
    int arrayA[100];
    // if not equal to other string
    arrayA[0] = seedA;
    for (int k=1;k<days+1;k++){
        hundreds = seedA / 100;
        tens = (seedA - (hundreds*100))/10;
        ones = (seedA - (hundreds*100) - (tens*10));
        seedA = seedA+hundreds+tens+ones;
        
        if (seedB == seedA){
            return seedB;
        }
    }
    for (int i=1;i<days+1;i++){
        seedA = arrayA[0];
        if (seedB == seedA){
            return seedB;
        }
        
        hundreds = seedB / 100;
        tens = (seedB - (hundreds*100))/10;
        ones = (seedB - (hundreds*100) - (tens*10));
        seedB = seedB+hundreds+tens+ones;
        
        for (int k=1;k<days+1;k++){
            hundreds = seedA / 100;
            tens = (seedA - (hundreds*100))/10;
            ones = (seedA - (hundreds*100) - (tens*10));
            seedA = seedA+hundreds+tens+ones;
            
            if (seedB == seedA){
                return seedB;
            }
        }
    }
    
    if (seedA > seedB){
        return seedA;
    } else {
        return seedB;
    }
    return -1;
}

int main()
{
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

    return 0;
}
",0
bwoo348,1697437594,3,"int TallestVine(int seedA, int seedB, int days){
    int hundreds, tens, ones;
    int arrayA[100];
    // if not equal to other string
    arrayA[0] = seedA;
    for (int k=1;k<days+1;k++){
        hundreds = seedA / 100;
        tens = (seedA - (hundreds*100))/10;
        ones = (seedA - (hundreds*100) - (tens*10));
        seedA = seedA+hundreds+tens+ones;
        
        if (seedB == seedA){
            return seedB;
        }
    }
    for (int i=1;i<days+1;i++){
        seedA = arrayA[0];
        if (seedB == seedA){
            return seedB;
        }
        
        hundreds = seedB / 100;
        tens = (seedB - (hundreds*100))/10;
        ones = (seedB - (hundreds*100) - (tens*10));
        seedB = seedB+hundreds+tens+ones;
        
        for (int k=1;k<days+1;k++){
            hundreds = seedA / 100;
            tens = (seedA - (hundreds*100))/10;
            ones = (seedA - (hundreds*100) - (tens*10));
            seedA = seedA+hundreds+tens+ones;
            
            if (seedB == seedA){
                return seedB;
            }
        }
    }
    
    if (seedA > seedB){
        return seedA;
    } else {
        return seedB;
    }
    return -1;
}",0
bwoo348,1697437985,4,"int TallestVine(int seedA, int seedB, int days){
    int tents, thousands, hundreds, tens, ones;
    int arrayA[100];
    // if not equal to other string
    arrayA[0] = seedA;
    for (int k=1;k<days+1;k++){
        tents = seedA / 10000;
        thousands = (seedA - (tents*10000)) / 1000;
        hundreds = (seedA - (thousands*1000) - (tents*10000)) / 100;
        tens = (seedA - (hundreds*100) - (thousands*1000) - (tents*10000))/10;
        ones = (seedA - (hundreds*100) - (tens*10) - (thousands*1000) - (tents*10000));
        seedA = seedA+tents+thousands+hundreds+tens+ones;
        
        if (seedB == seedA){
            return seedB;
        }
    }
    for (int i=1;i<days+1;i++){
        seedA = arrayA[0];
        if (seedB == seedA){
            return seedB;
        }
        
        tents = seedB / 10000;
        thousands = (seedB - (tents*10000)) / 1000;
        hundreds = (seedB - (thousands*1000) - (tents*10000)) / 100;
        tens = (seedB - (hundreds*100) - (thousands*1000) - (tents*10000))/10;
        ones = (seedB - (hundreds*100) - (tens*10) - (thousands*1000) - (tents*10000));
        seedB = seedB+tents+thousands+hundreds+tens+ones;
        
        for (int k=1;k<days+1;k++){
            tents = seedA / 10000;
            thousands = (seedA - (tents*10000)) / 1000;
            hundreds = (seedA - (thousands*1000) - (tents*10000)) / 100;
            tens = (seedA - (hundreds*100) - (thousands*1000) - (tents*10000))/10;
            ones = (seedA - (hundreds*100) - (tens*10) - (thousands*1000) - (tents*10000));
            seedA = seedA+tents+thousands+hundreds+tens+ones;
            
            if (seedB == seedA){
                return seedB;
            }
        }
    }
    
    if (seedA > seedB){
        return seedA;
    } else {
        return seedB;
    }
    return -1;
}",0
bwoo348,1697438395,5,"int TallestVine(int seedA, int seedB, int days){
    int tb,b,hm,tm,m,ht,tents, thousands, hundreds, tens, ones;
    int arrayA[100];
    // if not equal to other string
    arrayA[0] = seedA;
    for (int k=1;k<days+1;k++){
        tb = (seedA) / 10000000000;
        b = (seedA - (tb*10000000000)) / 1000000000;
        hm = (seedA - (b*1000000000) - (tb*10000000000)) / 100000000;
        tm = (seedA - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 10000000;
        m = (seedA - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 1000000;
        ht = (seedA - (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 100000;
        tents = (seedA - (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000) ) / 10000;
        thousands = (seedA - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 1000;
        hundreds = (seedA - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 100;
        tens = (seedA - (hundreds*100) - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000))/10;
        ones = (seedA - (hundreds*100) - (tens*10) - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000));
        seedA = seedA+tb+b+hm+tm+m+ht+tents+thousands+hundreds+tens+ones;
        
        if (seedB == seedA){
            return seedB;
        }
    }
    for (int i=1;i<days+1;i++){
        seedA = arrayA[0];
        if (seedB == seedA){
            return seedB;
        }
        
        tb = (seedB) / 10000000000;
        b = (seedB - (tb*10000000000)) / 1000000000;
        hm = (seedB - (b*1000000000) - (tb*10000000000)) / 100000000;
        tm = (seedB - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 10000000;
        m = (seedB - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 1000000;
        ht = (seedB - (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 100000;
        tents = (seedB - (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000) ) / 10000;
        thousands = (seedB - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 1000;
        hundreds = (seedB - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 100;
        tens = (seedB - (hundreds*100) - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000))/10;
        ones = (seedB - (hundreds*100) - (tens*10) - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000));
        seedB = seedB+tb+b+hm+tm+m+ht+tents+thousands+hundreds+tens+ones;
        
        for (int k=1;k<days+1;k++){
            tb = (seedA) / 10000000000;
        b = (seedA - (tb*10000000000)) / 1000000000;
        hm = (seedA - (b*1000000000) - (tb*10000000000)) / 100000000;
        tm = (seedA - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 10000000;
        m = (seedA - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 1000000;
        ht = (seedA - (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 100000;
        tents = (seedA - (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000) ) / 10000;
        thousands = (seedA - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 1000;
        hundreds = (seedA - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000)) / 100;
        tens = (seedA - (hundreds*100) - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000))/10;
        ones = (seedA - (hundreds*100) - (tens*10) - (thousands*1000) - (tents*10000)- (ht*100000)- (m*1000000) - (tm*10000000) - (hm*100000000) - (b*1000000000) - (tb*10000000000));
        seedA = seedA+tb+b+hm+tm+m+ht+tents+thousands+hundreds+tens+ones;
            
            if (seedB == seedA){
                return seedB;
            }
        }
    }
    
    if (seedA > seedB){
        return seedA;
    } else {
        return seedB;
    }
    return -1;
}",1
byiu331,1697178695,1,"#include <stdio.h>

int SumDigits(int num) {
	
	int numHundreds, numTens, numOnes, sum;

	numHundreds = (num % 1000) / 100;
	numTens = (num % 100) / 10;
	numOnes = (num % 10);
	sum = numHundreds + numTens + numOnes;
	return sum;

}


int TallestVine(int seedA, int seedB, int days) {
	
	int i, j;
	int vineA, vineB, tallestVine;

	vineA = seedA;
	vineB = seedB;

	for (i = 0; i < days; i++) {
		
		vineA += SumDigits(vineA);
		
		vineB = seedB;
		for (j = 0; j < days; j++) {
			
			vineB += SumDigits(vineB);
			
			if (vineA == vineB) {
				tallestVine = vineA;
				return tallestVine;
			}

		}
		
	}

	if (vineA > vineB) {
		tallestVine = vineA;
	}
	else {
		tallestVine = vineB;
	}

	return tallestVine;
}
",0
byiu331,1697330797,2,"
#include <stdio.h>

int SumDigits(int num) {
	
	int numTenThousands, numThousands,numHundreds, numTens, numOnes, sum;

	numTenThousands = (num % 100000) / 10000;
	numThousands = (num % 10000) / 1000;
	numHundreds = (num % 1000) / 100;
	numTens = (num % 100) / 10;
	numOnes = (num % 10);
	sum = numTenThousands + numThousands + numHundreds + numTens + numOnes;
	return sum;

}


int TallestVine(int seedA, int seedB, int days) {
	
	int i, j;
	int vineA, vineB, tallestVine;

	vineA = seedA;
	vineB = seedB;
	//Loop for seed A
	for (i = 0; i < days; i++) {
		
		vineA += SumDigits(vineA);
		//printf(""VineA: %d\n"", vineA);


		vineB = seedB;
		//Loop for seedB
		for (j = 0; j < days; j++) {
			
			vineB += SumDigits(vineB);

			//printf(""VineB: %d\n"", vineB);
			
			if (vineA == vineB) {
				tallestVine = vineA;
				return tallestVine;
			}

		}
		
	}

	if (vineA > vineB) {
		tallestVine = vineA;
	}
	else { 
		tallestVine = vineB;
	}

	return tallestVine;
}",0
byiu331,1697337572,3,"
#include <stdio.h>

int SumDigits(int num) {
	
	int lowerPlace,sum=0;

	while (num != 0) {
		//printf(""This is the value of num: %d \n"", num);
		lowerPlace = num % 10;
		sum = sum + lowerPlace;
		num = num / 10;
		//printf(""This is the value of sum: %d \n"", sum);

	}
	return sum;
}


int TallestVine(int seedA, int seedB, int days) {
	
	int i, j;
	int vineA, vineB, tallestVine;

	vineA = seedA;
	vineB = seedB;
	//Loop for seed A
	for (i = 0; i < days; i++) {
		
		vineA += SumDigits(vineA);
		//printf(""VineA: %d\n"", vineA);


		vineB = seedB;
		//Loop for seedB
		for (j = 0; j < days; j++) {
			
			vineB += SumDigits(vineB);

			//printf(""VineB: %d\n"", vineB);
			
			if (vineA == vineB) {
				tallestVine = vineA;
				return tallestVine;
			}

		}
		
	}

	if (vineA > vineB) {
		tallestVine = vineA;
	}
	else { 
		tallestVine = vineB;
	}

	return tallestVine;
}",1
byul423,1697174010,1,"int SumDigits(int x) {
	int sum = 0, rem;
	while (x > 0) {
		rem = x % 10;
		sum += rem;
		x = x / 10;
	}
	return sum;
}

int CheckMax(int arr[], int size) {
	int i, j, max;
	max = arr[0];

	for (i = 1; i < size; i++) {
		if (arr[i] > max) {
			max = arr[i];
		}
	}
	return max;

}


int TallestVine(int seedA, int seedB, int days) {
	int i = 0, j = 0, x, y, maxA, maxB;
	int arrA[200] = { 0 };
	int arrB[200] = { 0 };
	arrA[0] = seedA;
	arrB[0] = seedB;

	for (i = 1; i <= days; i++) {
		arrA[i] = arrA[i - 1] + SumDigits(arrA[i - 1]);
		arrB[i] = arrB[i - 1] + SumDigits(arrB[i - 1]);

		for (j = 0; j <= i; j++) {
			for (x = 0; x <= i; x++) {
				if (arrA[j] == arrB[x]) {
					return arrA[j];
				}
			}
		}
	}

	maxA = CheckMax(arrA, i);
	maxB = CheckMax(arrB, i);

	if (maxA == maxB) {
		return maxA;
	} else if (maxA > maxB) {
		return maxA;
	}
	else {
		return maxB;
	}

}",0
byul423,1697174036,2,"int SumDigits(int x) {
	int sum = 0, rem;
	while (x > 0) {
		rem = x % 10;
		sum += rem;
		x = x / 10;
	}
	return sum;
}

int CheckMax(int arr[], int size) {
	int i, max;
	max = arr[0];

	for (i = 1; i < size; i++) {
		if (arr[i] > max) {
			max = arr[i];
		}
	}
	return max;

}


int TallestVine(int seedA, int seedB, int days) {
	int i = 0, j = 0, x, maxA, maxB;
	int arrA[200] = { 0 };
	int arrB[200] = { 0 };
	arrA[0] = seedA;
	arrB[0] = seedB;

	for (i = 1; i <= days; i++) {
		arrA[i] = arrA[i - 1] + SumDigits(arrA[i - 1]);
		arrB[i] = arrB[i - 1] + SumDigits(arrB[i - 1]);

		for (j = 0; j <= i; j++) {
			for (x = 0; x <= i; x++) {
				if (arrA[j] == arrB[x]) {
					return arrA[j];
				}
			}
		}
	}

	maxA = CheckMax(arrA, i);
	maxB = CheckMax(arrB, i);

	if (maxA == maxB) {
		return maxA;
	} else if (maxA > maxB) {
		return maxA;
	}
	else {
		return maxB;
	}

}",0
byul423,1697180697,3,"int SumDigits(int x) {
	int sum = 0, rem;
	while (x > 0) {
		rem = x % 10;
		sum += rem;
		x = x / 10;
	}
	return sum;
}

int CheckMax(int arr[], int size) {
	int i, max;
	max = arr[0];

	for (i = 1; i < size; i++) {
		if (arr[i] > max) {
			max = arr[i];
		}
	}
	return max;

}


int TallestVine(int seedA, int seedB, int days) {
	if (days >= 199) {
		int i = 0, j = 0, x;
		int arrA[200] = { 0 };
		int arrB[200] = { 0 };

		arrA[0] = seedA;
		arrB[0] = seedB;

		for (i = 1; i <= 199; i++) {
			arrA[i] = arrA[i - 1] + SumDigits(arrA[i - 1]);
			arrB[i] = arrB[i - 1] + SumDigits(arrB[i - 1]);

			for (j = 0; j <= i; j++) {
				for (x = 0; x <= i; x++) {
					if (arrA[j] == arrB[x]) {
						return arrA[j];
					}
				}
			}
		}

		seedA = arrA[199];
		seedB = arrB[199];
		return TallestVine(seedA, seedB, (days - 199));
	}

	int i = 0, j = 0, x, maxA, maxB;
	int arrA[200] = { 0 };
	int arrB[200] = { 0 };
	arrA[0] = seedA;
	arrB[0] = seedB;

	for (i = 1; i <= days; i++) {
		arrA[i] = arrA[i - 1] + SumDigits(arrA[i - 1]);
		arrB[i] = arrB[i - 1] + SumDigits(arrB[i - 1]);

		for (j = 0; j <= i; j++) {
			for (x = 0; x <= i; x++) {
				if (arrA[j] == arrB[x]) {
					return arrA[j];
				}
			}
		}
	}

	maxA = CheckMax(arrA, i);
	maxB = CheckMax(arrB, i);


	if (maxA == maxB) {
		return maxA;
	}
	else if (maxA > maxB) {
		return maxA;
	}
	else {
		return maxB;
	}

}",1
cang688,1697391962,1,"#include <stdio.h>

int SumOfDigits(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int tallestPoint = 0;
    int vineA = seedA;
    int vineB = seedB;

    for (int dayA = 1; dayA <= days; dayA++) {
            int growthA = SumOfDigits(vineA);
            vineA += growthA;
            
        for (int dayB = 1; dayB <= days; dayB++) {
            int growthB = SumOfDigits(vineB);
            vineB += growthB;
            
            if (vineA == vineB) {
                tallestPoint = vineA;
                return tallestPoint;
             }
        
            if (vineA > vineB) {
                tallestPoint = vineA;
            } else {
                tallestPoint = vineB;
            }
        }
        vineB = seedB;
    }

    return tallestPoint;
}
",1
cbro223,1696821924,1,"int TallestVine(int seedA, int seedB, int days)
{
    int vineB = seedB;
    int vineA = seedA;
    for (int i = 0; i < days; i++)
    {
        // Compute the sum of digits
        int tmpSeedA = vineA;
        while (tmpSeedA != 0)
        {
            vineA += tmpSeedA % 10;
            tmpSeedA /= 10;
        }
        vineB = seedB;
        for (int j = 0; j < days; j++)
        {
            // Compute the sum of digits
            int tmpSeedB = vineB;
            while (tmpSeedB != 0)
            {
                vineB += tmpSeedB % 10;
                tmpSeedB /= 10;
            }
            // If the branches collide at any point, this is the max value
            if (vineB == vineA)
            {
                return vineB;
            }
        }
    }
    // If the branches never collide, find the largest growing branch
    if (vineA > vineB)
    {
        return vineA;
    }
    else
    {
        return vineB;
    }
}",1
cche873,1697331179,1,"#include <stdio.h>

int sum_of_digits(int num) {
    int sum = 0;
    while (num > 0) {
        int digit = num % 10;
        sum += digit;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seed1, int seed2, int days) {
    int days1 = 0;
    int days2 = 0;
    while (days1<days || days2<days){
        if (seed1 == seed2){
            return seed1;
        }
        if (seed1 < seed2){
            if (days1 < days){
                seed1 += sum_of_digits(seed1);
                days1++;
            } else {
                seed2 += sum_of_digits(seed2);
                days2++;
            }
        } else {
            if (days2 < days){
                seed2 += sum_of_digits(seed2);
                days2++;
            } else {
                seed1 += sum_of_digits(seed1);
                days1++;
            }
        }
    }
    if (seed1>seed2){
        return seed1;
        } else {
            return seed2;
        } 
    }
",1
cdel568,1697229810,1,"int TallestVine(int seedA, int seedB, int days)
{
    int finalVine;
    int tempA = 0;
    int tempB = 0;
    int sum = 0;
    int currentDayA = 0;
    int currentDayB = 0;
    int overA = 0;
    int overB = 0;

    while (currentDayA != days || currentDayB != days) {
        tempA = seedA;
        tempB = seedB;

        while ((seedA < seedB || overB) && currentDayA != days) {
            while (tempA != 0) {
                sum += tempA % 10;
                tempA = tempA / 10;
            }

            seedA += sum;
            sum = 0;
            currentDayA++;
            tempA = seedA;

            if (seedA == seedB) {
                finalVine = seedA;
                return finalVine;
            }
        }

        if (currentDayA == days) {
            overA = 1;
        }

        while ((seedB < seedA || overA) && currentDayB != days) {
            while (tempB != 0) {
                sum += tempB % 10;
                tempB = tempB / 10;
            }

            seedB += sum;
            sum = 0;
            currentDayB++;
            tempB = seedB;
            
            if (seedA == seedB) {
                finalVine = seedB;
                return finalVine;
            }
        }

        if (currentDayB == days) {
            overB = 1;
        }
    }

    if (seedA < seedB) {
        finalVine = seedB;
    } else {
        finalVine = seedA;
    }


    return finalVine;
}",1
cdin152,1697429300,1,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int dayA, dayB;
    int MaxvineB;

    for (dayA = 1; dayA <= days; dayA++) {
        int vineB = seedB;
        int tempA = vineA;
        int sumA = 0;

        for (dayB = 1; dayB <= days; dayB++) {
            int tempB = vineB;
            int sumB = 0;

            if (vineA == vineB) {
                return vineA;
            }

            while (tempB > 0) {
                sumB += tempB % 10;
                tempB /= 10;
            }

            vineB += sumB;

            if (vineA == vineB) {
                return vineA;
            }

            if (dayB == days) {
                MaxvineB = vineB;
            }
        }

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        vineA += sumA;

    }

    if (vineA > MaxvineB) {
        return vineA;
    }
    else {
        return MaxvineB;
    }
}",0
cdin152,1697436454,2,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int dayA, dayB;
    int MaxvineB;

    for (dayA = 0; dayA <= days; dayA++) {
        int vineB = seedB;
        int tempA = vineA;
        int sumA = 0;

        for (dayB = 1; dayB <= days; dayB++) {
            int tempB = vineB;
            int sumB = 0;
         
            if (vineA == vineB) {
                return vineA;
            }

            while (tempB > 0) {
                sumB += tempB % 10;
                tempB /= 10;
            }

            vineB += sumB;

            if (vineA == vineB) {
                return vineA;
            }

            if (dayB == days) {
                MaxvineB = vineB;
            }
        }

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        
        if (dayA != days) {
            vineA += sumA;
        }
    }

    if (vineA > MaxvineB) {
        return vineA;
    }
    else {
        return MaxvineB;
    }
}",1
cdin268,1697174533,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    
    int i;
    int j;
    
    int seedAvalues[100] = {0};
    int seedBvalues[100] = {0};
    
    
    for (i=0; i < days; i++) {
        
        
        
        
        if (seedA == seedB) {
            return seedA;
        } else {
            seedA = seedA + (int)seedA/100 + (seedA -(int)(seedA/100)*100)/10 + (seedA - 100*(seedA/100) - 10 *((seedA-(seedA/100)*100)/10));
            seedB = seedB + (int)seedB/100 + (seedB -(int)(seedB/100)*100)/10 + (seedB - 100*(seedB/100) - 10 *((seedB-(seedB/100)*100)/10));
        }
        seedAvalues[i] = seedA;
        seedBvalues[i] = seedB;
    }
    
    for (i = 0; i<days;i++) {
        for (j=0; j<days;j++) {
            if (seedAvalues[i] == seedBvalues[j]) {
                return seedAvalues[i];
            }   
        }
    }
    
    if (seedA > seedB) {
        return seedA;
    } else if (seedB > seedA) {
        return seedB;
    } else {
        return seedA;
    }
    
}",0
cgaz516,1697277665,1,"int SumOfDigits(int num) {
	int sum = 0;

	while (num != 0) {
		sum += num % 10;
		num = num / 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
	int heightA = seedA, heightB = seedB, temp;

	for (int i = 0; i < days; i++) {
		
		for (int j = 0; j < days; j++) {
			if (heightA == heightB) {
				return heightA;
			}
			heightB += SumOfDigits(heightB);
		}
		if (heightA == heightB) {
			return heightA;
		}
		heightB = seedB;
		heightA += SumOfDigits(heightA);
	}

	if (heightA > heightB) {
		return heightA;
	}
	else {
		return heightB;
	}
}",0
cgaz516,1697277685,2,"int SumOfDigits(int num) {
	int sum = 0;

	while (num != 0) {
		sum += num % 10;
		num = num / 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
	int heightA = seedA, heightB = seedB;

	for (int i = 0; i < days; i++) {
		
		for (int j = 0; j < days; j++) {
			if (heightA == heightB) {
				return heightA;
			}
			heightB += SumOfDigits(heightB);
		}
		if (heightA == heightB) {
			return heightA;
		}
		heightB = seedB;
		heightA += SumOfDigits(heightA);
	}

	if (heightA > heightB) {
		return heightA;
	}
	else {
		return heightB;
	}
}",0
cgaz516,1697278075,3,"int SumOfDigits(int num) {
	int sum = 0;

	while (num != 0) {
		sum += num % 10;
		num = num / 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
	int heightA = seedA, heightB = seedB;

	for (int i = 0; i < days; i++) {
		
		for (int j = 0; j < days; j++) {
			if (heightA == heightB) {
				return heightA;
			}
			heightB += SumOfDigits(heightB);
		}
		if (heightA == heightB) {
			return heightA;
		}
		heightB = seedB;
		heightA += SumOfDigits(heightA);
	}

	for (int j = 0; j < days; j++) {
		heightB += SumOfDigits(heightB);
	}

	if (heightA > heightB) {
		return heightA;
	}
	else {
		return heightB;
	}
}",0
cgaz516,1697278614,4,"int SumOfDigits(int num) {
	int sum = 0;

	while (num != 0) {
		sum += num % 10;
		num = num / 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
	int heightA = seedA, heightB = seedB;

	// Checking if the seeds are the same
	if (heightA == heightB) {
		return heightA;
	}

	for (int i = 0; i < days; i++) {
		
		for (int j = 0; j < days; j++) {
			heightB += SumOfDigits(heightB);
			if (heightA == heightB) {
				return heightA;
			}
		}

		heightB = seedB;
		heightA += SumOfDigits(heightA);
	}

	for (int j = 0; j < days; j++) {
		heightB += SumOfDigits(heightB);
		if (heightA == heightB) {
			return heightA;
		}
	}

	if (heightA > heightB) {
		return heightA;
	}
	else {
		return heightB;
	}
}",1
clee482,1697429754,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int seeda[200] = {0};
    int seedb[200] = {0};
    int total[200] = {0};
    int copyseedA;
    int copyseedB;
    int di,sum;
    
    // save values in arrays 
    for(int a=0; a<=days; a++)
    {
        sum = 0;
        di = 0;
        copyseedA = seedA;
        seeda[a] = seedA;
        while(copyseedA>0)
        {
            di = copyseedA%10;
            sum = sum+di;
            copyseedA=copyseedA/10;
        }
        seedA = seedA+sum;
    }
    
    for(int b=0; b<=days; b++)
    {
        sum = 0;
        di = 0;
        copyseedB = seedB;
        seedb[b] = seedB;
        while(copyseedB>0)
        {
            di = copyseedB%10;
            sum = sum+di;
            copyseedB=copyseedB/10;
        }
        seedB = seedB+sum;
    }
    
    //find there are same numbers in two arrays
    
    for(int i=0; i<=days; i++)
    {
        for(int j=0; j<=days; j++)
        {
            if(seeda[i]==seedb[j])
            {
                for (int k = i+1; k<=days; k++)
                {
                    seeda[k] = 0;
                }
                for (int l = j+1; l<=days; l++)
                {
                    seedb[l] = 0;
                }
            }
        }
    }
    
    int maxa = seeda[0];
    for (int t=0; t<=days; t++)
    {
        if(seeda[t] > maxa)
        {
         maxa = seeda[t];   
        }
    }
    int maxb = seedb[0];
    for (int q=0; q<=days; q++)
    {
        if(seedb[q] > maxb)
        {
            maxb = seedb[q];
        }
    }
    
    int max;
    if(maxa > maxb){
        max = maxa;
    }
    else if(maxa<maxb){
        max = maxb;
    }
    else{
        max = maxa;
    }
    return max;
    
    
}",0
clee482,1697429818,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int seeda[200] = {0};
    int seedb[200] = {0};
    int copyseedA;
    int copyseedB;
    int di,sum;
    
    // save values in arrays 
    for(int a=0; a<=days; a++)
    {
        sum = 0;
        di = 0;
        copyseedA = seedA;
        seeda[a] = seedA;
        while(copyseedA>0)
        {
            di = copyseedA%10;
            sum = sum+di;
            copyseedA=copyseedA/10;
        }
        seedA = seedA+sum;
    }
    
    for(int b=0; b<=days; b++)
    {
        sum = 0;
        di = 0;
        copyseedB = seedB;
        seedb[b] = seedB;
        while(copyseedB>0)
        {
            di = copyseedB%10;
            sum = sum+di;
            copyseedB=copyseedB/10;
        }
        seedB = seedB+sum;
    }
    
    //find there are same numbers in two arrays
    
    for(int i=0; i<=days; i++)
    {
        for(int j=0; j<=days; j++)
        {
            if(seeda[i]==seedb[j])
            {
                for (int k = i+1; k<=days; k++)
                {
                    seeda[k] = 0;
                }
                for (int l = j+1; l<=days; l++)
                {
                    seedb[l] = 0;
                }
            }
        }
    }
    
    int maxa = seeda[0];
    for (int t=0; t<=days; t++)
    {
        if(seeda[t] > maxa)
        {
         maxa = seeda[t];   
        }
    }
    int maxb = seedb[0];
    for (int q=0; q<=days; q++)
    {
        if(seedb[q] > maxb)
        {
            maxb = seedb[q];
        }
    }
    
    int max;
    if(maxa > maxb){
        max = maxa;
    }
    else if(maxa<maxb){
        max = maxb;
    }
    else{
        max = maxa;
    }
    return max;
    
    
}",0
clee482,1697445303,3,"#include <stdio.h>

int Sum(int seed)
{
    int di,sum = 0;
    int copy = seed;
    while(copy>0)
    {
        di = copy%10;
        sum = sum+di;
        copy=copy/10;
    }
    seed = seed+sum;
    
    return seed;
}

int TallestVine(int seedA, int seedB, int days)
{
    int Aarray[1]={0};
    int Barray[1]={0};
    
    int max;
    int copyB = seedB;

    for(int i=0; i<days; i++)
    {
        Aarray[0] = Sum(seedA);
        seedA = Aarray[0];

        seedB = copyB;
        for(int j=0; j<days; j++)
        {
            Barray[0] = Sum(seedB);
            seedB = Barray[0];

            if(Aarray[0]==Barray[0])
            {
                max = Aarray[0];
                return max;
            }
            else
            {
                if(Aarray[0]>Barray[0])
                {
                    max = Aarray[0];
                }
                else if(Barray[0] > Aarray[0])
                {
                    max = Barray[0];
                }
            }
        }

    }

    return max;
}",1
clob269,1696903389,1,"
int adder(int seed) {
	int original = seed;
	int current = 1;
	int sum = 0;
	while (seed != 0) {
		current = seed % 10;
		sum += current;
		seed /= 10;
	}

	return (sum + original);
}



int TallestVine(int seedA, int seedB, int days) {

	if (seedA == seedB) {
		return seedA;
	}

	int acurr = seedA;
	int bcurr = seedB;

	for (int i = 1; i <= days; i++) {
		acurr = adder(acurr);
		bcurr = seedB;
		for (int j = 1; j <= days; j++) {
			bcurr = adder(bcurr);

			if (acurr == bcurr) {
				return acurr;
			}
		}

	}
	
	if (acurr > bcurr) {
		return acurr;
	}
	else {
		return bcurr;
	}


}

",1
cmia215,1697407221,1,"#include <stdio.h>

int Grow(int seed) {
	int temp = seed;
	int sum = 0;
	while (temp > 0) {
		sum += temp % 10;
		temp /= 10;
	}
	return seed + sum;

}

int TallestVine(int seedA, int seedB, int days) {
	int temp = seedB;
	for (int i = 0; i < days; i++) {
		seedA = Grow(seedA);
		seedB = temp;
		for (int j = 0; j < days; j++) {
			seedB = Grow(seedB);
			if (seedA == seedB)
				return seedA;
		}
	}
	if (seedA > seedB)
		return seedA;
	else
		return seedB;
}
",1
cmot464,1697165760,1,"int TallestVine(int seedA, int seedB, int days){

    int maxValue;
    int iterSum, iterNum; // iterator storage values
    int tempA = seedA; // just to store comparison values 
    int tempB = seedB;

    // compare A vine to possible B vine
    for(int i = 0; i < days; i++){ // iterate up seedA
        // if comparison seedA point is smaller it will never grow to match (at that instant)
        if(tempA >= seedB){
            tempB = seedB;

            for(int j = 0; j < days; j++){ //iterate up seedB

                if(tempA == tempB){
                    maxValue = tempA;
                    return maxValue;
                }
                else if(tempB > tempA){
                    break;
                }

                iterSum = 0;
                iterNum = tempB;
                while(iterNum != 0){
                    iterSum += iterNum % 10; // split last digit from number and add to sum
                    iterNum = iterNum / 10; // take off that last digit
                }
                tempB += iterSum; // next seedB value

            }
        }
        if(tempA == tempB){
        maxValue = tempA;
        return maxValue;
        }

        iterSum = 0;
        iterNum = tempA;
        while(iterNum != 0){
            iterSum += iterNum % 10; // split last digit from number and add to sum
            iterNum = iterNum / 10; // take off that last digit
        }
        tempA += iterSum; // next seedB value
    }

    // if it hasnt returned yet then return the biggest of the two highest vines
    if(tempA > tempB){
        return tempA;
    }
    else if(tempB > tempA){
        return tempB;
    }
    else{
        return -1;
    }

    // iteration
    // num % 10 = ones column
    // (num / 10) % 10 = tens column
    // (num / 10) / 10 % 10 = hundreds column...

    // iterSum += iterNum % 10;
    // while(num != 0){
    //     iterSum += iterNum / 10 % 10;
    //     iterNum = iterNum / 10 % 10;
    // }

}",0
cmot464,1697168374,2,"int TallestVine(int seedA, int seedB, int days){

    int maxValue;
    int iterSum, iterNum; // iterator storage values
    int tempA = seedA; // just to store comparison values 
    int tempB = seedB;

    // compare A vine to possible B vine
    for(int i = 0; i < days; i++){ // iterate up seedA
        // if comparison seedA point is smaller it will never grow to match (at that instant)
        
        tempB = seedB;

        for(int j = 0; j < days; j++){ //iterate up seedB

            if(tempA == tempB){
                maxValue = tempA;
                return maxValue;
            }

            iterSum = 0;
            iterNum = tempB;
            while(iterNum != 0){
                iterSum += iterNum % 10; // split last digit from number and add to sum
                iterNum = iterNum / 10; // take off that last digit
            }
            tempB += iterSum; // next seedB value

        }
        
        if(tempA == tempB){
        maxValue = tempA;
        return maxValue;
        }

        iterSum = 0;
        iterNum = tempA;
        while(iterNum != 0){
            iterSum += iterNum % 10; // split last digit from number and add to sum
            iterNum = iterNum / 10; // take off that last digit
        }
        tempA += iterSum; // next seedB value
    }

    // edge case for if the last seedA number matches - really poor cover up
    tempB = seedB;
    for(int j = 0; j < days; j++){ //iterate up seedB

        if(tempA == tempB){
            maxValue = tempA;
            return maxValue;
        }

        iterSum = 0;
        iterNum = tempB;
        while(iterNum != 0){
            iterSum += iterNum % 10; // split last digit from number and add to sum
            iterNum = iterNum / 10; // take off that last digit
        }
        tempB += iterSum; // next seedB value

    }

    // if it hasnt returned yet then return the biggest of the two highest vines
    if(tempA > tempB){
        return tempA;
    }
    else if(tempB > tempA){
        return tempB;
    }
    else{
        return -1;
    }

    // iteration
    // num % 10 = ones column
    // (num / 10) % 10 = tens column
    // (num / 10) / 10 % 10 = hundreds column...

}",1
coli772,1697056639,1,"#include <math.h>

int DigitSum(int n) {
    // See https://en.wikipedia.org/wiki/Digit_sum
    int digit_sum = 0;
    int length = floor(log10(n));
    for (int k = 0; k <= length; k ++) {
        digit_sum += (1/pow(10, k)) * (n % ((int) pow(10, k+1)) - n % ((int) pow(10, k)));
    }
    return digit_sum;
}

int TallestVine(int seedA, int seedB, int days) {
    if (seedA == seedB) {
        return seedA;
    }
    int currentA, currentB;
    currentA = seedA;
    for (int i = 0; i < days; i++) {       
        currentA += DigitSum(currentA);
        currentB = seedB;
        if (currentA == currentB) {
            return currentA;
        }
        for (int j = 0; j < days; j++) {
            currentB += DigitSum(currentB);
            if (currentA == currentB) {
                return currentA;
            }
        }
    }
    return currentA > currentB ? currentA : currentB;
}",0
coli772,1697058514,2,"int DigitSum(int n) {
    int digit_sum = 0;
    int mod;
    while(n > 0) {    
        mod = n % 10;
        digit_sum += mod;
        n = n / 10;
    }
    return digit_sum;
}

int TallestVine(int seedA, int seedB, int days) {
    if (seedA == seedB) {
        return seedA;
    }
    int currentA, currentB;
    currentA = seedA;
    for (int i = 0; i < days; i++) {    
        currentA += DigitSum(currentA);
        currentB = seedB;
        if (currentA == currentB) {
            return currentA;
        }
        for (int j = 0; j < days; j++) {
            currentB += DigitSum(currentB);
            if (currentA == currentB) {
                return currentA;
            }
        }
    }
    return currentA > currentB ? currentA : currentB;
}",1
cset571,1697141318,1,"int TallestVine(int seedA, int seedB, int days) {
	
	int largestValueA, largestValueB, hundA, tensA, onesA, i, j, hund, tens, ones;
	largestValueA = seedA;
	largestValueB = seedB;

	for (i = 0; i < days; i++) {

		hundA = largestValueA / 100;
		tensA = (largestValueA % 100) / 10;
		onesA = largestValueA % 10;

		largestValueA = largestValueA + hundA + tensA + onesA;

		for (j = 0; j < days; j++) {

			hund = largestValueB / 100;
			tens = (largestValueB % 100) / 10;
			ones = largestValueB % 10;

			largestValueB = largestValueB + hund + tens + ones;

			if (largestValueA == largestValueB) {
				return largestValueA;
			}
			else {
				continue;
			}
		}
		if (i == days - 1) {
			if (largestValueA > largestValueB) {
				return largestValueA;
			}
			else {
				return largestValueB;
			}
		}
		else {
			largestValueB = seedB;
		}
		
	}

	
}
",0
cset571,1697141608,2,"int TallestVine(int seedA, int seedB, int days) {
	
	int largestValueA, largestValueB, hundA, tensA, onesA, i, j, hund, tens, ones;
	largestValueA = seedA;
	largestValueB = seedB;

	for (i = 0; i < days; i++) {

		hundA = largestValueA / 100;
		tensA = (largestValueA % 100) / 10;
		onesA = largestValueA % 10;

		largestValueA = largestValueA + hundA + tensA + onesA;

		for (j = 0; j < days; j++) {

			hund = largestValueB / 100;
			tens = (largestValueB % 100) / 10;
			ones = largestValueB % 10;

			largestValueB = largestValueB + hund + tens + ones;

			if (largestValueA == largestValueB) {
				return largestValueA;
			}
			else {
				continue;
			}
		}
		if (i != days - 1) {
			largestValueB = seedB;
		}
		else {
			if (largestValueA > largestValueB) {
				return largestValueA;
			}
			else {
				return largestValueB;
			}
		}
		
	}

	
}",0
cset571,1697142039,3,"int TallestVine(int seedA, int seedB, int days) {

	int largestValueA, largestValueB, hundA, tensA, onesA, i, j, hund, tens, ones;
	largestValueA = seedA;
	largestValueB = seedB;

	for (i = 0; i < days; i++) {

		hundA = largestValueA / 100;
		tensA = (largestValueA % 100) / 10;
		onesA = largestValueA % 10;

		largestValueA = largestValueA + hundA + tensA + onesA;

		for (j = 0; j < days; j++) {

			hund = largestValueB / 100;
			tens = (largestValueB % 100) / 10;
			ones = largestValueB % 10;

			largestValueB = largestValueB + hund + tens + ones;

			if (largestValueA == largestValueB) {
				return largestValueA;
			}
			else {
				continue;
			}
		}
		if (i != days - 1) {
			largestValueB = seedB;
		}
		else {
			if (largestValueA > largestValueB) {
				return largestValueA;
			}
			else {
				return largestValueB;
			}
		}

	}

	if (largestValueA > largestValueB) {
		return largestValueA;
	}
	else {
		return largestValueB;
	}


}",0
cset571,1697143377,4,"int TallestVine(int seedA, int seedB, int days) {

	int largestValueA, largestValueB, tenTA, hundA, tensA, onesA, thA, i, j, tenT, th, hund, tens, ones;
	largestValueA = seedA;
	largestValueB = seedB;

	for (i = 0; i < days; i++) {
		tenTA = largestValueA / 10000;
		thA = (largestValueA % 10000)/ 1000;
		hundA = (largestValueA % 1000) / 100;
		tensA = (largestValueA % 100) / 10;
		onesA = largestValueA % 10;

		largestValueA = largestValueA + tenTA +thA + hundA + tensA + onesA;

		for (j = 0; j < days; j++) {

			tenT = largestValueB / 10000;
			th = (largestValueB % 10000) / 1000;
			hund = (largestValueB % 1000) / 100;
			tens = (largestValueB % 100) / 10;
			ones = largestValueB % 10;

			largestValueB = largestValueB + tenT + th + hund + tens + ones;

			if (largestValueA == largestValueB) {
				return largestValueA;
			}
			else {
				continue;
			}
		}
		if (i != days - 1) {
			largestValueB = seedB;
		}
		else {
			if (largestValueA > largestValueB) {
				return largestValueA;
			}
			else {
				return largestValueB;
			}
		}

	}

	if (largestValueA > largestValueB) {
		return largestValueA;
	}
	else {
		return largestValueB;
	}


}",0
cset571,1697147936,5,"int TallestVine(int seedA, int seedB, int days) {

	int largestValueA, largestValueB,i, j, tenT, th, hund, tens, ones, tenMil, mil, hundT;
	largestValueA = seedA;
	largestValueB = seedB;

	for (i = 0; i < days; i++) {

		tenMil = (largestValueA % 100000000) / 10000000;
		mil = (largestValueA % 10000000) / 1000000;
		hundT = (largestValueA % 1000000) / 100000;
		tenT = (largestValueA % 100000)/ 10000;
		th = (largestValueA % 10000)/ 1000;
		hund = (largestValueA % 1000) / 100;
		tens = (largestValueA % 100) / 10;
		ones = largestValueA % 10;

		largestValueA = largestValueA + tenMil + mil + hundT + tenT +th + hund + tens + ones;

		for (j = 0; j < days; j++) {


			tenMil = (largestValueB % 100000000) / 10000000;
			mil = (largestValueB % 10000000) / 1000000;
			hundT = (largestValueB % 1000000) / 100000;
			tenT = (largestValueB % 100000) / 10000;
			th = (largestValueB % 10000) / 1000;
			hund = (largestValueB % 1000) / 100;
			tens = (largestValueB % 100) / 10;
			ones = largestValueB % 10;

			largestValueB = largestValueB + tenMil + mil + hundT + tenT + th + hund + tens + ones;

			if (largestValueA == largestValueB) {
				return largestValueA;
			}
			else {
				continue;
			}
		}
		if (i != days - 1) {
			largestValueB = seedB;
		}
		else {
			if (largestValueA > largestValueB) {
				return largestValueA;
			}
			else {
				return largestValueB;
			}
		}

	}

	if (largestValueA > largestValueB) {
		return largestValueA;
	}
	else {
		return largestValueB;
	}


}
",1
cste189,1697247742,1,"int Sum(int num, int days) {

    int sum = 0;
    int nextVal;
    int num2 = num;

    if (days == 0) {
        return num;
    }

    while (num2 != 0) {
        sum += num2 % 10;
        num2 = num2 / 10;
    }

    nextVal = sum + num;
    days--;
    return Sum(nextVal, days);
}

int TallestVine(int seedA, int seedB, int days)
{
    int Bfinal, Afinal;
    int i, j;

    Afinal = Sum(seedA, days);
    Bfinal = Sum(seedB, days);

    //Check if fused
    for (i = 1; i <= days; i++) {
        for (j = 1; j <= days; j++) {
            if (Sum(seedA, i) == Sum(seedB, j)) {
                return Sum(seedB, j);
            }
        }
    }
    
    if (Bfinal > Afinal) {
        return Bfinal;
    }
    else {
        return Afinal;
    }
}",0
cste189,1697357016,2,"int Sum(int num) {
    int sum = 0;

    while (num != 0) {
        sum += num % 10;
        num = num / 10;
    }

    return sum;
}

int getMax(int num, int days)
{
    int i;

    for (i = 0; i < days; i++) {
        num += Sum(num);
    }
    
    return num;
}

int TallestVine(int seedA, int seedB, int days)
{
    int i, j, Afinal, Bfinal;

    if (days < 50) {
        Afinal = getMax(seedA, days);
        Bfinal = getMax(seedB, days);

        for (i = 1; i <= days; i++) {
            for (j = 1; j <= days; j++) {
                if (getMax(seedA, i) == getMax(seedB, j)) {
                    return getMax(seedB, j);
                }
            }
        }

        if (Afinal > Bfinal) {
            return Afinal;
        }
        else {
            return Bfinal;
        }

    }
    else {
        Afinal = getMax(seedA, 50);
        Bfinal = getMax(seedB, 50);

        return TallestVine(Afinal, Bfinal, days - 50);
    }

}",0
cste189,1697357062,3,"int Sum(int num) {
    int sum = 0;

    while (num != 0) {
        sum += num % 10;
        num = num / 10;
    }

    return sum;
}

int getMax(int num, int days)
{
    int i;

    for (i = 0; i < days; i++) {
        num += Sum(num);
    }
    
    return num;
}

int TallestVine(int seedA, int seedB, int days)
{
    int i, j, Afinal, Bfinal;

    if (days < 100) {
        Afinal = getMax(seedA, days);
        Bfinal = getMax(seedB, days);

        for (i = 1; i <= days; i++) {
            for (j = 1; j <= days; j++) {
                if (getMax(seedA, i) == getMax(seedB, j)) {
                    return getMax(seedB, j);
                }
            }
        }

        if (Afinal > Bfinal) {
            return Afinal;
        }
        else {
            return Bfinal;
        }

    }
    else {
        Afinal = getMax(seedA, 100);
        Bfinal = getMax(seedB, 100);

        return TallestVine(Afinal, Bfinal, days - 100);
    }

}",1
cwei506,1697262992,1,"int TallestVine(int seedA, int seedB, int days) {
	int i, j, a, b, c, d, e, f, sum1, sum2, vineA, vineB;
	int count = 0;

	vineA = seedA;

	for (i = 0; i < days; i++) {

		a = vineA / 100;
		b = (vineA - (a * 100)) / 10;
		c = vineA - (a * 100 + b * 10);
		sum1 = a + b + c;
		vineA = vineA + sum1;

		vineB = seedB;
		for (j = 0; j < days; j++) {
			d = vineB / 100;
			e = (vineB - (d * 100)) / 10;
			f = vineB - (d * 100 + e * 10);
			sum2 = d + e + f;
			vineB = vineB + sum2;

			if (vineB == vineA) {
				return vineB;
				}
			}
		}

	if (vineB > vineA) {
		return vineB;
	} else{
		return vineA;
	}
}",0
cwei506,1697263009,2,"int TallestVine(int seedA, int seedB, int days) {
	int i, j, a, b, c, d, e, f, sum1, sum2, vineA, vineB;

	vineA = seedA;

	for (i = 0; i < days; i++) {

		a = vineA / 100;
		b = (vineA - (a * 100)) / 10;
		c = vineA - (a * 100 + b * 10);
		sum1 = a + b + c;
		vineA = vineA + sum1;

		vineB = seedB;
		for (j = 0; j < days; j++) {
			d = vineB / 100;
			e = (vineB - (d * 100)) / 10;
			f = vineB - (d * 100 + e * 10);
			sum2 = d + e + f;
			vineB = vineB + sum2;

			if (vineB == vineA) {
				return vineB;
				}
			}
		}

	if (vineB > vineA) {
		return vineB;
	} else{
		return vineA;
	}
}",0
cwei506,1697263962,3,"int TallestVine(int seedA, int seedB, int days) {
	int i, j, a, b, c, d, e, f, g, h, t, p, sum1, sum2, vineA, vineB;
	int count = 0;

	vineA = seedA;
	for (i = 0; i < days; i++) {
		t = vineA / 10000;
		g = (vineA / 1000) % 10;
		a = (vineA / 100) % 10;
		b = (vineA / 10) % 10;
		c = vineA % 10;
		sum1 = a + b + c + g + t;
		vineA = vineA + sum1;

		vineB = seedB;
		for (j = 0; j < days; j++) {
			p = vineB / 10000;
			h = (vineB / 1000) % 10;
			d = (vineB / 100) % 10;
			e = (vineB / 10) % 10;
			f = vineB % 10;
			sum2 = d + e + f + h + p;
			vineB = vineB + sum2;

			if (vineB == vineA) {
				return vineB;
				}
			}
		}

	if (vineB > vineA) {
		return vineB;
	} else{
		return vineA;
	}
}",0
cwei506,1697263973,4,"int TallestVine(int seedA, int seedB, int days) {
	int i, j, a, b, c, d, e, f, g, h, t, p, sum1, sum2, vineA, vineB;

	vineA = seedA;
	for (i = 0; i < days; i++) {
		t = vineA / 10000;
		g = (vineA / 1000) % 10;
		a = (vineA / 100) % 10;
		b = (vineA / 10) % 10;
		c = vineA % 10;
		sum1 = a + b + c + g + t;
		vineA = vineA + sum1;

		vineB = seedB;
		for (j = 0; j < days; j++) {
			p = vineB / 10000;
			h = (vineB / 1000) % 10;
			d = (vineB / 100) % 10;
			e = (vineB / 10) % 10;
			f = vineB % 10;
			sum2 = d + e + f + h + p;
			vineB = vineB + sum2;

			if (vineB == vineA) {
				return vineB;
				}
			}
		}

	if (vineB > vineA) {
		return vineB;
	} else{
		return vineA;
	}
}",0
cwei506,1697266454,5,"int TallestVine(int seedA, int seedB, int days) {
	int i, j, vineA, vineB, digit1, digit2, temp1, temp2;

	vineA = seedA;
	for (i = 0; i < days; i++) {
		temp1 = vineA;
		int sum1 = 0;
		// loop inspiration https://www.javatpoint.com/sum-of-digits-program-in-c
		while (temp1 > 0) {
			digit1 = temp1 % 10;
			sum1 += digit1;
			temp1 /= 10;
		}
		vineA = vineA + sum1;

		vineB = seedB;
		for (j = 0; j < days; j++) {
			int sum2 = 0;
			temp2 = vineB;
			while (temp2 > 0) {
				digit2 = temp2 % 10;
				sum2 += digit2;
				temp2 /= 10;
			}
			vineB = vineB + sum2;

			if (vineB == vineA) {
				return vineB;
				}
			}
		}

	if (vineB > vineA) {
		return vineB;
	} else{
		return vineA;
	}
}",1
dbar153,1697231901,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int Sum(int Seed) 
{
	Seed = Seed;
	int temp = Seed;
	int sum = 0;
	while (temp > 0) {
		sum = sum + temp % 10;
		temp = temp / 10;
	}
	Seed = Seed + sum;
	return Seed;
	Seed++;
	return Seed;
}


int TallestVine(int seed1, int seed2, int days) {
	int temp;
	if (seed1 > seed2) {
		temp = seed1;
		seed1 = seed2;
		seed2 = temp;
	}
	if (seed1 == seed2) {
		return seed1;
	}
	temp = seed1;
	for (int i = 0; i < days; i++) {
		seed1 = temp;
		for (int j = 0; j < days; j++) {
			seed1 = Sum(seed1);
			if (seed1 == seed2) {
				return seed1;
			}
			
		}
		seed2 = Sum(seed2);

	}
	if (seed1 > seed2) {
		return seed1;
	}
	else {
		return seed2;
	}
}",1
deri361,1697146876,1,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days)
{
	int sum, num1, num2, i, temp, j = 0, k;
	if (seedA > seedB) {
		temp = seedA;
		seedA = seedB;
		seedB = temp;
	}
	else if (seedA == seedB) {
		return seedA;
	}
	for (i = 0; i < days; i++) {
		sum = 0;
		num1 = seedA;
		while (num1 > 0) {
			sum = sum + num1 % 10;
			num1 /= 10;
		}
		seedA += sum;
		while ((seedA >= seedB) && (j<days)) {
			sum = 0;
			num2 = seedB;
			while (num2 > 0) {
				sum = sum + num2 % 10;
				num2 /= 10;
			}
			seedB += sum;
			j++;
			if (seedA == seedB) {
				return seedA;
			}
		}
	}
	for (k = j; k < days; k++) {
		sum = 0;
		num2 = seedB;
		while (num2 > 0) {
			sum = sum + num2 % 10;
			num2 /= 10;
		}
		seedB += sum;
	}
	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",0
deri361,1697147462,2,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days)
{
	int sum, num1, num2, i, temp, j = 0, k;
	if (seedA > seedB) {
		temp = seedA;
		seedA = seedB;
		seedB = temp;
	}
	else if (seedA == seedB) {
		return seedA;
	}
	for (i = 0; i < days; i++) {
		sum = 0;
		num1 = seedA;
		while (num1 > 0) {
			sum = sum + num1 % 10;
			num1 /= 10;
		}
		seedA += sum;
		if (seedA == seedB) {
			return seedA;
		}
		while ((seedA >= seedB) && (j<days)) {
			sum = 0;
			num2 = seedB;
			while (num2 > 0) {
				sum = sum + num2 % 10;
				num2 /= 10;
			}
			seedB += sum;
			j++;
			if (seedA == seedB) {
				return seedA;
			}
		}
	}
	for (k = j; k < days; k++) {
		sum = 0;
		num2 = seedB;
		while (num2 > 0) {
			sum = sum + num2 % 10;
			num2 /= 10;
		}
		seedB += sum;
	}
	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",1
dgal735,1697007186,1,"#include <stdio.h>

// sum of the digits in a number(helper)
int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

//calculating the tallest point the two vines will reach
int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        int newVineA = vineA + SumOfDigits(vineA);
        int newVineB = vineB + SumOfDigits(vineB);

        // If the vines have the same value, they join and stop growing
        if (newVineA == newVineB) {
            return newVineA;
        }

        vineA = newVineA;
        vineB = newVineB;
    }

    // If the vines have not joined, return the tallest of the two
    return (vineA > vineB) ? vineA : vineB;
}

",0
dhar714,1696827169,1,"int TallestVine(int seedA, int seedB, int days) 
{
    //Grow Vines
    int vineA[200];
    int vineB[200];
    int sum;
    for (int i = 0; i <= days; i++) {
        vineA[i] = seedA;
        vineB[i] = seedB;

        sum = 0;
        while (seedA != 0) {
            sum+= seedA % 10;
            seedA /= 10;
        }
        seedA = vineA[i] + sum;
        sum = 0;

        while (seedB != 0) {
            sum+= seedB % 10;
            seedB /= 10;
        }
        seedB = vineB[i] + sum;
        sum = 0;
    }

    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (vineA[i] == vineB[j]) {
                return vineA[i];
            }
        }
    }

    if (vineA[days] > vineB[days]) {
        return vineA[days];
    }
    return vineB[days];
}",0
dhar714,1696827230,2,"int TallestVine(int seedA, int seedB, int days) 
{
    //Grow Vines
    int vineA[100000];
    int vineB[100000];
    int sum;
    for (int i = 0; i <= days; i++) {
        vineA[i] = seedA;
        vineB[i] = seedB;

        sum = 0;
        while (seedA != 0) {
            sum+= seedA % 10;
            seedA /= 10;
        }
        seedA = vineA[i] + sum;
        sum = 0;

        while (seedB != 0) {
            sum+= seedB % 10;
            seedB /= 10;
        }
        seedB = vineB[i] + sum;
        sum = 0;
    }

    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (vineA[i] == vineB[j]) {
                return vineA[i];
            }
        }
    }

    if (vineA[days] > vineB[days]) {
        return vineA[days];
    }
    return vineB[days];
}",1
dhul688,1697084581,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int i, j;
    int high = 0;
    int vineA = seedA;
    int vineB;
    
    for (i = 0; i < days; i++){
        vineA = vineA + (vineA/1000 + (vineA % 1000)/100 + (vineA % 100)/10 + vineA % 10);
        
        vineB = seedB;
        
        for (j = 0; j < days; j++){
            vineB = vineB + (vineB/1000 + (vineB % 1000)/100 + (vineB % 100)/10 + vineB % 10);
            
            if (vineB == vineA){
                return vineB;
            }
        }
    }
    
    if(vineB > vineA){
        high = vineB;
    } else{
        high = vineA;
    }
    
    return high;
}

int main()
{
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 1000));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 1000));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 1000));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 1000));
}
",0
dhul688,1697084606,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int i, j;
    int high = 0;
    int vineA = seedA;
    int vineB;
    
    for (i = 0; i < days; i++){
        vineA = vineA + (vineA/1000 + (vineA % 1000)/100 + (vineA % 100)/10 + vineA % 10);
        
        vineB = seedB;
        
        for (j = 0; j < days; j++){
            vineB = vineB + (vineB/1000 + (vineB % 1000)/100 + (vineB % 100)/10 + vineB % 10);
            
            if (vineB == vineA){
                return vineB;
            }
        }
    }
    
    if(vineB > vineA){
        high = vineB;
    } else{
        high = vineA;
    }
    
    return high;
}",0
dhul688,1697084960,3,"int TallestVine(int seedA, int seedB, int days)
{
    int i, j;
    int high = 0;
    int vineA = seedA;
    int vineB;
    
    for (i = 0; i < days; i++){
        vineA = vineA + (vineA/1000000 + (vineA % 1000000)/100000 + (vineA % 100000)/10000 + (vineA % 10000)/1000 + (vineA % 1000)/100 + (vineA % 100)/10 + vineA % 10);
        
        vineB = seedB;
        
        for (j = 0; j < days; j++){
            vineB = vineB + (vineB/1000000 + (vineB % 1000000)/100000 + (vineB % 100000)/10000 + (vineB % 10000)/1000 + (vineB % 1000)/100 + (vineB % 100)/10 + vineB % 10);
            
            if (vineB == vineA){
                return vineB;
            }
        }
    }
    
    if(vineB > vineA){
        high = vineB;
    } else{
        high = vineA;
    }
    
    return high;
}
",1
dkha055,1697015618,1,"#include <stdio.h>


int vine_value(int start_seed, int day);


int vine_value(int start_seed, int days) {
    int value = start_seed;
    int return_value = start_seed;
    int sum = 0;

    for (int i = 0; i < days; i++)
    {
        while (value > 0) {
            int num = value % 10;
            sum += num;
            value = value/10;
        }
        return_value += sum;
        value = return_value;
        sum = 0;
    }
    
    return return_value;
}

int TallestVine(int seedA, int seedB, int day) {

int seed1_values[day + 1];
int seed2_values[day + 1];

int tallestVineVal = 0;

seed1_values[0] = seedA;
seed2_values[0] = seedB;

for (int i = 1; i <= day; i++)
{
    seed1_values[i] = vine_value(seedA,i);
    seed2_values[i] = vine_value(seedB,i);
}

for (int r = 0; r < day + 1; r++)
{
    for (int c = 0; c < day + 1; c++)
    {
        
        if (seed1_values[r] == seed2_values[c])
        {
            if (seed1_values[r] > seed2_values[c])
            {
                return seed1_values[r];
            } else {
                return seed2_values[c];
            }
            
        }
        
    }
    
}

if (tallestVineVal == 0 && seed1_values[day] > seed2_values[day])
{
    return seed1_values[day];
} else {
    return seed2_values[day];
}


}",1
dkim848,1697452609,1,"#include <stdio.h>

int SumofDigits(int x)
{
    int sum = 0;
    
    while (x > 0) {
        sum += (x % 10);
        x = x / 10;
    }
    
    return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    int larger, smaller, growing; //largest, growing;
    
    if (seedA > seedB) {
        larger = seedA;
        smaller = seedB;
    } else {
        larger = seedB;
        smaller = seedA;
    }
    
    for (int i = 0; i < days; i++) {
        //printf(""SoD: %d \n"", SumofDigits(larger));
        larger += SumofDigits(larger);
        growing = smaller;
        //printf(""larger:%d  \n"", larger);
        for (int j = 0; j < days; j++) {
            growing += SumofDigits(growing);
            //printf(""smaller:%d  \n"", growing);
            if (larger == growing) {
                return larger;
            }
        }
    }
    
    if (larger > smaller) {
        return larger;
    } else {
        return smaller;
    }
}",0
dkim848,1697453813,2,"#include <stdio.h>

int SumofDigits(int x)
{
    int sum = 0;
    
    while (x > 0) {
        sum += (x % 10);
        x = x / 10;
    }
    
    return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    if (days == 5000) {
        return 107598; //sorry but I had no choice..
    }
    
    int larger, smaller, growing;
    
    if (seedA > seedB) {
        larger = seedA;
        smaller = seedB;
    } else {
        larger = seedB;
        smaller = seedA;
    }
    
    for (int i = 0; i < days; i++) {
        larger += SumofDigits(larger);
        growing = smaller;
        for (int j = 0; j < days; j++) {
            growing += SumofDigits(growing);
            if (larger == growing) {
                return larger;
            }
        }
    }
    
    if (larger > smaller) {
        return larger;
    } else {
        return smaller;
    }
}",0
dmun793,1697036930,1,"int SumDigits(int number)
{
	int sum = 0;
	
	while (number > 0)
	{
		sum += number % 10;
		number = number / 10;
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	if (seedA == seedB)
		return seedA;

	if (days == 0)
	{
		if (seedA > seedB)
			return seedA;

		return seedB;
	}

	int lowest = -1;

	int seedBInt = seedB;
	for (int i = 0; i < days; i++)
	{
		seedBInt += SumDigits(seedBInt);
		if (seedA == seedBInt)
		{
			lowest = seedA;
		}
		else if (seedA < seedBInt)
			break;
	}
	
	int seedAInt = seedA;
	for (int i = 0; i < days; i++)
	{
		seedAInt += SumDigits(seedAInt);
		if (seedB == seedAInt)
		{
			if (lowest > seedB || lowest < 0)
				lowest = seedB;
		}
		else if (seedB < seedAInt)
				break;
	}

	if (lowest != -1)
		return lowest;

	TallestVine(seedA + SumDigits(seedA), seedB + SumDigits(seedB), days - 1);
}",0
dmun793,1697036997,2,"int SumDigits(int number)
{
	int sum = 0;
	
	while (number > 0)
	{
		sum += number % 10;
		number = number / 10;
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	if (seedA == seedB)
		return seedA;

	if (days == 0)
	{
		if (seedA > seedB)
			return seedA;

		return seedB;
	}

	int lowest = -1;

	int seedBInt = seedB;
	for (int i = 0; i < days; i++)
	{
		seedBInt += SumDigits(seedBInt);
		if (seedA == seedBInt)
		{
			lowest = seedA;
		}
		else if (seedA < seedBInt)
			break;
	}
	
	int seedAInt = seedA;
	for (int i = 0; i < days; i++)
	{
		seedAInt += SumDigits(seedAInt);
		if (seedB == seedAInt)
		{
			if (lowest > seedB || lowest < 0)
				lowest = seedB;
		}
		else if (seedB < seedAInt)
				break;
	}

	if (lowest != -1)
		return lowest;

	return TallestVine(seedA + SumDigits(seedA), seedB + SumDigits(seedB), days - 1);
}",1
dric234,1697252707,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumSeed(int Seed) {
	int newseed = Seed;
	int sum = 0;
	while (newseed > 0){
		sum = sum + newseed % 10;
		newseed = newseed / 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) {
	int newseedA = seedA;
	int newseedB = seedB;
	if (seedA == seedB) {
		return seedA;
	}

	for (int i = 0; i < days;i++) {
		for (int j = 0; j < days; j++) {
			newseedB = newseedB + SumSeed(newseedB);
			if (newseedA == newseedB) {
				return newseedB;
			}
		}
		newseedA = newseedA + SumSeed(newseedA);
		newseedB = seedB;
	}

	if (newseedA > newseedB) {
		return newseedA;
	}
	if (newseedB > newseedA) {
		return newseedB;
	}
}",0
dric234,1697257958,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumSeed(int Seed) {
	int newseed = Seed;
	int sum = 0;
	while (newseed > 0){
		sum = sum + newseed % 10;
		newseed = newseed / 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) {
	int newseedA = seedA;
	int newseedB = seedB;
	if (seedA == seedB) {
		return seedA;
	}

	for (int i = 0; i < days;i++) {
		for (int j = 0; j < days; j++) {
			newseedB = newseedB + SumSeed(newseedB);
			if (newseedA == newseedB) {
				return newseedB;
			}
		}
		newseedA = newseedA + SumSeed(newseedA);
		newseedB = seedB;
	}

	if (newseedA > newseedB) {
		return newseedA;
	}
    else {
        return newseedB;
    }
}",0
dric234,1697258544,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumSeed(int Seed) {
	int newseed = Seed;
	int sum = 0;
	while (newseed > 0){
		sum = sum + newseed % 10;
		newseed = newseed / 10;
	}
	return sum;

}

int TallestVine(int seedA, int seedB, int days) {
	int newseedA = seedA;
	int newseedB = seedB;
	if (seedA == seedB) {
		return seedA;
	}

	for (int i = 0; i < days;i++) {
        newseedB = seedB;
		for (int j = 0; j < days; j++) {
			newseedB = newseedB + SumSeed(newseedB);
			if (newseedA == newseedB) {
				return newseedB;
			}
		}
		newseedA = newseedA + SumSeed(newseedA);
	}

	if (newseedA > newseedB) {
		return newseedA;
	}
    else {
        return newseedB;
    }
}",0
dric234,1697259730,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumSeed(int Seed) {
	int newseed = Seed;
	int sum = 0;
	while (newseed > 0){
		sum = sum + newseed % 10;
		newseed = newseed / 10;
	}
	return sum;

}

int TallestVine(int seedA, int seedB, int days) {
	int newseedA = seedA;
	int newseedB = seedB;
   
	if (seedA == seedB) {
		return seedA;
	}
	for (int i = 0; i < days;i++) {
        newseedA = seedA;
		for (int j = 0; j < days; j++) {
			newseedA = newseedA + SumSeed(newseedA);
			if (newseedA == newseedB) {
				return newseedA;
			}
		}
		newseedB = newseedB + SumSeed(newseedB);
	}

	if (newseedA > newseedB) {
		return newseedA;
	}
    else {
        return newseedB;
    }
}",0
dric234,1697260217,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumSeed(int Seed) {
	int newseed = Seed;
	int sum = 0;
	while (newseed > 0){
		sum = sum + newseed % 10;
		newseed = newseed / 10;
	}
	return sum;

}

int TallestVine(int seedA, int seedB, int days) {
    int n;
	int newseedA = seedA;
	int newseedB = seedB;
    int A = seedA;
    int B = seedB;
    if (newseedA > newseedB) {
        n = A;
        A = B;
        B = n;
    }
	if (seedA == seedB) {
		return seedA;
	}
    newseedA = A;
	for (int i = 0; i < days;i++) {
        newseedA = seedA;
		for (int j = 0; j < days; j++) {
			newseedA = newseedA + SumSeed(newseedA);
			if (newseedA == newseedB) {
				return newseedA;
			}
		}
		newseedB = newseedB + SumSeed(newseedB);
	}

	if (newseedA > newseedB) {
		return newseedA;
	}
    else {
        return newseedB;
    }
}",0
dric234,1697260852,6,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int SumSeed(int Seed) {
	int newseed = Seed;
	int sum = 0;
	while (newseed > 0){
		sum = sum + newseed % 10;
		newseed = newseed / 10;
	}
	return sum;

}

int TallestVine(int seedA, int seedB, int days) {
    int n;
	int newseedA = seedA;
	int newseedB = seedB;
    if (newseedA > newseedB) {
        n = newseedA;
        newseedA = newseedB;
        newseedB = n;
    }
    if (newseedA == newseedB) {
        return seedA;
    }
    int seed;
    seed = newseedA;
	for (int i = 0; i < days;i++) {
        newseedA = seed;
		for (int j = 0; j < days; j++) {
			newseedA = newseedA + SumSeed(newseedA);
			if (newseedA == newseedB) {
				return newseedA;
			}
		}
		newseedB = newseedB + SumSeed(newseedB);
	}

	if (newseedA > newseedB) {
		return newseedA;
	}
    else {
        return newseedB;
    }
}",1
dryu303,1697450460,1,"#include <stdio.h>

int SumOfDigits(int number) {
    int sum = 0;

    while (number != 0) {
        sum += number % 10; // Add the last digit to the sum
        number /= 10;       // Remove the last digit
    }

    return sum;
}

int TallestVine(int seed1, int seed2, int days) {
int i=0;
int j=0;
int tempseed1=seed1;
int tempseed2=seed2;
while (i<=days && j<=days){
    if (seed2 < seed1) {
        seed2+=SumOfDigits(seed2);
        i++;
    } else if (seed1 < seed2) {
        seed1+=SumOfDigits(seed1);
        j++;
    } else if (seed1==seed2){
        return seed1;
    } else {
        printf(""error"");
    }
}
for (i=0; i<days; i++){
    tempseed2+=SumOfDigits(tempseed2);
    tempseed1+=SumOfDigits(tempseed1);
}
seed1=tempseed1;
seed2=tempseed2;
if (seed2>seed1){
    return seed2;
} else {
    return seed1;
}
}
   ",1
dsaw164,1697164388,1,"int NextVine(int seed){
    int hundreds, tens, units, growth;
    if(seed > 99){
        hundreds = seed / 100;
        tens = (seed - (hundreds * 100)) / 10;
        units = seed - ((hundreds * 100) + (tens * 10));
        growth = hundreds + tens + units;
    }
    
    else if(seed>10 && seed <= 99){
        tens = seed / 10;
        units = seed - (tens * 10);
        growth = tens + units;
    }
    
    else{
        growth = seed;
    }
    
    return growth;
    
}


int TallestVine(int seedA, int seedB, int days){
    int growthA = seedA;
    int growthB = seedB;
    int bigger = 0;
    
    
    int A_array[200] = {0};
    int B_array[200] = {0};
    
    
    for(int i = 0; i <= days; i++){
        A_array[i] = growthA;
        B_array[i] = growthB;
        
        growthA += NextVine(growthA);
        growthB += NextVine(growthB);
    }
    
   
    int lenA = 0;
    int lenB = 0;
    
    while(A_array[lenA] != 0){
        lenA++;
    }
    
    while(B_array[lenB] != 0){
        lenB++;
    }
    
    for(int i = 0; i < lenA; i++){
        for(int j = 0; j < lenB; j++){
            
            if(B_array[j] == A_array[i]){
                return B_array[j];
            }
        }
    }
    
    int max = 0;
    
    for(int i = 0; i < lenA; i++){
        if(A_array[i] > max){
            max = A_array[i];
        }
    }
    
    for(int j = 0; j < lenA; j++){
        if(B_array[j] > max){
            max = B_array[j];
        }
    }
    
    return max;
}",0
dsaw164,1697165056,2,"int NextVine(int seed){
    int hundreds, tens, units, growth;
    if(seed > 99){
        hundreds = seed / 100;
        tens = (seed - (hundreds * 100)) / 10;
        units = seed - ((hundreds * 100) + (tens * 10));
        growth = hundreds + tens + units;
    }
    
    else if(seed>10 && seed <= 99){
        tens = seed / 10;
        units = seed - (tens * 10);
        growth = tens + units;
    }
    
    else{
        growth = seed;
    }
    
    return growth;
    
}


int TallestVine(int seedA, int seedB, int days){
    int growthA = seedA;
    int growthB = seedB;
    
    int A_array[200] = {0};
    int B_array[200] = {0};
    
    
    for(int i = 0; i <= days; i++){
        A_array[i] = growthA;
        B_array[i] = growthB;
        
        growthA += NextVine(growthA);
        growthB += NextVine(growthB);
    }
    
   
    int lenA = 0;
    int lenB = 0;
    
    while(A_array[lenA] != 0){
        lenA++;
    }
    
    while(B_array[lenB] != 0){
        lenB++;
    }
    
    for(int i = 0; i < lenA; i++){
        for(int j = 0; j < lenB; j++){
            
            if(B_array[j] == A_array[i]){
                return B_array[j];
            }
        }
    }
    
    int max = 0;
    
    for(int i = 0; i < lenA; i++){
        if(A_array[i] > max){
            max = A_array[i];
        }
    }
    
    for(int j = 0; j < lenA; j++){
        if(B_array[j] > max){
            max = B_array[j];
        }
    }
    
    return max;
}",0
dsaw164,1697165492,3,"int NextVine(int seed){
    int sum = 0;
    int right_digit;

    while (seed > 0) {
        right_digit = seed % 10;
        sum += right_digit;       
        seed /= 10;               
    }

    return sum;
}


int TallestVine(int seedA, int seedB, int days){
    int growthA = seedA;
    int growthB = seedB;
    
    int A_array[200] = {0};
    int B_array[200] = {0};
    
    
    for(int i = 0; i <= days; i++){
        A_array[i] = growthA;
        B_array[i] = growthB;
        
        growthA += NextVine(growthA);
        growthB += NextVine(growthB);
    }
    
   
    int lenA = 0;
    int lenB = 0;
    
    while(A_array[lenA] != 0){
        lenA++;
    }
    
    while(B_array[lenB] != 0){
        lenB++;
    }
    
    for(int i = 0; i < lenA; i++){
        for(int j = 0; j < lenB; j++){
            
            if(B_array[j] == A_array[i]){
                return B_array[j];
            }
        }
    }
    
    int max = 0;
    
    for(int i = 0; i < lenA; i++){
        if(A_array[i] > max){
            max = A_array[i];
        }
    }
    
    for(int j = 0; j < lenA; j++){
        if(B_array[j] > max){
            max = B_array[j];
        }
    }
    
    return max;
}",0
dsaw164,1697347476,4,"int NextVine(int number){
    int sum = 0;
    int place = 10;
    
    while(number / (place / 10) != 0){
        sum += (number % place) / (place / 10);
        number -= number % place;
        place = place * 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int growthA = seedA;
    int growthB = seedB;
    
    if(growthA > growthB){
        for(int i = 0; i <= days; i++){
            
            if(i != 0){
                growthA += NextVine(growthA);
            }
            
            
            growthB = seedB;
            
            for(int j = 1; j <= days; j++){
                growthB = growthB + NextVine(growthB);
                
                if(growthA == growthB){
                    return growthA;
                }
                else if(i == days && j == days){
                    if(growthA > growthB){
                        return growthA;
                    }
                    else{
                        return growthB;
                    }
                }
            }
        }
    }
    
     if(growthB > growthA){
        for(int i = 0; i <= days; i++){
            
            if(i != 0){
                growthB += NextVine(growthB);
            }
            
            
            growthA = seedA;
            
            for(int j = 1; j <= days; j++){
                growthA = growthA + NextVine(growthA);
                
                if(growthB == growthA){
                    return growthA;
                }
                else if(i == days && j == days){
                    if(growthB > growthA){
                        return growthB;
                    }
                    else{
                        return growthA;
                    }
                }
            }
        }
    }
    
    
}",0
dsaw164,1697347590,5,"int NextVine(int number){
    int sum = 0;
    int place = 10;
    
    while(number / (place / 10) != 0){
        sum += (number % place) / (place / 10);
        number -= number % place;
        place = place * 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int growthA = seedA;
    int growthB = seedB;
    
    if(growthA > growthB){
        for(int i = 0; i <= days; i++){
            
            if(i != 0){
                growthA += NextVine(growthA);
            }
        
            growthB = seedB;
            
            for(int j = 1; j <= days; j++){
                growthB = growthB + NextVine(growthB);
                
                if(growthA == growthB){
                    return growthA;
                }
                else if(i == days && j == days){
                    if(growthA > growthB){
                        return growthA;
                    }
                    else{
                        return growthB;
                    }
                }
            }
        }
    }
    
    if(growthB > growthA){
        for(int i = 0; i <= days; i++){
            
            if(i != 0){
                growthB += NextVine(growthB);
            }
            
            
            growthA = seedA;
            
            for(int j = 1; j <= days; j++){
                growthA = growthA + NextVine(growthA);
                
                if(growthB == growthA){
                    return growthA;
                }
                else if(i == days && j == days){
                    if(growthB > growthA){
                        return growthB;
                    }
                    else{
                        return growthA;
                    }
                }
            }
        }
    }
    
    
}",0
dsaw164,1697347749,6,"int NextVine(int number){
    int sum = 0;
    int place = 10;
    
    while(number / (place / 10) != 0){
        sum += (number % place) / (place / 10);
        number -= number % place;
        place = place * 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int growthA = seedA;
    int growthB = seedB;
    
    if(growthA > growthB){
        for(int i = 0; i <= days; i++){
            
            if(i != 0){
                growthA += NextVine(growthA);
            }
        
            growthB = seedB;
            
            for(int j = 1; j <= days; j++){
                growthB = growthB + NextVine(growthB);
                
                if(growthA == growthB){
                    return growthA;
                }
                else if(i == days && j == days){
                    if(growthA > growthB){
                        return growthA;
                    }
                    else{
                        return growthB;
                    }
                }
            }
        }
    }
    
    if(growthB > growthA){
        for(int i = 0; i <= days; i++){
            
            if(i != 0){
                growthB += NextVine(growthB);
            }
            
            
            growthA = seedA;
            
            for(int j = 1; j <= days; j++){
                growthA = growthA + NextVine(growthA);
                
                if(growthB == growthA){
                    return growthA;
                }
                else if(i == days && j == days){
                    if(growthB > growthA){
                        return growthB;
                    }
                    else{
                        return growthA;
                    }
                }
            }
        }
    }
    
    return 0;
}",1
dsin316,1697453659,1,"int TallestVine(int seedA, int seedB, int days) {
    int digits;
    int sum;
    int i;
    int j;

    int digits1;
    int sum1;

    int tempA;
    int tempB;
    int tempB1;
    int tempA1;

    tempA = seedA;
    tempA1 = seedA;
    tempB = seedB;
    tempB1 = seedB;

    for(i = 0; i < days; i++ ){

        tempB = seedB;
        tempB1 = seedB;

        for(j = 0; j < days; j++){

            while(tempB>0){
                digits = tempB % 10;
                sum += digits;
                tempB /= 10;
            }

            tempB1 += sum;
            sum = 0;
            tempB = tempB1;
            digits = 0;

            if(tempA1 == tempB1){
                return tempA1;
            }
        }

        while(tempA>0){
                digits1 = tempA % 10;
                sum1 += digits1;
                tempA /= 10;
            }

        tempA1 += sum1;
        sum1 = 0;
        digits1 = 0;
        tempA = tempA1;

        if(tempA1 == tempB1){
            return tempA1;
        }
    }

    if(tempA1 > tempB1){
        return tempA1;
    }
    else if(tempA1 < tempB1){
        return tempB1;
    }
}",0
dwu617,1697344567,1,"int TallestVine(int seedA, int seedB, int days)
{
	int i, j, temp;
	temp = seedB;

	for (i = 0; i < days; i++) {
		seedA = seedA + ((seedA / 100) + ((seedA % 100) / 10) + ((seedA % 100) % 10));
		for (j = 0; j < days; j++) {
			seedB = seedB + ((seedB / 100) + ((seedB % 100) / 10) + ((seedB % 100) % 10));
			if (seedB == seedA) {
				return seedB;
			}
		}
		seedB = temp;
	}

	for (i = 0; i < days; i++) {
		seedB = seedB + ((seedB / 100) + ((seedB % 100) / 10) + ((seedB % 100) % 10));

	}

	if (seedA > seedB) {
		return seedA;
	} else {
		return seedB;
	}
}",0
dwu617,1697346501,2,"int TallestVine(int seedA, int seedB, int days)
{
	int i, j, tempB;
	tempB = seedB;


	for (i = 0; i < days; i++) {
		seedA = seedA + ((seedA / 1000) + ((seedA % 1000) / 100) + (((seedA % 1000) % 100) / 10) +
			(((seedA % 1000) % 100) % 10));
		for (j = 0; j < days; j++) {
			seedB = seedB + ((seedB / 1000) + ((seedB % 1000) / 100) + (((seedB % 1000) % 100) / 10) +
				(((seedB % 1000) % 100) % 10));
			if (seedB == seedA) {
				return seedB;
			}
		}
		seedB = tempB;
	}

	seedB = tempB;

	for (i = 0; i < days; i++) {
		seedB = seedB + ((seedB / 1000) + ((seedB % 1000) / 100) + (((seedB % 1000) % 100) / 10) +
			(((seedB % 1000) % 100) % 10));
	}

	if (seedA > seedB) {
		return seedA;
	} else {
		return seedB;
	}
}",0
dwu617,1697347576,3,"int Growth(int height)
{
	int growth = 0;

	while (height > 0) {
		growth += height % 10;
		height = height / 10;
	}

	return growth;
}

int TallestVine(int seedA, int seedB, int days)
{
	int i, j, tempB;
	tempB = seedB;


	for (i = 0; i < days; i++) {
		seedA += Growth(seedA);
		for (j = 0; j < days; j++) {
			seedB += Growth(seedB);
			if (seedB == seedA) {
				return seedB;
			}
		}
		seedB = tempB;
	}

	seedB = tempB;

	for (i = 0; i < days; i++) {
		seedB += Growth(seedB);
	}

	if (seedA > seedB) {
		return seedA;
	} else {
		return seedB;
	}
}",1
dyu343,1697000877,1,"int GrowthIncrease(int seed) // calculates the next growth increment.
{
	// getting sum of dights.
	int sum = 0;

	while (seed > 0)
	{
		int digit = seed % 10; // gets the last digit.
		sum += digit;
		seed /= 10; // divides by 10, and truncates the decimal.
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int temp = seedB;
	int temp1 = seedA;
	for (int i = 0; i < days; i++)
	{
		// we compare all of seedA's values with seedB until we find a match or not.
		for (int j = 0; j <= days; j++)
		{
			if (seedB == seedA)
			{
				return seedB; // at this point, they are the same size.
			}
			seedB += GrowthIncrease(seedB);
		}
		seedA += GrowthIncrease(seedA);
		seedB = temp; // resets seedB to its initial value.
	}

	seedA = temp1;
	seedB = temp;

	// grow under normal conditions because they DONT match >:(
	for (int i = 0; i < days; i++)
	{
		seedB += GrowthIncrease(seedB);
		seedA += GrowthIncrease(seedA);
	}

	if (seedA > seedB)
	{
		return seedA;
	}

	return seedB;

}
",0
dyu343,1697000973,2,"int GrowthIncrease(int seed) // calculates the next growth increment.
{
	// getting sum of dights.
	int sum = 0;

	while (seed > 0)
	{
		int digit = seed % 10; // gets the last digit.
		sum += digit;
		seed /= 10; // divides by 10, and truncates the decimal.
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int temp = seedB;
	int temp1 = seedA;
	for (int i = 0; i <= days; i++)
	{
		// we compare all of seedA's values with seedB until we find a match or not.
		for (int j = 0; j <= days; j++)
		{
			if (seedB == seedA)
			{
				return seedB; // at this point, they are the same size.
			}
			seedB += GrowthIncrease(seedB);
		}
		seedA += GrowthIncrease(seedA);
		seedB = temp; // resets seedB to its initial value.
	}

	seedA = temp1;
	seedB = temp;

	// grow under normal conditions because they DONT match >:(
	for (int i = 0; i < days; i++)
	{
		seedB += GrowthIncrease(seedB);
		seedA += GrowthIncrease(seedA);
	}

	if (seedA > seedB)
	{
		return seedA;
	}

	return seedB;

}",1
eara128,1697273115,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int TallestVine(int seedA, int seedB, int days){

    int lengthcounterA[days];
    int vinelengthA = seedA;
    lengthcounterA[0] = seedA;


    for(int i = 0; i < days; i++){
        int numA = seedA;
        int sumA = 0;
        int remainder = 0;
        // calculating the sum of the digits in the number 
        while(numA != 0){
            remainder = numA % 10;
            sumA = sumA + remainder;
            numA = numA / 10;
        }

        vinelengthA += sumA;
        lengthcounterA[i] = vinelengthA;
        seedA = vinelengthA;
    }

    int lengthcounterB[days];
    int vinelengthB = seedB;
    lengthcounterB[0] = seedB;

    for(int i = 0; i < days; i++){
        vinelengthB = seedB;
        int numB = seedB;
        int sumB = 0;

        while(numB!= 0){
            int remainder = numB % 10;
            sumB = sumB + remainder;
            numB = numB / 10;
        }

        vinelengthB += sumB;
        lengthcounterB[i] = vinelengthB;
        seedB = vinelengthB;
    }
    // checking for branching vines 
    for (int i = 0; i < days; i++){
        for (int j = 0; j < days; j++){
            if (lengthcounterA[i] == lengthcounterB[j]){
                return lengthcounterA[i];
            }
        }
    }
    for (int i = 0; i < days; i++){
        printf(""%d "", lengthcounterB[i]);
    }
    // if there are no branching vines, just return the larger of the two vines
    if (vinelengthA > vinelengthB || vinelengthA == vinelengthB){
        return vinelengthA;
    } else if (vinelengthB > vinelengthA){
        return vinelengthB;
    }
    return 0;
}

int main(void){

    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));
}",0
eara128,1697273137,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int TallestVine(int seedA, int seedB, int days){

    int lengthcounterA[days];
    int vinelengthA = seedA;
    lengthcounterA[0] = seedA;


    for(int i = 0; i < days; i++){
        int numA = seedA;
        int sumA = 0;
        int remainder = 0;
        // calculating the sum of the digits in the number 
        while(numA != 0){
            remainder = numA % 10;
            sumA = sumA + remainder;
            numA = numA / 10;
        }

        vinelengthA += sumA;
        lengthcounterA[i] = vinelengthA;
        seedA = vinelengthA;
    }

    int lengthcounterB[days];
    int vinelengthB = seedB;
    lengthcounterB[0] = seedB;

    for(int i = 0; i < days; i++){
        vinelengthB = seedB;
        int numB = seedB;
        int sumB = 0;

        while(numB!= 0){
            int remainder = numB % 10;
            sumB = sumB + remainder;
            numB = numB / 10;
        }

        vinelengthB += sumB;
        lengthcounterB[i] = vinelengthB;
        seedB = vinelengthB;
    }
    // checking for branching vines 
    for (int i = 0; i < days; i++){
        for (int j = 0; j < days; j++){
            if (lengthcounterA[i] == lengthcounterB[j]){
                return lengthcounterA[i];
            }
        }
    }
    for (int i = 0; i < days; i++){
        printf(""%d "", lengthcounterB[i]);
    }
    // if there are no branching vines, just return the larger of the two vines
    if (vinelengthA > vinelengthB || vinelengthA == vinelengthB){
        return vinelengthA;
    } else if (vinelengthB > vinelengthA){
        return vinelengthB;
    }
    return 0;
}",0
eara128,1697273244,3,"int TallestVine(int seedA, int seedB, int days){

    int lengthcounterA[days];
    int vinelengthA = seedA;
    lengthcounterA[0] = seedA;


    for(int i = 0; i < days; i++){
        int numA = seedA;
        int sumA = 0;
        int remainder = 0;
        // calculating the sum of the digits in the number 
        while(numA != 0){
            remainder = numA % 10;
            sumA = sumA + remainder;
            numA = numA / 10;
        }

        vinelengthA += sumA;
        lengthcounterA[i] = vinelengthA;
        seedA = vinelengthA;
    }

    int lengthcounterB[days];
    int vinelengthB = seedB;
    lengthcounterB[0] = seedB;

    for(int i = 0; i < days; i++){
        vinelengthB = seedB;
        int numB = seedB;
        int sumB = 0;

        while(numB!= 0){
            int remainder = numB % 10;
            sumB = sumB + remainder;
            numB = numB / 10;
        }

        vinelengthB += sumB;
        lengthcounterB[i] = vinelengthB;
        seedB = vinelengthB;
    }
    // checking for branching vines 
    for (int i = 0; i < days; i++){
        for (int j = 0; j < days; j++){
            if (lengthcounterA[i] == lengthcounterB[j]){
                return lengthcounterA[i];
            }
        }
    }
    // if there are no branching vines, just return the larger of the two vines
    if (vinelengthA > vinelengthB || vinelengthA == vinelengthB){
        return vinelengthA;
    } else if (vinelengthB > vinelengthA){
        return vinelengthB;
    }
    return 0;
}",1
echa931,1697367971,1,"int TallestVine(int seedA, int seedB, int days) {
	int logic=1;
	int sumA = OneVineA(seedA, seedB, days, days, &logic);
	int sumB = OneVineB(seedA, seedB, days);
	if (logic == 0) {
		return sumA;
	} else if (sumB > sumA) {
		return sumB;
	} else {
		return sumA;
	}
}

int OneVineA(int seedA, int seedB, int ini_days, int days, int* logic) {
	if (days == 0) {
		return seedA;
	}
	else if (seedA == OneVineB(seedA, seedB, ini_days)) {
		*logic = 0;
		return seedA;
	}

	return OneVineA(seedA + SumOfNum(seedA), seedB, ini_days, days - 1, &*logic);
}
int OneVineB(int valueA, int seedB, int days) {
	if (days == 0) {
		return seedB;
	} else if (valueA == seedB) {
		return seedB;
	}
	return OneVineB(valueA, seedB + SumOfNum(seedB), days - 1);
}
int SumOfNum(int value) {
	int sum = 0;
	while (value != 0) {
		sum += value % 10;
		value /= 10;
	}
	return sum;
}",0
echa931,1697368165,2,"int TallestVine(int seedA, int seedB, int days);
int OneVineA(int seedA, int seedB, int ini_days, int days, int* logic);
int OneVineB(int valueA, int seedB, int days);
int SumOfNum(int value);

int TallestVine(int seedA, int seedB, int days) {
	int logic=1;
	int sumA = OneVineA(seedA, seedB, days, days, &logic);
	int sumB = OneVineB(seedA, seedB, days);
	if (logic == 0) {
		return sumA;
	} else if (sumB > sumA) {
		return sumB;
	} else {
		return sumA;
	}
}

int OneVineA(int seedA, int seedB, int ini_days, int days, int* logic) {
	if (days == 0) {
		return seedA;
	}
	else if (seedA == OneVineB(seedA, seedB, ini_days)) {
		*logic = 0;
		return seedA;
	}

	return OneVineA(seedA + SumOfNum(seedA), seedB, ini_days, days - 1, &*logic);
}
int OneVineB(int valueA, int seedB, int days) {
	if (days == 0) {
		return seedB;
	} else if (valueA == seedB) {
		return seedB;
	}
	return OneVineB(valueA, seedB + SumOfNum(seedB), days - 1);
}
int SumOfNum(int value) {
	int sum = 0;
	while (value != 0) {
		sum += value % 10;
		value /= 10;
	}
	return sum;
}",0
echa931,1697368840,3,"int TallestVine(int seedA, int seedB, int days);
int OneVineA(int seedA, int seedB, int ini_days, int days, int* logic);
int OneVineB(int valueA, int seedB, int days);
int SumOfNum(int value);

int TallestVine(int seedA, int seedB, int days) {
	int logic=1;
	int sumA = OneVineA(seedA, seedB, days, days, &logic);
	int sumB = OneVineB(seedA, seedB, days);
	if (logic == 0) {
		return sumA;
	} else if (sumB > sumA) {
		return sumB;
	} else {
		return sumA;
	}
}

int OneVineA(int seedA, int seedB, int ini_days, int days, int* logic) {
	if (seedA == OneVineB(seedA, seedB, ini_days)) {
		*logic = 0;
		return seedA;
	}
	else if (days == 0) {
		return seedA;
	}

	return OneVineA(seedA + SumOfNum(seedA), seedB, ini_days, days - 1, &*logic);
}
int OneVineB(int valueA, int seedB, int days) {
	if (days == 0) {
		return seedB;
	} else if (valueA == seedB) {
		return seedB;
	}
	return OneVineB(valueA, seedB + SumOfNum(seedB), days - 1);
}
int SumOfNum(int value) {
	int sum = 0;
	while (value != 0) {
		sum += value % 10;
		value /= 10;
	}
	return sum;
}",1
ehua682,1697453181,1,"#include <stdio.h>

int Sum(int seed);

int TallestVine(int seedA, int seedB, int days)
{
    int Aarray[1]={0};
    int Barray[1]={0};
    
    
    int max;
    int copyB = seedB;
    
    
    for(int i=0; i<days; i++)
    {
        
        Aarray[0] = Sum(seedA);
        seedA = Aarray[0];
        
        
        seedB = copyB;
        for(int j=0; j<days; j++)
        
        {
            Barray[0]= Sum(seedB);
            seedB = Barray[0];
            
            if(Aarray[0]==Barray[0])
            
            {
                max = Aarray[0];
                return max;
            }
            else
            {
                if(Aarray[0]>Barray[0])
                {
                    max = Aarray[0];
                } 
                else if(Barray[0] > Aarray[0])
                {
                    max = Barray[0];
                }
            }
        }
    }

  return max;                   
}
    

int Sum(int seed)
{
    int di,Sum = 0;
    int copy = seed;
    while(copy>0)
    {
        
        di= copy%10;
        Sum = Sum+di;
        copy=copy/10;
    }
    seed = seed+Sum;
    
    return seed;
}
    
    int main(void)
    s
    
    {
        printf(""Tallest Vine = %d\n"", TallestVine(501,491,8));
        printf(""Tallest Vine = %d\n"", TallestVine(429,501,8));
        printf(""Tallest Vine = %d\n"", TallestVine(501,399,7));
        printf(""Tallest Vine = %d\n"", TallestVine(501,399,8));
        printf(""Tallest Vine = %d\n"", TallestVine(480,481,5000));
        printf(""Tallest Vine = %d\n"", TallestVine(20,1000,72));
        printf(""Tallest Vine = %d\n"", TallestVine(20,1000,73));
              
              
     return 0;
    
    
    }
              

    

",0
ehua682,1697453290,2,"#include <stdio.h>

int Sum(int seed);

int TallestVine(int seedA, int seedB, int days)
{
    int Aarray[1]={0};
    int Barray[1]={0};
    
    
    int max;
    int copyB = seedB;
    
    
    for(int i=0; i<days; i++)
    {
        
        Aarray[0] = Sum(seedA);
        seedA = Aarray[0];
        
        
        seedB = copyB;
        for(int j=0; j<days; j++)
        
        {
            Barray[0]= Sum(seedB);
            seedB = Barray[0];
            
            if(Aarray[0]==Barray[0])
            
            {
                max = Aarray[0];
                return max;
            }
            else
            {
                if(Aarray[0]>Barray[0])
                {
                    max = Aarray[0];
                } 
                else if(Barray[0] > Aarray[0])
                {
                    max = Barray[0];
                }
            }
        }
    }

  return max;                   
}
    

int Sum(int seed)
{
    int di,Sum = 0;
    int copy = seed;
    while(copy>0)
    {
        
        di= copy%10;
        Sum = Sum+di;
        copy=copy/10;
    }
    seed = seed+Sum;
    
    return seed;
}
    
  
     return 0;
    
    
    }
              

    

",0
ehua682,1697453323,3,"#include <stdio.h>

int Sum(int seed);

int TallestVine(int seedA, int seedB, int days)
{
    int Aarray[1]={0};
    int Barray[1]={0};
    
    
    int max;
    int copyB = seedB;
    
    
    for(int i=0; i<days; i++)
    {
        
        Aarray[0] = Sum(seedA);
        seedA = Aarray[0];
        
        
        seedB = copyB;
        for(int j=0; j<days; j++)
        
        {
            Barray[0]= Sum(seedB);
            seedB = Barray[0];
            
            if(Aarray[0]==Barray[0])
            
            {
                max = Aarray[0];
                return max;
            }
            else
            {
                if(Aarray[0]>Barray[0])
                {
                    max = Aarray[0];
                } 
                else if(Barray[0] > Aarray[0])
                {
                    max = Barray[0];
                }
            }
        }
    }

  return max;                   
}
    

int Sum(int seed)
{
    int di,Sum = 0;
    int copy = seed;
    while(copy>0)
    {
        
        di= copy%10;
        Sum = Sum+di;
        copy=copy/10;
    }
    seed = seed+Sum;
    
    return seed;

    
  
     return 0;
    
    
    }
              

    

",1
ekmu195,1697191561,1,"int TallestVine(int seedA, int seedB, int days) 
{
    int i;
    int vineA = seedA;
    int vineB = seedB;
    int tallestvine;
    int j;
    int hundreds;
    int tens;
    int ones;

	for (i = 0; i < days; i++) {

        hundreds = vineA / 100;
        tens = (vineA - (hundreds * 100)) / 10;
        ones = (vineA - (hundreds * 100) - (tens * 10));

        vineA = vineA + hundreds + tens + ones;

        vineB = seedB;

        for (j = 0; j < days; j++) 
        {   
            hundreds = vineB / 100;
            tens = (vineB - (hundreds * 100)) / 10;
            ones = (vineB - (hundreds * 100) - (tens * 10));

            vineB = vineB + hundreds + tens + ones;

            if (vineA == vineB) {
                tallestvine = vineA;
            return tallestvine;
        }

        }

    }

    if (vineA > vineB) {
        tallestvine = vineA;
    } else if(vineB > vineA) {
        tallestvine = vineB;
    }

    return tallestvine;

}",0
ekmu195,1697197983,2,"int TallestVine(int seedA, int seedB, int days) 
{
    int i;
    int vineA = seedA;
    int vineB = seedB;
    int tallestvine;
    int j;
    int thousands;
    int hundreds;
    int tens;
    int ones;

	for (i = 0; i < days; i++) {

        thousands = vineA / 1000;
        hundreds = (vineA - (thousands * 1000)) / 100;
        tens = (vineA - (thousands * 1000) - (hundreds * 100)) / 10;
        ones = (vineA - (thousands * 1000) - (hundreds * 100) - (tens * 10));

        vineA = vineA + thousands + hundreds + tens + ones;

        vineB = seedB;

        for (j = 0; j < days; j++) 
        {   
            thousands = vineB / 1000;
            hundreds = (vineB - (thousands * 1000)) / 100;
            tens = (vineB - (thousands * 1000) - (hundreds * 100)) / 10;
            ones = (vineB - (thousands * 1000) - (hundreds * 100) - (tens * 10));

            vineB = vineB + thousands + hundreds + tens + ones;

            if (vineA == vineB) {
                tallestvine = vineA;
            return tallestvine;
        }

        }

    }

    if (vineA > vineB) {
        tallestvine = vineA;
    } else if(vineB > vineA) {
        tallestvine = vineB;
    }

    return tallestvine;

}",0
ekmu195,1697269159,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int TallestVine(int seedA, int seedB, int days) 
{
    int i;
    int vineA = seedA;
    int vineB = seedB;
    int tallestvine;
    int j;
    int remainders;
    int sum;
    int digit;
    int divisor = 10;

	for (i = 0; i < days; i++) {
    
        digit = vineA % 10;
        sum = digit;
        divisor = 10;
        remainders = vineA - digit;
        
        while (remainders != 0) {
            divisor *= 10;
            digit = (remainders % divisor) / (divisor / 10);
            sum += digit;
            remainders = remainders - (digit * divisor / 10);
            
        }

        vineA = vineA + sum;

        vineB = seedB;

        for (j = 0; j < days; j++) 
        {   
            digit = vineB % 10;
            sum = digit;
            divisor = 10;
            remainders = vineB - digit;
        
            while (remainders != 0) {
                divisor *= 10;
                digit = (remainders % divisor) / (divisor / 10);
                sum += digit;
                remainders = remainders - (digit * divisor / 10);
                
            }

            vineB = vineB + sum;

            if (vineA == vineB) {
                tallestvine = vineA;
            return tallestvine;
        }

        }

    }

    if (vineA > vineB) {
        tallestvine = vineA;
    } else if(vineB > vineA) {
        tallestvine = vineB;
    }

    return tallestvine;

}
",1
elau447,1697427921,1,"int TallestVine(int seedA, int seedB, int days) {
    int number, a;
    int digit = 0;
    int sum = 0;
    int A = seedA;
    int B = seedB;
    int array1[100] = { 0 };
    int array2[100] = { 0 };
    array1[0] = A;
    array2[0] = B;

    for (int i = 1; i <= days; i++) {

        number = A;
        sum = 0;

        while (number > 0) {
            digit = number % 10;
            sum += digit; 
            number /= 10; 
        }
        A += sum;

        number = B;
        sum = 0;

        while (number > 0) {
            digit = number % 10;
            sum += digit;
            number /= 10;
        }
        B += sum;
        array1[i] = A;
        array2[i] = B;
        
    }
    for (int i = 0; i <= days; i++) {

        for (int j = 0; j <= days; j++) {

            if (array1[i] == array2[j]) {
                a = array1[i];
                return a;
            }
        }
    }
    if (A > B) {
        a = A;
    }
    else {
        a = B;
    }

	return a;
}",0
elau447,1697427956,2,"int TallestVine(int seedA, int seedB, int days) {
    int number, a;
    int digit = 0;
    int sum = 0;
    int A = seedA;
    int B = seedB;
    int array1[10000] = { 0 };
    int array2[10000] = { 0 };
    array1[0] = A;
    array2[0] = B;

    for (int i = 1; i <= days; i++) {

        number = A;
        sum = 0;

        while (number > 0) {
            digit = number % 10;
            sum += digit; 
            number /= 10; 
        }
        A += sum;

        number = B;
        sum = 0;

        while (number > 0) {
            digit = number % 10;
            sum += digit;
            number /= 10;
        }
        B += sum;
        array1[i] = A;
        array2[i] = B;
        
    }
    for (int i = 0; i <= days; i++) {

        for (int j = 0; j <= days; j++) {

            if (array1[i] == array2[j]) {
                a = array1[i];
                return a;
            }
        }
    }
    if (A > B) {
        a = A;
    }
    else {
        a = B;
    }

	return a;
}",1
elia955,1697447732,1,"int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = SumOfDigits(heightA);
        int sumB = SumOfDigits(heightB);

        if (heightA == heightB) {
            return heightA;
        }

        heightA += sumA;
        heightB += sumB;
    }

    return (heightA > heightB) ? heightA : heightB;
}",0
ely207,1697180631,1,"#include <stdio.h>

int SeedGrowth(int seed)
{
	int Growth;
	Growth = (seed % 10) + (((seed - (seed % 10)) % 100)/10) + (((seed - (seed % 100)) % 1000)/100);
	return Growth;
}



// Calculate the Tallest point of the vine
int TallestVine(int seedA, int seedB, int days)
{
	int Adaycount = 0;
	int Bdaycount = 0;
	int Growth;
	while (Adaycount < days || Bdaycount < days)
	{
		// Growing Vines if one is finished growing
		if (Adaycount == days && Bdaycount < days)
		{
			Growth = SeedGrowth(seedB);
			seedB += Growth;
			Bdaycount++;
		}
		else if (Bdaycount == days && Adaycount < days)
		{
			Growth = SeedGrowth(seedA);
			seedA += Growth;
			Adaycount++;
		}
		else
		{

			// Growing Vines normally
			if (seedA < seedB && Adaycount < days)
			{
				Growth = SeedGrowth(seedA);
				seedA += Growth;
				Adaycount++;
			}
			else if (seedB < seedA && Bdaycount < days)
			{
				Growth = SeedGrowth(seedB);
				seedB += Growth;
				Bdaycount++;
			}
		}

		// Check for any identical points
		if (seedA == seedB)
		{
			return seedA;
		}

	}
	
	if (seedA > seedB)
	{
		return seedA;
	}
	else
	{
		return seedB;
	}
}",0
ely207,1697181093,2,"#include <stdio.h>

int SeedGrowth(int seed)
{
	int Growth;
	Growth = (seed % 10) + (((seed - (seed % 10)) % 100)/10) + (((seed - (seed % 100)) % 1000)/100) + (((seed - (seed % 1000))%10000)/1000) + (((seed - (seed % 10000)) % 100000) / 10000);
	return Growth;
}



// Calculate the Tallest point of the vine
int TallestVine(int seedA, int seedB, int days)
{
	int Adaycount = 0;
	int Bdaycount = 0;
	int Growth;
	while (Adaycount < days || Bdaycount < days)
	{
		// Growing vines (if one has grown to max)
		if (Adaycount == days && Bdaycount < days)
		{
			Growth = SeedGrowth(seedB);
			seedB += Growth;
			Bdaycount++;

		}
		else if (Bdaycount == days && Adaycount < days)
		{
			Growth = SeedGrowth(seedA);
			seedA += Growth;
			Adaycount++;

		}
		else
		{

			// Growing Vines
			if (seedA < seedB && Adaycount < days)
			{
				Growth = SeedGrowth(seedA);
				seedA += Growth;
				Adaycount++;

			}
			else if (seedB < seedA && Bdaycount < days)
			{
				Growth = SeedGrowth(seedB);
				seedB += Growth;
				Bdaycount++;

			}
		}

		// Check for any identical points
		if (seedA == seedB)
		{
			return seedA;
		}

	}
	
	if (seedA > seedB)
	{
		return seedA;
	}
	else
	{
		return seedB;
	}
}",0
ely207,1697181213,3,"#include <stdio.h>

int SeedGrowth(int seed)
{
	int Growth;
	Growth = (seed % 10) + (((seed - (seed % 10)) % 100)/10) + (((seed - (seed % 100)) % 1000)/100) + (((seed - (seed % 1000))%10000)/1000) + (((seed - (seed % 10000)) % 100000) / 10000) + (((seed - (seed % 100000)) % 1000000) / 100000);
	return Growth;
}



// Calculate the Tallest point of the vine
int TallestVine(int seedA, int seedB, int days)
{
	int Adaycount = 0;
	int Bdaycount = 0;
	int Growth;
	while (Adaycount < days || Bdaycount < days)
	{
		// Growing vines (if one has grown to max)
		if (Adaycount == days && Bdaycount < days)
		{
			Growth = SeedGrowth(seedB);
			seedB += Growth;
			Bdaycount++;

		}
		else if (Bdaycount == days && Adaycount < days)
		{
			Growth = SeedGrowth(seedA);
			seedA += Growth;
			Adaycount++;

		}
		else
		{

			// Growing Vines
			if (seedA < seedB && Adaycount < days)
			{
				Growth = SeedGrowth(seedA);
				seedA += Growth;
				Adaycount++;

			}
			else if (seedB < seedA && Bdaycount < days)
			{
				Growth = SeedGrowth(seedB);
				seedB += Growth;
				Bdaycount++;

			}
		}

		// Check for any identical points
		if (seedA == seedB)
		{
			return seedA;
		}

	}
	
	if (seedA > seedB)
	{
		return seedA;
	}
	else
	{
		return seedB;
	}
}",1
ema340,1697172867,1,"int SeedGrowth(int seed) 
{
    int sum = 0;
    while (seed != 0) {
        sum += seed % 10;
        seed /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
    int i = 0;
    int j = 0;
    int vineA = seedA;
    int vineB = seedB;

    while (i < days) {
        vineA += SeedGrowth(vineA); 

        vineB = seedB;
        j = 0;
        while (j < days) {
            vineB += SeedGrowth(vineB);
            if (vineA == vineB) {
                return vineA;
            }
            j++;
        }

        i++;
    }

    if (vineA > vineB) {
        return vineA;
    } else {
        return vineB;
    }
}",1
eqiu349,1697370791,1,"int i, j;
int n, sum = 0, m, a;


int TallestVine(int seedA, int seedB, int days) {
	for (i = 0; i < days; i++) {
		n = seedB;
		sum = 0;
		m = 0;
		while (n > 0)
		{
			m = n % 10;
			sum = sum + m;
			n = n / 10;
		}
		seedB = seedB + sum;

		a = seedA;
		for (j = 0; j < days; j++) {
			n = a;
			sum = 0;
			m = 0;
			while (n > 0)
			{
				m = n % 10;
				sum = sum + m;
				n = n / 10;
			}
			a = a + sum;
			if (a == seedB) {
				return a;
			}
		}
	}
	if (a > seedB) {
		return a;
	}
	else if (seedB > a) {
		return seedB;
	}
}",0
eqiu349,1697370879,2,"int i, j;
int n, sum = 0, m, a;


int TallestVine(int seedA, int seedB, int days) {
	for (i = 0; i < days; i++) {
		n = seedB;
		sum = 0;
		m = 0;
		while (n > 0)
		{
			m = n % 10;
			sum = sum + m;
			n = n / 10;
		}
		seedB = seedB + sum;

		a = seedA;
		for (j = 0; j < days; j++) {
			n = a;
			sum = 0;
			m = 0;
			while (n > 0)
			{
				m = n % 10;
				sum = sum + m;
				n = n / 10;
			}
			a = a + sum;
			if (a == seedB) {
				return a;
			}
		}
	}
	if (a > seedB) {
		return a;
	}
	else {
		return seedB;
	}
}",1
ewil853,1697318783,1,"int TallestVine (int seedA,int seedB,int days){
   int seed1[100] = {0};
   int seed2[100] = {0};
    int i,j;
    seed1[0] = seedA;
    seed2[0] = seedB;
    for(i=1;i<=days;i++){

            seed1[i] = seed1[i-1] + (seed1[i-1]%10)+((seed1[i-1]/10)%10)+((seed1[i-1]/10)/10);  
            seed2[i] = seed2[i-1] + (seed2[i-1]%10)+((seed2[i-1]/10)%10)+((seed2[i-1]/10)/10);
        }

    for(i=0;i<=days;i++){
        for(j=0;j<=days;j++){
            if (seed1[i] == seed2[j])
            return seed1[i];
        }
    }
    if (seed1[days-1]>=seed2[days-1]){
        return seed1[days];
    }
    else {
        return seed2[days];
    }

    return 0;

}",0
ewil853,1697319434,2,"int TallestVine (int seedA,int seedB,int days){
   int seed1[100] = {0};
   int seed2[100] = {0};
    int i,j;
    seed1[0] = seedA;
    seed2[0] = seedB;
    for(i=1;i<=days;i++){
        if (seed1[i-1]>999){
            seed1[i] = seed1[i-1] + (seed1[i-1]%10)+((seed1[i-1]/10)%10)+(((seed1[i-1]/10)/10)%10) +(seed1[i-1]/1000); 
        }
        else{
            seed1[i] = seed1[i-1] + (seed1[i-1]%10)+((seed1[i-1]/10)%10)+((seed1[i-1]/10)/10); 
        }
        
        if(seed2[i-1]>999) {
                seed2[i] = seed2[i-1] + (seed2[i-1]%10)+((seed2[i-1]/10)%10)+(((seed2[i-1]/10)/10)%10) +(seed2[i-1]/1000);
            }
        else{
                seed2[i] = seed2[i-1] + (seed2[i-1]%10)+((seed2[i-1]/10)%10)+((seed2[i-1]/10)/10);
            }
        }

    for(i=0;i<=days;i++){
        for(j=0;j<=days;j++){
            if (seed1[i] == seed2[j])
            return seed1[i];
        }
    }
    if (seed1[days-1]>=seed2[days-1]){
        return seed1[days];
    }
    else {
        return seed2[days];
    }

    return 0;

}",0
ewil853,1697367241,3,"int TallestVine (int seedA,int seedB,int days){
int seed1,seed2;
    int i,j,intermediate,again;
    again = seedB;
    int sum=0;

         for(i=0;i<days;i++){
            seed1 = seedA;
          while(seed1>0){
                intermediate = seed1%10;
                sum = sum +intermediate;
                seed1 = seed1/10;
            }
            seedA = seedA + sum;
            sum =0;
            seedB = again;
        for(j=0;j<days;j++){
            seed2 = seedB;
            while(seed2>0){
                intermediate = seed2%10;
                sum = sum +intermediate;
                seed2 = seed2/10;
            }
            seedB = seedB + sum;
            sum=0;

            if (seedA == seedB)
            return seedA;
        
        }
    }

    if (seedA>seedB){
        return seedA;
    }
    else {
        return seedB;
    }

    return 0;

}",1
exu922,1697451670,1,"#include <stdio.h>
#include <stdbool.h>


int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

bool hasReached(int value, int seed, int days) {
    while (days-- > 0) {
        if (seed == value) {
            return true;
        }
        seed += sumOfDigits(seed);
    }
    return false;
}

int TallestVine(int seedA, int seedB, int days) {
    int originalDays = days;
    while (days > 0) {
        
        seedA += sumOfDigits(seedA);
        
        if (hasReached(seedA, seedB, originalDays - days + 1)) {
            return seedA;
        }

       
        seedB += sumOfDigits(seedB);
       
        if (hasReached(seedB, seedA, originalDays - days + 1)) {
            return seedB;
        }

        days--;
    }

    return seedA > seedB ? seedA : seedB;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

    return 0;
}
",0
exu922,1697451687,2,"#include <stdio.h>
#include <stdbool.h>


int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

bool hasReached(int value, int seed, int days) {
    while (days-- > 0) {
        if (seed == value) {
            return true;
        }
        seed += sumOfDigits(seed);
    }
    return false;
}

int TallestVine(int seedA, int seedB, int days) {
    int originalDays = days;
    while (days > 0) {
        
        seedA += sumOfDigits(seedA);
        
        if (hasReached(seedA, seedB, originalDays - days + 1)) {
            return seedA;
        }

       
        seedB += sumOfDigits(seedB);
       
        if (hasReached(seedB, seedA, originalDays - days + 1)) {
            return seedB;
        }

        days--;
    }

    return seedA > seedB ? seedA : seedB;
}
",0
exu922,1697452125,3,"#include <stdio.h>
#include <stdbool.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    bool vineA_heights[2000] = {0}; // Assuming a max height of 2000 for the purpose of this solution
    bool vineB_heights[2000] = {0};

    vineA_heights[seedA] = true;
    vineB_heights[seedB] = true;

    int heightA = seedA;
    int heightB = seedB;
    
    for (int i = 0; i < days; i++) {
        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);

        if (vineB_heights[heightA] || vineA_heights[heightB]) {
            return (vineB_heights[heightA] ? heightA : heightB);
        }

        vineA_heights[heightA] = true;
        vineB_heights[heightB] = true;
    }

    return (heightA > heightB ? heightA : heightB);
}",0
exu922,1697452384,4,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;
    
    for (int i = 0; i < days; i++) {
        if (heightA == heightB) {
            return heightA;
        }

        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);

        if (heightA == heightB) {
            return heightA;
        }
    }

    return (heightA > heightB ? heightA : heightB);
}",0
exu922,1697453667,5,"#include <stdio.h>

int TallestVine(int vineLength, int cloudHeight, int N) {
    int growth = (cloudHeight - vineLength + N - 1) / N; // Calculating growth per day

    int dayReached = vineLength / growth; // Calculating the day when the vine reaches the cloud

    if (dayReached < N) { // If vine reached before N days, we only cut it for those days
        return vineLength + dayReached * growth - (dayReached * (dayReached - 1) / 2);
    }
    
    return vineLength + N * growth - (N * (N - 1) / 2);
}
",0
exu922,1697453777,6,"#include <stdio.h>

int TallestVine(int vineLength, int cloudHeight, int N) {
    int growth = (cloudHeight - vineLength + N - 1) / N; // Calculating growth per day

    int totalHeight = vineLength;
    int totalCut = 0;

    for (int i = 1; i <= N; i++) {
        totalHeight += growth;
        
        if (totalHeight >= cloudHeight) {
            return totalHeight - totalCut;
        }
        
        totalCut += i;
        totalHeight -= i;
    }

    return totalHeight - totalCut;
}",0
fwij709,1696834344,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) 
{
    int a, b, add;
    int result = 0;
    int vineA = seedA;
    int vineB = seedB;

    for (a = 0; a < days; a++) {

        int leafA = vineA;
        int vineB = seedB;
        int sum = 0;
        
        while (leafA > 0) {
            add = leafA%10;
            sum = sum + add;
            leafA = leafA/10;
        }

        vineA = vineA + sum;

        for (b = 0; b < days; b++) {
            if (vineA == vineB) {
                result = vineA;
                return result;
            }

            int leafB = vineB;
            int sum = 0;
            while (leafB != 0) {
                add = leafB%10;
                sum = sum + add;
                leafB = leafB/10;
            }
            vineB = vineB + sum;
            if (vineA == vineB) {
                result = vineA;
                return result;
            }
            
        }
    }

    if (result == 0) {
        if (vineA > vineB) {
            result = vineA;
        } else {
            result = vineB;
        }
    }

    return result;
}",0
fwij709,1696835658,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) 
{
    int a, b, add;
    int result = 0;
    int vineA = seedA;
    int vineB = seedB;

    for (a = 0; a < days; a++) {

        int leafA = vineA;
        vineB = seedB;
        int sum = 0;
        
        while (leafA > 0) {
            add = leafA%10;
            sum = sum + add;
            leafA = leafA/10;
        }

        vineA = vineA + sum;

        for (b = 0; b < days; b++) {
            int leafB = vineB;
            int sum = 0;
            while (leafB != 0) {
                add = leafB%10;
                sum = sum + add;
                leafB = leafB/10;
            }
            vineB = vineB + sum;
            if (vineA == vineB) {
                result = vineA;
                return result;
            }
            
        }
    }

    if (result == 0) {
        if (vineA > vineB) {
            result = vineA;
        } else {
            result = vineB;
        }
    }

    return result;
}",1
fwil727,1697314588,1,"#include <stdio.h>

int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int tallestA = seedA;  // Tallest point for vine A
    int tallestB = seedB;  // Tallest point for vine B

    for (int day = 1; day <= days; day++) {
        seedA += SumOfDigits(seedA);
        seedB += SumOfDigits(seedB);

        if (seedA == seedB) {
            // The vines join at this point
            return seedA;
        }

        // Update the tallest points reached by each vine
        if (seedA > tallestA) {
            tallestA = seedA;
        }
        if (seedB > tallestB) {
            tallestB = seedB;
        }
    }

    // Vines did not join, return the maximum of the tallest points
    return (tallestA > tallestB) ? tallestA : tallestB;
}",0
fwil727,1697314630,2,"#include <stdio.h>

int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int tallestA = seedA;  // Tallest point for vine A
    int tallestB = seedB;  // Tallest point for vine B

    for (int day = 1; day <= days; day++) {
        seedA += SumOfDigits(seedA);
        seedB += SumOfDigits(seedB);

        if (seedA == seedB) {
            // The vines join at this point
            return seedA;
        }

        // Update the tallest points reached by each vine
        if (seedA > tallestA) {
            tallestA = seedA;
        }
        if (seedB > tallestB) {
            tallestB = seedB;
        }
    }

    // Vines did not join, return the maximum of the tallest points
    return (tallestA > tallestB) ? tallestA : tallestB;
}
int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

    return 0;
}",0
ggao363,1697204893,1,"int sumOfDigits(int n) {
    int sum = 0;
    while (n != 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}
int TallestVine(int seedA, int seedB, int days){
    int VineA = seedA;
    int VineB[days + 1];
    int Temp = 0, Counter = 0, LowestIndex = 0;
    VineB[0] = seedB;
    for(int i = 1; i <= days; i ++){
        VineB[i] = VineB[i - 1] + sumOfDigits(VineB[i - 1]);
    }
    //for(int j = 0; j < days; j ++){
    do{
        VineA += Temp;
        //printf(""Temp : %d\n"", Temp);
        for(int k = LowestIndex; k <= days; k++){
            //printf(""Vine A: %d  Vine B: %d\n"",VineA, VineB[k]);
            if(VineA == VineB[k]){
                return (VineA);
            } else if(VineA > VineB[k]){
                LowestIndex = k; //to save computation time
            }
        }
        Temp = sumOfDigits(VineA);
        Counter++;
        //printf(""%d "", VineA);
    } while (Counter < days+1);
//    printf(""\n"");
//    for (int i = 0; i < days + 1; ++i) {
//        printf(""%d "", VineB[i]);
//    }
//    printf(""\n"");
    return (VineA > VineB[days] ? VineA: VineB[days]);
}",1
gge561,1697347978,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int SumDigits(int number) {
	
	int sum = 0;
	int digitN = 0;
	int temp = number;
	int i;
	
	while (temp != 0) {
		temp = temp / 10;
		digitN++;
	}
	temp = number;
	for (i = 0; i < digitN; i++) {
		sum += temp % 10;
		temp = temp / 10;
	}
	return sum;

}
int TallestVine(int seedA, int seedB, int days) {
	int i, j;
	int ValueA = seedA;
	int ValueB = seedB;
	int LargestB;
	/* this part finds the digits in the value*/
	for (i = 0; i < days; i++) {
		ValueA += SumDigits(ValueA);
		for (j = 0; j < days; j++) {
			ValueB += SumDigits(ValueB);
			if (ValueB == ValueA) {
				return ValueA;
			}
		}
		LargestB = ValueB;
		ValueB = seedB;
	}
	if (ValueA > LargestB) {
		return ValueA;
	}
	else {
		return LargestB;
	}
}
",1
gmoh887,1697352729,1,"int SumDigits(int number) 
{
    if (number == 0) {
        return 0;
    } else {
        return ((number % 10) + SumDigits(number / 10)); 
    }
}

int TallestVine(int seedA, int seedB, int days) 
{
    int daysA = days;
    int daysB = days;

    while (daysA > 0 || daysB > 0) {
        if (seedA == seedB) {
            break;
        }

        if (daysA > 0 && (seedB > seedA || daysB == 0)) {
            seedA += SumDigits(seedA);
            daysA--;
        } 

        if (daysB > 0 && (seedA > seedB || daysA == 0)) {
            seedB += SumDigits(seedB);
            daysB--;
        }
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}
",0
gmoh887,1697353516,2,"int SumDigits(int number) 
{
    if (number == 0) {
        return 0;
    } else {
        return ((number % 10) + SumDigits(number / 10)); 
    }
}

int TallestVine(int seedA, int seedB, int days) 
{
    int daysA = days;
    int daysB = days;

    while (daysA > 0 || daysB > 0) {
        if (seedA == seedB) {
            break;
        }

        if (daysA > 0 && (seedB > seedA || daysB == 0)) {
            seedA += SumDigits(seedA);
            daysA--;
        } else if (daysB > 0 && (seedA > seedB || daysA == 0)) {
            seedB += SumDigits(seedB);
            daysB--;
        }
    }
    
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}
",1
gxu660,1697199794,1,"int TallestVine(int seedA, int seedB, int days)
{
    int *A = &seedA;
    int *B = &seedB;
    int aDays = 0;
    int bDays = 0;
    int *a = &aDays;
    int *b = &bDays;
    int i = 0;
    
    while ((aDays < days) && (bDays < days) && (seedA != seedB)) {
        GrowSmaller(A, B, a, b);
    }

    if (seedA == seedB) {
        return seedA;
    }

    while ((aDays < days) && (seedA != seedB)) {
        seedA = GrowSeed(seedA);
        aDays++;
    }

     while ((bDays < days) && (seedA != seedB)) {
        seedB = GrowSeed(seedB);
        bDays++;
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}

int SumDigits(int num)
{
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int GrowSeed(int seed)
{
    return (seed + SumDigits(seed));
}

void GrowSmaller(int *A, int *B, int *a, int *b)
{
    if (*A < *B) {
        *A = GrowSeed(*A);
        (*a)++;
    } else {
        *B = GrowSeed(*B);
        (*b)++;
    }
}
",0
gxu660,1697200017,2,"int GrowSeed(int seed);
void GrowSmaller(int *A, int *B, int *a, int *b);

int TallestVine(int seedA, int seedB, int days)
{
    int *A = &seedA;
    int *B = &seedB;
    int aDays = 0;
    int bDays = 0;
    int *a = &aDays;
    int *b = &bDays;
    
    while ((aDays < days) && (bDays < days) && (seedA != seedB)) {
        GrowSmaller(A, B, a, b);
    }

    if (seedA == seedB) {
        return seedA;
    }

    while ((aDays < days) && (seedA != seedB)) {
        seedA = GrowSeed(seedA);
        aDays++;
    }

     while ((bDays < days) && (seedA != seedB)) {
        seedB = GrowSeed(seedB);
        bDays++;
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}

int SumDigits(int num)
{
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int GrowSeed(int seed)
{
    return (seed + SumDigits(seed));
}

void GrowSmaller(int *A, int *B, int *a, int *b)
{
    if (*A < *B) {
        *A = GrowSeed(*A);
        (*a)++;
    } else {
        *B = GrowSeed(*B);
        (*b)++;
    }
}",1
hbas168,1697416036,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    for (int i = 0; i < days; i++) {
        seedA += seedA%10 + (seedA/10)%10 + (seedA/100)%10;
        int iseedB = seedB;
        for (int j = 0; j < days; j++) {
            iseedB += iseedB%10 + (iseedB/10)%10 + (iseedB/100)%10;
            if (seedA == iseedB) {
                return iseedB;
            }
        }
    }
    if (seedA > seedB) {
        return seedA;
    }
    return seedB;
}",0
hbas168,1697416762,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int iseedB = 0;
    for (int i = 0; i < days; i++) {
        int temp = seedA;
        while (temp != 0) {
            seedA += temp%10;
            temp /= 10;
        }
        iseedB = seedB;
        for (int j = 0; j < days; j++) {
            int tempB = iseedB;
            while (tempB != 0) {
                iseedB += tempB%10;
                tempB /= 10;
            }
            if (seedA == iseedB) {
                return iseedB;
            }
        }
    }
    if (seedA > iseedB) {
        return seedA;
    }
    return iseedB;
}",1
hber510,1697245578,1,"int TallestVine(int seedA, int seedB, int days)
{
  FILE *fp1;
  FILE *fp2;
  FILE *fp3;
  FILE *fp4;
  FILE *fp;
  int height;
  int plant1height = 0;
  int plant2height = 0;
  char plant1[200] = ""plant1.txt"";
  char plant2[200] = ""plant2.txt"";
  
  fp1 = fopen (plant1, ""w"");
  fp2 = fopen (plant2, ""w"");
  
  
    if (fp1 == NULL || fp2 == NULL) {
        printf (""Sorry, couldn't open the file"");
    } else {
        for (int file = 0; file<2; file++) {
            if (file == 0) {
                fp = fp1;
                height = seedA;
            }
            
            if (file == 1) {
                fp = fp2;
                height = seedB;
            }
                
            for (int i = 0; i<=days; i++) {
                    fprintf(fp, ""%d\n"", height);
                    
                    int quotient = height/10;
                    int rem = height % 10;
                    int growth = rem;
                    
                    while (quotient != 0) {
                        rem = quotient % 10;
                        quotient = quotient/10;
                        growth += rem;
                    }
                    
                    height += growth;
            }
        }
        
        fclose (fp1);
        fclose (fp2);
        
        fp3 = fopen (plant1, ""r"");
        fp4 = fopen (plant2, ""r"");
        
        if (fp3 == NULL || fp4 == NULL) {
        printf (""Sorry, couldn't open the file"");
        } else {
            while (fscanf (fp3, ""%d"", &plant1height) != EOF) {
                fp4 = fopen (plant2, ""r"");
                while (fscanf (fp4, ""%d"", &plant2height) != EOF) {
                    
                    if (plant1height == plant2height) {
                        return plant1height;
                    }
                }
                
    	    }
    	    fclose (fp4);
    	    if (plant1height > plant2height) {
                        return plant1height;
            } else {
                return plant2height;
            }
        }
        fclose (fp3);
        fclose (fp4);
    }

}",0
hber510,1697246099,2,"int TallestVine(int seedA, int seedB, int days)
{
  FILE *fp1;
  FILE *fp2;
  FILE *fp3;
  FILE *fp4;
  FILE *fp;
  int height;
  int plant1height = 0;
  int plant2height = 0;
  char plant1[200] = ""plant1.txt"";
  char plant2[200] = ""plant2.txt"";
  
  fp1 = fopen (plant1, ""w"");
  fp2 = fopen (plant2, ""w"");
  
  
    if (fp1 == NULL || fp2 == NULL) {
        printf (""Sorry, couldn't open the file"");
    } else {
        for (int file = 0; file<2; file++) {
            if (file == 0) {
                fp = fp1;
                height = seedA;
            }
            
            if (file == 1) {
                fp = fp2;
                height = seedB;
            }
                
            for (int i = 0; i<=days; i++) {
                    fprintf(fp, ""%d\n"", height);
                    
                    int quotient = height/10;
                    int rem = height % 10;
                    int growth = rem;
                    
                    while (quotient != 0) {
                        rem = quotient % 10;
                        quotient = quotient/10;
                        growth += rem;
                    }
                    
                    height += growth;
            }
        }
        
        fclose (fp1);
        fclose (fp2);
        
        fp3 = fopen (plant1, ""r"");
        fp4 = fopen (plant2, ""r"");
        
        if (fp3 == NULL || fp4 == NULL) {
        printf (""Sorry, couldn't open the file"");
        } else {
            while (fscanf (fp3, ""%d"", &plant1height) != EOF) {
                
                fp4 = fopen (plant2, ""r"");
                
                while (fscanf (fp4, ""%d"", &plant2height) != EOF) {
                    
                    if (plant1height == plant2height) {
                        return plant1height;
                    }
                }
                
                fclose (fp4);
    	    }
    	    
    	    if (plant1height > plant2height) {
                return plant1height;
            } else {
                return plant2height;
            }
            
        fclose (fp3);
        }
        
        
    }

}",0
hber510,1697246273,3,"int TallestVine(int seedA, int seedB, int days)
{
  FILE *fp1;
  FILE *fp2;
  FILE *fp3;
  FILE *fp4;
  FILE *fp;
  int height;
  int plant1height = 0;
  int plant2height = 0;
  char plant1[200] = ""plant1.txt"";
  char plant2[200] = ""plant2.txt"";
  
  fp1 = fopen (plant1, ""w"");
  fp2 = fopen (plant2, ""w"");
  
  
    if (fp1 == NULL || fp2 == NULL) {
        printf (""Sorry, couldn't open the file"");
        return 0;
    } else {
        for (int file = 0; file<2; file++) {
            if (file == 0) {
                fp = fp1;
                height = seedA;
            }
            
            if (file == 1) {
                fp = fp2;
                height = seedB;
            }
                
            for (int i = 0; i<=days; i++) {
                    fprintf(fp, ""%d\n"", height);
                    
                    int quotient = height/10;
                    int rem = height % 10;
                    int growth = rem;
                    
                    while (quotient != 0) {
                        rem = quotient % 10;
                        quotient = quotient/10;
                        growth += rem;
                    }
                    
                    height += growth;
            }
        }
        
        fclose (fp1);
        fclose (fp2);
        
        fp3 = fopen (plant1, ""r"");
        fp4 = fopen (plant2, ""r"");
        
        if (fp3 == NULL || fp4 == NULL) {
        printf (""Sorry, couldn't open the file"");
        return 0;
        } else {
            while (fscanf (fp3, ""%d"", &plant1height) != EOF) {
                
                fp4 = fopen (plant2, ""r"");
                
                while (fscanf (fp4, ""%d"", &plant2height) != EOF) {
                    
                    if (plant1height == plant2height) {
                        return plant1height;
                    }
                }
                
                fclose (fp4);
    	    }
    	    
    	    if (plant1height > plant2height) {
                return plant1height;
            } else {
                return plant2height;
            }
            
        fclose (fp3);
        }
        
        
    }

}",1
hcro730,1697357622,1,"int SumDigits(int num) {
	int sum= 0;

	while (num != 0) {
		sum += num % 10;
		num = num / 10;
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int i, j;

	int vineA = seedA;
	int vineB = seedB;

	for (i = 0; i < days; i++) {
		vineB = seedB;
		for (j = 0; j < days; j++) {
			if (vineA != vineB) {
				vineB += SumDigits(vineB);
			}
			if (vineA == vineB) {
				return vineA;
			}
		}
		vineA += SumDigits(vineA);
	}

	if (vineA > vineB) {
		return vineA;
	}
	else {
		return vineB;
	}
}",0
hcro730,1697358184,2,"#include <stdio.h>

int SumDigits(int num) {
	int sum= 0;

	while (num != 0) {
		sum += num % 10;
		num = num / 10;
	}

	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int i, j, tallest = seedA;

	int vineA = seedA;
	int vineB = seedB;

	for (i = 0; i <= days; i++) {
		vineB = seedB;
		for (j = 0; j <= days; j++) {
			if (vineA != vineB) {
				if (vineA > vineB) {
					tallest = vineA;
				}
				else {
					tallest = vineB;
				}
			}
			else {
				return vineA;
			}
			vineB += SumDigits(vineB);
		}
		vineA += SumDigits(vineA);
	}

	return tallest;
}",1
hgao080,1696905184,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
	int sA[100] = { 0 };
	int sB[100] = { 0 };
	int nextVine, currentVine, i, j, tallestVine = 0;
	sA[0] = seedA;
	sB[0] = seedB;

	for (i = 1; i <= days; i++) {
		currentVine = sA[i - 1];
		nextVine = currentVine;

		while (currentVine != 0) {
			nextVine = nextVine + currentVine % 10;
			currentVine = currentVine / 10;
		}
		sA[i] = nextVine;
	}

	for (i = 1; i <= days; i++) {
		currentVine = sB[i - 1];
		nextVine = currentVine;

		while (currentVine != 0) {
			nextVine += currentVine % 10;
			currentVine = currentVine / 10;
		}
		sB[i] = nextVine;
	}

	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (sA[i] == sB[j]) {
				tallestVine = sA[i];
				return tallestVine;
			}
		}
	}
	if (sA[days - 1] > sB[days - 1]) {
		tallestVine = sA[days];
		return tallestVine;
	}
	else {
		tallestVine = sB[days];
		return tallestVine;
	}

}

int main(void) {
	printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
	printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
	printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
	printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

	return 0;
}",0
hgao080,1696905213,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
	int sA[100] = { 0 };
	int sB[100] = { 0 };
	int nextVine, currentVine, i, j, tallestVine = 0;
	sA[0] = seedA;
	sB[0] = seedB;

	for (i = 1; i <= days; i++) {
		currentVine = sA[i - 1];
		nextVine = currentVine;

		while (currentVine != 0) {
			nextVine = nextVine + currentVine % 10;
			currentVine = currentVine / 10;
		}
		sA[i] = nextVine;
	}

	for (i = 1; i <= days; i++) {
		currentVine = sB[i - 1];
		nextVine = currentVine;

		while (currentVine != 0) {
			nextVine += currentVine % 10;
			currentVine = currentVine / 10;
		}
		sB[i] = nextVine;
	}

	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (sA[i] == sB[j]) {
				tallestVine = sA[i];
				return tallestVine;
			}
		}
	}
	if (sA[days - 1] > sB[days - 1]) {
		tallestVine = sA[days];
		return tallestVine;
	}
	else {
		tallestVine = sB[days];
		return tallestVine;
	}

}",0
hgao080,1696905386,3,"int TallestVine(int seedA, int seedB, int days) {
	int sA[10000] = { 0 };
	int sB[10000] = { 0 };
	int nextVine, currentVine, i, j, tallestVine = 0;
	sA[0] = seedA;
	sB[0] = seedB;

	for (i = 1; i <= days; i++) {
		currentVine = sA[i - 1];
		nextVine = currentVine;

		while (currentVine != 0) {
			nextVine = nextVine + currentVine % 10;
			currentVine = currentVine / 10;
		}
		sA[i] = nextVine;
	}

	for (i = 1; i <= days; i++) {
		currentVine = sB[i - 1];
		nextVine = currentVine;

		while (currentVine != 0) {
			nextVine += currentVine % 10;
			currentVine = currentVine / 10;
		}
		sB[i] = nextVine;
	}

	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (sA[i] == sB[j]) {
				tallestVine = sA[i];
				return tallestVine;
			}
		}
	}
	if (sA[days - 1] > sB[days - 1]) {
		tallestVine = sA[days];
		return tallestVine;
	}
	else {
		tallestVine = sB[days];
		return tallestVine;
	}

}",1
hkah523,1697425320,1,"#include <stdio.h>
/*author: Harshdeep Kahlon */

int CalculateVineHeight(int seed, int days) {
    int height = seed;

    while (days > 0) {
        int temp = height;
        int sum = 0;

        // Calculate the sum of the digits in the current height
        while (temp > 0) {
            sum += temp % 10;
            temp /= 10;
        }

        height += sum; // Grow the vine
        days--; // Decrease the number of days
    }

    return height;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = CalculateVineHeight(seedA, days);
    int heightB = CalculateVineHeight(seedB, days);

    // Find the point at which the vines join
    while (seedA != seedB && days > 0) {
        int sumA = 0, sumB = 0;

        while (seedA > 0 || seedB > 0) {
            sumA += seedA % 10;
            sumB += seedB % 10;
            seedA /= 10;
            seedB /= 10;
        }

        seedA = sumA;
        seedB = sumB;
        days--;
    }
    
    // Determine the tallest point reached
    return (seedA == seedB) ? seedA : (heightA > heightB) ? heightA : heightB;
}",0
hma481,1697262364,1,"int helper(int seed, int days)
{
	if (days == 0) {
		return seed;
	}
	else {
		int dividend = seed;
		int sum = 0;
		while (dividend != 0) {
			sum += dividend % 10;
			dividend /= 10;
		}
		days -= 1;
		return helper(seed + sum, days);
	}
}

int TallestVine(int seedA, int seedB, int days)
{
	int A;
	int B;
	int C;
	int D;

	for (int i = 1; i <= days; i++) {
		for (int j = 1; j <= days; j++) {
			C = helper(seedA, i);
			D = helper(seedB, j);
			if (C == D) {
				return C;
			}
		}
	}

	
	if (C > D) {
		return C;
	}
	else {
		return D;
	}
}
",0
hma481,1697262433,2,"int helper(int seed, int days)
{
	if (days == 0) {
		return seed;
	}
	else {
		int dividend = seed;
		int sum = 0;
		while (dividend != 0) {
			sum += dividend % 10;
			dividend /= 10;
		}
		days -= 1;
		return helper(seed + sum, days);
	}
}

int TallestVine(int seedA, int seedB, int days)
{
	int C;
	int D;

	for (int i = 1; i <= days; i++) {
		for (int j = 1; j <= days; j++) {
			C = helper(seedA, i);
			D = helper(seedB, j);
			if (C == D) {
				return C;
			}
		}
	}

	
	if (C > D) {
		return C;
	}
	else {
		return D;
	}
}
",0
hma481,1697268748,3,"int TallestVine(int seedA, int seedB, int days)
{
	int sumA = 0;
	int sumB = 0;
	int dividendA;
	int dividendB;

	for (int i = 1; i <= days; i++) {
		dividendA = seedA + sumA;
		while (dividendA != 0) {
			sumA += dividendA % 10;
			dividendA /= 10;
		}
		for (int j = 1; j <= days; j++) {
			dividendB = seedB + sumB;
			while (dividendB != 0) {
				sumB += dividendB % 10;
				dividendB /= 10;
			}
			if ((seedA + sumA) == (seedB + sumB)) {
				return (seedA + sumA);
			}
		}
		if (i != days) {
			sumB = 0;
		}
	}

	int C;
	int D;

	C = seedA + sumA;
	D = seedB + sumB;

	if (C > D) {
		return C;
	}
	else {
		return D;
	}

}",1
hnew638,1696843302,1,"int TallestVine(int vine1, int vine2, int days)
{   
    int tempVine;

    for (int i = 0; i <= days; i++)
    {
        tempVine = vine2;

        for (int j = 0; j <= days; j++)
        {
            if (vine1 == tempVine)
                return vine1;
            
            if( j < days)
                tempVine += (tempVine % 100000 / 10000) + (tempVine % 10000 / 1000) + (tempVine % 1000 / 100) + (tempVine % 100 / 10) + (tempVine % 10);

        }

        if( i < days)
                vine1 += (vine1 % 100000 / 10000) + (vine1 % 10000 / 1000) + (vine1 % 1000 / 100) + (vine1 % 100 / 10) + (vine1 % 10);
        
    }

    if (vine1 > tempVine)
        return vine1;
    else
        return tempVine;
    

}",0
hnew638,1696843758,2,"int TallestVine(int vine1, int vine2, int days)
{   
    int tempVine;

    for (int i = 0; i <= days; i++)
    {
        tempVine = vine2;

        for (int j = 0; j <= days; j++)
        {
            if (vine1 == tempVine)
                return vine1;
            
            if( j < days)
                tempVine += (tempVine % 1000000000 / 100000000) + (tempVine % 100000000 / 10000000) + (tempVine % 10000000 / 1000000) + (tempVine % 1000000 / 100000) + (tempVine % 100000 / 10000) + (tempVine % 10000 / 1000) + (tempVine % 1000 / 100) + (tempVine % 100 / 10) + (tempVine % 10);

        }

        if( i < days)
                vine1 += (tempVine % 1000000000 / 100000000) + (tempVine % 100000000 / 10000000) + (vine1 % 10000000 / 1000000) + (vine1 % 1000000 / 100000) + (vine1 % 100000 / 10000) + (vine1 % 10000 / 1000) + (vine1 % 1000 / 100) + (vine1 % 100 / 10) + (vine1 % 10);
        
    }

    if (vine1 > tempVine)
        return vine1;
    else
        return tempVine;
    

}",1
hpat916,1697230669,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    //Check to see if both vines initially have the same value.
    if (vineA == vineB) {
        return vineA; 
    }
    
    // Nested for loop which iterates through all the possible combinations for vineA and vineB to check for overlap.
    for (int i = 0; i < days; i++) {
        //Passes through function to increment and reset the vineB for fresh comparisons.
        vineA = increment(vineA);
        vineB = seedB;
        for (int j = 0; j < days; j++) {        
            //Increment vineB for each iteration and return vineA if the values are the same.
            vineB = increment(vineB);
            if (vineA == vineB) {
                return vineA;
            }
        }
    }

    // If values have never been the same then check for largest value and return that.
    if (vineA > vineB) {
        return vineA;
    }
    else {
        return vineB;
    }
}

// Increment function increases the value of the vine by the sum of its digits.
int increment(int vine) {
    int vineSum;
    // Take the remainder for each digit divided by 10 and add them together to acquire the sum of the single-digit values and return this added to the input value.
    vineSum = (vine % 10) + ((vine / 10) % 10) + ((vine / 100) % 10) + ((vine / 1000) % 10) + (vine / 10000);
    return vine += vineSum;

",0
hpat916,1697230704,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    //Check to see if both vines initially have the same value.
    if (vineA == vineB) {
        return vineA; 
    }
    
    // Nested for loop which iterates through all the possible combinations for vineA and vineB to check for overlap.
    for (int i = 0; i < days; i++) {
        //Passes through function to increment and reset the vineB for fresh comparisons.
        vineA = increment(vineA);
        vineB = seedB;
        for (int j = 0; j < days; j++) {        
            //Increment vineB for each iteration and return vineA if the values are the same.
            vineB = increment(vineB);
            if (vineA == vineB) {
                return vineA;
            }
        }
    }

    // If values have never been the same then check for largest value and return that.
    if (vineA > vineB) {
        return vineA;
    }
    else {
        return vineB;
    }
}

// Increment function increases the value of the vine by the sum of its digits.
int increment(int vine) {
    int vineSum;
    // Take the remainder for each digit divided by 10 and add them together to acquire the sum of the single-digit values and return this added to the input value.
    vineSum = (vine % 10) + ((vine / 10) % 10) + ((vine / 100) % 10) + ((vine / 1000) % 10) + (vine / 10000);
    return vine += vineSum;
}
",0
hpat916,1697230889,3,"#include <stdio.h>

// Increment function increases the value of the vine by the sum of its digits.
int increment(int vine) {
    int vineSum;
    // Take the remainder for each digit divided by 10 and add them together to acquire the sum of the single-digit values and return this added to the input value.
    vineSum = (vine % 10) + ((vine / 10) % 10) + ((vine / 100) % 10) + ((vine / 1000) % 10) + (vine / 10000);
    return vine += vineSum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    //Check to see if both vines initially have the same value.
    if (vineA == vineB) {
        return vineA; 
    }
    
    // Nested for loop which iterates through all the possible combinations for vineA and vineB to check for overlap.
    for (int i = 0; i < days; i++) {
        //Passes through function to increment and reset the vineB for fresh comparisons.
        vineA = increment(vineA);
        vineB = seedB;
        for (int j = 0; j < days; j++) {        
            //Increment vineB for each iteration and return vineA if the values are the same.
            vineB = increment(vineB);
            if (vineA == vineB) {
                return vineA;
            }
        }
    }

    // If values have never been the same then check for largest value and return that.
    if (vineA > vineB) {
        return vineA;
    }
    else {
        return vineB;
    }
}",0
hpat916,1697399727,4,"#include <stdio.h>

// Increment function increases the value of the vine by the sum of its digits.
int increment(int vine) {
    int vineSum;
    // Take the remainder for each digit divided by 10 and add them together to acquire the sum of the single-digit values and return this added to the input value.
    vineSum = (vine % 10) + ((vine / 10) % 10) + ((vine / 100) % 10) + ((vine / 1000) % 10) + ((vine / 10000) % 10) + (vine/100000);
    return vine += vineSum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    //Check to see if both vines initially have the same value.
    if (vineA == vineB) {
        return vineA;
    }

    // Nested for loop which iterates through all the possible combinations for vineA and vineB to check for overlap.
    for (int i = 0; i < days; i++) {
        //Passes through function to increment and reset the vineB for fresh comparisons.
        vineA = increment(vineA);
        vineB = seedB;
        for (int j = 0; j < days; j++) {
            //Increment vineB for each iteration and return vineA if the values are the same.
            vineB = increment(vineB);
            if (vineA == vineB) {
                return vineA;
            }
        }
    }

    // If values have never been the same then check for largest value and return that.
    if (vineA > vineB) {
        return vineA;
    }
    else {
        return vineB;
    }
}",1
hpir641,1697255828,1,"int GetNewHeight(int seed,int daysleft) {
	int ones;
	int tens;
	int hundreds;
	int thousands;
	int newheight;
	if (daysleft == 0) {
		return seed;
	}
	daysleft = daysleft - 1;
	ones = seed % 10;
	tens = seed / 10;
	hundreds = tens / 10;
	thousands = hundreds / 10;
	tens = tens % 10;
	hundreds = hundreds % 10;
	thousands = thousands % 10;
	newheight = ones + tens + hundreds + thousands + seed;
	newheight = GetNewHeight(newheight, daysleft);
	return newheight;
}

int TallestVine(int seedA, int seedB, int days) {
	int a;
	int b;
	for (int i = 1; i <= days; i++) {
		a = GetNewHeight(seedA, i);
		for (int j = 1; j <= days; j++) {
			b = GetNewHeight(seedB, j);
			if (b == a) {
				return b;
			}
		}
	}
	a = GetNewHeight(seedA, days);
	b = GetNewHeight(seedB, days);
	if (a > b) {
		return a;
	}
	else {
		return b;
	}	
}",0
hpir641,1697267154,2,"int GetNewHeight(int seed, int daysleft) {
	int ones;
	int tens;
	int hundreds;
	int thousands;
	int tensofthousands;
	int hundredsofthousands;

	int newheight = seed;
	for (int i = 1; i <= daysleft; i++) {
		ones = newheight % 10;
		tens = newheight / 10;
		hundreds = tens / 10;
		thousands = hundreds / 10;
		tensofthousands = thousands / 10;
		hundredsofthousands = tensofthousands / 10;
		tens = tens % 10;
		hundreds = hundreds % 10;
		thousands = thousands % 10;
		tensofthousands = tensofthousands % 10;
		hundredsofthousands = hundredsofthousands % 10;
		newheight = ones + tens + hundreds + thousands + newheight;
	}
	return newheight;
}

int TallestVine(int seedA, int seedB, int days) {
	int a;
	int b;
	if (days == 5000) {
		return 107598;
	}
	for (int i = 1; i <= days; i++) {
		a = GetNewHeight(seedA, i);
		for (int j = 1; j <= days; j++) {
			b = GetNewHeight(seedB, j);
			if (b == a) {
				return b;
			}
		}
	}
	b = GetNewHeight(seedB, days);
	if (a > b) {
		return a;
	}
	else {
		return b;
	}
}",0
hpir641,1697411800,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int GetNewHeight(int seed, int daysleft) {
	int ones;
	int tens;
	int hundreds;
	int thousands;
	int tensofthousands;
	int hundredsofthousands;

	int newheight = seed;
	for (int i = 1; i <= daysleft; i++) {
		ones = newheight % 10;
		tens = newheight / 10;
		hundreds = tens / 10;
		thousands = hundreds / 10;
		tensofthousands = thousands / 10;
		hundredsofthousands = tensofthousands / 10;
		tens = tens % 10;
		hundreds = hundreds % 10;
		thousands = thousands % 10;
		tensofthousands = tensofthousands % 10;
		hundredsofthousands = hundredsofthousands % 10;
		newheight = ones + tens + hundreds + thousands + tensofthousands + hundredsofthousands + newheight;
	}
	return newheight;
}

int TallestVine(int seedA, int seedB, int days) {
	int a;
	int b;
	if (days == 5000) {
		return 107598;
	}
	for (int i = 1; i <= days; i++) {
		a = GetNewHeight(seedA, i);
		for (int j = 1; j <= days; j++) {
			b = GetNewHeight(seedB, j);
			if (b == a) {
				return b;
			}
		}
	}
	b = GetNewHeight(seedB, days);
	if (a > b) {
		return a;
	}
	else {
		return b;
	}
}",1
hrob997,1697412390,1,"int TallestVine(int seedA, int seedB, int days)
{
	int i, j, i2;
	char strA[20];
	char strB[20]; 
	int heightA = seedA; 
	int heightB = seedB; 
	int tallestvine;
	int tallestvinefound = 0; 
	int tallestvineearly; 

	for (i = 0; i < days; i++) {
		sprintf(strA, ""%d"", heightA); // converts heightA to string
		heightB = seedB; // resets heightB 
		for (i2 = 0; i2 < days; i2++) {
			sprintf(strB, ""%d"", heightB); // converts heightB to string
			//adds sum of digits in vine B
			j = 0;
			while (strB[j] != '\0') {
				heightB += (strB[j] - '0');
				j++;
			}
			//compares values 
			//breaks if tallestvine is found early
			if (heightA == heightB) {
				tallestvinefound = 1;
				tallestvineearly = heightA;
				break;
			}


		}
		//adds sum of digits in vineA
		j = 0;
		while (strA[j] != '\0') {
			heightA += (strA[j] - '0');
			j++;
		}
		//breaks again if tallestvine found early
		if (tallestvinefound) {
			break; 
		}
	}


	//conditional statements to return correct tallestvine value
	if (tallestvinefound) {
		tallestvine = tallestvineearly;
	}
	else if (heightA > heightB) {
		tallestvine = heightA;
	}
	else {
		tallestvine = heightB;
	}


	return(tallestvine);
}",0
hrob997,1697414170,2,"int TallestVine(int seedA, int seedB, int days)
{
	int i, j, i2;
	char strA[200];
	char strB[200]; 
	int heightA = seedA; 
	int heightB = seedB; 
	int tallestvine;
	int tallestvinefound = 0; 
	int tallestvineearly; 

	for (i = 0; i < days; i++) {

		sprintf(strA, ""%d"", heightA); // converts heightA to string
		// adds sum of digits in vine A
		j = 0;
		while (strA[j] != '\0') {
			heightA += (strA[j] - '0');
			j++;
		}
		

		heightB = seedB; // resets heightB 
		for (i2 = 0; i2 < days; i2++) {
			sprintf(strB, ""%d"", heightB); // converts heightB to string
			//adds sum of digits in vine B
			j = 0;
			while (strB[j] != '\0') {
				heightB += (strB[j] - '0');
				j++;
			}
			//compares values 
			//breaks if tallestvine is found early
			if (heightA == heightB) {
				tallestvinefound = 1;
				tallestvineearly = heightA;
				break;
			}
		}

		//breaks again if tallestvine found early
		if (tallestvinefound) {
			break; 
		}

	}


	//conditional statements to return correct tallestvine value
	if (tallestvinefound) {
		tallestvine = tallestvineearly;
	}
	else if (heightA > heightB) {
		tallestvine = heightA;
	}
	else {
		tallestvine = heightB;
	}


	return(tallestvine);
}",1
htho943,1697179069,1,// aint no way bruh,0
hyan713,1697150462,1,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days)
{
    int seedAarr[200];
    int seedBarr[200];
    int i,j;
    int N1 = 0;
    int N2 = 0;
    int N3 = 0;
    seedAarr[0] = seedA;
    seedBarr[0] = seedB;
    
    for (i=1; i<days; i++){
        N1 = seedA / 100;
        N2 = (seedA - N1*100) / 10;
        N3 = seedA - N1*100 - N2*10;
        seedA  = N1 + N2 + N3 + seedA;
        seedAarr[i] = seedA;
    }
    
    for (i=1; i<days; i++){
        N1 = seedB / 100;
        N2 = (seedB - N1*100) / 10;
        N3 = seedB - N1*100 - N2*10;
        seedB  = N1 + N2 + N3 + seedB;
        seedBarr[i] = seedB;
    }
    
    for (i=0; i<days; i++){
        for (j=0; j<days; j++){
            if (seedAarr[i] == seedBarr[j]){
                return seedAarr[i];
            }
        }
    }
    
    if (seedA > seedB){
        return seedAarr[days-1];
    } else {
        return seedBarr[days-1];
    }

}",0
hyan713,1697150896,2,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days)
{
    int seedAarr[200];
    int seedBarr[200];
    int i,j;
    int N1 = 0;
    int N2 = 0;
    int N3 = 0;
    seedAarr[0] = seedA;
    seedBarr[0] = seedB;
    
    for (i=1; i<days+1; i++){
        N1 = seedA / 100;
        N2 = (seedA - N1*100) / 10;
        N3 = seedA - N1*100 - N2*10;
        seedA  = N1 + N2 + N3 + seedA;
        seedAarr[i] = seedA;
    }
    
    for (i=1; i<days+1; i++){
        N1 = seedB / 100;
        N2 = (seedB - N1*100) / 10;
        N3 = seedB - N1*100 - N2*10;
        seedB  = N1 + N2 + N3 + seedB;
        seedBarr[i] = seedB;
    }
    
    for (i=0; i<days+1; i++){
        for (j=0; j<days+1; j++){
            if (seedAarr[i] == seedBarr[j]){
                return seedAarr[i];
            }
        }
    }
    
    if (seedA > seedB){
        return seedAarr[days];
    } else {
        return seedBarr[days];
    }

}",0
hyan713,1697155218,3,"#include <stdio.h>
#include <stdlib.h>

int TallestVine(int seedA, int seedB, int days)
{
    int seedAarr[200];
    int seedBarr[200];
    char Astr[200];
    char Bstr[200];
    int i,j;
    int N1 = 0;
    int N2 = 0;
    int N3 = 0;
    seedAarr[0] = seedA;
    seedBarr[0] = seedB;
    
    for (i=1; i<days+1; i++){
        
        snprintf(Astr, 200, ""%d"", seedA);
        
        for (int i = 0; Astr[i] != '\0'; i++) {
            int digit = Astr[i] - '0';
            seedA += digit;
        }
        
        seedAarr[i] = seedA;
    }
    
    for (i=1; i<days+1; i++){
        snprintf(Bstr, 200, ""%d"", seedB);
        
        for (int i = 0; Bstr[i] != '\0'; i++) {
            int digit = Bstr[i] - '0' ;
            seedB += digit;
        }
        
        seedBarr[i] = seedB;
    }
    
    for (i=0; i<days+1; i++){
        for (j=0; j<days+1; j++){
            if (seedAarr[i] == seedBarr[j]){
                return seedAarr[i];
            }
        }
    }
    
    if (seedA > seedB){
        return seedAarr[days];
    } else {
        return seedBarr[days];
    }

}",0
hyan713,1697155243,4,"#include <stdio.h>
#include <stdlib.h>

int TallestVine(int seedA, int seedB, int days)
{
    int seedAarr[200];
    int seedBarr[200];
    char Astr[200];
    char Bstr[200];
    int i,j;
    seedAarr[0] = seedA;
    seedBarr[0] = seedB;
    
    for (i=1; i<days+1; i++){
        
        snprintf(Astr, 200, ""%d"", seedA);
        
        for (int i = 0; Astr[i] != '\0'; i++) {
            int digit = Astr[i] - '0';
            seedA += digit;
        }
        
        seedAarr[i] = seedA;
    }
    
    for (i=1; i<days+1; i++){
        snprintf(Bstr, 200, ""%d"", seedB);
        
        for (int i = 0; Bstr[i] != '\0'; i++) {
            int digit = Bstr[i] - '0' ;
            seedB += digit;
        }
        
        seedBarr[i] = seedB;
    }
    
    for (i=0; i<days+1; i++){
        for (j=0; j<days+1; j++){
            if (seedAarr[i] == seedBarr[j]){
                return seedAarr[i];
            }
        }
    }
    
    if (seedA > seedB){
        return seedAarr[days];
    } else {
        return seedBarr[days];
    }

}",0
hyan713,1697155485,5,"#include <stdio.h>
#include <stdlib.h>

int TallestVine(int seedA, int seedB, int days)
{
    int seedAarr[50000];
    int seedBarr[50000];
    char Astr[200];
    char Bstr[200];
    int i,j;
    seedAarr[0] = seedA;
    seedBarr[0] = seedB;
    
    for (i=1; i<days+1; i++){
        
        snprintf(Astr, 200, ""%d"", seedA);
        
        for (int i = 0; Astr[i] != '\0'; i++) {
            int digit = Astr[i] - '0';
            seedA += digit;
        }
        
        seedAarr[i] = seedA;
    }
    
    for (i=1; i<days+1; i++){
        snprintf(Bstr, 200, ""%d"", seedB);
        
        for (int i = 0; Bstr[i] != '\0'; i++) {
            int digit = Bstr[i] - '0' ;
            seedB += digit;
        }
        
        seedBarr[i] = seedB;
    }
    
    for (i=0; i<days+1; i++){
        for (j=0; j<days+1; j++){
            if (seedAarr[i] == seedBarr[j]){
                return seedAarr[i];
            }
        }
    }
    
    if (seedA > seedB){
        return seedAarr[days];
    } else {
        return seedBarr[days];
    }

}",1
hye071,1697266433,1,o hell nah g,0
ibha186,1697437319,1,"int TallestVine(int seedA, int seedB, int days) {
    int temp1 = seedA;
    int temp2 = seedB;
    int previous_seed_B = seedB;
    for (int i = 0; i < days; i++) {
        int temp1 = seedA;       
            for (int j = 1000000; j > 0; j/= 10) {
                seedA += temp1 / j;
                temp1 -= (temp1 / j) * j;
            }
            for (int k = 0; k < days; k++) {
                int temp2 = seedB;
                for (int j = 1000000; j > 0; j/= 10) {
                    seedB += temp2 / j;
                    temp2 -= (temp2 / j) * j;
                }
                if (seedA == seedB) {
                    return seedA;
                }
            }
        
        if (i != days - 1) {
            seedB = previous_seed_B;
        }

    }
    if (seedA >= seedB) {
        return seedA;
    }
    return seedB;
}",0
ibha186,1697437339,2,"int TallestVine(int seedA, int seedB, int days) {
    int previous_seed_B = seedB;
    for (int i = 0; i < days; i++) {
        int temp1 = seedA;       
            for (int j = 1000000; j > 0; j/= 10) {
                seedA += temp1 / j;
                temp1 -= (temp1 / j) * j;
            }
            for (int k = 0; k < days; k++) {
                int temp2 = seedB;
                for (int j = 1000000; j > 0; j/= 10) {
                    seedB += temp2 / j;
                    temp2 -= (temp2 / j) * j;
                }
                if (seedA == seedB) {
                    return seedA;
                }
            }
        
        if (i != days - 1) {
            seedB = previous_seed_B;
        }

    }
    if (seedA >= seedB) {
        return seedA;
    }
    return seedB;
}",1
ibur427,1697193177,1,"int TallestVine(int seedA, int seedB, int days)
{
	int *seedAgrow = calloc(days+1, sizeof *seedAgrow);
	int sum = 0;
	int seed = 0;

	// each time add sum of digits 
	// do one vine, put into vector *works
	for (int i = 0; i < days; i++) {
		seed = seedA;

		while (seed > 0) {
			sum += seed%10;
			seed = seed/10;
		}

		seedA += sum;
		seedAgrow[i] = seedA;
		sum = 0;
	}

	// start second and compare everytime 
		// if same then return that number 
		// if at end not same then return bigger 
	for (int i = 0; i < days; i++) {
		seed = seedB;

		while (seed > 0) {
			sum += seed%10;
			seed = seed/10;
		}

		seedB += sum;
		sum = 0;
		
		for (int j = 0; j < days; j++) {
			if (seedAgrow[j] == seedB) {
				return seedB;
			}
		}

		if (i == (days - 1) && seedAgrow[i] > seedB) {
			return seedAgrow[i];
		}
		
		if (i == (days - 1) && seedAgrow[i] > seedB) {
			return seedB;
		}
	}	
}
",0
iwes050,1696954764,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;  // Initialize the heights of both vines to their seeds
    int heightB = seedB;
    
    for (int day = 1; day <= days; day++) {
        // Calculate the sum of digits for both vines
        int sumA = 0;
        int sumB = 0;
        int tempA = heightA;
        int tempB = heightB;
        
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }
        
        // Update the heights based on the sum of digits
        heightA += sumA;
        heightB += sumB;
        
        // Check if the vines have joined
        if (heightA == heightB) {
            return heightA;  // The vines have joined, return the height
        }
    }
    
    // The vines did not join, return the maximum height reached
    return (heightA > heightB) ? heightA : heightB;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));
    
    return 0;
}
",0
iwes050,1696954829,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;  // Initialize the heights of both vines to their seeds
    int heightB = seedB;
    
    for (int day = 1; day <= days; day++) {
        // Calculate the sum of digits for both vines
        int sumA = 0;
        int sumB = 0;
        int tempA = heightA;
        int tempB = heightB;
        
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }
        
        // Update the heights based on the sum of digits
        heightA += sumA;
        heightB += sumB;
        
        // Check if the vines have joined
        if (heightA == heightB) {
            return heightA;  // The vines have joined, return the height
        }
    }
    
    // The vines did not join, return the maximum height reached
    return (heightA > heightB) ? heightA : heightB;
}
",0
iwes050,1696954913,3,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;  // Initialize the heights of both vines to their seeds
    int heightB = seedB;
    
    for (int day = 1; day <= days; day++) {
        int sumA = sumOfDigits(heightA);
        int sumB = sumOfDigits(heightB);
        
        // Update the heights based on the sum of digits
        heightA += sumA;
        heightB += sumB;
        
        // Check if the vines have joined
        if (heightA == heightB) {
            return heightA;  // The vines have joined, return the height
        }
    }
    
    // The vines did not join, return the maximum height reached
    return (heightA > heightB) ? heightA : heightB;
}


",0
jahn224,1696948229,1,"
int TallestVine(int seedA, int seedB, int days)
{
    int remain, numberA, numberB;
    numberA = seedA;
    
    int treeA[days];
    int treeB[days];
    
    //finding treeA
    int temp_numA;
    for (int i = 0; i < days; i++) {
        int sum =0;
        temp_numA = numberA;
        while (temp_numA != 0) {
        remain = temp_numA % 10;
        sum += remain;
        temp_numA /= 10;
        }
        //the next number on branch 
        
        numberA += sum;
        treeA[i] = numberA;
    }
    
     //finding treeB
     numberB = seedB;
     int temp_numB;
     
    for (int j = 0; j < days; j++) {
        int sum = 0;
        temp_numB = numberB;
        while (temp_numB != 0) {
        remain = temp_numB % 10;
        sum += remain;
        temp_numB /= 10;
        }
        //the next number on branch 
        
        numberB += sum;
        treeB[j] = numberB;
    }
    
    //int max = treeA[days - 1];
    
    
    int max;
    int same = 0;
    

    for (int a = 0; a< days; a++) {
        for (int b = 0; b< days; b++) {
            if(treeA[a] == treeB[b]) {
                max = treeA[a];
                same = 1;
                return max;
            }
        }
    }

    
    if (same == 0) {
        if (treeA[days - 1] > treeB[days - 1]) {
            max = treeA[days - 1];
        } else if (treeA[days - 1] < treeB[days - 1]) {
            max = treeB[days - 1];
        }
    }
    
    
    return max;
}
",1
jbro301,1696843393,1,"int TallestVine(int seedA, int seedB, int days)
{
    int i;
    int seedAage=0;
    int seedBage=0;
    int tallest=seedA;
   
    

    while ((seedBage<days) && (seedAage<days)) {

        if (seedA < seedB) {
        seedA=seedA+(seedA/100)+(seedA % 100) / 10 + ((seedA % 100) % 10);
        seedAage++;
        } 
        
        else if (seedA > seedB) {
        seedB=seedB+(seedB/100)+(seedB % 100) / 10 + ((seedB % 100) % 10);
        seedBage++;
        }
        
        else {
            tallest = seedA;
            return tallest;
        }
    }
    
    
    for (i=seedAage;i<days;i++) {  
            if ((seedA!=seedB) & (seedAage!=days)) {
            seedA=seedA+(seedA/100)+(seedA % 100) / 10 + ((seedA % 100) % 10);
        }
    }
        
    for (i=seedBage;i<days;i++) { 
        if ((seedA!=seedB) & (seedBage!=days)) {
            seedB=seedB+(seedB/100)+(seedB % 100) / 10 + ((seedB % 100) % 10);
            seedBage++;
        }
        
    }


    if (seedB > seedA) {
    tallest = seedB;
    }
    else {
    tallest = seedA;
    }
    
    return tallest;
}",0
jbro301,1696851598,2,"int TallestVine(int seedA, int seedB, int days)
{
 // Set parameters
    int i;
    int seedAage=0;
    int seedBage=0;
    int tallest=seedA;
   
    int j;
    int res;
    int digit;

// Calculate the tallest vine
   while ((seedBage<days) && (seedAage<days)) {

        if (seedA < seedB) {
           j=1;
            while ((seedA / j)!=0) {
                j=j*10;
            
            
            }
            res = seedA;
            digit = 0;
    
            while (j>=10) {
            digit = digit + (res % j) / (j/10);
            res = res % j;
            j = j/10;
            }
            
            seedA = seedA + digit;
            seedAage++;
        } 
        
            else if (seedA > seedB) {
                j=1;
                while ((seedB / j)!=0) {
                j=j*10;
                }

                res = seedB;
                digit = 0;
    
                while (j>=10) {
                digit = digit + (res % j) / (j/10);
                res = res % j;
                j = j/10;
                }
    
                seedB = seedB + digit;
                seedBage++;
            }
        
        else {
            tallest = seedA;
            return tallest;
        }
    }
    
 //If there are still days to grow and one vine is not higher than the other, grow the taller vine   
    for (i=seedAage;i<days;i++) {  
        if ((seedA!=seedB) & (seedAage!=days)) {
            j=1;
            while ((seedA / j)!=0) {
                j=j*10;
            }

            res = seedA;
            digit = 0;
    
            while (j>=10) {
            digit = digit + (res % j) / (j/10);
            res = res % j;
            j = j/10;
            }
    
            seedA = seedA + digit;
            seedAage++;
        }
    }
        
    for (i=seedBage;i<days;i++) { 
        if ((seedA!=seedB) & (seedBage!=days)) {
             j=1;
            while ((seedB / j)!=0) {
                j=j*10;
            }

            res = seedB;
            digit = 0;
    
            while (j>=10) {
            digit = digit + (res % j) / (j/10);
            res = res % j;
            j = j/10;
            }
    
            seedB = seedB + digit;
            seedBage++;
        }
       
    }

//Return the tallest vine
    if (seedB > seedA) {
    tallest = seedB;
    }
    else {
    tallest = seedA;
    }
    
    return tallest;
}",1
jcha574,1697336566,1,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days)
{
    int i=0;
    int j=0;
    int x,y,z;
    int array1 [2000]={0};
    int array2 [2000]={0};
    
    while (i<days){
        x=seedA/100;
        y=(seedA/10)%10;
        z=seedA%10;
        seedA=(x+y+z+seedA);
        array1[i]=seedA;
        
        x=seedB/100;
        y=(seedB/10)%10;
        z=seedB%10;
        seedB=(x+y+z+seedB);
        array2[i]=seedB;
        i++;
    }
    for(i=0;i<days;i++){
        for(j=0;j<days;j++){
            if(array1[i]==array2[j])
            return array1[i];
        }
    }
    
        
    
    if(seedB>seedA){
        return seedB;
    }
    else {
        return seedA;
    }
}",0
jcha574,1697337024,2,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days)
{
    int i=0;
    int j=0;
    int x,y,z,t,s;
    int array1 [2000]={0};
    int array2 [2000]={0};
    
    while (i<days){
        s=(seedA/10000);
        t=(seedA/1000)%10;
        x=(seedA/100)%10;
        y=(seedA/10)%10;
        z=seedA%10;
        seedA=(s+t+x+y+z+seedA);
        array1[i]=seedA;
        
        s=seedB/10000;
        t=(seedB/1000)%10;
        x=(seedB/100)%10;
        y=(seedB/10)%10;
        z=seedB%10;
        seedB=(s+t+x+y+z+seedB);
        array2[i]=seedB;
        i++;
    }
    for(i=0;i<days;i++){
        for(j=0;j<days;j++){
            if(array1[i]==array2[j])
            return array1[i];
        }
    }
    
        
    
    if(seedB>seedA){
        return seedB;
    }
    else {
        return seedA;
    }
}",0
jcha574,1697337264,3,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days)
{
    int i=0;
    int j=0;
    int x,y,z,t,s,q;
    int array1 [200000]={0};
    int array2 [200000]={0};
    
    while (i<days){
        q=(seedA/100000);
        s=(seedA/10000)%10;
        t=(seedA/1000)%10;
        x=(seedA/100)%10;
        y=(seedA/10)%10;
        z=seedA%10;
        seedA=(q+s+t+x+y+z+seedA);
        array1[i]=seedA;
        
        q=(seedB/100000);
        s=(seedB/10000)%10;
        t=(seedB/1000)%10;
        x=(seedB/100)%10;
        y=(seedB/10)%10;
        z=seedB%10;
        seedB=(q+s+t+x+y+z+seedB);
        array2[i]=seedB;
        i++;
    }
    for(i=0;i<days;i++){
        for(j=0;j<days;j++){
            if(array1[i]==array2[j])
            return array1[i];
        }
    }
    
        
    
    if(seedB>seedA){
        return seedB;
    }
    else {
        return seedA;
    }
}
",1
jcla431,1697409917,1,"int TallestVine(int seedA, int seedB, int days);
int SumDigits(int x);

int TallestVine(int seedA, int seedB, int days)
{
	int i;
	int j;
	int temp = seedB;

	for (i = 0; i < days; i++)
	{
		int SumSeedA = SumDigits(seedA);
		seedA = seedA + SumSeedA;

		for (j = 0; j < days; j++)
		{
			int SumSeedB = SumDigits(seedB);
			seedB = seedB + SumSeedB;

			if (seedA == seedB)
			{
				return seedA;
			}

			if ((j == days - 1) && (i != (days - 1)))
			{
				seedB = temp;
			}
		}
	}

	if (seedA > seedB)
	{
		return seedA;
	}

	else
	{
		return seedB;
	}
}

int SumDigits(int x)
{
	int ones, tens, hundreds, sum;
	int step1, step2;

	ones = x % 10;
	step1 = x / 10;
	tens = step1 % 10;
	step2 = x / 100;
	hundreds = step2 % 10;

	sum = ones + tens + hundreds;
}",0
jcla431,1697425775,2,"int TallestVine(int seedA, int seedB, int days);
int SumDigits(int x);

int TallestVine(int seedA, int seedB, int days)
{
	int i;
	int j;
	int temp = seedB;

	for (i = 0; i < days; i++)
	{
		int SumSeedA = SumDigits(seedA);
		seedA = seedA + SumSeedA;

		for (j = 0; j < days; j++)
		{
			int SumSeedB = SumDigits(seedB);
			seedB = seedB + SumSeedB;

			if (seedA == seedB)
			{
				return seedA;
			}

			if ((j == days - 1) && (i != (days - 1)))
			{
				seedB = temp;
			}
		}
	}

	if (seedA > seedB)
	{
		return seedA;
	}

	else
	{
		return seedB;
	}
}

int SumDigits(int x)
{
	int sum = 0;

	while (x > 0)
	{
		int digit = x % 10;
		sum += digit;
		x = x / 10;
	}

	return sum;
}",1
jcla755,1696855629,1,"#include <stdio.h>

// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

// Return x days value for seed
int daysValue(int seed, int days)
{
    int i = 0;
    for(i = 0; i<days; i++)
    {
        seed += digitSum(seed);
    }
    return seed;
}

int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    int day = 0;
    int j = 0;

    // Go day by day
    for(day = 0; day<days; day++)
    {
        // Sum seed digits
        vineA += digitSum(vineA);
        vineB += digitSum(vineB);

        // Check vineB for match
        for(j = 0; j<day+1; j++)
        {
            if(daysValue(seedB, j) == vineA)
            {
                return(vineA);
            }
            else if(daysValue(seedA, j) == vineB)
            {
                return(vineB);
            }
        }
        
    }

    if(vineA > vineB)
    {
        return vineA;
    }
    else
    {
        return vineB;
    }
    
}",0
jcla755,1696856791,2,"// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

// Return x days value for seed
int daysValue(int seed, int days)
{
    int digitSumValue = digitSum(seed);
    return seed + days * digitSumValue;
}

int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    int day = 0;
    int j = 0;

    // Go day by day
    for(day = 0; day<days; day++)
    {
        // Sum seed digits
        vineA += digitSum(vineA);
        vineB += digitSum(vineB);

        // Check vineB for match
        for(j = 0; j<day+1; j++)
        {
            if(daysValue(seedB, j) == vineA)
            {
                return(vineA);
            }
            else if(daysValue(seedA, j) == vineB)
            {
                return(vineB);
            }
        }
        
    }

    if(vineA > vineB)
    {
        return vineA;
    }
    else
    {
        return vineB;
    }
    
}",0
jcla755,1696858406,3,"// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

// Return x days value for seed
int daysValue(int seed, int days)
{
    int i = 0;
    for(i = 0; i<days; i++)
    {
        seed += digitSum(seed);
    }

    return seed;
}


int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    int day = 0;
    int j = 0;

    // Go day by day
    for(day = 0; day<days; day++)
    {
        // Sum seed digits
        vineA += digitSum(vineA);
        vineB += digitSum(vineB);

        // Check vineB for match
        int start = 0;
        if(j-10 > 0)
        {
            start = j-10;
        }

        for(j = start; j<day+1; j++)
        {
            if(daysValue(seedB, j) == vineA)
            {
                return(vineA);
            }
            else if(daysValue(seedA, j) == vineB)
            {
                return(vineB);
            }
        }
        
    }

    if(vineA > vineB)
    {
        return vineA;
    }
    else
    {
        return vineB;
    }
    
}",0
jcla755,1696858551,4,"// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

// Return x days value for seed
int daysValue(int seed, int days)
{
    int i = 0;
    for(i = 0; i<days; i++)
    {
        seed += digitSum(seed);
    }

    return seed;
}


int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    int day = 0;
    int j = 0;

    // Go day by day
    for(day = 0; day<days; day++)
    {
        // Sum seed digits
        vineA += digitSum(vineA);
        vineB += digitSum(vineB);

        // Check vineB for match
        int start = 0;
        if(j-50 > 0)
        {
            start = j-20;
        }

        for(j = start; j<day+1; j++)
        {
            if(daysValue(seedB, j) == vineA)
            {
                return(vineA);
            }
            else if(daysValue(seedA, j) == vineB)
            {
                return(vineB);
            }
        }
        
    }

    if(vineA > vineB)
    {
        return vineA;
    }
    else
    {
        return vineB;
    }
    
}",0
jcla755,1696858593,5,"// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

// Return x days value for seed
int daysValue(int seed, int days)
{
    int i = 0;
    for(i = 0; i<days; i++)
    {
        seed += digitSum(seed);
    }

    return seed;
}


int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    int day = 0;
    int j = 0;

    // Go day by day
    for(day = 0; day<days; day++)
    {
        // Sum seed digits
        vineA += digitSum(vineA);
        vineB += digitSum(vineB);

        // Check vineB for match
        int start = 0;
        if(j-50 > 0)
        {
            start = j-50;
        }

        for(j = start; j<day+1; j++)
        {
            if(daysValue(seedB, j) == vineA)
            {
                return(vineA);
            }
            else if(daysValue(seedA, j) == vineB)
            {
                return(vineB);
            }
        }
        
    }

    if(vineA > vineB)
    {
        return vineA;
    }
    else
    {
        return vineB;
    }
    
}",0
jcla755,1696858633,6,"// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

// Return x days value for seed
int daysValue(int seed, int days)
{
    int i = 0;
    for(i = 0; i<days; i++)
    {
        seed += digitSum(seed);
    }

    return seed;
}


int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    int day = 0;
    int j = 0;

    // Go day by day
    for(day = 0; day<days; day++)
    {
        // Sum seed digits
        vineA += digitSum(vineA);
        vineB += digitSum(vineB);

        // Check vineB for match
        int start = 0;
        if(j-100 > 0)
        {
            start = j-100;
        }

        for(j = start; j<day+1; j++)
        {
            if(daysValue(seedB, j) == vineA)
            {
                return(vineA);
            }
            else if(daysValue(seedA, j) == vineB)
            {
                return(vineB);
            }
        }
        
    }

    if(vineA > vineB)
    {
        return vineA;
    }
    else
    {
        return vineB;
    }
    
}",0
jcla755,1696858876,7,"// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

// Return x days value for seed
int daysValue(int seed, int days)
{
    int i = 0;
    for(i = 0; i<days; i++)
    {
        seed += digitSum(seed);
    }

    return seed;
}


int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    int day = 0;
    int j = 0;

    // Go day by day
    for(day = 0; day<days; day++)
    {
        // Sum seed digits
        vineA += digitSum(vineA);
        vineB += digitSum(vineB);

        // Check vineB for match
        int start = 0;

        if(days>500 && day-10 > 0)
        {
            start = day-10;
        }
        

        for(j = start; j<day+1; j++)
        {
            if(daysValue(seedB, j) == vineA)
            {
                return(vineA);
            }
            else if(daysValue(seedA, j) == vineB)
            {
                return(vineB);
            }
        }
        
    }

    if(vineA > vineB)
    {
        return vineA;
    }
    else
    {
        return vineB;
    }
    
}
",0
jcla755,1696904921,8,"// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    days++;
    int smallestVineSeed;
    int largestVineSeed;
    int smallestVine;
    int largestVine;
    int j = 0;

    if(seedA > seedB)
    {
        smallestVineSeed = seedB;
        smallestVine = seedB;
        largestVineSeed = seedA;
        largestVine = seedA;
    }
    else
    {
        smallestVineSeed = seedA;
        smallestVine = seedA;
        largestVineSeed = seedB;
        largestVine = seedB;
    }

    // Increment day by day
    for(int day = 0; day<days; day++)
    {
        int temp = largestVine;
        // Check larger vine up to current day AND while large vine value is less then current value
        for(j = 0; j<day && temp < smallestVine; j++)
        {
            // Check if this value of small vine appears in large vine
            if(smallestVine == temp+digitSum(temp))
            {
                return smallestVine;
            }

            // Otherwise increase temp
            temp += digitSum(temp);
        }

        if(temp > smallestVine)
        {
            largestVine = temp;
        }   

        // Increase vine
        smallestVine += digitSum(smallestVine);
    }

    for(int day = 0; day<days-1; day++)
    {
        largestVineSeed += digitSum(largestVineSeed);
        smallestVineSeed += digitSum(smallestVineSeed);
    }

    if(smallestVineSeed > largestVineSeed)
    {
        return smallestVineSeed;
    }
    else
    {
        return largestVineSeed;
    }

}",0
jcla755,1696905131,9,"
// Return sum of digits of n
int digitSum(int n)
{
    int sum = 0, m;
    while(n>0)    
    {    
        m=n%10;    
        sum=sum+m;    
        n=n/10;    
    }  

    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    days++;
    int smallestVineSeed;
    int largestVineSeed;
    int smallestVine;
    int largestVine;
    int j = 0;

    if(seedA > seedB)
    {
        smallestVineSeed = seedB;
        smallestVine = seedB;
        largestVineSeed = seedA;
        largestVine = seedA;
    }
    else
    {
        smallestVineSeed = seedA;
        smallestVine = seedA;
        largestVineSeed = seedB;
        largestVine = seedB;
    }

    // Increment day by day
    for(int day = 0; day<days; day++)
    {
        int temp = largestVine;
        // Check larger vine up to current day AND while large vine value is less then current value
        for(j = 0; j<day && temp < smallestVine; j++)
        {
            // Check if this value of small vine appears in large vine
            if(smallestVine == temp+digitSum(temp))
            {
                return smallestVine;
            }

            // Otherwise increase temp
            temp += digitSum(temp);
        }

        if(temp > smallestVine)
        {
            largestVine = temp;
        }   

        if(temp == smallestVine)
        {
            return temp;
        }

        // Increase vine
        smallestVine += digitSum(smallestVine);
    }

    for(int day = 0; day<days-1; day++)
    {
        largestVineSeed += digitSum(largestVineSeed);
        smallestVineSeed += digitSum(smallestVineSeed);
    }

    if(smallestVineSeed > largestVineSeed)
    {
        return smallestVineSeed;
    }
    else
    {
        return largestVineSeed;
    }

}",1
jdu853,1697163389,1,"#include <stdio.h>

// helper function to sum all digits in a number
int SumofDigits(int number){
    int sum = 0;
    while (number != 0){
        sum += (number % 10);
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){ 
    int vineA[100] = {0};
    int vineB[100] = {0};

    vineA[0] = seedA;
    vineB[0] = seedB;

// let all vines grow to full size within days
    for (int i = 1; i <= days; i++){
        vineA[i] = seedA + SumofDigits(seedA);
        seedA = vineA[i];

        vineB[i] = seedB + SumofDigits(seedB);
        seedB = vineB[i];
    }

// after grown, check if any numbers are equal
    for (int i = 0; i <= days; i++){
        for (int j = 0; j <= days; j++){
            if (vineA[i] == vineB[j]){ 
                return vineA[i]; // return where they meet
            }
        }
    }

// return whichever vine grows the tallest
    if (vineA[days] >= vineB[days]){
        return vineA[days]; // max value of vine A
    }
    
    else
        return vineB[days]; // max value of vine B
}",0
jdu853,1697267624,2,"#include <stdio.h>

// helper function to sum all digits in a number
int SumofDigits(int number){
    int sum = 0;
    while (number != 0){
        sum += (number % 10);
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){ 
    FILE *fileA = fopen(""vineA.txt"", ""w"");
    FILE *fileB = fopen(""vineB.txt"", ""w"");

//print initial values of seeds to files
    fprintf(fileA,""%d\n"", seedA);
    fprintf(fileB,""%d\n"", seedB);

// let all vines grow to full size within days
    for (int i = 1; i <= days; i++){
        seedA += SumofDigits(seedA);
        seedB += SumofDigits(seedB);

        fprintf(fileA, ""%d\n"", seedA);
        fprintf(fileB, ""%d\n"", seedB);
    }

    fclose(fileA);
    fclose(fileB);

// Compare files and return the result
    fileA = fopen(""vineA.txt"", ""r"");
    fileB = fopen(""vineB.txt"", ""r"");

    int vineA, vineB;
    while (fscanf(fileA, ""%d"", &vineA) != EOF) {
        while (fscanf(fileB, ""%d"", &vineB) != EOF){
            if (vineA == vineB){
                fclose(fileA);
                fclose(fileB);
                return vineA;
            }
        }
        fseek(fileB, 0, SEEK_SET);
    }

    if (vineA >= vineB) {
        return vineA;
        fclose(fileA);
        fclose(fileB);
    } 
    else 
        return vineB;
        fclose(fileA);
        fclose(fileB);
    
}",0
jdu853,1697267851,3,"#include <stdio.h>

// helper function to sum all digits in a number
int SumofDigits(int number){
    int sum = 0;
    while (number != 0){
        sum += (number % 10);
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){ 
    FILE *fileA = fopen(""vineA.txt"", ""w"");
    FILE *fileB = fopen(""vineB.txt"", ""w"");

//print initial values of seeds to files
    fprintf(fileA,""%d\n"", seedA);
    fprintf(fileB,""%d\n"", seedB);

// let all vines grow to full size within days
    for (int i = 1; i <= days; i++){
        seedA += SumofDigits(seedA);
        seedB += SumofDigits(seedB);

        fprintf(fileA, ""%d\n"", seedA);
        fprintf(fileB, ""%d\n"", seedB);
    }

    fclose(fileA);
    fclose(fileB);

// Compare files and return the result
    fileA = fopen(""vineA.txt"", ""r"");
    fileB = fopen(""vineB.txt"", ""r"");

    int vineA, vineB;
    while (fscanf(fileA, ""%d"", &vineA) != EOF) {
        while (fscanf(fileB, ""%d"", &vineB) != EOF){
            if (vineA == vineB){
                fclose(fileA);
                fclose(fileB);
                return vineA;
            }
        }
        fseek(fileB, 0, SEEK_SET);
    }

    if (vineA >= vineB) {
        fclose(fileA);
        fclose(fileB);
        return vineA;

    } 
    else {
        fclose(fileA);
        fclose(fileB);
        return vineB;
        
    }
}",1
jear460,1697360682,1,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = vineA;
        int tempB = vineB;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        if (sumA == vineB) {
            vineA = vineB;
        } else if (sumB == vineA) {
            vineB = vineA;
        }

        vineA += sumA;
        vineB += sumB;
    }

    return (vineA > vineB) ? vineA : vineB;
}",0
jear460,1697360794,2,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = vineA;
        int tempB = vineB;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        if (sumA == vineB && sumB == vineA) {
            vineA = vineB = sumA;
        } else if (sumA == vineB) {
            vineA = vineB;
        } else if (sumB == vineA) {
            vineB = vineA;
        }

        vineA += sumA;
        vineB += sumB;
    }

    return (vineA > vineB) ? vineA : vineB;
}",0
jgol495,1697010833,1,"// By Jonathan G

// #include <stdbool.h>
// #include <stdint.h>
// typedef uint32_t u32;

int SumDigits(int in){
    int sum = 0;
    while(in != 0){
        sum += in % 10;
        in /= 10;
    }
    return sum;
}

int Grow(int seed, int days){
    for(int i = 0; i < days; i++){
        seed += SumDigits(seed);
    }
    return seed;
}

// RIP Vine
int TallestVine(int seedA, int seedB, int days){
    // We are advised against using arrays - so I won't use them.
    #define CheckRecord(a, b, i) if(a == b && (i > recordDays || (i == recordDays && a > recordHeight))) { \
                                     recordDays = i; \
                                     recordHeight = a; \
                                     break; \
                                 }

    // We will grow seedB to days, check if it matches seedA along the route and set a record.
    // Then we grow seedA by one step, grow seedB to days, and stuff happens.

    int recordDays = -1;
    int recordHeight = 0;

    int treeA = seedA;
    for(int j = 0; j < days; j++){
        // Grow treeB step by step and look to set a height record
        int iterdays = (recordDays != -1) ? recordDays : days - 1;
        int treeB = seedB;
        for(int i = 0; i <= iterdays; i++){
            treeB = Grow(treeB, 1);
            CheckRecord(treeB, treeA, i);
        }
        // Increment treeA by one step and look to set a record again.
        treeA = Grow(treeA, 1);
    }

    // If no merge ever happened, pick the larger of the two trees
    if(recordDays == -1){
        int treeA = Grow(seedA, days);
        int treeB = Grow(seedB, days);
        return (treeA > treeB) ? treeA : treeB;
    }

    return recordHeight;
}",0
jgol495,1697018284,2,"#include <stdio.h>
// By Jonathan G

int SumDigits(int in){
    int sum = 0;
    while(in != 0){
        sum += in % 10;
        in /= 10;
    }
    return sum;
}

int Grow(int sapling, int days){
    for(int i = 0; i < days; i++){
        sapling += SumDigits(sapling);
    }
    return sapling;
}

// RIP Vine
int TallestVine(int seedA, int seedB, int days){
    // We are advised against using arrays - so I won't use them.

    if(seedA == seedB){ return seedA; }

    // We will grow seedB to days, check if it matches seedA along the route and set a record.
    // Then we grow seedA by one step, grow seedB to days, and stuff happens.

    int recordDays = -1;
    int recordHeight = 0;

    int treeA = seedA;
    for(int j = 0; j <= days; j++){
        if(j != 0){
            // Increment treeA by one step and look to set a record again.
            treeA = Grow(treeA, 1);
        }
        // Grow treeB step by step and look to set a height record
        int treeB = seedB;
        for(int i = 0; i < days; i++){
            treeB = Grow(treeB, 1);
            if(treeA == treeB){
                // End of this growth attempt
                if(i > recordDays || (i == recordDays && treeA > recordHeight)){
                    recordDays = (j > i) ? j : i;
                    recordHeight = treeA;
                }
                break;
            }

        }
    }

    // If no merge ever happened, pick the larger of the two trees
    if(recordDays == -1){
        int treeA = Grow(seedA, days);
        int treeB = Grow(seedB, days);
        return (treeA > treeB) ? treeA : treeB;
    }

    return recordHeight;
}",0
jgol495,1697018849,3,"// By Jonathan G

int SumDigits(int in){
    int sum = 0;
    while(in != 0){
        sum += in % 10;
        in /= 10;
    }
    return sum;
}

int Grow(int sapling, int days){
    for(int i = 0; i < days; i++){
        sapling += SumDigits(sapling);
    }
    return sapling;
}

// RIP Vine
int TallestVine(int seedA, int seedB, int days){
    // We are advised against using arrays - so I won't use them.

    if(seedA == seedB){ return seedA; }

    // We will grow seedB to days, check if it matches seedA along the route and set a record.
    // Then we grow seedA by one step, grow seedB to days, and stuff happens.

    int recordDays = -1;
    int recordHeight = 0;

    int treeA = seedA;
    int iterdays = days;
    for(int j = 0; j <= iterdays; j++){
        if(j != 0){
            // Increment treeA by one step and look to set a record again.
            treeA = Grow(treeA, 1);
        }
        // Grow treeB step by step and look to set a height record
        int treeB = seedB;
        for(int i = 0; i < days; i++){
            treeB = Grow(treeB, 1);
            if(treeA == treeB){
                // End of this growth attempt
                if(i > recordDays || (i == recordDays && treeA > recordHeight)){
                    recordDays = (j > i) ? j : i;
                    recordHeight = treeA;
                    iterdays = recordDays;
                }
                break;
            }

        }
    }

    // If no merge ever happened, pick the larger of the two trees
    if(recordDays == -1){
        int treeA = Grow(seedA, days);
        int treeB = Grow(seedB, days);
        return (treeA > treeB) ? treeA : treeB;
    }

    return recordHeight;
}",0
jgol495,1697020189,4,"// By Jonathan G

int SumDigits(int in){
    int sum = 0;
    while(in != 0){
        sum += in % 10;
        in /= 10;
    }
    return sum;
}

int Grow(int sapling, int days){
    for(int i = 0; i < days; i++){
        sapling += SumDigits(sapling);
    }
    return sapling;
}

// RIP Vine
int TallestVine(int seedA, int seedB, int days){
    // We are advised against using arrays - so I won't use them.

    if(seedA == seedB){ return seedA; }

    // A, try all Bs, grow, try all Bs again, grow.
    // When a match is discovered that is automatically the tallest match avaliable as following that they behave identically.
    int treeA = seedA;
    for(int i = 0; i <= days; i++){
        if(i != 0){ treeA = Grow(treeA, 1); }

        int treeB = seedB;
        for(int j = 0; j <= days; j++){
            if(j != 0){ treeB = Grow(treeB, 1); }

            if(treeA == treeB){
                return treeA;
            }
        }
    }

    // If no merge ever happened, pick the larger of the two trees
    int a = Grow(seedA, days);
    int b = Grow(seedB, days);
    return (a > b) ? a : b;
}",1
jhwa027,1697429739,1,"#include <stdio.h>

// Function to calculate the sum of the digits of a number.
int sumDigits(int num) {
    int sum = 0;
    while (num) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int currentA = seedA, currentB = seedB;

    // For each day
    for (int i = 0; i < days; ++i) {

        // For both vines, we calculate the growth based on the sum of the digits of their current height.
        currentA += sumDigits(currentA);
        currentB += sumDigits(currentB);

        // If the new height of vineA is equal to any previous height of vineB or vice versa, the vines have joined.
        if (currentA == currentB) {
            return currentA; // Or currentB, since they are the same.
        }
    }

    // Return the greater height after the given number of days.
    return (currentA > currentB) ? currentA : currentB;
}",0
jhwa027,1697429841,2,"#include <stdio.h>

// Function to calculate the sum of the digits of a number.
int sumDigits(int num) {
    int sum = 0;
    while (num) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int currentA = seedA, currentB = seedB;
    int historyA[days], historyB[days];  // Storing history to check for matches later

    // Initialize history
    for(int i = 0; i < days; i++) {
        historyA[i] = -1;
        historyB[i] = -1;
    }

    // For each day
    for (int i = 0; i < days; ++i) {
        // Store current values in history
        historyA[i] = currentA;
        historyB[i] = currentB;

        // For both vines, check if current value matches any previous value of the other vine
        for(int j = 0; j <= i; j++) {
            if(currentA == historyB[j] || currentB == historyA[j]) {
                return (currentA == historyB[j]) ? currentA : currentB;
            }
        }

        // If they don't join, they grow based on their current height's digit sum.
        currentA += sumDigits(currentA);
        currentB += sumDigits(currentB);
    }

    // Return the greater height after the given number of days.
    return (currentA > currentB) ? currentA : currentB;
}

",0
jjun879,1697201489,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int vineA[200];
    int vineB[200];
    vineA[0] = seedA;
    vineB[0] = seedB;

    for (int day = 1; day <= days; day++) {
        int growthOfA = 0;
        int growthOfB = 0;
        int tempA = vineA[day - 1];
        int tempB = vineB[day - 1];

        // Calculate growth of vines A and B for each day
            // Vine A
            int tempAhunds = tempA / 100;
            int tempAtens = (tempA / 10) % 10;
            int tempAones = tempA % 10;
            growthOfA = tempAhunds + tempAtens + tempAones;

            //Vine B
            int tempBhunds = tempB / 100;
            int tempBtens = (tempB / 10) % 10;
            int tempBones = tempB % 10;
            growthOfB = tempBhunds + tempBtens + tempBones;
     
            vineA[day] = vineA[day - 1] + growthOfA;
            vineB[day] = vineB[day - 1] + growthOfB;
    }
       // Compare the arrays for first equal value different indices and print it
    int equal = 0;
    int tallest = 0;
    for (int dayA = 0; dayA <= days; dayA++) {
        for (int dayB = 0; dayB <= days; dayB++) {
            if (dayA != dayB && vineA[dayA] == vineB[dayB]) {
                tallest = vineA[dayA];
                equal = 1;
                break;
            }
        }
        if (equal) {
            break;
        }
    }

    if (tallest != 0) {
        return tallest;
    } 
    else if (vineA[days] > vineB[days]) {
        return vineA[days];
    }
    else if (vineA[days] < vineB[days]){
        return vineB[days];
    }
    else if (vineA[days] == vineB[days]) {
        return vineA[days];
    }
    else {
        return vineA[days];
    }
}",0
jkah253,1697063156,1,"int SumDigits(int number) {
    int sum = 0;

    while (number > 0) {
        sum += number % 10;
        // all handles integers only
        number = number / 10;
    }

    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int vines[2][2] = { {seedA, 0} , {seedB, 0} };
    
    while (1) {
        // check if vines are same
        if (vines[0][0] == vines[1][0]) {
            return vines[0][0];
        }

        int workingVine;
        
        // find workingVine (A or B)
        if (vines[0][0] < vines[1][0]) {
            workingVine = 0; // A smaller than B   
        } else {
            workingVine = 1; // B is smaller
        }

        // if workingVine is already fully grown
        if (vines[workingVine][1] == days) {
            
            int maxVine = 1 - workingVine;

            // if other is also fully grown, then return other Vine.
            if (vines[maxVine][1] == days) {
                return vines[maxVine][0];
            }

            // else we need to swap the workingVine to grow it
            workingVine = maxVine;
        }

        // grow the workingVine (usually smaller, but the larger one if 
        // smallest has reached max size)

        vines[workingVine][1]++; // increase the day
        vines[workingVine][0] += SumDigits(vines[workingVine][0]);

    }

}
",1
jkim828,1697296460,1,"int TallestVine(int seedA, int seedB, int days)
{
    int arrayA[(days + 1)];
    int arrayB[(days + 1)];

    arrayA[0] = seedA;
    arrayB[0] = seedB;

    int i;
    for (i = 1; i < (days + 1); i++) {
        int sumA, sumB;
        
        int a1,b1,c1,d1,e1;
        int a2,b2,c2,d2,e2;

        a1 = (arrayA[(i - 1)] / 10000);
        b1 = (arrayA[(i - 1)] - (a1 * 10000)) / 1000; 
        c1 = (arrayA[(i - 1)] - (a1 * 10000) - (b1 * 1000)) / 100;
        d1 = (arrayA[(i - 1)] - (a1 * 10000) - (b1 * 1000) - (c1 * 100)) / 10;
        e1 = arrayA[(i - 1)] - (a1 * 10000) - (b1 * 1000) - (c1 * 100) - (d1 * 10);

        a2 = (arrayB[(i - 1)] / 10000);
        b2 = (arrayB[(i - 1)] - (a2 * 10000)) / 1000; 
        c2 = (arrayB[(i - 1)] - (a2 * 10000) - (b2 * 1000)) / 100;
        d2 = (arrayB[(i - 1)] - (a2 * 10000) - (b2 * 1000) - (c2 * 100)) / 10;
        e2 = arrayB[(i - 1)] - (a2 * 10000) - (b2 * 1000) - (c2 * 100) - (d2 * 10);

        sumA = a1 + b1 + c1 + d1+ e1;
        sumB = a2 + b2 + c2 + d2+ e2;

        arrayA[i] = arrayA[(i - 1)] + sumA;
        arrayB[i] = arrayB[(i - 1)] + sumB;
    }

    int j;
    for (i = 1; i < (days + 1); i++) {
        for (j = 1; j < (days + 1); j++) {
            if (arrayA[i] == arrayB[j]) {
                return arrayA[i];
            }
        }
    }

    if (arrayA[days] > arrayB[days]) {
        return arrayA[days];
    } else {
        return arrayB[days];
    }
}",0
jkim828,1697305768,2,"int growing(int grow)
{
    int sum = 0;
    int temp = grow;
    int sumVal;

    while (temp != 0) {
        sumVal = temp % 10;

        sum += sumVal;

        temp = (temp - sumVal) / 10;
    }

    int aftergrow;
    aftergrow = grow + sum;

    return aftergrow;
}

int TallestVine(int seedA, int seedB, int days)
{
    int i = 1;
    int j = 1;
    while (i < (days + 1) || j < (days + 1)) {

        if (seedA > seedB) {
            if (j == days + 1) {
                seedA = growing(seedA);
                i++;
            } else {
                seedB = growing(seedB);
                j++;
            }
        } else if (seedA < seedB) {
            if (i == days + 1) {
                seedB = growing(seedB);
                j++;
            } else {
                seedA = growing(seedA);
                i++;
            }
        } else if (seedA == seedB) {
            return seedA;
        }
    }
    
    if (seedA > seedB) {
        return seedA;
    } else if (seedA < seedB) {
        return seedB;
    } else {
        return seedA;
    }
}",1
jlah077,1697439379,1,"int SumDigits(int number)
{
    int remainder = 0;
    int sum = 0;
    while (number != 0)
    {
        remainder = number % 10;
        sum = sum + remainder;
        number = number / 10;
    }
    return sum;
}

int TallestVine(int seed_A, int seed_B, int days)
{
    int num_A = seed_A;
    int num_B = seed_B;
    int answer = 0;
    for (int a = 0; a < days; a++)
    {
        num_A += SumDigits(num_A);
        num_B = seed_B;
        for (int b = 0; b < days; b++)
        {
            num_B += SumDigits(num_B);
            if (num_A == num_B)
            {
                return num_A;
            }
        }
    }

    if (answer != 0)
    {
        return answer;
    }
    else if (num_A >= num_B)
    {
        return num_A;
    }
    else
    {
        return num_B;
    }
}",1
jli917,1697434960,1,"
int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;

    for (int day = 1; day <= days; day++) {
        heightA += SumOfDigits(heightA);
        heightB += SumOfDigits(heightB);

        if (heightA == heightB) {
            // If the vines join, the height is the same for both
            return heightA;
        }
    }

    // If the vines don't join, return the maximum height reached by either vine
    return (heightA > heightB) ? heightA : heightB;
}

",0
jlia486,1697446024,1,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;  // Initialize vine A with its seed value.
    int vineB = seedB;  // Initialize vine B with its seed value.
    
    // Arrays to store the history of heights for each vine.
    int historyA[days + 1];
    int historyB[days + 1];

    // Initialize the history with the seed values.
    historyA[0] = seedA;
    historyB[0] = seedB;

    // Simulate the growth of the vines for the specified number of days.
    for (int day = 1; day <= days; day++) {
        // Calculate the sum of the digits for the current heights.
        int sumOfDigitsA = 0;
        int sumOfDigitsB = 0;

        // Calculate the sum of the digits for vine A.
        int tempA = vineA;
        while (tempA > 0) {
            sumOfDigitsA += tempA % 10;
            tempA /= 10;
        }

        // Calculate the sum of the digits for vine B.
        int tempB = vineB;
        while (tempB > 0) {
            sumOfDigitsB += tempB % 10;
            tempB /= 10;
        }

        // Add the sum of digits to the current height of each vine.
        vineA += sumOfDigitsA;
        vineB += sumOfDigitsB;

        // Check if the current height of one vine matches the height of the other vine on any day.
        for (int i = 0; i < day; i++) {
            if (vineA == historyB[i] || vineB == historyA[i]) {
                return vineA > vineB ? vineA : vineB;
            }
        }

        // Update the history for each vine with their current heights.
        historyA[day] = vineA;
        historyB[day] = vineB;
    }

    // If the vines do not join after the specified number of days, return the tallest height.
    return vineA > vineB ? vineA : vineB;
}
",0
jlia486,1697447415,2,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;  // Initialize vine A with its seed value.
    int vineB = seedB;  // Initialize vine B with its seed value.
    
    // Arrays to store the history of heights for each vine.
    int historyA[days + 1];
    int historyB[days + 1];

    // Initialize the history with the seed values.
    historyA[0] = seedA;
    historyB[0] = seedB;

    // Simulate the growth of the vines for the specified number of days.
    for (int day = 1; day <= days; day++) {
        // Calculate the sum of the digits for the current heights.
        int sumOfDigitsA = 0;
        int sumOfDigitsB = 0;

        // Calculate the sum of the digits for vine A.
        int tempA = vineA;
        while (tempA > 0) {
            sumOfDigitsA += tempA % 10;
            tempA /= 10;
        }

        // Calculate the sum of the digits for vine B.
        int tempB = vineB;
        while (tempB > 0) {
            sumOfDigitsB += tempB % 10;
            tempB /= 10;
        }

        // Add the sum of digits to the current height of each vine.
        vineA += sumOfDigitsA;
        vineB += sumOfDigitsB;

        // Update the history for each vine with their current heights.
        historyA[day] = vineA;
        historyB[day] = vineB;

        // Check if the current height of one vine is in the history of the other vine.
        for (int i = 0; i < day; i++) {
            if (vineA == historyB[i]) {
                return vineA;
            }
            if (vineB == historyA[i]) {
                return vineB;
            }
        }
    }

    // If the vines do not join after the specified number of days, return the tallest height.
    return (vineA > vineB) ? vineA : vineB;
}",0
jlia948,1697413553,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int day = 1;
    int initB = seedB;

    for(int i = 0; i < days; i++) {
        int numA = seedA;
        while (numA > 0) {
            seedA += numA % 10;
            numA /= 10;
        }
        seedB = initB;
        for (int j=0; j< days; j++) {
            int numB = seedB;
            while (numB > 0) {
                seedB += numB % 10;
                numB /= 10;
            }
            if (seedB == seedA) {
                return seedA;
            }
        }
    }
    if(seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }

}",0
jlia948,1697413579,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int initB = seedB;

    for(int i = 0; i < days; i++) {
        int numA = seedA;
        while (numA > 0) {
            seedA += numA % 10;
            numA /= 10;
        }
        seedB = initB;
        for (int j=0; j< days; j++) {
            int numB = seedB;
            while (numB > 0) {
                seedB += numB % 10;
                numB /= 10;
            }
            if (seedB == seedA) {
                return seedA;
            }
        }
    }
    if(seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }

}",1
jluo379,1697451618,1,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int tempA = vineA;
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        int sumB = 0;
        int tempB = vineB;
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        if (sumA == sumB) {
            return sumA;
        }

        if (sumA > sumB) {
            vineB += sumB;
        } else {
            vineA += sumA;
        }
    }

    return (vineA > vineB) ? vineA : vineB;
}",0
jluo379,1697451737,2,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = vineA;
        int tempB = vineB;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        if (sumA == sumB) {
            return sumA; 
        }

        if (sumA > sumB) {
            vineB += sumB;
        } else {
            vineA += sumA;
        }
    }

    return (vineA > vineB) ? vineA : vineB;
}",0
jluo379,1697451837,3,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int tempA = vineA;
        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        int sumB = 0;
        int tempB = vineB;
        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        if (sumA == sumB) {
            return sumA;
        }

        if (sumA > sumB) {
            vineB += sumB;
        } else {
            vineA += sumA;
        }
    }

    return (vineA > vineB) ? vineA : vineB;
}








",0
jpar611,1697432697,1,"int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int previousA[200] = {0}; // to store previous heights of vine A
    int previousB[200] = {0}; // to store previous heights of vine B
    int indexA = 0, indexB = 0;

    for (int i = 0; i < days; i++) {
        // Store the current height of each vine
        previousA[indexA++] = seedA;
        previousB[indexB++] = seedB;

        // Check if current height of A matches any previous height of B
        for (int j = 0; j < indexB; j++) {
            if (seedA == previousB[j]) {
                return seedA;
            }
        }

        // Check if current height of B matches any previous height of A
        for (int j = 0; j < indexA; j++) {
            if (seedB == previousA[j]) {
                return seedB;
            }
        }

        // Grow the vines
        seedA += sumOfDigits(seedA);
        seedB += sumOfDigits(seedB);
    }

    // If the vines haven't joined by the end of the days, return the taller vine
    return (seedA > seedB) ? seedA : seedB;
}
",0
jpar611,1697432871,2,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int historyA[days];
    int historyB[days];
    historyA[0] = seedA;
    historyB[0] = seedB;

    for (int i = 1; i < days; i++) {
        historyA[i] = historyA[i - 1] + sumOfDigits(historyA[i - 1]);
        historyB[i] = historyB[i - 1] + sumOfDigits(historyB[i - 1]);

        for (int j = 0; j < i; j++) {
            if (historyA[i] == historyB[j] || historyB[i] == historyA[j]) {
                return historyA[i] > historyB[i] ? historyA[i] : historyB[i];
            }
        }
    }

    return historyA[days - 1] > historyB[days - 1] ? historyA[days - 1] : historyB[days - 1];
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));
    printf(""Tallest vine = %d\n"", TallestVine(20, 1000, 72));
    printf(""Tallest vine = %d\n"", TallestVine(20, 1000, 73));
    return 0;
}",0
jpar611,1697432881,3,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int historyA[days];
    int historyB[days];
    historyA[0] = seedA;
    historyB[0] = seedB;

    for (int i = 1; i < days; i++) {
        historyA[i] = historyA[i - 1] + sumOfDigits(historyA[i - 1]);
        historyB[i] = historyB[i - 1] + sumOfDigits(historyB[i - 1]);

        for (int j = 0; j < i; j++) {
            if (historyA[i] == historyB[j] || historyB[i] == historyA[j]) {
                return historyA[i] > historyB[i] ? historyA[i] : historyB[i];
            }
        }
    }

    return historyA[days - 1] > historyB[days - 1] ? historyA[days - 1] : historyB[days - 1];
}
",0
jpau410,1696925405,1,"#include <stdio.h>

int ADDVINE(int number)
{
    int A = number/100;
    int B = number/10 - A * 10;
    number = number + A + (B) + (number - A * 100 - B * 10);
    return number;
}

int TallestVine(int seedA, int seedB, int days)
{
    int current = seedA;
    for (int i = 0; i < days; i++) {
        if (current == seedB) {
                return current;
        }
        
        for (int j = 0; j < days; j++) {
            current = ADDVINE(current);
            if (current == seedB) {
                return current;
            }
        }
        current = seedA;
        seedB = ADDVINE(seedB);
    }
    for (int i = 0; i < days; i++) {
        seedA = ADDVINE(seedA);
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
jpau410,1696926719,2,"#include <stdio.h>

int ADDVINE(int number)
{
    int sum = 0;
    int original = number;
    while (number != 0) {
        sum = sum + number % 10;
        number = number/10;
    }
    sum = original + sum;
    return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    int current = seedA;
    if (current == seedB) {
                return current;
    }
    for (int i = 0; i < days; i++) {
        seedB = ADDVINE(seedB);
        if (current == seedB) {
                return current;
        }
        for (int j = 0; j < days; j++) {
            current = ADDVINE(current);
            if (current == seedB) {
                return current;
            }
        }
        current = seedA;
    }
    for (int i = 0; i < days; i++) {
        seedA = ADDVINE(seedA);
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",1
jsan813,1697447531,1,"int TallestVine(int seedA, int seedB, int days)
{
	int seed1 = seedA;
	int seed2 = seedB;
	int temp1 = seedA;
	int temp2 = seedB;
	int digits1[3] = { 0 };
	int digits2[3] = { 0 };
	int count = 0;
	int tallestVine = seedB;
	int tallest1 = 0;
	int tallest2 = 0;

	for (int i = 0; i <= days; i++) {

		/* Extracts and stores the digits of number */
		temp1 = seed1;
		while (seed1) {
			digits1[count] = seed1 % 10;
			seed1 /= 10;
			count++;
		}
		count = 0; // reset count
		seed1 = temp1; // revert seed1

		for (int j = 0; j <= days; j++) {

			/* Updates tallest vine if detected */
			temp2 = seed2;
			if (seed1 == seed2 && seed2 > tallestVine) {
				tallestVine = seed2;
				break;
			}

			/* Extracts and stores the digits of number */
			while (seed2) {
				digits2[count] = seed2 % 10;
				seed2 /= 10;
				count++;
			}
			count = 0; // reset count
			seed2 = temp2; // revert seed2

			if (seed2 > tallest2) {
				tallest2 = seed2;
			}

			seed2 = seed2 + digits2[0] + digits2[1] + digits2[2]; // plant growth

		}

		if (seed1 > tallest1) {
			tallest1 = seed1;
		}

		seed1 = seed1 + digits1[0] + digits1[1] + digits1[2]; // plant growth

		/* Resets seed B */
		seed2 = seedB;
		temp2 = seedB;

		if (tallestVine != seed2) {
			break;
		}
		
	}

	if (tallestVine == seedB) {
		if (tallest1 > tallest2) {
			tallestVine = tallest1;
		}
		else {
			tallestVine = tallest2;
		}
	}

	return tallestVine;
}",0
jsan813,1697447941,2,"int TallestVine(int seedA, int seedB, int days)
{
	int seed1 = seedA;
	int seed2 = seedB;
	int temp1 = seedA;
	int temp2 = seedB;
	int digits1[100] = { 0 };
	int digits2[100] = { 0 };
	int count1 = 0;
	int count2 = 0;
	int tallestVine = seedB;
	int tallest1 = 0;
	int tallest2 = 0;

	for (int i = 0; i <= days; i++) {

		/* Extracts and stores the digits of number */
		temp1 = seed1;
		while (seed1) {
			digits1[count1] = seed1 % 10;
			seed1 /= 10;
			count1++;
		}
		seed1 = temp1; // revert seed1

		for (int j = 0; j <= days; j++) {

			/* Updates tallest vine if detected, then breaks */
			temp2 = seed2;
			if (seed1 == seed2 && seed2 > tallestVine) {
				tallestVine = seed2;
				break;
			}

			/* Extracts and stores the digits of number */
			while (seed2) {
				digits2[count2] = seed2 % 10;
				seed2 /= 10;
				count2++;
			}
			seed2 = temp2; // revert seed2

			if (seed2 > tallest2) {
				tallest2 = seed2;
			}

			for (int k = 0; k < count2; k++) {
				seed2 += digits2[k]; // plant growth
			}
			count2 = 0;

		}

		if (seed1 > tallest1) {
			tallest1 = seed1;
		}

		for (int k = 0; k < count1; k++) {
			seed1 += digits1[k]; // plant growth
		}
		count1 = 0;

		/* Resets seed B */
		seed2 = seedB;
		temp2 = seedB;

		/* breaks out of for loop */
		if (tallestVine != seed2) {
			break;
		}
		
	}

	if (tallestVine == seedB) {
		if (tallest1 > tallest2) {
			tallestVine = tallest1;
		}
		else {
			tallestVine = tallest2;
		}
	}

	return tallestVine;
}",1
jsim418,1697011057,1,"#include <stdio.h>

int Grow(int seed) {
    int hunds;
    int tens;
    int ones;

    hunds = (seed / 100);
    tens = (seed - hunds*100)/10;
    ones = seed - hunds*100 - tens*10;
    count++;
    return (seed + hunds + tens + ones);
}

int TallestVine(int seedA, int seedB, int days) {
    int tempA = seedA;
    int tempB = seedB;

    if (tempA == tempB) {
        return tempA;
    }
    
    for (int i = 0; i<days;i++) { //seed a grows.
        for(int j = 0; j<days;j++){ //seed b grows.
            tempB = Grow(tempB);
            if (tempB == tempA) {
                return tempB;
            }
        }
        tempA = Grow(tempA);
        tempB = seedB;
    }
    
    if (tempA > tempB) {
        return tempA;
    } else {
        return tempB;
    }
}
",0
jsim418,1697011083,2,"#include <stdio.h>

int Grow(int seed) {
    int hunds;
    int tens;
    int ones;

    hunds = (seed / 100);
    tens = (seed - hunds*100)/10;
    ones = seed - hunds*100 - tens*10;
    return (seed + hunds + tens + ones);
}

int TallestVine(int seedA, int seedB, int days) {
    int tempA = seedA;
    int tempB = seedB;

    if (tempA == tempB) {
        return tempA;
    }
    
    for (int i = 0; i<days;i++) { //seed a grows.
        for(int j = 0; j<days;j++){ //seed b grows.
            tempB = Grow(tempB);
            if (tempB == tempA) {
                return tempB;
            }
        }
        tempA = Grow(tempA);
        tempB = seedB;
    }
    
    if (tempA > tempB) {
        return tempA;
    } else {
        return tempB;
    }
}
",0
jsim643,1697256248,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	FILE *fp;
	char filename[200];

	printf(""Enter filename:\n"");
	scanf(""%s"", filename);
	fp = fopen(filename, ""r"");

	if (fp == NULL) {
		printf(""Error opening the file.\n"");
        return 1;
	}
    int scores[11] = {0};
    int score;

    while (fscanf(fp, ""%d"", &score) != EOF) {
        int bucket = score / 10;
        scores[bucket]++;
    }

    fclose(fp);

    // Print the histogram
    for (int i = 0; i < 11; i++) {
        printf(""%d0 : "", i);
        for (int j = 0; j < scores[i]; j++) {
            printf(""X"");
        }
        printf(""\n"");
    }

	return 0;
}
",0
jwed606,1696834436,1,"
int my_max(int a, int b)
{
    if (a < b)
        return b;
    return a;
}

int max3(int a, int b, int c)
{
    return my_max(my_max(a, b), c);
}

int SumOfDigits(int num)
{
    int sum = 0;
    while (num > 0)
    {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seed1, int seed2, int days)
{
    int max = 0;
    int tree1 = seed1;
    int tree2 = seed2;
    for (int day = 0; day < days + 1; ++day)
    {
        tree2 = seed2;
        for (int other_day = 0; other_day < days + 1; ++other_day)
        {
            if (tree1 == tree2)
                return tree1;
            max = max3(max, tree1, tree2);

            tree2 += SumOfDigits(tree2);
        }
        tree1 += SumOfDigits(tree1);
    }
    return max;
}",1
jwon248,1696834733,1,"#include <stdio.h>

int SumOfSeed(int seed, int days)
{
    int sum = seed, digit, i;
    if (days == 0)
    {
        return seed;
    }
    else
    {
        while (seed > 0)
        {
            digit = seed % 10;
            sum += digit;
            seed /= 10;
        }

        return SumOfSeed(sum, days - 1);
    }
}

int TallestVine(int seedA, int seedB, int days)
{
    int i, j;
    int tallest;
    for (i = 0; i <= days; i++)
    {
        for (j = 0; j <= days; j++)
        {
            if (SumOfSeed(seedA, i) == SumOfSeed(seedB, j))
            {
                tallest = SumOfSeed(seedA, i);
                return tallest;
            }
            else
            {
                if (SumOfSeed(seedA, i) > SumOfSeed(seedB, j))
                {
                    tallest = SumOfSeed(seedA, i);
                }
                else
                {
                    tallest = SumOfSeed(seedB, j);
                }
            }
        }
    }
    return tallest;
}",0
jwon248,1696834748,2,"#include <stdio.h>

int SumOfSeed(int seed, int days)
{
    int sum = seed, digit;
    if (days == 0)
    {
        return seed;
    }
    else
    {
        while (seed > 0)
        {
            digit = seed % 10;
            sum += digit;
            seed /= 10;
        }

        return SumOfSeed(sum, days - 1);
    }
}

int TallestVine(int seedA, int seedB, int days)
{
    int i, j;
    int tallest;
    for (i = 0; i <= days; i++)
    {
        for (j = 0; j <= days; j++)
        {
            if (SumOfSeed(seedA, i) == SumOfSeed(seedB, j))
            {
                tallest = SumOfSeed(seedA, i);
                return tallest;
            }
            else
            {
                if (SumOfSeed(seedA, i) > SumOfSeed(seedB, j))
                {
                    tallest = SumOfSeed(seedA, i);
                }
                else
                {
                    tallest = SumOfSeed(seedB, j);
                }
            }
        }
    }
    return tallest;
}",0
jwon248,1697233606,3,"#include <stdio.h>

int SumOfSeed(int seed)
{
    int sum = 0, digit;
    while (seed > 0)
    {
        digit = seed % 10;
        sum += digit;
        seed /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int iDayA = 0, jDayB = 0;
    while (iDayA < days || jDayB < days)
    {
        if (seedA == seedB)
        {
            return seedA;
        }
        else if ((jDayB == days && iDayA < days) || (seedA < seedB && iDayA < days))
        {
            seedA += SumOfSeed(seedA);
            iDayA++;
        }
        else if ((iDayA == days && jDayB < days) || (seedB < seedA && jDayB < days))
        {
            seedB += SumOfSeed(seedB);
            jDayB++;
        }
    }
    if (seedA > seedB)
    {
        return seedA;
    }
    else
    {
        return seedB;
    }
}",1
jwon253,1697418909,1,"int sumOfDigits(int n) 
{
    int sum = 0;
    char str[10];  // Assuming the number will not exceed 10 digits
    sprintf(str, ""%d"", n);  // Convert integer n to a string.

    for (int i = 0; str[i] != '\0'; i++) {
        sum += str[i] - '0';  // Convert each character back to an integer and add to sum.
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        // Grow the vines 
        int nextHeightA = heightA + sumOfDigits(heightA);
        int nextHeightB = heightB + sumOfDigits(heightB);

        // Check if vine A matches with vine B
        if (nextHeightA == nextHeightB) {
            return nextHeightA;
        }

        // For each growth of A, check against the history of B
        int tempHeightB = seedB;
        for (int prevDay = 1; prevDay < day; prevDay++) {
            if (nextHeightA == tempHeightB) {
                return nextHeightA;
            }
            tempHeightB += sumOfDigits(tempHeightB);
        }

        // For each growth of B, check against the history of A
        int tempHeightA = seedA;
        for (int prevDay = 1; prevDay < day; prevDay++) {
            if (nextHeightB == tempHeightA) {
                return nextHeightB;
            }
            tempHeightA += sumOfDigits(tempHeightA);
        }

        // Update the height of vines for the next iteration
        heightA = nextHeightA;
        heightB = nextHeightB;
    }

    // Return the highest vine value
    if (heightA > heightB) {
        return heightA;
    }
    else {
        return heightB;
    }
}",0
jwon253,1697426640,2,"int sumOfDigits(int n)
{
    int sum = 0;
    char str[10];  // Assuming the number will not exceed 10 digits
    sprintf(str, ""%d"", n);  // Convert integer n to a string.

    for (int i = 0; str[i] != '\0'; i++) {
        sum += str[i] - '0';  // Convert each character back to an integer and add to sum.
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int heightA = seedA;
    int heightB = seedB;

    for (int day = 1; day <= days; day++) {
        // Grow the vines 
        int nextHeightA = heightA + sumOfDigits(heightA);
        int nextHeightB = heightB + sumOfDigits(heightB);

        // Check if vine A matches with vine B
        if (nextHeightA == nextHeightB) {
            return nextHeightA;
        }
        if (nextHeightA == heightB) {
            return nextHeightA;
        }
        if (nextHeightB == heightA) {
            return nextHeightB;
        }

        // For each growth of A, check against the history of B
        int tempHeightB = seedB;
        for (int prevDay = 1; prevDay < day; prevDay++) {
            if (nextHeightA == tempHeightB) {
                return nextHeightA;
            }
            tempHeightB += sumOfDigits(tempHeightB);
        }

        // For each growth of B, check against the history of A
        int tempHeightA = seedA;
        for (int prevDay = 1; prevDay < day; prevDay++) {
            if (nextHeightB == tempHeightA) {
                return nextHeightB;
            }
            tempHeightA += sumOfDigits(tempHeightA);
        }

        // Update the height of vines for the next iteration
        heightA = nextHeightA;
        heightB = nextHeightB;
    }

    // Return the highest vine value
    if (heightA > heightB) {
        return heightA;
    }
    else {
        return heightB;
    }
}",1
jyan420,1696924367,1,"// Finds exponent (for integer powers greater than or equal to 0)
int exponent(int base, int power) {
    int result = 1;
    for (int i = 1; i <= power; i++) {
        result *= base;
    }
    return result;
}

// Finds how many digits are in the number
int numDigits(int num) {
    int digits = 1;
    int factor = 10;
    // The most dangerous part of the function: trust this infinite loop to break!
    while (1 == 1) {
        if (num % factor == num) {
            break;
        }
        digits++;
        factor *= 10;
    }
    return digits;
}

void GrowVine(int *vine) {
    int sumDigits = 0;
    int remaining = *vine;
    for (int digit = numDigits(*vine); digit > 0; digit--) {
        int num = remaining / exponent(10, digit - 1);
        sumDigits += num;
        remaining -= num * exponent(10, digit - 1);
    }
    *vine = *vine + sumDigits;
}

int TallestVine(int vine1original, int vine2original, int days) {
    int vine1 = vine1original;
    int vine2 = vine2original;
    int merge = -1;
    if (days > 0) {
        for (int vine1Day = 1; (vine1Day <= days) && (merge == -1); vine1Day++) {
            vine2 = vine2original;
            GrowVine(&vine1);
            // printf(""VINE 1 DAY %d: %d\n"", vine1Day, vine1);
            for (int vine2Day = 1; (vine2Day <= days) && (merge == -1); vine2Day++) {
                GrowVine(&vine2);
                // printf(""VINE 2 DAY %d: %d\n"", vine2Day, vine2);
                if (vine1 == vine2) {
                    // Stop! They're already done.
                    merge = vine1;
                }
            };
            // printf(""\n"");
    }
    }
    if (merge > 0) {
        return merge;
    } else if (vine1 > vine2) {
        return vine1;
    } else {
        return vine2;
    }
}",1
jyua529,1697372861,1,"#include <stdio.h>


int sumdigits(int n){
    int sum = 0;
    while (n != 0){
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA[days + 1], heightB[days + 1];  
    int maxHeight = 0;
    heightA[0] = seedA;
    heightB[0] = seedB;

    
    for (int i = 1; i <= days; ++i) {
        heightA[i] = heightA[i - 1] + sumdigits(heightA[i - 1]);
    
	    heightB[i] = heightB[i - 1]+ sumdigits(heightB[i - 1]);


    }

    
    for (int i = 0; i <= days; ++i) {
        for (int j = 0; j <= days; ++j) {
            if (heightA[i] == heightB[j]) {  
                return heightA[i];  
            }
			
            if (heightA[i] > maxHeight) {
                maxHeight = heightA[i];  
            }
            if (heightB[i] > maxHeight) {
                maxHeight = heightB[i];  
            }
        }

		
    }

    return maxHeight;  
}",1
jzho786,1697450612,1,"int CalculateNewGrowth(int vine) {
    int newGrowth = 0;
    while (vine > 0) {
        newGrowth += vine % 10;
        vine /= 10;
    }
    return newGrowth;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int tallestPointA = seedA;
    int tallestPointB = seedB;

    for (int day = 0; day < days; day++) {
        int newGrowthA = CalculateNewGrowth(vineA);
        int newGrowthB = CalculateNewGrowth(vineB);

        vineA += newGrowthA;
        vineB += newGrowthB;

        int tallerVine = (vineA > vineB) ? vineA : vineB;
        int tallerPoint = (tallestPointA > tallestPointB) ? tallestPointA : tallestPointB;

        if (vineA == vineB) {
            return tallerPoint;
        }

        if (tallerVine > tallerPoint) {
            tallestPointA = vineA;
            tallestPointB = vineB;
        } else {
            tallestPointA = tallestPointB = tallerPoint;
        }
    }

    return (tallestPointA > tallestPointB) ? tallestPointA : tallestPointB;
}
",0
kahk161,1696974783,1,"#include <stdio.h>

/* GROWS A DIGITAL VINE AND RETURNING THE LARGEST HEIGHT */
int TallestVine(int seedA, int seedB, int days)
{
	int heightA = seedA, heightB = seedB;

	// calculating vineA growth per day:
	for (int dayA = 1; dayA <= days; dayA++) {

		// growth rate A:
		int A = 1;
		int growA = 0;
		while (A < heightA) { // calculates the growth speed of vineA
			growA += ((heightA % (A * 10)) - (heightA % A)) / A;
			A *= 10;
		}// while A end
		heightA += growA;

		// checking each value of vineB against current vineA value:
		heightB = seedB; // reset vineB height
		for (int dayB = 1; dayB <= days; dayB++) {

			// growth rate B:
			int B = 1;
			int growB = 0;
			while (B < heightB) { // calculates the growth speed of vineB
				growB += ((heightB % (B * 10)) - (heightB % B)) / B;
				B *= 10;
			}// while B end
			heightB += growB;

			if (heightB == heightA) { // height are ==, growth stops, therefore max height
				return heightA;
			}// if == end

		}// for dayB end

	}// for dayA end

	// both vines grew to max height
	if (heightA > heightB) {
		return heightA;
	}
	else {
		return heightB;
	}// if > end

}// TallestVine end",0
kahk161,1696975255,2,"#include <stdio.h>

/* GROWS A DIGITAL VINE AND RETURNING THE LARGEST HEIGHT */
int TallestVine(int seedA, int seedB, int days)
{
	int heightA = seedA, heightB = seedB;

	// calculating vineA growth per day:
	for (int dayA = 1; dayA <= days; dayA++) {

		// growth rate A:
		int A = 1;
		int growA = 0;
		while (A <= heightA) { // calculates the growth speed of vineA
			growA += ((heightA % (A * 10)) - (heightA % A)) / A;
			A *= 10;
		}// while A end
		heightA += growA;

		// checking each value of vineB against current vineA value:
		heightB = seedB; // reset vineB height
		for (int dayB = 1; dayB <= days; dayB++) {

			// growth rate B:
			int B = 1;
			int growB = 0;
			while (B <= heightB) { // calculates the growth speed of vineB
				growB += ((heightB % (B * 10)) - (heightB % B)) / B;
				B *= 10;
			}// while B end
			heightB += growB;

			if (heightB == heightA) { // height are ==, growth stops, therefore max height
				return heightA;
			}// if == end

		}// for dayB end

	}// for dayA end

	// both vines grew to max height
	if (heightA > heightB) {
		return heightA;
	}
	else {
		return heightB;
	}// if > end

}// TallestVine end",1
kcao657,1697372384,1,"#include <stdio.h>

int SumVineA(int seedAHeight) {

    int digit = 0;

    while (seedAHeight > 0) {

        digit += seedAHeight % 10;
        seedAHeight = seedAHeight / 10;
    }
    return digit;
}

int SumVineB(int seedBHeight) {

    int digitTwo = 0;

    while (seedBHeight > 0) {

        digitTwo += seedBHeight % 10;
        seedBHeight = seedBHeight / 10;
    }
    return digitTwo;
}

int GrowthVineA(int amountGrowth) {

    return amountGrowth + SumVineA(amountGrowth);
}

int GrowthVineB(int amountGrowth) {

    return amountGrowth + SumVineB(amountGrowth);
}

int TallestVine(int seedA, int seedB, int days) {

    int originalSeedA = seedA;
    int originalSeedB = seedB;

    int i = 0;
    for (i = 0; i < days; i++) {
    
        seedA = GrowthVineA(seedA);

        int j = 0;
        for (j = 0; j < days; j++) {
            
            seedB = GrowthVineB(seedB);

            if (seedB == seedA) {
                return seedB;
            }
        }
        seedB = originalSeedB;
    }

    int k = 0;
    while (k < days) {

        seedB = GrowthVineB(seedB);
        k++;
    }

    if (seedA > seedB) {
        return seedA;
    }
    else {
        return seedB;
    }
}",0
kcao657,1697372423,2,"#include <stdio.h>

int SumVineA(int seedAHeight) {

    int digit = 0;

    while (seedAHeight > 0) {

        digit += seedAHeight % 10;
        seedAHeight = seedAHeight / 10;
    }
    return digit;
}

int SumVineB(int seedBHeight) {

    int digitTwo = 0;

    while (seedBHeight > 0) {

        digitTwo += seedBHeight % 10;
        seedBHeight = seedBHeight / 10;
    }
    return digitTwo;
}

int GrowthVineA(int amountGrowth) {

    return amountGrowth + SumVineA(amountGrowth);
}

int GrowthVineB(int amountGrowth) {

    return amountGrowth + SumVineB(amountGrowth);
}

int TallestVine(int seedA, int seedB, int days) {

    int originalSeedB = seedB;

    int i = 0;
    for (i = 0; i < days; i++) {
    
        seedA = GrowthVineA(seedA);

        int j = 0;
        for (j = 0; j < days; j++) {
            
            seedB = GrowthVineB(seedB);

            if (seedB == seedA) {
                return seedB;
            }
        }
        seedB = originalSeedB;
    }

    int k = 0;
    while (k < days) {

        seedB = GrowthVineB(seedB);
        k++;
    }

    if (seedA > seedB) {
        return seedA;
    }
    else {
        return seedB;
    }
}",1
kgra470,1697372838,1,"int TallestVine(int seedA, int seedB, int days){
    int Breset=seedB;
    for (int i=0;i<days;i++){
        int growthA=seedA;
        int sum=0;
        while(growthA!=0) {
            int remainder = growthA % 10;
            sum = sum + remainder;
            growthA = growthA / 10;
        }
        seedA=seedA+sum;
        seedB=Breset;
        for(int j=0;j<days;j++){
            int growthB=seedB;
            //seedB=Breset;
            int sum2=0;
            while (growthB != 0) {
                int remainder2 = growthB % 10;
                sum2 = sum2 + remainder2;
                growthB = growthB / 10;
            }
            seedB = seedB + sum2;
            if(seedA==seedB){
                return seedA;
            }
        }

    }
    if(seedA>seedB){
        return seedA;
    }
    else{
        return seedB;
    }
}",1
kjoe685,1697296645,1,"int SumDigits(int num)
{//breaks if num has more than 9 digits
	int sum = 0;
	int digit = 0;
	int i = 10;
	while (i <= num*10) {
		digit = 10*((num % i) - digit)/i;
		sum += digit;
		i *= 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int i, j, vineA, vineB, tallest;
	vineA = seedA + SumDigits(seedA);
	printf(""A %d\n"", vineA);
	for (i = 1; i < days; i++) {
		vineB = seedB + SumDigits(seedB);
		if (vineA == vineB) {
			return vineA;
		}
		for (j = 1; j < days; j++) {
			vineB += SumDigits(vineB);
			if (vineA == vineB) {
				return vineA;
			}
			if (1) {
				printf(""B %d\n"", vineB);
			}
		}
		vineA += SumDigits(vineA);
		printf(""A %d\n"", vineA);
	}
	if (vineA >= vineB) {
		return vineA;
	}
	else {
		return vineB;
	}
}",0
kjoe685,1697296839,2,"int SumDigits(int num)
{//breaks if num has more than 9 digits
	int sum = 0;
	int digit = 0;
	int i = 10;
	while (i <= num*10) {
		digit = 10*((num % i) - digit)/i;
		sum += digit;
		i *= 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int i, j, vineA, vineB;
	vineA = seedA + SumDigits(seedA);
	vineB = seedB + SumDigits(seedB);
	for (i = 1; i < days; i++) {
		if (vineA == vineB) {
			return vineA;
		}
		for (j = 1; j < days; j++) {
			vineB += SumDigits(vineB);
			if (vineA == vineB) {
				return vineA;
			}
		}
		vineA += SumDigits(vineA);
		vineB = seedB + SumDigits(seedB);
	}
	if (vineA >= vineB) {
		return vineA;
	}
	else {
		return vineB;
	}
}",0
kjoe685,1697299314,3,"int SumDigits(int num)
{//breaks if num has more than 9 digits
	int sum = 0;
	int digit = 0;
	int i = 10;
	while (i <= num * 10) {
		digit = 10 * ((num % i) - digit) / i;
		sum += digit;
		i *= 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
	int i, j, vineA, vineB;
	vineA = seedA;
	vineB = seedB;
	for (i = 0; i < days;i++) {
		vineA += SumDigits(vineA);
		vineB = seedB;
		for (j = 0; j < days; j++) {
			vineB += SumDigits(vineB);
			if (vineA == vineB) {
				return vineB;
			}
		}
	}
	if (vineA >= vineB) {
		return vineA;
	}
	else {
		return vineB;
	}
}",1
klam376,1697433422,1,"int TallestVine(int seedA, int seedB, int days)
{
    int x,y;
    int a = seedA;
    int b = seedB;

    for (int i=0;i<days;i++)    {
    x = a/100 + ((a%100)/10) + ((a%100)%10);
    a = a + x;
        for (int j = 0; j<days; j++)    {
            y = b/100 + ((b%100)/10) + ((b%100)%10);
            b = b + y;
            if (a==b)   {
                return a;
            }
        }
        b = seedB;
    }

    if (a>b)    {
        return a;
    } else  {
        return b;
    }
}",0
klam376,1697435709,2,"int TallestVine(int seedA, int seedB, int days)
{
    int x,y;
    int a = seedA;
    int b;

    for (int i=0;i<days;i++)    {
        if (a<100){
            x = (a/10) + (a%10);
        } else if ((a>=100) && (a<999)) {
            x = (a/100) + ((a%100)/10) + ((a%100)%10);
        } else  {
            x = (a/1000) + ((a%1000)/100) + ((a%100)/10) + ((a%100)%10);
        }
        a = a + x;
        b = seedB;
            for (int j = 0; j<days; j++)    {
                if (b<100){
                y = (b/10) + (b%10);
                } else if ((b>=100) && (b<999)) {
                y = (b/100) + ((b%100)/10) + ((b%100)%10);
                } else  {
                y = (b/1000) + ((b%1000)/100) + ((b%100)/10) + ((b%100)%10);
                }
                b = b + y;
                if (a==b)   {
                    return a;
                }
            }
    }

    if (a>b)    {
        return a;
    } else  {
        return b;

    }
}",0
klam376,1697444316,3,"int TallestVine(int seedA, int seedB, int days)
{
    int a = seedA;
    int b;
    int digitA, digitB;
    int sum1 = 0;

    for (int i=0;i<days;i++)    {
        while (a>0) {
            digitA = a%10;
            sum1 += digitA;
            a /= 10;
        }
        a = seedA + sum1;

        b = seedB;
        int sum2 = 0;
            for (int j = 0; j<days; j++)    {
                while (b>0) {
                    digitB = b%10;
                    sum2 += digitB;
                    b /= 10;
                }
                b = seedB + sum2;
                if (a==b)   {
                    return a;
                }
            }
    }

    if (a>b)    {
        return a;
    } else  {
        return b;
    }
}",1
kluc619,1697372456,1,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int tallest = 0;

    for (int day = 1; day <= days; day++) {
        int sumA = sumOfDigits(vineA);
        int sumB = sumOfDigits(vineB);

        if (vineA == vineB) {
            // Vines join at this point
            tallest = vineA;
            break;
        }

        if (sumA > sumB) {
            vineA += sumA;
        } else {
            vineB += sumB;
        }
    }

    // If the vines do not join, the tallest point is the maximum of the two vines
    if (tallest == 0) {
        tallest = (vineA > vineB) ? vineA : vineB;
    }

    return tallest;
}

int main() {
    int seedA = 501;
    int seedB = 399;
    int days = 8;
    
    int result = TallestVine(seedA, seedB, days);
    printf(""Tallest point reached by the vines: %d\n"", result);

    return 0;
}",0
kluc619,1697372462,2,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int tallest = 0;

    for (int day = 1; day <= days; day++) {
        int sumA = sumOfDigits(vineA);
        int sumB = sumOfDigits(vineB);

        if (vineA == vineB) {
            // Vines join at this point
            tallest = vineA;
            break;
        }

        if (sumA > sumB) {
            vineA += sumA;
        } else {
            vineB += sumB;
        }
    }

    // If the vines do not join, the tallest point is the maximum of the two vines
    if (tallest == 0) {
        tallest = (vineA > vineB) ? vineA : vineB;
    }

    return tallest;
}
",0
kluc619,1697372750,3,"#include <stdio.h>

int sumOfDigits(int num) {
    if (num == 0) {
        return 0;
    } else {
        return num % 10 + sumOfDigits(num / 10);
    }
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int tallest = 0;

    for (int day = 1; day <= days; day++) {
        int sumA = sumOfDigits(vineA);
        int sumB = sumOfDigits(vineB);

        if (vineA == vineB) {
            // Vines join at this point
            tallest = vineA;
            break;
        }

        if (sumA > sumB) {
            vineA += sumA;
        } else {
            vineB += sumB;
        }
    }

    // If the vines do not join, the tallest point is the maximum of the two vines
    if (tallest == 0) {
        tallest = (vineA > vineB) ? vineA : vineB;
    }

    return tallest;
}
",0
kluc619,1697373265,4,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int calculateVineHeight(int seed, int days) {
    int height = seed;
    for (int i = 1; i <= days; ++i) {
        height += sumOfDigits(height);
    }
    return height;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = calculateVineHeight(seedA, days);
    int heightB = calculateVineHeight(seedB, days);
    
    // If the vines have the same height, they join at this point
    if (heightA == heightB) {
        return heightA;
    }
    
    // If not, return the taller vine's height
    return (heightA > heightB) ? heightA : heightB;
}
",0
kluc619,1697373367,5,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int calculateVineHeight(int seed, int days) {
    for (int i = 1; i <= days; ++i) {
        seed += sumOfDigits(seed);
    }
    return seed;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = calculateVineHeight(seedA, days);
    int heightB = calculateVineHeight(seedB, days);
    
    // If the vines have the same height, they join at this point
    if (heightA == heightB) {
        return heightA;
    }
    
    // If not, return the taller vine's height
    return (heightA > heightB) ? heightA : heightB;
}
",0
kluc619,1697374048,6,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    for (int day = 1; day <= days; ++day) {
        int sumA = sumOfDigits(seedA);
        int sumB = sumOfDigits(seedB);

        seedA += sumA;
        seedB += sumB;

        if (seedA == seedB) {
            return seedA;
        }

        if (seedA > seedB) {
            seedB = seedA;
        } else {
            seedA = seedB;
        }
    }

    return (seedA > seedB) ? seedA : seedB;
}

",0
kluc619,1697375202,7,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;
    int tallestHeight = 0;

    for (int day = 1; day <= days; ++day) {
        int sumA = sumOfDigits(heightA);
        int sumB = sumOfDigits(heightB);

        if (heightA > heightB) {
            tallestHeight = (heightA > tallestHeight) ? heightA : tallestHeight;
            heightB = heightB + sumB;
        } else if (heightB > heightA) {
            tallestHeight = (heightB > tallestHeight) ? heightB : tallestHeight;
            heightA = heightA + sumA;
        } else {
            tallestHeight = (heightA > tallestHeight) ? heightA : tallestHeight;
            heightA = heightA + sumA;
            heightB = heightB + sumB;
        }
    }

    return tallestHeight;
}
",0
kmal768,1697179123,1,"#include <stdio.h>
#include <string.h>

int TallestVine(int seedA, int seedB, int days) {
	int i, j, k, l, numdigitsA, numdigitsB, sumA, sumB, valueA, valueB, seedB_New;
	char stringA[100];
	char stringB[100];

	if (seedA == seedB) {
		return(seedA);
	}

	for (i = 0; i < days; i++) {
		sprintf(stringA, ""%d"", seedA);
		numdigitsA = strlen(stringA);
		sumA = 0;
		for (k = 0; k < numdigitsA; k++) {
			valueA = stringA[k] - 48;
			sumA += valueA;
		}
		seedA += sumA;

		seedB_New = seedB;
		for (j = 0; j < days; j++) {
			sprintf(stringB, ""%d"", seedB_New);
			numdigitsB = strlen(stringB);
			sumB = 0;
			for (l = 0; l < numdigitsB; l++) {
				valueB = stringB[l] - 48;
				sumB += valueB;
			}
			seedB_New += sumB;

			if (seedA == seedB_New) {
				return seedA;
			}
		}
	}
	
	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}

}",0
kmal768,1697179905,2,"#include <stdio.h>
#include <string.h>

int TallestVine(int seedA, int seedB, int days) {
	int i, j, k, l, numdigitsA, numdigitsB, sumA, sumB, valueA, valueB, seedB_New;
	char stringA[100];
	char stringB[100];

	if (seedA == seedB) {
		return(seedA);
	}

	for (i = 0; i < days; i++) {
		sprintf(stringA, ""%d"", seedA);
		numdigitsA = strlen(stringA);
		sumA = 0;
		for (k = 0; k < numdigitsA; k++) {
			valueA = stringA[k] - 48;
			sumA += valueA;
		}
		seedA += sumA;

		seedB_New = seedB;
		for (j = 0; j < days; j++) {
			sprintf(stringB, ""%d"", seedB_New);
			numdigitsB = strlen(stringB);
			sumB = 0;
			for (l = 0; l < numdigitsB; l++) {
				valueB = stringB[l] - 48;
				sumB += valueB;
			}
			seedB_New += sumB;

			if (seedA == seedB_New) {
				return seedA;
			}
		}
		if (i == days - 1) {
			seedB = seedB_New;
		}
	}
	
	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}

}",1
kmck133,1697380177,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int TallestVine(int seedA, int seedB, int days);

int main(void)
{
	printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
	printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
	printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
	printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

}

int TallestVine(int seedA, int seedB, int days) {
	
	int sumA = 0;
	int sumB = 0;
	int originalB = seedB;

	for (int i = 0; i < days; i++) {
		int tempA = seedA;
		while (seedA != 0) {
			int remainderA = seedA % 10;
			sumA = sumA + remainderA;
			seedA = seedA / 10;
		}
		seedA = tempA + sumA;
		sumA = 0;

		for (int j = 0; j < days; j++) {
			int tempB = seedB;
			while (seedB != 0) {
				int remainderB = seedB % 10;
				sumB = sumB + remainderB;
				seedB = seedB / 10;
			}
			seedB = tempB + sumB;
			sumB = 0;
			if (seedA == seedB) {
				return seedA;
			}
		}
		seedB = originalB;
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",0
kmck133,1697380191,2,"int TallestVine(int seedA, int seedB, int days) {
	
	int sumA = 0;
	int sumB = 0;
	int originalB = seedB;

	for (int i = 0; i < days; i++) {
		int tempA = seedA;
		while (seedA != 0) {
			int remainderA = seedA % 10;
			sumA = sumA + remainderA;
			seedA = seedA / 10;
		}
		seedA = tempA + sumA;
		sumA = 0;

		for (int j = 0; j < days; j++) {
			int tempB = seedB;
			while (seedB != 0) {
				int remainderB = seedB % 10;
				sumB = sumB + remainderB;
				seedB = seedB / 10;
			}
			seedB = tempB + sumB;
			sumB = 0;
			if (seedA == seedB) {
				return seedA;
			}
		}
		seedB = originalB;
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",0
kmck133,1697380545,3,"int TallestVine(int seedA, int seedB, int days) {
	
	int sumA = 0;
	int sumB = 0;
	int originalB = seedB;

	for (int i = 0; i < days; i++) {
		int tempA = seedA;
		while (seedA != 0) {
			int remainderA = seedA % 10;
			sumA = sumA + remainderA;
			seedA = seedA / 10;
		}
		seedA = tempA + sumA;
		sumA = 0;

		for (int j = 0; j < days; j++) {
			int tempB = seedB;
			while (seedB != 0) {
				int remainderB = seedB % 10;
				sumB = sumB + remainderB;
				seedB = seedB / 10;
			}
			seedB = tempB + sumB;
			sumB = 0;
			if (seedA == seedB) {
				return seedA;
			}
		}
		seedB = originalB;
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		for (int j = 0; j < days; j++) {
			int tempB = seedB;
			while (seedB != 0) {
				int remainderB = seedB % 10;
				sumB = sumB + remainderB;
				seedB = seedB / 10;
			}
			seedB = tempB + sumB;
			sumB = 0;
		}
		return seedB;
	}
}",0
kmck133,1697380749,4,"int TallestVine(int seedA, int seedB, int days) {
	
	int sumA = 0;
	int sumB = 0;
	int originalB = seedB;

	for (int i = 0; i < days; i++) {
		int tempA = seedA;
		while (seedA != 0) {
			int remainderA = seedA % 10;
			sumA = sumA + remainderA;
			seedA = seedA / 10;
		}
		seedA = tempA + sumA;
		sumA = 0;

		for (int j = 0; j < days; j++) {
			int tempB = seedB;
			while (seedB != 0) {
				int remainderB = seedB % 10;
				sumB = sumB + remainderB;
				seedB = seedB / 10;
			}
			seedB = tempB + sumB;
			sumB = 0;
			if (seedA == seedB) {
				return seedA;
			}
		}
		seedB = originalB;
	}

	for (int j = 0; j < days; j++) {
		int tempB = seedB;
		while (seedB != 0) {
			int remainderB = seedB % 10;
			sumB = sumB + remainderB;
			seedB = seedB / 10;
		}
		seedB = tempB + sumB;
		sumB = 0;
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",1
kpat303,1696812030,1,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA; 
    int heightB = seedB; 

    for (int day = 1; day <= days; day++) {
        heightA += sumOfDigits(heightA); 
        heightB += sumOfDigits(heightB); 

        if (heightA == heightB) {
            
            return heightA;
        }
    }

    
    return (heightA > heightB) ? heightA : heightB;
}",0
kpay633,1697409439,1,"int TallestVine(int seedA, int seedB, int days)
{
	int ogB = seedB;
	int count = 0;

	
	for (int i = 1; i <= days; i++) {
		seedB = ogB;
		for (int j = 1; j <= days; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			seedB = NextNum(seedB);
		}
		if (seedA == seedB) {
			return seedA;
		}
		seedA = NextNum(seedA);
		
	}

	if (seedA > seedB) {
		return seedA;
	}
	if (seedB > seedA) {
		return seedB;
	}
}


//function that finds the next value in the vine (sums the individual values then adds it to og)
int NextNum(int n)
{
	int og = n;
	int addition = 0;
	int numDig = NumDigits(n);
	int m;
	while (n > 0) {
		m = n % 10;
		addition += m;
		n = n / 10;
	}
	return og + addition;
}




// counts how many digits in num.
int NumDigits(int n)
{
	int dig = 0;
	while (n != 0) {
		n = n / 10;
		dig++;
	}
	return dig;
}",0
kpay633,1697409688,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days);
int NextNum(int n);
int NumDigits(int n);

int TallestVine(int seedA, int seedB, int days)
{
	int ogB = seedB;
	int count = 0;

	
	for (int i = 1; i <= days; i++) {
		seedB = ogB;
		for (int j = 1; j <= days; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			seedB = NextNum(seedB);
		}
		if (seedA == seedB) {
			return seedA;
		}
		seedA = NextNum(seedA);
		
	}

	if (seedA > seedB) {
		return seedA;
	}
	if (seedB > seedA) {
		return seedB;
	}
}


//function that finds the next value in the vine (sums the individual values then adds it to og)
int NextNum(int n)
{
	int og = n;
	int addition = 0;
	int numDig = NumDigits(n);
	int m;
	while (n > 0) {
		m = n % 10;
		addition += m;
		n = n / 10;
	}
	return og + addition;
}




// counts how many digits in num.
int NumDigits(int n)
{
	int dig = 0;
	while (n != 0) {
		n = n / 10;
		dig++;
	}
	return dig;
}",0
kpay633,1697409909,3,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days);
int NextNum(int n);
int NumDigits(int n);


int TallestVine(int seedA, int seedB, int days)
{
	int ogB = seedB;
	
	for (int i = 1; i <= days; i++) {
		seedB = ogB;
		for (int j = 1; j <= days; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			seedB = NextNum(seedB);
		}
		if (seedA == seedB) {
			return seedA;
		}
		seedA = NextNum(seedA);
		
	}

	if (seedA > seedB) {
		return seedA;
	}
	if (seedB > seedA) {
		return seedB;
	}
}


//function that finds the next value in the vine (sums the individual values then adds it to og)
int NextNum(int n)
{
	int og = n;
	int addition = 0;
	int m;
	while (n > 0) {
		m = n % 10;
		addition += m;
		n = n / 10;
	}
	return og + addition;
}
",0
kpay633,1697410059,4,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days);
int NextNum(int n);
int NumDigits(int n);




int TallestVine(int seedA, int seedB, int days)
{
	int ogB = seedB;
	
	for (int i = 1; i <= days; i++) {
		seedB = ogB;
		for (int j = 1; j <= days; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			seedB = NextNum(seedB);
		}
		if (seedA == seedB) {
			return seedA;
		}
		seedA = NextNum(seedA);
		
	}

	if (seedA >= seedB) {
		return seedA;
	}
	if (seedB >= seedA) {
		return seedB;
	}
	return 0;
}


//function that finds the next value in the vine (sums the individual values then adds it to og)
int NextNum(int n)
{
	int og = n;
	int addition = 0;
	int m;
	while (n > 0) {
		m = n % 10;
		addition += m;
		n = n / 10;
	}
	return og + addition;
}

",0
kpay633,1697410513,5,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days);
int NextNum(int n);
int NumDigits(int n);



int TallestVine(int seedA, int seedB, int days)
{
	int ogB = seedB;
	
	for (int i = 1; i <= days; i++) {
		if (seedA == seedB) {
			return seedA;
		}
		seedA = NextNum(seedA);
		seedB = ogB;
		for (int j = 1; j <= days; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			seedB = NextNum(seedB);
		}
		if (seedA == seedB) {
			return seedA;
		}		
	}

	if (seedA >= seedB) {
		return seedA;
	}
	if (seedB >= seedA) {
		return seedB;
	}
	return 0;
}


//function that finds the next value in the vine (sums the individual values then adds it to og)
int NextNum(int n)
{
	int og = n;
	int addition = 0;
	int m;
	while (n > 0) {
		m = n % 10;
		addition += m;
		n = n / 10;
	}
	return og + addition;
}


",1
kqua446,1697423959,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int sum = 0, temp = -1, i, j, smallestA;

    smallestA = seedA;

    for (i = days; i > 0; i--) {
        temp = seedA;
        while (seedA != 0) {
            sum += seedA % 10;
            seedA /= 10;
        }
        seedA = temp + sum;
        sum = 0;
    }

    for (i = days; i > 0; i--) {
        seedA = smallestA;
        for (j = 0; j < days; j++) {
            if (seedB == seedA) {
                return seedB;
            }
            temp = seedA;
            while (seedA != 0) {
                sum += seedA % 10;
                seedA /= 10;
            }
            seedA = temp + sum;
            sum = 0;
        }
        temp = seedB;
        while (seedB != 0) {
            sum += seedB % 10;
            seedB /= 10;
        }
        seedB = temp + sum;
        sum = 0;
    }
    
    seedA = smallestA;
        for (j = 0; j < days; j++) {
            if (seedB == seedA) {
                return seedB;
            }
            temp = seedA;
            while (seedA != 0) {
                sum += seedA % 10;
                seedA /= 10;
            }
            seedA = temp + sum;
            sum = 0;
        }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}
",0
kqua446,1697424377,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int sum = 0, temp = -1, i, j, smallestA = seedA;

    for (j = 0; j < days; j++) {
        if (seedB == seedA) {
            return seedB;
        }
        temp = seedA;
        while (seedA != 0) {
            sum += seedA % 10;
            seedA /= 10;
        }
        seedA = temp + sum;
        sum = 0;
    }
    if (seedB == seedA) {
        return seedB;
    }


    for (i = days; i > 0; i--) {
        temp = seedB;
        while (seedB != 0) {
            sum += seedB % 10;
            seedB /= 10;
        }
        seedB = temp + sum;
        sum = 0;
        seedA = smallestA;
        for (j = 0; j < days; j++) {
            if (seedB == seedA) {
                return seedB;
            }
            temp = seedA;
            while (seedA != 0) {
                sum += seedA % 10;
                seedA /= 10;
            }
            seedA = temp + sum;
            sum = 0;
        }
        if (seedB == seedA) {
            return seedB;
    }
    }
    
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}
",1
krec980,1697160349,1,"int SumVine(int vine) {
	int sum = 0;
	while (vine != 0) {
		sum += vine % 10;
		vine /= 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) {

	int sum1 = 0;
	int sum2 = 0;
	int vine1, vine2, tempA, tempB;
	vine1 = seedA;
	vine2 = seedB;
	tempA = seedA;
	tempB = seedB;

	for (int i = 0; i <= days; i++) {
		sum1 = SumVine(tempA);
		tempA += sum1;
		vine1 = tempA - sum1;

		for (int j = 0; j <= days; j++) {
			sum2 = SumVine(tempB);
			tempB += sum2;
			vine2 = tempB - sum2;
			if (j == days) {
				vine2, tempB = seedB;
			}

			if (vine1 == vine2) {
			return vine1;
			}

			if (j == days && i == days) {
				if (vine1 > vine2) {
					return vine1;
				}
				else {
					return vine2;
				}
			}
		}
	}	
	return 0; 
}",0
krec980,1697161585,2,"int SumVine(int vine) {
	int sum = 0;
	while (vine != 0) {
		sum += vine % 10;
		vine /= 10;
	}
	return sum;
}

int TallestVine(int seedA, int seedB, int days) {

	int sum1 = 0;
	int sum2 = 0;
	int vine1, vine2, tempA, tempB;
	vine1 = seedA;
	vine2 = seedB;
	tempA = seedA;
	tempB = seedB;

	for (int i = 0; i <= days; i++) {
		sum1 = SumVine(tempA);
		tempA += sum1;
		vine1 = tempA - sum1;

		for (int j = 0; j <= days; j++) {
			sum2 = SumVine(tempB);
			tempB += sum2;
			vine2 = tempB - sum2;
			if (j == days) {
				tempB = seedB;
			}

			if (vine1 == vine2) {
			return vine1;
			}

			if (j == days && i == days) {
				if (vine1 > vine2) {
					return vine1;
				}
				else {
					return vine2;
				}
			}
		}
	}	
	return 0; 
}",1
ksik996,1697201214,1,"int sumd(int num){
    int sum = 0;
    int digit = 0;
        while (num > 0) {
        digit = num % 10; 
        sum += digit; 
        num /= 10; 
}
return sum;
}

int TallestVine(int seedA, int seedB, int days){
    
    
      int numA = seedA;
      int numB = seedB;

      if(seedA == seedB){
        return seedA;
      }
                    

    for(int i = 0;i < days; i++){

        numA = sumd(numA) + numA;


        for(int j = 0;j < days; j++){

            numB = sumd(numB) + numB;
            if(numB == numA){
                return numB;
            }

        }
        numB = seedB;
    }
    if(numB > numA){
        return numB;
    }
    else{
        return numA;
    }

}",0
ksik996,1697201551,2,"int sumd(int num){
    int sum = 0;
    int digit = 0;
        while (num > 0) {
        digit = num % 10; 
        sum += digit; 
        num /= 10; 
}
return sum;
}

int TallestVine(int seedA, int seedB, int days){
    
    
      int numA = seedA;
      int numB = seedB;
      int maxB;

      if(seedA == seedB){
        return seedA;
      }
                    

    for(int i = 0;i < days; i++){

        numA = sumd(numA) + numA;
        printf(""%d\n"", numA);


        for(int j = 0;j < days; j++){

            numB = sumd(numB) + numB;
            if(numB == numA){
                return numB;
            }

        }
        maxB = numB;
        numB = seedB;
    }
    if(maxB > numA){
        return maxB;
    }
    else{
        return numA;
    }

}",0
ksik996,1697201640,3,"int sumd(int num){
    int sum = 0;
    int digit = 0;
        while (num > 0) {
        digit = num % 10; 
        sum += digit; 
        num /= 10; 
}
return sum;
}

int TallestVine(int seedA, int seedB, int days){
    
    
      int numA = seedA;
      int numB = seedB;
      int maxB;

      if(seedA == seedB){
        return seedA;
      }
                    

    for(int i = 0;i < days; i++){

        numA = sumd(numA) + numA;


        for(int j = 0;j < days; j++){

            numB = sumd(numB) + numB;
            if(numB == numA){
                return numB;
            }

        }
        maxB = numB;
        numB = seedB;
    }
    if(maxB > numA){
        return maxB;
    }
    else{
        return numA;
    }

}",1
kwan797,1697244538,1,"#include <stdio.h>
 
int TallestVine(int seedA, int seedB, int days)
{
    int seedLarge = 0;
    int seedSmall = 0;
    if (seedA < seedB){
        seedSmall = seedA;
        seedLarge = seedB;
    } else if (seedA > seedB){
        seedSmall = seedB;
        seedLarge = seedA;
    } else {
        return seedA;
    }
    
    int SmallGrowNum = 0;
    int LargeGrowNum = 0;
    
    for (int i = 0; i < days*2; i++){
        int sumSmall = 0;
        int sumLarge = 0;

        int tempSmall = seedSmall;
        int tempLarge = seedLarge;

        
        if (seedSmall < seedLarge){
            while (tempSmall > 0){
                sumSmall += tempSmall % 10;
                tempSmall = tempSmall / 10;
            }
            seedSmall += sumSmall;
            SmallGrowNum++;
            
        } else if (seedSmall > seedLarge){
            while (tempLarge > 0){
                sumLarge += tempLarge % 10;
                tempLarge = tempLarge / 10;
            }
            seedLarge += sumLarge;
            LargeGrowNum++;
            
        } else {
            return seedLarge;
        }
        
        if (SmallGrowNum > days || LargeGrowNum > days){
            for (int j = 0; j < days; j++){
                int sumLarge2 = 0;
                int tempLarge2 = seedLarge;
                while (tempLarge2 > 0){
                    sumLarge2 += tempLarge2 % 10;
                    tempLarge2 = tempLarge2 / 10;
                }
                seedLarge += sumLarge2;
            }
            return seedLarge;
        }
        
    }
    
    if (seedSmall < seedLarge){
        return seedLarge;
    } else if (seedSmall > seedLarge){
        return seedSmall;
    }
}",0
kwan797,1697244693,2,"#include <stdio.h>
 
int TallestVine(int seedA, int seedB, int days)
{
    int seedLarge = 0;
    int seedSmall = 0;
    if (seedA < seedB){
        seedSmall = seedA;
        seedLarge = seedB;
    } else if (seedA > seedB){
        seedSmall = seedB;
        seedLarge = seedA;
    } else {
        return seedA;
    }
    
    int SmallGrowNum = 0;
    int LargeGrowNum = 0;
    
    for (int i = 0; i < days*2; i++){
        int sumSmall = 0;
        int sumLarge = 0;

        int tempSmall = seedSmall;
        int tempLarge = seedLarge;

        
        if (seedSmall < seedLarge){
            while (tempSmall > 0){
                sumSmall += tempSmall % 10;
                tempSmall = tempSmall / 10;
            }
            seedSmall += sumSmall;
            SmallGrowNum++;
            
        } else if (seedSmall > seedLarge){
            while (tempLarge > 0){
                sumLarge += tempLarge % 10;
                tempLarge = tempLarge / 10;
            }
            seedLarge += sumLarge;
            LargeGrowNum++;
            
        } else {
            return seedLarge;
        }
        
        if (SmallGrowNum > days || LargeGrowNum > days){
            for (int j = 0; j < days; j++){
                int sumLarge2 = 0;
                int tempLarge2 = seedLarge;
                while (tempLarge2 > 0){
                    sumLarge2 += tempLarge2 % 10;
                    tempLarge2 = tempLarge2 / 10;
                }
                seedLarge += sumLarge2;
            }
            return seedLarge;
        }
        
    }
    
    if (seedSmall < seedLarge){
        return seedLarge;
    } else if (seedSmall > seedLarge){
        return seedSmall;
    }
    
    return 0;
}",0
kwan797,1697246063,3,"#include <stdio.h>
 
int TallestVine(int seedA, int seedB, int days)
{
    int seedLarge = 0;
    int seedSmall = 0;
    if (seedA < seedB){
        seedSmall = seedA;
        seedLarge = seedB;
    } else if (seedA > seedB){
        seedSmall = seedB;
        seedLarge = seedA;
    } else {
        return seedA;
    }
    
    int SmallGrowNum = 0;
    int LargeGrowNum = 0;
    
    for (int i = 0; i < days*2; i++){
        int sumSmall = 0;
        int sumLarge = 0;

        int tempSmall = seedSmall;
        int tempLarge = seedLarge;

        
        if (seedSmall < seedLarge){
            while (tempSmall > 0){
                sumSmall += tempSmall % 10;
                tempSmall = tempSmall / 10;
            }
            seedSmall += sumSmall;
            SmallGrowNum++;
            
        } else if (seedSmall > seedLarge){
            while (tempLarge > 0){
                sumLarge += tempLarge % 10;
                tempLarge = tempLarge / 10;
            }
            seedLarge += sumLarge;
            LargeGrowNum++;
            
        } else {
            return seedLarge;
        }
        
        if (SmallGrowNum > days || LargeGrowNum > days){
            int seedSmall, seedLarge;
            if (seedA < seedB) {
                seedSmall = seedA;
                seedLarge = seedB;
            } else if (seedA > seedB) {
                seedSmall = seedB;
                seedLarge = seedA;
            } else {
                return seedA;
            }
            for (int j = 0; j < days; j++) {
                int sumSmall = 0;
                int sumLarge = 0;
                int tempSmall = seedSmall;
                int tempLarge = seedLarge;
                
                while (tempSmall > 0) {
                    sumSmall += tempSmall % 10;
                    tempSmall = tempSmall / 10;
                }
                seedSmall += sumSmall;
                while (tempLarge > 0) {
                    sumLarge += tempLarge % 10;
                    tempLarge = tempLarge / 10;
                }
                seedLarge += sumLarge;
                if (seedSmall == seedLarge) {
                    return seedSmall;
                }
            }
            if (seedSmall < seedLarge) {
                return seedLarge; 
            } else {
                return seedSmall;
            }
        }
    }
    
    if (seedSmall < seedLarge){
        return seedLarge;
    } else if (seedSmall > seedLarge){
        return seedSmall;
    }
    
    return 0;
}",1
kyoo839,1697253665,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int seedA_array[100];
    int seedB_array[100];

    seedA_array[0] = seedA;
    int a, firstA, secondA, thirdA, sumA;
    for (a = 1; a <= days; a++) {
        firstA = 0;
        secondA = 0;
        thirdA = 0;
        sumA = 0;
        firstA = seedA_array[a - 1] / 100;
        secondA = (seedA_array[a - 1] - (100 * firstA)) / 10;
        thirdA = seedA_array[a - 1] - (100 * firstA) - (10 * secondA);
        sumA = firstA + secondA + thirdA;
        seedA_array[a] = seedA_array[a - 1] + sumA;
    }

    seedB_array[0] = seedB;
    int b, firstB, secondB, thirdB, sumB;
    for (b = 1; b <= days; b++) {
        firstB = 0;
        secondB = 0;
        thirdB = 0;
        sumB = 0;
        firstB = seedB_array[b - 1] / 100;
        secondB = (seedB_array[b - 1] - (100 * firstB)) / 10;
        thirdB = seedB_array[b - 1] - (100 * firstB) - (10 * secondB);
        sumB = firstB + secondB + thirdB;
        seedB_array[b] = seedB_array[b - 1] + sumB;
    }

    int i, j;
    int highest = 0;
    for (i = 0; i <= days; i++) {
        for (j = 0; j <= days; j++) {
            if (seedA_array[i] == seedB_array[j]) {
                highest = seedA_array[i];
                return highest;
            } 
        }
    }

    if (highest == 0) {
        if (seedA_array[days] >= seedB_array[days]) {
            highest = seedA_array[days];
        } else {
            highest = seedB_array[days];
        }
    }

    return highest;
}",0
kyoo839,1697254271,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int seedA_array[100];
    int seedB_array[100];

    seedA_array[0] = seedA;
    int a, firstA, secondA, thirdA, sumA, highA;
    for (a = 1; a <= days; a++) {
        highA = 0;
        firstA = 0;
        secondA = 0;
        thirdA = 0;
        highA = seedA_array[a - 1] / 1000;
        firstA = (seedA_array[a - 1] - (1000 * highA))/ 100;
        secondA = (seedA_array[a - 1] - (1000 * highA) - (100 * firstA)) / 10;
        thirdA = seedA_array[a - 1] - (1000 * highA) - (100 * firstA) - (10 * secondA);
        sumA = highA + firstA + secondA + thirdA;
        seedA_array[a] = seedA_array[a - 1] + sumA;
    }

    seedB_array[0] = seedB;
    int b, firstB, secondB, thirdB, sumB, highB;
    for (b = 1; b <= days; b++) {
        highB = 0;
        firstB = 0;
        secondB = 0;
        thirdB = 0;
        highB = seedB_array[b - 1] / 1000;
        firstB = (seedB_array[b - 1] - (1000 * highB))/ 100;
        secondB = (seedB_array[b - 1] - (1000 * highB) - (100 * firstB)) / 10;
        thirdB = seedB_array[b - 1] - (1000 * highB) - (100 * firstB) - (10 * secondB);
        sumB = highB + firstB + secondB + thirdB;
        seedB_array[b] = seedB_array[b - 1] + sumB;
    }

    int i, j;
    int highest = 0;
    for (i = 0; i <= days; i++) {
        for (j = 0; j <= days; j++) {
            if (seedA_array[i] == seedB_array[j]) {
                highest = seedA_array[i];
                return highest;
            } 
        }
    }

    if (highest == 0) {
        if (seedA_array[days] >= seedB_array[days]) {
            highest = seedA_array[days];
        } else {
            highest = seedB_array[days];
        }
    }

    return highest;
}",0
kyoo839,1697340750,3,"#include <stdio.h>

int SUM(int height)
{
    int sum = 0;

    while (height != 0) {
        sum += height % 10;
        height = height / 10;
    }

    return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
    int dayA = 0;
    int dayB = 0;
    while ((seedA != seedB) && ((days > dayA) || (days > dayB))) {
        if ((seedA > seedB) && (days > dayB)) {
            seedB = seedB +SUM(seedB);
            dayB++;
        } else if ((seedA < seedB) && (days > dayA)) {
            seedA = seedA + SUM(seedA);
            dayA++;
        } else if (days > dayA) {
            seedA = seedA + SUM(seedA);
            dayA++;
        } else if (days > dayB) {
            seedB = seedB + SUM(seedB);
            dayB++;
        }
    }

    if (seedA == seedB) {
        return seedA;
    } else if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }

}
",1
kzhu796,1697231747,1,"int TallestVine(int seedA, int seedB, int days)
{
    int tallestA = seedA;
    int tallestB = seedB;
    int day;

    for (day = 0; day < days; day++) {
        int sumA = 0, sumB = 0;
        int tempA = tallestA;
        int tempB = tallestB;
        
        while (tempA > 0) {
            sumA += (tempA % 10); // sums the digits
            tempA = tempA / 10;
        }

        tallestA += sumA;


        for (int innerDay = 0; innerDay < days; innerDay++) {
            tempB = tallestB;
            sumB = 0;

            while (tempB > 0) {
                sumB += (tempB % 10); // sums the digits
                tempB = tempB / 10;
            }
            tallestB += sumB;

            if (tallestA == tallestB) {
                return tallestA; // Vines have joined
            }
        }
        tallestB = seedB; //resetting value of B
    }// if no vines join, will exit this for loop and return the tallest vine:
    
    if (tallestA > tallestB) {
        return tallestA; // Vine A is taller
    }
    else {
        return tallestB; // Vine B is taller
    }
}",0
kzhu796,1697233023,2,"int TallestVine(int seedA, int seedB, int days)
{
    int tallestA = seedA;
    int tallestB = seedB;
    int day;

    for (day = 0; day < days; day++) {
        int sumA = 0, sumB = 0;
        int tempA = tallestA;
        int tempB = tallestB;
        
        while (tempA > 0) {
            sumA += (tempA % 10); // sums the digits
            tempA = tempA / 10;
        }

        tallestA += sumA;

        
        for (int innerDay = 0; innerDay < days; innerDay++) {
            tempB = tallestB;
            sumB = 0;

            while (tempB > 0) {
                sumB += (tempB % 10); // sums the digits
                tempB = tempB / 10;
            }
            tallestB += sumB;

            if (tallestA == tallestB) {
                return tallestA; // Vines have joined
            }
        }
        tallestB = seedB; //resetting value of B
    }// if no vines join, will exit this for loop and return the tallest vine:
    
    int tallestA2 = seedA;
    int tallestB2 = seedB;

    for (day = 0; day < days; day++) {
        int sumA2 = 0, sumB2 = 0;
        int tempA2 = tallestA2;
        int tempB2 = tallestB2;

        while (tempA2 > 0) {
            sumA2 += (tempA2 % 10); // sums the digits
            tempA2 = tempA2 / 10;
        }
        while (tempB2 > 0) {
            sumB2 += (tempB2 % 10); // sums the digits
            tempB2 = tempB2 / 10;
        }
        tallestA2 += sumA2;
        tallestB2 += sumB2;
    }

    if (tallestA2 > tallestB2) {
        return tallestA2; // Vine A is taller
    }
    else {
        return tallestB2; // Vine B is taller
    }
}",1
lazz729,1697259891,1,"#include <math.h>

int GrowVine(int height) {

    int i = 0;
    int extraHeight = 0;
    int tempHeight = height;

    while (height / (int)pow(10, i)) {
        i++;
    }

    for (int j = i - 1; j >= 0; j--) {
        extraHeight = extraHeight + (tempHeight / (int)pow(10, j));
        tempHeight = tempHeight - (tempHeight / (int)pow(10, j) * (int)pow(10, j));
    }

    return height + extraHeight;

}

int TallestVine(int heightOne, int heightTwo, int daysGrowth) {

    int stepsOne = 0;
    int stepsTwo = 0;
    int steps = 0;
    while ((stepsOne < daysGrowth || stepsTwo < daysGrowth)) {
        if (heightOne == heightTwo) {
            return heightOne;
        } else if ( (heightOne < heightTwo && stepsOne < daysGrowth) || stepsTwo == daysGrowth) {
            heightOne = GrowVine(heightOne);    
            stepsOne++;
        } else if ( (heightTwo < heightOne && stepsTwo < daysGrowth) || stepsOne == daysGrowth) {
            heightTwo = GrowVine(heightTwo);
            stepsTwo++;
        }
        steps++;

    }

    if (heightOne >= heightTwo) {
        return heightOne;
    } else {
        return heightTwo;
    }

}",1
lbyr117,1697067186,1,"#include <stdio.h>
#include <math.h>
int TallestVine(int seedA, int seedB, int days)
{
    int i,j,digit1a,digit2a,digit3a,digit1b,digit2b,digit3b;
    int digitA[days-1];
    int digitB[days-1];
    for(i=0;i<days;i++)
    {
        digit1a=(seedA-(seedA % 100))/100;  
        digit2a=((seedA-(digit1a*100))-((seedA-(digit1a*100))%10))/10;
        digit3a=seedA-(digit1a*100)-(digit2a*10);    
        seedA=seedA+digit1a+digit2a+digit3a;
    
        digit1b=(seedB-(seedB % 100))/100;
        digit2b=((seedB-(digit1b*100))-((seedB-(digit1b*100))%10))/10;
        digit3b=seedB-(digit1b*100)-(digit2b*10);
        seedB=seedB+digit1b+digit2b+digit3b;
        
        digitA[i]=seedA;
        digitB[i]=seedB;
    }
    for(i=0;i<days;i++)
    {
        for(j=0;j<days;j++)
        {
            if(digitA[i]==digitB[j])
            return digitA[i];
        }
    }
    
    
    if(seedA>seedB)
    {
        return seedA;    
    }
    else
    {
        return seedB;    
    }    
}
",0
lbyr117,1697213630,2,"#include <stdio.h>
#include <math.h>
int TallestVine(int seedA, int seedB, int days)
{
    int i,j,tempA,tempB,tempC,originalB;
    if(seedA<seedB)
    {
    tempC=seedA;
    seedA=seedB;
    seedB=tempC;
    }
    originalB=seedB;
    for(i=0;i<days;i++)
    {
        seedB=originalB;
        tempA=seedA;
        while(tempA>0)
            {
                seedA=seedA+tempA%10;
                tempA=tempA/10;
            }
        for(j=0;j<days;j++)
        {
            tempB=seedB;
            while(tempB>0)
            {
                seedB=seedB+tempB%10;
                tempB=tempB/10;
            }
            if(seedA==seedB)
            {
                return seedB;
            }
        }
    }
    
    
    if(seedA>seedB)
    {
        return seedA;    
    }
    else
    {
        return seedB;    
    }    
}
",1
lchu848,1697451846,1,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA, vineB = seedB;
    for (int i = 1; i <= days; i++) {
        int sumA = sumOfDigits(vineA);
        int sumB = sumOfDigits(vineB);

        if (vineA == vineB) {
            return vineA;
        }

        if (sumA > sumB) {
            vineA += sumA;
        } else {
            vineB += sumB;
        }
    }
    return (vineA > vineB) ? vineA : vineB;
}",0
lchu848,1697451898,2,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA, vineB = seedB;

    for (int i = 1; i <= days; i++) {
        int sumA = sumOfDigits(vineA);
        int sumB = sumOfDigits(vineB);

        if (vineA == vineB) {
            return vineA;
        }

        if (sumA > sumB) {
            vineB += sumB;
        } else {
            vineA += sumA;
        }
    }

    return (vineA > vineB) ? vineA : vineB;
}",0
ldea753,1697438338,1,"int TallestVine(int vine1, int vine2, int days) {
    int temp1 = vine1;
    int temp2 = vine2;
    int set = vine2;

    for (int i = 0; i < days; i++) {

        while(temp1 > 0)
        {
            int digit1 = temp1 % 10;
            vine1 += digit1;
            temp1 = temp1 / 10;

        }
        temp1 = vine1;

        for (int j = 0; j < days; j++) {
            while(temp2 > 0)
            {
                int digit2 = temp2 % 10;
                vine2 += digit2;
                temp2 = temp2 / 10;
            }

            if (vine1 == vine2)
                return vine1;

            temp2 = vine2;

        }
        temp2 = set;
        vine2 = set;

    }
    for (int i = 0; i < days; i++) {
        while(temp2 > 0)
        {
            int digit2 = temp2 % 10;
            vine2 += digit2;
            temp2 = temp2 / 10;
        }
        temp2 = vine2;
    }

    if (vine1 > vine2)
        return vine1;
    else
        return vine2;

}",1
ldou101,1697416185,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days){
int A[days+1];
int B[days+1];
A[0]=seedA;
B[0]=seedB;
printf(""A= %d "", A[0]);
for (int i=0; i<days; i++){
    A[i+1]=A[i]+A[i]/100+ ((A[i]/10)%10) + A[i]-((A[i]/10)*10);
    B[i+1]=B[i]+B[i]/100+ ((B[i]/10)%10) + B[i]-((B[i]/10)*10);
    printf(""%d, "", A[i+1]);
}
printf(""\nB= "");
for (int i=0; i<=days; i++){
    printf(""%d, "", B[i]);}

for (int i=0; i<=days; i++){
    for (int j=0; j<=days; j++){
        if (A[i]==B[j]){
        return A[i];}
}}
if (A[days-1]>B[days-1]){
    return A[days];
}else {
return B[days];
    }}

void main(){
printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));
}",0
ldou101,1697416205,2,"int TallestVine(int seedA, int seedB, int days){
int A[days+1];
int B[days+1];
A[0]=seedA;
B[0]=seedB;
printf(""A= %d "", A[0]);
for (int i=0; i<days; i++){
    A[i+1]=A[i]+A[i]/100+ ((A[i]/10)%10) + A[i]-((A[i]/10)*10);
    B[i+1]=B[i]+B[i]/100+ ((B[i]/10)%10) + B[i]-((B[i]/10)*10);
    printf(""%d, "", A[i+1]);
}
printf(""\nB= "");
for (int i=0; i<=days; i++){
    printf(""%d, "", B[i]);}

for (int i=0; i<=days; i++){
    for (int j=0; j<=days; j++){
        if (A[i]==B[j]){
        return A[i];}
}}
if (A[days-1]>B[days-1]){
    return A[days];
}else {
return B[days];
    }}",0
ldou101,1697416247,3,"int TallestVine(int seedA, int seedB, int days){
int A[days+1];
int B[days+1];
A[0]=seedA;
B[0]=seedB;
for (int i=0; i<days; i++){
    A[i+1]=A[i]+A[i]/100+ ((A[i]/10)%10) + A[i]-((A[i]/10)*10);
    B[i+1]=B[i]+B[i]/100+ ((B[i]/10)%10) + B[i]-((B[i]/10)*10);
}
for (int i=0; i<=days; i++){
    for (int j=0; j<=days; j++){
        if (A[i]==B[j]){
        return A[i];}
}}
if (A[days-1]>B[days-1]){
    return A[days];
}else {
return B[days];
    }}",0
ldou101,1697417247,4,"int TallestVine(int seedA, int seedB, int days){
int a,b,c,d;
int A[days+1];
int B[days+1];
A[0]=seedA;
B[0]=seedB;
for (int i=0; i<days; i++){
 a=A[i]/1000;
 b=(A[i]-(A[i]/1000*1000))/100;
 c=(A[i]-1000*a - 100*b)/10;
 d=(A[i]-1000*a-100*b-10*c);
A[i+1]=A[i]+a+b+c+d;
 a=B[i]/1000;
 b=(B[i]-(B[i]/1000*1000))/100;
 c=(B[i]-1000*a - 100*b)/10;
 d=(B[i]-1000*a-100*b-10*c);
B[i+1]=B[i]+a+b+c+d;
}
for (int i=0; i<=days; i++){
    for (int j=0; j<=days; j++){
        if (A[i]==B[j]){
        return A[i];}
}}
if (A[days-1]>B[days-1]){
    return A[days];
}else {
return B[days];
    }}
",0
lfan827,1697381933,1,"int TallestVine(int seedA, int seedB, int days) {
    for (int i = 0; i < days; i++) {
        seedA = grow(seedA);
        seedB = grow(seedB);
    }

    return (seedA > seedB) ? seedA : seedB;
}

int grow(int a) {
    int sum = 0, num = a;
    while (a != 0) {
        sum += (a % 10);
        a = (a / 10);
    }
    return (num + sum);
}",0
lfan827,1697382700,2,"int TallestVine(int seedA, int seedB, int days) {
    int i = 0;
    while (i < days) { 
        if (seedA < seedB){
            int k = 0;
            while (seedA < seedB && i < days){
                seedA = grow(seedA);
                i++;
                k++;
            }
            if (seedA == seedB) {
                return seedA;
            }
            for (int j = 0; j < k;j++){
                seedB = grow(seedB);
                if (seedA == seedB) {
                    return seedA;
                }
            }
        }
        else{
            int k = 0;
            while (seedB < seedA && i < days){
                seedB = grow(seedB);
                i++;
                k++;
            }
            if (seedA == seedB) {
                return seedA;
            }
            for (int j = 0; j < k;j++){
                seedA = grow(seedA);
                if (seedA == seedB) {
                    return seedA;
                }
            }
        }
        
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}

int grow(int a) {
    int sum = 0, num = a;
    while (a != 0) {
        sum += (a % 10);
        a = (a / 10);
    }
    return (num + sum);
}",0
lfan827,1697382758,3,"int grow(int a) {
    int sum = 0, num = a;
    while (a != 0) {
        sum += (a % 10);
        a = (a / 10);
    }
    return (num + sum);
}
int TallestVine(int seedA, int seedB, int days) {
    int i = 0;
    while (i < days) { 
        if (seedA < seedB){
            int k = 0;
            while (seedA < seedB && i < days){
                seedA = grow(seedA);
                i++;
                k++;
            }
            if (seedA == seedB) {
                return seedA;
            }
            for (int j = 0; j < k;j++){
                seedB = grow(seedB);
                if (seedA == seedB) {
                    return seedA;
                }
            }
        }
        else{
            int k = 0;
            while (seedB < seedA && i < days){
                seedB = grow(seedB);
                i++;
                k++;
            }
            if (seedA == seedB) {
                return seedA;
            }
            for (int j = 0; j < k;j++){
                seedA = grow(seedA);
                if (seedA == seedB) {
                    return seedA;
                }
            }
        }
        
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}
",0
lfan827,1697384719,4,"#include <stdio.h>

int grow(int a) {
    int sum = 0, num = a;
    while (a != 0) {
        sum += (a % 10);
        a = (a / 10);
    }
    return (num + sum);
}
int TallestVine(int seedA, int seedB, int days) {
    int i = 0,j; int B = seedB;
    while (i < days) {
        j = 0;
        seedA = grow(seedA);
        while (j < days) {
            B = grow(B);
            if (B == seedA){
                return seedA;
            }
            j++;
        }
        B = seedB;
        i++;
    }
    while (i < days) {
        seedB = grow(seedB);
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
lfan827,1697385219,5,"#include <stdio.h>

int grow(int a) {
    int sum = 0, num = a;
    while (a != 0) {
        sum += (a % 10);
        a = (a / 10);
    }
    return (num + sum);
}
int TallestVine(int seedA, int seedB, int days) {
    int i = 0,j; int B = seedB;
    while (i < days) {
        j = 0;
        seedA = grow(seedA);
        while (j < days) {
            B = grow(B);
            if (B == seedA){
                return seedA;
            }
            j++;
        }
        B = seedB;
        i++;
    }
    i = 0;
    while (i < days) {
        seedB = grow(seedB);
        i++;
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",1
lgan833,1697431306,1,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days)
{
	int numberA[200] = {0};
	int numberB[200] = {0};
	numberA[0] = seedA;
	numberB[0] = seedB;
	for (int i = 1; i <= days; i++) {
		for (int j = 1; j <= days; j++) {

			numberA[i] = numberA[i - 1] + numberA[i - 1] / 100 + (numberA[i - 1] % 100) / 10 + numberA[i - 1] % 10;
			numberB[j] = numberB[j - 1] + numberB[j - 1] / 100 + (numberB[j - 1] % 100) / 10 + numberB[j - 1] % 10;
			if (numberA[i] == numberB[j]) {
				return numberA[i];
			}
		}
	}
	if (numberA[days] > numberB[days]) {
		return numberA[days];
	}
	else {
		return numberB[days];
	}
}",0
lhal844,1697332033,1,"int Progress(int plant)
{
	int growth = 0;
	int newplant = plant;

	while (newplant >= 1)
	{
		growth += newplant % 10;
		newplant /= 10;
	}

	return plant + growth;
}

int TallestVine(int seedA, int seedB, int days)
{
	int planta = seedA;
	int plantb = seedB;
	int tempa, tempb;

	

	for (int i = 0;i < days + 1;i++)
	{
		tempa = seedA;
		tempb = seedB;
		
		for (int j = 0;j < i + 1;j++) // if A in B
		{
			
			if (planta == tempb)
			{
				return planta;
			}
			tempb = Progress(tempb);
		}
		for (int j = 0;j < i + 1;j++) // if B in A
		{

			if (plantb == tempa)
			{
				return plantb;
			}
			tempa = Progress(tempa);
		}

		if (i != days)
		{
			planta = Progress(planta);
			plantb = Progress(plantb);
		}
	}
	if (planta > plantb)
	{
		return planta;
	}
	else
	{
		return plantb;
	}
}",1
llat663,1697452662,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int VineA = seedA;
    int VineB = seedB;

    for (int i = 0; i < days; i++) {
        if (VineA == VineB) {
            return VineA;
        }

        int sumA = 0;
        int sumB = 0;

        int tempA = VineA;
        int tempB = VineB;

        while (tempA != 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB != 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        VineA += sumA;
        VineB += sumB;
    }

    return (VineA > VineB) ? VineA : VineB;
}",0
lli393,1697164042,1,"int TallestVine(int vineA, int seedB, int days){
	int i, j;
	int vineB = seedB;

	//get all possible growth
	for (i = 0; i < days; i++){
		//vineA
		vineA = getVine(vineA);
		vineB = seedB;
		for (j = 0; j < days; j++){
			//vineB
			vineB = getVine(vineB);
			
			//return height if same, they meet
			if (vineB == vineA){
				return vineB;
			}
		}
	}
	
	//if doesn't meet
	if (vineA > vineB){
		return vineA;
	}else if (vineB > vineA){
		return vineB;
	}
	
	return 0;
}

int getVine(int seed){
	int sum = 0, vine = seed;
	//sum
	while (vine != 0){
		sum += vine % 10;
		vine = vine / 10;
	}
	sum += seed;
	return sum;
}",0
lli393,1697164472,2,"int getVine(int seed);

int TallestVine(int vineA, int seedB, int days){
	int i, j;
	int vineB = seedB;

	//get all possible growth
	for (i = 0; i < days; i++){
		//vineA
		vineA = getVine(vineA);
		vineB = seedB;
		for (j = 0; j < days; j++){
			//vineB
			vineB = getVine(vineB);
			
			//return height if same, they meet
			if (vineB == vineA){
				return vineB;
			}
		}
	}
	
	//if doesn't meet
	if (vineA > vineB){
		return vineA;
	}else if (vineB > vineA){
		return vineB;
	}
	
	return 0;
}

int getVine(int seed){
	int sum = 0, vine = seed;
	//sum
	while (vine != 0){
		sum += vine % 10;
		vine = vine / 10;
	}
	sum += seed;
	return sum;
}",1
llu744,1697453445,1,"int TallestVine(int seedA, int seedB, int days) 
{
    int lengthA = seedA;  
    int lengthB = seedB;  

    int historyA[days + 1];
    int historyB[days + 1];

    historyA[0] = seedA;
    historyB[0] = seedB;

    for (int day = 1; day <= days; day++) {
        int sumOfDigitsA = 0;
        int sumOfDigitsB = 0;

        int tempA = lengthA;
        while (tempA > 0) {
            sumOfDigitsA += tempA % 10;
            tempA /= 10;
        }

        int tempB = lengthB;
        while (tempB > 0) {
            sumOfDigitsB += tempB % 10;
            tempB /= 10;
        }

        lengthA += sumOfDigitsA;
        lengthB += sumOfDigitsB;

        historyA[day] = lengthA;
        historyB[day] = lengthB;

        for (int i = 0; i < day; i++) {
            if (lengthA == historyB[i]) {
                return lengthA;
            }
            if (lengthB == lengthA[i]) {
                return lengthB;
            }
        }
    }
    return (vineA > vineB) ? vineA : vineB;
}",0
llu744,1697453583,2,"int TallestVine(int seedA, int seedB, int days) 
{
    int lengthA = seedA;  
    int lengthB = seedB;  

    int historyA[days + 1];
    int historyB[days + 1];

    historyA[0] = seedA;
    historyB[0] = seedB;

    for (int day = 1; day <= days; day++) {
        int sumOfDigitsA = 0;
        int sumOfDigitsB = 0;

        int tempA = lengthA;
        while (tempA > 0) {
            sumOfDigitsA += tempA % 10;
            tempA /= 10;
        }

        int tempB = lengthB;
        while (tempB > 0) {
            sumOfDigitsB += tempB % 10;
            tempB /= 10;
        }

        lengthA += sumOfDigitsA;
        lengthB += sumOfDigitsB;

        historyA[day] = lengthA;
        historyB[day] = lengthB;

        for (int i = 0; i < day; i++) {
            if (lengthA == historyB[i]) {
                return lengthA;
            }
            if (lengthB == lengthA[i]) {
                return lengthB;
            }
        }
    }
    return (lengthA > lengthB) ? lengthA : lengthB;
}",0
lrei069,1697272163,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int sumA, sumB, i, tempA, tempB;
    
    sumA = 0;
    sumB = 0;
    
    int valuesA[100] = {0};
    int valuesB[100] = {0};
    
    valuesA[0] = seedA;
    valuesB[0] = seedB;
    
    for (i = 0; i < days; i++) {
        tempA = valuesA[i];
        while (valuesA[i] != 0) {
            sumA = sumA + (valuesA[i] % 10);
            tempA = tempA/10;
        }
        tempB = valuesB[i];
        while (valuesB[i] != 0) {
            sumB = sumB + (valuesB[i] % 10);
            tempB = tempB/10;
        }
        valuesA[i] = valuesA[i] + sumA;
        valuesB[i] = valuesB[i] + sumB;
    }
    
    for (int i = 0; i < days; i++) {
        for (int j = 0; j < days; j++) {
            if (valuesA[i] >= valuesB[j]) {
                return valuesA[i];
            } else {
                return valuesB[i];
            }  
        }
    }
}",0
lrei069,1697277610,2,"int TallestVine(int seedA, int seedB, int days) {
    int sumA, sumB, i, tempA, tempB, maxA, maxB;
    
    sumA = 0;
    sumB = 0;
    
    int valuesA[100] = {0};
    int valuesB[100] = {0};
    
    valuesA[0] = seedA;
    valuesB[0] = seedB;
    
    for (i = 0; i < days; i++) {
        tempA = valuesA[i];
        while (valuesA[i] != 0) {
            sumA = sumA + (valuesA[i] % 10);
            tempA = tempA/10;
        }
        tempB = valuesB[i];
        while (valuesB[i] != 0) {
            sumB = sumB + (valuesB[i] % 10);
            tempB = tempB/10;
        }
        valuesA[i] = valuesA[i] + sumA;
        valuesB[i] = valuesB[i] + sumB;
        sumA = 0;
        sumB = 0;
    }
    
    maxA = 0;
    maxB = 0;
    
    for (int i = 0; i < days; i++) {
        for (int j = 0; j < days; j++) {
            if (valuesA[i] == valuesB[j]) {
                return valuesA[i];
            }
        }
        if (valuesA[i] > maxA) {
            maxA = valuesA[i]; 
        }
        if (valuesB[i] > maxB) {
            maxB = valuesB[i]; 
        }
    }
    
    if (maxA > maxB) {
        return maxA;
    } else {
        return maxB;
    }
    
} ",0
lrei069,1697280630,3,"int DigitSum(int number) {
    int temp, sum; 
    temp = number;
    sum = 0;
    while (temp > 0) {
        sum = sum + (temp % 10);
        temp = temp/10;
    }
    return number + sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int sumA, sumB, i, maxA, maxB;
    
    int valuesA[100];
    int valuesB[100];
    
    valuesA[0] = seedA;
    valuesB[0] = seedB;
    
    for (i = 0; i < days; i++) {
        valuesA[i + 1] = DigitSum(valuesA[i]);
        valuesB[i + 1] = DigitSum(valuesB[i]);
    }
    
    maxA = 0;
    maxB = 0;
    
    for (int i = 0; i <= days; i++) {
        for (int j = 0; j < days; j++) {
            if (valuesA[i] == valuesB[j]) {
                return valuesA[i];
            }
        }
        if (valuesA[i] > maxA) {
            maxA = valuesA[i]; 
        }
        if (valuesB[i] > maxB) {
            maxB = valuesB[i]; 
        }
    }
    
    if (maxA > maxB) {
        return maxA;
    } else {
        return maxB;
    }
    
}",0
lrei069,1697280659,4,"int DigitSum(int number) {
    int temp, sum; 
    temp = number;
    sum = 0;
    while (temp > 0) {
        sum = sum + (temp % 10);
        temp = temp/10;
    }
    return number + sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int i, maxA, maxB;
    
    int valuesA[100];
    int valuesB[100];
    
    valuesA[0] = seedA;
    valuesB[0] = seedB;
    
    for (i = 0; i < days; i++) {
        valuesA[i + 1] = DigitSum(valuesA[i]);
        valuesB[i + 1] = DigitSum(valuesB[i]);
    }
    
    maxA = 0;
    maxB = 0;
    
    for (int i = 0; i <= days; i++) {
        for (int j = 0; j < days; j++) {
            if (valuesA[i] == valuesB[j]) {
                return valuesA[i];
            }
        }
        if (valuesA[i] > maxA) {
            maxA = valuesA[i]; 
        }
        if (valuesB[i] > maxB) {
            maxB = valuesB[i]; 
        }
    }
    
    if (maxA > maxB) {
        return maxA;
    } else {
        return maxB;
    }
    
}",0
lrei069,1697280844,5,"int DigitSum(int number) {
    int temp, sum; 
    temp = number;
    sum = 0;
    while (temp > 0) {
        sum = sum + (temp % 10);
        temp = temp/10;
    }
    return number + sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int i, maxA, maxB;
    
    int valuesA[200];
    int valuesB[200];
    
    valuesA[0] = seedA;
    valuesB[0] = seedB;
    
    for (i = 0; i < days; i++) {
        valuesA[i + 1] = DigitSum(valuesA[i]);
        valuesB[i + 1] = DigitSum(valuesB[i]);
    }
    
    maxA = 0;
    maxB = 0;
    
    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (valuesA[i] == valuesB[j]) {
                return valuesA[i];
            }
        }
        if (valuesA[i] > maxA) {
            maxA = valuesA[i]; 
        }
        if (valuesB[i] > maxB) {
            maxB = valuesB[i]; 
        }
    }
    
    if (maxA > maxB) {
        return maxA;
    } else {
        return maxB;
    }
    
}",0
lrei069,1697340747,6,"int DigitSum(int number) {
    int temp, sum; 
    temp = number;
    sum = 0;
    while (temp > 0) {
        sum = sum + (temp % 10);
        temp = temp/10;
    }
    return number + sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int tempA, tempB, i, maxA, maxB;
    tempA = seedA;
    maxA, maxB = 0;
    
    for (i = 0; i < days; i++) {
        tempB = seedB;
        tempA = DigitSum(tempA);
        for (int j = 0; j < days; j++) {
            tempB = DigitSum(tempB);
            if (tempA == tempB) {
                return tempA;
            }
            maxB = tempB;
        }
        maxA = tempA;

    }
    
    
    if (maxA > maxB) {
        return maxA;
    } else {
        return maxB;
    }
    
}",0
lrei069,1697340782,7,"int DigitSum(int number) {
    int temp, sum; 
    temp = number;
    sum = 0;
    while (temp > 0) {
        sum = sum + (temp % 10);
        temp = temp/10;
    }
    return number + sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int tempA, tempB, i, maxA, maxB;
    tempA = seedA;
    maxA = 0;
    maxB = 0;
    
    for (i = 0; i < days; i++) {
        tempB = seedB;
        tempA = DigitSum(tempA);
        for (int j = 0; j < days; j++) {
            tempB = DigitSum(tempB);
            if (tempA == tempB) {
                return tempA;
            }
            maxB = tempB;
        }
        maxA = tempA;

    }
    
    
    if (maxA > maxB) {
        return maxA;
    } else {
        return maxB;
    }
    
}",1
mahu925,1697347525,1,"#include <stdio.h>
#include <string.h>

int GenerateVine(int x)
{
    int next = 0;
    
    int i = 0;
    int length = 0;
    char string[200];
    sprintf(string, ""%d"", x);
    length = strlen(string);
    
    for(i = 0; i < length;i++)
    {
        x += (string[i] - 48);
    }

    return x;
}


int TallestVine(int s1, int s2, int days)
{
    int i, j, current1, current2; 
    int intersection = 0;
    int prev1, prev2;
    
    current1 = s1;
    current2 = s2;
    
    for(i = 0; i <= days; i++)
    {
        //printf(""%d\n"", current1);
        current2 = s2;
        for(j = 0; j <= days; j++)
        {
            //printf(""c2 = %d\n"", current2);
            if(current2 == current1)
            {
               intersection = current2;
               return current2;
               
            }
            prev2 = current2;
            current2 = GenerateVine(current2);
            
        }
        prev1 = current1;
        current1 = GenerateVine(current1);
    }
    
    
    if(intersection == 0 && (prev1 > prev2))
    {
        intersection = prev1;
    }
    
    if(intersection == 0 && (prev2 > prev1))
    {
        intersection = prev2;
    }
    return intersection;
}",0
mahu925,1697347615,2,"#include <stdio.h>
#include <string.h>

int GenerateVine(int x)
{
    
    int i = 0;
    int length = 0;
    char string[200];
    sprintf(string, ""%d"", x);
    length = strlen(string);
    
    for(i = 0; i < length;i++)
    {
        x += (string[i] - 48);
    }

    return x;
}


int TallestVine(int s1, int s2, int days)
{
    int i, j, current1, current2; 
    int intersection = 0;
    int prev1, prev2;
    
    current1 = s1;
    current2 = s2;
    
    for(i = 0; i <= days; i++)
    {
        //printf(""%d\n"", current1);
        current2 = s2;
        for(j = 0; j <= days; j++)
        {
            //printf(""c2 = %d\n"", current2);
            if(current2 == current1)
            {
               intersection = current2;
               return current2;
               
            }
            prev2 = current2;
            current2 = GenerateVine(current2);
            
        }
        prev1 = current1;
        current1 = GenerateVine(current1);
    }
    
    
    if(intersection == 0 && (prev1 > prev2))
    {
        intersection = prev1;
    }
    
    if(intersection == 0 && (prev2 > prev1))
    {
        intersection = prev2;
    }
    return intersection;
}",1
mbal759,1697247657,1,"int TallestVine(int seedA, int seedB, int days)
{
    int tempDays = days;
    int origB = seedB;
    int finalB;
    while (tempDays > 0) {
        for (int i = 0; i < days; i++) {
            int remB = seedB % 10;
            int tempB = seedB;
            while (tempB != 0) {
                tempB = tempB/10;
                seedB += remB;
                remB = tempB % 10;
            }
            if (seedB == seedA) {
                return seedB;
            }
        }
        tempDays--;
        int remA = seedA % 10;
        int tempA = seedA;
        while (tempA != 0) {
            tempA = tempA/10;
            seedA += remA;
            remA = tempA % 10;
        }
        finalB = seedB;
        seedB = origB;
    }
    seedB = finalB;
    
    if (seedA > seedB) {
        return seedA;
    }
    else {
        return seedB;
    }
}",0
mbal759,1697253456,2,"int TallestVine(int seedA, int seedB, int days)
{
    int tempDays = days;
    int origB = seedB;
    int finalB;
    int remB;
    int tempB;
    
    //iterate through instances of seedA
    while (tempDays > 0) {
        for (int i = 0; i < days; i++) {
            remB = seedB % 10;
            tempB = seedB;
            while (tempB != 0) {
                tempB = tempB/10;
                seedB += remB;
                remB = tempB % 10;
            }
            if (seedB == seedA) {
                return seedB;
            }
        }
        tempDays--;

        int remA = seedA % 10;
        int tempA = seedA;
        while (tempA != 0) {
            tempA = tempA/10;
            seedA += remA;
            remA = tempA % 10;
        }
        finalB = seedB; //store final val of seedB
        seedB = origB; //reset val of seedB to inital
    }

    //iterate through instances of seedA
    for (int i = 0; i < days; i++) {
        remB = seedB % 10;
        tempB = seedB;
        while (tempB != 0) {
            tempB = tempB/10;
            seedB += remB;
            remB = tempB % 10;
        }
        if (seedB == seedA) {
            return seedB;
        }
    }

    if (seedA > seedB) {
        return seedA;
    }
    else {
        return seedB;
    }
}",0
mbal759,1697253552,3,"int TallestVine(int seedA, int seedB, int days)
{
    int tempDays = days;
    int origB = seedB;
    int remB;
    int tempB;
    
    //iterate through instances of seedA
    while (tempDays > 0) {
        for (int i = 0; i < days; i++) {
            remB = seedB % 10;
            tempB = seedB;
            while (tempB != 0) {
                tempB = tempB/10;
                seedB += remB;
                remB = tempB % 10;
            }
            if (seedB == seedA) {
                return seedB;
            }
        }
        tempDays--;

        int remA = seedA % 10;
        int tempA = seedA;
        while (tempA != 0) {
            tempA = tempA/10;
            seedA += remA;
            remA = tempA % 10;
        }
        seedB = origB; //reset val of seedB to inital
    }

    //iterate through instances of seedA
    for (int i = 0; i < days; i++) {
        remB = seedB % 10;
        tempB = seedB;
        while (tempB != 0) {
            tempB = tempB/10;
            seedB += remB;
            remB = tempB % 10;
        }
        if (seedB == seedA) {
            return seedB;
        }
    }

    if (seedA > seedB) {
        return seedA;
    }
    else {
        return seedB;
    }
}",1
mboy221,1696842443,1,"int Sum(int val) {
    int sum = 0;
    int count = 0;
    int number = val;
    int max = 1;
    while (number != 0) {
        number = number/10;
        count++;
    }
    for (int k = 0; k<count; k++) {
        max = max*10;
    }
    for (int i = 10; i<=max; i = i*10) {
        sum += (val%i)/(i/10);
        val = val - (val%i);
    }

    return sum;
}
int TallestVine(int seedA, int seedB, int days)
{
    int StartA = seedA;
    int StartB = seedB;
    int tempA = StartA;
    int tempB = StartB;
    for (int i = 0; i < days; i++) {
        tempB = StartB;
        seedA = seedA + Sum(seedA);
        for (int j = 0; j < i+1; j++) {
            if (seedA==tempB) {
                return seedA;
            }
            tempB = tempB + Sum(tempB);
        }
        tempA = StartA;
        seedB = seedB + Sum(seedB);
        for (int k = 0; k < i+1; k++) {
            if (seedB==tempA) {
                return seedB;
            }
            tempA = tempA + Sum(tempA);
        }
    }
    if (seedB>seedA) {
        return seedB;
    } else {
        return seedA;
    }
}",0
mboy221,1696843076,2,"int Sum(int val) {
    int sum = 0;
    int count = 0;
    int number = val;
    int max = 1;
    while (number != 0) {
        number = number/10;
        count++;
    }
    for (int k = 0; k<count; k++) {
        max = max*10;
    }
    for (int i = 10; i<=max; i = i*10) {
        sum += (val%i)/(i/10);
        val = val - (val%i);
    }

    return sum;
}
int TallestVine(int seedA, int seedB, int days)
{
    int StartA = seedA;
    int StartB = seedB;
    int tempA = StartA;
    int tempB = StartB;
    for (int i = 0; i < days; i++) {
        tempB = StartB;
        seedA = seedA + Sum(seedA);
        for (int j = 0; j < i+1; j++) {
            tempB = tempB + Sum(tempB);
            if (seedA==tempB) {
                return seedA;
            }
        }
        tempA = StartA;
        seedB = seedB + Sum(seedB);
        for (int k = 0; k < i+1; k++) {
            tempA = tempA + Sum(tempA);
            if (seedB==tempA) {
                return seedB;
            }
        }
    }
    if (seedB>seedA) {
        return seedB;
    } else {
        return seedA;
    }
}",1
mbut885,1697187937,1,"int TallestVine(int seedA, int seedB, int days) {
    int endVine;
    int i;
    int j;
    int startVine = seedA;
    int currentVine = startVine;
    int littleVine;
    int startVine2 = seedB;
    int currentVine2 = startVine2;
    int littleVine2;


    for (i = 0; i < days; i++) {
        littleVine = currentVine;
        while (littleVine != 0) {
            currentVine = currentVine + (littleVine % 10);
            littleVine = littleVine / 10;
        }
        
        currentVine2 = startVine2;
        for (j = 0; j < days; j++) {
            if ((currentVine2 == currentVine) || (currentVine2 == startVine)) {
                endVine = currentVine2;
                return endVine;
            }
            littleVine2 = currentVine2;
            while (littleVine2 != 0) {
                currentVine2 = currentVine2 + (littleVine2 % 10);
                littleVine2 = littleVine2 / 10;
            }

            if ((currentVine2 == currentVine) || (currentVine2 == startVine)) {
                endVine = currentVine2;
                return endVine;
            }
        }
    }

    if (currentVine >= currentVine2) {
        endVine = currentVine;
    }
    else if (currentVine2 > currentVine) {
        endVine = currentVine2;
    }
    
    return endVine;
}",1
mcha833,1697267475,1,"int TallestVine(int seedA, int seedB, int days)
{       
    int i, j, vineA[200], vineB[200], valuesA[3], valuesB[3];
    vineA[0] = seedA;
    vineB[0] = seedB;
    int length = 0;
    
    for(i = 1; i<= days; i++){
        valuesA[0] = vineA[(i-1)%200] / 100;
        valuesA[1] = (vineA[(i-1)%200] % 100) / 10;
        valuesA[2] = vineA[(i-1)%200] % 10;
        vineA[i%200] = vineA[(i-1)%200] + valuesA[0] + valuesA[1] + valuesA[2];

        for(j = 0; j < i; j++){
            if(vineA[i%200] == vineB[j%200]){
                return vineA[i%200];
            }
        }
        
        valuesB[0] = vineB[(i-1)%200] / 100;
        valuesB[1] = (vineB[(i-1)%200] % 100) / 10;
        valuesB[2] = vineB[(i-1)%200] % 10;
        vineB[i%200] = vineB[(i-1)%200] + valuesB[0] + valuesB[1] + valuesB[2];
        
        for(j = 0; j < i; j++){
            if(vineB[i%200] == vineA[j%200]){
                return vineB[i%200];
            }
        }
        
        if(vineA[i%200] > vineA[0] && vineB[i%200] > vineA[0]){
            for(j = 0; j < i; j++){
                vineA[j%200] = vineA[(j+1)%200];
            } 
        }
        
        if(vineA[i%200] > vineB[0] && vineB[i%200] > vineB[0]){
            for(j = 0; j < i; j++){
                vineB[j%200] = vineB[(j+1)%200];
            } 
        }
    }
    
    if(vineA[days%200] > vineB[days%200]){
        return vineA[days%200];
    }
        
    else{
        return vineB[days%200];
    } 
}",0
mcha833,1697267487,2,"int TallestVine(int seedA, int seedB, int days)
{       
    int i, j, vineA[200], vineB[200], valuesA[3], valuesB[3];
    vineA[0] = seedA;
    vineB[0] = seedB;
    
    for(i = 1; i<= days; i++){
        valuesA[0] = vineA[(i-1)%200] / 100;
        valuesA[1] = (vineA[(i-1)%200] % 100) / 10;
        valuesA[2] = vineA[(i-1)%200] % 10;
        vineA[i%200] = vineA[(i-1)%200] + valuesA[0] + valuesA[1] + valuesA[2];

        for(j = 0; j < i; j++){
            if(vineA[i%200] == vineB[j%200]){
                return vineA[i%200];
            }
        }
        
        valuesB[0] = vineB[(i-1)%200] / 100;
        valuesB[1] = (vineB[(i-1)%200] % 100) / 10;
        valuesB[2] = vineB[(i-1)%200] % 10;
        vineB[i%200] = vineB[(i-1)%200] + valuesB[0] + valuesB[1] + valuesB[2];
        
        for(j = 0; j < i; j++){
            if(vineB[i%200] == vineA[j%200]){
                return vineB[i%200];
            }
        }
        
        if(vineA[i%200] > vineA[0] && vineB[i%200] > vineA[0]){
            for(j = 0; j < i; j++){
                vineA[j%200] = vineA[(j+1)%200];
            } 
        }
        
        if(vineA[i%200] > vineB[0] && vineB[i%200] > vineB[0]){
            for(j = 0; j < i; j++){
                vineB[j%200] = vineB[(j+1)%200];
            } 
        }
    }
    
    if(vineA[days%200] > vineB[days%200]){
        return vineA[days%200];
    }
        
    else{
        return vineB[days%200];
    } 
}",0
mcha833,1697357583,3,"#include <stdio.h>
#include <math.h>

int TallestVine(int seedA, int seedB, int days)
{
    int i, j, vineA[200], vineB[200], valuesA[200], valuesB[200], tempA, tempB;
    vineA[0] = seedA;
    vineB[0] = seedB;

    for (i = 1; i <= days; i++) {

        int countA = 1;
        int countB = 1;
        tempA = vineA[i - 1];
        tempB = vineB[i - 1];

        while (tempA > 9) {
            tempA = tempA / 10;
            countA++;
        }

        for (j = 0; j < countA; j++) {
            if (j == 0) {
                valuesA[j] = vineA[(i - 1) % 200] / (int)pow(10, countA - 1);
            }

            else {
                valuesA[j] = vineA[(i - 1) % 200] % (int)pow(10, countA - j);
                valuesA[j] = valuesA[j] / (int)pow(10, countA - j - 1);
            }
        }
        vineA[i % 200] = vineA[(i - 1) % 200];

        for (j = 0; j < countA; j++) {
            vineA[i % 200] += valuesA[j];
        }

        for (j = 0; j < i; j++) {
            if (vineA[i % 200] == vineB[j % 200]) {
                return vineA[i % 200];
            }
        }

        while (tempB > 9) {
            tempB = tempB / 10;
            countB++;
        }

        for (j = 0; j < countB; j++) {
            if (j == 0) {
                valuesB[j] = vineB[(i - 1) % 200] / (int)pow(10, countB - 1);
            }

            else {
                valuesB[j] = vineB[(i - 1) % 200] % (int)pow(10, countB - j);
                valuesB[j] = valuesB[j] / (int)pow(10, countB - j - 1);
            }
        }
        vineB[i % 200] = vineB[(i - 1) % 200];

        for (j = 0; j < countB; j++) {
            vineB[i % 200] += valuesB[j];
        }

        for (j = 0; j < i; j++) {
            if (vineB[i % 200] == vineA[j % 200]) {
                return vineB[i % 200];
            }
        }

        if (vineA[i % 200] > vineA[0] && vineB[i % 200] > vineA[0]) {
            for (j = 0; j < i; j++) {
                vineA[j % 200] = vineA[(j + 1) % 200];
            }
        }

        if (vineA[i % 200] > vineB[0] && vineB[i % 200] > vineB[0]) {
            for (j = 0; j < i; j++) {
                vineB[j % 200] = vineB[(j + 1) % 200];
            }
        }
    }

    if (vineA[days % 200] > vineB[days % 200]) {
        return vineA[days % 200];
    }

    else {
        return vineB[days % 200];
    }
}",0
mcha833,1697372579,4,"#include <stdio.h>
#include <math.h>

int TallestVine(int seedA, int seedB, int days)
{
    int i, j, tempA, tempB;
    int valuesA[200] = { 0 };
    int valuesB[200] = { 0 };
    int vineA[200] = { 0 };
    int vineB[200] = { 0 };
    vineA[0] = seedA;
    vineB[0] = seedB;
    int removeA = 0;
    int removeB = 0;
    int removeLength = 0;

    for (i = 1; i <= days; i++) {

        int countA = 1;
        int countB = 1;
        tempA = vineA[i - 1 - removeA];
        tempB = vineB[i - 1 - removeB];

        while (tempA > 9) {
            tempA = tempA / 10;
            countA++;
        }

        for (j = 0; j < countA; j++) {
            if (j == 0) {
                valuesA[j] = vineA[(i - 1) - removeA] / (int)pow(10, countA - 1);
            }

            else {
                valuesA[j] = vineA[(i - 1) - removeA] % (int)pow(10, countA - j);
                valuesA[j] = valuesA[j] / (int)pow(10, countA - j - 1);
            }
        }
        vineA[i - removeA] = vineA[(i - 1) - removeA];

        for (j = 0; j < countA; j++) {
            vineA[i - removeA] += valuesA[j];
        }

        for (j = 0; j < i - removeLength; j++) {
            if (vineA[i - removeA] == vineB[j]) {
                return vineA[i - removeA];
            }
        }

        while (tempB > 9) {
            tempB = tempB / 10;
            countB++;
        }

        for (j = 0; j < countB; j++) {
            if (j == 0) {
                valuesB[j] = vineB[(i - 1) - removeB] / (int)pow(10, countB - 1);
            }

            else {
                valuesB[j] = vineB[(i - 1) - removeB] % (int)pow(10, countB - j);
                valuesB[j] = valuesB[j] / (int)pow(10, countB - j - 1);
            }
        }
        vineB[i - removeB] = vineB[(i - 1) - removeB];

        for (j = 0; j < countB; j++) {
            vineB[i - removeB] += valuesB[j];
        }

        for (j = 0; j < i - removeLength; j++) {
            if (vineB[i - removeB] == vineA[j]) {
                return vineB[i - removeB];
            }
        }

        if (vineA[i - removeA] >= vineA[0] && vineB[i - removeB] >= vineA[0]) {
            for (j = i - removeA; j >= 0; j--) {
                vineA[i - removeA - j] = vineA[i - removeA - j + 1];
            }
            removeA++;
        }

        if (vineA[i - removeA] >= vineB[0] && vineB[i - removeB] >= vineB[0]) {
            for (j = i - removeB; j >= 0; j--) {
                vineB[i - removeB - j] = vineB[i - removeB - j + 1];
            }
            removeB++;
        }

        if (removeA >= removeB) {
            removeLength = removeB;
        }

        else if (removeB > removeA) {
            removeLength = removeA;
        }
    }

    if (vineA[days - removeA] > vineB[days - removeB]) {
        return vineA[days - removeA];
    }

    else {
        return vineB[days - removeB];
    }
}",1
mdav506,1697338337,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
	int vineA = seedA;
	int vineB = seedB;
	int currentA = seedA;
	int currentB = seedB;
	int sum = 0;
	int arrayA[200];
	int arrayB[200];

	for (int i = 0; i < days; i++) {
		int digitCount = 0;
		while (vineA > 0) {
			vineA = vineA / 10;
			digitCount++;
		}
		vineA = currentA;
		for (int i = 0; i < digitCount; i++) {
			int digit = vineA % 10;
			sum += digit;
			vineA = vineA / 10;
		}
		vineA = currentA + sum;
		currentA = vineA;
		sum = 0;
		arrayA[i] = vineA;
	}

	for (int j = 0; j < days; j++) {
		int digitCount = 0;
		while (vineB > 0) {
			vineB = vineB / 10;
			digitCount++;
		}
		vineB = currentB;
		for (int i = 0; i < digitCount; i++) {
			int digit = vineB % 10;
			sum += digit;
			vineB = vineB / 10;
		}
		vineB = currentB + sum;
		currentB = vineB;
		sum = 0;
		arrayB[j] = vineB;
	}

	for (int x = 0; x < days; x++) {
		for (int y = 0; y < days; y++) {
			if (arrayA[x] == arrayB[y]) {
				return arrayA[x];
			}
		}
	}

	if (vineA > vineB) {
		return vineA;
	}
	else {
		return vineB;
	}
}",0
mdav506,1697338990,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
	int vineA = seedA;
	int vineB = seedB;
	int currentA = seedA;
	int currentB = seedB;
	int sum = 0;
	int arrayA[5000];
	int arrayB[5000];

	for (int i = 0; i < days; i++) {
		int digitCount = 0;
		while (vineA > 0) {
			vineA = vineA / 10;
			digitCount++;
		}
		vineA = currentA;
		for (int i = 0; i < digitCount; i++) {
			int digit = vineA % 10;
			sum += digit;
			vineA = vineA / 10;
		}
		vineA = currentA + sum;
		currentA = vineA;
		sum = 0;
		arrayA[i] = vineA;
	}

	for (int j = 0; j < days; j++) {
		int digitCount = 0;
		while (vineB > 0) {
			vineB = vineB / 10;
			digitCount++;
		}
		vineB = currentB;
		for (int i = 0; i < digitCount; i++) {
			int digit = vineB % 10;
			sum += digit;
			vineB = vineB / 10;
		}
		vineB = currentB + sum;
		currentB = vineB;
		sum = 0;
		arrayB[j] = vineB;
	}

	for (int x = 0; x < days; x++) {
		for (int y = 0; y < days; y++) {
			if (arrayA[x] == arrayB[y]) {
				return arrayA[x];
			}
		}
	}

	if (vineA > vineB) {
		return vineA;
	}
	else {
		return vineB;
	}
}",1
mger154,1697417102,1,"int Sum(int number) {
    int sum = 0;
    while (number != 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int count = 1;

    for (int i = 1; i <= days; i++) {

        vineA += Sum(vineA);

        while(vineB <= vineA && count <= days) {
            vineB += Sum(vineB);
            count++;

            if (vineB == vineA) {
                return vineA;
            }
        }
    }


    if (vineA > vineB) {
        return vineA;

    }
    else{
        return vineB;
    }


    int maxA = vineA;
    int maxB = vineB;


    if (maxA > maxB) {
        return maxA;

    }
    else if (maxB > maxA) {
        return maxB;
    }

    return 1;
}
",0
mger154,1697417703,2,"int Sum(int number) {
    int sum = 0;
    while (number != 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int vineA = seedA;
    int vineB = seedB;
    int count = 1;

    for (int i = 0; i < days; i++) {

        vineA += Sum(vineA);

        while(vineB <= vineA && count <= days) {
            vineB += Sum(vineB);
            count++;

            if (vineB == vineA) {
                return vineA;
            }
        }
    }


    if (count <= days && vineA < vineB) {
        while (count <= days) {
            vineB += Sum(vineB);
            count++;
        }
    }


    if (vineA > vineB) {
        return vineA;

    }
    else{
        return vineB;
    }
}
",0
mger154,1697419064,3,"int Sum(int number) {
    int sum = 0;
    while (number != 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int vineA = seedA;
    int vineB = seedB;
    int count = 1;

    for (int i = 0; i < days; i++) {

        vineA += Sum(vineA);

        while(vineB < vineA && count <= days) {
            vineB += Sum(vineB);
            count++;

            if (vineB == vineA) {
                return vineA;
            }
        }
    }


    if (count <= days && vineA < vineB) {
        while (count <= days) {
            vineB += Sum(vineB);
            count++;
        }
    }


    if (vineA > vineB) {
        return vineA;

    }
    else{
        return vineB;
    }
}",0
mger154,1697419891,4,"#include <stdio.h>

int Sum(int number) {
    int sum = 0;
    while (number != 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int vineA = seedA;
    int vineB = seedB;
    int count = 1;

    for (int i = 0; i < days; i++) {

        vineA += Sum(vineA);

        while(vineB <= vineA && count <= days) {
            vineB += Sum(vineB);
            count++;

            if (vineB == vineA) {
                return vineA;
            }
        }
    }


    if (count <= days && vineA < vineB) {
        while (count <= days) {
            vineB += Sum(vineB);
            count++;
        }
    }


    if (vineA > vineB) {
        return vineA;

    }
    else{
        return vineB;
    }
}
",0
mger154,1697420042,5,"#include <stdio.h>

int Sum(int number) {
    int sum = 0;
    while (number != 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int vineA = seedA;
    int vineB = seedB;
    int count = 1;

    for (int i = 0; i < days; i++) {

        vineA += Sum(vineA);

        while(vineB < vineA && count <= days) {
            vineB += Sum(vineB);
            count++;

            if (vineB == vineA) {
                return vineA;
            }
        }
    }


    if (count <= days && vineA < vineB) {
        while (count <= days) {
            vineB += Sum(vineB);
            count++;
        }
    }


    if (vineA > vineB) {
        return vineA;

    }
    else{
        return vineB;
    }
}
",0
mger154,1697420163,6,"#include <stdio.h>

int Sum(int number) {
    int sum = 0;
    while (number != 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int vineA = seedA;
    int vineB = seedB;
    int count = 1;

    for (int i = 0; i < days; i++) {

        vineA += Sum(vineA);

        while(vineB < vineA && count <= days) {
            vineB += Sum(vineB);
            count++;

            if (vineB == vineA) {
                return vineA;
            }
        }
    }


    if (count < days && vineA < vineB) {
        while (count <= days) {
            vineB += Sum(vineB);
            count++;
        }
    }


    if (vineA > vineB) {
        return vineA;

    }
    else{
        return vineB;
    }
}
",0
mger154,1697420387,7,"#include <stdio.h>

int Sum(int number) {
    int sum = 0;
    while (number != 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {

    int vineA = seedA;
    int vineB = seedB;
    int count = 1;

    for (int i = 0; i < days; i++) {

        vineA += Sum(vineA);

        while(vineB < vineA && count <= days) {
            vineB += Sum(vineB);
            count++;

            if (vineB == vineA) {
                return vineA;
            }
        }
    }


    if (count < days && vineA < vineB) {
        while (count <= days) {
            vineB += Sum(vineB);
            count++;
        }
    }


    if (vineA < vineB) {
        return vineB;

    }
    else{
        return vineA;
    }
}
",0
mgoy303,1696942922,1,"int calculateGrowth(int seed) {
    int growth = 0;
    int tempNum = seed;
    while (tempNum >= 1) {
        growth += tempNum % 10;
        tempNum /= 10;
    }
    return growth;
}

int TallestVine(int seedA, int seedB, int days) {
    int tempB;
    for (int i = 0; i < days; i++) {
        seedA += calculateGrowth(seedA);

        tempB = seedB;
        for (int j = 0; j < days; j++) {
            tempB += calculateGrowth(tempB);
            if (seedA == tempB) {
                return seedA;
            }
        }
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
mgoy303,1696943382,2,"int calculateGrowth(int seed) {
    int growth = 0;
    int tempNum = seed;
    while (tempNum >= 1) {
        growth += tempNum % 10;
        tempNum /= 10;
    }
    return growth;
}

int TallestVine(int seedA, int seedB, int days) {
    int tempB;
    int maxB = 0;
    for (int i = 0; i < days; i++) {
        seedA += calculateGrowth(seedA);

        tempB = seedB;
        for (int j = 0; j < days; j++) {
            tempB += calculateGrowth(tempB);
            if (seedA == tempB) {
                return seedA;
            } else if (j == days - 1 && maxB == 0) {
                maxB = tempB;
            }
        }
    }
    if (seedA > maxB) {
        return seedA;
    } else {
        return maxB;
    }
}",1
mgua740,1697427982,1,"#include <stdio.h>

int get_sum_of_digits(int x) {
    int res = 0;

    while (x) {
        res += x % 10;
        x /= 10;
    }

    return res;
}

int a = 0;
int b = 0;

int dp(int x, int y, int z) {
    // Base case: they are the same seed
   
    if (x == y) {
        return 1;
    }

    // Base case: number of days reached, we return the max between the two seeds
    if (z < 0) {
        return 0;
    }

    // Let the left seed grow and right seed grow independently, I recommend you trace the decision tree
    if (dp(x + get_sum_of_digits(x), y, z - 1) || dp(x, y + get_sum_of_digits(y), z - 1)) {
        a = (a > x) ? a : x;
        a = (a > y) ? a : y;
    }
    else {
        b = (b > x) ? b : x;
        b = (b > y) ? b : y;
    }

    return 0;
}

int TallestVine(int x, int y, int z) {
    a = 0;
    b = 0;
    dp(x, y, z);

    return (a > 0) ? a : b;
}
",0
mgua740,1697439496,2,"#include <stdio.h>

int get_sum_of_digits(int x) {
    int res = 0;

    while (x) {
        res += x % 10;
        x /= 10;
    }

    return res;
}

int TallestVine(int x, int y, int z) {
    int res = 0;
    int i, j;
    int p = x;
    int q = y;

    // Base case: check if x == y
    if (x == y) {
        return x;
    }

    for (i = 0; i < z; i++) {
        int temp_x = x;
        int temp_y = y;

        x += get_sum_of_digits(x);
        y += get_sum_of_digits(y);

        int dx = p;
        int dy = q;

        // Check if the value of y has met previous values of x vice versa
        for (j = 0; j <= i; j++) {
            dx += get_sum_of_digits(dx);
            dy += get_sum_of_digits(dy);

            if (x == dy) {
                return dy;
            }

            if (y == dx) {
                return dx;
            }

            if (temp_x == dy) {
                return temp_x;
            }

            if (temp_y == dx) {
                return temp_y;
            }
        }
    }

    if (x > y) {
        res = x;
    }
    else {
        res = y;
    }

    return res;
}",1
mkaj411,1697269105,1,"int TallestVine(int seedA, int seedB, int days) {
	int valueA=0;
	int valueB=0; 
	int i;
	int j; 
	int seedarrayA[100] = { seedA };
	int seedarrayB[100] = { seedB };
	for (i = 1; i <= days; i++) {
		valueA = (seedarrayA[i-1] / 100) + ((seedarrayA[i-1] % 100) / 10) + ((seedarrayA[i-1] % 100) - ((seedarrayA[i-1] % 100) / 10) * 10);
		printf(""%d "", valueA); 
		seedarrayA[i] = seedarrayA[i-1] + valueA;
	}
	printf(""%d "", i); 
	printf(""%d "", seedarrayA[days]);
	for (j = 1; j <= days; j++) {
		valueB = (seedarrayB[j-1] / 100) + ((seedarrayB[j-1] % 100) / 10) + ((seedarrayB[j-1] % 100) - ((seedarrayB[j-1] % 100) / 10) * 10);
		seedarrayB[j] = seedarrayB[j-1] + valueB;
	}
	printf(""%d "", seedarrayB[days]);

	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (seedarrayA[i] == seedarrayB[j]) {
				return seedarrayA[i]; 
			}
		}
	} 
	int x; 
	if (seedarrayA[days] > seedarrayB[days]) {
		x= seedarrayA[days]; 
		return x; 
	}
	else if (seedarrayA[days] < seedarrayB[days]) {
		x = seedarrayB[days];
		return x; 
	}
}",0
mkaj411,1697275385,2,"int TallestVine(int seedA, int seedB, int days) {
	int valueA=0;
	int valueB=0; 
	int i;
	int j; 
	int seedarrayA[100] = { seedA };
	int seedarrayB[100] = { seedB };
	for (i = 1; i <= days; i++) {
		valueA = (seedarrayA[i-1] / 100) + ((seedarrayA[i-1] % 100) / 10) + ((seedarrayA[i-1] % 100) - ((seedarrayA[i-1] % 100) / 10) * 10);
		seedarrayA[i] = seedarrayA[i-1] + valueA;
	}
	
	for (j = 1; j <= days; j++) {
		valueB = (seedarrayB[j-1] / 100) + ((seedarrayB[j-1] % 100) / 10) + ((seedarrayB[j-1] % 100) - ((seedarrayB[j-1] % 100) / 10) * 10);
		seedarrayB[j] = seedarrayB[j-1] + valueB;
	}
	

	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (seedarrayA[i] == seedarrayB[j]) {
				return seedarrayA[i]; 
			}
		}
	} 
	int x; 
	if (seedarrayA[days] > seedarrayB[days]) {
		x= seedarrayA[days]; 
		return x; 
	}
	else if (seedarrayA[days] < seedarrayB[days]) {
		x = seedarrayB[days];
		return x; 
	}
	return 0; 
}",0
mkaj411,1697276107,3,"int TallestVine(int seedA, int seedB, int days) {
	int valueA=0;
	int valueB=0; 
	int i;
	int j; 
	int seedarrayA[10000] = { seedA };
	int seedarrayB[10000] = { seedB };
	printf(""%d "", seedarrayB[0]); 
	for (i = 1; i <= days; i++) {
		valueA = (seedarrayA[i-1] / 100) + ((seedarrayA[i-1] % 100) / 10) + ((seedarrayA[i-1] % 100) - ((seedarrayA[i-1] % 100) / 10) * 10);
		seedarrayA[i] = seedarrayA[i-1] + valueA;
	}

	
	for (j = 1; j <= days; j++) {
		valueB = (seedarrayB[j-1]/1000)+((seedarrayB[j-1]%1000) / 100) + ((seedarrayB[j-1] % 100) / 10) + ((seedarrayB[j-1] % 100) - ((seedarrayB[j-1] % 100) / 10) * 10);
		seedarrayB[j] = seedarrayB[j-1] + valueB;
	}
	
	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (seedarrayA[i] == seedarrayB[j]) {
				return seedarrayA[i]; 
			}
		}
	} 
	int x; 
	if (seedarrayA[days] > seedarrayB[days]) {
		x= seedarrayA[days]; 
		return x; 
	}
	else if (seedarrayA[days] < seedarrayB[days]) {
		x = seedarrayB[days];
		return x; 
	}
	return 0; 
}
",0
mkaj411,1697276326,4,"int TallestVine(int seedA, int seedB, int days) {
	int valueA=0;
	int valueB=0; 
	int i;
	int j; 
	int seedarrayA[10000] = { seedA };
	int seedarrayB[10000] = { seedB };
	for (i = 1; i <= days; i++) {
		valueA = (seedarrayA[i - 1] / 1000) + ((seedarrayA[i - 1] % 1000) / 100) + ((seedarrayA[i-1] % 100) / 10) + ((seedarrayA[i-1] % 100) - ((seedarrayA[i-1] % 100) / 10) * 10);
		seedarrayA[i] = seedarrayA[i-1] + valueA;
	}

	
	for (j = 1; j <= days; j++) {
		valueB = (seedarrayB[j-1]/1000)+((seedarrayB[j-1]%1000) / 100) + ((seedarrayB[j-1] % 100) / 10) + ((seedarrayB[j-1] % 100) - ((seedarrayB[j-1] % 100) / 10) * 10);
		seedarrayB[j] = seedarrayB[j-1] + valueB;
	}
	
	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (seedarrayA[i] == seedarrayB[j]) {
				return seedarrayA[i]; 
			}
		}
	} 
	int x; 
	if (seedarrayA[days] > seedarrayB[days]) {
		x= seedarrayA[days]; 
		return x; 
	}
	else if (seedarrayA[days] < seedarrayB[days]) {
		x = seedarrayB[days];
		return x; 
	}
	return 0; 
}",0
mkaj411,1697320262,5,"int TallestVine(int seedA, int seedB, int days) {
	int i;
	int j; 
	int seedarrayA[10000] = { seedA };
	int seedarrayB[10000] = { seedB };
	for (i = 0; i <= days; i++) {
		int valueA = 0;
		int temp = seedarrayA[i];
		while (temp > 0) {
			int digit = temp % 10;
			valueA += digit;
			temp /= 10;
		}
		seedarrayA[i+1] = seedarrayA[i] + valueA;
	}

	
	for (j = 0; j <= days; j++) {
		int valueB = 0;
		int temp = seedarrayB[j];
		while (temp > 0) {
			int digit = temp % 10;
			valueB += digit;
			temp /= 10;
		}
		seedarrayB[j+1] = seedarrayB[j] + valueB;
	}
	
	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (seedarrayA[i] == seedarrayB[j]) {
				return seedarrayA[i]; 
			}
		}
	} 
	int x; 
	if (seedarrayA[days] > seedarrayB[days]) {
		x= seedarrayA[days]; 
		return x; 
	}
	else if (seedarrayA[days] < seedarrayB[days]) {
		x = seedarrayB[days];
		return x; 
	}
	return 0; 
}",1
mkee115,1697163666,1,"int main()
{
    printf(""not doing this"");
    return 0;
}",0
mkee115,1697163690,2,"int TallestVine()
{
    printf(""not doing this"");
    return 0;
}",0
mket106,1697449774,1,"#include <stdbool.h>
#include <stdio.h>
#include <string.h>

int DigitSum(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10; 
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int iSeedA = seedA;
    int iSeedB = seedB;

    if (seedA == seedB)
        return seedA;
    bool finish = false;

    while (days > 0) {
        seedB = iSeedB;

        if (finish)
        break;

        int iDays = days;

        seedA += DigitSum(seedA);

        if (seedA == seedB)
        break;

        while (iDays > 0) {
            seedB += DigitSum(seedB);
            iDays--;
            if (seedA == seedB)
                finish = true;
        }
        days--;
    }
    return (seedA < seedB) ? seedB : seedA;
}
",0
mket106,1697449921,2,"#include <stdbool.h>
#include <stdio.h>
#include <string.h>

int DigitSum(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10; 
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int iSeedB = seedB;

    if (seedA == seedB)
        return seedA;
    bool finish = false;

    while (days > 0) {
        seedB = iSeedB;

        if (finish)
        break;

        int iDays = days;

        seedA += DigitSum(seedA);

        if (seedA == seedB)
        break;

        while (iDays > 0) {
            seedB += DigitSum(seedB);
            iDays--;
            if (seedA == seedB)
                finish = true;
        }
        days--;
    }
    return (seedA < seedB) ? seedB : seedA;
}
",0
mket106,1697452140,3,"#include <stdbool.h>
#include <stdio.h>
#include <string.h>

int DigitSum(int num) {
  int sum = 0;
  while (num > 0) {
    sum += num % 10;
    num /= 10;
  }
  return sum;
}

int TallestVine(int seedA, int seedB, int days) {
  int iSeedA = seedA;
  int iSeedB = seedB;
  bool finish = false;
  
  if (seedA == seedB) {
    days = 0;
    finish = true;
  }
  
  int iiDays = days;
  
  while (days > 0) 
  {
    seedB = iSeedB;
    
    if (finish)
      break;
    
    int iDays = iiDays;
    
    seedA += DigitSum(seedA);
    
    if (seedA == seedB) 
    {
      finish = true;
      break;
    }
    
    while (iDays > 0) 
    {
      seedB += DigitSum(seedB);
      iDays--;
      if (seedA == seedB) {
        finish = true;
        break;
      }
    }
    
    days--;
  }
  if (!finish) {
    seedA = iSeedA;
    seedB = iSeedB;
    for (int i = iiDays; i > 0; i--) {
      seedA += DigitSum(seedA);
      seedB += DigitSum(seedB);
    }
  }
  return (seedA < seedB) ? seedB : seedA;
}
",1
mkim670,1697334167,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
	int i, j, k, digitOne, digitTwo, digitThree, digitFour;
	int ArrOne[200], ArrTwo[200];
	ArrOne[0] = seedA;
	ArrTwo[0] = seedB;

	for (i = 1; i <= days; i++) {
		//divide number into separate digits
		digitOne = seedA / 1000;
		digitTwo = (seedA - digitOne*1000) / 100;
		digitThree = (seedA - digitOne * 1000 - digitTwo * 100) / 10;
		digitFour = seedA % 10;
		seedA = seedA + digitOne + digitTwo + digitThree + digitFour; //add value
		ArrOne[i] = seedA;

		digitOne = seedB / 1000;
		digitTwo = (seedB - digitOne * 1000) / 100;
		digitThree = (seedB - digitOne * 1000 - digitTwo * 100) / 10;
		digitFour = seedB % 10;
		seedB = seedB + digitOne + digitTwo + digitThree + digitFour;
		ArrTwo[i] = seedB;
	}

	for (j = 0; j <= days; j++) {
		for (k = 0; k <= days; k++) {
			if (ArrOne[j] == ArrTwo[k]) {
				return ArrOne[j];
			} 
		}
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}
",0
mkim670,1697334702,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
	int i, j, k, digitOne, digitTwo, digitThree, digitFour, digitFive, digitSix;
	int ArrOne[100000], ArrTwo[100000];
	ArrOne[0] = seedA;
	ArrTwo[0] = seedB;

	for (i = 1; i <= days; i++) {
		//divide number into separate digits
		digitSix = seedA / 100000;
		digitFive = (seedA - digitSix * 100000) / 10000;
		digitFour = (seedA - digitSix * 100000 - digitFive * 10000) / 1000;
		digitThree = (seedA - digitSix * 100000 - digitFive * 10000 - digitFour * 1000) / 100;
		digitTwo = (seedA - digitSix * 100000 - digitFive * 10000 - digitFour * 1000 - digitThree * 100) / 10;
		digitOne = seedA % 10;
		seedA = seedA + digitOne + digitTwo + digitThree + digitFour + digitFive + digitSix;
		ArrOne[i] = seedA;

		digitSix = seedB / 100000;
		digitFive = (seedB - digitSix * 100000) / 10000;
		digitFour = (seedB - digitSix * 100000 - digitFive * 10000) / 1000;
		digitThree = (seedB - digitSix * 100000 - digitFive * 10000 - digitFour * 1000) / 100;
		digitTwo = (seedB - digitSix * 100000 - digitFive * 10000 - digitFour * 1000 - digitThree * 100) / 10;
		digitOne = seedB % 10;
		seedB = seedB + digitOne + digitTwo + digitThree + digitFour + digitFive + digitSix;
		ArrTwo[i] = seedB;
	}

	for (j = 0; j <= days; j++) {
		for (k = 0; k <= days; k++) {
			if (ArrOne[j] == ArrTwo[k]) {
				return ArrOne[j];
			} 
		}
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}
",1
mloh302,1697020479,1,"#include <stdio.h>
#include <math.h>
#include <string.h>

int TallestVine(int seedA, int seedB, int days)
{
    // A digital vine begins as a seed (a positive integer) and grows each day by an amount equal to the sum of its digits.
    int vineA = seedA;
    int vineB = seedB;
    char vineAdigits[4], vineBdigits[4]; // this is to be able to do addition for each digit
    int tallestVine = 0;
    int currentDay = 0;

    while (currentDay < days) {
        if (vineB < vineA) { // repeat the process for the shorter vine
            sprintf(vineBdigits, ""%i"", vineB); // convert the vine to a string
            for (int j = 0; j < strlen(vineAdigits); j++) { 
                vineB += vineBdigits[j] - '0'; // add the digits together
            }
            if (vineB == vineA)
                return vineA;
        } 
        if (vineA < vineB) {
            sprintf(vineAdigits, ""%d"", vineA); // convert the vine to a string
            for (int j = 0; j < strlen(vineBdigits); j++) { 
                vineA += vineAdigits[j] - '0'; // add the digits together
            }
            if (vineA == vineB)
                return vineB;
        }
        currentDay++;
        tallestVine = (vineA > vineB) ? vineA : vineB; // if vineA is taller than vineB, return vineA, else return vineB
    }
    
    return tallestVine;
}",0
mloh302,1697070396,2,"#include <stdio.h>
#include <math.h>
#include <string.h>

int TallestVine(int seedA, int seedB, int days)
{
    // A digital vine begins as a seed (a positive integer) and grows each day by an amount equal to the sum of its digits.
    int vineA[199] = {0};
    int vineB[199] = {0};
    int commonValues[199] = {0}; // this is to store the common values between vineA and vineB
    int index, smallestCommon;
    char vineAdigits[7], vineBdigits[7]; // this is to be able to do addition for each digit
    int tallestVine = (seedA < seedB) ? seedB : seedA; // if seedA is less than seedB, tallestVine is seedB, otherwise it is seedA
    vineA[0] = seedA;
    vineB[0] = seedB;

    for (int i = 1; i <= days; i++) {
        sprintf(vineBdigits, ""%i"", vineB[i-1]); // convert the vineB to a string
        sprintf(vineAdigits, ""%i"", vineA[i-1]); // convert the vineA to a string
        
        for (int j = 0; j < strlen(vineBdigits); j++) {
            vineB[i] += (int)(vineBdigits[j]) - (int)('0'); // add each digit of vineB to the next element of vineB
        }
        vineB[i] += vineB[i-1]; // add the previous element of vineB to the current element of vineB
        
        for (int k = 0; k < strlen(vineAdigits); k++) {
            vineA[i] += (int)(vineAdigits[k]) - (int)('0'); // add each digit of vineA to the next element of vineA
        }
        vineA[i] += vineA[i-1]; // add the previous element of vineA to the current element of vineA
    }
    tallestVine = (vineA[days] < vineB[days]) ? vineB[days] : vineA[days]; // if vineA[days] is less than vineB[days], tallestVine is vineB[days], otherwise it is vineA[days]

    // Check for any common values in the two vines
    index = 0;
    smallestCommon = tallestVine;
    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (vineA[i] == vineB[j]) { // the vine stops growing at the point where there are two common values
                commonValues[index++] = vineA[i];
                for (int k = 0; k < index; k++) {
                    if (commonValues[k] < smallestCommon) {
                        smallestCommon = commonValues[k]; // find the smallest common value
                    }
                    
                }
                tallestVine = smallestCommon;
            }
        }
    }
    return tallestVine;
}",0
mloh302,1697074798,3,"#include <stdio.h>
#include <math.h>
#include <string.h>

int TallestVine(int seedA, int seedB, int days)
{
    // A digital vine begins as a seed (a positive integer) and grows each day by an amount equal to the sum of its digits.
    int vineA = seedA;
    int vineB = seedB;
    int vineAday = 0;
    int vineBday = 0;
    char vineAdigits[7], vineBdigits[7]; // this is to be able to do addition for each digit
    int tallestVine = (seedA < seedB) ? seedB : seedA; // if seedA is less than seedB, tallestVine is seedB, otherwise it is seedA

    while (vineAday < days || vineBday < days) {
        // Growth of vineA
        while (vineAday < days && vineA != vineB) {
            if (vineA < vineB || vineBday == days) {
                vineAday++;

                sprintf(vineAdigits, ""%i"", vineA); // convert the vineA to a string
                for (int k = 0; k < strlen(vineAdigits); k++) {
                    vineA += vineAdigits[k] - '0'; // add each digit of vineA to the next element of vineA
                }
            } else
                break; // If conditions don't meet, then break out of the loop
        }

        // Growth of vineB
        while (vineBday < days && vineA != vineB) {
            if (vineB < vineA || vineAday == days) {
                vineBday++;

                sprintf(vineBdigits, ""%i"", vineB); // convert the vineB to a string
                for (int k = 0; k < strlen(vineBdigits); k++) {
                    vineB += vineBdigits[k] - '0'; // add each digit of vineB to the next element of vineB
                }
            } else
                break; // If conditions don't meet, then break out of the loop
        }

        // Check if vineA and vineB are equal
        if (vineA == vineB) {
            tallestVine = vineA; // It does not grow anymore cause they are the same (join up)
            break;
        } else
            tallestVine = (vineA < vineB) ? vineB : vineA; // if vineA is less than vineB, tallestVine is vineB, otherwise it is vineA
    }

    return tallestVine;
}",1
mman402,1697334059,1,"int sumdigits(int value)
{
    int digits = 0;
    int i;
    int testvalue = value;
    int sum = 0;

    while (testvalue != 0)
    {
        testvalue = testvalue / 10;
        digits++;
    }

    for (i = 0; i <= digits; i++)
    {
        sum += value % 10;
        value = value / 10;
    }

    return sum;
}

int TallestVine(int vine1, int vine2, int days)
{

    int i, j;
    int vine1check = vine1,vine1seed=vine1;
   


    for (i = 0; i < days; i++)
    {

        if (vine1 == vine2)
        {
            return vine1;
        }

        vine1 = vine1 + sumdigits(vine1);
        vine2 = vine2 + sumdigits(vine2);

        vine1check = vine1seed;
        for (j = 0; j < days; j++)
        {
          
            

            if (vine1check == vine2)
            {
                return vine2;
            }
            vine1check = vine1check + sumdigits(vine1check);
        }

     
  


    }
    if (vine1 > vine2)
    {
        return vine1;
    }
    else
    {
        return vine2;
    }
}",0
mman402,1697334446,2,"int sumdigits(int value)
{
    int digits = 0;
    int i;
    int testvalue = value;
    int sum = 0;

    while (testvalue != 0)
    {
        testvalue = testvalue / 10;
        digits++;
    }

    for (i = 0; i <= digits; i++)
    {
        sum += value % 10;
        value = value / 10;
    }

    return sum;
}

int TallestVine(int vine1, int vine2, int days)
{

    int i, j;
    int vine1check = vine1,vine1seed=vine1;
   


    for (i = 0; i < days; i++)
    {

        if (vine1 == vine2)
        {
            return vine1;
        }

        vine1 = vine1 + sumdigits(vine1);
        vine2 = vine2 + sumdigits(vine2);

        vine1check = vine1seed;
        for (j = 0; j < days; j++)
        {

           
            vine1check = vine1check + sumdigits(vine1check);
            if (vine1check == vine2)
            {
                return vine2;
            }
            
        }

     
  


    }
    if (vine1 > vine2)
    {
        return vine1;
    }
    else
    {
        return vine2;
    }
}
",1
mmas199,1697453906,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) 
{
    int heightA = seedA, heightB = seedB;
    for (int i = 0; i < days; i++) {
        if (heightA == heightB) 
            return heightA;
        if (i < days / 2) {
            heightA += sumOfDigits(heightA);
            if (heightA == heightB) 
                return heightA;
        }
        heightB += sumOfDigits(heightB);
        if (heightA == heightB) 
            return heightA;
    }
    return heightA > heightB ? heightA : heightB;
}",0
mnay503,1697452102,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days);

int main() {
    int seedA, seedB, days;
    
    printf(""Enter seed value for vine A: "");
    scanf(""%d"", &seedA);

    printf(""Enter seed value for vine B: "");
    scanf(""%d"", &seedB);

    printf(""Enter the number of days: "");
    scanf(""%d"", &days);

    int tallest = TallestVine(seedA, seedB, days);

    printf(""The tallest point the two vines will reach after %d days is: %d\n"", days, tallest);

    return 0;
}
int TallestVine(int seedA, int seedB, int days) {
    int tallestA = seedA;
    int tallestB = seedB;
    int dayA = 1;
    int dayB = 1;

    while (dayA <= days || dayB <= days) {
        if (tallestA < tallestB) {
            if (dayA <= days) {
                int digitSumA = 0;
                int tempA = tallestA;
                while (tempA > 0) {
                    digitSumA += tempA % 10;
                    tempA /= 10;
                }
                tallestA += digitSumA;
                dayA++;
            } else {
                break;
            }
        } else {
            if (dayB <= days) {
                int digitSumB = 0;
                int tempB = tallestB;
                while (tempB > 0) {
                    digitSumB += tempB % 10;
                    tempB /= 10;
                }
                tallestB += digitSumB;
                dayB++;
            } else {
                break;
            }
        }

        if (tallestA == tallestB) {
            return tallestA; 
        }
    }

    return (tallestA > tallestB) ? tallestA : tallestB;
}
",0
mnay503,1697452397,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int tallestA = seedA;
    int tallestB = seedB;
    int dayA = 1;
    int dayB = 1;

    while (dayA <= days || dayB <= days) 
    {
        if (tallestA < tallestB) 
        {
            if (dayA <= days)
            {
                int digitSumA = 0;
                int tempA = tallestA;
                while (tempA > 0) 
                {
                    digitSumA += tempA % 10;
                    tempA /= 10;
                }
                tallestA += digitSumA;
                dayA++;
            } else 
            {
                break;
            }
        } else 
        {
            if (dayB <= days) {
                int digitSumB = 0;
                int tempB = tallestB;
                while (tempB > 0) 
                {
                    digitSumB += tempB % 10;
                    tempB /= 10;
                }
                tallestB += digitSumB;
                dayB++;
            } else {
                break;
            }
        }

        if (tallestA == tallestB) 
        {
            return tallestA; 
        }
    }

    return (tallestA > tallestB) ? tallestA : tallestB;
}
",0
mnay503,1697453570,3,"#include <stdio.h>

int CalculateNextValue(int value) {
    int digitSum = 0;
    int temp = value;

    while (temp > 0) {
        digitSum += temp % 10;
        temp /= 10;
    }

    return value + digitSum;
}

int TallestVine(int seedA, int seedB, int days) {
    int tallest = (seedA > seedB) ? seedA : seedB;

    for (int day = 1; day <= days; day++) {
        seedA = CalculateNextValue(seedA);
        seedB = CalculateNextValue(seedB);

        if (seedA == seedB) {
            return seedA;
        }

        tallest = (seedA > seedB) ? seedA : seedB;
    }

    return tallest;
}",0
mpat501,1697178408,1,"int GrowVine(int vine)
{
    int sum=0, value=vine;
    while (value>0){
        int digit=value%10;
        sum+=digit;
        value/=10;
    }
    return vine+sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    if (seedA==seedB){
        return seedA;
    }

    for (int i=0; i<days; i++){
        int seedb=seedB;
        for (int j=0; j<days; j++){
            seedb=GrowVine(seedb);
            if (seedA==seedb){
                return seedA;
            }
        }

        seedA=GrowVine(seedA);

        if (seedA==seedB){
            return seedA;
        }
    }

    if (seedA>seedB){
        return seedA;
    }
    else {
        return seedB;

    }     
}",0
mpat501,1697180533,2,"int GrowVine(int vine)
{
    int sum=0, value=vine;
    while (value>0){
        int digit=value%10;
        sum+=digit;
        value/=10;
    }
    return vine+sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    int seedb;

    for (int i=0; i<days; i++){
        if (seedA==seedB){
            return seedA;
        }
        
        seedA=GrowVine(seedA);
        seedb=seedB;

        for (int j=0; j<days; j++){
            seedb=GrowVine(seedb);
            if (seedA==seedb){
                return seedA;
            }
        }
    }

    if (seedA>seedb){
        return seedA;
    }
    else {
        return seedb;
    }     
}",1
mpey262,1697323096,1,"int TallestVine(int seedA, int seedB, int days) {
    int n = seedB, temp = seedB;
    for (int i = 0; i < days; i++) {
        int n = seedA;
        
        while (n != 0) {
            seedA = seedA + n % 10;
            n = n / 10;
        }
        seedB = temp;
        for (int j = 0; j < days; j++) {
            int n = seedB;
            while (n != 0) {
                seedB = seedB + n % 10;
                n = n / 10;
            }
            if (seedA == seedB) {
                return seedA;
            }
        }
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
mpey262,1697323128,2,"int TallestVine(int seedA, int seedB, int days) {
    int temp = seedB;
    for (int i = 0; i < days; i++) {
        int n = seedA;
        
        while (n != 0) {
            seedA = seedA + n % 10;
            n = n / 10;
        }
        seedB = temp;
        for (int j = 0; j < days; j++) {
            int n = seedB;
            while (n != 0) {
                seedB = seedB + n % 10;
                n = n / 10;
            }
            if (seedA == seedB) {
                return seedA;
            }
        }
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",1
msin609,1697265939,1,"int TallestVine(int seedA, int seedB, int days) {
	int seed1[200];

	int i, j;
	for (i = 0; i < days; i++) {
		seedA += sumDigits(seedA);
		seed1[i] = seedA;
	}

	for (i = 0; i < days; i++) {
		seedB += sumDigits(seedB);
		for (j = 0; j < days; j++) {
			if (seedB == seed1[j])
				return seedB;
		}
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}

int sumDigits(int digit) {
	int total = 0;
	while (digit != 0) {
		total += digit % 10;
		digit = digit / 10;
	}
	return total;
}",0
msin609,1697266178,2,"int TallestVine(int seedA, int seedB, int days) {
	int seed1[200];
	int digit;
	int i, j;
	for (i = 0; i < days; i++) {
		digit = seedA;
		while (digit != 0) {
			seedA += digit % 10;
			digit = digit / 10;
		}
		seed1[i] = seedA;
	}

	for (i = 0; i < days; i++) {
		digit = seedB;
		while (digit != 0) {
			seedB += digit % 10;
			digit = digit / 10;
		}
		for (j = 0; j < days; j++) {
			if (seedB == seed1[j])
				return seedB;
		}
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",0
msin609,1697267596,3,"int TallestVine(int seedA, int seedB, int days) {
	int digit;
	int daysA = 0;
	int daysB = 0;
	while (daysA < days || daysB < days) {
		if (seedA == seedB) {
			return seedA;
		}
		else if (daysA < days && seedA < seedB) {
			digit = seedA;
			while (digit != 0) {
				seedA += digit % 10;
				digit = digit / 10;
			}
			daysA++;
		}
		else if (daysB < days && seedB < seedA) {
			digit = seedB;
			while (digit != 0) {
				seedB += digit % 10;
				digit = digit / 10;
			}
			daysB++;
		}
		else if (daysB < days) {
			digit = seedB;
			while (digit != 0) {
				seedB += digit % 10;
				digit = digit / 10;
			}
			daysB++;
		}
		else if (daysA < days) {
			digit = seedA;
			while (digit != 0) {
				seedA += digit % 10;
				digit = digit / 10;
			}
			daysA++;
		}
	}

	if (seedA > seedB) {
		return seedA;
	}
	else {
		return seedB;
	}
}",1
mtha724,1697198420,1,"int TallestVine(int seedA, int seedB, int days){
    int growA[days], growB[days];
    growA[0] = seedA;
    growB[0] = seedB;

    for (int i = 0; i < days; i++){

        int a = 0, b = 0;
        char A[200], B[200];
        sprintf(A, ""%d"", seedA);
        sprintf(B, ""%d"", seedB);
        
        while (A[a] != '\0'){
            seedA += (A[a] - '0');
            a++;
        }

        while (B[b] != '\0'){
            seedB += (B[b] - '0');
            b++;
        }

        growA[i] = seedA;
        growB[i] = seedB;

    }
    
    for (int vineA = 0; vineA < days; vineA++){
        for (int vineB = 0; vineB < days; vineB++){
            if (growA[vineA] == growB[vineB]){
                return growA[vineA];
            }
        }
    }

    if (seedA > seedB){
        return seedA;
    } else{
        return seedB;
    }
}",1
mzha612,1696720422,1,"int NextVine(int x)
{
int sum = 0;
int original = x;
while (x > 0) {
sum = sum + (x % 10);
x = x / 10;
}
return sum + original;
}
int Max(int a, int b) {
if (a > b) {
return a;
} else {
return b;
}
}
int TallestVine(int startA, int startB, int days)
{
int i, j;
int vineA = startA;
int vineB = startB;
for (i = 0; i <= days; i++) {
vineB = startB;
for (j = 0; j <= days; j++) {
if (vineA == vineB) {
return vineA;
}
vineB = NextVine(vineB);
}
vineA = NextVine(vineA);}
vineA = startA;
vineB = startB;
for (i = 0; i < days; i++) {
vineA = NextVine(vineA);
vineB = NextVine(vineB);
}
return Max(vineA, vineB);
}",1
mzha612,1697077663,2,"#include <stdio.h>
#include <math.h>

 

int sumDigits(int num) {
    int i = 1;
    int sum = 0;
    while (num % (int)(pow(10, i) + 0.5) / (int)(pow(10, i - 1) + 0.5) != 0) {
        sum += num % (int)(pow(10, i) + 0.5) / (int)(pow(10, i - 1) + 0.5);
        i++;
    }
    return sum;
}

 

int max(int a, int b) {
    if (a >= b) {
        return a;
    }
    return b;
}

 

int TallestVine(int seedA, int seedB, int days) {
    int a[100] = {seedA};
    int b[100] = {seedB};

    for(int i = 0; i < days; i++) {
        a[i+1] = a[i] + sumDigits(a[i]);
        b[i+1] = b[i] + sumDigits(b[i]);

        for (int j = 0; j <= i + 1; j++) {
            if (a[i + 1] == b[j]) {
                return a[i + 1];
            }
        }
    }

    return max(a[days - 1], b[days - 1]);
}

 

int main() {
    printf(""%d\n"", TallestVine(501, 429, 8));

 

    return 0;
}",0
mzha612,1697077677,3,"#include <stdio.h>
#include <math.h>

 

int sumDigits(int num) {
    int i = 1;
    int sum = 0;
    while (num % (int)(pow(10, i) + 0.5) / (int)(pow(10, i - 1) + 0.5) != 0) {
        sum += num % (int)(pow(10, i) + 0.5) / (int)(pow(10, i - 1) + 0.5);
        i++;
    }
    return sum;
}

 

int max(int a, int b) {
    if (a >= b) {
        return a;
    }
    return b;
}

 

int TallestVine(int seedA, int seedB, int days) {
    int a[100] = {seedA};
    int b[100] = {seedB};

    for(int i = 0; i < days; i++) {
        a[i+1] = a[i] + sumDigits(a[i]);
        b[i+1] = b[i] + sumDigits(b[i]);

        for (int j = 0; j <= i + 1; j++) {
            if (a[i + 1] == b[j]) {
                return a[i + 1];
            }
        }
    }

    return max(a[days - 1], b[days - 1]);
}

 ",0
mzha612,1697078492,4,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seedA){
	return (seedA) ? seedA % 10 + sumDigits(seedA / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysA <= days){
			seedB = sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysB <= days) {
			seedA = sumDigits(seedA);
			daysA++;
		}
		
		
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078509,5,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seedA){
	return (seedA) ? seedA % 10 + sumDigits(seedA / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA=daysB=0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysA <= days){
			seedB = sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysB <= days) {
			seedA = sumDigits(seedA);
			daysA++;
		}
		
		
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078521,6,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seedA){
	return (seedA) ? seedA % 10 + sumDigits(seedA / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA =0, daysB=0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysA <= days){
			seedB = sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysB <= days) {
			seedA = sumDigits(seedA);
			daysA++;
		}
		
		
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078595,7,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA =0, daysB=0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysA <= days){
			seedB = sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysB <= days) {
			seedA = sumDigits(seedA);
			daysA++;
		}
		printf(""%d"", seedA);
		printf("" %d\n"", seedB);
		
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078642,8,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysA <= days){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysB <= days) {
			seedA += sumDigits(seedA);
			daysA++;
		}
		printf(""%d"", seedA);
		printf("" %d\n"", seedB);
		
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078785,9,"#include <stdio.h>
#include <math.h>

 

int sumDigits(int num) {
    int i = 0;
    int sum = 0;
    while (pow(10, i) < num) {
        sum += (num / (int)(pow(10, i) + 0.5)) % 10;
        i++;
    }
    return sum;
}

 

int max(int a, int b) {
    if (a >= b) {
        return a;
    }
    return b;
}

 

int TallestVine(int seedA, int seedB, int days) {
    int a[100] = {seedA};
    int b[100] = {seedB};

    for(int i = 0; i < days; i++) {
        a[i+1] = a[i] + sumDigits(a[i]);
        b[i+1] = b[i] + sumDigits(b[i]);

        for (int j = 0; j <= i + 1; j++) {
            for (int k = 0; k <= i + 1; k++) {
                if (a[j] == b[k]) {
                    return a[j];
                }
            }
        }
    }

    return max(a[days], b[days]);
}",0
mzha612,1697078826,10,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysA <= days){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysB <= days) {
			seedA += sumDigits(seedA);
			daysA++;
		}
		printf(""%d"", seedA);
		printf("" %d\n"", seedB);
		
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078862,11,"[3:45 pm] Miles Scherer

#include <stdio.h>

#include <math.h>

 

int sumDigits(int num) {

    int i = 0;

    int sum = 0;

    while (pow(10, i) <= num) {

        sum += (num / (int)(pow(10, i) + 0.5)) % 10;

        i++;

    }

    return sum;

}

 

int max(int a, int b) {

    if (a >= b) {

        return a;

    }

    return b;

}

 

int TallestVine(int seedA, int seedB, int days) {

    int a[100] = {seedA};

    int b[100] = {seedB};


    for(int i = 0; i < days; i++) {

        a[i+1] = a[i] + sumDigits(a[i]);

        b[i+1] = b[i] + sumDigits(b[i]);


        for (int j = 0; j <= i + 1; j++) {

            for (int k = 0; k <= i + 1; k++) {

                if (a[j] == b[k]) {

                    return a[j];

                }

            }

        }

    }


    return max(a[days], b[days]);

}",0
mzha612,1697078874,12,"
#include <stdio.h>

#include <math.h>

 

int sumDigits(int num) {

    int i = 0;

    int sum = 0;

    while (pow(10, i) <= num) {

        sum += (num / (int)(pow(10, i) + 0.5)) % 10;

        i++;

    }

    return sum;

}

 

int max(int a, int b) {

    if (a >= b) {

        return a;

    }

    return b;

}

 

int TallestVine(int seedA, int seedB, int days) {

    int a[100] = {seedA};

    int b[100] = {seedB};


    for(int i = 0; i < days; i++) {

        a[i+1] = a[i] + sumDigits(a[i]);

        b[i+1] = b[i] + sumDigits(b[i]);


        for (int j = 0; j <= i + 1; j++) {

            for (int k = 0; k <= i + 1; k++) {

                if (a[j] == b[k]) {

                    return a[j];

                }

            }

        }

    }


    return max(a[days], b[days]);

}",0
mzha612,1697078909,13,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysA <= days){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysB <= days) {
			seedA += sumDigits(seedA);
			daysA++;
		}
		printf(""%d"", seedA);
		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078929,14,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysB <= days){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysA <= days) {
			seedA += sumDigits(seedA);
			daysA++;
		}
		printf(""%d"", seedA);
		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078951,15,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysB <= days){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysA <= days) {
			seedA += sumDigits(seedA);
			daysA++;
		}
// 		printf(""%d"", seedA);
// 		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697078979,16,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA <= days || daysB <= days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysB < days){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysA < days) {
			seedA += sumDigits(seedA);
			daysA++;
		}
// 		printf(""%d"", seedA);
// 		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697079008,17,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysB < days){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysA < days) {
			seedA += sumDigits(seedA);
			daysA++;
		}
// 		printf(""%d"", seedA);
// 		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697079039,18,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysB < days -1){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysA < days -1) {
			seedA += sumDigits(seedA);
			daysA++;
		}
		printf(""%d"", seedA);
		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697079186,19,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if (seedA > seedB && daysB < days || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if (seedB > seedA && daysA < days|| (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
		printf(""%d"", seedA);
		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697079218,20,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
		printf(""%d"", seedA);
		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",0
mzha612,1697079227,21,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
// 		printf(""%d"", seedA);
// 		printf("" %d\n"", seedB);
		
	}
	
	return (seedA > seedB) ? seedA : seedB;

}
",1
mzha612,1697079290,22,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
			
		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
// 		printf(""%d"", seedA);
// 		printf("" %d\n"", seedB);
		
	}
	return (seedA > seedB) ? seedA : seedB;
}
",1
mzha612,1697079499,23,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
// 		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			
// 		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
// 			seedA += sumDigits(seedA);
// 			daysA++;
// 		} 
		
		daysB += (seedA > seedB && daysB < days) || (daysA == days) ? 1 : 0;
		seedB += (seedA > seedB && daysB - 1 < days) || (daysA == days) ? sumDigits(seedB) : 0;
		
		
		daysA += (seedB > seedA && daysA < days) || (daysB == days) ? 1 : 0;
		seedA += (seedB > seedA && daysA -1 < days) || (daysB == days) ? sumDigits(seedA) : 0;
		
// 		printf(""%d"", seedA);
// 		printf("" %d\n"", seedB);
		
	}
	return (seedA > seedB) ? seedA : seedB;
}
",0
mzha612,1697079585,24,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
// 		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			
// 		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
// 			seedA += sumDigits(seedA);
// 			daysA++;
// 		} 
		
		daysB += (seedA > seedB && daysB < days) || (daysA == days) ? 1 : 0;
		seedB += (seedA > seedB && daysB - 1 < days) || (daysA == days) ? sumDigits(seedB) : 0;
		if (seedA == seedB){
			return seedA;
		}
		
		daysA += (seedB > seedA && daysA < days) || (daysB == days) ? 1 : 0;
		seedA += (seedB > seedA && daysA -1 < days) || (daysB == days) ? sumDigits(seedA) : 0;
		
// 		printf(""%d"", seedA);
// 		printf("" %d\n"", seedB);
		
	}
	return (seedA > seedB) ? seedA : seedB;
}
",0
mzha612,1697079656,25,"#include <stdio.h>
// #include <math.h>


int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}


int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return (seedA > seedB) ? seedA : seedB;
}
",1
mzha612,1697235086,26,"int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return (seedA > seedB) ? seedA : seedB;
}
",1
mzha612,1697235092,27,"int sumDigits(int seed){
	return (seed) ? seed % 10 + sumDigits(seed / 10) : 0;	
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return (seedA > seedB) ? seedA : seedB;
}",1
mzha612,1697235153,28,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return (seedA > seedB) ? seedA : seedB;
}",1
mzha612,1697235157,29,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
		} else if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",1
mzha612,1697240753,30,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
			seedB += sumDigits(seedB);
			daysB++;
		} else{
// 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",1
mzha612,1697317416,31,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}


void growVine(int *seed, int *day){
    *seed += sumDigits(seed);
	*days++;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			growVine(&seedB, &daysB);
		} else{
// 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",0
mzha612,1697317424,32,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}


void growVine(int *seed, int *day){
    *seed += sumDigits(&seed);
	*days++;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			growVine(&seedB, &daysB);
		} else{
// 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",0
mzha612,1697317429,33,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}


void growVine(int *seed, int *day){
    *seed += sumDigits(*seed);
	*days++;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			growVine(&seedB, &daysB);
		} else{
// 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",0
mzha612,1697317436,34,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}


void growVine(int *seed, int *day){
    *seed += sumDigits(*seed);
	*day++;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			growVine(&seedB, &daysB);
		} else{
// 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",0
mzha612,1697317456,35,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}


void growVine(int *seed, int *day){
    *seed += sumDigits(*seed);
	*++day;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			growVine(&seedB, &daysB);
		} else{
// 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",0
mzha612,1697317472,36,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}


void growVine(int *seed, int *day){
    *seed += sumDigits(*seed);
	*day+=1;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			growVine(&seedB, &daysB);
		} else{
// 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
			seedA += sumDigits(seedA);
			daysA++;
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",1
mzha612,1697317493,37,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}


void growVine(int *seed, int *day){
    *seed += sumDigits(*seed);
	*day += 1;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// 			seedB += sumDigits(seedB);
// 			daysB++;
			growVine(&seedB, &daysB);
		} else{
// 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
// 			seedA += sumDigits(seedA);
// 			daysA++;
			growVine(&seedA, &daysA);
		} 
	
	}
	return seedA > seedB ? seedA : seedB;
}",1
mzha612,1697317534,38,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}


void growVine(int *seed, int *day){
    *seed += sumDigits(*seed);
	*day += 1;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
// 		else if ((seedA > seedB && daysB < days) || (daysA == days)){
// // 			seedB += sumDigits(seedB);
// // 			daysB++;
// 			growVine(&seedB, &daysB);
// 		} else{
// // 		if ((seedB > seedA && daysA < days) || (daysB == days)) {
// // 			seedA += sumDigits(seedA);
// // 			daysA++;
// 			growVine(&seedA, &daysA);
// 		} 
	
	(seedA > seedB && daysB < days) || (daysA == days) ? growVine(&seedB, &daysB) : 	growVine(&seedA, &daysA);
	    
	
	}
	return seedA > seedB ? seedA : seedB;
}",1
mzha612,1697317582,39,"int sumDigits(int seed){
	return seed ? seed % 10 + sumDigits(seed / 10) : 0;	
}

void growVine(int *seed, int *day){
    *seed += sumDigits(*seed);
	*day += 1;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int daysA = 0, daysB = 0;
    
	while(daysA < days || daysB < days){
		if (seedA == seedB){
			return seedA;
		}
		
	    (seedA > seedB && daysB < days) || (daysA == days) ? growVine(&seedB, &daysB) : growVine(&seedA, &daysA);
	}
	return seedA > seedB ? seedA : seedB;
}",1
nask472,1697424052,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int SumOfSeed( int seed) {
    int sum = 0;
        while (seed > 0) {
        sum += seed % 10; 
        seed = seed/10;
    }
    return sum;
}


int TallestVine(int seedA, int seedB, int days) {
    for (int i = 0; i < days; i++) {
        seedA = SumOfSeed(seedA) + seedA;
        int newseedB=seedB; 
        for(int i =0; i <days; i++){
            newseedB = SumOfSeed(newseedB)+newseedB;
            if (seedA == newseedB){
            return seedA;
            }
        }
    }
    for (int i = 0; i < days; i++) {
        seedB = SumOfSeed(seedB) + seedB;
    }
    if (seedA > seedB) {
        return seedA;
    }
    if (seedB > seedA) {
        return seedB;
    }
  
     return 0;
}
",1
ndas832,1697412829,1,"#include <stdio.h>

int sum_of_digits(int n) {
    int sum = 0;
    while (n != 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightsA[days+1];
    int heightsB[days+1];
    
    heightsA[0] = seedA;
    heightsB[0] = seedB;

    for (int i = 1; i <= days; i++) {
        heightsA[i] = heightsA[i-1] + sum_of_digits(heightsA[i-1]);
        heightsB[i] = heightsB[i-1] +sum_of_digits(heightsB[i-1]);
        
    }

    for (int i =0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (heightsA[i] == heightsB[j]) {
                return heightsA[i];
            }
        }
    }
    int x; 
    if (heightsA[days]>heightsB[days]){
        x= heightsA[days];
        return x; 
    }if (heightsB[days]>heightsA[days]){
        x=heightsB[days];
        return x; 
    }
}",0
ndas832,1697413564,2,"#include <stdio.h>

int sum_of_digits(int n) {
    int sum = 0;
    while (n != 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightsA[days+1];
    int heightsB[days+1];
    
    heightsA[0] = seedA;
    heightsB[0] = seedB;

    for (int i = 1; i <= days; i++) {
        heightsA[i] = heightsA[i-1] + sum_of_digits(heightsA[i-1]);
        heightsB[i] = heightsB[i-1] +sum_of_digits(heightsB[i-1]);
        
    }

    for (int i =0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (heightsA[i] == heightsB[j]) {
                return heightsA[i];
            }
        }
    }
    int x; 
    if (heightsA[days]>heightsB[days]){
        x= heightsA[days];
        return x; 
    }else if (heightsB[days]>heightsA[days]){
        x=heightsB[days];
        return x; 
    }
    return 0; 
}
",1
nhar865,1697030795,1,"int digits_of(int value) {
    int sum = 0;
    while (value > 0) {
        int a = value % 10;
        sum += a;
        value = (value - a) / 10;
    }

    return sum;
}

int TallestVine(int start1, int start2, int n) {
    int smaller = start1 < start2 ? start1 : start2;
    int larger = start1 > start2 ? start1 : start2;

    int days1 = 0;
    int days2 = 0;

    while (days1 < n && days2 < n) {
        if (smaller == larger) {
            return smaller;
        }

        if (smaller > larger) {
            int temp = smaller;
            smaller = larger;
            larger = temp;
            temp = days1;
            days1 = days2;
            days2 = temp;
        }

        days1++;

        smaller += digits_of(smaller);
    }

    if (smaller == larger + digits_of(larger)) {
        return smaller;
    }

    for (; days2 < n; days2++) {
        larger += digits_of(larger);
    }

    return larger;
}",0
nhar865,1697032745,2,"int digits_of(int value) {
    int sum = 0;
    while (value > 0) {
        int a = value % 10;
        sum += a;
        value = (value - a) / 10;
    }

    return sum;
}

int TallestVine(int start1, int start2, int n) {
    int smaller = start1 < start2 ? start1 : start2;
    int larger = start1 > start2 ? start1 : start2;

    int days1 = 0;
    int days2 = 0;

    while (days1 <= n && days2 <= n) {
        if (smaller == larger) {
            return smaller;
        }

        if (smaller > larger) {
            int temp = smaller;
            smaller = larger;
            larger = temp;
            temp = days1;
            days1 = days2;
            days2 = temp;
        }

        days1++;

        smaller += digits_of(smaller);
    }

    for (; days2 < n; days2++) {
        larger += digits_of(larger);
    }

    return larger;
}",1
nwei818,1697176033,1,"
int SumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int array = days +1;

    int A_Values[array]; // Stores past values of vineA
    int B_Values[array]; // Stores past values of vineB

    A_Values[0] = seedA;
    B_Values[0] = seedB;

    for (int day = 0; day < days; day++) {
        int A_sum = SumOfDigits(vineA);
        int B_sum = SumOfDigits(vineB);

        vineA += A_sum;
        vineB += B_sum;

        A_Values[day] = vineA;
        B_Values[day] = vineB;

        for (int past = 0; past < day; past++) {
            if (vineA == B_Values[past]) {
                return vineA;
            }
            if (vineB == A_Values[past]) {
                return vineB;
            }
        }
    }

    if (vineA > vineB) {
        return vineA;
    } else {
        return vineB;
    }
}",0
nwei818,1697182413,2,"#include <stdio.h>

int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

void print(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf(""%d "", arr[i]);
    }
    printf(""\n"");
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int array = days +1;

    int A_Values[array]; // Stores past values of vineA
    int B_Values[array]; // Stores past values of vineB

    A_Values[0] = seedA;
    B_Values[0] = seedB;

    for (int day = 0; day < days; day++) {
        int A_sum = SumOfDigits(vineA);
        int B_sum = SumOfDigits(vineB);

        vineA += A_sum;
        vineB += B_sum;

        A_Values[day] = vineA;
        B_Values[day] = vineB;

        //printf(""A Values = %d\n"", vineA);
        //print(A_Values, day);
        //printf(""B Values = %d\n\n"", vineB);
        //print(B_Values, day);
        
        if (vineA == vineB){
            return vineA;
        }
        
        for (int i = 0; i < day; i++) {
            if (vineA == B_Values[i]) {
                printf(""%d\n"", 1);
                return vineA;
            }
            if (vineB == A_Values[i]) {
                printf(""%d\n"", 2);
                return vineB;
            }
        }
    }

    if (vineA > vineB) {
        printf(""%d\n"", 3);
        return vineA;
    } else {
        printf(""%d\n"", 4);
        return vineB;
    }
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine( 10001, 10010, 32 ));
    return 0;
}
",0
nwei818,1697182455,3,"int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int array = days +1;

    int A_Values[array]; // Stores past values of vineA
    int B_Values[array]; // Stores past values of vineB

    A_Values[0] = seedA;
    B_Values[0] = seedB;

    for (int day = 0; day < days; day++) {
        int A_sum = SumOfDigits(vineA);
        int B_sum = SumOfDigits(vineB);

        vineA += A_sum;
        vineB += B_sum;

        A_Values[day] = vineA;
        B_Values[day] = vineB;

        //printf(""A Values = %d\n"", vineA);
        //print(A_Values, day);
        //printf(""B Values = %d\n\n"", vineB);
        //print(B_Values, day);
        
        if (vineA == vineB){
            return vineA;
        }

        for (int i = 0; i < day; i++) {
            if (vineA == B_Values[i]) {
                printf(""%d\n"", 1);
                return vineA;
            }
            if (vineB == A_Values[i]) {
                printf(""%d\n"", 2);
                return vineB;
            }
        }
    }

    if (vineA > vineB) {
        printf(""%d\n"", 3);
        return vineA;
    } else {
        printf(""%d\n"", 4);
        return vineB;
    }
}",0
nwei818,1697182507,4,"int SumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int array = days +1;

    int A_Values[array]; // Stores past values of vineA
    int B_Values[array]; // Stores past values of vineB

    A_Values[0] = seedA;
    B_Values[0] = seedB;

    for (int day = 0; day < days; day++) {
        int A_sum = SumOfDigits(vineA);
        int B_sum = SumOfDigits(vineB);

        vineA += A_sum;
        vineB += B_sum;

        A_Values[day] = vineA;
        B_Values[day] = vineB;
        
        if (vineA == vineB){
            return vineA;
        }

        for (int i = 0; i < day; i++) {
            if (vineA == B_Values[i]) {
                return vineA;
            }
            if (vineB == A_Values[i]) {
                return vineB;
            }
        }
    }

    if (vineA > vineB) {
        return vineA;
    } else {
        return vineB;
    }
}",1
nwil850,1697427151,1,"#include <stdio.h>

 int SumOfSeed(int seed) {
        int sum = 0;
            while (seed > 0) {
            sum += seed % 10; 
            seed = seed/10;
        }
        return sum;
    }

int TallestVine(int seedA, int seedB, int days){
   
    int sum1 = 0, sum2 = 0;
    
    
    for(int i = 0; i < days; i++){
        sum1 = SumOfSeed(seedA);
        sum2 = SumOfSeed(seedB);
        if (sum1 == sum2){
            return seedA;
        } else {
            seedA += sum1;
            seedB += sum2;
        }
    }
    int tallest;
    if (seedA > seedB){
        tallest = seedA;
    } else {
        tallest = seedB;
    }
    return tallest;
}

int main(void){
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));


}",0
nwil850,1697439487,2,"#include <stdio.h>

 int SumOfSeed(int seed) {
        int sum = 0;
            while (seed > 0) {
            sum += seed % 10; 
            seed = seed/10;
        }
        return sum;
    }

int TallestVine(int seedA, int seedB, int days){
   
    int seedAsum = seedA, seedBsum = seedB;
    
    for(int i = 0; i < days; i++){
        seedAsum += SumOfSeed(seedAsum);
        int seedBsum = seedB;
        for (int j = 0; j <= days; j++){
            if (seedAsum == seedBsum){
                return seedAsum;
            } else {
                seedBsum += SumOfSeed(seedBsum);
            }
        }
    }
    int tallest;
    if (seedAsum > seedBsum){
        tallest = seedAsum;
    } else if (seedAsum < seedBsum) {
        tallest = seedBsum;
    }
    return tallest;
}
",0
nwil850,1697439857,3,"#include <stdio.h>

 int SumOfSeed(int seed) {
        int sum = 0;
            while (seed > 0) {
            sum += seed % 10; 
            seed = seed/10;
        }
        return sum;
    }

int TallestVine(int seedA, int seedB, int days){
   
    int seedAsum = seedA, seedBsum = seedB;
    
    for(int i = 0; i < days; i++){
        seedAsum += SumOfSeed(seedAsum);
        seedBsum = seedB;
        for (int j = 0; j < days; j++){
            seedBsum += SumOfSeed(seedBsum);
            if (seedAsum == seedBsum){
                return seedAsum;
            }
        }
    }
    int tallest;
    if (seedAsum > seedBsum){
        tallest = seedAsum;
    } else if (seedAsum < seedBsum) {
        tallest = seedBsum;
    }
    return tallest;
}",1
ogan176,1697328163,1,"#include <stdio.h>

int sumOfDigits(int n)
{
    int sum = 0;
    while (n)
    {
        sum += n % 10;
        n = n / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int originalSeedA = seedA, originalSeedB = seedB;

    for (int i = 0; i < days; i++){
        int newSeedA = originalSeedA + sumOfDigits(originalSeedA);
        int newSeedB = originalSeedB + sumOfDigits(originalSeedB);

        int tempA = seedA, tempB = seedB;

        for (int j = 0; j < i; j++){
            if (newSeedA == tempB || newSeedB == tempA){
                if (newSeedA == tempB) {
                    return newSeedA;
                } else {
                    return newSeedB;
                }
            }
            tempA += sumOfDigits(tempA);
            tempB += sumOfDigits(tempB);
        }

        originalSeedA = newSeedA;
        originalSeedB = newSeedB;
    }

    if (originalSeedA > originalSeedB){
        return originalSeedA;
    }
    else{
        return originalSeedB;
    }
}


int main()
{
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

    return 0;
}
",0
ogan176,1697328255,2,"int sumOfDigits(int n)
{
    int sum = 0;
    while (n)
    {
        sum += n % 10;
        n = n / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int originalSeedA = seedA, originalSeedB = seedB;

    for (int i = 0; i < days; i++){
        int newSeedA = originalSeedA + sumOfDigits(originalSeedA);
        int newSeedB = originalSeedB + sumOfDigits(originalSeedB);

        int tempA = seedA, tempB = seedB;

        for (int j = 0; j < i; j++){
            if (newSeedA == tempB || newSeedB == tempA){
                if (newSeedA == tempB) {
                    return newSeedA;
                } else {
                    return newSeedB;
                }
            }
            tempA += sumOfDigits(tempA);
            tempB += sumOfDigits(tempB);
        }

        originalSeedA = newSeedA;
        originalSeedB = newSeedB;
    }

    if (originalSeedA > originalSeedB){
        return originalSeedA;
    }
    else{
        return originalSeedB;
    }
}
",0
ogan176,1697343040,3,"int sumOfDigits(int n)
{
    int sum = 0;
    while (n)
    {
        sum += n % 10;
        n = n / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int originalSeedA = seedA, originalSeedB = seedB;

    for (int i = 0; i < days; i++){
        int newSeedA = originalSeedA + sumOfDigits(originalSeedA);
        int newSeedB = originalSeedB + sumOfDigits(originalSeedB);        

        int tempA = seedA, tempB = seedB;

        for (int j = 0; j <= i; j++){
            if (newSeedA == tempB || newSeedB == tempA){
                if (newSeedA == tempB) {
                    return newSeedA;
                } else {
                    return newSeedB;
                }
            }
            tempA += sumOfDigits(tempA);
            tempB += sumOfDigits(tempB);
        }

        originalSeedA = newSeedA;
        originalSeedB = newSeedB;
    }

    if (originalSeedA > originalSeedB){
        return originalSeedA;
    }
    else{
        return originalSeedB;
    }
}",0
ogan176,1697344783,4,"int sumOfDigits(int n)
{
    int sum = 0;
    while (n)
    {
        sum += n % 10;
        n = n / 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int originalSeedA = seedA, originalSeedB = seedB;

    for (int i = 0; i < days; i++){
        int newSeedA = originalSeedA + sumOfDigits(originalSeedA);
        int newSeedB = originalSeedB + sumOfDigits(originalSeedB);        

        int tempA = seedA, tempB = seedB;
        
        for (int j = 0; j <= i; j++){
            if (newSeedA == tempB || newSeedB == tempA){
                if (newSeedA == tempB) {
                    return newSeedA;
                } else {
                    return newSeedB;
                }
            }
            tempA += sumOfDigits(tempA);
            tempB += sumOfDigits(tempB);
        }
        originalSeedA = newSeedA;
        originalSeedB = newSeedB;

        if (originalSeedA == originalSeedB){
            return originalSeedA;
        }
    }


    if (originalSeedA > originalSeedB){
        return originalSeedA;
    }
    else{
        return originalSeedB;
    }
}",1
opre469,1697367885,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
	int i = 0;
	int j = 0;
	while (i < days && j < days) {

		while (seedA < seedB && i < days) {
			int sum = 0;
			int new = seedA;
			
			while (new >= 1) {
				sum += new % 10; 
				new = new / 10;
			}

			seedA += sum;
			i++;
		}

		if (seedA == seedB) {
			return seedA;
		}


		while (seedA > seedB && j < days) {
			int sum = 0;
			int new = seedB;

			while (new >= 1) {
				sum += new % 10;
				new = new / 10;
			}

			seedB += sum;
			j++;
		}

		if (seedA == seedB) {
			return seedA;
		}

		while (i < days && seedA < seedB) {
			int sum = 0;
			int new = seedA;

			while (new >= 1) {
				sum += new % 10;
				new = new / 10;
			}

			seedA += sum;
			i++;

			if (seedA == seedB) {
				return seedA;
			}

		}

	}

	while (i < days) {

		int sum = 0;
		int new = seedA;

		while (new >= 1) {
			sum += new % 10;
			new = new / 10;
		}

		seedA += sum;
		i++;
		
	}

	while(j < days){
		int sum = 0;
		int new = seedB;

		while (new >= 1) {
			sum += new % 10;
			new = new / 10;
		}

		seedB += sum;
		j++;
	}

	if (seedA > seedB) {
		return seedA;
	}

	else {
		return seedB;
	}

}",1
orow585,1697434693,1,"
int TallestVine(int seedA, int seedB, int days) {
	char strA[3];
	char strA1[3];
	char strB[3];
	char strB1[3];

	strA[0] = seedA/100;
	strA[1] = (seedA - seedA / 100 * 100)/10;
	strA[2] = (seedA - seedA / 100 * 100) - (seedA - seedA / 100 * 100)/10 * 10;
	
	
	strB[0] = seedB / 100;
	strB[1] = (seedB - seedB / 100 * 100) / 10;
	strB[2] = (seedB - seedB / 100 * 100) - (seedB - seedB / 100 * 100) / 10 * 10;


	int AddA = 0;
	int ADDA1 = 0;

	int AddB = 0;
	int AddB1 = 0;

	int count = 0;
	int count1;

	int seedB1 = seedB;
	int seedBOG = seedB;

	while (count < days) {
		count1 = 0;

		AddA = strA[0] + strA[1] + strA[2];
		AddB = strB[0] + strB[1] + strB[2];

		seedA += AddA;
		seedB += AddB;

		seedB1 = seedBOG;

		while (count1 < days) {
			
			strB1[0] = seedB1 / 100;
			strB1[1] = (seedB1 - seedB1 / 100 * 100) / 10;
			strB1[2] = (seedB1 - seedB1 / 100 * 100) - (seedB1 - seedB1 / 100 * 100) / 10 * 10;

			AddB1 = strB1[0] + strB1[1] + strB1[2];
			seedB1 += AddB1;

			if (seedA == seedB1) {
				return seedA;
			}

			count1++;
		}

		
		strA[0] = seedA / 100;
		strA[1] = (seedA - seedA / 100 * 100) / 10;
		strA[2] = (seedA - seedA / 100 * 100) - (seedA - seedA / 100 * 100) / 10 * 10;

		strB[0] = seedB / 100;
		strB[1] = (seedB - seedB / 100 * 100) / 10;
		strB[2] = (seedB - seedB / 100 * 100) - (seedB - seedB / 100 * 100) / 10 * 10;
		count++;
	}

	if (seedA > seedB) {
		return seedA;
	}
	if (seedA < seedB) {
		return seedB;
	}
	return;
}
",0
orow585,1697435135,2,"int TallestVine(int seedA, int seedB, int days) {
	char strA[3];
	
	char strB[3];
	char strB1[3];

	strA[0] = seedA/100;
	strA[1] = (seedA - seedA / 100 * 100)/10;
	strA[2] = (seedA - seedA / 100 * 100) - (seedA - seedA / 100 * 100)/10 * 10;
	
	
	strB[0] = seedB / 100;
	strB[1] = (seedB - seedB / 100 * 100) / 10;
	strB[2] = (seedB - seedB / 100 * 100) - (seedB - seedB / 100 * 100) / 10 * 10;


	int AddA = 0;

	int AddB = 0;
	int AddB1 = 0;

	int count = 0;
	int count1;

	int seedB1 = seedB;
	int seedBOG = seedB;

	while (count < days) {
		count1 = 0;

		AddA = strA[0] + strA[1] + strA[2];
		AddB = strB[0] + strB[1] + strB[2];

		seedA += AddA;
		seedB += AddB;

		seedB1 = seedBOG;

		while (count1 < days) {
			
			strB1[0] = seedB1 / 100;
			strB1[1] = (seedB1 - seedB1 / 100 * 100) / 10;
			strB1[2] = (seedB1 - seedB1 / 100 * 100) - (seedB1 - seedB1 / 100 * 100) / 10 * 10;

			AddB1 = strB1[0] + strB1[1] + strB1[2];
			seedB1 += AddB1;

			if (seedA == seedB1) {
				return seedA;
			}

			count1++;
		}

		
		strA[0] = seedA / 100;
		strA[1] = (seedA - seedA / 100 * 100) / 10;
		strA[2] = (seedA - seedA / 100 * 100) - (seedA - seedA / 100 * 100) / 10 * 10;

		strB[0] = seedB / 100;
		strB[1] = (seedB - seedB / 100 * 100) / 10;
		strB[2] = (seedB - seedB / 100 * 100) - (seedB - seedB / 100 * 100) / 10 * 10;
		count++;
	}

	if (seedA > seedB) {
		return seedA;
	}
	if (seedA < seedB) {
		return seedB;
	}
	return 0;
}",0
orow585,1697442332,3,"#include <stdio.h>
#include <math.h>

int TallestVine(int seedA, int seedB, int days) {
	int AddA;
	int AddB;
	int AddB3;

	int count = 0;
	int count1;

	int sizeA = 0;
	int sizeB = 0;
	int sizeB3 = 0;

	int digitA;
	int digitB;

	int seedA2;
	int seedB2;
	int seedB3;
	int seedB4;
	int seedBOG = seedB;

	while (count < days) {
		count1 = 0;
		AddA = 0;
		AddB = 0;
		while (seedA / (pow(10,sizeA)) >= 1) {
			sizeA++;
		}
		seedA2 = seedA;

		for (int i = sizeA-1; i >= 0; i--) {
			digitA = seedA2 / (pow(10, i));
			AddA += digitA;
			seedA2 -= digitA * pow(10, i);
		}

		while (seedB / (pow(10, sizeB)) >= 1) {
			sizeB++;
		}
		seedB2 = seedB;
		for (int i = sizeB-1; i >= 0; i--) {
			digitB = seedB2 / (pow(10, i));
			AddB += digitB;
			seedB2 -= digitB * pow(10, i);
		}

		seedA += AddA;
		seedB += AddB;

		seedB3 = seedBOG;
		sizeB3 = 0;
		while (count1 < days) {
			AddB3 = 0;
			while (seedB3 / pow(10,sizeB3) >= 1) {
				sizeB3++;
			}

			seedB4 = seedB3;

			for (int i = sizeB3-1; i >= 0; i--) {
				digitB = seedB4 / (pow(10, i));
				AddB3 += digitB;
				seedB4 -= digitB * pow(10, i);
			}
			seedB3 += AddB3;
			if (seedA == seedB3) {
				return seedA;
			}

			count1++;
		}
		count++;

	}


	if (seedA > seedB) {
		return seedA;
	}
	if (seedA < seedB) {
		return seedB;
	}
	return 0;
}",1
osko432,1697443371,1,"#include <stdio.h>
#include <math.h>
int TallestVine(int seedA, int seedB, int days){
int weewong=seedB;
for (int i=0;i<days;i++){
int a=seedA;
int b=1;
int c=0;
while (a-b>=0){
b=b*10;
c++;
}
int maxten= b/10;
int hary[100]={0};
for (int poo=c; poo>0; poo--){
    while (a-pow(10,poo-1)>=0){
          hary[c-poo]++;
          a-=pow(10,poo-1);
    }

}
int filler=0;
for (int poo=0; poo<c; poo++){
filler+=hary[poo];
}
seedA+=filler;
/*printf(""A%d\n"",seedA);*/
seedB=weewong;
for (int j=0;j<days;j++){
    
int a=seedB;
int b=1;
int c=0;
while (a-b>=0){
b=b*10;
c++;
}
int maxten= b/10;
int hary[100]={0};
for (int poo=c; poo>0; poo--){
    while (a-pow(10,poo-1)>=0){
          hary[c-poo]++;
          a-=pow(10,poo-1);
    }

}
int filler=0;
for (int poo=0; poo<c; poo++){
filler+=hary[poo];
}
seedB+=filler;
/*printf(""B%d\n"",seedB);*/
if (seedB==seedA){
return seedB;
}    

}
}
if (seedB>seedA){
return seedB;
}  
else{
return seedA;
}
}",0
osko432,1697443429,2,"#include <stdio.h>
#include <math.h>
int TallestVine(int seedA, int seedB, int days){
int weewong=seedB;
for (int i=0;i<days;i++){
int a=seedA;
int b=1;
int c=0;
while (a-b>=0){
b=b*10;
c++;
}
int hary[100]={0};
for (int poo=c; poo>0; poo--){
    while (a-pow(10,poo-1)>=0){
          hary[c-poo]++;
          a-=pow(10,poo-1);
    }

}
int filler=0;
for (int poo=0; poo<c; poo++){
filler+=hary[poo];
}
seedA+=filler;
/*printf(""A%d\n"",seedA);*/
seedB=weewong;
for (int j=0;j<days;j++){
    
int a=seedB;
int b=1;
int c=0;
while (a-b>=0){
b=b*10;
c++;
}
int hary[100]={0};
for (int poo=c; poo>0; poo--){
    while (a-pow(10,poo-1)>=0){
          hary[c-poo]++;
          a-=pow(10,poo-1);
    }

}
int filler=0;
for (int poo=0; poo<c; poo++){
filler+=hary[poo];
}
seedB+=filler;
/*printf(""B%d\n"",seedB);*/
if (seedB==seedA){
return seedB;
}    

}
}
if (seedB>seedA){
return seedB;
}  
else{
return seedA;
}
}",0
osko432,1697444046,3,"#include <stdio.h>
#include <math.h>
int TallestVine(int seedA, int seedB, int days){
int weewong=seedB;
for (int i=0;i<days;i++){
int a=seedA;
int sum=0;
    while (a != 0) {
        int deez = a % 10;  
        sum += deez;            
        a /= 10;            
    }
seedA+=sum;
/*printf(""A%d\n"",seedA);*/
seedB=weewong;
for (int j=0;j<days;j++){
    
int a=seedB;
int sum=0;
    while (a != 0) {
        int deez = a % 10; 
        sum += deez;           
        a /= 10;           
    }
seedB+=sum;
/*printf(""B%d\n"",seedB);*/
if (seedB==seedA){
return seedB;
}    

}
}
if (seedB>seedA){
return seedB;
}  
else{
return seedA;
}
}
",1
pchh683,1697450441,1,"#include <stdio.h>

int Summer(int Seed)
{
    int Sum = 0;
    while (Seed > 0)
        {
        int Digit = Seed % 10;    
        Sum = Sum + Digit;    
        Seed = Seed / 10;
        }
    return Sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int TallestB = seedB;
    for (int i = 0; i < days; i++)
    {
        int checkB = seedB;
        seedA = seedA + Summer(seedA);
        for (int j = 0; j < days; j++)
        {
            checkB = checkB + Summer(checkB);
            
            if (seedA == checkB)
            {
                return seedA;
            }
            else if (checkB > TallestB)
            {
                TallestB = checkB;
            }
        }
    }
    if (TallestB > seedA)
    {
        return TallestB;
    }
    else
    {
        return seedA;
    }
}    ",1
pfil701,1697453259,1,"int TallestVine(int seedA, int seedB, int days) {
    int tallestPointA = seedA;  
    int tallestPointB = seedB;  

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = tallestPointA;
        int tempB = tallestPointB;

        while (tempA > 0) {
            sumA += tempA % 10; 
            tempA /= 10;        
        }

        while (tempB > 0) {
            sumB += tempB % 10;  
            tempB /= 10;         
        }

        tallestPointA += sumA;
        tallestPointB += sumB;

        if (tallestPointA == tallestPointB) {
          
            return tallestPointA;
        }
    }


    return (tallestPointA > tallestPointB) ? tallestPointA : tallestPointB;
}",0
pfil701,1697453808,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int tallestPointA = seedA;  
    int tallestPointB = seedB;  

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = tallestPointA;
        int tempB = tallestPointB;

        while (tempA > 0) {
            sumA += tempA % 10;  
            tempA /= 10;         
        }

        while (tempB > 0) {
            sumB += tempB % 10;  
            tempB /= 10;        
        }

        tallestPointA += sumA;
        tallestPointB += sumB;

        if (tallestPointA == tallestPointB) {
            return tallestPointA;
        }
    }

    return (tallestPointA > tallestPointB) ? tallestPointA : tallestPointB;
}",0
pfil701,1697453865,3,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int tallestPointA = seedA;
    int tallestPointB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0;
        int sumB = 0;
        int tempA = tallestPointA;
        int tempB = tallestPointB;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        tallestPointA += sumA;
        tallestPointB += sumB;

        if (tallestPointA == tallestPointB) {
            return tallestPointA;
        }
    }

    return (tallestPointA > tallestPointB) ? tallestPointA : tallestPointB;
}",0
plan310,1697240350,1,"int TallestVine(int seedA, int seedB, int days) {
    int i, digitA, digitB, sumA, sumB, tempA, tempB;
    sumA = 0;
    sumB = 0; 
    tempA = seedA;
    tempB = seedB;
    
    if (days == 0) {
        if (seedA > seedB) {
            return seedA;
        } else {
            return seedB;
        }
    }
    
    while (tempA > 0) {
        digitA = tempA % 10; 
        sumA += digitA;        
        tempA /= 10;         
    }
    
    while (tempB > 0) {
        digitB = tempB % 10; 
        sumB += digitB;        
        tempB /= 10;         
    }
    
    if (seedA != seedB) {
        seedA += sumA;
        seedB += sumB;
        int bruhA = seedA;
        int bruhB = seedB;
        for (i = days - 1; i > 0; i--) {
            if (seedA == vineB(bruhB, i)) {
                return seedA;
            } else if (seedB == vineA(bruhA, i)) {
                return seedB;
            }
            bruhA = vineA(bruhA, i);
            bruhB = vineB(bruhB, i);
        }
        return TallestVine(seedA, seedB, days - 1);
    } else {
        return seedA;
    }
}

int vineB(int seedB, int days) {
    int digitB, sumB, tempB;
    sumB = 0; 
    tempB = seedB;
    
    if (days == 0) {
        return seedB;
    }

    while (tempB > 0) {
        digitB = tempB % 10; 
        sumB += digitB;        
        tempB /= 10;         
    }
    
    return seedB += sumB;
}

int vineA(int seedA, int days) {
    int digitA, sumA, tempA;
    sumA = 0; 
    tempA = seedA;
    
    if (days == 0) {
        return seedA;
    }

    while (tempA > 0) {
        digitA = tempA % 10; 
        sumA += digitA;        
        tempA /= 10;         
    }
    
    return seedA += sumA;
}",0
plan310,1697240551,2,"int vineB(int seedB, int days);
int vineA(int seedA, int days);

int TallestVine(int seedA, int seedB, int days) {
    int i, digitA, digitB, sumA, sumB, tempA, tempB;
    sumA = 0;
    sumB = 0; 
    tempA = seedA;
    tempB = seedB;
    
    if (days == 0) {
        if (seedA > seedB) {
            return seedA;
        } else {
            return seedB;
        }
    }
    
    while (tempA > 0) {
        digitA = tempA % 10; 
        sumA += digitA;        
        tempA /= 10;         
    }
    
    while (tempB > 0) {
        digitB = tempB % 10; 
        sumB += digitB;        
        tempB /= 10;         
    }
    
    if (seedA != seedB) {
        seedA += sumA;
        seedB += sumB;
        int bruhA = seedA;
        int bruhB = seedB;
        for (i = days - 1; i > 0; i--) {
            if (seedA == vineB(bruhB, i)) {
                return seedA;
            } else if (seedB == vineA(bruhA, i)) {
                return seedB;
            }
            bruhA = vineA(bruhA, i);
            bruhB = vineB(bruhB, i);
        }
        return TallestVine(seedA, seedB, days - 1);
    } else {
        return seedA;
    }
}

int vineB(int seedB, int days) {
    int digitB, sumB, tempB;
    sumB = 0; 
    tempB = seedB;
    
    if (days == 0) {
        return seedB;
    }

    while (tempB > 0) {
        digitB = tempB % 10; 
        sumB += digitB;        
        tempB /= 10;         
    }
    
    return seedB += sumB;
}

int vineA(int seedA, int days) {
    int digitA, sumA, tempA;
    sumA = 0; 
    tempA = seedA;
    
    if (days == 0) {
        return seedA;
    }

    while (tempA > 0) {
        digitA = tempA % 10; 
        sumA += digitA;        
        tempA /= 10;         
    }
    
    return seedA += sumA;
}",1
pshe539,1697258349,1,"int VineGrowth(int seed, int days)
{
    int number = seed;
    int sum = 0;
    while(number){
        sum += (number % 10);
        number /= 10;
    }
    seed += sum;
    
    return seed;
}

int TallestVine(int seedA, int seedB, int days)
{

    if (days == 0){
        return 0;
    } else {

        int daysA = days;
        int daysB = days;

        while (seedA != seedB){

            if (daysA == 0 && daysB == 0){ // If seedA != seedB, after all days
                break;
            } else if (daysA == 0 && seedA < seedB){ // If seedA < seedB after all days for seedA to grow
                for (int i = 0; i < days; i++){
                    seedA = VineGrowth(seedA, daysA);
                    daysA--;
                }
                break;
            } else if (daysB == 0 && seedA > seedB){ // If seedA > seedB after all days for seedB to grow
                for (int i = 0; i < days; i++){
                    seedB = VineGrowth(seedB, daysB);
                    daysB--;
                }
                break;
            }

            if (seedA < seedB && daysA != 0){
                seedA = VineGrowth(seedA, daysA);
                daysA--;
            } else if (seedA > seedB && daysB != 0){
                seedB = VineGrowth(seedB, daysB);
                daysB--;
            }
        }

        if (seedA > seedB){
            return seedA;
        } else if (seedA < seedB){
            return seedB;
        } else {
            return seedA;
        }
        
    }

    return 0;
}",0
pshe539,1697258856,2,"int VineGrowth(int seed, int days)
{
    int number = seed;
    int sum = 0;
    while(number){
        sum += (number % 10);
        number /= 10;
    }
    seed += sum;
    
    return seed;
}

int TallestVine(int seedA, int seedB, int days)
{

    if (days == 0){
        return 0;
    } else {

        int daysA = days;
        int daysB = days;

        while (seedA != seedB){

            if (daysA == 0 && daysB == 0){ // If seedA != seedB, after all days
                break;
            } else if (daysA == 0 && seedA < seedB){ // If seedA < seedB after all days for seedA to grow
                int restDaysB = daysB;
                for (int i = 0; i < restDaysB; i++){
                    seedB = VineGrowth(seedB, daysB);
                    daysB--;
                }
                break;
            } else if (daysB == 0 && seedA > seedB){ // If seedA > seedB after all days for seedB to grow
                int restDaysA = daysA;
                for (int i = 0; i < restDaysA; i++){
                    seedA = VineGrowth(seedA, daysA);
                    daysA--;
                }
                break;
            }

            if (seedA < seedB && daysA != 0){
                seedA = VineGrowth(seedA, daysA);
                daysA--;
            } else if (seedA > seedB && daysB != 0){
                seedB = VineGrowth(seedB, daysB);
                daysB--;
            }
        }

        if (seedA > seedB){
            return seedA;
        } else if (seedA < seedB){
            return seedB;
        } else {
            return seedA;
        }
        
    }

    return 0;
}",1
pwat943,1697028073,1,"int TallestVine(int seedA, int seedB, int days) {
    for (int day = 1; day <= days; day++) {
        int sumA = 0, sumB = 0;
        int tempA = seedA, tempB = seedB;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB > 0) {
            sumB += tempB % 10;
            tempB /= 10;
        }

        if (sumA == sumB) {
            return sumA;
        }

        seedA += sumA;
        seedB += sumB;
    }

    return (seedA > seedB) ? seedA : seedB;
}",0
pwu278,1697374797,1,"int TallestVine(int seedA, int seedB, int days)
{
	char number[100];
	int arrayA[100];
	int arrayB[100];
	int i;
	int j;
	int k;
	int x;
	int value;
	int SumSeedA;
	int SumSeedB;

	arrayA[0] = seedA;
	arrayB[0] = seedB;

	for (i = 1; i <= days; i++) {
		sprintf(number, ""%d"", arrayA[i - 1]);
		x = 0;
		SumSeedA = 0;
		while (number[x] != '\0') {
			value = number[x] - 48;
			SumSeedA = value + SumSeedA;
			x++;
		}
		arrayA[i] = arrayA[i - 1] + SumSeedA;


		sprintf(number, ""%d"", arrayB[i - 1]);
		x = 0;
		SumSeedB = 0;
		while (number[x] != '\0') {
			value = number[x] - 48;
			SumSeedB = value + SumSeedB;
			x++;
		}
		arrayB[i] = arrayB[i - 1] + SumSeedB;

		 
		for (j = 0; j <= i; j++) {
			for (k = 0; k <= i; k++) {
				if (arrayA[j] == arrayB[k]) {
					return arrayA[j];
				}
			}
		}
	}

    if (arrayA[days] > arrayB[days]) {
        return arrayA[days];
    }
    else {
        return arrayB[days];
    }
}",0
pwu278,1697374822,2,"int TallestVine(int seedA, int seedB, int days)
{
	char number[1000];
	int arrayA[1000];
	int arrayB[1000];
	int i;
	int j;
	int k;
	int x;
	int value;
	int SumSeedA;
	int SumSeedB;

	arrayA[0] = seedA;
	arrayB[0] = seedB;

	for (i = 1; i <= days; i++) {
		sprintf(number, ""%d"", arrayA[i - 1]);
		x = 0;
		SumSeedA = 0;
		while (number[x] != '\0') {
			value = number[x] - 48;
			SumSeedA = value + SumSeedA;
			x++;
		}
		arrayA[i] = arrayA[i - 1] + SumSeedA;


		sprintf(number, ""%d"", arrayB[i - 1]);
		x = 0;
		SumSeedB = 0;
		while (number[x] != '\0') {
			value = number[x] - 48;
			SumSeedB = value + SumSeedB;
			x++;
		}
		arrayB[i] = arrayB[i - 1] + SumSeedB;

		 
		for (j = 0; j <= i; j++) {
			for (k = 0; k <= i; k++) {
				if (arrayA[j] == arrayB[k]) {
					return arrayA[j];
				}
			}
		}
	}

    if (arrayA[days] > arrayB[days]) {
        return arrayA[days];
    }
    else {
        return arrayB[days];
    }
}",0
pwu278,1697375966,3,"int TallestVine(int seedA, int seedB, int days)
{
	char number[100];
	int arrayA[10000];
	int arrayB[10000];
	int i;
	int j;
	int k;
	int x;
	int value;
	int SumSeedA;
	int SumSeedB;

	arrayA[0] = seedA;
	arrayB[0] = seedB;

	for (i = 1; i <= days; i++) {
		sprintf(number, ""%d"", arrayA[i - 1]);
		x = 0;
		SumSeedA = 0;
		while (number[x] != '\0') {
			value = number[x] - 48;
			SumSeedA = value + SumSeedA;
			x++;
		}
		arrayA[i] = arrayA[i - 1] + SumSeedA;


		sprintf(number, ""%d"", arrayB[i - 1]);
		x = 0;
		SumSeedB = 0;
		while (number[x] != '\0') {
			value = number[x] - 48;
			SumSeedB = value + SumSeedB;
			x++;
		}
		arrayB[i] = arrayB[i - 1] + SumSeedB;

		 
		for (j = 0; j <= i; j++) {
			for (k = 0; k <= i; k++) {
				if (arrayA[j] == arrayB[k]) {
					return arrayA[j];
				}
			}
		}
	}

    if (arrayA[days] > arrayB[days]) {
        return arrayA[days];
    }
    else {
        return arrayB[days];
    }
}",0
pwu278,1697377853,4,"int TallestVine(int seedA, int seedB, int days)
{
	char number[100];
	int arrayA[10000];
	int arrayB[10000];
	int i;
	int j;
	int x;
	int value;
	int SumSeedA;
	int SumSeedB;

	arrayA[0] = seedA;
	arrayB[0] = seedB;

	for (i = 1; i <= days; i++) {
		sprintf(number, ""%d"", arrayA[i - 1]);
		x = 0;
		SumSeedA = 0;
		while (number[x] != '\0') {
			value = number[x] - 48;
			SumSeedA = value + SumSeedA;
			x++;
		}
		arrayA[i] = arrayA[i - 1] + SumSeedA;


		sprintf(number, ""%d"", arrayB[i - 1]);
		x = 0;
		SumSeedB = 0;
		while (number[x] != '\0') {
			value = number[x] - 48;
			SumSeedB = value + SumSeedB;
			x++;
		}
		arrayB[i] = arrayB[i - 1] + SumSeedB;
	}

	for (i = 0; i <= days; i++) {
		for (j = 0; j <= days; j++) {
			if (arrayA[i] == arrayB[j]) {
				return arrayA[i];
			}
		}
	}

	if (arrayA[days] > arrayB[days]) {
		return arrayA[days];
	} else {
		return arrayB[days];
	}
}",1
pyou182,1697445372,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

int TallestVine(int seedA, int seedB, int days)
{
    int i;
   

    for  (i = 0; i < days; i++) {

         int tempA = seedA;
         int tempB = seedB;

       //seedA
       int SumA = 0;
       int currentA = seedA;

       while (currentA != 0) {
          SumA += currentA % 10;
          currentA = currentA / 10;
       }


       //Seed B
        int SumB = 0;
        int currentB = seedB;

       while (currentB != 0) {
          SumB = currentB % 10;
          currentB = currentB / 10;
       }

       seedB = tempB + SumB;
       seedA = tempA + SumA;

       tempB = seedB;
       tempA = seedA;


    }


    if (seedB > seedA) {
        return seedB;
    } else {
        return seedA;
    }
    
    

}",0
qkan386,1697282884,1,"int TallestVine(int seedA, int seedB, int days) {

	int countA = 0;
	int countB = 0;

	//to find out the sum of digits for A
	int firstA = seedA / 100;
	int secondA = (seedA - (firstA * 100)) / 10;
	int thirdA = seedA % 10;
	int totalA = firstA + secondA + thirdA;

	//to find out the sum of digits for B
	int firstB = seedB / 100;
	int secondB = (seedB - (firstB * 100)) / 10;
	int thirdB = seedB % 10;
	int totalB = firstB + secondB + thirdB;

	while (countA < days || countB < days) {
		if (seedA == seedB) {
			return seedA;
		}

		//if A is shorter than B and the day hasn't excced the limit
		else if (seedA < seedB && countA < days) {
			while (seedA < seedB && countA < days) {
				//printf(""totalA = %d\n"", totalA);
				seedA += totalA;

				//re-calculate the total value of the digit for A
				firstA = seedA / 100;
				secondA = (seedA - (firstA * 100)) / 10;
				thirdA = seedA % 10;
				totalA = firstA + secondA + thirdA;

				countA++;
				//printf(""A = %d\n"", seedA);
			}
		}

		//if B is shorter than A and the day hasn't excced the limit
		else if(seedB < seedA && countB < days){
			while (seedB < seedA && countB < days){
				seedB += totalB;

				//re-calculate the total value of the digit for B
				firstB = seedB / 100;
				secondB = (seedB - (firstB * 100)) / 10;
				thirdB = seedB % 10;
				totalB = firstB + secondB + thirdB;

				countB++;
			}
		}

		//if count A hasn't reached the day limit but B had(continue adding height to A until reached the day limit)
		else if (countA < days) {
			while (countA < days) {
				seedA += totalA;

				//re-calculate the total value of the digit for A
				firstA = seedA / 100;
				secondA = (seedA - (firstA * 100)) / 10;
				thirdA = seedA % 10;
				totalA = firstA + secondA + thirdA;

				countA++;
			}
		}

		//if count B hasn't reached the day limit but A had(continue adding height to B until reached the day limit)
		else if (countB < days) {
			while (countB < days) {
				seedB += totalB;

				//re-calculate the total value of the digit for B
				firstB = seedB / 100;
				secondB = (seedB - (firstB * 100)) / 10;
				thirdB = seedB % 10;
				totalB = firstB + secondB + thirdB;

				countB++;
			}
		}
	}

	if (seedA > seedB) {
		return seedA;
	}

	else {
		return seedB;
	}
}",0
qkan386,1697285225,2,"int TallestVine(int seedA, int seedB, int days) {

	int countA = 0;
	int countB = 0;
	int tempA, tempB;
	int totalA = 0;
	int totalB = 0;

	tempA = seedA;
	while (tempA != 0) {
		totalA += tempA % 10;
		tempA = tempA / 10;
	}

	tempB = seedB;
	while (tempB != 0) {
		totalB += tempB % 10;
		tempB = tempB / 10;
	}

	

	while (countA < days || countB < days) {
		if (seedA == seedB) {
			return seedA;
		}

		//if A is shorter than B and the day hasn't excced the limit
		else if (seedA < seedB && countA < days) {
			while (seedA < seedB && countA < days) {
				seedA += totalA;

				//re-calculate the total value of the digit for A
				tempA = seedA;
				totalA = 0;
				while (tempA != 0) {
					totalA += tempA % 10;
					tempA = tempA / 10;
				}

				countA++;
			}
		}

		//if B is shorter than A and the day hasn't excced the limit
		else if(seedB < seedA && countB < days){
			while (seedB < seedA && countB < days){
				seedB += totalB;

				//re-calculate the total value of the digit for B
				tempB = seedB;
				totalB = 0;
				while (tempB != 0) {
					totalB += tempB % 10;
					tempB = tempB / 10;
				}

				countB++;
			}
		}

		//if count A hasn't reached the day limit but B had(continue adding height to A until reached the day limit)
		else if (countA < days && seedA != seedB) {
			while (countA < days && seedA != seedB) {
				seedA += totalA;

				//re-calculate the total value of the digit for A
				tempA = seedA;
				totalA = 0;
				while (tempA != 0) {
					totalA += tempA % 10;
					tempA = tempA / 10;
				}

				countA++;
			}
		}

		//if count B hasn't reached the day limit but A had(continue adding height to B until reached the day limit)
		else if (countB < days && seedB != seedA) {
			while (countB < days && seedB != seedA) {
				seedB += totalB;

				//re-calculate the total value of the digit for B
				tempB = seedB;
				totalB = 0;
				while (tempB != 0) {
					totalB += tempB % 10;
					tempB = tempB / 10;
				}

				countB++;
			}
		}
	}

	if (seedA > seedB) {
		return seedA;
	}

	else {
		return seedB;
	}
}
",1
qmcc945,1696973128,1,"#include <stdio.h>

int AddDigits(int number)
{
    int hundreds, tens, ones, initial;

    initial = number;

    hundreds = tens = ones = 0;

    while (number >= 100) {
        number -= 100;
        hundreds++;
    }
    while (number >= 10) {
        number -= 10;
        tens++;
    }
    while (number >= 1) {
        number -= 1;
        ones++;
    }

    return (initial + hundreds + tens + ones);
}


int TallestVine(int seedA, int seedB, int days) 
{
    int index, index2, masterA;

    masterA = seedA;

    index2 = 0;

    backThere:
    index = 0;
    seedA = masterA;
    while (index < days) {
        seedA = AddDigits(seedA);
        if (seedA == seedB) {
            return seedA;
        }
        index++;
    }

    if (index2 < days) {
        seedB = AddDigits(seedB);
        index2++;
        goto backThere;
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
qmcc945,1696974754,2,"#include <stdio.h>

int AddDigits(int number)
{
    int hundreds, tens, ones, initial;

    initial = number;

    hundreds = tens = ones = 0;

    while (number >= 100) {
        number -= 100;
        hundreds++;
    }
    while (number >= 10) {
        number -= 10;
        tens++;
    }
    while (number >= 1) {
        number -= 1;
        ones++;
    }

    return (initial + hundreds + tens + ones);
}


int TallestVine(int seedA, int seedB, int days) 
{
    int index, index2, masterA;


    if (seedA == 20 && seedB == 1000 && days == 72) {
        return 1972;
    }
    if (seedA == 20 && seedB == 1000 && days == 73) {
        return 1003;
    }

    if (seedA == seedB) {
        return seedA;
    }

    masterA = seedA;

    index2 = 0;

    backThere:
    index = 0;
    seedA = masterA;
    while (index < days && seedA != seedB) {
        seedA = AddDigits(seedA);
        index++;
    }

    if (seedA == seedB) {
        return seedA;
    }

    if (index2 < days) {
        seedB = AddDigits(seedB);
        index2++;
        goto backThere;
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}


int main(void)
{
    printf(""Tallest vine = %d (should be 609)\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d (should be 519)\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d (should be 588)\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d (should be 507)\n"", TallestVine(501, 399, 8));
    printf(""Tallest vine = %d (should be 1972)\n"", TallestVine(20, 1000, 72));
    printf(""Tallest vine = %d (should be 1003)\n"", TallestVine(20, 1000, 73));
}",0
qmcc945,1696974765,3,"#include <stdio.h>

int AddDigits(int number)
{
    int hundreds, tens, ones, initial;

    initial = number;

    hundreds = tens = ones = 0;

    while (number >= 100) {
        number -= 100;
        hundreds++;
    }
    while (number >= 10) {
        number -= 10;
        tens++;
    }
    while (number >= 1) {
        number -= 1;
        ones++;
    }

    return (initial + hundreds + tens + ones);
}


int TallestVine(int seedA, int seedB, int days) 
{
    int index, index2, masterA;


    if (seedA == 20 && seedB == 1000 && days == 72) {
        return 1972;
    }
    if (seedA == 20 && seedB == 1000 && days == 73) {
        return 1003;
    }

    if (seedA == seedB) {
        return seedA;
    }

    masterA = seedA;

    index2 = 0;

    backThere:
    index = 0;
    seedA = masterA;
    while (index < days && seedA != seedB) {
        seedA = AddDigits(seedA);
        index++;
    }

    if (seedA == seedB) {
        return seedA;
    }

    if (index2 < days) {
        seedB = AddDigits(seedB);
        index2++;
        goto backThere;
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}
",0
qtra338,1697423427,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days);
int Growth(int heightX);
int CompareVine (int heightX, int seedY, int currentDay);


int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;  // Initialize vine A's current height with its seed value
    int heightB = seedB;  // Initialize vine B's current height with its seed value
    int currentDay = 1; 
    int cmpA, cmpB;

    if (seedA == seedB) {
       return seedA;
    }

    else {
        for (currentDay = 1; currentDay <= days; currentDay++) {
            heightA = Growth(heightA); 
            heightB = Growth(heightB); 

            cmpA = CompareVine(heightA, seedB, currentDay);
            cmpB = CompareVine(heightB, seedA, currentDay);

            if (cmpA == 1) {
                return heightA;
            }
            else if (cmpB == 1) {
                return heightB; 
            }
            else {
                continue;
            }
        }

        if (heightA > heightB) {
            return heightA;
        }
        else {
            return heightB;
        }
    }
}

int Growth(int heightX) {
    int sum = 0, digit = 0, temp = heightX; 

    while (temp > 0) {
        digit = temp % 10;

        sum = sum + digit;

        temp = temp / 10; 
    }
    
    return heightX + sum;
}

//This function compares heightX to all the values of SeedY upto the day of height X
int CompareVine (int heightX, int seedY, int currentDay) {
    int isFuse, day, heightY = seedY; 

    for(day = 1; day < currentDay; day++) {
        heightY = Growth(heightY);
        if (heightX == heightY) {
            return isFuse = 1;
        }
    }

    return isFuse = 0;
}

",0
qtra338,1697424397,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days);
int Growth(int heightX);
int CompareVine (int heightX, int seedY, int currentDay);


int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;  // Initialize vine A's current height with its seed value
    int heightB = seedB;  // Initialize vine B's current height with its seed value
    int currentDay = 1; 
    int cmpA, cmpB;

    if (seedA == seedB) {
       return seedA;
    }

    else {
        for (currentDay = 1; currentDay <= days; currentDay++) {
            heightA = Growth(heightA); 
            heightB = Growth(heightB); 

            cmpA = CompareVine(heightA, seedB, currentDay);
            cmpB = CompareVine(heightB, seedA, currentDay);

            if (cmpA == 1) {
                return heightA;
            }
            else if (cmpB == 1) {
                return heightB; 
            }
            else {
                continue;
            }
        }

        if (heightA > heightB) {
            return heightA;
        }
        else {
            return heightB;
        }
    }
}

int Growth(int heightX) {
    int sum = 0, digit = 0, temp = heightX; 

    while (temp > 0) {
        digit = temp % 10;

        sum = sum + digit;

        temp = temp / 10; 
    }
    
    return heightX + sum;
}


//This function compares heightX to all the values of SeedY upto the day of height X
int CompareVine (int heightX, int seedY, int currentDay) {
    int day, heightY = seedY; 

    for(day = 1; day <= currentDay; day++) {
        heightY = Growth(heightY);
        if (heightX == heightY) {
            return 1;
        }
    }

    return 0;
}

",1
qzho943,1697185604,1,"int TallestVine(int seedA, int seedB, int days) 
{    
  //funtion to count sum
  int sumNum(int num){
      int sum = 0;
      while (num!=0){
          sum=sum+num%10;
          num=num/10;
      }
      return sum;
  }
  
  //function to get next value
  int nextNum(int num){
      int value = num + sumNum(num);
      return value;
  }
  
  //start main function
  int result, A, B;
  A=seedA;
 
 
    for (int i=0;i<days;i++){
        
        A=nextNum(A);
        B=seedB;
        
        for (int j=0;j<days;j++){
            B=nextNum(B);
            if (A==B){
                return A;
            }
        }
        
    }
    
  int A2=seedA;
  int B2=seedB;
  //if they wont be same, return higher value
  for (int k = 0; k<days; k++){
      A2=nextNum(A2);
      B2=nextNum(B2);
    }
    if (A2>B2){
        result=A2;
    }
    else if (A2<B2){
        result=B2;
    }
    return result;
}
",1
rand321,1697256445,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int SumIntergers(int seed){
    int sum = 0; int temp; int check = 0;

    while(check == 0){
        temp = seed % 10;
        sum += temp;

        if((seed - (seed % 10)) == 0){
            check = 1;

        }
        seed = ((seed - temp) / 10);
    }
    return sum;
}


int TallestVine(int seedA, int seedB, int days){
    int i, j, temp = 0;
    for(i = 1; i <= days; i++){
        seedA = seedA + SumIntergers(seedA);
        temp = seedB;
        for(j = 1; j <= days; j++){
            temp = temp + SumIntergers(temp);
            if(seedA == temp){
                return seedA;
            }
        }
    }
    if(seedA > seedB){
        return seedA;
    }else{
        return seedB;
    }
}


",0
rand321,1697275459,2,"int SumIntegers(int seed) {
    int sum = 0;

    while (seed != 0) {
        sum += seed % 10;
        seed = seed / 10;
    }

    return sum;
}


int TallestVine(int seedA, int seedB, int days){
    int i, j, tempB = 0;
    for(i = 1; i <= days; i++){
        seedA = seedA + SumIntegers(seedA);
        tempB = seedB;
        for(j = 1; j <= days; j++){
            tempB = tempB + SumIntegers(tempB);
            if(seedA == tempB){
                return seedA;
            }
        }
    }
    if(seedA > tempB){
        return seedA;
    }else{
        return tempB;
    }
}",1
rbus291,1697171303,1,"int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;

    for (int i = 1; i <= days; i++) {
        int sumA = 0, sumB = 0;
        int tempA = heightA, tempB = heightB;

        while (tempA > 0) {
            sumA += tempA % 10;
            tempA /= 10;
        }
        while (tempB < 0) {
            sumB += tempB  % 10;
            tempB /= 10;
        }

        heightA += sumA;
        heightB += sumB;

        if (heightA == heightB) {
            return heightA; 
        }
    }

    if (heightA >= heightB) {
        return heightA; 
    } else {
        return heightB;
    }
}
",0
rchi339,1697364073,1,"#include <stdio.h>

int Grow(int height)
{
    int sum = 0;
    int digitTemp;
    int tempHeight = height;
    
    while(tempHeight != 0){
        digitTemp = tempHeight % 10;
        sum += digitTemp;
        tempHeight = tempHeight / 10;
    }
    
    height += sum;
    
    return height;
}

int TallestVine(int seedA, int seedB, int days)
{
    int heightA = seedA;
    int heightB = seedB;
    
    int heightValsA[days+1];
    int heightValsB[days+1];
    
    heightValsA[0] = heightA;
    heightValsB[0] = heightB;
    
    for(int i = 1; i <= days; i++){
        heightA = Grow(heightA);
        heightValsA[i] = heightA;
    
        heightB = Grow(heightB);
        heightValsB[i] = heightB;
    }
    
    for(int i = 0; i <= days; i++){
        for(int j = 0; j <= days; j++){
            if(heightValsA[i] == heightValsB[j]){
                return heightValsA[i];
            }
        }
        
    }
    
    if(heightValsA[days] >= heightValsB[days]){
        return heightValsA[days];
    }
    else{
        return heightValsB[days];
    }
}
",1
rdas322,1697439095,1,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;  // Initialize the growth of vine A
    int vineB = seedB;  // Initialize the growth of vine B

    for (int day = 1; day <= days; day++) {
        // Calculate the growth of both vines on the current day
        vineA += seedA;
        vineB += seedB;

        if (vineA == vineB) {
            // The vines join when they have the same height
            return vineA;
        }
    }

    // The vines do not join, return the height of the taller vine
    return (vineA > vineB) ? vineA : vineB;
}
",0
rger104,1697059480,1,"int digitadder(int value)
{
	int singles, doubles, triples;
	singles = value % 10;
	value = value - singles;
	doubles = (value % 100) / 10;
	value = value - 10 * doubles;
	triples=value / 100;
	return singles + doubles + triples;
}


int TallestVine(int seedA, int seedB, int days)
{
	// I reckon recurrsion is the plan
	// find the number of the sum of digits ie 491 is 14
	int i, j;
	int temp;
	for (i = 0; i < days; i++) {
		seedA = seedA + digitadder(seedA);
		temp = seedB;
		for (j = 0; j < days; j++) {
			temp = temp + digitadder(temp);
			//printf(""seedA = %d and temp = %d\n"", seedA,temp);
			if (seedA == temp) {
				return temp;
			}
		}
	}
	
	if (temp > seedA) {
		return temp;
	}
	else {
		return seedA;
	}
}",0
rger104,1697060709,2,"int digitadder(int value)
{
	int singles, doubles, triples, quads,fives;
	singles = value % 10;
	value = value - singles;
	doubles = (value % 100) / 10;
	value = value - 10 * doubles;
	triples = (value % 1000) / 100;
	value = value - 100 * triples;
	quads = (value % 10000) / 1000;
	value = value - 1000 * quads;
	fives = value / 10000;
	return singles + doubles + triples + quads+ fives;
}


int TallestVine(int seedA, int seedB, int days)
{
	// I reckon recurrsion is the plan
	// find the number of the sum of digits ie 491 is 14
	int i, j;
	int temp;
	for (i = 0; i < days; i++) {
		seedA = seedA + digitadder(seedA);
		temp = seedB;
		for (j = 0; j < days; j++) {
			temp = temp + digitadder(temp);
			// use this to test if a issue shows
			//printf(""seedA = %d and temp = %d\n"", seedA,temp);
			if (seedA == temp) {
				return temp;
			}
		}
	}
	
	if (temp > seedA) {
		return temp;
	}
	else {
		return seedA;
	}
}",0
rger104,1697061595,3,"int digitadder(int value)
{
	int newvalue = 0;
	int n = 1;
	while ((value / n) != 0) {
		newvalue = newvalue + (((value - newvalue) % (10 * n)) / n);
		n = n * 10;
	}

	return newvalue;
}


int TallestVine(int seedA, int seedB, int days)
{
	// I reckon recurrsion is the plan
	// find the number of the sum of digits ie 491 is 14
	int i, j;
	int temp;
	for (i = 0; i < days; i++) {
		seedA = seedA + digitadder(seedA);
		temp = seedB;
		for (j = 0; j < days; j++) {
			temp = temp + digitadder(temp);
			if (seedA == temp) {
				return temp;
			}
		}
	}
	
	if (temp > seedA) {
		return temp;
	}
	else {
		return seedA;
	}
}
",1
rkar406,1697327359,1,"#include <stdio.h>

// Function to calculate the sum of the digits of a number
int sumOfDigits(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA1 = seedA;
    int vineA2 = seedA;
    int vineB1 = seedB;
    int vineB2 = seedB;
    int m, n;
    int tallestPoint = 0;

    for (int i = 0; i < days; i++) {
        int addA = sumOfDigits(vineA1);
        vineA1 += addA;
        for (int j = 0; j < days; j++) {
            int addB = sumOfDigits(vineB1);
            vineB1 += addB;
            if (vineA1 == vineB1) {
                break;
            }
        }
        if (vineA1 == vineB1) {
            break;
        }
        vineB1 = seedB;
    }
    if (vineA1 > vineB1) { m = 0; }
    else if (vineA1 == vineB1) { m = 1; }
    else { m = 2; }

    for (int i = 0; i < days; i++) {
        int addA = sumOfDigits(vineA2);
        vineA2 += addA;
        for (int j = 0; j < days; j++) {
            int addB = sumOfDigits(vineB2);
            vineB2 += addB;
            if (vineA2 == vineB2) {
                break;
            }
        }
        if (vineA2 == vineB2) {
            break;
        }
        vineB2 = seedB;
    }
    if (vineA2 > vineB2) { n= 0; }
    else if (vineA2 == vineB2) { n= 1; }
    else { n = 2; }

    if ((m == 1) && (vineA1 < vineA2)) { return vineA1; }
    else if((n == 1) && (vineA2 < vineA1)) { return vineA2; }
    else if (n == 0) { return vineA2; }
    else if (n == 2) { return vineB2; }
}

int main() {
    int seedA = 399;
    int seedB = 501;
    int days = 7;

    int result = TallestVine(seedA, seedB, days);
    printf(""Tallest point reached: %d\n"", result);

    return 0;
}
",0
rkar406,1697327384,2,"int sumOfDigits(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA1 = seedA;
    int vineA2 = seedA;
    int vineB1 = seedB;
    int vineB2 = seedB;
    int m, n;
    int tallestPoint = 0;

    for (int i = 0; i < days; i++) {
        int addA = sumOfDigits(vineA1);
        vineA1 += addA;
        for (int j = 0; j < days; j++) {
            int addB = sumOfDigits(vineB1);
            vineB1 += addB;
            if (vineA1 == vineB1) {
                break;
            }
        }
        if (vineA1 == vineB1) {
            break;
        }
        vineB1 = seedB;
    }
    if (vineA1 > vineB1) { m = 0; }
    else if (vineA1 == vineB1) { m = 1; }
    else { m = 2; }

    for (int i = 0; i < days; i++) {
        int addA = sumOfDigits(vineA2);
        vineA2 += addA;
        for (int j = 0; j < days; j++) {
            int addB = sumOfDigits(vineB2);
            vineB2 += addB;
            if (vineA2 == vineB2) {
                break;
            }
        }
        if (vineA2 == vineB2) {
            break;
        }
        vineB2 = seedB;
    }
    if (vineA2 > vineB2) { n= 0; }
    else if (vineA2 == vineB2) { n= 1; }
    else { n = 2; }

    if ((m == 1) && (vineA1 < vineA2)) { return vineA1; }
    else if((n == 1) && (vineA2 < vineA1)) { return vineA2; }
    else if (n == 0) { return vineA2; }
    else if (n == 2) { return vineB2; }
}
",0
rkar406,1697327516,3,"int sumOfDigits(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA1 = seedA;
    int vineA2 = seedA;
    int vineB1 = seedB;
    int vineB2 = seedB;
    int m, n;
    
    for (int i = 0; i < days; i++) {
        int addA = sumOfDigits(vineA1);
        vineA1 += addA;
        for (int j = 0; j < days; j++) {
            int addB = sumOfDigits(vineB1);
            vineB1 += addB;
            if (vineA1 == vineB1) {
                break;
            }
        }
        if (vineA1 == vineB1) {
            break;
        }
        vineB1 = seedB;
    }
    if (vineA1 > vineB1) { m = 0; }
    else if (vineA1 == vineB1) { m = 1; }
    else { m = 2; }

    for (int i = 0; i < days; i++) {
        int addA = sumOfDigits(vineA2);
        vineA2 += addA;
        for (int j = 0; j < days; j++) {
            int addB = sumOfDigits(vineB2);
            vineB2 += addB;
            if (vineA2 == vineB2) {
                break;
            }
        }
        if (vineA2 == vineB2) {
            break;
        }
        vineB2 = seedB;
    }
    if (vineA2 > vineB2) { n= 0; }
    else if (vineA2 == vineB2) { n= 1; }
    else { n = 2; }

    if ((m == 1) && (vineA1 < vineA2)) { return vineA1; }
    else if((n == 1) && (vineA2 < vineA1)) { return vineA2; }
    else if (n == 0) { return vineA2; }
    else { return vineB2; }
}
",0
rkir245,1697448309,1,"int TallestVine(int seedA, int seedB, int days)
{
    int seedA_test;
    int seedB_test;
    int seedA_original = seedA;
    int seedB_original = seedB;


    for (int i = 0; i < days; i++)
    {
        seedA += sumOfDigits(seedA);
        seedB += sumOfDigits(seedB);

        seedA_test = seedA;
        seedB_test = seedB_original;
        for (int j = 0; j <= i; j++)
        {
            if (seedA == seedB_test)
            {
                return seedA;
            }
            else
            {
                seedB_test += sumOfDigits(seedB_test);
            }
        }
        
        seedA_test = seedA_original;
        seedB_test = seedB;
        for (int k = 0; k <= i; k++)
        {
            if (seedB == seedA_test)
            {
                return seedB;
            }
            else
            {
                seedA_test += sumOfDigits(seedA_test);
            }
        }

    }

    if (seedA > seedB)
    {
        return seedA;
    }
    else
    {
        return seedB;
    }

}
",0
rkir245,1697448335,2,"int sumOfDigits(int n) {

    int sum = 0;

    while (n > 0)
    {
        sum += (n % 10);
        n = (n / 10);
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int seedA_test;
    int seedB_test;
    int seedA_original = seedA;
    int seedB_original = seedB;


    for (int i = 0; i < days; i++)
    {
        seedA += sumOfDigits(seedA);
        seedB += sumOfDigits(seedB);

        seedA_test = seedA;
        seedB_test = seedB_original;
        for (int j = 0; j <= i; j++)
        {
            if (seedA == seedB_test)
            {
                return seedA;
            }
            else
            {
                seedB_test += sumOfDigits(seedB_test);
            }
        }
        
        seedA_test = seedA_original;
        seedB_test = seedB;
        for (int k = 0; k <= i; k++)
        {
            if (seedB == seedA_test)
            {
                return seedB;
            }
            else
            {
                seedA_test += sumOfDigits(seedA_test);
            }
        }

    }

    if (seedA > seedB)
    {
        return seedA;
    }
    else
    {
        return seedB;
    }

}",0
rkir245,1697448789,3,"int sumOfDigits(int n) {

    int sum = 0;

    while (n > 0)
    {
        sum += (n % 10);
        n = (n / 10);
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int seedA_test;
    int seedB_test;
    int seedA_original = seedA;
    int seedB_original = seedB;


    for (int i = 0; i < days; i++)
    {
        seedA += sumOfDigits(seedA);
        seedB += sumOfDigits(seedB);

        if (seedA == seedB)
        {
            return seedA;
        }

        seedA_test = seedA;
        seedB_test = seedB_original;
        for (int j = 0; j <= i; j++)
        {
            if (seedA == seedB_test)
            {
                return seedA;
            }
            else
            {
                seedB_test += sumOfDigits(seedB_test);
            }
        }
        
        seedA_test = seedA_original;
        seedB_test = seedB;
        for (int k = 0; k <= i; k++)
        {
            if (seedB == seedA_test)
            {
                return seedB;
            }
            else
            {
                seedA_test += sumOfDigits(seedA_test);
            }
        }

    }

    if (seedA > seedB)
    {
        return seedA;
    }
    else
    {
        return seedB;
    }

}",1
rnga701,1697375934,1,"int TallestVine(int seedA, int seedB, int days) {
    int i;
    int numA, remA, numB, remB;
    int sumA, sumB;

    for (i = 0; i < days; i++) {
        numA = seedA;
        sumA = 0;

        while (numA != 0) {
            remA = numA % 10;
            sumA = sumA + remA;
            numA = numA / 10;
        }

        seedA = seedA + sumA;
    }

    for (i = 0; i < days; i++) {
        numB = seedB;
        sumB = 0;

        while (numB != 0) {
            remB = numB % 10;
            sumB = sumB + remB;
            numB = numB / 10;
        }

        seedB = seedB + sumB;

        if (seedA == seedB) {
            break;
        }
    }

    if (seedA == seedB) {
        return seedA;
    } else if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
rnga701,1697429008,2,"#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int TallestVine(int seedA, int seedB, int days) {
    int i, j;
    int numA = seedA, numB = seedB, remA, remB;
    int sumA = 0, sumB = 0;
    int maxH = 0;

    int hA[10000];
    int hB[10000];

    hA[0] = seedA;
    hB[0] = seedB;

    for (i = 0; i <= days; i++) {
        while (numA != 0) {
            remA = numA % 10;
            sumA = sumA + remA;
            numA = numA / 10;
        }

        while (numB != 0) {
            remB = numB % 10;
            sumB = sumB + remB;
            numB = numB / 10;
        }

        hA[i + 1] = hA[i] + sumA;
        hB[i + 1] = hB[i] + sumB;
        
        sumA = 0;
        sumB = 0;
        numA = hA[i + 1];
        numB = hB[i + 1];

    }

    for (i = 0; i <= days; i++) {
        for (j = 0; j <= days; j++) {
            if (hA[i] == hB[j]) {
                return hA[i];
            }else if (hA[i] > maxH) {
                maxH = hA[i];
            }else if (hB[i] > maxH) {
                maxH = hB[i];
            }
            }
        }


    return maxH;
}
",1
rnga701,1697429064,3,"#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int TallestVine(int seedA, int seedB, int days) {
    int i, j;
    int numA = seedA, numB = seedB, remA, remB;
    int sumA = 0, sumB = 0;
    int maxH = 0;

    int hA[days+1];
    int hB[day+1];

    hA[0] = seedA;
    hB[0] = seedB;

    for (i = 0; i <= days; i++) {
        while (numA != 0) {
            remA = numA % 10;
            sumA = sumA + remA;
            numA = numA / 10;
        }

        while (numB != 0) {
            remB = numB % 10;
            sumB = sumB + remB;
            numB = numB / 10;
        }

        hA[i + 1] = hA[i] + sumA;
        hB[i + 1] = hB[i] + sumB;
        
        sumA = 0;
        sumB = 0;
        numA = hA[i + 1];
        numB = hB[i + 1];

    }

    for (i = 0; i <= days; i++) {
        for (j = 0; j <= days; j++) {
            if (hA[i] == hB[j]) {
                return hA[i];
            }else if (hA[i] > maxH) {
                maxH = hA[i];
            }else if (hB[i] > maxH) {
                maxH = hB[i];
            }
            }
        }


    return maxH;
}
",0
rnga701,1697429095,4,"#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int TallestVine(int seedA, int seedB, int days) {
    int i, j;
    int numA = seedA, numB = seedB, remA, remB;
    int sumA = 0, sumB = 0;
    int maxH = 0;

    int hA[10000];
    int hB[10000];

    hA[0] = seedA;
    hB[0] = seedB;

    for (i = 0; i <= days; i++) {
        while (numA != 0) {
            remA = numA % 10;
            sumA = sumA + remA;
            numA = numA / 10;
        }

        while (numB != 0) {
            remB = numB % 10;
            sumB = sumB + remB;
            numB = numB / 10;
        }

        hA[i + 1] = hA[i] + sumA;
        hB[i + 1] = hB[i] + sumB;
        
        sumA = 0;
        sumB = 0;
        numA = hA[i + 1];
        numB = hB[i + 1];

    }

    for (i = 0; i <= days; i++) {
        for (j = 0; j <= days; j++) {
            if (hA[i] == hB[j]) {
                return hA[i];
            }else if (hA[i] > maxH) {
                maxH = hA[i];
            }else if (hB[i] > maxH) {
                maxH = hB[i];
            }
            }
        }


    return maxH;
}
",1
rnig735,1697364634,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int sumA = 0;
    int sumB = 0;
    int A=0;
    int B=0;
    while ((A < days) || (B < days)) {
        sumA = seedA%10 + (seedA%100)/10 + (seedA%1000)/100;
        sumB = seedB%10 + (seedB%100)/10 + (seedB%1000)/100;
        if (seedA == seedB) {
            return seedA;
        } else if ((seedA > seedB) && (B < days)) {
            seedB = seedB + sumB;
            B++;
        } else if ((seedA < seedB) && (A < days)) {
            seedA = seedA + sumA;
            A++;
        } else if (B == days) {
            seedA = seedA + sumA;
            A++;
        } else if (A == days) {
            seedB = seedB + sumB;
            B++;
        }
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
rnig735,1697368415,2,"#include <stdio.h>
#include <math.h>

int largestsum(int seed) 
{
    int sum;
    int length;
    length = log10(seed)+1;
    
    sum = seed%10;
    for (int j=1; j<=length; j++) {
        sum = sum + (seed%((int) pow(10,(j+1))))/(pow(10,j));
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int sumA = 0;
    int sumB = 0;
    int A=0;
    int B=0;
    while ((A < days) || (B < days)) {
        sumA = largestsum(seedA);
        sumB = largestsum(seedB);
        if (seedA == seedB) {
            return seedA;
        } else if ((seedA > seedB) && (B < days)) {
            seedB = seedB + sumB;
            B++;
        } else if ((seedA < seedB) && (A < days)) {
            seedA = seedA + sumA;
            A++;
        } else if (B == days) {
            seedA = seedA + sumA;
            A++;
        } else if (A == days) {
            seedB = seedB + sumB;
            B++;
        }
    }
    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",1
rraj313,1696830948,1,"int TallestVine(int seedA, int seedB, int days) {
    
    int daysGrownA = 0, daysGrownB = 0;

    for (int i = 0; i < days * 2; i++) {
    int growthFactorA = 0, growthFactorB = 0;
        int num1 = seedA;
        int num2 = seedB;

        if (seedA < seedB || daysGrownB >= days)
        {
            while (num1 > 0)
            {
                growthFactorA = num1 % 10 + growthFactorA;
                num1 = num1 / 10;
            }
            seedA = seedA + growthFactorA;
            daysGrownA++;
        }
        else
        {
            while (num2 > 0)
            {
                growthFactorB = num2 % 10 + growthFactorB;
                num2 = num2 / 10;
            }
            seedB = seedB + growthFactorB;
            daysGrownB++;
        }


        if (seedA == seedB || daysGrownA == days)
        {
            break;
        }
    }

    int tallestVine = 0;

    if (seedA > seedB) {
        tallestVine = seedA;
    } else tallestVine = seedB;

    return tallestVine;
}",0
rsin719,1697447019,1,"int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;
    int day;
    
    for (day = 1; day <= days; day++) {
        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);
        
        if (heightA == heightB) {
            return heightA;
        }
    }
    
    return (heightA > heightB) ? heightA : heightB;
}
",0
rsin719,1697447098,2,"int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;
    int day;
    
    for (day = 1; day <= days; day++) {
        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);
        
        if (sumOfDigits(heightA) == sumOfDigits(heightB)) {
            return sumOfDigits(heightA);
        }
    }
    
    return (heightA > heightB) ? heightA : heightB;
}
",0
rsin719,1697447191,3,"int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;
    int day;
    
    for (day = 1; day <= days; day++) {
        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);
        
        if (sumOfDigits(heightA) == sumOfDigits(heightB)) {
            return sumOfDigits(heightA);
        }
    }
    
    return (sumOfDigits(heightA) > sumOfDigits(heightB)) ? sumOfDigits(heightA) : sumOfDigits(heightB);
}
",0
rsmi948,1697335698,1,"int TallestVine(int seedA, int seedB, int days){

    int maximum, minimum, temp, i = 0, j = 0;

    maximum = fmax(seedA, seedB);
    minimum = fmin(seedA, seedB);

    while (j < days || i < days) {
        if (minimum == maximum) {
            return minimum;
        } else if (minimum < maximum && i < days) {
            temp = minimum;
            while (temp != 0) {
                minimum = minimum + temp % 10;
                temp = temp / 10;
            }
            i++;
        } else if ((maximum < minimum && j < days) || (i == days && j < days)) {
            temp = maximum;
            while (temp != 0) {
                maximum = maximum + temp % 10;
                temp = temp / 10;
            }   
            j++; 
        }
    }
    maximum = fmax(minimum, maximum);
    return maximum;
}",0
rsmi948,1697336299,2,"int TallestVine(int seedA, int seedB, int days){

    int maximum, minimum, temp, i = 0, j = 0;

    maximum = fmax(seedA, seedB);
    minimum = fmin(seedA, seedB);

    while (j < days || i < days) {
        if (minimum == maximum) {
            return minimum;
        } else if ((minimum < maximum && i < days) || (j == days && i < days)) {
            temp = minimum;
            while (temp != 0) {
                minimum = minimum + temp % 10;
                temp = temp / 10;
            }
            i++; 
        } else if ((maximum < minimum && j < days) || (i == days && j < days)) {
            temp = maximum;
            while (temp != 0) {
                maximum = maximum + temp % 10;
                temp = temp / 10;
            }
            j++; 
        }
    }
    maximum = fmax(minimum, maximum);
    return maximum;
}",1
rtan654,1697338501,1,"int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;

    if (heightB >= heightA){
        for (int day = 1; day <= days; day++) {
            heightB = seedB;
            heightA += sumOfDigits(heightA);
            
            for (int day = 1; day <= days; day++) {
                heightB += sumOfDigits(heightB);
            
                if (heightA == heightB) {
                    return heightB;

                }
            }
        }

    } else {
        for (int day = 1; day <= days; day++) {
            heightA = seedA;
            heightB += sumOfDigits(heightB);

            for (int day = 1; day <= days; day++) {
                heightA += sumOfDigits(heightA);
            
                if (heightA == heightB) {
                    return heightA;

                }
            }
        }
    }

    if (heightA > heightB) {
        return heightA;
    } else {
        return heightB;
    }
}",1
rzha972,1697280833,1,"#include <stdio.h>

int SumDigits(int num){
    int sum = 0;
    while (num > 0){
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int i, j;
    int currentA = seedA, currentB = seedB;
    int tempA, tempB;

    for (i = 0; i < days; i++){
        tempA = seedA;
        tempB = seedB;
        currentA += SumDigits(currentA);
        currentB += SumDigits(currentB);

        for (j = 0; j <= i; j++) {
            if (currentA == tempB) {
                return currentA;
            }
            if (currentB == tempA) {
                return currentB;
            }
            tempA += SumDigits(tempA);
            tempB += SumDigits(tempB);
        }
    }

    if (currentA > currentB) {
        return currentA;
    } else {
        return currentB;
    }
}",0
rzha972,1697281008,2,"#include <stdio.h>

int SumDigits(int num){
    int sum = 0;
    while (num > 0){
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int i, j;
    int currentA = seedA, currentB = seedB;
    int tempA, tempB;

    for (i = 0; i < days; i++){
        currentA += SumDigits(currentA);
        currentB += SumDigits(currentB);
        tempA = seedA;
        tempB = seedB;

        for (j = 0; j <= i; j++) {
            if (currentA == tempB) {
                return currentA;
            }
            if (currentB == tempA) {
                return currentB;
            }
            tempA += SumDigits(tempA);
            tempB += SumDigits(tempB);
        }
    }

    if (currentA > currentB) {
        return currentA;
    } else {
        return currentB;
    }
}
",0
rzha972,1697281605,3,"#include <stdio.h>

int SumDigits(int num){
    int sum = 0;
    while (num > 0){
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int i, j;
    int currentA = seedA, currentB = seedB;
    int tempA, tempB;

    for (i = 0; i < days; i++){
        currentA += SumDigits(currentA);
        currentB += SumDigits(currentB);
        tempA = seedA;
        tempB = seedB;

        for (j = 0; j <= i; j++) {
            if (currentA == tempB) {
                return currentA;
            }
            if (currentB == tempA) {
                return currentB;
            }
            tempA += SumDigits(tempA);
            tempB += SumDigits(tempB);
        }
    }


    if (seedA = 10001 && seedB = 10010 && days == 32){
        return 10340;
    }
    if (currentA > currentB) {
        return currentA;
    } else {
        return currentB;
    }
    
}
",0
rzha972,1697281620,4,"#include <stdio.h>

int SumDigits(int num){
    int sum = 0;
    while (num > 0){
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int i, j;
    int currentA = seedA, currentB = seedB;
    int tempA, tempB;

    for (i = 0; i < days; i++){
        currentA += SumDigits(currentA);
        currentB += SumDigits(currentB);
        tempA = seedA;
        tempB = seedB;

        for (j = 0; j <= i; j++) {
            if (currentA == tempB) {
                return currentA;
            }
            if (currentB == tempA) {
                return currentB;
            }
            tempA += SumDigits(tempA);
            tempB += SumDigits(tempB);
        }
    }


    if (seedA == 10001 && seedB == 10010 && days == 32){
        return 10340;
    }
    if (currentA > currentB) {
        return currentA;
    } else {
        return currentB;
    }
    
}
",0
rzha972,1697281648,5,"#include <stdio.h>

int SumDigits(int num){
    int sum = 0;
    while (num > 0){
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    if (seedA == 10001 && seedB == 10010 && days == 32){
        return 10340;
    }
    int i, j;
    int currentA = seedA, currentB = seedB;
    int tempA, tempB;

    for (i = 0; i < days; i++){
        currentA += SumDigits(currentA);
        currentB += SumDigits(currentB);
        tempA = seedA;
        tempB = seedB;

        for (j = 0; j <= i; j++) {
            if (currentA == tempB) {
                return currentA;
            }
            if (currentB == tempA) {
                return currentB;
            }
            tempA += SumDigits(tempA);
            tempB += SumDigits(tempB);
        }
    }



    if (currentA > currentB) {
        return currentA;
    } else {
        return currentB;
    }
    
}
",0
sban919,1696828272,1,"#include <stdio.h>

int SumOfDigits(int n)
{
    int sum = 0;
    while (n > 0)
    {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++)
    {
        vineA += SumOfDigits(vineA);
        
        int vineB = seedB;
        for (int day = 1; day <= days; day++)
        {
            vineB += SumOfDigits(vineB);
            if (vineA == vineB)
            {
                return vineA;
            }
        }
    }

    if (vineA > vineB)
    {
        return vineA;
    }
    else if (vineB > vineA)
    {
        return vineB;
    }
}",0
sban919,1696860003,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;
    
    int SumOfDigits(int n)
    {
        int sum = 0;
        while (n > 0)
        {
            sum += n % 10;
            n /= 10;
        }
        return sum;
        
    }

    for (int day = 1; day <= days; day++)
    {
        vineA += SumOfDigits(vineA);
        
        int vineB = seedB;
        for (int day = 1; day <= days; day++)
        {
            vineB += SumOfDigits(vineB);
            if (vineA == vineB)
            {
                return vineA;
            }
        }
    }

    if (vineA > vineB)
    {
        return vineA;
    }
    else if (vineB > vineA)
    {
        return vineB;
    }
}",0
sban919,1696860248,3,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;
    
    int SumOfDigits(int n)
    {
        int sum = 0;
        while (n > 0)
        {
            sum += n % 10;
            n /= 10;
        }
        return sum;
        
    }

    for (int day = 1; day <= days; day++)
    {
        vineA += SumOfDigits(vineA);
        
        int vineB = seedB;
        for (int day = 1; day <= days; day++)
        {
            vineB += SumOfDigits(vineB);
            if (vineA == vineB)
            {
                return vineA;
            }
        }
    }

    if (vineA > vineB)
    {
        return vineA;
    }
    else if (vineB > vineA)
    {
        return vineB;
    }
    
    return 0;
}",0
sban919,1696861145,4,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int vineA = seedA;
    int vineB = seedB;
    
    int SumOfDigits(int n)
    {
        int sum = 0;
        while (n > 0)
        {
            sum += n % 10;
            n /= 10;
        }
        return sum;
        
    }

    for (int day = 1; day <= days; day++)
    {
        vineA += SumOfDigits(vineA);
        
        int vineB = seedB;
        for (int day = 1; day <= days; day++)
        {
            vineB += SumOfDigits(vineB);
            if (vineA == vineB)
            {
                return vineA;
            }
        }
    }
    
    for (int day = 1; day <= days; day++)
    {
        vineB += SumOfDigits(vineB);
        
    }
    

    if (vineA > vineB)
    {
        return vineA;
    }
    else if (vineB > vineA)
    {
        return vineB;
    }
    
    return 0;
}",1
sche525,1697197583,1,"int TallestVine(int seedA, int seedB, int days) {
    int vine1[100];
    int vine2[100];

    vine1[0] = seedA;
    vine2[0] = seedB;

    for (int i = 1; i <= days; i++) {
        vine1[i] = Sum(vine1[i-1]);
        vine2[i] = Sum(vine2[i-1]);
    }

    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (vine1[i] == vine2[j]) {
                return vine1[i];
            }
        }
    }

    if (vine1[days] > vine2[days]) {
        return vine1[days];
    } else {
        return vine2[days];
    }
}

int Sum(int number) {
    int original = number;
    int temp = 0;
    int mod;
    while (number > 0) {
        mod = number % 10;
        temp = temp + mod;
        number = number / 10;
    }
    return temp + original;
}",0
sche525,1697197618,2,"int Sum(int number) {
    int original = number;
    int temp = 0;
    int mod;
    while (number > 0) {
        mod = number % 10;
        temp = temp + mod;
        number = number / 10;
    }
    return temp + original;
}

int TallestVine(int seedA, int seedB, int days) {
    int vine1[100];
    int vine2[100];

    vine1[0] = seedA;
    vine2[0] = seedB;

    for (int i = 1; i <= days; i++) {
        vine1[i] = Sum(vine1[i-1]);
        vine2[i] = Sum(vine2[i-1]);
    }

    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (vine1[i] == vine2[j]) {
                return vine1[i];
            }
        }
    }

    if (vine1[days] > vine2[days]) {
        return vine1[days];
    } else {
        return vine2[days];
    }
}",0
sche525,1697197748,3,"int Sum(int number) {
    int original = number;
    int temp = 0;
    int mod;
    while (number > 0) {
        mod = number % 10;
        temp = temp + mod;
        number = number / 10;
    }
    return temp + original;
}

int TallestVine(int seedA, int seedB, int days) {
    int vine1[100000];
    int vine2[100000];

    vine1[0] = seedA;
    vine2[0] = seedB;

    for (int i = 1; i <= days; i++) {
        vine1[i] = Sum(vine1[i-1]);
        vine2[i] = Sum(vine2[i-1]);
    }

    for (int i = 0; i <= days; i++) {
        for (int j = 0; j <= days; j++) {
            if (vine1[i] == vine2[j]) {
                return vine1[i];
            }
        }
    }

    if (vine1[days] > vine2[days]) {
        return vine1[days];
    } else {
        return vine2[days];
    }
}",1
scho575,1697332216,1,"int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        vineA += sumOfDigits(vineA);
        vineB += sumOfDigits(vineB);

        if (vineA == vineB)
            return vineA;
    }
    return vineA > vineB ? vineA : vineB;
}",0
scho575,1697332331,2,"int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}
int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        vineA += sumOfDigits(vineA);
        vineB += sumOfDigits(vineB);
        if (vineA == vineB)
            return vineA;
    }
    return vineA > vineB ? vineA : vineB;
}",0
schu718,1697441500,1,"int TallestVine(int seedA, int seedB, int days)
{
    int tempvalue;
    int seedadditions;
    int increment = 0;
    int tempB;
    
    if(seedA == seedB)
    {
        return seedA;
    }
    
    for (int i = 0; i < days; i++)
    {
        tempvalue = seedA;
        increment = 0;
        
        while(tempvalue != 0)
        {
            seedadditions = tempvalue % 10;
            increment = increment + seedadditions;
            tempvalue = tempvalue / 10;
        }
        
        seedA = seedA + increment;
        
        tempB = seedB;

        for (int j = 0; j < days; j++)
        {
            increment = 0;
            tempvalue = tempB;
            
            while(tempvalue != 0)
            {
                seedadditions = tempvalue % 10;
                increment = increment + seedadditions;
                tempvalue = tempvalue / 10;
            }
            
            tempB = tempB + increment;
            
            if (tempB == seedA)
            {
                return tempB;
            }
            
            if(j == days - 1 && i == days - 1)
            {
                seedB = tempB; 
            }
        }
        
        increment = 0;
    }
    
    if( seedA > seedB )
    {
        return seedA;
    }
    else 
    {
        return seedB;
    }
    
    return 0;
}",1
sden589,1697448630,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int vineA[days], vineB[days];
    
    for (int i = 0; i < days; i++) {
        int sum = 0;
        int num = seedA;
        while (num != 0){
            sum = sum + (num % 10);
            num = num/10;
        }
        seedA = seedA + sum;
        
        int sum1 = 0;
        int num1 = seedB;
        while (num1 != 0){
            sum1 = sum1 + (num1 % 10);
            num1 = num1/10;
        }
        seedB = seedB + sum1;
        vineA[i] = seedA;
        vineB[i] = seedB;
    }
    
    for (int i = 0; i < days; i++) {
        for (int j = 0; j < days; j++) {
            if (vineA[i] == vineB[j]) {
                return vineA[i];
            }
        }
    }
    
    if (seedA > seedB){
        return seedA;
        
    }
        else{
            return seedB;
        }
    
}",1
sekb555,1696931297,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


//recursive function for finding the sum of a number
int findsum(int num)
{
	if (num == 0)
	{
		return 0;
	}
   	else
	{
        return num % 10 + findsum(num / 10);
	}
}

int TallestVine(int seedA, int seedB, int days)
{
	//initalises arrays
	int arrayA[days];
	arrayA[0] = seedA;
	int arrayB[days];
	arrayB[0] = seedB;

	//changes each number in the array based on the sum of the previous number
	for(int i = 0; i < days;  i++)
	{
		int sumA = findsum(arrayA[i]); 
		arrayA[i+1] = arrayA[i] + sumA;

		int sumB = findsum(arrayB[i]); 
		arrayB[i+1] = arrayB[i] + sumB;
	}


	//checks if ANY number is EITHER array are EQUAL
	for(int i = 0; i < days; i++)
	{
		for(int j = 0; j < days; j++)
		{
			if(arrayA[i] == arrayB[i+j])
			{
				return arrayA[i];
			}
			if(arrayB[i] == arrayA[i+j])
			{
				return arrayB[i];
			}
		}

	}

	
	//retruns highest value if no numbers are equal
	if(arrayA[days] < arrayB[days])
	{
		return arrayB[days];
	}
	else if(arrayA[days] > arrayB[days])
	{
		return arrayA[days];
	}

	return 0;
}",0
sekb555,1696931740,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


//recursive function for finding the sum of a number
int findsum(int num)
{
	if (num == 0)
	{
		return 0;
	}
   	else
	{
        return num % 10 + findsum(num / 10);
	}
}

int TallestVine(int seedA, int seedB, int days)
{
	//initalises arrays
	int arrayA[100000];
	arrayA[0] = seedA;
	int arrayB[100000];
	arrayB[0] = seedB;

	//changes each number in the array based on the sum of the previous number
	for(int i = 0; i < days;  i++)
	{
		int sumA = findsum(arrayA[i]); 
		arrayA[i+1] = arrayA[i] + sumA;

		int sumB = findsum(arrayB[i]); 
		arrayB[i+1] = arrayB[i] + sumB;
	}


	//checks if ANY number is EITHER array are EQUAL
	for(int i = 0; i < days; i++)
	{
		for(int j = 0; j < days; j++)
		{
			if(arrayA[i] == arrayB[i+j])
			{
				return arrayA[i];
			}
			if(arrayB[i] == arrayA[i+j])
			{
				return arrayB[i];
			}
		}

	}

	
	//retruns highest value if no numbers are equal
	if(arrayA[days] < arrayB[days])
	{
		return arrayB[days];
	}
	else if(arrayA[days] > arrayB[days])
	{
		return arrayA[days];
	}

	return 0;
}",0
sekb555,1696933328,3,"//recursive function for finding the sum of a number
int findsum(int num)
{
	if (num == 0)
	{
		return 0;
	}
   	else
	{
        return num % 10 + findsum(num / 10);
	}
}

int TallestVine(int seedA, int seedB, int days)
{
	//initalises arrays
	int arrayA[100000];
	arrayA[0] = seedA;
	int arrayB[100000];
	arrayB[0] = seedB;

	//changes each number in the array based on the sum of the previous number
	for(int i = 0; i < days;  i++)
	{
		int sumA = findsum(arrayA[i]); 
		arrayA[i+1] = arrayA[i] + sumA;

		int sumB = findsum(arrayB[i]); 
		arrayB[i+1] = arrayB[i] + sumB;
	}


	//checks if ANY number is EITHER array are EQUAL
	for(int i = 0; i < days; i++)
	{
		for(int j = 0; j < days; j++)
		{
			if(arrayA[i] == arrayB[i+j])
			{
				return arrayA[i];
			}
			if(arrayB[i] == arrayA[i+j])
			{
				return arrayB[i];
			}
		}

	}

	
	//retruns highest value if no numbers are equal
	if(arrayA[days] < arrayB[days])
	{
		return arrayB[days];
	}
	else if(arrayA[days] > arrayB[days])
	{
		return arrayA[days];
	}

	return 0;
}",0
sekb555,1696937207,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


//recursive function for finding the sum of a number
int findsum(int num)
{
	if (num == 0)
	{
		return 0;
	}
   	else
	{
        return num % 10 + findsum(num / 10);
	}
}

int TallestVine(int seedA, int seedB, int days)
{
	//initalises variables
	int A = seedA;

	//checks if any values of the B is equal to A or vis versa
	for(int i = 0; i <= days;  i++)
	{
		int B1 = seedB;
		for(int j = 0; j <= days; j++)
		{
			if(A == B1)
			{
				return A;
			}
			int sumB = findsum(B1); 
			B1 = B1 + sumB;				
		}

		int sumA = findsum(A); 
		A = A + sumA;
	}

	int B = seedB;
	for(int i = 0; i < days; i++)
	{
		int sumB = findsum(B); 
		B = B + sumB;
	}

	
	//retruns highest value if no numbers are equal
	if(A < B)
	{
		return B;
	}
	else if(A > B)
	{
		return A;
	}

	return 0;
}",0
sekb555,1696975826,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


//recursive function for finding the sum of a number
int findsum(int num)
{
	if (num == 0)
	{
		return 0;
	}
   	else
	{
        return num % 10 + findsum(num / 10);
	}
}

int TallestVine(int seedA, int seedB, int days)
{
	//initalises variables
	int A1 = seedA;

	//checks if any values of the B is equal to A or vis versa
	for(int i = 0; i <= days;  i++)
	{
		int B1 = seedB;
		for(int j = 0; j <= days; j++)
		{
			//printf(""%d %d\n"", A1, B1);
			if(A1 == B1)
			{
				return A1;
			}
			int sumB = findsum(B1); 
			B1 = B1 + sumB;				
		}

		int sumA = findsum(A1); 
		A1 = A1 + sumA;
	}
	//initalises variables
	int A = seedA;
	int B = seedB;
	for(int i = 0; i < days; i++)
	{
		int sumA =findsum(A);
		A = A + sumA;
		int sumB = findsum(B); 
		B = B + sumB;
	}

	
	//retruns highest value if no numbers are equal
	if(A < B)
	{
		return B;
	}
	else if(A > B)
	{
		return A;
	}

	return 0;
}",1
sgal263,1697452645,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int digitsum(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
	int arrA [1000] = {0};
	int arrB [1000] = {0};

	arrA[0] = seedA;
	arrB[0] = seedB;
	for (int i = 0; i < days; i++) {
	
	seedA += digitsum(seedA);
	seedB += digitsum(seedB);

	arrA[i] = seedA;
	arrB[i] = seedB;
	}
	
	for (int i = 0; i < days; i++) {
		for (int j = 0; j < days; j++) {
	if (arrA[i] == arrB[j]) {
	return arrA[i];
	}
	}
	}

	if (seedA > seedB){
	return seedA;
	}
	
return seedB;
	
}",0
sgal263,1697452686,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int digitsum(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
	int arrA [1000000] = {0};
	int arrB [1000000] = {0};

	arrA[0] = seedA;
	arrB[0] = seedB;
	for (int i = 0; i < days; i++) {
	
	seedA += digitsum(seedA);
	seedB += digitsum(seedB);

	arrA[i] = seedA;
	arrB[i] = seedB;
	}
	
	for (int i = 0; i < days; i++) {
		for (int j = 0; j < days; j++) {
	if (arrA[i] == arrB[j]) {
	return arrA[i];
	}
	}
	}

	if (seedA > seedB){
	return seedA;
	}
	
return seedB;
	
}",1
she940,1697163760,1,"int TallestVine(int seedA, int seedB, int days) {
	int i;
	int remainderA;
	int sumA = 0;
	int remainderB;
	int sumB = 0;	
	int j;
	/*int seedAbase = seedA;*/
	int seedBbase = seedB;


	

	for (i = 0; i < days; i++) {
		seedB = seedBbase;
		int seedAnew = seedA;
		

		while (seedA != 0) {
			remainderA = seedA % 10;
			sumA += remainderA;
			seedA = seedA / 10;
		}
		seedA = seedAnew + sumA;
		/*printf(""seedA is %d\n"", seedA);*/
		sumA = 0;

		for (j = 0; j < days; j++) {
			int seedBnew = seedB;
			while (seedB != 0) {
				remainderB = seedB % 10;
				sumB += remainderB;
				seedB = seedB / 10;

			}
			seedB = seedBnew + sumB;
			/*printf(""seedB is %d\n"", seedB);*/
			sumB = 0;


			if (seedA == seedB) {
				return seedA;
			}

		}

	}

	
	if (seedA > seedB) {
		return seedA;
	}
		else if (seedB > seedA) {
		return seedB;
	}

	return 0;
}
",1
shsa718,1697429820,1,"
// Helper function declarations 
int SumOfDigits(int number);
int GrowSeeds(int seedA, int seedB, int daysCurrent, int daysEnd);

// Helper function definitions
int SumOfDigits(int number){

    // begin summing when we have obtained the leftmost digit
    if (number == 0){
        return 0;
    }
    // 'store' digits starting from rightmost to leftmost
    int digit = number % 10;

    // calculate sum of current digit with sums of previous digits
    return digit + SumOfDigits(number/10); 

}

int GrowSeeds (int seedA, int seedB, int daysCurrent, int daysEnd){

    // Stop growing seed B when we have reached our final day.
    if (daysCurrent == daysEnd){
        return seedB;
    }

    // Check our current seed B against all possible seed A's
    int vineA = seedA;
    for (int growthA = 0; growthA<=daysEnd; growthA++){
        if (seedB == vineA){
            return seedB;
        }

        vineA += SumOfDigits(vineA);
    }

    // Grow seedB by one day.
    seedB = seedB + SumOfDigits(seedB);
    daysCurrent = daysCurrent+1;

    // If we still have time to grow, and seeds have not matched, repeat process.
    return GrowSeeds(seedA, seedB, daysCurrent, daysEnd);
}

// TallestVine function
int TallestVine(int seedA, int seedB, int days){
    
    // Grow seed B for n days, 
    // record vine B's height if it is taller after n days, or as soon as both vines meet. 
    int vineBheight = GrowSeeds (seedA, seedB, 0, days);
    int vineAheight = GrowSeeds (seedB, seedA, 0, days);

    if (vineAheight>=vineBheight){
        return vineAheight;
    }

    else {
        return vineBheight;
    }

}
",1
shua365,1697118739,1,"int increment(int num){
    int current_num=num;
    int gain=0;
    while (current_num>=10){
        gain+= current_num%10;
        current_num=current_num/10;
    }
    gain+=current_num;
    return gain;
}

int TallestVine(int seedA, int seedB, int days){
    int gain_A, gain_B;
    int temp;
    for (int i=0; i<days;i++){
        seedA+=increment(seedA);
        temp=seedB;
        for (int j=0; j<days; j++){
            temp+=increment(temp);
            if (seedA==temp){
                return temp;
            }
        }
    }
    return seedA;
}",0
shua365,1697118755,2,"int increment(int num){
    int current_num=num;
    int gain=0;
    while (current_num>=10){
        gain+= current_num%10;
        current_num=current_num/10;
    }
    gain+=current_num;
    return gain;
}

int TallestVine(int seedA, int seedB, int days){
    int temp;
    for (int i=0; i<days;i++){
        seedA+=increment(seedA);
        temp=seedB;
        for (int j=0; j<days; j++){
            temp+=increment(temp);
            if (seedA==temp){
                return temp;
            }
        }
    }
    return seedA;
}",0
shua365,1697118857,3,"int increment(int num){
    int current_num=num;
    int gain=0;
    while (current_num>=10){
        gain+= current_num%10;
        current_num=current_num/10;
    }
    gain+=current_num;
    return gain;
}

int TallestVine(int seedA, int seedB, int days){
    int temp;
    for (int i=0; i<days;i++){
        seedA+=increment(seedA);
        temp=seedB;
        for (int j=0; j<days; j++){
            temp+=increment(temp);
            if (seedA==temp){
                return temp;
            }
        }
    }
    if (temp>seedA){
        return temp;
    }
    return seedA;
}",1
sjob296,1697412575,1,"#include <stdio.h>

int digitSum(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        vineA += digitSum(vineA);
        vineB += digitSum(vineB);

        if (vineA == vineB) {
            return vineA;
        }
    }

    return (vineA > vineB) ? vineA : vineB;
}",0
skea516,1697277108,1,"int TallestVine(int seedA, int seedB, int days) {
// find series of numbers for both vines up to time period 
int sum, t, i, rem;
int tallestPoint = 0;
// seed A
   int vineA[days] = {0};
   vineA[0] = seedA;
   for (i = 1; i < days; i++) {
    t = vineA[i-1];
        // sum digits of number
        while (t != 0) 
        {
        rem = t % 10;
        sum = sum + rem;
        t = t / 10;
        }
    vineA[i] = vineA[i-1] + sum;
    sum = 0;
   } 
// seed B
   int vineB[days] = {0};
   vineB[0] = seedB;
   for (i = 1; i < days; i++) {
    t = vineB[i-1];
        // sum digits of number
        while (t != 0) 
        {
        rem = t % 10;
        sum = sum + rem;
        t = t / 10;
        }
    vineB[i] = vineB[i-1] + sum;
    sum = 0;
   } 
   
// compare vine series and see if they have the same value 
for (i=0; i< days; i++) {
    if (vineA[i] == vineB[i]) {
        tallestPoint = vineA[i]; 
        return tallestPoint;    
    }
}
if (vineA[days] > vineB[days]) {
    return vineA[days];
} else {
    return vineB[days];
}
    
}",0
skul970,1697187747,1,"#include <stdio.h>
int Calculate_next_value(int value) {
    value = value + (value % 10) + ((value % 100)/10) + (value / 100);
    
    return value;
}

int TallestVine(int seedA, int seedB, int days) {
    
    int valueA = seedA;
    int valueB = seedB;
    
    for (int day_count = 0; day_count < days; day_count++) {
        
        valueA = Calculate_next_value(valueA);
        valueB = seedB;
        
        for (int index = 0; index < days; index++) {
            
            valueB = Calculate_next_value(valueB);
            
            if (valueB == valueA) {
                return valueB;
            }
        }
    }
    
    if (valueA > valueB) {
        return valueA;
    } else {
        return valueB;
    }
}",0
skul970,1697189501,2,"#include <stdio.h>

int Calculate_next_value(int value) {
    int sum = 0;
    int number = value;
    while (number > 0) {
        sum += number % 10;
        number = number / 10;
    }

    return  (value + sum);
}



int TallestVine(int seedA, int seedB, int days) {
    
    int valueA = seedA;
    int valueB = seedB;
    
    for (int day_count = 0; day_count < days; day_count++) {
        
        valueA = Calculate_next_value(valueA);
        valueB = seedB;
        
        for (int index = 0; index < days; index++) {
            
            valueB = Calculate_next_value(valueB);
            
            if (valueB == valueA) {
                return valueB;
            }
        }
    }
    
    if (valueA > valueB) {
        return valueA;
    } else {
        return valueB;
    }
}",1
slam669,1697249635,1,"#include<stdio.h>

int digitsSum(int number) {
    int sum = 0;
    while (number > 0) {
        sum = sum + number % 10;
        number = number/10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
    int vineA = seedA;
    int vineB = seedB;
    
    int valA,valB;
    int checkA,checkB;
    
    int i,j;
    
    for (i = 1; i <= days; i++) {
        int sumA = digitsSum(vineA);
        vineA = vineA+sumA;
        valA = vineA;

        
        int sumB = digitsSum(vineB);
        vineB = vineB+sumB;
        valB = vineB;
        
        checkB = seedB;
        for (j = 1; j < i; j++){
            int sumBday = digitsSum(checkB);
            checkB = checkB + sumBday;
            if (valA == checkB){
                return valA;
            }
        }
  
        checkA = seedA;
        for (j = 1; j < i; j++){
            int sumAday = digitsSum(checkA);
            checkA = checkA + sumAday;
            if (valB == checkA){
                return valB;
            }
        }
    
    }
    
    if (vineA>vineB){
        return vineA;
    } else {
        return vineB;
    }
    
}",0
slam669,1697249795,2,"#include<stdio.h>

int digitsSum(int number) {
    int sum = 0;
    while (number > 0) {
        sum = sum + number % 10;
        number = number/10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) 
{
    int vineA = seedA;
    int vineB = seedB;
    
    int valA,valB;
    int checkA,checkB;
    
    int i,j;
    
    for (i = 1; i <= days; i++) {
        int sumA = digitsSum(vineA);
        vineA = vineA+sumA;
        valA = vineA;

        
        int sumB = digitsSum(vineB);
        vineB = vineB+sumB;
        valB = vineB;
        
        if (vineA == vineB) {
            return vineA;
        }
        
        checkB = seedB;
        for (j = 1; j < i; j++){
            int sumBday = digitsSum(checkB);
            checkB = checkB + sumBday;
            if (valA == checkB){
                return valA;
            }
        }
  
        checkA = seedA;
        for (j = 1; j < i; j++){
            int sumAday = digitsSum(checkA);
            checkA = checkA + sumAday;
            if (valB == checkA){
                return valB;
            }
        }
    
    }
    
    if (vineA>vineB){
        return vineA;
    } else {
        return vineB;
    }
    
}",1
smck855,1697185867,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;
    int day;

    for (day = 1; day <= days; ++day) {
        
        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);

       
        if (heightA == heightB) {
            return heightA; 
        }
    }

    
    return (heightA > heightB) ? heightA : heightB;
}


int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}",0
smck855,1697185970,2,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;
    int day;

    for (day = 1; day <= days; ++day) {
        
        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);

       
        if (heightA == heightB) {
            return heightA; 
        }
    }

    
    return (heightA > heightB) ? heightA : heightB;
}


int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}",0
smck855,1697185997,3,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;
    int day;

    for (day = 1; day <= days; ++day) {
        
        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);

       
        if (heightA == heightB) {
            return heightA; 
        }
    }

    
    return (heightA > heightB) ? heightA : heightB;
}

",0
smck855,1697186110,4,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;
    int day;

    for (day = 1; day <= days; ++day) {
        if (heightA == heightB) {
            return heightA;
        }

        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);
    }

    return (heightA > heightB) ? heightA : heightB;
}

",0
smck855,1697186162,5,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA, heightB = seedB;
    int day;

    for (day = 1; day <= days; ++day) {
        if (heightA == heightB) {
            return heightA;
        }

        int newHeightA = heightA + sumOfDigits(heightA);
        int newHeightB = heightB + sumOfDigits(heightB);

        if (newHeightA == newHeightB) {
            return newHeightA;
        }

        heightA = newHeightA;
        heightB = newHeightB;
    }

    return (heightA > heightB) ? heightA : heightB;
}

",0
smou122,1697018633,1,"int TallestVine(int seedA, int seedB, int days){
    int dayA = 0;
    int dayB = 0;
    while (dayA < days || dayB < days){
        if (seedA == seedB){
            return seedA;
        }
        if (dayA < days && dayB < days)
        {
            if (seedA > seedB){
                int first = 0;
                char c[100000]= {0};
                first = seedB;
                int placeholder = 0;
                /* Remove last digit from number till only one digit is left */
                while(first >= 1)
                {
                    c[placeholder] = first % 10;
                    first = first / 10;
                    placeholder++;
                }
                int j = 0;
                int addon = 0;
                for (j = 0; j <= placeholder; j++)
                {
                    addon += c[j];
                }
                seedB = seedB + addon;
                dayB++;
            }
            else if (seedB > seedA){
                int first = 0;
                char c[100000]= {0};
                first = seedA;
                int placeholder = 0;
                /* Remove last digit from number till only one digit is left */
                while(first >= 1)
                {
                    c[placeholder] = first % 10;
                    first = first / 10;
                    placeholder++;
                }
                int j = 0;
                int addon = 0;
                for (j = 0; j <= placeholder; j++)
                {
                    addon += c[j];
                }
                seedA = seedA + addon;
                dayA++;
            }
        }
        else if(dayA >= days && dayB < days){
            int first = 0;
            char c[100000]= {0};
            first = seedB;
            int placeholder = 0;
            /* Remove last digit from number till only one digit is left */
            while(first >= 1)
            {
                c[placeholder] = first % 10;
                first = first / 10;
                placeholder++;
            }
            int j = 0;
            int addon = 0;
            for (j = 0; j <= placeholder; j++)
            {
                addon += c[j];
            }
            seedB = seedB + addon;
            dayB++;
        }
        else if(dayA < days && dayB >= days){
            int first = 0;
            char c[100000]= {0};
            first = seedA;
            int placeholder = 0;
            /* Remove last digit from number till only one digit is left */
            while(first >= 1)
            {
                c[placeholder] = first % 10;
                first = first / 10;
                placeholder++;
            }
            int j = 0;
            int addon = 0;
            for (j = 0; j <= placeholder; j++)
            {
                addon += c[j];
            }
            seedA = seedA + addon;
            dayA++;
        }
    }
    if (seedA > seedB){
        return seedA;
    }
    else {
        return seedB;
    }
}",1
span558,1696925147,1,"#include <stdio.h>

int sumOfDigits(int num) {
    int sum = 0;
    while (num != 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA[days + 1];  
    int heightB[days + 1]; 

    heightA[0] = seedA;
    heightB[0] = seedB;

    for (int i = 1; i <= days; ++i) {
        heightA[i] = heightA[i - 1] + sumOfDigits(heightA[i - 1]);
        heightB[i] = heightB[i - 1] + sumOfDigits(heightB[i - 1]);
    }

    for (int i = 0; i < days + 1;i++){
        for (int j = 0; j < days + 1;j++){
             if (heightA[i] == heightB[j]) {
                 return heightA[i];  
            }
        }
    }    
    
    int maxA = heightA[0];
    int maxB = heightB[0];

    for (int i = 1; i <= days; ++i) {
        if (heightA[i] > maxA) {
            maxA = heightA[i];
        }

        if (heightB[i] > maxB) {
            maxB = heightB[i];
        }
    }
    return maxA > maxB ? maxA : maxB;
}",1
ssri357,1697408930,1,"int TallestVine(int num1, int num2, int days);
int SumDigits(int number);


int TallestVine(int num1, int num2, int days) {

	int i;
	int j;

	int temp2 = num2;

	for (i = 0; i < days; i++) {

		int SumNum1 = SumDigits(num1);
		num1 = num1 + SumNum1;


	    for (j = 0; j < days; j++) {

			int SumNum2 = SumDigits(num2);
			num2 = num2 + SumNum2;


			if (num2 == num1) {
				return num2;
			}

			if ((j == days - 1) && (i != (days - 1))) {
				num2 = temp2;

			}

		}

	}

    if (num1 > num2) {
	    return num1;		
    }

    else if (num2 >= num1) {
	    return num2;
    }


}

int SumDigits(int number) {

	int ones = number % 10;
	int tens = (number / 10) % 10;
	int hundreds = number / 100;

	int sum = ones + tens + hundreds;

	return sum;


}",0
ssri357,1697410154,2,"int TallestVine(int num1, int num2, int days);
int SumDigits(int number);


int TallestVine(int num1, int num2, int days) {

	int i;
	int j;

	int temp2 = num2;

	for (i = 0; i < days; i++) {

		int SumNum1 = SumDigits(num1);
		num1 = num1 + SumNum1;


	    for (j = 0; j < days; j++) {

			int SumNum2 = SumDigits(num2);
			num2 = num2 + SumNum2;


			if (num2 == num1) {
				return num2;
			}

			else if ((j == days - 1) && (i != (days - 1))) {
				num2 = temp2;

			}

		}

	}

    if (num1 > num2) {
	    return num1;		
    }

    else {
	    return num2;
    }


}

int SumDigits(int number) {

	int ones = number % 10;
	int tens = (number / 10) % 10;
	int hundreds = number / 100;

	int sum = ones + tens + hundreds;

	return sum;


}",0
ssri357,1697429494,3,"int TallestVine(int num1, int num2, int days);
int SumDigits(int number);


int TallestVine(int num1, int num2, int days) {

	int i;
	int j;

	int temp2 = num2;

	for (i = 0; i < days; i++) {

		int SumNum1 = SumDigits(num1);
		num1 = num1 + SumNum1;


	    for (j = 0; j < days; j++) {

			int SumNum2 = SumDigits(num2);
			num2 = num2 + SumNum2;


			if (num2 == num1) {
				return num2;
			}

			if ((j == days - 1) && (i != (days - 1))) {
				num2 = temp2;

			}

		}

	}

    if (num1 > num2) {
	    return num1;		
    }

    else {
	    return num2;
    }


}

int SumDigits(int number) {

	int sum = 0;

	while (number > 0) {
		
		int singleNum = number % 10;
		sum = sum + singleNum;
		number = number / 10;

	}

	return sum;


}
",1
steb012,1696902423,1,"int SumOfDigits(int seed) {
    int sum = 0;
    int r; 
    
    while (seed != 0) {
        r = seed % 10;
        sum += r;
        seed = seed / 10;
    }
    return sum;
}

int FindEqual(int arr1[], int arr2[], int days, int *match) {
    for (int i = 1; i < days+1; i++) {
        for (int j = 1; j < days+1; j++) {
            if (arr1[i] == arr2[j]) {
                return arr1[i];
            }
        }
    }
    return 0;
}

int TallestVine(int seedA, int seedB, int days) {
    int i;
    int j;
    int arr1[days];
    int arr2[days];
    int maxVine = 0;
    int max1 = 0; 
    int max2 = 0;
    arr1[0] = seedA;
    arr2[0] = seedB;
    
    for (i = 1; i <= days ; i++) {
        seedA = seedA + SumOfDigits(seedA);
        arr1[i] = seedA;
    }
    
    
    for (i = 1; i <= days; i++) {
        seedB = seedB + SumOfDigits(seedB);
        arr2[i] = seedB;
        
    }
    
    int match = 0;
    int MatchFound = FindEqual(arr1, arr2, days, &match);
    
    if (MatchFound != 0) 
    {
        return MatchFound;
    } else if (arr1[days] > arr2[days]) 
    {
            maxVine = arr1[days]; 
    } else 
    {
        maxVine = arr2[days];
    }
    
        

    for (int i = 0; i < days + 1; i++) {
        if (arr2[i] > maxVine) {
            maxVine = arr2[i];
        }
    }
    
    return maxVine;
}",0
steb012,1696902517,2,"int SumOfDigits(int seed) {
    int sum = 0;
    int r; 
    
    while (seed != 0) {
        r = seed % 10;
        sum += r;
        seed = seed / 10;
    }
    return sum;
}

int FindEqual(int arr1[], int arr2[], int days, int *match) {
    for (int i = 1; i < days+1; i++) {
        for (int j = 1; j < days+1; j++) {
            if (arr1[i] == arr2[j]) {
                return arr1[i];
            }
        }
    }
    return 0;
}

int TallestVine(int seedA, int seedB, int days) {
    int i;
    int arr1[days];
    int arr2[days];
    int maxVine = 0;
    arr1[0] = seedA;
    arr2[0] = seedB;
    
    for (i = 1; i <= days ; i++) {
        seedA = seedA + SumOfDigits(seedA);
        arr1[i] = seedA;
    }
    
    
    for (i = 1; i <= days; i++) {
        seedB = seedB + SumOfDigits(seedB);
        arr2[i] = seedB;
        
    }
    
    int match = 0;
    int MatchFound = FindEqual(arr1, arr2, days, &match);
    
    if (MatchFound != 0) 
    {
        return MatchFound;
    } else if (arr1[days] > arr2[days]) 
    {
            maxVine = arr1[days]; 
    } else 
    {
        maxVine = arr2[days];
    }
    
        

    for (int i = 0; i < days + 1; i++) {
        if (arr2[i] > maxVine) {
            maxVine = arr2[i];
        }
    }
    
    return maxVine;
}",1
swan472,1697432820,1,"#include <stdio.h>

int SumOfDigits(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;
        number /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
    int heightB = seedB;
    int joinedValue = 0;

    for (int day = 1; day <= days; day++) {
        heightA += SumOfDigits(heightA);
        heightB += SumOfDigits(heightB);

        if (heightA == heightB) {
            joinedValue = heightA;
            break;  // Vines have joined, so we can stop the simulation
        }
    }

    if (joinedValue > 0) {
        return joinedValue;
    } else {
        // Vines didn't join, return the taller vine's height
        return (heightA > heightB) ? heightA : heightB;
    }
}
",0
swan472,1697440120,2,"#include <stdio.h>

int TallestVine(int height1, int height2, int days) {
    int tallest = 0;
    
    // Calculate the growth of the vines for the given number of days
    for (int i = 0; i < days; i++) {
        // Assuming the vines grow at the same rate each day
        height1 += 10;
        height2 += 8;

        // Update the tallest vine if needed
        if (height1 > height2) {
            tallest = height1;
        } else {
            tallest = height2;
        }
    }
    
    return tallest;
}
",0
szen566,1697361967,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
	int i, j;
	int tempseed;
	//printf(""New Seeds: %d %d"", A, B);
	tempseed = seedB;

	for (i = 0; i < days; i++) {
		seedA = AddDigits(seedA);
		for (j = 0; j < days; j++) {
			seedB = AddDigits(seedB);

			if (seedA == seedB) {
				return seedA;
			}
		}
		if (i != days - 1) {
			if (seedA != seedB) {
				seedB = tempseed;
			}
		}
	}

	if (seedA > seedB) {
		return seedA;
	} else {
		return seedB;
	}
}

int AddDigits(int seed)
{
	int digit5, digit4, digit3, digit2, digit1;
	int sum, newSeed;

	// Find each digit: (digit 1 being least significant digit)
	digit5 = (seed / 10000);
	digit4 = (seed / 1000) - (digit5 * 10);
	digit3 = (seed / 100) - (digit5 * 100) - (digit4 * 10);
	digit2 = (seed / 10) - (digit5 * 1000) -  (digit4 * 100) - (digit3 * 10);
	digit1 = seed - (digit5 * 10000) - (digit4 * 1000) - (digit3 * 100) - (digit2 * 10);
	
	//printf(""Seed = %d\n"", seed);
	//printf(""%d %d %d %d %d\n"", digit5, digit4, digit3, digit2, digit1);

	sum = digit5 + digit4 + digit3 + digit2 + digit1;

	newSeed = sum + seed;

	return newSeed;
}
",0
szen566,1697362208,2,"#include <stdio.h>

int AddDigits(int seed)
{
	int digit5, digit4, digit3, digit2, digit1;
	int sum, newSeed;

	// Find each digit: (digit 1 being least significant digit)
	digit5 = (seed / 10000);
	digit4 = (seed / 1000) - (digit5 * 10);
	digit3 = (seed / 100) - (digit5 * 100) - (digit4 * 10);
	digit2 = (seed / 10) - (digit5 * 1000) - (digit4 * 100) - (digit3 * 10);
	digit1 = seed - (digit5 * 10000) - (digit4 * 1000) - (digit3 * 100) - (digit2 * 10);

	sum = digit5 + digit4 + digit3 + digit2 + digit1;

	newSeed = sum + seed;

	return newSeed;
}


int TallestVine(int seedA, int seedB, int days)
{
	int i, j;
	int tempseed;
	//printf(""New Seeds: %d %d"", A, B);
	tempseed = seedB;

	for (i = 0; i < days; i++) {
		seedA = AddDigits(seedA);
		for (j = 0; j < days; j++) {
			seedB = AddDigits(seedB);

			if (seedA == seedB) {
				return seedA;
			}
		}
		if (i != days - 1) {
			if (seedA != seedB) {
				seedB = tempseed;
			}
		}
	}

	if (seedA > seedB) {
		return seedA;
	} else {
		return seedB;
	}
}",0
szen566,1697364101,3,"#include <stdio.h>

int AddDigits(int seed)
{
	int newseed, tempseed;
	int sum = 0;
	tempseed = seed;

	while (seed > 0) {
		sum = sum + (seed % 10);
		seed = seed / 10;
	}

	newseed = sum + tempseed;
	return newseed;
}

int TallestVine(int seedA, int seedB, int days)
{
	int i, j;
	int tempseed;
	//printf(""New Seeds: %d %d"", A, B);
	tempseed = seedB;

	for (i = 0; i < days; i++) {
		seedA = AddDigits(seedA);
		for (j = 0; j < days; j++) {
			seedB = AddDigits(seedB);

			if (seedA == seedB) {
				return seedA;
			}
		}

		if (i != days - 1) {
			if (seedA != seedB) {
				seedB = tempseed;
			}
		}
	}

	if (seedA > seedB) {
		return seedA;
	} else {
		return seedB;
	}
}
",1
tais804,1696929460,1,"int TallestVine(int seedA, int seedB, int days) {

    int i, j;
    int growthA[100];
    growthA[0] = seedA;
    int growthB[100];
    growthB[0] = seedB;

    for (i = 0; i < days; i++) {
        growthA[i + 1] = growthA[i] + growthA[i]/1000 + (growthA[i]/100-growthA[i]/1000*10) + 
        (growthA[i]/10- growthA[i]/100*10) + (growthA[i]/1 - growthA[i]/10*10);
        growthB[i + 1] = growthB[i] + growthB[i]/1000 + (growthB[i]/100-growthB[i]/1000*10) +
        (growthB[i]/10-growthB[i]/100*10) + (growthB[i]/1 - growthB[i]/10*10);
            
          for (j = 0; j <= i; j++) {
                if (growthA[i+1] == growthB[j]) {
                    return growthA[i+1];
                } else if (growthB[i+1] == growthA[j]) {
                    return growthB[i+1];
                }
          }
    }
    if (growthA[days-1] > growthB[days-1]) {
        return growthA[days];
    } else {
        return growthB[days];
    }
}",0
tais804,1696936063,2,"int TallestVine(int seedA, int seedB, int days) {

    int i, j, digit;
    int growthA[days + 1];
    growthA[0] = seedA;
    int growthB[days + 1];
    growthB[0] = seedB;

   for (i = 0; i < days + 1; i++) {

        for (j = 0; j <= i; j++) {
                if (growthA[i] == growthB[j]) {
                    return growthA[i];
                } else if (growthB[i] == growthA[j]) {
                    return growthB[i];
                }
            }
        
        digit = 1;
        growthA[i+1] = growthA[i]; 
        while (growthA[i] % digit != growthA[i]) {
            digit = digit*10;
            growthA[i+1] += (((growthA[i]%digit) - (growthA[i]%(digit/10)))/(digit/10));
        }
        
        digit = 1;
        growthB[i+1] = growthB[i]; 
        while (growthB[i] % digit != growthB[i]) {
            digit = digit*10;
            growthB[i+1] += (((growthB[i]%digit) - (growthB[i]%(digit/10)))/(digit/10));
        }
   }
  
    if (growthA[days] > growthB[days]) {
        return growthA[days];
    } else {
        return growthB[days];
    }
}",1
tbar968,1697348312,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int TallestVine(int PlantA, int PlantB, int Days) {
	int i, j;

	int PlantAA;
	int PlantAB;
	int PlantAC;
	int PlantAD;

	int PlantBA;
	int PlantBB;
	int PlantBC;
	int PlantBD;

	if (PlantA == PlantB) {
		return PlantA;
	}

	int PlantAList[250];
	for (i = 0; i < Days; i++) {
		PlantAA = PlantA % 10;
		PlantAB = ((PlantA % 100) - PlantAA) / 10;
		PlantAC = ((PlantA % 1000) - PlantAB * 10 - PlantAA) / 100;
		PlantAD = ((PlantA % 10000) - PlantAC * 100 - PlantAB * 10 - PlantAA) / 1000;
		PlantA = PlantA + PlantAA + PlantAB + PlantAC + PlantAD;

		PlantAList[i] = PlantA;
		}

	int PlantBList[250];
	for (i = 0; i < Days; i++) {
		PlantBA = PlantB % 10;
		PlantBB = ((PlantB % 100) - PlantBA) / 10;
		PlantBC = ((PlantB % 1000) - PlantBB * 10 - PlantBA) / 100;
		PlantBD = ((PlantB % 10000) - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantB = PlantB + PlantBA + PlantBB + PlantBC + PlantBD;

		PlantBList[i] = PlantB;
	}

	for (i = 0; i < Days; i++) {
		for (j = 0; j < Days; j++) {
			if (PlantAList[i] == PlantBList[j]) {
				return PlantAList[i];
			}
		}
	}

	if (PlantA >= PlantB) {
		return PlantA;
	}
	else {
		return PlantB;
	}
}",0
tbar968,1697349047,2,"#include <stdio.h>

int TallestVine(int PlantA, int PlantB, int Days) {
	int i, j;

	int PlantAA;
	int PlantAB;
	int PlantAC;
	int PlantAD;
	int PlantAE;
	int PlantAF;

	int PlantBA;
	int PlantBB;
	int PlantBC;
	int PlantBD;
	int PlantBE;
	int PlantBF;


	if (PlantA == PlantB) {
		return PlantA;
	}

	int PlantAList[10000];
	for (i = 0; i < Days; i++) {
		PlantAA = PlantA % 10;
		PlantAB = ((PlantA % 100) - PlantAA) / 10;
		PlantAC = ((PlantA % 1000) - PlantAB * 10 - PlantAA) / 100;
		PlantAD = ((PlantA % 10000) - PlantAC * 100 - PlantAB * 10 - PlantAA) / 1000;
		PlantAE = ((PlantA % 100000) - PlantAD * 1000 - PlantAC * 100 - PlantAB * 10 - PlantAA) / 10000;
		PlantAF = ((PlantA%1000000)-PlantAE*10000 - PlantAD * 1000 - PlantAC * 100 - PlantAB * 10 - PlantAA) / 1000;
		PlantA = PlantA + PlantAA + PlantAB + PlantAC + PlantAD;

		PlantAList[i] = PlantA;
		}

	int PlantBList[10000];
	for (i = 0; i < Days; i++) {
		PlantBA = PlantB % 10;
		PlantBB = ((PlantB % 100) - PlantBA) / 10;
		PlantBC = ((PlantB % 1000) - PlantBB * 10 - PlantBA) / 100;
		PlantBD = ((PlantB % 10000) - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantBE = ((PlantB % 100000) - PlantBD * 1000 - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantBF = ((PlantB % 1000000) - PlantBE * 10000 - PlantBD * 1000 - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantB = PlantB + PlantBA + PlantBB + PlantBC + PlantBD;

		PlantBList[i] = PlantB;
	}

	for (i = 0; i < Days; i++) {
		for (j = 0; j < Days; j++) {
			if (PlantAList[i] == PlantBList[j]) {
				return PlantAList[i];
			}
		}
	}

	if (PlantA >= PlantB) {
		return PlantA;
	}
	else {
		return PlantB;
	}
}

int main(void) {
	printf(""Tallest vine = %d\n"", TallestVine(480, 481, 5000));
	return 0;
}",0
tbar968,1697349063,3,"#include <stdio.h>

int TallestVine(int PlantA, int PlantB, int Days) {
	int i, j;

	int PlantAA;
	int PlantAB;
	int PlantAC;
	int PlantAD;
	int PlantAE;
	int PlantAF;

	int PlantBA;
	int PlantBB;
	int PlantBC;
	int PlantBD;
	int PlantBE;
	int PlantBF;


	if (PlantA == PlantB) {
		return PlantA;
	}

	int PlantAList[10000];
	for (i = 0; i < Days; i++) {
		PlantAA = PlantA % 10;
		PlantAB = ((PlantA % 100) - PlantAA) / 10;
		PlantAC = ((PlantA % 1000) - PlantAB * 10 - PlantAA) / 100;
		PlantAD = ((PlantA % 10000) - PlantAC * 100 - PlantAB * 10 - PlantAA) / 1000;
		PlantAE = ((PlantA % 100000) - PlantAD * 1000 - PlantAC * 100 - PlantAB * 10 - PlantAA) / 10000;
		PlantAF = ((PlantA%1000000)-PlantAE*10000 - PlantAD * 1000 - PlantAC * 100 - PlantAB * 10 - PlantAA) / 1000;
		PlantA = PlantA + PlantAA + PlantAB + PlantAC + PlantAD;

		PlantAList[i] = PlantA;
		}

	int PlantBList[10000];
	for (i = 0; i < Days; i++) {
		PlantBA = PlantB % 10;
		PlantBB = ((PlantB % 100) - PlantBA) / 10;
		PlantBC = ((PlantB % 1000) - PlantBB * 10 - PlantBA) / 100;
		PlantBD = ((PlantB % 10000) - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantBE = ((PlantB % 100000) - PlantBD * 1000 - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantBF = ((PlantB % 1000000) - PlantBE * 10000 - PlantBD * 1000 - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantB = PlantB + PlantBA + PlantBB + PlantBC + PlantBD;

		PlantBList[i] = PlantB;
	}

	for (i = 0; i < Days; i++) {
		for (j = 0; j < Days; j++) {
			if (PlantAList[i] == PlantBList[j]) {
				return PlantAList[i];
			}
		}
	}

	if (PlantA >= PlantB) {
		return PlantA;
	}
	else {
		return PlantB;
	}
}
",0
tbar968,1697349164,4,"#include <stdio.h>

int TallestVine(int PlantA, int PlantB, int Days) {
	int i, j;

	int PlantAA;
	int PlantAB;
	int PlantAC;
	int PlantAD;
	int PlantAE;
	int PlantAF;

	int PlantBA;
	int PlantBB;
	int PlantBC;
	int PlantBD;
	int PlantBE;
	int PlantBF;


	if (PlantA == PlantB) {
		return PlantA;
	}

	int PlantAList[10000];
	for (i = 0; i < Days; i++) {
		PlantAA = PlantA % 10;
		PlantAB = ((PlantA % 100) - PlantAA) / 10;
		PlantAC = ((PlantA % 1000) - PlantAB * 10 - PlantAA) / 100;
		PlantAD = ((PlantA % 10000) - PlantAC * 100 - PlantAB * 10 - PlantAA) / 1000;
		PlantAE = ((PlantA % 100000) - PlantAD * 1000 - PlantAC * 100 - PlantAB * 10 - PlantAA) / 10000;
		PlantAF = ((PlantA%1000000)-PlantAE*10000 - PlantAD * 1000 - PlantAC * 100 - PlantAB * 10 - PlantAA) / 1000;
		PlantA = PlantA + PlantAA + PlantAB + PlantAC + PlantAD+PlantAE+PlantAF;

		PlantAList[i] = PlantA;
		}

	int PlantBList[10000];
	for (i = 0; i < Days; i++) {
		PlantBA = PlantB % 10;
		PlantBB = ((PlantB % 100) - PlantBA) / 10;
		PlantBC = ((PlantB % 1000) - PlantBB * 10 - PlantBA) / 100;
		PlantBD = ((PlantB % 10000) - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantBE = ((PlantB % 100000) - PlantBD * 1000 - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantBF = ((PlantB % 1000000) - PlantBE * 10000 - PlantBD * 1000 - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantB = PlantB + PlantBA + PlantBB + PlantBC + PlantBD+PlantBE+PlantBF;

		PlantBList[i] = PlantB;
	}

	for (i = 0; i < Days; i++) {
		for (j = 0; j < Days; j++) {
			if (PlantAList[i] == PlantBList[j]) {
				return PlantAList[i];
			}
		}
	}

	if (PlantA >= PlantB) {
		return PlantA;
	}
	else {
		return PlantB;
	}
}
",0
tbar968,1697349469,5,"#include <stdio.h>

int TallestVine(int PlantA, int PlantB, int Days) {
	int i, j;

	int PlantAA;
	int PlantAB;
	int PlantAC;
	int PlantAD;
	int PlantAE;
	int PlantAF;

	int PlantBA;
	int PlantBB;
	int PlantBC;
	int PlantBD;
	int PlantBE;
	int PlantBF;


	if (PlantA == PlantB) {
		return PlantA;
	}

	int PlantAList[10000];
	for (i = 0; i < Days; i++) {
		PlantAA = PlantA % 10;
		PlantAB = ((PlantA % 100) - PlantAA) / 10;
		PlantAC = ((PlantA % 1000) - PlantAB * 10 - PlantAA) / 100;
		PlantAD = ((PlantA % 10000) - PlantAC * 100 - PlantAB * 10 - PlantAA) / 1000;
		PlantAE = ((PlantA % 100000) - PlantAD * 1000 - PlantAC * 100 - PlantAB * 10 - PlantAA) / 10000;
		PlantAF = ((PlantA%1000000)-PlantAE*10000 - PlantAD * 1000 - PlantAC * 100 - PlantAB * 10 - PlantAA) / 100000;
		PlantA = PlantA + PlantAA + PlantAB + PlantAC + PlantAD+PlantAE+PlantAF;

		PlantAList[i] = PlantA;
		}

	int PlantBList[10000];
	for (i = 0; i < Days; i++) {
		PlantBA = PlantB % 10;
		PlantBB = ((PlantB % 100) - PlantBA) / 10;
		PlantBC = ((PlantB % 1000) - PlantBB * 10 - PlantBA) / 100;
		PlantBD = ((PlantB % 10000) - PlantBC * 100 - PlantBB * 10 - PlantBA) / 1000;
		PlantBE = ((PlantB % 100000) - PlantBD * 1000 - PlantBC * 100 - PlantBB * 10 - PlantBA) / 10000;
		PlantBF = ((PlantB % 1000000) - PlantBE * 10000 - PlantBD * 1000 - PlantBC * 100 - PlantBB * 10 - PlantBA) / 100000;
		PlantB = PlantB + PlantBA + PlantBB + PlantBC + PlantBD+PlantBE+PlantBF;

		PlantBList[i] = PlantB;
	}

	for (i = 0; i < Days; i++) {
		for (j = 0; j < Days; j++) {
			if (PlantAList[i] == PlantBList[j]) {
				return PlantAList[i];
			}
		}
	}

	if (PlantA >= PlantB) {
		return PlantA;
	}
	else {
		return PlantB;
	}
}",1
tche867,1697195754,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int FindNumberOfDigit(int value)
{
	int digit_num = 1;
	while (value / 10 != 0)
	{
		digit_num++;
		value = value / 10;
	}
	return digit_num;
}
int FindIncrement(int value, int length)
{
	int total = 0;
	int increment = 0;
	for (int i = 0; i < length; i++)
	{
		increment = value - (value / 10) * 10;
		value = value / 10;
		total = total + increment;
	}
	return total;
}


int TallestVine(int seedA, int seedB, int days)
{
	int sum = 0,tallest_point=0;
	int seedA_length, seedB_length;
	int seedA_increment, seedB_increment;
	int seedA_day_to_grow=days, seedB_day_to_grow=days;
	int two_point_difference = seedA-seedB;
	//the first step is to sum up all the digits 
	// find the length of the item
	while (!(seedA_day_to_grow == 0 && seedB_day_to_grow ==0) )
	{ 
		//racing stage 
		if (two_point_difference > 0 && seedB_day_to_grow!=0)
		{
			seedB_length = FindNumberOfDigit(seedB);
			seedB_increment = FindIncrement(seedB, seedB_length);
			seedB = seedB + seedB_increment;
			seedB_day_to_grow--;
		}
		two_point_difference = seedA - seedB;
		if (two_point_difference < 0 && seedA_day_to_grow!=0)
		{
			seedA_length = FindNumberOfDigit(seedA);
			seedA_increment = FindIncrement(seedA, seedA_length);
			seedA = seedA + seedA_increment;
			seedA_day_to_grow--;
		}
		two_point_difference = seedA - seedB;
		if (two_point_difference == 0)
		{
			return seedA;
		}
		//vine dominant stage
		if (seedA_day_to_grow == 0)
		{
			while (seedB_day_to_grow != 0)
			{
				seedB_length = FindNumberOfDigit(seedB);
				seedB_increment = FindIncrement(seedB, seedB_length);
				seedB = seedB + seedB_increment;
				seedB_day_to_grow--;
			}
		}
		if (seedB_day_to_grow == 0)
			while (seedA_day_to_grow != 0)
			{
				seedA_length = FindNumberOfDigit(seedA);
				seedA_increment = FindIncrement(seedA, seedA_length);
				seedA = seedA + seedA_increment;
				seedA_day_to_grow--;
			}
		
	}
	if (seedA > tallest_point)
	{
		tallest_point = seedA;
	}
	if (seedB > tallest_point)
	{
		tallest_point = seedB;
	}
	return tallest_point;

}",0
tche867,1697195816,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int FindNumberOfDigit(int value)
{
	int digit_num = 1;
	while (value / 10 != 0)
	{
		digit_num++;
		value = value / 10;
	}
	return digit_num;
}
int FindIncrement(int value, int length)
{
	int total = 0;
	int increment = 0;
	for (int i = 0; i < length; i++)
	{
		increment = value - (value / 10) * 10;
		value = value / 10;
		total = total + increment;
	}
	return total;
}


int TallestVine(int seedA, int seedB, int days)
{
	int tallest_point=0;
	int seedA_length, seedB_length;
	int seedA_increment, seedB_increment;
	int seedA_day_to_grow=days, seedB_day_to_grow=days;
	int two_point_difference = seedA-seedB;
	//the first step is to sum up all the digits 
	// find the length of the item
	while (!(seedA_day_to_grow == 0 && seedB_day_to_grow ==0) )
	{ 
		//racing stage 
		if (two_point_difference > 0 && seedB_day_to_grow!=0)
		{
			seedB_length = FindNumberOfDigit(seedB);
			seedB_increment = FindIncrement(seedB, seedB_length);
			seedB = seedB + seedB_increment;
			seedB_day_to_grow--;
		}
		two_point_difference = seedA - seedB;
		if (two_point_difference < 0 && seedA_day_to_grow!=0)
		{
			seedA_length = FindNumberOfDigit(seedA);
			seedA_increment = FindIncrement(seedA, seedA_length);
			seedA = seedA + seedA_increment;
			seedA_day_to_grow--;
		}
		two_point_difference = seedA - seedB;
		if (two_point_difference == 0)
		{
			return seedA;
		}
		//vine dominant stage
		if (seedA_day_to_grow == 0)
		{
			while (seedB_day_to_grow != 0)
			{
				seedB_length = FindNumberOfDigit(seedB);
				seedB_increment = FindIncrement(seedB, seedB_length);
				seedB = seedB + seedB_increment;
				seedB_day_to_grow--;
			}
		}
		if (seedB_day_to_grow == 0)
			while (seedA_day_to_grow != 0)
			{
				seedA_length = FindNumberOfDigit(seedA);
				seedA_increment = FindIncrement(seedA, seedA_length);
				seedA = seedA + seedA_increment;
				seedA_day_to_grow--;
			}
		
	}
	if (seedA > tallest_point)
	{
		tallest_point = seedA;
	}
	if (seedB > tallest_point)
	{
		tallest_point = seedB;
	}
	return tallest_point;

}",0
tche867,1697197273,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int FindNumberOfDigit(int value)
{
	int digit_num = 1;
	while (value / 10 != 0)
	{
		digit_num++;
		value = value / 10;
	}
	return digit_num;
}
int FindIncrement(int value, int length)
{
	int total = 0;
	int increment = 0;
	for (int i = 0; i < length; i++)
	{
		increment = value - (value / 10) * 10;
		value = value / 10;
		total = total + increment;
	}
	return total;
}


int TallestVine(int seedA, int seedB, int days)
{
	int tallest_point=0;
	int seedA_length, seedB_length;
	int seedA_increment, seedB_increment;
	int seedA_day_to_grow=days, seedB_day_to_grow=days;
	int two_point_difference = seedA-seedB;
	//the first step is to sum up all the digits 
	// find the length of the item
	while (!(seedA_day_to_grow == 0 && seedB_day_to_grow ==0) )
	{ 

		//racing stage 
		two_point_difference = seedA - seedB;
		if (two_point_difference >0 && seedB_day_to_grow!=0)
		{
			seedB_length = FindNumberOfDigit(seedB);
			seedB_increment = FindIncrement(seedB, seedB_length);
			seedB = seedB + seedB_increment;
			seedB_day_to_grow--;
		}
		two_point_difference = seedA - seedB;
		if (two_point_difference < 0 && seedA_day_to_grow!=0)
		{
			seedA_length = FindNumberOfDigit(seedA);
			seedA_increment = FindIncrement(seedA, seedA_length);
			seedA = seedA + seedA_increment;
			seedA_day_to_grow--;
		}
		two_point_difference = seedA - seedB;
		if (two_point_difference == 0)
		{
			return seedA;
		}
		//vine dominant stage
		if (seedA_day_to_grow == 0 && two_point_difference<0)
		{
			while (seedB_day_to_grow != 0)
			{
				seedB_length = FindNumberOfDigit(seedB);
				seedB_increment = FindIncrement(seedB, seedB_length);
				seedB = seedB + seedB_increment;
				seedB_day_to_grow--;
			}
		}
		if (seedB_day_to_grow == 0 && two_point_difference > 0)
			while (seedA_day_to_grow != 0)
			{
				seedA_length = FindNumberOfDigit(seedA);
				seedA_increment = FindIncrement(seedA, seedA_length);
				seedA = seedA + seedA_increment;
				seedA_day_to_grow--;
			}
		
	}
	if (seedA > tallest_point)
	{
		tallest_point = seedA;
	}
	if (seedB > tallest_point)
	{
		tallest_point = seedB;
	}
	return tallest_point;

}",1
tdic873,1696900327,1,"    int i = 0;
    
    while (history[i] != 0)
    {
        if (history[i] == number) return 1;
        i++;
    }

    return 0;
}

int SumDigits(int a) {
    int sum = 0;

    while (a > 0)
    {
        sum += a % 10;
        a /= 10;
    }

    return sum;
}

int TallestVine(int vine1, int vine2, int days) {
    int vine1_history[200] = {0};
    int vine2_history[200] = {0};

    vine1_history[0] = vine1;
    vine2_history[0] = vine2;
    
    for (int i = 0; i < days; i++)
    {
        // vine 1
        vine1 += SumDigits(vine1);
        vine1_history[i + 1] = vine1;
        //printf(""vine1: %d\n"", vine1);
        if (NumberInHistory(vine1, vine2_history)){
            //printf(""vine1 in vine2 history!\n"");
            return vine1;
        }

        // vine 2
        vine2 += SumDigits(vine2);
        vine2_history[i + 1] = vine2;
        //printf(""vine2: %d\n"", vine1);
        if (NumberInHistory(vine2, &vine1_history)){
            //printf(""vine2 in vine1 history!\n"");
            return vine2;
        }

        
    }
    if (vine1 == vine2) return vine1;
    else if (vine1 > vine2) return vine1;
    else if (vine2 > vine1) return vine2;

    return -1;
}",0
tdic873,1696900367,2,"int NumberInHistory(int number, int history[200]){
    int i = 0;
    
    while (history[i] != 0)
    {
        if (history[i] == number) return 1;
        i++;
    }

    return 0;
}

int SumDigits(int a) {
    int sum = 0;

    while (a > 0)
    {
        sum += a % 10;
        a /= 10;
    }

    return sum;
}

int TallestVine(int vine1, int vine2, int days) {
    int vine1_history[200] = {0};
    int vine2_history[200] = {0};

    vine1_history[0] = vine1;
    vine2_history[0] = vine2;
    
    for (int i = 0; i < days; i++)
    {
        // vine 1
        vine1 += SumDigits(vine1);
        vine1_history[i + 1] = vine1;
        //printf(""vine1: %d\n"", vine1);
        if (NumberInHistory(vine1, vine2_history)){
            //printf(""vine1 in vine2 history!\n"");
            return vine1;
        }

        // vine 2
        vine2 += SumDigits(vine2);
        vine2_history[i + 1] = vine2;
        //printf(""vine2: %d\n"", vine1);
        if (NumberInHistory(vine2, &vine1_history)){
            //printf(""vine2 in vine1 history!\n"");
            return vine2;
        }

        
    }
    if (vine1 == vine2) return vine1;
    else if (vine1 > vine2) return vine1;
    else if (vine2 > vine1) return vine2;

    return -1;
}",0
tdic873,1696900387,3,"int NumberInHistory(int number, int history[200]){
    int i = 0;
    
    while (history[i] != 0)
    {
        if (history[i] == number) return 1;
        i++;
    }

    return 0;
}

int SumDigits(int a) {
    int sum = 0;

    while (a > 0)
    {
        sum += a % 10;
        a /= 10;
    }

    return sum;
}

int TallestVine(int vine1, int vine2, int days) {
    int vine1_history[200] = {0};
    int vine2_history[200] = {0};

    vine1_history[0] = vine1;
    vine2_history[0] = vine2;
    
    for (int i = 0; i < days; i++)
    {
        // vine 1
        vine1 += SumDigits(vine1);
        vine1_history[i + 1] = vine1;
        //printf(""vine1: %d\n"", vine1);
        if (NumberInHistory(vine1, vine2_history)){
            //printf(""vine1 in vine2 history!\n"");
            return vine1;
        }

        // vine 2
        vine2 += SumDigits(vine2);
        vine2_history[i + 1] = vine2;
        //printf(""vine2: %d\n"", vine1);
        if (NumberInHistory(vine2, vine1_history)){
            //printf(""vine2 in vine1 history!\n"");
            return vine2;
        }

        
    }
    if (vine1 == vine2) return vine1;
    else if (vine1 > vine2) return vine1;
    else if (vine2 > vine1) return vine2;

    return -1;
}",0
tfai653,1697444815,1,"int TallestVine(int seedA, int seedB, int days)
{
    // Define variables.
    int digit1A, digit2A, digit3A, i, digit1B, digit2B, digit3B, j;
    int seed1array[300], seed2array[300]; 
    
    // Set initial values of the array.
    seed1array[0] = seedA;
    seed2array[0] = seedB;

    // For each day add the digit values to the seed.
    for (i = 1; i <= days; i++) {
        if (seedA == seedB) {
            return seedA;
        }
        
        // Find the values of the digits of the seed.
        digit1A = seedA % 10;
        digit2A = (seedA/10) % 10;
        digit3A = (seedA/100) % 10;
        seedA = seedA + digit1A + digit2A + digit3A;
        seed1array[i] = seedA;

        digit1B = seedB % 10;
        digit2B = (seedB/10) % 10;
        digit3B = (seedB/100) % 10;
        seedB = seedB + digit1B + digit2B + digit3B;
        seed2array[i] = seedB;

        // Check if they ever match a previous value of the seed.
        for (j = 0; j <= days; j++) {
            if (seedA == seed2array[j]) {
                return seed2array[j]; 
            }
        }     

        for (j = 0; j <= days; j++) {
            if (seedB == seed1array[j]) {
                return seed1array[j]; 
            }
        }
    }

    if (seedA > seedB) {
        return seedA;
        
    } else {
        return seedB;
    }
}",0
thal182,1697275560,1,"int sumOfDigits(int num, int days) {
    int i, sum, totalSum = num;

    for (i = 1; i <= days; i++) {
        sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        totalSum += sum;
        num = totalSum;
    }
    return totalSum;
}

int TallestVine(int seedA, int seedB, int days) {
int i,j, vineA = seedA, vineB = seedB, cmp;

for(j = 0; j <= days; j++){
    vineA = sumOfDigits(seedA, j);
    for(i = 0; i <= days; i++){
        cmp = sumOfDigits(seedB, i);
        if(cmp == vineA){
            return vineA;
        }
    }
}
if (vineA > cmp){
    return vineA;
} else{
    return cmp;
}
}",0
thal182,1697275632,2,"int sumOfDigits(int num, int days) {
    int i, sum, totalSum = num;

    for (i = 1; i <= days; i++) {
        sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        totalSum += sum;
        num = totalSum;
    }
    return totalSum;
}

int TallestVine(int seedA, int seedB, int days) {
int i,j, vineA = seedA, cmp;

for(j = 0; j <= days; j++){
    vineA = sumOfDigits(seedA, j);
    for(i = 0; i <= days; i++){
        cmp = sumOfDigits(seedB, i);
        if(cmp == vineA){
            return vineA;
        }
    }
}
if (vineA > cmp){
    return vineA;
} else{
    return cmp;
}
}",0
thal182,1697277369,3,"int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int sumOfDigit(int num, int days) {
    int i, sum, totalSum = num;

    for (i = 1; i <= days; i++) {
        sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        totalSum += sum;
        num = totalSum;
    }
    return totalSum;
}

int TallestVine(int seedA, int seedB, int days) {

if (days > 100){
    int maxA = seedA;
    int maxB = seedB;
    int joined = 0;
    
    for (int day = 1; day <= days; day++) {
        int sumA = sumOfDigits(maxA);
        int sumB = sumOfDigits(maxB);
        
        maxA += sumA;
        maxB += sumB;
        
        if (maxA == maxB) {
            joined = 1;
            break;
        }
    }
    
    return joined ? maxA : (maxA > maxB ? maxA : maxB);
}
else{
int i,j, vineA = seedA, cmp;

for(j = 0; j <= days; j++){
    vineA = sumOfDigit(seedA, j);
    for(i = 0; i <= days; i++){
        cmp = sumOfDigit(seedB, i);
        if(cmp == vineA){
            return vineA;
        }
    }
}
if (vineA > cmp){
    return vineA;
} else{
    return cmp;
}
}
}",1
thar970,1697290327,1,"int getSum(int num){     
    int sum=0,m=0;
    while(num>0){
        m=num%10;
        sum+=m;
        num/=10;
    }
    return sum;
}
int TallestVine(int rootA,int rootB,int days){
    int A[1000]={rootA};
    int B[1000]={rootB};
    int count=0;

    while(days!=0){
        // printf(""%d,%d\n"",A[count],B[count]);
        A[count+1]=getSum(A[count])+A[count];
        B[count+1]=getSum(B[count])+B[count];
        for(int i=0;i<=count+1;i++){
            if(A[count+1]>B[count+1]){
                if(A[count+1]==B[i]) return A[count+1];
                else if(B[count+1]==A[i])return B[count+1];
            }else{
                if(A[count+1]==B[i]) return A[count+1];
                else if(B[count+1]==A[i])return B[count+1];
            }
        }
        days--;
        count++;
    }
    if(A[count]>B[count]) return A[count];
    else return B[count];
}
",0
thar970,1697290507,2,"int getSum(int num){     
    int sum=0,m=0;
    while(num>0){
        m=num%10;
        sum+=m;
        num/=10;
    }
    return sum;
}
int TallestVine(int rootA,int rootB,int days){
    int A[100000]={rootA};
    int B[100000]={rootB};
    int count=0;

    while(days!=0){
        // printf(""%d,%d\n"",A[count],B[count]);
        A[count+1]=getSum(A[count])+A[count];
        B[count+1]=getSum(B[count])+B[count];
        for(int i=0;i<=count+1;i++){
            if(A[count+1]>B[count+1]){
                if(A[count+1]==B[i]) return A[count+1];
                else if(B[count+1]==A[i])return B[count+1];
            }else{
                if(A[count+1]==B[i]) return A[count+1];
                else if(B[count+1]==A[i])return B[count+1];
            }
        }
        days--;
        count++;
    }
    if(A[count]>B[count]) return A[count];
    else return B[count];
}
",1
thua238,1697432014,1,"int TallestVine(int seedA, int seedB, int days)
{
    int daysA = 0;
    int daysB = 0;
    int growthA, growthB;

    while ((daysA < days || daysB < days) && seedA != seedB) {
        if (daysA < days && (seedA < seedB || daysB == days)) {
            growthA = seedA;
            while (growthA > 0) {
                seedA +=  growthA % 10;
                growthA /= 10;
            }
            daysA++;
        } else if (daysB < days && (seedB < seedA || daysA == days)) {
            growthB = seedB;
            while (growthB > 0) {
                seedB +=  growthB % 10;
                growthB /= 10;
            }
            daysB++;
        } 
    }

    if (seedA > seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",1
tlu253,1697240733,1,"int SumDigits(int value)
{
    // Assume value can be expressed using integer type
    // Assume value is 3 digits or less

    int sum = 0;

    // Hundredth place
    sum += value / 100;

    // Tenth place
    sum += (value - (value/100*100)) / 10;

    // Ones place
    sum += (value - (value/100*100)) % 10;

    return sum;
}



int TallestVine(int seedA, int seedB, int days)
{
    int A = seedA;
    int B = seedB; // the current height of each branch
    int dA; // day iterator for A's growth
    int dB; // day iterator for B's growth
    
    // for every growth stage of A
    for (dA = 0; dA < days; dA++) {
        
        // compare every B growth stage from the beginning
        B = seedB;
        
        for (dB = 0; dB < days; dB++) {

            B += SumDigits(B);

            // if they are the same height at some point, return their height 
            if (A == B) {
                return B;
            }

            // else if they are at different heights, continue 'prototype' growing B

        }

        A += SumDigits(A);

    }

    // if vines have not reached the same height, return tallest vine height
    if (A > B) {
        return A;
    } else {
        return B;
    }

}",0
tlu253,1697341023,2,"int SumDigits(int value)
{
    // Assume value can be expressed using integer type
    // Assume value is 3 digits or less

    int sum = 0;
    int finalDigit;

    while (value > 0) {
        finalDigit = value % 10;
        sum += finalDigit;
        value /= 10;
    }
    return sum;
}



int TallestVine(int seedA, int seedB, int days)
{
    int A = seedA;
    int B = seedB; // the current height of each branch
    int dA; // day iterator for A's growth
    int dB; // day iterator for B's growth
    
    // for every growth stage of A
    for (dA = 0; dA < days; dA++) {
        
        // compare every B growth stage from the beginning
        B = seedB;
        
        for (dB = 0; dB < days; dB++) {

            B += SumDigits(B);

            // if they are the same height at some point, return their height 
            if (A == B) {
                return B;
            }

            // else if they are at different heights, continue 'prototype' growing B

        }

        A += SumDigits(A);

    }

    // if vines have not reached the same height, return tallest vine height
    if (A > B) {
        return A;
    } else {
        return B;
    }

}
",0
tlu253,1697341444,3,"
int SumDigits(int value)
{
    // Assume value can be expressed using integer type

    int sum = 0;
    int finalDigit;

    while (value > 0) {
        finalDigit = value % 10;
        sum += finalDigit;
        value /= 10;
    }
    return sum;
}



int TallestVine(int seedA, int seedB, int days)
{
    int A = seedA;
    int B = seedB; // the current height of each branch
    int dA; // day iterator for A's growth
    int dB; // day iterator for B's growth
    
    // for every growth stage of A
    for (dA = 0; dA < days; dA++) {
        
        A += SumDigits(A);

        // compare every B growth stage from the beginning
        B = seedB;
        
        for (dB = 0; dB < days; dB++) {

            B += SumDigits(B);
            
            // if they are the same height at some point, return their height 
            if (A == B) {
                return A;
            }

            // else if they are at different heights, continue 'prototype' growing B
            

        }

        

    }

    // if vines have not reached the same height, return tallest vine height
    if (A > B) {
        return A;
    } else {
        return B;
    }

}


",1
tluu816,1697441226,1,"#include <stdio.h>
// function to grow seed by adding the sums of their places
int TreeStep(int VineHeight) {
	int PlaceValue = 0, Sum =0, NewVineHeight = VineHeight;

	while (VineHeight != 0) {
		PlaceValue = VineHeight % 10;
		Sum += PlaceValue;
		VineHeight = VineHeight / 10;
	}
	
	return NewVineHeight += Sum;
}
//function to test through vines and their heights
int TallestVine(int seedA, int seedB, int days) {
	int cycles = days;
	int ResetB = seedB;

	for (int i = 0; i < days; i++) {
		for (int j = 0; j <= days ; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			else {
				seedB = TreeStep(seedB);
			}
		}
		seedB = ResetB;

		seedA = TreeStep(seedA);
	}
	if (seedA > seedB) {
		return seedA;
	} 
	else {
		return seedB;
	}
	return 0;
}",0
tluu816,1697441253,2,"#include <stdio.h>
// function to grow seed by adding the sums of their places
int TreeStep(int VineHeight) {
	int PlaceValue = 0, Sum =0, NewVineHeight = VineHeight;

	while (VineHeight != 0) {
		PlaceValue = VineHeight % 10;
		Sum += PlaceValue;
		VineHeight = VineHeight / 10;
	}
	
	return NewVineHeight += Sum;
}
//function to test through vines and their heights
int TallestVine(int seedA, int seedB, int days) {
	int ResetB = seedB;

	for (int i = 0; i < days; i++) {
		for (int j = 0; j <= days ; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			else {
				seedB = TreeStep(seedB);
			}
		}
		seedB = ResetB;

		seedA = TreeStep(seedA);
	}
	if (seedA > seedB) {
		return seedA;
	} 
	else {
		return seedB;
	}
	return 0;
}",0
tluu816,1697444023,3,"#include <stdio.h>
// function to grow seed by adding the sums of their places
int TreeStep(int VineHeight) {
	int PlaceValue = 0, Sum =0, NewVineHeight = VineHeight;

	while (VineHeight != 0) {
		PlaceValue = VineHeight % 10;
		Sum += PlaceValue;
		VineHeight = VineHeight / 10;
	}
	
	return NewVineHeight += Sum;
}
//function to test through vines and their heights
int TallestVine(int seedA, int seedB, int days) {
	int ResetB = seedB;
	int ResetA = seedA;
	for (int i = 0; i < days; i++) {
		if (seedA == seedB) {
			return seedA;
		}
		seedA = TreeStep(seedA);
		seedB = ResetB;
		for (int j = 0; j < days ; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			else {
				seedB = TreeStep(seedB);
			}
		}

	}

	if (seedA > seedB) {
		return seedA;
	} 
	else {
		return seedB;
	}
	return 0;
}",0
tluu816,1697444050,4,"#include <stdio.h>
// function to grow seed by adding the sums of their places
int TreeStep(int VineHeight) {
	int PlaceValue = 0, Sum =0, NewVineHeight = VineHeight;

	while (VineHeight != 0) {
		PlaceValue = VineHeight % 10;
		Sum += PlaceValue;
		VineHeight = VineHeight / 10;
	}
	
	return NewVineHeight += Sum;
}
//function to test through vines and their heights
int TallestVine(int seedA, int seedB, int days) {
	int ResetB = seedB;
	for (int i = 0; i < days; i++) {
		if (seedA == seedB) {
			return seedA;
		}
		seedA = TreeStep(seedA);
		seedB = ResetB;
		for (int j = 0; j < days ; j++) {
			if (seedA == seedB) {
				return seedA;
			}
			else {
				seedB = TreeStep(seedB);
			}
		}

	}

	if (seedA > seedB) {
		return seedA;
	} 
	else {
		return seedB;
	}
	return 0;
}",1
tmen190,1696928119,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <math.h>

/* Finds the tallest vine */

int TallestVine(int seedA, int seedB, int days) {

	// Declare variables
	int power = 0;
	int maxPlace, i, digit, temp;
	int vineA = seedA;
	int vineB = seedB;



	// Check each vine number from seed B to seed A
	for (int b = 0; b < days; b++)
	{

		// Find the max place (ie. once, tenths, thousands) in terms of powers of 10 of vine B
		maxPlace = vineB;
		while (maxPlace > 0)
		{
			maxPlace = vineB / pow(10, power);
			power++;
		}

		// Find and add the digits of vine B
		temp = vineB;
		for (i = power - 1; i >= 0; i--)
		{
			digit = temp / pow(10, i);

			temp = temp - (digit * pow(10, i));
			vineB += digit;
		}

		// If newly found vine number is greater than current vine A, check next vine A
		if (vineB > vineA)
		{
			break;
		}

		// If vine A and B converges, return this value
		if (vineB == vineA)
		{
			return vineA;
		}
	}




	// Check each vine number from seed A
	for (int a = 0; a < days; a++)
	{

		// Find the max place (ie. once, tenths, thousands) in terms of powers of 10 of vine A
		maxPlace = vineA;
		while (maxPlace > 0)
		{
			maxPlace = vineA / pow(10, power);
			power++;
		}

		// Find and add the digits of vine A
		temp = vineA;
		for (i = power - 1; i >= 0; i--)
		{
			digit = temp / pow(10, i);
			temp = temp - (digit * pow(10, i));
			vineA += digit;
		}

		// If vine A and B converges, return this value
		if (vineB == vineA)
		{
			return vineA;
		}

		// For each vine from seed A, check each vine number from seed B
		vineB = seedB;
		for (int b = 0; b < days; b++)
		{	

			// Find the max place (ie. once, tenths, thousands) in terms of powers of 10 of vine B
			maxPlace = vineB;
			while (maxPlace > 0)
			{
				maxPlace = vineB / pow(10, power);
				power++;
			}

			// Find and add the digits of vine B
			temp = vineB;
			for (i = power - 1; i >= 0; i--)
			{
				digit = temp / pow(10, i);

				temp = temp - (digit * pow(10, i));
				vineB += digit;
			}

			// If newly found vine number is greater than current vine A, check next vine A
			if (vineB > vineA)
			{
				break;
			}

			// If vine A and B converges, return this value
			if (vineB == vineA)
			{
				return vineA;
			}

		}
	}


	// If all numbers are found already with no matches, return the largest
	if (vineA >= vineB)
	{
		return vineA;
	}
	return vineB;
}",0
tmen190,1696932771,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <math.h>

/* Finds the tallest vine */

int TallestVine(int seedA, int seedB, int days) {

	// Declare variables
	int power = 0;
	int maxPlace, i, digit, temp;
	int vineA = seedA;
	int vineB = seedB;
	int a = 0;
	int b = 0;



	// Check each vine number from seed B to seed A
	for (int b = 0; b < days; b++)
	{

		// Find the max place (ie. once, tenths, thousands) in terms of powers of 10 of vine B
		maxPlace = vineB;
		power = 0;
		while (maxPlace > 0)
		{
			maxPlace = vineB / pow(10, power);
			power++;
		}

		// Find and add the digits of vine B
		temp = vineB;
		for (i = power - 1; i >= 0; i--)
		{
			digit = temp / pow(10, i);

			temp = temp - (digit * pow(10, i));
			vineB += digit;
		}

		// If newly found vine number is greater than current vine A, check next vine A
		if (vineB > vineA)
		{
			break;
		}

		// If vine A and B converges, return this value
		if (vineB == vineA)
		{
			return vineA;
		}
	}




	// Check each vine number from seed A
	for (a = 0; a < days; a++)
	{

		// Find the max place (ie. once, tenths, thousands) in terms of powers of 10 of vine A
		maxPlace = vineA;
		power = 0;
		while (maxPlace > 0)
		{
			maxPlace = vineA / pow(10, power);
			power++;
		}

		// Find and add the digits of vine A
		temp = vineA;
		for (i = power - 1; i >= 0; i--)
		{
			digit = temp / pow(10, i);
			temp = temp - (digit * pow(10, i));
			vineA += digit;
		}
		

		// If vine A and B converges, return this value
		if (vineB == vineA)
		{
			return vineA;
		}





		// For each vine from seed A, check each vine number from seed B
		vineB = seedB;
		for (b = 0; b < days; b++)
		{	

			// Find the max place (ie. once, tenths, thousands) in terms of powers of 10 of vine B
			maxPlace = vineB;
			power = 0;
			while (maxPlace > 0)
			{
				maxPlace = vineB / pow(10, power);
				power++;
			}

			// Find and add the digits of vine B
			temp = vineB;
			for (i = power - 1; i >= 0; i--)
			{
				digit = temp / pow(10, i);

				temp = temp - (digit * pow(10, i));
				vineB += digit;
			}
			

			// If newly found vine number is greater than current vine A, check next vine A
			if (vineB > vineA)
			{
				break;
			}

			// If vine A and B converges, return this value
			if (vineB == vineA)
			{
				return vineA;
			}

		}
	}


	// For each vine from seed A, check each vine number from seed B
	vineB = seedB;
	for (b = 0; b < days; b++)
	{

		// Find the max place (ie. once, tenths, thousands) in terms of powers of 10 of vine B
		maxPlace = vineB;
		power = 0;
		while (maxPlace > 0)
		{
			maxPlace = vineB / pow(10, power);
			power++;
		}
		
		// Find and add the digits of vine B
		temp = vineB;
		for (i = power - 1; i >= 0; i--)
		{
			digit = temp / pow(10, i);

			temp = temp - (digit * pow(10, i));
			vineB += digit;
		}
	}





	// If all numbers are found already with no matches, return the largest
	if (vineA >= vineB)
	{
		return vineA;
	}
	return vineB;
}",1
tpan328,1697445073,1,"#include <stdio.h>

int GrowSeed(int vine)
{
    int newVine;
    int digitOne, digitTwo, digitThree;
    digitOne = vine / 100;
    // printf(""digitOne: %d\n"", digitOne);
    digitTwo = (vine % 100) / 10;
    // printf(""digitTwo: %d\n"", digitTwo);
    digitThree = (vine % 10);
    // printf(""digitThree: %d\n"", digitThree);

    newVine = vine + (digitOne + digitTwo + digitThree);

    return newVine;
}

int TallestVine(int seedA, int seedB, int days)
{
    int growthA = 0;
    int growthB = 0;

    for (int i = 0; i < days; i++) {
        if (seedA < seedB) {
            seedA = GrowSeed(seedA);
            growthA++;
            // printf(""growthA: %d\n"", growthA);
            // printf(""seedA: %d\n"", seedA);
        }
        if (seedB < seedA ) {
            seedB = GrowSeed(seedB);
            growthB++;
            // printf(""growthB: %d\n"", growthB);
            // printf(""seedB: %d\n"", seedB);
        }
        if (seedA == seedB) {
            break;
        }
    }

    if (seedA != seedB) {
        for (int i = growthA; i < days; i++) {
            seedA = GrowSeed(seedA);
            if (seedA == seedB) {
                break;
            }
        }
        for (int i = growthB; i < days; i++) {
            seedB = GrowSeed(seedB);
            if (seedA == seedB) {
                break;
            }
        }
    }

    int tallest;
    if (seedA >= seedB) {
        tallest = seedA;
    } else {
        tallest = seedB;
    }

    return tallest;
}

int main(void) 
{
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));    
    return 0;
}",0
tpan328,1697445092,2,"#include <stdio.h>

int GrowSeed(int vine)
{
    int newVine;
    int digitOne, digitTwo, digitThree;
    digitOne = vine / 100;
    // printf(""digitOne: %d\n"", digitOne);
    digitTwo = (vine % 100) / 10;
    // printf(""digitTwo: %d\n"", digitTwo);
    digitThree = (vine % 10);
    // printf(""digitThree: %d\n"", digitThree);

    newVine = vine + (digitOne + digitTwo + digitThree);

    return newVine;
}

int TallestVine(int seedA, int seedB, int days)
{
    int growthA = 0;
    int growthB = 0;

    for (int i = 0; i < days; i++) {
        if (seedA < seedB) {
            seedA = GrowSeed(seedA);
            growthA++;
            // printf(""growthA: %d\n"", growthA);
            // printf(""seedA: %d\n"", seedA);
        }
        if (seedB < seedA ) {
            seedB = GrowSeed(seedB);
            growthB++;
            // printf(""growthB: %d\n"", growthB);
            // printf(""seedB: %d\n"", seedB);
        }
        if (seedA == seedB) {
            break;
        }
    }

    if (seedA != seedB) {
        for (int i = growthA; i < days; i++) {
            seedA = GrowSeed(seedA);
            if (seedA == seedB) {
                break;
            }
        }
        for (int i = growthB; i < days; i++) {
            seedB = GrowSeed(seedB);
            if (seedA == seedB) {
                break;
            }
        }
    }

    int tallest;
    if (seedA >= seedB) {
        tallest = seedA;
    } else {
        tallest = seedB;
    }

    return tallest;
}",0
tpan328,1697445656,3,"#include <stdio.h>

int GrowSeed(int vine)
{
    int newVine;
    int digitOne, digitTwo, digitThree, digitFour, digitFive, digitSix;
    digitOne = vine / 100000;
    digitTwo = (vine % 100000) / 10000;
    digitThree = (vine % 10000) / 1000;
    digitFour = (vine % 1000) / 100;
    digitFive = (vine % 100) / 10;
    digitSix = (vine % 10);

    newVine = vine + (digitOne + digitTwo + digitThree + digitFour + digitFive + digitSix);

    return newVine;
}

int TallestVine(int seedA, int seedB, int days)
{
    int growthA = 0;
    int growthB = 0;

    for (int i = 0; i < days; i++) {
        if (seedA < seedB) {
            seedA = GrowSeed(seedA);
            growthA++;
            // printf(""growthA: %d\n"", growthA);
            // printf(""seedA: %d\n"", seedA);
        }
        if (seedB < seedA ) {
            seedB = GrowSeed(seedB);
            growthB++;
            // printf(""growthB: %d\n"", growthB);
            // printf(""seedB: %d\n"", seedB);
        }
        if (seedA == seedB) {
            break;
        }
    }

    if (seedA != seedB) {
        for (int i = growthA; i < days; i++) {
            seedA = GrowSeed(seedA);
            if (seedA == seedB) {
                break;
            }
        }
        for (int i = growthB; i < days; i++) {
            seedB = GrowSeed(seedB);
            if (seedA == seedB) {
                break;
            }
        }
    }

    int tallest;
    if (seedA >= seedB) {
        tallest = seedA;
    } else {
        tallest = seedB;
    }

    return tallest;
}",0
tpan328,1697446688,4,"#include <stdio.h>

int GrowSeed(int vine)
{
    int newVine;
    int digitOne, digitTwo, digitThree, digitFour, digitFive, digitSix, digitSeven, digitEight, digitNine, digitTen;
    digitOne = vine / 1000000000;
    digitTwo = (vine % 1000000000) / 100000000;
    digitThree = (vine % 100000000) / 10000000;
    digitFour = (vine % 10000000) / 1000000;
    digitFive = (vine % 1000000) / 100000;
    digitSix = (vine % 100000) / 10000;
    digitSeven = (vine % 10000) / 1000;
    digitEight = (vine % 1000) / 100;
    digitNine = (vine % 100) / 10;
    digitTen = (vine % 10);

    newVine = vine + (digitOne + digitTwo + digitThree + digitFour + digitFive + digitSix + digitSeven + digitEight + digitNine + digitTen);

    return newVine;
}

int TallestVine(int seedA, int seedB, int days)
{
    int growthA = 0;
    int growthB = 0;

    for (int i = 0; i < days; i++) {
        if (seedA < seedB) {
            seedA = GrowSeed(seedA);
            growthA++;
            // printf(""growthA: %d\n"", growthA);
            // printf(""seedA: %d\n"", seedA);
        }
        if (seedB < seedA ) {
            seedB = GrowSeed(seedB);
            growthB++;
            // printf(""growthB: %d\n"", growthB);
            // printf(""seedB: %d\n"", seedB);
        }
        if (seedA == seedB) {
            break;
        }
    }

    if (seedA != seedB) {
        for (int i = growthA; i < days; i++) {
            seedA = GrowSeed(seedA);
            if (seedA == seedB) {
                break;
            }
        }
        for (int i = growthB; i < days; i++) {
            seedB = GrowSeed(seedB);
            if (seedA == seedB) {
                break;
            }
        }
    }

    int tallest;
    if (seedA >= seedB) {
        tallest = seedA;
    } else {
        tallest = seedB;
    }

    return tallest;
}",0
tpan328,1697447380,5,"#include <stdio.h>

int GrowSeed(int vine)
{
    int newVine;
    int temp = vine;
    int sum = 0;
    int remainder;

    while (temp != 0)
    {
        remainder = temp % 10;
        sum = sum + remainder;
        temp = temp / 10;
    }

    newVine = vine + sum;

    return newVine;
}

int TallestVine(int seedA, int seedB, int days)
{
    int growthA = 0;
    int growthB = 0;

    for (int i = 0; i < days; i++) {
        if (seedA < seedB) {
            seedA = GrowSeed(seedA);
            growthA++;
            // printf(""growthA: %d\n"", growthA);
            // printf(""seedA: %d\n"", seedA);
        }
        if (seedB < seedA ) {
            seedB = GrowSeed(seedB);
            growthB++;
            // printf(""growthB: %d\n"", growthB);
            // printf(""seedB: %d\n"", seedB);
        }
        if (seedA == seedB) {
            break;
        }
    }

    if (seedA != seedB) {
        for (int i = growthA; i < days; i++) {
            seedA = GrowSeed(seedA);
            if (seedA == seedB) {
                break;
            }
        }
        for (int i = growthB; i < days; i++) {
            seedB = GrowSeed(seedB);
            if (seedA == seedB) {
                break;
            }
        }
    }

    int tallest;
    if (seedA >= seedB) {
        tallest = seedA;
    } else {
        tallest = seedB;
    }

    return tallest;
}
",0
tpan328,1697450191,6,"#include <stdio.h>

int GrowSeed(int vine)
{
    int newVine;
    int temp = vine;
    int sum = 0;
    int remainder;

    while (temp != 0)
    {
        remainder = temp % 10;
        sum = sum + remainder;
        temp = temp / 10;
    }

    newVine = vine + sum;

    return newVine;
}

int TallestVine(int seedA, int seedB, int days)
{
    int growthA = 1;
    int growthB = 1;

    seedA = GrowSeed(seedA);
    seedB = GrowSeed(seedB);

    for (int i = 1; i < days; i++) {
        if (seedA < seedB) {
            seedA = GrowSeed(seedA);
            growthA++;
            // printf(""growthA: %d\n"", growthA);
            // printf(""seedA: %d\n"", seedA);
        }
        if (seedB < seedA ) {
            seedB = GrowSeed(seedB);
            growthB++;
            // printf(""growthB: %d\n"", growthB);
            // printf(""seedB: %d\n"", seedB);
        }
        if (seedA == seedB) {
            break;
        }
    }

    if (seedA != seedB) {
        for (int i = growthA; i < days; i++) {
            seedA = GrowSeed(seedA);
            if (seedA == seedB) {
                break;
            }
        }
        for (int i = growthB; i < days; i++) {
            seedB = GrowSeed(seedB);
            if (seedA == seedB) {
                break;
            }
        }
    }

    int tallest;
    if (seedA >= seedB) {
        tallest = seedA;
    } else {
        tallest = seedB;
    }

    return tallest;
}",0
tpan328,1697452020,7,"#include <stdio.h>

int GrowSeed(int vine)
{
    int newVine;
    int temp = vine;
    int sum = 0;
    int remainder;

    while (temp != 0)
    {
        remainder = temp % 10;
        sum = sum + remainder;
        temp = temp / 10;
    }

    newVine = vine + sum;

    return newVine;
}

int TallestVine(int seedA, int seedB, int days)
{
    int growthA = 1;
    int growthB = 1;

    seedA = GrowSeed(seedA);
    seedB = GrowSeed(seedB);

    while (growthA != days && growthB != days) {
        if (seedA < seedB) {
            seedA = GrowSeed(seedA);
            growthA++;
            // printf(""growthA: %d\n"", growthA);
            // printf(""seedA: %d\n"", seedA);
        }
        if (seedB < seedA ) {
            seedB = GrowSeed(seedB);
            growthB++;
            // printf(""growthB: %d\n"", growthB);
            // printf(""seedB: %d\n"", seedB);
        }
        if (seedA == seedB) {
            break;
        }
    }

    if (seedA != seedB) {
        for (int i = growthA; i < days; i++) {
            seedA = GrowSeed(seedA);
            if (seedA == seedB) {
                break;
            }
        }
        for (int i = growthB; i < days; i++) {
            seedB = GrowSeed(seedB);
            if (seedA == seedB) {
                break;
            }
        }
    }

    int tallest;
    if (seedA >= seedB) {
        tallest = seedA;
    } else {
        tallest = seedB;
    }

    return tallest;
}
",1
tqhu735,1697147528,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
	printf(""Tallest vine = %d\n"", TallestVine(501, 399, 104));
	return 0;
}

int TallestVine(int seed1, int seed2, int days)
{
	int values1[1000] = { 0 };
	int values2[1000] = { 0 };
	
	int i, j, i1 = 1, i2 = 1;
	values1[0] = seed1;
	values2[0] = seed2;

	for (i = 0; i < days; i++) {
		int thousands = seed1 / 1000;
		int hundreds = (seed1 - thousands * 1000) / 100;
		int tens = (seed1 - thousands * 1000 - hundreds * 100) / 10;
		int ones = (seed1 - thousands * 1000 - hundreds * 100 - tens * 10);
		//printf(""%d, %d, %d, %d\n"", thousands, hundreds, tens, ones);
		int sum = thousands + hundreds + tens + ones;
		//printf(""%d\n"", sum);
		seed1 += sum;
		values1[i1] = seed1;
		i1++;

		thousands = seed2 / 1000;
		hundreds = (seed2 - thousands * 1000) / 100;
		tens = (seed2 - thousands * 1000 - hundreds * 100) / 10;
		ones = (seed2 - thousands * 1000 - hundreds * 100 - tens * 10);

		sum = thousands + hundreds + tens + ones;
		seed2 += sum;
		values2[i2] = seed2;
		i2++;
	}
	
	/*
	for (i = 0; i < i1; i++) {
		printf(""%d|"", values1[i]);
	}
	printf(""\n"");
	*/

	for (i = 0; i < i1; i++) {
		for (j = 0; j < i2; j++) {
			if (values1[i] == values2[j]) {
				return values1[i];
			}
		}
	}
	if (values1[i1 - 1] > values2[i2 - 1]){
		return values1[i1 - 1];
	}
	else {
		return values2[i2 - 1];
	}

}",0
tqhu735,1697147547,2,"int TallestVine(int seed1, int seed2, int days)
{
	int values1[1000] = { 0 };
	int values2[1000] = { 0 };
	
	int i, j, i1 = 1, i2 = 1;
	values1[0] = seed1;
	values2[0] = seed2;

	for (i = 0; i < days; i++) {
		int thousands = seed1 / 1000;
		int hundreds = (seed1 - thousands * 1000) / 100;
		int tens = (seed1 - thousands * 1000 - hundreds * 100) / 10;
		int ones = (seed1 - thousands * 1000 - hundreds * 100 - tens * 10);
		//printf(""%d, %d, %d, %d\n"", thousands, hundreds, tens, ones);
		int sum = thousands + hundreds + tens + ones;
		//printf(""%d\n"", sum);
		seed1 += sum;
		values1[i1] = seed1;
		i1++;

		thousands = seed2 / 1000;
		hundreds = (seed2 - thousands * 1000) / 100;
		tens = (seed2 - thousands * 1000 - hundreds * 100) / 10;
		ones = (seed2 - thousands * 1000 - hundreds * 100 - tens * 10);

		sum = thousands + hundreds + tens + ones;
		seed2 += sum;
		values2[i2] = seed2;
		i2++;
	}
	
	/*
	for (i = 0; i < i1; i++) {
		printf(""%d|"", values1[i]);
	}
	printf(""\n"");
	*/

	for (i = 0; i < i1; i++) {
		for (j = 0; j < i2; j++) {
			if (values1[i] == values2[j]) {
				return values1[i];
			}
		}
	}
	if (values1[i1 - 1] > values2[i2 - 1]){
		return values1[i1 - 1];
	}
	else {
		return values2[i2 - 1];
	}

}",0
tqhu735,1697147577,3,"int TallestVine(int seed1, int seed2, int days)
{
	int values1[5100] = { 0 };
	int values2[5100] = { 0 };
	
	int i, j, i1 = 1, i2 = 1;
	values1[0] = seed1;
	values2[0] = seed2;

	for (i = 0; i < days; i++) {
		int thousands = seed1 / 1000;
		int hundreds = (seed1 - thousands * 1000) / 100;
		int tens = (seed1 - thousands * 1000 - hundreds * 100) / 10;
		int ones = (seed1 - thousands * 1000 - hundreds * 100 - tens * 10);
		//printf(""%d, %d, %d, %d\n"", thousands, hundreds, tens, ones);
		int sum = thousands + hundreds + tens + ones;
		//printf(""%d\n"", sum);
		seed1 += sum;
		values1[i1] = seed1;
		i1++;

		thousands = seed2 / 1000;
		hundreds = (seed2 - thousands * 1000) / 100;
		tens = (seed2 - thousands * 1000 - hundreds * 100) / 10;
		ones = (seed2 - thousands * 1000 - hundreds * 100 - tens * 10);

		sum = thousands + hundreds + tens + ones;
		seed2 += sum;
		values2[i2] = seed2;
		i2++;
	}
	
	/*
	for (i = 0; i < i1; i++) {
		printf(""%d|"", values1[i]);
	}
	printf(""\n"");
	*/

	for (i = 0; i < i1; i++) {
		for (j = 0; j < i2; j++) {
			if (values1[i] == values2[j]) {
				return values1[i];
			}
		}
	}
	if (values1[i1 - 1] > values2[i2 - 1]){
		return values1[i1 - 1];
	}
	else {
		return values2[i2 - 1];
	}

}",0
tqhu735,1697147600,4,"int TallestVine(int seed1, int seed2, int days)
{
	int values1[10000] = { 0 };
	int values2[10000] = { 0 };
	
	int i, j, i1 = 1, i2 = 1;
	values1[0] = seed1;
	values2[0] = seed2;

	for (i = 0; i < days; i++) {
		int thousands = seed1 / 1000;
		int hundreds = (seed1 - thousands * 1000) / 100;
		int tens = (seed1 - thousands * 1000 - hundreds * 100) / 10;
		int ones = (seed1 - thousands * 1000 - hundreds * 100 - tens * 10);
		//printf(""%d, %d, %d, %d\n"", thousands, hundreds, tens, ones);
		int sum = thousands + hundreds + tens + ones;
		//printf(""%d\n"", sum);
		seed1 += sum;
		values1[i1] = seed1;
		i1++;

		thousands = seed2 / 1000;
		hundreds = (seed2 - thousands * 1000) / 100;
		tens = (seed2 - thousands * 1000 - hundreds * 100) / 10;
		ones = (seed2 - thousands * 1000 - hundreds * 100 - tens * 10);

		sum = thousands + hundreds + tens + ones;
		seed2 += sum;
		values2[i2] = seed2;
		i2++;
	}
	
	/*
	for (i = 0; i < i1; i++) {
		printf(""%d|"", values1[i]);
	}
	printf(""\n"");
	*/

	for (i = 0; i < i1; i++) {
		for (j = 0; j < i2; j++) {
			if (values1[i] == values2[j]) {
				return values1[i];
			}
		}
	}
	if (values1[i1 - 1] > values2[i2 - 1]){
		return values1[i1 - 1];
	}
	else {
		return values2[i2 - 1];
	}

}",0
tqhu735,1697147917,5,"int TallestVine(int seed1, int seed2, int days)
{
	int values1[10000] = { 0 };
	int values2[10000] = { 0 };
	
	int i, j, i1 = 1, i2 = 1;
	values1[0] = seed1;
	values2[0] = seed2;

	for (i = 0; i < days; i++) {
		int millions = seed1 / 1000000;
		int hundredthousands = (seed1 - millions * 1000000) / 100000;
		int tenthousands = (seed1 - millions * 1000000 - hundredthousands * 100000) / 10000;
		int thousands = (seed1 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000) / 1000;
		int hundreds = (seed1 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000) / 100;
		int tens = (seed1 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000 - hundreds * 100) / 10;
		int ones = (seed1 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000 - hundreds * 100 - tens * 10);

		//printf(""%d, %d, %d, %d\n"", thousands, hundreds, tens, ones);
		int sum = millions + hundredthousands + tenthousands + thousands + hundreds + tens + ones;
		//printf(""%d\n"", sum);
		seed1 += sum;
		values1[i1] = seed1;
		i1++;

		millions = seed2 / 1000000;
		hundredthousands = (seed2 - millions * 1000000) / 100000;
		tenthousands = (seed2 - millions * 1000000 - hundredthousands * 100000) / 10000;
		thousands = (seed2 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000) / 1000;
		hundreds = (seed2 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000) / 100;
		tens = (seed2 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000 - hundreds * 100) / 10;
		ones = (seed2 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000 - hundreds * 100 - tens * 10);

		sum = thousands + hundreds + tens + ones;
		seed2 += sum;
		values2[i2] = seed2;
		i2++;
	}
	
	/*
	for (i = 0; i < i1; i++) {
		printf(""%d|"", values1[i]);
	}
	printf(""\n"");
	*/

	for (i = 0; i < i1; i++) {
		for (j = 0; j < i2; j++) {
			if (values1[i] == values2[j]) {
				return values1[i];
			}
		}
	}
	if (values1[i1 - 1] > values2[i2 - 1]){
		return values1[i1 - 1];
	}
	else {
		return values2[i2 - 1];
	}

}",0
tqhu735,1697148397,6,"int TallestVine(int seed1, int seed2, int days)
{
	int values1[10000] = { 0 };
	int values2[10000] = { 0 };
	
	int i, j, i1 = 1, i2 = 1;
	values1[0] = seed1;
	values2[0] = seed2;

	for (i = 0; i < days; i++) {
		int millions = seed1 / 1000000;
		int hundredthousands = (seed1 - millions * 1000000) / 100000;
		int tenthousands = (seed1 - millions * 1000000 - hundredthousands * 100000) / 10000;
		int thousands = (seed1 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000) / 1000;
		int hundreds = (seed1 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000) / 100;
		int tens = (seed1 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000 - hundreds * 100) / 10;
		int ones = (seed1 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000 - hundreds * 100 - tens * 10);

		int sum = millions + hundredthousands + tenthousands + thousands + hundreds + tens + ones;
		seed1 += sum;
		values1[i1] = seed1;
		i1++;

		millions = seed2 / 1000000;
		hundredthousands = (seed2 - millions * 1000000) / 100000;
		tenthousands = (seed2 - millions * 1000000 - hundredthousands * 100000) / 10000;
		thousands = (seed2 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000) / 1000;
		hundreds = (seed2 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000) / 100;
		tens = (seed2 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000 - hundreds * 100) / 10;
		ones = (seed2 - millions * 1000000 - hundredthousands * 100000 - tenthousands * 10000 - thousands * 1000 - hundreds * 100 - tens * 10);

		//printf(""%d, %d, %d, %d, %d, %d, %d\n"", millions, hundredthousands, tenthousands, thousands, hundreds, tens, ones);
		sum = millions + hundredthousands + tenthousands + thousands + hundreds + tens + ones;
		//printf(""%d\n"", sum);

		seed2 += sum;
		values2[i2] = seed2;
		i2++;
	}
	
	/*
	for (i = 0; i < i1; i++) {
		printf(""%d|"", values1[i]);
	}
	printf(""\n"");
	
	for (i = 0; i < i2; i++) {
			printf(""%d|"", values2[i]);
		}
	printf(""\n"");
	*/

	for (i = 0; i < i1; i++) {
		for (j = 0; j < i2; j++) {
			if (values1[i] == values2[j]) {
				return values1[i];
			}
		}
	}
	if (values1[i1 - 1] > values2[i2 - 1]){
		return values1[i1 - 1];
	}
	else {
		return values2[i2 - 1];
	}

}",1
tyou333,1697145529,1,"#include <stdio.h>


int TallestVine(int seedA, int seedB, int days) {
    int seeds[2] = {seedA, seedB}, dayGrowth[2] = {0, 0};
    int maxGrowth, vineLogic;
    int vineCheck = 1;

    if (seeds[0] == seeds[1]) {
        return seeds[0];
    } else if (seeds[0] > seeds[1]) {
        maxGrowth = seeds[0];
        vineLogic = 1;
    } else {
        maxGrowth = seeds[1];
        vineLogic = 0;
    }

    while (dayGrowth[vineLogic] < days) {
        int sum[2] = {0};
        int tempSeed = seeds[vineLogic];

        while (tempSeed > 0) {
            int modulus = tempSeed % 10;
            sum[vineLogic] += modulus;
            tempSeed /= 10;
        }

        seeds[vineLogic] += sum[vineLogic];
        dayGrowth[vineLogic] += 1;

        if (seeds[vineLogic] == maxGrowth && vineCheck) {
            return maxGrowth;
        } else if (seeds[vineLogic] > maxGrowth && vineCheck) {
            maxGrowth = seeds[vineLogic];
            vineLogic = 1 - vineLogic;
        } else if (dayGrowth[vineLogic] == days) {
            vineLogic = 1 - vineLogic;
            vineCheck = 0;
        }
    }
    return seeds[1 - vineLogic];
}",0
tyou333,1697147179,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int seeds[2] = {seedA, seedB}, dayGrowth[2] = {0, 0};
    int maxGrowth, vineLogic;
    int vineCheck = 1;

    if (seeds[0] == seeds[1]) {
        return seeds[0];
    } else if (seeds[0] > seeds[1]) {
        maxGrowth = seeds[0];
        vineLogic = 1;
    } else {
        maxGrowth = seeds[1];
        vineLogic = 0;
    }

    while (dayGrowth[vineLogic] < days) {
        int sum[2] = {0};
        int tempSeed = seeds[vineLogic];

        while (tempSeed > 0) {
            int modulus = tempSeed % 10;
            sum[vineLogic] += modulus;
            tempSeed /= 10;
        }
        seeds[vineLogic] += sum[vineLogic];
        dayGrowth[vineLogic] += 1;

        if (seeds[vineLogic] == maxGrowth) {
            return maxGrowth;
        } else if (seeds[vineLogic] > maxGrowth && vineCheck) {
            maxGrowth = seeds[vineLogic];
            if (dayGrowth[vineLogic] == days) {
                vineCheck = 0;
            }
            vineLogic = 1 - vineLogic;
        } else if (dayGrowth[vineLogic] == days) {
            vineLogic = 1 - vineLogic;
            vineCheck = 0;
        }
    }
    return seeds[1 - vineLogic];
}",1
tyou421,1697254518,1,"int TallestVine(int seedA, int seedB, int days)
{
	int tempA = seedA;
	int digitA;
	int placeholderA;

	int tempB = seedB;
	int digitB;
	int placeholderB;
	int originalB = seedB;

	int i;
	int j;


	if (seedB > seedA)
	{
		placeholderB = seedB;
		placeholderA = seedA;

		seedA = placeholderB;
		seedB = placeholderA;
	}
	else
	{
		seedA = seedA + 0;
		seedB = seedB + 0;
	}


	for (i = 0; i < days; i++)
	{
		while (tempA != 0)
		{
			digitA = tempA % 10;
			tempA = tempA / 10;

			seedA = seedA + digitA;
		}


		for (j = 0; j < days; j++)
		{
			while (tempB != 0)
			{
				digitB = tempB % 10;
				tempB = tempB / 10;

				seedB = seedB + digitB;
			}


			if (seedA == seedB)
			{
				return seedA;
			}
			else
			{
				tempB = seedB;
			}
		}

		seedB = originalB;
		tempA = seedA;
	}



	if (seedA > seedB)
	{
		return seedA;
	}
	else
	{
		return seedB;
	}
}",0
tzha578,1697061960,1,"#include <stdio.h>

int TallestVine(int first, int second, int days){
    int temp = second;
    for(int i = 0; i < days; ++i){
        
        int ones = first % 10;
        int tens = (first - ones) % 100 / 10;
        int hundreds = (first - 10 * tens - ones) / 100;
        first += ones + tens + hundreds;
        second = temp;
        for(int j = 0; j < days; ++j){
            int ones1 = second % 10;
            int tens1 = (second - ones1) % 100 / 10;
            int hundreds1 = (second - 10 * tens1 - ones1) / 100;
            second += ones1 + tens1 + hundreds1;
            if(first == second)
            return first;
        }
        
    }
    if(first > second)
    return first;
    else
    return second;
}",0
tzha578,1697062743,2,"#include <stdio.h>

void adddigits(int *a){
    int sum = 0;
    int temp = *a;
    while(*a > 0){
        int ones = *a % 10;
        sum += ones;
        *a -= ones;
        *a /= 10;
    }
    *a = temp + sum;
}

int TallestVine(int first, int second, int days){
    int temp = second;
    for(int i = 0; i < days; ++i){
        adddigits(&first);
        second = temp;
        for(int j = 0; j < days; ++j){
            adddigits(&second);
            if(first == second)
            return first;
        }
        
    }
    if(first > second)
    return first;
    else
    return second;
}
",1
ujai264,1697170182,1,"#include <stdio.h>
#include <math.h>


int NumberOfDigits (int Seed){
    if (Seed < 10) {
            return 1;
        }

    for( int i = 0; i < Seed; i++){
        
        if (pow(10, i) > Seed){
           return i; 
        }
        
    }
    
return 0;
}
int SumDigits (int Seed, int NumDigits){
    int sum = 0;
    if (NumDigits == 1) {
        return Seed;
    }
    for(int i = 0; i < NumDigits; i++){
        sum += (int)(Seed / pow(10, i)) % 10;



    }
    return sum;

}

int TallestVine(int seedA, int seedB, int days){
    int NumDigits; 
    int temp = seedB;
    for (int i = 0; i < days; i++){
        NumDigits = NumberOfDigits(seedA);
        int digitSum = SumDigits(seedA, NumDigits);
        seedA += digitSum;
        seedB = temp;
        for (int j = 0; j < days; j++) {
            int NumDigits2 = NumberOfDigits(seedB);
            int digitSum2 = SumDigits(seedB, NumDigits2);
            seedB += digitSum2;
            if (seedA == seedB){
                return seedA;
            } else {
                
            }
        }
        
        

    }
    if (seedA > seedB){
        return seedA; 
    } else {
        return seedB;
    }


}",1
vxie208,1697270712,1,"int TallestVine(int seedA, int seedB, int days) {
	int tempA = seedA, tempB = seedB, MaxA, MaxB; 
	for (int i = 0; i < days; i++) {
		tempB = tempB + tempB % 10 + (tempB / 10) % 10 + (tempB / 100) % 10 + (tempB / 1000) % 10 + (tempB / 10000) % 10;
		for (int j = 0; j < days; j++) {
			tempA = tempA + tempA % 10 + (tempA / 10) % 10 + (tempA / 100) % 10 + (tempA / 1000) % 10 + (tempA / 10000) % 10;
			MaxA = tempA;
			if (tempA == tempB) {
				break;
			}
			
		}
		if (tempA == tempB) {
			break;
		}
		tempA = seedA;  
	}
	MaxB = tempB;  
	
	if (MaxA > MaxB) {
		return MaxA;
	}
	else if (MaxA < MaxB) {
		return MaxB;
	}
	else {
		return MaxA;
	}
}",0
vxie208,1697271958,2,"
int TallestVine(int seedA, int seedB, int days) {
	int tempA = seedA, tempB = seedB, MaxA, MaxB, remainder, digits, sum = 0;
	for (int i = 0; i < days; i++) {
		//while loop sourced from google,https://www.sanfoundry.com/c-program-sum-all-digits-integer/
		digits = tempB;
		while (digits != 0) {
			remainder = digits % 10;
			sum = sum + remainder;
			digits = digits / 10; 
		}
		tempB = tempB + sum;
		sum = 0;
		for (int j = 0; j < days; j++) {
			digits = tempA;
			while (digits != 0) {
				remainder = digits % 10;
				sum = sum + remainder;
				digits = digits / 10;
			}
			tempA = tempA + sum;
			sum = 0;
			MaxA = tempA;
			if (tempA == tempB) {
				break;
			}
		}
		if (tempA == tempB) {
			break;
		}
		tempA = seedA;
	}
	MaxB = tempB; 
	
	if (MaxA > MaxB) {
		return MaxA;
	}
	else if (MaxA < MaxB) {
		return MaxB;
	}
	else {
		return MaxA;
	}
}",1
wany079,1697449712,1,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days) {
    int numA = seedA;
    int numB = seedB;
    int tempA[200] = { 0 };

    for (int i = 0; i < days; i++) {

        while (numA > 0) 
        {
            int modA = numA % 10; 
            seedA = seedA + modA;
            

            numA = numA / 10;    
        }
        numA = seedA;
        

    }

    for (int j = days; j < days+days; j++) {

        while (numB > 0)
        {
            int modB = numB % 10;  
            seedB = seedB + modB;
            

            numB = numB / 10;     
        }
        numB = seedB;

    }



    if (seedA > seedB) {
        printf(""Tallest vine = %d\n"", seedA);
    }
    else {
        printf(""Tallest vine = %d\n"", seedB);
    }

    return 0;
}",0
wany079,1697449772,2,"#include <stdio.h>
int TallestVine(int seedA, int seedB, int days) {
    int numA = seedA;
    int numB = seedB;

    for (int i = 0; i < days; i++) {

        while (numA > 0) 
        {
            int modA = numA % 10; 
            seedA = seedA + modA;
            

            numA = numA / 10;    
        }
        numA = seedA;
        

    }

    for (int j = days; j < days+days; j++) {

        while (numB > 0)
        {
            int modB = numB % 10;  
            seedB = seedB + modB;
            

            numB = numB / 10;     
        }
        numB = seedB;

    }



    if (seedA > seedB) {
        printf(""Tallest vine = %d\n"", seedA);
    }
    else {
        printf(""Tallest vine = %d\n"", seedB);
    }

    return 0;
}",0
wany722,1697233520,1,"#include <stdio.h>
int grow(int seed)
{
    int sum, x, y, z;
    x = seed/100;
    y = seed/10%10;
    z = seed%10;
    sum = seed + x + y + z;
    return sum;
}
int Max(int a, int b)
{
    if(a >= b)
        return a;
    else
        return b;
}
int TallestVine(int seedA, int seedB, int days)
{
    int a[days + 1], b[days + 1], i, j, max;
    a[0] = seedA;
    b[0] = seedB;
    for (i = 1; i <= days; i++){
        a[i] = grow(a[i - 1]);
        b[i] = grow(b[i - 1]);
    }
    for (i = 0; i <= days; i++)
        for (j = 0; j <= days; j++){
            if (a[i] == b[j])
                return a[i];
        }
    return Max(a[days], b[days]);
}",0
wany722,1697233545,2,"#include <stdio.h>
int grow(int seed)
{
    int sum, x, y, z;
    x = seed/100;
    y = seed/10%10;
    z = seed%10;
    sum = seed + x + y + z;
    return sum;
}
int Max(int a, int b)
{
    if(a >= b)
        return a;
    else
        return b;
}
int TallestVine(int seedA, int seedB, int days)
{
    int a[days + 1], b[days + 1], i, j;
    a[0] = seedA;
    b[0] = seedB;
    for (i = 1; i <= days; i++){
        a[i] = grow(a[i - 1]);
        b[i] = grow(b[i - 1]);
    }
    for (i = 0; i <= days; i++)
        for (j = 0; j <= days; j++){
            if (a[i] == b[j])
                return a[i];
        }
    return Max(a[days], b[days]);
}",0
wany722,1697235097,3,"#include <stdio.h>
int grow(int seed)
{
    int sum = seed, x, y, z;
    while(seed>0){
        sum += seed%10;
        seed /= 10;
    }
    return sum;
}
int Max(int a, int b)
{
    if(a >= b)
        return a;
    else
        return b;
}
int TallestVine(int seedA, int seedB, int days)
{
    int a[days + 1], b[days + 1], i, j;
    a[0] = seedA;
    b[0] = seedB;
    for (i = 1; i <= days; i++){
        a[i] = grow(a[i - 1]);
        b[i] = grow(b[i - 1]);
    }
    for (i = 0; i <= days; i++)
        for (j = 0; j <= days; j++){
            if (a[i] == b[j])
                return a[i];
        }
    return Max(a[days], b[days]);
}",0
wany722,1697235115,4,"#include <stdio.h>
int grow(int seed)
{
    int sum = seed;
    while(seed>0){
        sum += seed%10;
        seed /= 10;
    }
    return sum;
}
int Max(int a, int b)
{
    if(a >= b)
        return a;
    else
        return b;
}
int TallestVine(int seedA, int seedB, int days)
{
    int a[days + 1], b[days + 1], i, j;
    a[0] = seedA;
    b[0] = seedB;
    for (i = 1; i <= days; i++){
        a[i] = grow(a[i - 1]);
        b[i] = grow(b[i - 1]);
    }
    for (i = 0; i <= days; i++)
        for (j = 0; j <= days; j++){
            if (a[i] == b[j])
                return a[i];
        }
    return Max(a[days], b[days]);
}",1
wany843,1697153537,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days) {
    int growthA = seedA;
    int growthB = seedB;
    
    for (int i = 1; i <= days; i++) {
        if (growthA == growthB) {
            return growthA;
        }
        
        if (growthA > growthB) {
            growthB += (growthB - seedB + 1);
        } else {
            growthA += (growthA - seedA + 1);
        }
    }
    
    return growthA > growthB ? growthA : growthB;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));

    return 0;
}
",0
wany843,1697153753,2,"#include <stdio.h>

int growVine(int seed, int days) {
    int height = seed;
    for (int i = 1; i < days; i++) {
        height += seed - i;
    }
    return height;
}

int TallestVine(int seedA, int seedB, int days) {
    for (int day = 1; day <= days; day++) {
        int heightA = growVine(seedA, day);
        int heightB = growVine(seedB, days - day + 1);
        if (heightA == heightB) {
            return heightA;
        }
    }
    int finalHeightA = growVine(seedA, days);
    int finalHeightB = growVine(seedB, days);
    return finalHeightA > finalHeightB ? finalHeightA : finalHeightB;
}
",0
wany843,1697154769,3,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int growthA = seedA;
    int growthB = seedB;
    for (int i = 0; i < days; i++) {
        if (growthA == growthB) {
            return growthA;
        }
        if (i != days - 1) {
            growthA += sumOfDigits(growthA);
            growthB += sumOfDigits(growthB);
        }
    }
    return growthA > growthB ? growthA : growthB;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));
    return 0;
}
",0
wany843,1697154853,4,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int growthA = seedA;
    int growthB = seedB;
    for (int i = 0; i < days; i++) {
        if (growthA == growthB) {
            return growthA;
        }
        if (i != days - 1) {
            growthA += sumOfDigits(growthA);
            growthB += sumOfDigits(growthB);
        }
    }
    return growthA > growthB ? growthA : growthB;
}",0
wany843,1697155037,5,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int intersects(int growthA[], int growthB[], int len) {
    for (int i = 0; i < len; i++) {
        for (int j = 0; j < len; j++) {
            if (growthA[i] == growthB[j]) {
                return growthA[i];
            }
        }
    }
    return -1;
}

int TallestVine(int seedA, int seedB, int days) {
    int growthA[200] = { seedA };
    int growthB[200] = { seedB };

    for (int i = 1; i < days; i++) {
        growthA[i] = growthA[i - 1] + sumOfDigits(growthA[i - 1]);
        growthB[i] = growthB[i - 1] + sumOfDigits(growthB[i - 1]);
        
        int intersection = intersects(growthA, growthB, i + 1);
        if (intersection != -1) {
            return intersection;
        }
    }
    
    return growthA[days - 1] > growthB[days - 1] ? growthA[days - 1] : growthB[days - 1];
}",0
wany843,1697155254,6,"int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int growthA = seedA;
    int growthB = seedB;
    int pastValuesA[200] = { seedA };
    int pastValuesB[200] = { seedB };
    int intersection = -1;

    for (int i = 1; i < days; i++) {
        growthA += sumOfDigits(growthA);
        growthB += sumOfDigits(growthB);
        
        pastValuesA[i] = growthA;
        pastValuesB[i] = growthB;
        
        for (int j = 0; j <= i; j++) {
            if (growthA == pastValuesB[j] || growthB == pastValuesA[j]) {
                intersection = growthA == pastValuesB[j] ? growthA : growthB;
                break;
            }
        }
        
        if (intersection != -1) {
            return intersection;
        }
    }
    
    return growthA > growthB ? growthA : growthB;
}
",0
wmas516,1697369115,1,"int TallestVine(int seedA, int seedB, int days) {
	
	int seedarrB[200] = { seedB };
	int check = 0, B;

	for (int i = 1; i <= days; i++){
		B = seedarrB[i - 1];
		seedarrB[i] = B + B / 100 + (B / 10) % 10 + B % 10;
	}


	for (int i = 0; i <= days; i++) {
		seedA += seedA/100 + (seedA/10)%10 + seedA%10;
		for (int j = 0; j <= days; j++) {
			if (seedA == seedarrB[j]) return(seedA);
		}
	}

	if (seedA < seedarrB[days]) return(seedarrB[days]);
	
	else return(seedA);

	return -1;
}",0
wmas516,1697369140,2,"int TallestVine(int seedA, int seedB, int days) {
	
	int seedarrB[200] = { seedB };
	int B;

	for (int i = 1; i <= days; i++){
		B = seedarrB[i - 1];
		seedarrB[i] = B + B / 100 + (B / 10) % 10 + B % 10;
	}


	for (int i = 0; i <= days; i++) {
		seedA += seedA/100 + (seedA/10)%10 + seedA%10;
		for (int j = 0; j <= days; j++) {
			if (seedA == seedarrB[j]) return(seedA);
		}
	}

	if (seedA < seedarrB[days]) return(seedarrB[days]);
	
	else return(seedA);

	return -1;
}",0
wmas516,1697372361,3,"int TallestVine(int seedA, int seedB, int days) {
	
	int seedarrB[200] = { seedB };
	int check = 0, temp;
	for (int i = 1; i <= days; i++) {
		seedarrB[i] = Grow(seedarrB[i-1]);
	}
	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (seedA == seedarrB[j]) return(seedA);
		}
		if (i != days) seedA = Grow(seedA);
	}

	if (seedA < seedarrB[days]) return(seedarrB[days]);
	
	else return(seedA);

	return -1;
}

int Grow(val) {
	int temp = val;
	while (temp > 0) {
		val += temp % 10;
		temp /= 10;
	}
	return val;
}",0
wmas516,1697372380,4,"int Grow(val) {
	int temp = val;
	while (temp > 0) {
		val += temp % 10;
		temp /= 10;
	}
	return val;
}

int TallestVine(int seedA, int seedB, int days) {
	
	int seedarrB[200] = { seedB };
	int check = 0, temp;
	for (int i = 1; i <= days; i++) {
		seedarrB[i] = Grow(seedarrB[i-1]);
	}
	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (seedA == seedarrB[j]) return(seedA);
		}
		if (i != days) seedA = Grow(seedA);
	}

	if (seedA < seedarrB[days]) return(seedarrB[days]);
	
	else return(seedA);

	return -1;
}",0
wmas516,1697372411,5,"int Grow(val) {
	int temp = val;
	while (temp > 0) {
		val += temp % 10;
		temp /= 10;
	}
	return val;
}

int TallestVine(int seedA, int seedB, int days) {
	
	int seedarrB[200] = { seedB };
	for (int i = 1; i <= days; i++) {
		seedarrB[i] = Grow(seedarrB[i-1]);
	}
	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (seedA == seedarrB[j]) return(seedA);
		}
		if (i != days) seedA = Grow(seedA);
	}

	if (seedA < seedarrB[days]) return(seedarrB[days]);
	
	else return(seedA);

	return -1;
}",0
wmas516,1697372460,6,"int Grow(int val) {
	int temp = val;
	while (temp > 0) {
		val += temp % 10;
		temp /= 10;
	}
	return val;
}

int TallestVine(int seedA, int seedB, int days) {
	
	int seedarrB[200] = { seedB };
	for (int i = 1; i <= days; i++) {
		seedarrB[i] = Grow(seedarrB[i-1]);
	}
	for (int i = 0; i <= days; i++) {
		for (int j = 0; j <= days; j++) {
			if (seedA == seedarrB[j]) return(seedA);
		}
		if (i != days) seedA = Grow(seedA);
	}

	if (seedA < seedarrB[days]) return(seedarrB[days]);
	
	else return(seedA);

	return -1;
}",0
wmas516,1697374673,7,"int TallestVine(int seedA, int seedB, int days) {
	
	int growthA = 0, growthB = 0;

	if (seedA < seedB) { int temp = seedA; seedA = seedB; seedB = temp; }

	while (seedA != seedB & growthA <= days & growthB <= days) {
		if (seedB < seedA) { seedB = Grow(seedB); growthB++; }
		else if(seedB > seedA) { seedA = Grow(seedA); growthA++; }	
	}

	if (seedB == seedA) { return(seedA); }
	while (growthA < days) {
		seedA = Grow(seedA);
		growthA++;
	}
	while (growthB < days) {
		seedB = Grow(seedB);
		growthB++;
	}

	if (seedA<seedB) return(seedB);
	
	else return(seedA);

	return -1;
}


int Grow(int val) {
	int temp = val;
	while (temp > 0) {
		val += temp % 10;
		temp /= 10;
	}
	return val;
}",0
wmas516,1697374837,8,"int TallestVine(int seedA, int seedB, int days) {
	
	int growthA = 0, growthB = 0;

	if (seedA < seedB) { 
		int temp = seedA; 
		seedA = seedB; 
		seedB = temp; 
	}

	while ((seedA != seedB) & (growthA <= days) & (growthB <= days)) {
		
		if (seedB < seedA) { 
			seedB = Grow(seedB); 
			growthB++; 
		}

		else if(seedB > seedA) { 
			seedA = Grow(seedA); 
			growthA++; 
		}	
	}

	if (seedB == seedA) { 
		return(seedA); 
	}

	while (growthA < days) {
		seedA = Grow(seedA);
		growthA++;
	}

	while (growthB < days) {
		seedB = Grow(seedB);
		growthB++;
	}

	if (seedA < seedB) {
		return(seedB);
	}
	
	else {
		return(seedA);
	}

	return -1;
}


int Grow(int val) {
	int temp = val;
	while (temp > 0) {
		val += temp % 10;
		temp /= 10;
	}
	return val;
}",0
wmas516,1697374859,9,"int Grow(int val) {
	int temp = val;
	while (temp > 0) {
		val += temp % 10;
		temp /= 10;
	}
	return val;
}

int TallestVine(int seedA, int seedB, int days) {
	
	int growthA = 0, growthB = 0;

	if (seedA < seedB) { 
		int temp = seedA; 
		seedA = seedB; 
		seedB = temp; 
	}

	while ((seedA != seedB) & (growthA <= days) & (growthB <= days)) {
		
		if (seedB < seedA) { 
			seedB = Grow(seedB); 
			growthB++; 
		}

		else if(seedB > seedA) { 
			seedA = Grow(seedA); 
			growthA++; 
		}	
	}

	if (seedB == seedA) { 
		return(seedA); 
	}

	while (growthA < days) {
		seedA = Grow(seedA);
		growthA++;
	}

	while (growthB < days) {
		seedB = Grow(seedB);
		growthB++;
	}

	if (seedA < seedB) {
		return(seedB);
	}
	
	else {
		return(seedA);
	}

	return -1;
}",0
wmas516,1697375154,10,"int Grow(int val) {
	int temp = val;
	while (temp > 0) {
		val += temp % 10;
		temp /= 10;
	}
	return val;
}

int TallestVine(int seedA, int seedB, int days) {
	
	int growthA = 0, growthB = 0;

	if (seedA < seedB) { 
		int temp = seedA; 
		seedA = seedB; 
		seedB = temp; 
	}

	while ((seedA != seedB) & (growthA < days) & (growthB < days)) {
		
		if (seedB < seedA) { 
			seedB = Grow(seedB); 
			growthB++; 
		}

		else if(seedB > seedA) { 
			seedA = Grow(seedA); 
			growthA++; 
		}	
	}

	while ((growthA <days) & (seedA != seedB)) {
		seedA = Grow(seedA);
		growthA++;
		if (seedB == seedA) {
			return(seedA);
		}
	}

	while ((growthB < days) & (seedA != seedB)) {
		seedB = Grow(seedB);
		growthB++;
		if (seedB == seedA) {
			return(seedA);
		}
	}
	if (seedB == seedA) {
		return(seedA);
	}
	else if (seedA < seedB) {
		return(seedB);
	}
	
	else {
		return(seedA);
	}

	return -1;
}",1
wwan296,1697270879,1,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h>

int TallestVine(int seedA, int seedB, int days)
{
	if (seedA == seedB) {
		return seedB;
	}
	int growA = 0;
	int growB = 0;
	int tempA, tempB, heightB;
	for (int i = 0; i < days; i++) {
		heightB = seedB; 
		for (int j = 0; j < days; j++) {
			growB = 0;
			tempB = heightB;
			while (tempB > 0) { 
				growB += tempB % 10; 
				tempB /= 10;
			}
			heightB += growB; 
			if (seedA == seedB || seedA == heightB) {
				return seedA;
			}
		}
		tempA = seedA;
		growA = 0;
		while (tempA > 0) {
			growA += tempA % 10;
			tempA /= 10;
		}
		seedA += growA;
	}
	if (seedA > heightB) {  
		return seedA;
	}
	else {
		return heightB;
	}
}",0
wwan296,1697274709,2,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h>

int TallestVine(int seedA, int seedB, int days)
{
	if (seedA == seedB) {
		return seedB;
	}
	int growA = 0;
	int growB = 0;
	int tempA, tempB, heightB;
	int heightA = seedA;
	for (int i = 0; i < days; i++) {
		tempA = heightA;
		growA = 0;
		while (tempA > 0) {
			growA += tempA % 10;
			tempA /= 10;
		}
		heightA += growA;
		heightB = seedB; 
		for (int j = 0; j < days; j++) {
			growB = 0;
			tempB = heightB;
			while (tempB > 0) { 
				growB += tempB % 10; 
				tempB /= 10;
			}
			heightB += growB; 
			if (seedA == heightB || heightA == heightB) { 
				return heightB;
			}
		}
	}
	if (heightA > heightB) {  
		return heightA;
	}
	else {
		return heightB;
	}
}
",1
wwon485,1697173263,1,"int DigitsSum(int number)
{
    int sum = 0;
    int x = number;

    while (x != 0)
    {
        sum += x % 10;
        x /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int seedADays = 0;
    int seedBDays = 0;
    int treeA = seedA;
    int treeB = seedB;
    while (seedADays != days || seedBDays != days)
    {
        // calculates the sum of seed A
        treeA += DigitsSum(treeA);
        seedADays++;

        while (treeA > treeB && seedBDays != days)
        {
            treeB += DigitsSum(treeB);
            seedBDays++;

        }

        if (treeA == treeB)
        {
            printf(""There: %d %d "", seedADays, seedBDays);
            return treeA;
        }

        if (seedADays == days)
        {
            printf(""Here: %d %d "", seedADays, seedBDays);
            return treeA;
        }
    }
}",0
wwon485,1697173979,2,"int DigitsSum(int number)
{
    int sum = 0;
    int x = number;

    while (x != 0)
    {
        sum += x % 10;
        x /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int seedADays = 0;
    int seedBDays = 0;
    int treeA = seedA;
    int treeB = seedB;
    while (seedADays != days || seedBDays != days)
    {
        // calculates the sum of seed A
        treeA += DigitsSum(treeA);
        seedADays++;

        while (treeA > treeB && seedBDays != days)
        {
            treeB += DigitsSum(treeB);
            seedBDays++;

        }

        if (treeA == treeB)
        {
            printf(""There: %d %d "", seedADays, seedBDays);
            return treeA;
        }

        if (seedADays == days)
        {
            printf(""Here: %d %d "", seedADays, seedBDays);
            return treeA;
        }
    }
    return treeA;

}",0
wwon485,1697173994,3,"int DigitsSum(int number)
{
    int sum = 0;
    int x = number;

    while (x != 0)
    {
        sum += x % 10;
        x /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int seedADays = 0;
    int seedBDays = 0;
    int treeA = seedA;
    int treeB = seedB;
    while (seedADays != days || seedBDays != days)
    {
        // calculates the sum of seed A
        treeA += DigitsSum(treeA);
        seedADays++;

        while (treeA > treeB && seedBDays != days)
        {
            treeB += DigitsSum(treeB);
            seedBDays++;

        }

        if (treeA == treeB)
        {
            return treeA;
        }

        if (seedADays == days)
        {
            return treeA;
        }
    }
    return treeA;

}",0
wwon485,1697192085,4,"int DigitsSum(int number)
{
    int sum = 0;
    int x = number;

    while (x != 0)
    {
        sum += x % 10;
        x /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int aDay, bDay, tempB;

    for (aDay = 0; aDay < days; aDay++) {
        // Increments seedA
        seedA += DigitsSum(seedA);
        tempB = seedB;
        for (bDay = 0; bDay < days; bDay++) {
            tempB += DigitsSum(tempB);

            if (tempB == seedA) {
                return seedA;
            }    

            if (tempB > seedA) {
                break;
            }
        }
    }

    for (int i = 0; i < days; i++) {
        seedB += DigitsSum(seedB);
    }
    if (seedA > seedB) {
        return seedA;
    } 

    return seedB;
}",1
wwu295,1697390436,1,"int TallestVine(int seedA, int seedB, int days)
{
	int vineA = seedA, vineB = seedB;
	if (seedA == seedB) {
		return seedA;
	}

	for (int i = 0; i < days; i++) {
		int tempA = vineA;
		for (int j = 100000000; j >= 1; j /= 10) {
			vineA += tempA / j;
			tempA -= (tempA / j) * j;
		}

		
		for (int l = 0; l < days; l++) {
			int tempB = vineB;
			for (int k = 10000000; k >= 1; k /= 10) {
				vineB += tempB / k;
				tempB -= (tempB / k) * k;
			}

			if (vineA == vineB) {
				return vineA;
			}
		}

		vineB = seedB;
	}

	if (vineA >= vineB) {
		return vineA;
	}
	else {
		return vineB;
	}
}",0
wwu295,1697392954,2,"int TallestVine(int seedA, int seedB, int days)
{
	int vineA = seedA, vineB = seedB;
	if (seedA == seedB) {
		return seedA;
	}

	for (int i = 0; i < days; i++) {
		int tempA = vineA;
		for (int j = 100000000; j >= 1; j /= 10) {
			vineA += tempA / j;
			tempA -= (tempA / j) * j;
		}

		
		for (int l = 0; l < days; l++) {
			int tempB = vineB;
			for (int k = 100000000; k >= 1; k /= 10) {
				vineB += tempB / k;
				tempB -= (tempB / k) * k;
			}

			if (vineA == vineB) {
				return vineA;
			}
		}
		if (i != days - 1) {
			vineB = seedB;
		}
		
	}

	if (vineA >= vineB) {
		return vineA;
	}
	else {
		return vineB;
	}
}",1
xkan320,1697105819,1,"#include <stdio.h>

int sumDigits(int n){
    int sum = 0;
    while(n > 0){
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int A = seedA;
    int B = seedB;
    
    int i,j;
    for(i=1; i<=days; i++){
        B = seedB;
        for(j=1; j<=days; j++){
            B += sumDigits(B);
            if(B == A){
                return B;
            }
        }
        A += sumDigits(A);
    }

    if(A > B){
        return A;
    }else{
        return B;
    }
}",0
xkan320,1697106402,2,"#include <stdio.h>

int sumDigits(int n){
    int sum = 0;
    while(n > 0){
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int A = seedA;
    int B = seedB;
    int tallestA = 0;
    int tallestB = 0;
    
    int i,j;
    for(i=1; i<=days; i++){
        B = seedB;
        for(j=1; j<=days; j++){
            B += sumDigits(B);
            if(B == A){
                tallestA = B;
                break;
            }
        }
        if(tallestA == B){
            break;
        }
        A += sumDigits(A);
    }
    
    
    A = seedA;
    B = seedB;
    for(i=1; i<=days; i++){
        A = seedA;
        for(j=1; j<=days; j++){
            A += sumDigits(A);
            if(B == A){
                tallestB = A;
                break;
            }
        }
        if(tallestB == A){
            break;
        }
        B += sumDigits(B);
    }
    if(tallestA > tallestB){
        return B;
    }else if (tallestA < tallestB){
        return A;
    }
    
    if(A > B){
        return A;
    }else{
        return B;
    }
}",1
xli330,1697254591,1,"int PowTen(int power) {
    // This function calculates ten to the power of 0 to 9.

    if (power == 0) {
        return 1;
    }
    if (power == 1) {
        return 10;
    }

    return 10 * PowTen(power - 1);
}

int GrowVine(int beforeGrowth) {
    int temp = beforeGrowth, afterGrowth = 0, digit = 1, tenPower;

    // Find the seed's digit number.
    while (beforeGrowth / PowTen(digit) != 0) { digit++; }

    // Sum numbers from the most siginificant digit (inclusive) to the
    // last digit (exclusive).
    for (digit--; digit > 0; digit--) {
        tenPower = PowTen(digit);
        afterGrowth += beforeGrowth / tenPower;
        beforeGrowth %= tenPower;
    }

    // Add the last digit of the number and the original number.
    return beforeGrowth + afterGrowth + temp;
}

int TallestVine(int seedA, int seedB, int days) {
    int shortVine, tallVine, shortGrowDays = days, tallGrowDays = days;
    
    // Find the shorter and the taller vine.
    if (seedA == seedB) { return seedA; }

    if (seedA < seedB) { 
        shortVine = seedA; tallVine = seedB;
    } else {
        shortVine = seedB; tallVine = seedA;
    }

    while (shortGrowDays > 0 || tallGrowDays > 0) {

        // Grow the short vine to about taller than the tall vine.
        while (shortVine < tallVine && shortGrowDays > 0) {
            shortVine = GrowVine(shortVine);
            shortGrowDays--;
        }

        if (shortVine == tallVine) {
            return shortVine;
        }

        // Grow tall vine only, if short vine cannot reach tall vine.
        if (shortVine < tallVine && shortGrowDays == 0) {
            while (tallGrowDays > 0) {
                tallVine = GrowVine(tallVine);
                tallGrowDays--;
            }
            return tallVine;
        }

        // Grow tall vine to about taller than the short Vine.
        while (tallVine < shortVine && tallGrowDays > 0) {
            tallVine = GrowVine(tallVine);
            tallGrowDays--;
        }
    }

    return tallVine;
}",0
xli330,1697256734,2,"#include <stdio.h>

int PowTen(int power) {
    // This function calculates ten to the power of 0 to 9.

    if (power == 0) {
        return 1;
    }
    if (power == 1) {
        return 10;
    }

    return 10 * PowTen(power - 1);
}

int GrowVine(int beforeGrowth) {
    int temp = beforeGrowth, afterGrowth = 0, digit = 1, tenPower;

    // Find the seed's digit number.
    while (beforeGrowth / PowTen(digit) != 0) { digit++; }

    // Sum numbers from the most siginificant digit (inclusive) to the
    // last digit (exclusive).
    for (digit--; digit > 0; digit--) {
        tenPower = PowTen(digit);
        afterGrowth += beforeGrowth / tenPower;
        beforeGrowth %= tenPower;
    }

    // Add the last digit of the number and the original number.
    return beforeGrowth + afterGrowth + temp;
}

int TallestVine(int seedA, int seedB, int days) {
    int shortVine, tallVine, shortGrowDays = days, tallGrowDays = days;
    
    // Find the shorter and the taller vine.
    if (seedA == seedB) { return seedA; }

    if (seedA < seedB) { 
        shortVine = seedA; tallVine = seedB;
    } else {
        shortVine = seedB; tallVine = seedA;
    }

    while (shortGrowDays > 0 || tallGrowDays > 0) {

        // Grow the short vine to about taller than the tall vine.
        while (shortVine < tallVine && shortGrowDays > 0) {
            // printf(""SHORT %d --> "", shortVine);
            shortVine = GrowVine(shortVine);
            shortGrowDays--;
            // printf(""%d\n"", shortVine);
        }

        if (shortVine == tallVine) {
            return shortVine;
        }

        // Grow tall vine only, if short vine cannot reach tall vine.
        if (shortVine < tallVine && shortGrowDays == 0) {
            while (tallGrowDays > 0) {
                // printf("" TALL  %d --> "", tallVine);
                tallVine = GrowVine(tallVine);
                tallGrowDays--;
                // printf(""%d\n"", tallVine);
            }
            return tallVine;
        }

        // Grow tall vine to about taller than the short Vine.
        while (tallVine < shortVine && tallGrowDays > 0) {
            // printf("" TALL %d --> "", tallVine);
            tallVine = GrowVine(tallVine);
            tallGrowDays--;
            // printf(""%d\n"", tallVine);
        }

        // Grow short vine only, if tall vine cannot reach short vine.
        if (tallVine < shortVine && tallGrowDays == 0) {
            while (shortGrowDays > 0) {
                // printf(""SHORT %d --> "", shortVine);
                shortVine = GrowVine(shortVine);
                shortGrowDays--;
                // printf(""%d\n"", shortVine);
            }
            return shortVine;
        }
    }

    if (shortVine > tallVine) {
        return shortVine;
    }

    return tallVine;
}",1
xugn489,1697261587,1,"int TallestVine(int seedA, int seedB, int days) 
{   
    int countA = 0;
    int countB = 0;
	for (int i = 0; i < days*2+1; i++) {
		AddToLowerSeed(&seedA,&seedB,&countA,&countB);
		if (seedA == seedB) {
			return seedA;
		}
		if (countA == days || countB == days) {
		    break;
		}
	}
	if (countA < (days)) {
	    for (int j = countA; j < days;j++) {
	        AddToLowerSeed(&seedA,&seedA,&countA,&countA);
	    
	        if (seedA == seedB) {
		    	return seedA;
		    }
	    }
	} else {
	    for (int j = countB; j < days;j++) {
	        AddToLowerSeed(&seedB,&seedB,&countB,&countB);
	    
	        if (seedA == seedB) {
		    	return seedB;
		    }
	    }
	}
	if (seedA > seedB) {
		return seedA;
	} else {
		return seedB;
	}
}

void AddToLowerSeed(int *seedA, int *seedB, int *countA, int *countB)
{
	int *getadd;
	int original_value;
	int sum_digit = 0;
	if (*seedA > *seedB) {
		getadd = seedB;
		*countB += 1;
	} else {
		getadd = seedA;
		*countA += 1;
	}
	original_value = *getadd;
	while (original_value > 0) {
		sum_digit += (original_value % 10);
		original_value /= 10;
	}
	*getadd += sum_digit;
}",0
xugn489,1697261731,2,"void AddToLowerSeed(int *seedA, int *seedB, int *countA, int *countB)
{
	int *getadd;
	int original_value;
	int sum_digit = 0;
	if (*seedA > *seedB) {
		getadd = seedB;
		*countB += 1;
	} else {
		getadd = seedA;
		*countA += 1;
	}
	original_value = *getadd;
	while (original_value > 0) {
		sum_digit += (original_value % 10);
		original_value /= 10;
	}
	*getadd += sum_digit;
}
int TallestVine(int seedA, int seedB, int days) 
{   
    int countA = 0;
    int countB = 0;
	for (int i = 0; i < days*2+1; i++) {
		AddToLowerSeed(&seedA,&seedB,&countA,&countB);
		if (seedA == seedB) {
			return seedA;
		}
		if (countA == days || countB == days) {
		    break;
		}
	}
	if (countA < (days)) {
	    for (int j = countA; j < days;j++) {
	        AddToLowerSeed(&seedA,&seedA,&countA,&countA);
	    
	        if (seedA == seedB) {
		    	return seedA;
		    }
	    }
	} else {
	    for (int j = countB; j < days;j++) {
	        AddToLowerSeed(&seedB,&seedB,&countB,&countB);
	    
	        if (seedA == seedB) {
		    	return seedB;
		    }
	    }
	}
	if (seedA > seedB) {
		return seedA;
	} else {
		return seedB;
	}
}

",1
ybha528,1697453354,1,"int SummingDigits(int x)
{
	int sum = 0;
	while (x) {
		sum += x % 10;
		x /= 10;
	}
	return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
	int currentA = seedA;
	int currentB = seedB;

	for (int i = 0; i < days; i++)
	{
		int tempA = currentA;
		int tempB = currentB;

		for (int j = 0; j <= i; j++)
		{
			if (tempA == currentB) {
				return currentB;
			}
			if (tempB == currentA)
			{
				return currentA;
			}
			tempA += SummingDigits(tempA);
			tempB += SummingDigits(tempB);
		}
		currentA += SummingDigits(currentA);
		currentB += SummingDigits(currentB);
	}
	if (currentA > currentB) {
		return currentA;
	}
	else {
		return currentB;
	}
}",0
ydai729,1697453900,1,"int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA; // Initialize the values of vine A and vine B
    int vineB = seedB;

    for (int day = 1; day <= days; day++) {
        int sumA = 0, sumB = 0;
        int tempA = vineA, tempB = vineB;

        while (tempA > 0) { // Calculate the sum of digits for vine A
            sumA += tempA % 10;
            tempA /= 10;
        }

        while (tempB > 0) { // Calculate the sum of digits for vine B
            sumB += tempB % 10;
            tempB /= 10;
        }

        vineA += sumA; // Grow vine A
        vineB += sumB; // Grow vine B

        if (vineA == vineB) {
            // If the two vines join, return the height where they join
            return vineA;
        }
    }

    // If the vines do not join after the given number of days, return the taller vine's height
    return (vineA > vineB) ? vineA : vineB;
}
",0
ytho155,1697440953,1,if (i != row || j != col) {,0
ytse120,1697190022,1,"int increase(int seed) {
    return seed/100 + (seed-(seed/100)*100)/10 + seed-(seed/100)*100-((seed-(seed/100)*100)/10)*10;
}

int TallestVine(int seedA, int seedB, int days) {
    int aDays = 0;
    int bDays = 0;
    int check = 0;
    while (check==0) {
        if ((seedA == seedB) && ((aDays != days) && (bDays != days))) {
            seedA += increase(seedA);
            seedB += increase(seedB);
            aDays++;
            bDays++;
        }
        if (aDays != days) {
            if ((seedA < seedB) || (bDays == days)) {
                seedA += increase(seedA);
                aDays++;
            }
        }
        if (bDays != days) {
            if ((seedA > seedB) || (aDays == days)) {
                seedB += increase(seedB);
                bDays++;
            }
        }
        
        if (((aDays == days) && (bDays == days)) || (seedA == seedB)) {
            check = 1;
        }
    }
    if (seedA >= seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
ytse120,1697190737,2,"int increase(int seed) {
    int result = 0;
    while (seed > 0) {
        result += seed % 10;
        seed /= 10;
    }
    return result;
}

int TallestVine(int seedA, int seedB, int days) {
    int aDays = 0;
    int bDays = 0;
    int check = 0;
    while (check==0) {
        if ((seedA == seedB) && ((aDays != days) && (bDays != days))) {
            seedA += increase(seedA);
            seedB += increase(seedB);
            aDays++;
            bDays++;
        }
        if (aDays != days) {
            if ((seedA < seedB) || (bDays == days)) {
                seedA += increase(seedA);
                aDays++;
            }
        }
        if (bDays != days) {
            if ((seedA > seedB) || (aDays == days)) {
                seedB += increase(seedB);
                bDays++;
            }
        }

        printf(""%d %d\n"",seedA, aDays);
        printf(""%d %d\n"",seedB, bDays);
        if (((aDays == days) && (bDays == days)) || (seedA == seedB)) {
            check = 1;
        }
    }
    if (seedA >= seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
ytse120,1697190771,3,"int increase(int seed) {
    int result = 0;
    while (seed > 0) {
        result += seed % 10;
        seed /= 10;
    }
    return result;
}

int TallestVine(int seedA, int seedB, int days) {
    int aDays = 0;
    int bDays = 0;
    int check = 0;
    while (check==0) {
        if ((seedA == seedB) && ((aDays != days) && (bDays != days))) {
            seedA += increase(seedA);
            seedB += increase(seedB);
            aDays++;
            bDays++;
        }
        if (aDays != days) {
            if ((seedA < seedB) || (bDays == days)) {
                seedA += increase(seedA);
                aDays++;
            }
        }
        if (bDays != days) {
            if ((seedA > seedB) || (aDays == days)) {
                seedB += increase(seedB);
                bDays++;
            }
        }
        if (((aDays == days) && (bDays == days)) || (seedA == seedB)) {
            check = 1;
        }
    }
    if (seedA >= seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",0
ytse120,1697191341,4,"int increase(int seed) {
    int result = 0;
    while (seed > 0) {
        result += seed % 10;
        seed /= 10;
    }
    return result;
}

int TallestVine(int seedA, int seedB, int days) {
    int aDays = 0;
    int bDays = 0;
    int check = 0;
    while (check==0) {
        if ((seedA == seedB) && ((aDays != days) && (bDays != days))) {
            seedA += increase(seedA);
            seedB += increase(seedB);
            aDays++;
            bDays++;
        }
        if (aDays != days) {
            if (((seedA < seedB) || (bDays == days)) && (seedA != seedB)) {
                seedA += increase(seedA);
                aDays++;
            }
        }
        if (bDays != days) {
            if (((seedA > seedB) || (aDays == days)) && (seedA != seedB)) {
                seedB += increase(seedB);
                bDays++;
            }
        }
        if ((seedA == seedB) || ((aDays == days) && (bDays == days))) {
            check = 1;
        }
    }
    if (seedA >= seedB) {
        return seedA;
    } else {
        return seedB;
    }
}",1
yzhe520,1697183243,1,"int TallestVine(int seedA, int seedB, int days) {
	int i, j;
	int valueA = seedA;
	int valueB = seedB;

	//first calculate which value would seedA reach in the number of days
	for (i = 0; i < days; i++) {
		valueA = valueA + (valueA / 100) + ((valueA % 100)/10) + (valueA % 10);
		valueB = seedB; //reset the value B again

		for (j = 0; j < days; j++) {
			valueB = valueB + (valueB / 100) + ((valueB % 100) / 10) + (valueB % 10);

			//check if the two values are equal, the tallest point is immediately reached
			if (valueA == valueB) {
				return valueA;
			}
		}
		
	}
	//check for the tallest point
	//if value A is larger than value B, it is the tallest point
	if (valueA > valueB) {
		return valueA;
	}
	//if value B is larger than value A, it is the tallest point
	else if (valueB > valueA) {
		return valueB;
	}
}",0
yzhe520,1697183584,2,"int TallestVine(int seedA, int seedB, int days) {
	int i, j;
	int valueA = seedA;
	int valueB = seedB;

	//first calculate which value would seedA reach in the number of days
	for (i = 0; i < days; i++) {
		valueA = valueA + (valueA / 100) + ((valueA % 100)/10) + (valueA % 10);
		valueB = seedB; //reset the value B again

		for (j = 0; j < days; j++) {
			valueB = valueB + (valueB / 100) + ((valueB % 100) / 10) + (valueB % 10);

			//check if the two values are equal, the tallest point is immediately reached
			if (valueA == valueB) {
				return valueA;
			}
		}
		
	}
	//check for the tallest point
	//if value A is larger than value B, it is the tallest point
	if (valueA > valueB) {
		return valueA;
	}
	//if value B is larger than value A, it is the tallest point
	return valueB;
}",0
zcol623,1697248181,1,"//Author:zcol623
#include <stdio.h>

//Function to calculate the sum of digits in a number
int sumDigits(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;// Extract the last digit and add it to the sum
        number = number/10;// Remove the last digit from the number
    }
    return sum;
}

//Function to find the tallest point the two vines will reach
int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int day = 1;

    //Grow vine B completely comparing each new length to the length of vineA 
    //If no match in length is found grow vine A by one day
    //Shrink vine B back to its original length and set day back to 1 before growing it again to compare with the new length of vineA
    //Repeat untill a match in length is found or untill vineA is fully grown

    for (int i = 1; i <= days; i++) {
        for (day = 1; day <= days; day++) {
            // Check if vines are the same length 
            if (vineA == vineB) {
                return vineB; //Vines join and growth stops
            }
            // Grow the vine B
            if (vineB != 609) {
             vineB += sumDigits(vineB);
            }
            }
            // Grow the vine A
        if (vineA == 609) {
            return vineA;
        }
        vineA += sumDigits(vineA);
        if (i < days) {
            //Set vine B back to orignal value and set day back to 1
             vineB = seedB;
             day = 1;
            }
        }
    // Vines did not join, return the taller of the two
    if (vineB > vineA) {
        return vineB;
    }
    return vineA;",0
zcol623,1697248240,2,"//Author:zcol623
#include <stdio.h>

//Function to calculate the sum of digits in a number
int sumDigits(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;// Extract the last digit and add it to the sum
        number = number/10;// Remove the last digit from the number
    }
    return sum;
}

//Function to find the tallest point the two vines will reach
int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;
    int day = 1;

    //Grow vine B completely comparing each new length to the length of vineA 
    //If no match in length is found grow vine A by one day
    //Shrink vine B back to its original length and set day back to 1 before growing it again to compare with the new length of vineA
    //Repeat untill a match in length is found or untill vineA is fully grown

    for (int i = 1; i <= days; i++) {
        for (day = 1; day <= days; day++) {
            // Check if vines are the same length 
            if (vineA == vineB) {
                return vineB; //Vines join and growth stops
            }
            // Grow the vine B
            if (vineB != 609) {
             vineB += sumDigits(vineB);
            }
            }
            // Grow the vine A
        if (vineA == 609) {
            return vineA;
        }
        vineA += sumDigits(vineA);
        if (i < days) {
            //Set vine B back to orignal value and set day back to 1
             vineB = seedB;
             day = 1;
            }
        }
    // Vines did not join, return the taller of the two
    if (vineB > vineA) {
        return vineB;
    }
    return vineA;
}",0
zcol623,1697253611,3,"//Author:zcol623
#include <stdio.h>

//Function to calculate the sum of digits in a number
int sumDigits(int number) {
    int sum = 0;
    while (number > 0) {
        sum += number % 10;// Extract the last digit and add it to the sum
        number = number/10;// Remove the last digit from the number
    }
    return sum;
}

//Function to find the tallest point the two vines will reach
int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
    int vineB = seedB;    
    int day;

    // Check if vines are the same length 
    if (vineA == vineB) {
        return vineB; //Vines join and no growth occcurs
    }

   /* If Vine B is shorter than vine A:
    Grow vine B completely comparing each new length to the length of vineA 
    If no match in length is found grow vine A by one day
    Shrink vine B back to its original length and set day back to 1 before growing it again to compare with the new length of vineA
    Repeat untill a match in length is found or untill vineA is fully grown
    (Vice versa if vine A is orignally shorter than vine B)*/

    if(vineB < vineA) {
        for (int i = 1; i <= days; i++) {
            for (day = 1; day <= days; day++) {
                //Grow the vine B
                vineB += sumDigits(vineB);

                //Check if vines are the same length 
                if (vineA == vineB) {
                    return vineB; //Vines join and growth stops
                }
            }
            vineA += sumDigits(vineA);
            if (i < days) {
                //Set vine B back to orignal value and set day back to 1
                vineB = seedB;
                day = 1;
            }
        }
    }
    else {
        for (int i = 1; i <= days; i++) {
            for (day = 1; day <= days; day++) {
                //Grow the vine A
                vineA += sumDigits(vineA);

                //Check if vines are the same length 
                if (vineB == vineA) {
                    return vineA; //Vines join and growth stops
                }
            }
            vineB += sumDigits(vineB);
            if (i < days) {
                //Set vine B back to orignal value and set day back to 1
                vineA = seedA;
                day = 1;
            }
        }
    }
    // Vines did not join, return the taller of the two
    if (vineB > vineA) {
        return vineB;
    }
    return vineA;
}",1
zfu276,1697274207,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

int growth(int n) 
{
    if ( n <= 0) {
        return 0;
    } else {
        int sum = 0;
        int digits = (int)(log10(n)) + 1; 
        int digit = 0;
        for (int i = digits - 1; i >= 0; i--) {
            digit = n / (int)pow(10, i); 
            sum += digit;
            n = n - digit * (int)pow(10, i); 
            }

        return sum;
    }
    
}

int TallestVine(int seedA, int seedB, int days) 
{
    int heightA = seedA;
    int heightB = seedB;

    for (int i = 0; i < days; i++) {
        heightA += growth(heightA);
        for (int j = 0; j < days; j++){
            heightB += growth(heightB);
            if (heightB == heightA) {
                return heightA;
            }
        }
        heightB = seedB;    
    }

    
    if ( heightA > heightB ){
        return heightA;
    } else {
        return heightB;
    } 
    
}",0
zfu276,1697274621,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

int growth(int n) 
{
    if ( n <= 0) {
        return 0;
    } else {
        int sum = 0;
        int digits = (int)(log10(n)) + 1; 
        int digit = 0;
        for (int i = digits - 1; i >= 0; i--) {
            digit = n / (int)pow(10, i); 
            sum += digit;
            n = n - digit * (int)pow(10, i); 
            }

        return sum;
    }
    
}

int TallestVine(int seedA, int seedB, int days) 
{
    int heightA = seedA;
    int heightB = seedB;

    for (int i = 0; i < days; i++) {
        heightA += growth(heightA);
        for (int j = 0; j < days; j++){
            heightB += growth(heightB);
            if (heightB == heightA) {
                return heightA;
            }
        }
        heightB = seedB;    
    }

    heightA = seedA;
    for (int i = 0; i < days; i++) {
        heightA += growth(heightA);
        heightB += growth(heightB);
    }

    if ( heightA > heightB ){
        return heightA;
    } else {
        return heightB;
    } 
}
",1
zgar110,1697436814,1,"#include <stdio.h>

int SumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
      int vineB = seedB;
    int maxTallestPoint = 0;
    
    for (int i = 0; i < days; i++) {
          int sumA = SumOfDigits(vineA);
        int sumB = SumOfDigits(vineB);
         
        if (vineA == vineB) {
           
           
           
            maxTallestPoint = vineA;
            break;
         }
        
        if (sumA > sumB) {
            vineB += sumB;
        } else if (sumA < sumB) {
            vineA += sumA;
        } else {
            vineA += sumA;
            vineB += sumB;
        } 
        
        if (vineA > maxTallestPoint) {
            maxTallestPoint = vineA;
        }
         if (vineB > maxTallestPoint) {
            maxTallestPoint = vineB;
        }
     }
    
    return maxTallestPoint;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));
    
      return 0;
}
",0
zgar110,1697436835,2,"#include <stdio.h>

int SumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int TallestVine(int seedA, int seedB, int days) {
    int vineA = seedA;
      int vineB = seedB;
    int maxTallestPoint = 0;
    
    for (int i = 0; i < days; i++) {
          int sumA = SumOfDigits(vineA);
        int sumB = SumOfDigits(vineB);
         
        if (vineA == vineB) {
           
           
           
            maxTallestPoint = vineA;
            break;
         }
        
        if (sumA > sumB) {
            vineB += sumB;
        } else if (sumA < sumB) {
            vineA += sumA;
        } else {
            vineA += sumA;
            vineB += sumB;
        } 
        
        if (vineA > maxTallestPoint) {
            maxTallestPoint = vineA;
        }
         if (vineB > maxTallestPoint) {
            maxTallestPoint = vineB;
        }
     }
    
    return maxTallestPoint;
}

",0
zgar110,1697437150,3,"#include <stdio.h>


int sumOfDigits(int n) {
    int sum = 0;
    while (n != 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}


int calculateGrowth(int seed, int days) {
    while (days-- > 0) {
        seed += sumOfDigits(seed);
    }
    return seed;
}
 
int TallestVine(int seedA, int seedB, int days) {
    int heightA = seedA;
     int heightB = seedB;
    int tallestPoint = 0;
    
  
   
    int encounteredHeights[1001] = {0};
    
    
    for (int i = 1; i <= days; ++i) {
       
        heightA = calculateGrowth(seedA, i);
        heightB = calculateGrowth(seedB, i);
        
      
        if (heightA > 1000 || heightB > 1000) {
            printf(""Error: One of the vines exceeded the maximum possible height.\n"");
            return -1;
        }

     
        if (encounteredHeights[heightA] || encounteredHeights[heightB]) {
            return heightA < heightB ? heightA : heightB;
        }

    
         encounteredHeights[heightA] = 1;
        encounteredHeights[heightB] = 1;
        
   
        if (heightA > tallestPoint) {
            tallestPoint = heightA;
        }
        if (heightB > tallestPoint) {
            tallestPoint = heightB;
        }
    }
    
    
    return tallestPoint;
}
",0
zgar110,1697437796,4,"#include <stdio.h>
#include <stdbool.h>

int sumOfDigits(int n) {
    int sum = 0; while (n != 0) { sum += n % 10; n /= 10; }
    return sum; }

bool existsInBuffer(int buffer[], int value, int size) {
    for (int i = 0; i < size; ++i) { if (buffer[i] == value) { return true; } }
    return false; }

int TallestVine(int seedA, int seedB, int days) {
    int bufferA[200] = {0}; int bufferB[200] = {0}; int sizeA = 0, sizeB = 0;
    int heightA = seedA; int heightB = seedB;

    for (int day = 0; day < days; ++day) {
        bufferA[day % 200] = heightA; bufferB[day % 200] = heightB;
        if (sizeA < 200) sizeA++; if (sizeB < 200) sizeB++;

        heightA += sumOfDigits(heightA); heightB += sumOfDigits(heightB);

        if (existsInBuffer(bufferB, heightA, sizeB) || existsInBuffer(bufferA, heightB, sizeA)) {
            return (heightA < heightB) ? heightA : heightB; } }

    return (heightA > heightB) ? heightA : heightB; }",0
zgar110,1697437809,5,"#include <stdio.h>
#include <stdbool.h>


int sumOfDigits(int n) {
    int sum = 0;
    while (n != 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

bool existsInBuffer(int buffer[], int value, int size) {
    for (int i = 0; i < size; ++i) {
        if (buffer[i] == value) {
            return true;
        }
    }
    return false;
}


int TallestVine(int seedA, int seedB, int days) {

    int bufferA[200] = {0};
    int bufferB[200] = {0};
    int sizeA = 0, sizeB = 0;  

    int heightA = seedA;
    int heightB = seedB;


    for (int day = 0; day < days; ++day) {

        bufferA[day % 200] = heightA;
        bufferB[day % 200] = heightB;
        if (sizeA < 200) sizeA++;
        if (sizeB < 200) sizeB++;


        heightA += sumOfDigits(heightA);
        heightB += sumOfDigits(heightB);

        
        if (existsInBuffer(bufferB, heightA, sizeB) || existsInBuffer(bufferA, heightB, sizeA)) {
          
            return (heightA < heightB) ? heightA : heightB;  
        }
    }

 
    return (heightA > heightB) ? heightA : heightB;
}",0
zgin653,1696827934,1,"int sumOfDigits(int digit){
    int sum = 0;

    while (digit != 0)
    {
        sum += digit % 10;
        digit = digit / 10;
    }
    
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int i = 0;
    int j = 0;

    while (i < days || j < days)
        if (seedA == seedB){
            return seedA;
        }else if(seedA < seedB || j >= days ){
            seedA += sumOfDigits(seedA);
            i++;
        } else if(seedA > seedB || i >= days){
            seedB += sumOfDigits(seedB);
            j++;        
        }
    

    if (seedA < seedB){
        return seedB;
    } else {
        return seedA;
    }
}",0
zgin653,1696828314,2,"int sumOfDigits(int digit){
    int sum = 0;

    while (digit != 0)
    {
        sum += digit % 10;
        digit = digit / 10;
    }
    
    return sum;
}

int TallestVine(int seedA, int seedB, int days){
    int i = 0;
    int j = 0;

    while (i < days || j < days) {
        if (seedA == seedB){
            return seedA;
        }else if ((seedA < seedB || j >= days) && i < days){
            seedA += sumOfDigits(seedA);
            i++;
        } else if ((seedA > seedB || i >= days) && j < days){
            seedB += sumOfDigits(seedB);
            j++;        
        }
    }

    if (seedA < seedB){
        return seedB;
    } else {
        return seedA;
    }
}",1
zhon780,1697453597,1,"#include <stdio.h>

int SumDigits(int num)
{
    int digit;
    int sum = 0;
    while (num > 0) {
        digit = num % 10;
        sum += digit;
        num /= 10;
    }
    return sum;
}

int SmallestMatch(int array1[], int array2[], int length)
{
    for (int i = 0; i < length; i++) {
        for (int j = i+1; i < length; i++) {
            if (array1[i] == array2[j]) {
                return array1[i];
            }
        }
    }
    return -1;
}

int TallestVine(int seedA, int seedB, int days)
{
    int AArray[days+1];
    int BArray[days+1];
    
    AArray[0] = seedA;
    BArray[0] = seedB;
    
    for (int i = 1; i <= days; i++)
    {
        seedA += SumDigits(seedA);
        seedB += SumDigits(seedB);
        
        AArray[i] = seedA;
        BArray[i] = seedB;
    }
    
    int smallest_match = SmallestMatch(AArray, BArray, days+1);
    if (smallest_match != -1) return smallest_match;
    
    return seedA > seedB ? seedA : seedB;
}",0
zliu578,1697272290,1,"int SeperateInt(int value) {
	int i = 0;
	int result = 0;
	while (value > 0) {
		result = result + (value % 10);
		value = value / 10;
		i++;
	}
	return result;
}

int TallestVine(int seedA, int seedB, int days) {
	int result1 = seedA;
	int result2 = seedB;
	int i = 1;
	while (i <= days) {
		result1 = result1 + SeperateInt(result1);
		result2 = seedB;
		for (int j = 0; j < days; j++) {
			
			result2 = result2 + SeperateInt(result2);
			if (result2 == result1) {
				return result2;
			}
		}
		i++;
	}
	if (result1 > result2) {
		return result1;
	}
	else {
		return result2;
	}
}",1
zpen457,1697411936,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int SumDigits(int seed){
    int i = 0;
    int arr[20];
    while (seed != 0){
        arr[i] = seed % 10;
        seed = seed / 10;
        i++;
    }
    int sum = 0;
    for (int j = 0; j < i; j++){
        sum += arr[j];
    }
    return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    int sumA = SumDigits(seedA);
    int sumB = SumDigits(seedB);
    int base;
    
    /*BASE CASE*/
    if (days == 1){
        if (seedA > seedB){
            base = seedA;
        } else {
            base = seedB;
        }
        
        if (base != seedA+sumA && base != seedB+sumB){
            if (seedA+sumA > seedB+sumB){
                return seedA+sumA;
            }
            else {
                return seedB+sumB;
            }
        } else {
            return base;
        }
        
    } else {
        
        /*RECURSIVE*/
        return TallestVine(seedA+sumA,seedB+sumB,days-1);
    
    }
    
}",0
zpen457,1697416203,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int SumDigits(int seed){
    int i = 0;
    int arr[20];
    while (seed != 0){
        arr[i] = seed % 10;
        seed = seed / 10;
        i++;
    }
    int sum = 0;
    for (int j = 0; j < i; j++){
        sum += arr[j];
    }
    return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    int sumA, sumB;
    int base;
    int tempA = seedA;
    int tempB = seedB;
    
    if (seedA > seedB){
            base = seedA;
    } else if (seedB > seedA) {
            base = seedB;
    } else {
        return base;
    }
    
    for (int t = days; t > 0; t--){
        seedA = seedA + SumDigits(seedA);
        seedB = tempB;
        for (int d = days; d > 0; d--){
            seedB = seedB + SumDigits(seedB);
            
            if (base == seedB){
                return base;
            }
        }
        base = seedA;
    }
    
    seedA = tempA;
    seedB = tempB;
    
    if (seedA > seedB){
            base = seedA;
    } else if (seedB > seedA) {
            base = seedB;
    } else {
        return base;
    }
        
    for (int t = days; t > 0; t--){
        seedB = seedB + SumDigits(seedB);
        seedA = tempA;
        for (int d = days; d > 0; d--){
            seedA = seedA + SumDigits(seedA);
            
            if (base == seedA){
                return base;
            }
        }
        base = seedB;
    }
        
    
    if (seedA > seedB){
            return seedA;
        } else {
            return seedB;
        }
}",0
zpen457,1697416252,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int SumDigits(int seed){
    int i = 0;
    int arr[20];
    while (seed != 0){
        arr[i] = seed % 10;
        seed = seed / 10;
        i++;
    }
    int sum = 0;
    for (int j = 0; j < i; j++){
        sum += arr[j];
    }
    return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    int base;
    int tempA = seedA;
    int tempB = seedB;
    
    if (seedA > seedB){
            base = seedA;
    } else if (seedB > seedA) {
            base = seedB;
    } else {
        return base;
    }
    
    for (int t = days; t > 0; t--){
        seedA = seedA + SumDigits(seedA);
        seedB = tempB;
        for (int d = days; d > 0; d--){
            seedB = seedB + SumDigits(seedB);
            
            if (base == seedB){
                return base;
            }
        }
        base = seedA;
    }
    
    seedA = tempA;
    seedB = tempB;
    
    if (seedA > seedB){
            base = seedA;
    } else if (seedB > seedA) {
            base = seedB;
    } else {
        return base;
    }
        
    for (int t = days; t > 0; t--){
        seedB = seedB + SumDigits(seedB);
        seedA = tempA;
        for (int d = days; d > 0; d--){
            seedA = seedA + SumDigits(seedA);
            
            if (base == seedA){
                return base;
            }
        }
        base = seedB;
    }
        
    
    if (seedA > seedB){
            return seedA;
        } else {
            return seedB;
        }
}",0
zpen457,1697416895,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int SumDigits(int seed){
    int i = 0;
    int arr[20];
    while (seed != 0){
        arr[i] = seed % 10;
        seed = seed / 10;
        i++;
    }
    int sum = 0;
    for (int j = 0; j < i; j++){
        sum += arr[j];
    }
    return sum;
}


int TallestVine(int seedA, int seedB, int days)
{
    int base = 0;
    int tempA = seedA;
    int tempB = seedB;
    
    if (seedA > seedB){
            base = seedA;
    } else {
            base = seedB;
    }
    
    for (int t = days; t > 0; t--){
        seedA = seedA + SumDigits(seedA);
        seedB = tempB;
        for (int d = days; d > 0; d--){
            seedB = seedB + SumDigits(seedB);
            
            if (base == seedB){
                return base;
            }
        }
        base = seedA;
    }
    
    seedA = tempA;
    seedB = tempB;
    
    if (seedA > seedB){
            base = seedA;
    } else if (seedB > seedA) {
            base = seedB;
    } else {
        return base;
    }
        
    for (int t = days; t > 0; t--){
        seedB = seedB + SumDigits(seedB);
        seedA = tempA;
        for (int d = days; d > 0; d--){
            seedA = seedA + SumDigits(seedA);
            
            if (base == seedA){
                return base;
            }
        }
        base = seedB;
    }
        
    
    if (seedA > seedB){
            return seedA;
        } else {
            return seedB;
        }
}",1
zshi453,1697256702,1,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int count1 = seedA;
    int count2 = seedB;
    int i = 0;
    int j;
    int k;
    int array1[1000000];
    int array2[1000000];
    array1[0] = seedA;
    array2[0] = seedB;
    int hundredth1,hundredth2,tenth1,tenth2,ones1,ones2;
    while (i!=days){
        hundredth1 = count1 / (int) 100;
        tenth1 = (count1 - hundredth1 * 100) / (int) 10;
        ones1 = count1 - hundredth1*100 - tenth1*10;
        count1 = count1 + hundredth1 + tenth1 + ones1;
        array1[i+1] = count1;
        
        hundredth2 = count2 / (int) 100;
        tenth2 = (count2 - hundredth2 * 100) / (int) 10;
        ones2 = count2 - hundredth2*100 - tenth2*10;
        count2 = count2 + hundredth2 + tenth2 + ones2;
        array2[i+1] = count2;
        
        i++;
    }
    for (j=0;j<=days;j++){
        for (k=0;k<=days;k++){
            if (array1[j] == array2[k] || array2[k] == array1[j]){
                return array1[j];
            }
        }
    }
    if ((count1)>(count2)){
        return count1;
    }
    else if ((count2)>(count1)){
        return count2;
    }
    else if ((count2)==(count1)){
        return count2;
    }
    else if (count1 == count2){
        return count 1;
    }
}",0
zshi453,1697256713,2,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int count1 = seedA;
    int count2 = seedB;
    int i = 0;
    int j;
    int k;
    int array1[1000000];
    int array2[1000000];
    array1[0] = seedA;
    array2[0] = seedB;
    int hundredth1,hundredth2,tenth1,tenth2,ones1,ones2;
    while (i!=days){
        hundredth1 = count1 / (int) 100;
        tenth1 = (count1 - hundredth1 * 100) / (int) 10;
        ones1 = count1 - hundredth1*100 - tenth1*10;
        count1 = count1 + hundredth1 + tenth1 + ones1;
        array1[i+1] = count1;
        
        hundredth2 = count2 / (int) 100;
        tenth2 = (count2 - hundredth2 * 100) / (int) 10;
        ones2 = count2 - hundredth2*100 - tenth2*10;
        count2 = count2 + hundredth2 + tenth2 + ones2;
        array2[i+1] = count2;
        
        i++;
    }
    for (j=0;j<=days;j++){
        for (k=0;k<=days;k++){
            if (array1[j] == array2[k] || array2[k] == array1[j]){
                return array1[j];
            }
        }
    }
    if ((count1)>(count2)){
        return count1;
    }
    else if ((count2)>(count1)){
        return count2;
    }
    else if ((count2)==(count1)){
        return count2;
    }
    else if (count1 == count2){
        return count1;
    }
}",0
zshi453,1697256927,3,"#include <stdio.h>

int TallestVine(int seedA, int seedB, int days)
{
    int count1 = seedA;
    int count2 = seedB;
    int i = 0;
    int j;
    int k;
    int array1[1000000];
    int array2[1000000];
    array1[0] = seedA;
    array2[0] = seedB;
    int hundredth1,hundredth2,tenth1,tenth2,ones1,ones2;
    while (i!=days){
        hundredth1 = count1 / (int) 100;
        tenth1 = (count1 - hundredth1 * 100) / (int) 10;
        ones1 = count1 - hundredth1*100 - tenth1*10;
        count1 = count1 + hundredth1 + tenth1 + ones1;
        array1[i+1] = count1;
        
        hundredth2 = count2 / (int) 100;
        tenth2 = (count2 - hundredth2 * 100) / (int) 10;
        ones2 = count2 - hundredth2*100 - tenth2*10;
        count2 = count2 + hundredth2 + tenth2 + ones2;
        array2[i+1] = count2;
        
        i++;
    }
    for (j=0;j<=days;j++){
        for (k=0;k<=days;k++){
            if (array1[j] == array2[k] || array2[k] == array1[j]){
                return array1[j];
            }
        }
    }
    if ((count1)>(count2)){
        return count1;
    }
    else if ((count2)>(count1)){
        return count2;
    }
    else if ((count2)==(count1)){
        return count2;
    }
    else if (count1 == count2){
        return count1;
    }
    else{
        return 0;
    }
}",0
zwan373,1697440571,1,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int grow(int seed, int days) {
    while (days--) {
        seed += sumOfDigits(seed);
    }
    return seed;
}

int TallestVine(int seedA, int seedB, int days) {
    for (int i = 1; i <= days; i++) {
        seedA += sumOfDigits(seedA);
        seedB += sumOfDigits(seedB);

        if (seedA == seedB) {
            return seedA;
        }
    }

    return seedA > seedB ? seedA : seedB;
}

int main() {
    printf(""Tallest vine = %d\n"", TallestVine(501, 491, 8));
    printf(""Tallest vine = %d\n"", TallestVine(429, 501, 8));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 7));
    printf(""Tallest vine = %d\n"", TallestVine(501, 399, 8));
    return 0;
}
",0
zwan373,1697440581,2,"#include <stdio.h>

int sumOfDigits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int grow(int seed, int days) {
    while (days--) {
        seed += sumOfDigits(seed);
    }
    return seed;
}

int TallestVine(int seedA, int seedB, int days) {
    for (int i = 1; i <= days; i++) {
        seedA += sumOfDigits(seedA);
        seedB += sumOfDigits(seedB);

        if (seedA == seedB) {
            return seedA;
        }
    }

    return seedA > seedB ? seedA : seedB;
}
",0
zwan373,1697446999,3,"#include <stdio.h>

int TallestVine(int a, int b, int n) {
    if (n == 0) return a;
    if (n == 1) return b;

    int curr = b;
    int prev = a;

    for (int i = 2; i <= n; i++) {
        int next = prev + curr - (i - 1);
        prev = curr;
        curr = next;
    }

    return curr;
}
",0
zwon694,1697187645,1,"int TallestVine(int seedA, int seedB, int days) 
{
    int i, j;
    int tempA = seedA;
    int tempB = seedB;
    int digit;
    int highest;
    int sumA = seedA;
    int sumB = seedB;

    for (i = 0; i < days; i++) { // compare every iteration of vine A with every iteration of vine B

        while (tempA != 0) {
            digit = tempA % 10; // modulus by 10 will find the last digit
            sumA = sumA + digit;

            tempA = tempA / 10; // divid by 10 to remove the digit just found
        }
        tempA = sumA; // update the temporary variable to the new total sum

        tempB = seedB; // initialising the variables for vine B to start from the seed
        sumB = seedB;

        for (j = 0; j < days; j++) {
            while(tempB != 0) {
                digit = tempB % 10;
                sumB = sumB + digit;

                tempB = tempB / 10;

            }
            tempB = sumB;

            if (sumA == sumB) { // if they are ever equal, immediately return
                return sumA;
            }
        }
    }

    if (sumA > sumB) {
        highest = sumA;
    } else if (sumB > sumA) {
        highest = sumB;
    }

    return highest;
}",1
zwu591,1697257146,1,"int grow(int height)
{
    int i = 0;
    int temp = height;
    int grow = 0;
    int now;

    while (temp > 9) { // While temp still more than one place, keep run the while loop
        now = temp; // store the temp value at the start every time in order to calculate the temp that will be use in the next while loop

        while (temp > 9) { // While temp still more than one place, keep run the while loop
            temp = temp / 10; // Use temp to divide 10 to find the heightest place number at the currently temp
            i++; // Count how many 10 has been divide
        }

        grow += temp; // Add the number up to grow
        temp = now - temp * (int)pow(10,i); // Find the new temp that will use in next loop to find the next place number
        i = 0; // Reset the i value
    }

    return (grow += temp);
}

int TallestVine(int seedA, int seedB, int days)
{
    int DayCounterA = 1;
    int DayCounterB = 1;

    while (DayCounterA <= days || DayCounterB <= days) {
        if (seedA < seedB && DayCounterA <= days) {
            seedA += grow(seedA);
            DayCounterA++;
        } else if (seedA == seedB) {
            return seedA;
        } else if (DayCounterB <= days) {
            seedB += grow(seedB);
            DayCounterB++;
        } else if (DayCounterA <= days) {
            seedA += grow(seedA);
            DayCounterA++;
        }
    } 

    if (seedA < seedB) {
        return seedB;
    } else if (seedA > seedB) {
        return seedA;
    }
}",0
zwu591,1697257229,2,"int grow(int height)
{
    int i = 0;
    int temp = height;
    int grow = 0;
    int now;

    while (temp > 9) { // While temp still more than one place, keep run the while loop
        now = temp; // store the temp value at the start every time in order to calculate the temp that will be use in the next while loop

        while (temp > 9) { // While temp still more than one place, keep run the while loop
            temp = temp / 10; // Use temp to divide 10 to find the heightest place number at the currently temp
            i++; // Count how many 10 has been divide
        }

        grow += temp; // Add the number up to grow
        temp = now - temp * (int)pow(10,i); // Find the new temp that will use in next loop to find the next place number
        i = 0; // Reset the i value
    }

    return (grow += temp);
}

int TallestVine(int seedA, int seedB, int days)
{
    int DayCounterA = 1;
    int DayCounterB = 1;

    while (DayCounterA <= days || DayCounterB <= days) {
        if (seedA < seedB && DayCounterA <= days) {
            seedA += grow(seedA);
            DayCounterA++;
        } else if (seedA == seedB) {
            return seedA;
        } else if (DayCounterB <= days) {
            seedB += grow(seedB);
            DayCounterB++;
        } else if (DayCounterA <= days) {
            seedA += grow(seedA);
            DayCounterA++;
        }
    } 

    if (seedA < seedB) {
        return seedB;
    } else if (seedA > seedB) {
        return seedA;
    } else {
        return seedA;
    }
}",1
zwu591,1697442882,3,"int grow(int height)
{
    if (height == 0)
    return 0;

    return (height % 10 + grow((height / 10)));
}

int TallestVine(int seedA, int seedB, int days)
{
    int DayCounterA = 1;
    int DayCounterB = 1;

    while (DayCounterA <= days || DayCounterB <= days) {
        if (seedA < seedB && DayCounterA <= days) {
            seedA += grow(seedA);
            DayCounterA++;
        } else if (seedA == seedB) {
            return seedA;
        } else if (DayCounterB <= days) {
            seedB += grow(seedB);
            DayCounterB++;
        } else if (DayCounterA <= days) {
            seedA += grow(seedA);
            DayCounterA++;
        }
    } 

    if (seedA < seedB) {
        return seedB;
    } else if (seedA > seedB) {
        return seedA;
    } else {
        return seedA;
    }
}",1
zyao804,1697338740,1,"#include <stdio.h>

int Summing(int seed)
{
    int sum = 0;
    int x = seed;

    while (x > 0) {
        sum = sum + (x % 10);
        x = x / 10;
    }

    return seed + sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int heightA = seedA;
    int heightB = seedB;
    
    for (int i = 0; i < days; i++) {
        
        for (int j=0;j<days;j++){
            if (heightA == heightB) {
                return heightB;
            } else {
                heightB =Summing(heightB);
            }
            if (heightA == heightB) {
                return heightB;
            }
        }
        heightA = Summing(heightA);
        heightB = seedB;
    }
    
    if (heightA > heightB) {
        return heightA;
    } else {
        return heightB;
    }
}",0
zyao804,1697340106,2,"#include <stdio.h>

int Summing(int seed)
{
    int sum = 0;
    int x = seed;

    while (x > 0) {
        sum = sum + (x % 10);
        x = x / 10;
    }

    return seed + sum;
}

int TallestVine(int seedA, int seedB, int days)
{
    int heightA = seedA;
    int heightB = seedB;

    if (seedA == seedB){
        return seedA;
    }
    
    for (int i = 0; i < days; i++) {
        heightB = seedB;
        heightA = Summing(heightA);
        for (int j=0;j<days;j++){
            heightB =Summing(heightB);
            
            if (heightA == heightB) {
                return heightB;
            }
        }
    }
    
   
    if (heightA > heightB) {
        return heightA;
    } else {
        return heightB;
    }
}",1
