upi,time,try,answer,rawfraction
aahk798,1695871244,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j; 
    for (i=0; i<NUM_ROWS; i++){ 
        for (j=0; j<NUM_COLS ; j++) { 
            if (board[i][j]==tile) {
            	*rowPos = i;
        		*colPos = j;
            } 
        }
    }
}
",1
aana675,1696124022,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row; 
                *colPos = col; 
                return; 
            }
        }
    }

    
    *rowPos = -1;
    *colPos = -1;
}",1
aaza463,1695617256,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == -1){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
abha257,1695951872,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
abro522,1695601571,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
acam267,1695858357,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int y = 0; y < NUM_ROWS; y++) {
        for(int x = 0; x < NUM_COLS; x++) {
            if(tile == board[y][x]) {
                *rowPos = y;
                *colPos = x;
            }
        }
    }
}",1
ache725,1696160158,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row=0; row < 4; row++){
		for (int col=0; col < 4; col++){
			if (board[row][col] == -1){
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
achi359,1696235955,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){

    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }}",1
acoc261,1695762805,1,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            return 0;
            }
        }
    }
}",0
acoc261,1695762979,2,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            }
        }
    }
}",1
adav221,1696153025,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; ++row) {
        for (int col = 0; col < NUM_COLS; ++col) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
            }
        }
    }

    *rowPos = -1; 
    *colPos = -1; 
}
",0
adav221,1696153267,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}",1
adey750,1696072570,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile ){
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
    
     *rowPos = -1; 
     *colPos = -1;
}",1
afal438,1695696773,1,"#define _CRT_NO_SECURE_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
afit324,1696148710,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_COLS; i++) {
        for (int j = 0; j < NUM_ROWS; j++) {
            if (board[j][i] == tile) {
                *rowPos = j;
                *colPos = i;
            }
        }
    }
    
}",1
agan859,1695868905,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int* r, * c;

	r = rowPos;
	c = colPos;

	int i, j;

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == tile) {
				*r = i;
				*c = j;
				return;
			}
		}
	}
}
",1
agay279,1695872153,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int col=0; col<NUM_COLS; col++) {
        for (int row=0;row<NUM_ROWS; row++) {
              if (board[row][col]==tile) {
                *rowPos=row;
                *colPos=col;
                return;
             }
        }
    }
}
",1
agou682,1696238011,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int row=0;row<NUM_ROWS; row++) {
        
        for (int col=0;col<NUM_COLS; col++) {
            
            if (board[row][col] == tile) {
                *rowPos=row;
                *colPos=col;
               
                return; 
            }
        }
    }
}
",1
ahac139,1695791003,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    for (int i = 0; i < NUM_COLS; i++)
    {
        for (int j = 0; j < NUM_ROWS; j++)
        {
            if (board[i][j] == tile)
            {
                *colPos = j;
                *rowPos = i;            
            }
        }    
    }

}",1
ahac223,1696226985,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for(int j = 0; j < NUM_COLS; j++){
        for(int i = 0; i < NUM_ROWS; i++){
            if(board[j][i] == tile){
                *rowPos = j;
                *colPos = i;
                return;
            }
        }
    }
    
}",1
ahai431,1696132555,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				rowPos = i;
				colPos = j;
			}
		}
	}
}",0
ahai431,1696132654,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ahas673,1695856854,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i<NUM_ROWS; i++){
        for (int j = 0; j<NUM_COLS;j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
ahij206,1696231477,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                printf(""Found at %d, %d\n"", rowPos, colPos);
                return;
            }
        }
    }
}",0
ahij206,1696231494,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                printf(""Found at %d, %d\n"", *rowPos, *colPos);
                return;
            }
        }
    }
}
",0
ahij206,1696232082,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    printf(""Found at %d, %d\n"", *rowPos, *colPos);
    return;
}
",0
ahij206,1696232270,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
ahua579,1695703924,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
ahus071,1696154884,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int i=0;i<NUM_ROWS;i++)
	{
		for(int j = 0; j <NUM_COLS; j++)
		{
			if(board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ajam744,1695957679,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    *rowPos = -1;
    *colPos = -1;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *rowCol = j;
            }
        }
    }
    
    return 0;
}",0
ajam744,1695957910,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    *rowPos = -1;
    *colPos = -1;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
ajeo563,1696048968,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {

			if (board[i][j] == tile) {

				rowPos = i;
				colPos = j;

			}


		}

	}
}",0
ajeo563,1696049562,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {

			if (board[i][j] == tile) {

				*rowPos = i;
				*colPos = j;
				return;
			}

		}

	}
}",1
ajhz010,1695706851,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; i < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = j/NUM_COLS;
                *colPos = j%NUM_COLS;
                return;
            }
        }
    }
}",1
ajhz011,1695687695,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int rows, cols;

	for (rows = 0; rows < 4; rows++) {
		for (cols = 0; cols < 4; cols++) {
			if (board[rows][cols] == -1) {
				*colPos = cols;
				*rowPos = rows;
			}
		}
	}
}",1
ajhz216,1695871849,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ajhz318,1695705157,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	
	for (i = 0; i < 5; i++) {
		for (j = 0; j <5; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
			else {
				
			}
		}
	}
}",1
ajhz444,1695781457,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ajhz488,1696226079,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				rowPos = i;
				colPos = j;
			}
		}
	}
}",0
ajhz488,1696226243,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				rowPos = &i;
				colPos = &j;
			}
		}
	}
}",0
ajhz488,1696226348,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				rowPos = &i;
				colPos = &j;
				return void;
			}
		}
	}
}",0
ajhz488,1696226400,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ajin489,1695795207,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i,j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
ajoh511,1695766733,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}		

}",1
akam256,1696241997,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

for (int i = 0; i < NUM-ROWS; i++) {
for (int j = 0; j < NUM_COLS; j++) { 
if (board[i][j] == -1) {
*rowPos = i;
*colPos = j;
return; 
}
}
}



}",0
akam256,1696242008,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

for (int i = 0; i < NUM_ROWS; i++) {
for (int j = 0; j < NUM_COLS; j++) { 
if (board[i][j] == -1) {
*rowPos = i;
*colPos = j;
return; 
}
}
}



}",1
akam677,1696242805,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // Tile found, exit the function
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}

int main() {
    int board[NUM_ROWS][NUM_COLS] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {-1, 13, 14, 15}
    };
    int row, col;

    FindTile(board, -1, &row, &col);

    if (row != -1 && col != -1) {
        printf(""Found at %d, %d\n"", row, col);
    } else {
        printf(""Tile not found.\n"");
    }

    return 0;
}
",0
akam677,1696243054,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // Tile found, exit the function
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}

int main() {
    int board[NUM_ROWS][NUM_COLS] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {-1, 13, 14, 15}
    };
    int row, col;

    FindTile(board, -1, &row, &col);

    if (row != -1 && col != -1) {
        printf(""Found at %d, %d\n"", row, col);
    } else {
        printf(""Tile not found.\n"");
    }

    return 0;
}
",0
akam677,1696244146,3,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // Tile found, exit the function
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}

int main() {
    int board[NUM_ROWS 4][NUM_COLS 4] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {-1, 13, 14, 15}
    };
    int row, col;

    FindTile(board, -1, &row, &col);

    if (row != -1 && col != -1) {
        printf(""Found at %d, %d\n"", row, col);
    } else {
        printf(""Tile not found.\n"");
    }

    return 0;
}
",0
aker238,1695615164,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int row, col, i, j;
    
    for (i=0;i<(NUM_ROWS);i++){
        for (j=0;j<(NUM_COLS);j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",0
aker238,1695615234,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i, j;
    
    for (i=0;i<(NUM_ROWS);i++){
        for (j=0;j<(NUM_COLS);j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
akin699,1696068413,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
akmu146,1696158171,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return; // Tile found, exit the function
			}
		}
	}

}",1
akod059,1696055531,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_COLS; i++) {
		for (int j = 0; j < NUM_ROWS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
akri368,1696236638,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);
{
	int h;
	int v;

	for (h = 0; h < NUM_ROWS; h++) {
		for (v = 0; v < NUM_COLS; v++) {
			if (tile == board[h][v]) {
				*rowPos = h;
				*colPos = v;
			}
		}
	}
}",0
akri368,1696236749,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int h;
	int v;

	for (h = 0; h < NUM_ROWS; h++) {
		for (v = 0; v < NUM_COLS; v++) {
			if (tile == board[h][v]) {
				*rowPos = h;
				*colPos = v;
			}
		}
	}
}",1
akwo440,1696166072,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int col = 0; col < NUM_COLS; col++){
		for (int row = 0; row < NUM_ROWS; row++){
			if (board[row][col] = -1){
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",0
akwo440,1696166123,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int col = 0; col < NUM_COLS; col++){
		for (int row = 0; row < NUM_ROWS; row++){
			if (board[row][col] == -1){
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
alum086,1695757066,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                // Tile found, set the row and column positions using pointers
                *rowPos = i;
                *colPos = j;
                return; // Exit the function once the tile is found
            }
        }
    }
}

int main() {
    int board[NUM_ROWS][NUM_COLS] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {-1, 13, 14, 15}
    };

    int row, col;
    FindTile(board, -1, &row, &col);
    printf(""Empty tile is at row=%d and col=%d.\n"", row, col);

    return 0;
}
",0
amac853,1696195756,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int rows;
    int cols;
    for (rows = 0; rows < 4; rows++)
    {
        for (cols = 0; cols < 4; cols++)
        {
            
            if (board[rows][cols] == tile)
            {
              
              *rowPos = rows;
              *colPos = cols;
              
            }
        }
    }

}",1
amag544,1696222251,1,"#include <stdio.h>


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int column = 0; column < NUM_COLS; column++) {
            if (board[row][column] == tile) {
                *rowPos = row;
                *colPos = column;
                return; 
            }
        }
    }
}",1
amah664,1696228247,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j; 

	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile) {
				*colPos = j;
				*rowPos = i;

				return; 
			}
		}
	}
}",1
amal783,1695863273,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
amar516,1695699409,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int x;
int y;

for (x = 0; x < NUM_ROWS; x++){
	for (y = 0; y < NUM_COLS; y++){
		if (tile == board[x][y]){
			rowPos = x;
			colPos = y;
			}
		
		}
	}
return rowPos, colPos;
}",0
amar516,1695699612,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int x;
int y;

for (x = 0; x < NUM_ROWS; x++){
	for (y = 0; y < NUM_COLS; y++){
		if (tile == board[x][y]){
			*rowPos = x;
			*colPos = y;
			}
		
		}
	}
return;
}",1
amar704,1695627901,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){

    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}",1
amat407,1695764657,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
  for (int i=0; i<NUM_ROWS;i++) {
      for (int j=0; j<NUM_COLS; j++) {
          if (board[i][j]==tile) {
              *rowPos=i;
              *colPos=j;
          }
      }
  }
}",1
amcm539,1696073074,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
/*We need to use a nested for loop to examine each element of the array/board*/
int i = 0;
int j =0;

for (i = 0; i < NUM_ROWS; i++) {
	for (j = 0; j < NUM_COLS; j++) {
		/*If element is -1, record the index position onto the two pointers*/
		if (board[i][j] == tile) {
			*rowPos = i;
			*colPos = j;
		}
	}
}
}",1
amhk647,1695699680,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i = 0; i < NUM_ROWS; i++) { // go through rows
		for (int j = 0; j < NUM_COLS; j++) { // go through columns
			if (board[i][j] == tile) { // find empty tile
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
amok249,1695620395,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS;i++) {
        for (j = 0; j < NUM_COLS;j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
amur986,1696162547,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	int collocation;
	int rowlocation;


	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			int value;
			value = board[i][j];
			if (value == tile) {

				rowlocation = i;

				collocation = j;


			}
		}
	}
	return;
}",0
amur986,1696198593,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
    int i;
    int j;

    


    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            int value;
            value = board[i][j];
            if (value == tile) {

                *rowPos = i;

                *colPos = j;
           
                return;
            }
        }
    }
}",1
aosm976,1696244335,1,"printf(""Found at 3, 0"");",0
apan786,1696226299,1,"#include <stdio.h>
{
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
        
}",0
apan786,1696226310,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
        
}",1
apat750,1695854523,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i=0; i < NUM_ROWS; i++){
        for (int j =0; j< NUM_COLS; j++){
            if (board[i][j]== tile){
                *rowPos= i;
                *colPos=j;
                
            }
        }
    }
    
}",1
apat824,1695948116,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
 
 int row = -1;
 int col = -1;
    for (int i = 0; i<NUM_ROWS; i++){
        for (int j=0; j<NUM_COLS; j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
        
    }
    
}",0
apat824,1695948258,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
 
 *rowPos = -1;
 *colPos = -1;
 
    for (int i = 0; i<NUM_ROWS; i++){
        for (int j=0; j<NUM_COLS; j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
        
    }
    
}",1
apen181,1696063007,1,"#include <stdio.h>

/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++){
        for ( j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                 return;
            }
        }
        
    }

}",1
apre444,1696244190,1,"#include <stdio.h>

/*The function, FindTile is for a tile sliding game. It locates the specified tile 
of interest, then setting two pointers, called rowPos and colPos to store the 
coordinates of the tile. It is given inputs of an array with size NUM_ROWS and NUM_COLS
which represents the tile game.
Author: Amy Prebble*/
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    /*Initialising pointers to values not yet found*/
    *rowPos = -1;
    *colPos = -1;
    /*Setting up a nested For loop to search through rows (i), then columns (j) of the tile*/
    for (int i=0; i<NUM_ROWS; i++) {
        for (int j=0; j<NUM_COLS; j++) {
            if (board[i][j]==tile) {
                *rowPos=i;
                *colPos=j;
                printf(""Found at (%d, %d)\n"", i, j);
            }
        }
    }
}",0
apre444,1696244253,2,"#include <stdio.h>

/*The function, FindTile is for a tile sliding game. It locates the specified tile 
of interest, then setting two pointers, called rowPos and colPos to store the 
coordinates of the tile. It is given inputs of an array with size NUM_ROWS and NUM_COLS
which represents the tile game.
Author: Amy Prebble*/
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    /*Initialising pointers to values not yet found*/
    *rowPos = -1;
    *colPos = -1;
    /*Setting up a nested For loop to search through rows (i), then columns (j) of the tile*/
    for (int i=0; i<NUM_ROWS; i++) {
        for (int j=0; j<NUM_COLS; j++) {
            if (board[i][j]==tile) {
                *rowPos=i;
                *colPos=j;
                return;
            }
        }
    }
}",1
apur448,1696104720,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
aqu284,1696231104,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int r = 0; r < 4; r++) {
		for (int c = 0; c < 4; c++) {
			if (board[r][c] == -1) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
}",1
arah160,1695716988,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i=0; i < NUM_ROWS; i++) {
        for (int j=0; j< NUM_COLS; j++) {
            if (board[i][j]==tile) {
                *rowPos = i; *colPos = j;
                return;
            }

        }
    }

}
",1
arus530,1695622458,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < 4; i++){
        for (int j = 0; j< 4; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }           
        }
    }
}
",1
aryu462,1696229763,1,"#include <stdio.h>

#define NUM_ROWS 4 
#define NUM_COLS 4 

void FindTile(int board[NUM_ROWS][NUM_COLS], int* rowPos, int* colPos)
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *colPos = col;
                *rowPos = row; 
                return; // tilefound, exiting function. 
            }
        }
    }
    
    *colPos = -1;
    *rowPos = -1; 
}",0
aryu462,1696229829,2,"#include <stdio.h>

#define NUM_ROWS 4 
#define NUM_COLS 4 

void FindTile(int board[NUM_ROWS][NUM_COLS], int* rowPos, int* colPos, int tile)
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *colPos = col;
                *rowPos = row; 
                return; // tilefound, exiting function. 
            }
        }
    }
    
    *colPos = -1;
    *rowPos = -1; 
}",0
aryu462,1696229946,3,"#include <stdio.h>

#define NUM_ROWS 4 
#define NUM_COLS 4 

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // tilefound, exiting function. 
            }
        }
    }
    *rowPos = -1; 
    *colPos = -1;
}",1
asaa285,1696227127,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int toFind, int row, int col) {
    // Write C code here
    for (int i = 0; i<NUM_ROWS; i++){
        for (int j = 0; j<NUM_COLS; j++){
            if (board[i][j] == toFind){
                row = i;
                col = j;
            }
        }
    }
}",0
asaa285,1696227773,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int toFind, int *row, int *col) {
    // Write C code here
    for (int i = 0; i<NUM_ROWS; i++){
        for (int j = 0; j<NUM_COLS; j++){
            if (board[i][j] == toFind){
                *row = i;
                *col = j;
            }
        }
    }
}",1
asah845,1696063531,1,"
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

int i, j;
*rowPos = 0;
*colPos = 0;

for (i = 0; i < NUM_ROWS; i++) {
	for (j = 0; j < NUM_COLS; j++) {
		if (board[i][j] == tile) {
		*rowPos = i;
		*colPos = j;
		}

	}
}

}",1
ashe298,1696232871,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for(int row=0;row<NUM_ROWS; row++){
        for(int col=0;col<NUM_COLS; col++){
            if (board[row][col]==tile){
                *rowPos=row;
                *colPos=col;
                return;
            }
        }
    }
    rowPos = -1;
    colPos = -1;
}
",0
ashe298,1696232883,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for(int row=0;row<NUM_ROWS; row++){
        for(int col=0;col<NUM_COLS; col++){
            if (board[row][col]==tile){
                *rowPos=row;
                *colPos=col;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}
",1
ashi565,1695809410,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; // Tile found, exit the function
            }
        }
    }
    // If the tile is not found, you can set rowPos and colPos to -1 or some other suitable value.
    *rowPos = -1;
    *colPos = -1;
}
",1
asim819,1695887453,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {

		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}

		}

	}
}",1
aski294,1695802933,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int r = 0; r < NUM_ROWS; r++) {
		for (int c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
} ",1
asmi629,1696239988,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j; 
                return; 
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
atay777,1696061532,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;
	for (i = 0; i < NUM_ROWS; i++)	{
		for (j = 0; j < NUM_COLS; j++)	{
			if (board[i][j]==tile)	{
				*rowPos=i;
				*colPos=j;
			}
		}
	}

	
}
",1
atee059,1695605418,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {

int i, j;

for (i = 0; i < NUM_ROWS; i++){
    for (j = 0; j < NUM_COLS; j++){
        
        if (board[i][j] == tile){
            *rowPos = i;
            *colPos = j;
        }
    }
}

}",1
atho643,1695894246,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j =0; i < NUM_COLS; j++) {
            if (board[i][j] == tile)
            {
                rowPos = i;
                colPos = j;
                return;
            }
        }
        
    }
    
}",0
atho643,1695894279,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j =0; i < NUM_COLS; j++) {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
        
    }
    
}",0
atho643,1695894957,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j =0; j < NUM_COLS; j++) {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
        
    }
    
}",1
athu157,1695791912,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	*rowPos = -1;
	*colPos = -1;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}
",1
atup175,1696233119,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++;){
        for (int j = 0; j < NUM_COLS; j++;){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",0
atup175,1696233157,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
avan381,1696038046,1,"void FindTile(int board[NUM_ROWS][NUM_COLS],int tile, int *rowPos, int *colPos) {
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++){
            
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
            
        }
    }
    
    
}",1
awal599,1696237749,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
    int i;
    int j;
    for (i=0; i<NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++){
      if (board[i][j] == tile)   {
          *rowPos=i;
          *colPos=j;
      } 
      }
    }
}",1
awar747,1696234080,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row; 
                *colPos = col; 
                return;      
            }
        }
    }
  
    *rowPos = -1;
    *colPos = -1;
}",1
awil907,1695707573,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int Rows;
    int Cols;
    for (Rows = 0; Rows < NUM_ROWS; Rows++) {
        for (Cols = 0; Cols < NUM_COLS; Cols++) {
            if (board[Rows][Cols] == tile) {
                *rowPos = Rows;
                *colPos = Cols;
            }
        }
    }
}",1
awri757,1695700212,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
ayan607,1696134570,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{	int i,j;

	for (i = 0; i < 4; i++){
		for (j = 0; j < 4; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
ayou303,1695700658,1,"#include <stdio.h>


#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS],int tile, int* rowPos, int* colPos) {

	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile){
				*rowPos = row;
				*colPos = col; 
			}
		}

	}

}
",1
ayou533,1696191240,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i; 
                *colPos = j;
                return;      
            }
        }
    }
}",1
ayua214,1696228170,1,"#include <stdio.h>

#define NUM_ROWS 3
#define NUM_COLS 3

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;  // Tile found, exit the function
            }
        }
    }
    // If tile is not found, set rowPos and colPos to -1
    *rowPos = -1;
    *colPos = -1;
}
",0
ayua214,1696228205,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;  // Tile found, exit the function
            }
        }
    }
    // If tile is not found, set rowPos and colPos to -1
    *rowPos = -1;
    *colPos = -1;
}",1
bate521,1696224670,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
bcar662,1696127445,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; i < NUM_COLS; i++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
			
		}
	}
}",0
bcar662,1696128040,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
bcha389,1695695980,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{

	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}

		}
	}
}",1
bcha726,1695764556,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	
	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
bcos422,1695647906,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	*rowPos = 0;
	*colPos = 0;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
bcru157,1695697338,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    int row, col;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j <  NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",0
bcru157,1695698160,2,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j <  NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
besk864,1696140528,1,"void FindTile(int board[4][4], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            
        if (board[j][i] == tile) {
            
           *rowPos = j;
           *colPos = i;
           
           
        }
    }

    
    }
    
}",1
bfis965,1695768642,1,"for (int i = 0; i<NUM_ROWS; i++) {
        for (int j = 0; j<NUM_ROWS; j++) {
            if (board[i][j] == tile) { 
                *rowPos = i;
                *colPos = j;
            }
        }
    }",0
bfis965,1695768943,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i<NUM_ROWS; i++) {
        for (int j = 0; j<NUM_ROWS; j++) {
            if (board[i][j] == tile) { 
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
bfla774,1696214011,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				i = &rowPos;
				j = &colPos;
			}

		}
	}
}
",0
bfla774,1696215121,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}

		}
	}
}
",1
bgib630,1695795505,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_COLS; i++)
	{
		for (int j = 0; j < NUM_ROWS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
bgru726,1696204026,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
bguo360,1695618657,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
bhua898,1695619023,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int r = 0; r < NUM_ROWS; r++) {
	for (int c = 0; c < NUM_COLS; c++) {
		if (board[r][c] == tile) {
			*rowPos = r;
			*colPos = c;
		}
	}
}
}",1
bjin223,1696064080,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int row=0; row< NUM_ROWS; row++) {
    for (int col=0; col< NUM_COLS; col++){
        if (board[row][col]==tile){
            *rowPos = row;
            *colPos = col;
            return;
        }
    }
}
*rowPos=-1;
*colPos=-1;
}",1
bjon836,1695844036,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				rowPos = i;
				colPos = j;
				return;
			}
		}
	}
}",0
bjon836,1695844123,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
bkho028,1695778965,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    tile = -1;
    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
blar030,1695783322,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int x;
    int y;
     for(y=0; y<NUM_ROWS; y++) {
        for(x=0; x<NUM_COLS; x++) {
            if(board[y][x]==tile){
            *rowPos = y;
            *colPos = x;
            
            break;
        }
        }
    }
}
",1
bli482,1695786974,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++)
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}

	}


}",1
bli775,1695654758,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                
            }
        }
    }
    
   
    *rowPos = -1;
    *colPos = -1;
}
",0
bli775,1695726020,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return; 
			}
		}
	}
	
	*rowPos = -1;
	*colPos = -1;",0
bli775,1695726042,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return; 
			}
		}
	}
	",0
bli775,1695726228,4,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // Tile found, exit the function
            }
        }
    }
    // If tile is not found, set rowPos and colPos to -1
    *rowPos = -1;
    *colPos = -1;
}",1
blin888,1696121366,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++)
	} if (board [i,j] == tile) {
	*rowPos = i;
	*colPos = j;

	return;
}
}",0
blin888,1696121597,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board [i][j] == tile) {
				*rowPos = i;
				*colPos = j;

				return;
			}
		}
	}
	
}",1
bmac148,1696217902,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i < NUM_ROWS; i++){
	for (int j = 0; j < NUM_COLS; j++) {
		if (board[i][j] == tile) {
			*rowPos = i;
			*colPos = j;
		}
	}
}

}",1
bora417,1695859596,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	// Nested for loop to search for tile 
	int i, j;
    // Pre-setting -1 if tile is not found 
    *rowPos = -1; 
    *colPos = -1;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
		}
	}

}",1
bpak212,1696221153,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    *rowPos = -1;
    *colPos = -1;

    for (int row = 0; row < NUM_ROWS; row++) 
    {
        for (int col = 0; col < NUM_COLS; col++) 
        {
            if (board[row][col] == tile) 
            {
            // here we are giving the row and column a new position
                *rowPos = row; 
                *colPos = col; 
            }
        }
    }
}",1
bpat907,1695957065,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	return;
}",1
bril841,1696221641,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}",1
bsil719,1695777534,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS -1; i++){
        for (int j = 0; < NUM_COLS; j++){
            if (board[i][j] == tile){
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
        
    }
    *rowPos = -1;
    *colPos = -1;
return;
}",0
bsil719,1695777568,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
        
    }
    *rowPos = -1;
    *colPos = -1;
return;
}",1
bvau704,1695777434,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    
    
    for (int i = 0; i <= NUM_ROWS - 1; i++) {
        for (int j = 0; j <= NUM_COLS - 1; i++) {
            
            if (board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    //if not found
    *rowPos = -1;
    *colPos = -1;
}

",0
bvau704,1695777516,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    
    
    for (int i = 0; i <= NUM_ROWS - 1; i++) {
        for (int j = 0; j <= NUM_COLS - 1; j++) {
            
            if (board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    //if not found
    *rowPos = -1;
    *colPos = -1;
}

",1
bwis161,1695696811,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
				break;
			}
		}
	}
}
",1
bwoo348,1696217681,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *row, int *col) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile){
                *row = i;
                *col = j;
                return;
            }
        }
    }
}",1
byiu331,1695851838,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j; 
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}

		}
	}

}",1
byul423,1695706204,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (tile == board[i][j]) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
cada577,1695895183,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    int i, j;
    
    for (i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            
            if(board[i][j] == tile ){
                *rowPos = i;
                *colPos = j;
                
            }
        }
    }
    
  
}
",1
cana544,1695728587,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; i++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",0
cana544,1695847028,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
cang688,1695986894,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i,j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                //find the tile position
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    //if tile is not found set to -1
    *rowPos = -1;
    *colPos = -1;

}",1
cbee072,1695699657,1,"void FindTile(int board[4][4], int tile, int *rowPos, int *colPos) {
    
    int i;
    int j;
    
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            }
        }
    }
}",1
cben375,1696129594,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}
}",1
cbro223,1695618835,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int i = 0; i < NUM_ROWS; i++) {
		for(int j = 0; j < NUM_COLS; j++) {
			int currentValue = board[i][j];
			if(currentValue == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
cbro435,1695785131,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
for(int i=0;i<NUM_ROWS;i++){
    for(int j=0;j<NUM_COLS;i++) {
        if (board[i][j]==tile){
            *rowPos=i;
            *colPos=j;
            return;
        }
    }
}
}",0
cbro435,1695804274,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
for(int i=0;i<NUM_ROWS;i++){
    for(int j=0;j<NUM_COLS;j++) {
        if (board[i][j]==tile){
            *rowPos=i;
            *colPos=j;
         return;
        }
    }
}
}",1
cbro989,1695704228,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int r, c;
r = c = 0;

for (int r = 0; r <= NUM_ROWS; r++){
    for (int c = 0; c <= NUM_COLS; c++){
        if (board[r][c] == tile)
        {*rowPos = r;
        *colPos = c;}
    }
}
}
",0
cbro989,1695704283,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

for (int r = 0; r <= NUM_ROWS; r++){
    for (int c = 0; c <= NUM_COLS; c++){
        if (board[r][c] == tile)
        {*rowPos = r;
        *colPos = c;}
    }
}

}",1
cbur703,1695943815,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row, col;
    for (row=0; row < NUM_ROWS; row++) {
        for (col=0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
            }
        }
    }
}",1
ccha663,1696058858,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for ( int j = 0; j< NUM_COLS; j++) {
            if (FindTile[i][j] = tile) {
                *rowPos = i;
                *colPos = j;
                return;
            
            } 
        }
    }
    
    
    
}",0
ccha663,1696059057,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for ( int j = 0; j< NUM_COLS; j++) {
            if (FindTile[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            
            } 
        }
    }
    
    
    
}",0
ccha663,1696059568,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    
}
",1
ccha854,1696044705,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i=0; i<NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++) {
            if (board[i][j]==tile) {
                *rowPos=i;
                *colPos=j;
                
            }
        }
    }
}",1
cche441,1695612035,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
cche873,1695807848,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
cdel568,1695699563,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
cdin152,1696044177,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; i++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return 0;
			}
		}
	}
}",0
cdin152,1696044487,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; i++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
cdin152,1696045192,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
cdin268,1695695539,1,"void FindTile(int board[4][4], int tile, int *rowPos, int *colPos) {
    int i;
    int j;
    
    
    
    for (i = 0; i<4; i++) {
        for (j = 0; j<4; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
cdsi208,1696226913,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
   
        if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            return;
        }
   
   
   
    }
  }
}",1
cgal160,1696234743,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	int row;
	int col;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
				row = *rowPos;
				col = *colPos;
			}
		}
	}
}",0
cgal160,1696234862,2,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* row, int* col)
{
	int i;
	int j;
	int row;
	int col;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == -1) {
				*row = i;
				*col = j;
			}
		}
	}
}",0
cgal160,1696234904,3,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* row, int* col)
{
	int i;
	int j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == -1) {
				*row = i;
				*col = j;
			}
		}
	}
}",1
cgaz516,1695692043,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
chua804,1696216950,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row; 
                *colPos = col; 
                return; 
            }
        }
    }
}",1
civa625,1696164982,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    *rowPos = -1;
    *colPos = -1;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
cjun818,1696229919,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int rows = 0; rows < NUM_ROWS; rows++) 
	{
		for (int cols = 0; cols < NUM_COLS; cols++) 
		{
			if (board[rows][cols] == tile) 
			{
				*rowPos = rows;
				*colPos = cols;
				return;
			}
		}
	}
}",1
clee482,1696170923,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    int i,j;
    for(i=0; i<NUM_ROWS; i++)
    {
        for(j=0; j<NUM_COLS; j++)
        {
            if(board[i][j]== tile)
            {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    *rowPos == i;
    
 
}",0
clee482,1696170974,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    int i,j;
    for(i=0; i<NUM_ROWS; i++)
    {
        for(j=0; j<NUM_COLS; j++)
        {
            if(board[i][j]== tile)
            {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
 
}",1
cleu746,1695887924,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    int row;
    int col;
    
    for (i=0; i<NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}",0
cleu746,1695887941,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    
    for (i=0; i<NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}",1
clob269,1695788402,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i = 0; i <= 4; i++) {
		for (int j = 0; j <= 4; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
				break;
			}
		}
	}



}",1
cmac377,1696049769,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
   int element, row, column;
   
   for(int i = 0; i < NUM_ROWS; i++){
       for(int k = 0; k < NUM_COLS; k++){
           element = board[i][k];
           if(tile == element){
               row = i;
               column = k;
               
           }
       }
   }
   
   rowPos = &row;
   colPos = &column;
}",0
cmac377,1696051472,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
   int element, row, column;
   
   
   
   for(int i = 0; i < NUM_ROWS; i++){
       for(int k = 0; k < NUM_COLS; k++){
           element = board[i][k];
           if(tile == element){
               row = i;
               column = k;
               
           }
           
           
       }
   }
   
   *rowPos = row;
   *colPos = column;
   
}",1
cmad989,1695780883,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j ;
	for (i = 0; i < NUM_ROWS; i++) {
			for (j = 0; j < NUM_COLS; j++) {
				if (board[i][j] == -1) {
					*rowPos= i;
					*colPos= j;
				}

			}

	}
}",1
cmas527,1695988507,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
for (i = 0; i < NUM_ROWS; i++) {
for (j = 0; j < NUM_COLS; j++) { 
if (board[i][j] == -1) { 
 *rowPos = i; *colPos = j; 
return; 
}
}
}
}",1
cmcm317,1696205685,1,"/* ENGGEN131 (2022) - Lab 9 (25th - 30th September, 2023)
   EXERCISE SEVEN and EIGHT - Sliding Tile Puzzle
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	i = 0;
	j = 0;
	for (i=0; i<NUM_ROWS; i++) {
		for (j=0; j<NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}

		}
	}
}",1
cmia215,1695688146,1,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *row, int *col)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*row = i;
				*col = j;
			}
		}
	}
}",1
cmot464,1695615928,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for(j = 0; j < NUM_ROWS; j++){
		for(i = 0; i < NUM_COLS; i++){
			if(board[j][i] == tile){
				*rowPos = j;
				*colPos = i;
			}
		}
	}
}",1
cnai408,1696226659,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i;
    int j;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            
            if (board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
                
            }
        }
    }
}",1
cnie825,1696167191,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    // Initialize row and column positions incase tile not found 
    *rowPos = -1;
    *colPos = -1;

    // Loop through array
    for (int i = 0; i < NUM_ROWS; ++i) {
        for (int j = 0; j < NUM_COLS; ++j) {
            if (board[i][j] == tile) {
                // Store positions in the pointers
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
coli772,1695611379,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
couy656,1695700482,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
csan114,1695786567,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{;

	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
cset571,1695629078,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
csin574,1695856012,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i;
int j;
for (i = 0; i < NUM_ROWS; i++) {
	for (j = 0; j < NUM_COLS; j++) {
		if (board[i][j] == tile) {
			*rowPos = i;
			*colPos = j;
		}
	}
}
}
",1
cste189,1695772397,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
ctof106,1696234821,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

int x,y;
for(x=0;x<NUM_ROWS;x++)
{
    for(y=0;y<NUM_COLS;y++)
    {
        if(board[x][y]==tile)
        {
            *rowPos = x;
            *colPos = y;
        }
    }
}",0
ctof106,1696234984,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
    for(int x=0;x<NUM_ROWS;x++)
    {
        for(int y=0;y<NUM_COLS;y++)
        {
            if(board[x][y]==tile)
            {
                *rowPos = x;
                *colPos = y;
            }
        }
    }
}",1
ctub889,1696227455,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
}",1
cugn667,1696221102,1,"
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4





void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
    for (int x = 0; x < NUM_ROWS; x = x + 1)
    {
      for (int y = 0; y < NUM_COLS; y = y + 1){
           if ( board[x][y] == tile ){ 
                 
                 *rowPos = x;
                 *colPos = y;
                 return 0;
    
        
              }
        }
    }
   *rowPos = -1;
   *colPos = -1;
    
}",0
cugn667,1696221137,2,"
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4





void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
    for (int x = 0; x < NUM_ROWS; x = x + 1)
    {
      for (int y = 0; y < NUM_COLS; y = y + 1){
           if ( board[x][y] == tile ){ 
                 
                 *rowPos = x;
                 *colPos = y;
                 return ;
    
        
              }
        }
    }
   *rowPos = -1;
   *colPos = -1;
    
}",1
cwei506,1696051125,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	int row, col;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",0
cwei506,1696051150,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
cwu200,1696220167,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
  for (i = 0, i < NUM_ROWS, i++){
    for (j = 0, j < NUM_COLS, j++){
      if (board[i][j] == tile){
        *rowPos = i;
        *colPos = j;
        return
      }
    }
  }
}",0
cwu200,1696220406,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
  int i;
  int j;
  for (i = 0; i < NUM_ROWS; i++){
    for (j = 0; j < NUM_COLS; j++){
      if (board[i][j] == tile){
        *rowPos = i;
        *colPos = j;
        return;
      }
    }
  }
}
",1
cyan312,1695958427,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
cyiu210,1695781492,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    
    for (i = 0; i < NUM_ROWS; i++)  {
        for (j = 0; j < NUM_COLS; j++)  {
            if (board[i][j] == tile)  {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
dbar153,1695786356,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
dcha468,1696218341,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    int i, x; 
    
    for (i = 0; i < NUM_ROWS; i++) { 
        for (x = 0; x < NUM_COLS; x++) { 
            
            if (board[i][x] == tile) {
                *rowPos = i; 
                *colPos = x; 
                
                return; 
            } 
                
            
        }
        
    }
        
        
 
}
",1
dche306,1696073477,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;  // Tile found, exit the function
            }
        }
    }
    // If the tile is not found, you might want to handle this case or return an error.
    // For this exercise, I'll assume the tile will always be found.
}",1
deri361,1695621373,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i,j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
dfor626,1695782517,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_ROWS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
dgal735,1695809662,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
 {
	
		for (int row = 0; row < NUM_ROWS; row++) {
			for (int col = 0; col < NUM_COLS; col++) {
				if (board[row][col] == tile) {
					*rowPos = row;
					*colPos = col;
					return; // Found the tile (even if not) exit the function
				}
			}
		}
	
	}",1
dha524,1695770617,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
dhah941,1696222586,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
dhar714,1695709618,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j ++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
dhen760,1695696946,1,"void FindTile(int board[4][4], int number, int *row, int *col) {

    for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
        if (board[i][j] == number) {
        *row = i;
        *col = j;
        }
        }
    }

    return 0;
}",0
dhen760,1695697125,2,"void FindTile(int board[4][4], int number, int *row, int *col) {

    for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
        if (board[i][j] == number) {
        *row = i;
        *col = j;
        }
        }
    }
}
",1
dhul688,1695698546,1,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i, j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    
}",1
dkha055,1695631405,1,"void FindTile(int board[NUM_ROWS][NUM_COLS],int search,int *rowPos,int *colPos) {
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == search) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    
}",1
dkim848,1695850257,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (i = 0; i < NUM_COLS; i++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",0
dkim848,1695850421,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; i++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",0
dkim848,1695856253,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
dkur670,1695872794,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{	int i,j;
	for (i=0; i < NUM_ROWS; i++){
		for (j=0; j < NUM_COLS; j++) {
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
dli630,1696134481,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i = 0;
    int j = 0;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
dlob194,1695712985,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i <= NUM_ROWS; i++) {
        for (j=0; j <= NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
dma765,1696150159,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }

}",1
dmar494,1695690018,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i=0; i<NUM_ROWS; i++){
        for (int j=0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
dmcn107,1696144227,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i<NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
dmun793,1696180152,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
dosb979,1695779858,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 //Initialise i and j as integers that are equal to 0
    int i=0;
    int j=0;
    
    //Nested for loop to cycle through all the the values in the board
    for (i=0; i<NUM_COLS; i++){
        for (j=0; j<NUM_ROWS; j++){
            //If statement to test whether the array value is equal to the tile value of interest
            if (board[i][j] == tile){
                *rowPos = j;
                *colPos = i;
            }
        }
    }
}
",0
dosb979,1695779900,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 //Initialise i and j as integers that are equal to 0
    int i=0;
    int j=0;
    
    //Nested for loop to cycle through all the the values in the board
    for (i=0; i<=NUM_COLS; i++){
        for (j=0; j<=NUM_ROWS; j++){
            //If statement to test whether the array value is equal to the tile value of interest
            if (board[i][j] == tile){
                *rowPos = j;
                *colPos = i;
            }
        }
    }
}
",0
dosb979,1695779977,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 //Initialise i and j as integers that are equal to 0
    int i=0;
    int j=0;
    
    //Nested for loop to cycle through all the the values in the board
    for (i=0; i< NUM_COLS; i++){
        for (j=0; j < NUM_ROWS; j++){
            //If statement to test whether the array value is equal to the tile value of interest
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
dpar783,1696153240,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i = 0, j = 0;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				break;
			}
		}
	}
}",1
dpat391,1695684444,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i < NUM_ROWS; i++){
    for (int j = 0; j < NUM_COLS; j++){
        if (board[i][j] == tile){
            rowPos = i;
            colPos = j;
        }
    }
}
}",0
dpat391,1695684502,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i < NUM_ROWS; i++){
    for (int j = 0; j < NUM_COLS; j++){
        if (board[i][j] == tile){
            &rowPos = i;
            &colPos = j;
        }
    }
}
}",0
dpat391,1695769157,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i < NUM_ROWS; i++){
    for (int j = 0; j < NUM_COLS; j++){
        if (board[i][j] == tile){
            row = i;
            col = j;
        }
    }
}
}",0
dpat391,1695770685,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i < NUM_ROWS; i++){
    for (int j = 0; j < NUM_COLS; j++){
        if (board[i][j] == tile){
            *rowPos = i;
            *colPos = j;
            return;
        }
    }
}
}",1
dpat674,1695806196,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
int rowNumber=0;
int colNumber;
while (rowNumber<NUM_ROWS){
    colNumber=0;
    while (colNumber<NUM_COLS){
        if (board[rowNumber][colNumber]==tile){
        *rowPos=rowNumber;
        *colPos=colNumber;
    }
    colNumber=colNumber+1;
}
rowNumber=rowNumber+1;
}
}",1
dpet289,1696236264,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i = 0;
	int row, col;
	while (i <= NUM_ROWS * NUM_COLS - 1) {
		if (i == tile) {
			row = (tile - 1) / 4;
			col = (tile - 1) % 4;
		}
		i++;
	}
}",0
dric234,1695775194,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int rows;
	int cols;
	for (rows = 0; rows < NUM_ROWS; rows++) {
		for (cols = 0; cols < NUM_COLS; cols++) {
			if (board[rows][cols] == tile) {
				*rowPos = rows;
				*colPos = cols;
				return;
			}
		}
	}
}",1
drob588,1696223742,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
droj056,1696222076,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
dryu303,1695974062,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    i=0;
    j=0;
    for (i=0; i<4; i++)
    {
        for (j=0; j<4; j++)
        {
            if (board[i][j]==tile)
            {
            *rowPos=i;
            *colPos=j;   
            }
        }
    }
}",1
dsan845,1696240792,1,"#include <stdio.h>


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;  
                *colPos = col;  
                return;  
            }
        }
    }
   
}
",1
dsaw164,1695776754,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for(int i = 0; i < NUM_ROWS; i++){
	for(int j = 0; j < NUM_COLS; j++){
		if(board[i][j] == tile){
			*rowPos = i;
			*colPos = j;
		}
	}
}
}",1
dsin316,1695814061,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i2;
	int j2;

	for (i2 = 0; i2 < NUM_ROWS; i2++) {
		for (j2 = 0; j2 < NUM_COLS; j2++) {
			if (board[i2][j2] == tile) {
				*rowPos = i2;
				*colPos = j2;
			} 
		}
	}

}",1
dstr542,1695984544,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}

		}
	}
	return;
}",1
dstr542,1695987534,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}

		}
	}
	return;
}",1
dsut709,1696038913,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
dtem664,1696241455,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (j = 0; j < NUM_ROWS; j++){
		for (i = 0; i < NUM_COLS; i++) {
			if (tile == board[j][i]) {
				*rowPos = j;
				*colPos = i;
			}
		}
	}
}",1
dten781,1696241818,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int found;
	int i;

	found = 0;
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; i < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = board[i];
				*colPos = board[j];
			}
		}
	}
	
}
",0
dten781,1696242402,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; i < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	
}
",0
dten781,1696243627,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	
}
",1
dtie151,1695712983,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{

	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

			}
		}
	}
}",1
dtol781,1695780617,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for(i = 0; i < NUM_ROWS; i++) {
		for(j = 0; j < NUM_COLS; j++) {
			if( board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}

	}
}",1
dtua408,1696243281,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
            
        }
    return;
}",0
dtua408,1696243331,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
            
        }
    }
    return;
}",1
dver839,1696218026,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == -1)
			{
				*rowPos = i;
				*colPos = j;
			}	
		}
}",1
dvu878,1696139153,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	// iterate through the tiles
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {

			// check if if value is -1
			if (board[i][j] == tile) {
				// rearrange values
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}

}",1
dwar594,1695783523,1,"#include <stdio.h>

void FindTile(int board [NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    
    *rowPos = -1;
    *colPos = -1;
    
    for (int i = 0 ; i < NUM_ROWS ; i++){
        for (int j = 0 ; j < NUM_COLS ; j++){
            if (board[i][j] == tile){
                
            
            *rowPos = i;
            *colPos = j;
            
            return;
            }
        }
    }


}",1
dwu617,1695964721,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
dyu343,1695613284,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	
	for (int row = 0; row < NUM_ROWS; row++)
	{
		for (int col = 0; col < NUM_COLS; col++)
		{
			if (board[row][col] == tile)
			{
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
dzha497,1695805296,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row;
    int col;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] = -1) {
                row = i;
                col = j;
            }
        }
    }
}",0
dzha497,1695806201,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row;
    int col;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",0
dzha497,1695806228,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
ealg928,1696238722,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *row_pos, int *col_pos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *row_pos = i;
                *col_pos = j;
                return;
            }
        }
    }
}",1
eara128,1695854871,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile ) {
				*rowPos = i;
				*colPos = j;
			} 	
		}
	}
}",1
earn712,1695868862,1,"#include <stdio.h>
#define NUM_ROWS 4 
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    int i;
    int j; 
    *rowPos=-1;
    *colPos=-1;
     
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile){
            *rowPos = i;
            *colPos = j;
            return; 
            } 
        }
    }
     
}",1
ebar824,1695763810,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (board[i][j] == tile){
                
                *rowPos =i;
                *colPos =j;

            }

               
        }
        
    }
    

}",1
echa931,1696227870,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
eche101,1695885312,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int row = 0; row < NUM_ROWS; row++) {
       for(int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                 *rowPos = row;
                 *colPos = col;
        }
    }
}
}",1
eche101,1696205597,2,"#include <stdio.h>


#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
eejl688,1696223294,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) 
{
    for (int row = 0; row < NUM_ROWS; row++) 
    {
        for (int col = 0; col < NUM_COLS; col++) 
        {
            if (board[row][col] == tile) 
            {
                return;
            }
        }
    }
}",0
eejl688,1696223715,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) 
{
    for (int row = 0; row < NUM_ROWS; row++) 
    {
        for (int col = 0; col < NUM_COLS; col++) 
        {
            if (board[row][col] == tile) 
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
eejl932,1695781743,1,"/* ENGGEN131 (2022) - Lab 9 (25th - 30th September, 2023)
   EXERCISE SEVEN and EIGHT - Sliding Tile Puzzle
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // Tile found, exit the function
            }
        }
    }

    // If the tile is not found, set the row and col positions to -1
    *rowPos = -1;
    *colPos = -1;
}",1
efra318,1695888158,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i = 0;
	int j = 0;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {

			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}

		}
	}
}",1
egho902,1695851739,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int x = 0; x < NUM_ROWS; x++);
    {
        for (y = 0; y < NUM_COLS; y++);
        {a
            if (board[x][y] == -1)
            {
            *rowPos = x;
            *colPos = y;
            }
        }
    }
}",0
egho902,1695851765,2,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int x = 0; x < NUM_ROWS; x++)
    {
        for (y = 0; y < NUM_COLS; y++)
        {a
            if (board[x][y] == -1)
            {
            *rowPos = x;
            *colPos = y;
            }
        }
    }
}",0
egho902,1695851848,3,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4]

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int x = 0; x < NUM_ROWS; x++)
    {
        for (y = 0; y < NUM_COLS; y++)
        {
            if (board[x][y] == tile)
            {
            *rowPos = x;
            *colPos = y;
            }
        }
    }
}",0
egho902,1695851954,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int x = 0; x < NUM_ROWS; x++)
    {
        for (y = 0; y < NUM_COLS; y++)
        {
            if (board[x][y] == tile)
            {
            *rowPos = x;
            *colPos = y;
            }
        }
    }
}


",0
egho902,1695851978,5,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int x = 0; x < NUM_ROWS; x++)
    {
        for (int y = 0; y < NUM_COLS; y++)
        {
            if (board[x][y] == tile)
            {
            *rowPos = x;
            *colPos = y;
            }
        }
    }
}


",1
ehan360,1696244299,1,"void FindTile(int board[4][4], int tile, int *rowPos, int *colPos) {
    
    int row;
    int column;
    
    for (row = 0; row < 4; row++)
  {
    for (column = 0; column < 4; column++)
        {
           printf(""board tile: %d\n"",board[row][column]);
           
           if (board[row][column] == -1) {
               rowPos = board[row];
               colPos = board[column];
           }
           
           
        }
  }
}",0
ehan360,1696244333,2,"void FindTile(int board[4][4], int tile, int *rowPos, int *colPos) {
    
    int row;
    int column;
    
    for (row = 0; row < 4; row++)
  {
    for (column = 0; column < 4; column++)
        {
           
           if (board[row][column] == -1) {
               rowPos = (float)board[row];
               colPos = (float)board[column];
           }
           
           
        }
  }
}
",0
ehua682,1696197119,1,"#include <stdio.h>


#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    
    

    // If the tile isn't found, you can either assign specific values to `rowPos` and `colPos`, or you can take appropriate action based on your requirements.
    
    *rowPos = -1; 
    *colPos = -1;
}",1
ejeo051,1695977147,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}",1
ekmu195,1695635891,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
elau447,1696101581,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

			}


		}
	}
}
",1
eles952,1696234197,1,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>



void FindTile(int board[4][4], int tile, int *rowPos, int *colPos)

{    
         for (int i=0; i < 4-1; i++){
        for (int j=0; j < 4-1; j++){
            if (board[i][j] == tile){
            *colPos = i;
            *rowPos = j;
            return;
        
    }
   }
     }
   }


",0
eles952,1696234442,2,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>



void FindTile(int board[4][4], int tile, int *rowPos, int *colPos)

{    
         for (int i=0; i < 4; i++){
        for (int j=0; j < 4; j++){
            if (board[i][j] == tile){
            *colPos = j;
            *rowPos = i;
            return;
        
    }
   }
     }
   }


",1
elia955,1696236821,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
else264,1695951396,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    
    int i, j;
    for (i=0;i<NUM_ROWS;i++){
        for (j=0;j<NUM_COLS;j++){
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
            }
        }
    }
}",1
ely207,1695693142,1,"// Find Tile finds the row index and column index of the missing tile
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}
",1
ema340,1695994221,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
emah834,1695865143,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i;
int j; 
    for (i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j; 
            }
            
        }
    }
}",1
emah921,1696119350,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int row = 0; row < NUM_ROWS; ++row) {
        for (int col = 0; col < NUM_COLS; ++col) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
emar189,1696229602,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    int i;
    int x;
    
    i=0;
    
    while (i<NUM_ROWS) {
        x=0;
        while (x<NUM_COLS) {
            if (board[i][x]==tile) {
                *rowPos=i;
                *colPos=x;
                return;
            }
            x=x+1;
        }
        i=i+1;
    }
}",1
eqiu349,1695695076,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	int i;
	int j;
	int rowPosition;
	int colPosition;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == -1) {
				 *rowPos = i;
				*colPos = j;
			}

		}

	}

}",0
eqiu349,1695695221,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				 *rowPos = i;
				*colPos = j;
			}

		}

	}

}",1
esia821,1696242749,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] = tile) {
				rowPos = *i;
				colPos = *j;
			}
		}
	}
}",0
esia821,1696243288,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
eteo952,1695861908,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    int row, col;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                row = i;
                col = j;

                *rowPos = row;
                *colPos = col;

                return;

            }
        }
    }
}",1
evic904,1696136419,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{

			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;

				return;
			}
		}
	}
}",1
ewil853,1695949923,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0;i<NUM_ROWS;i++){

		for (int j = 0;j<NUM_COLS;j++){
			if (board[i][j] == tile){
				*rowPos = i;
			    *colPos = j;
				return;
			}
		}
	}
	

}",1
exu922,1696242710,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
eyeo346,1696160911,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
fcoo305,1696160120,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}

		}
	}
}",1
fesp714,1695882552,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    // InitiLzing row and coloumn
    int row, col; 
    
    // Iterating through row and coloumns of 2-D array, searching for the tile.
    for (row = 0; row < NUM_ROWS; row++){
        for (col = 0; NUM_COLS < 3; col++) {
            if (board[row][col] == tile) {
                
                // Creating a pointer to an integer variable that will store the found postions
                *rowPos = row;
                *colPos = col;
                
            }
        }
    }
}",0
fesp714,1695883015,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    // Initializing row and coloumn
    int row, col; 
    *rowPos = -1;
    *colPos = -1;
    
    // Iterating through row and coloumns of 2-D array, searching for the tile.
    for (row = 0; row < NUM_ROWS; row++){
        for (col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                
                // Creating/updating a pointer to an integer variable that will sotre the find postions
                *rowPos = row;
                *colPos = col;
                
            }
        }
    }
}",1
fgor787,1696219906,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int a = 0; a < NUM_COLS; a++) 
        {
            if (board[i][a] == tile) 
            {
                *rowPos = i;
                *colPos = a;
                
                return;
            }
        }
    }
}
",1
fkee774,1695899950,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++) 
        {
            if (board[i][j] == tile) 
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
fobr691,1696232613,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
fwij709,1695632461,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
fwil727,1696112885,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;  // Tile found, exit the function
            }
        }
    }

    // If tile is not found, set rowPos and colPos to -1
    *rowPos = -1;
    *colPos = -1;
}
",1
fyan180,1696233927,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++)
    {
        for (int col = 0; col < NUM_COLS; col++)
        {
            if (board[row][col] == tile)
            {
                *rowPos = row;
                *colPos = col;
            }
        }
    }
}",1
gcha636,1695969761,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){

    int i;
    int w;

    for (i=0; i < NUM_ROWS; i++){
        for (w=0; w < NUM_COLS; w++){
            if (board[i][w] == tile){
                *rowPos = i;
                *colPos = w;

            }
        }
    }



}",1
ggao363,1695632871,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for(int i = 0; i < NUM_ROWS; i++){
        for(int j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
gge561,1695773257,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4



void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	int i;
	int j;


	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
gjom886,1696153926,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int r;
int c;
for (r = 0; r <= NUM_ROWS, r= r+1) {
 for (c = 0, r <= NUM_COLS, c = c+1) {
   if( board[r][c] = tile)_{
       rowPos = &r;
       colPos = &c;
   }
}",0
gjom886,1696153976,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int r;
int c;
for (r = 0; r <= NUM_ROWS; r= r+1) {
 for (c = 0; r <= NUM_COLS; c = c+1) {
   if( board[r][c] = tile)_{
       rowPos = &r;
       colPos = &c;
   }
}",0
gjom886,1696155422,3,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int r;
int c;
for (r = 0; r <= NUM_ROWS; r= r+1) {
 for (c = 0; r <= NUM_COLS; c = c+1) {
   if(board[r][c] = tile){
       *rowPos = r;
       *colPos = c;
   }
}",0
gjom886,1696155479,4,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int r;
int c;
for (r = 0; r <= NUM_ROWS; r= r+1) {
 for (c = 0; r <= NUM_COLS; c = c+1) {
   if(board[r][c] == tile){
       *rowPos = r;
       *colPos = c;
   }
}",0
gjom886,1696219300,5,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int r; // Initiliase the variable r for rows
int c; // Initiliase the variable c for cols
for( r = 0; r < NUM_ROWS; r = r + 1 ) { // Create a for loop which iterates through all the rows of the board
 for( c = 0; c < NUM_COLS; c = c + 1 ) { // Create a for loop which iterates through all the columns of the board
  if( board[r][c] == tile) { // If the tile iabout thes -1 then its empty and that location is stored in the desired pointers.
  *rowPos = r; // Stores the information about the row
  *colPos = c; // Stores the information about the column
     return;
}
}
}
}

",1
gmal045,1695680167,1,"#include <stdio.h>

void FindTile(int board[4][4], int tile, int *rowPos, int *colPos)
{
    for (int i=0;i < 4;i++)
    {
        for (int j=0;i < 4;i++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
} ",0
gmal045,1695680825,2,"#include <stdio.h>

void FindTile(int board[4][4], int tile, int *rowPos, int *colPos)
{
    for (int i=0;i < 4;i++)
    {
        for (int j=0;j < 4;j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
} ",1
gmoh887,1695695038,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == -1) {
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
gmoh887,1695697332,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
gpen695,1695895760,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++) 
        {
            if (board[i][j] == tile) 
            {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}
",1
gren419,1696240015,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
                rowPos = &i;
                colPos = &j;
            }
        }
    }

}",0
gren419,1696240875,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j,row,col;
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
                row = i;
                col = j;
                rowPos = &row;
                colPos = &col;
            }
        }
    } 

}",0
gren419,1696243969,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    rowPos = &i;
    colPos = &j;
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
                rowPos = &i;
                colPos = &j;
            }
        }
    } 

}",0
gren419,1696244003,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    rowPos = &i;
    colPos = &j;
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
                rowPos = i;
                colPos = j;
            }
        }
    } 

}",0
gren419,1696244120,5,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j,rows,cols;
    rowPos = &rows;
    colPos = &cols;
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
               rows = i;
               cols = j;
            }
        }
    } 

}",0
gren419,1696244270,6,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    i = 0; 
    j = 0;
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
               rows = i;
               cols = j;
            }
        }
    } 

}",0
gren419,1696244293,7,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    i = 0; 
    j = 0;
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
               rowPos = &i;
               colPos = &j;
            }
        }
    } 

}",0
gvan573,1696223043,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
gxu660,1695705304,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
gzho986,1695895992,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j]== tile) {
				rowPos[0]= i;
				colPos[0]= j;
				return; 
			}
		}
	}


}",1
hama210,1695851167,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j; 

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i; 
				*colPos = j; 
			}
		}
	}
}",1
haus879,1695901187,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	int found;
	found = 0;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				found = 1;
			}
				break;

		}
		if (found == 1)
			break;
	}
	if (found == 1) {
		*rowPos = i;
		*colPos = j;
	}
	else {
		*rowPos = -1;
		*colPos = -1;
	}


}",0
haus879,1695945939,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
	
}",1
hbas168,1696056826,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				rowPos = i;
				colPos = j;
			}
		}
	}
}",0
hbas168,1696056930,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
hber510,1695866883,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int index = -1;
    for(int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++) {
            if(board[i][j] == -1){
                *rowPos = i;
                *colPos = j;
            }
        }
        
    }
}",0
hber510,1695866928,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++) {
            if(board[i][j] == -1){
                *rowPos = i;
                *colPos = j;
            }
        }
        
    }
}",1
hbhe454,1696842424,1,"FindTile(int board[NUM_ROWS][NUM_COLS],int tiles,int *rowPOSITION,int*colPOSITION
{
    for(int i=0; i<NUM_ROWS; i++{
        for(int j=0; j<NUM_COLS; j++){
            if(board[i][j]==tiles){
                *rowPOSITION=i;
                *colPOSITION=j;
                
            }
        }
    }
}

",0
hbhe454,1696842490,2,"FindTile(int board[NUM_ROWS][NUM_COLS],int tiles,int *rowPOSITION,int*colPOSITION
{
    for(int i=0; i<NUM_ROWS; i++){
        for(int j=0; j<NUM_COLS; j++){
            if(board[i][j]==tiles){
                *rowPOSITION=i ;
                *colPOSITION=j ;
                
            }
        }
    }
}

",0
hbhe454,1696842527,3,"FindTile(int board[NUM_ROWS][NUM_COLS],int tiles,int *rowPOSITION,int*colPOSITION)
{
    for(int i=0; i<NUM_ROWS; i++) {
        for(int j=0; j<NUM_COLS; j++) {
            if(board[i][j]==tiles) {
                *rowPOSITION=i ;
                *colPOSITION=j ;
                
            }
        }
    }
}

",0
hbhe454,1696842647,4," void FindTile(int board[NUM_ROWS][NUM_COLS],int tiles,int *rowPOSITION,int*colPOSITION)
{
    for(int i=0; i<NUM_ROWS; i++) {
        for(int j=0; j<NUM_COLS; j++) {
            if(board[i][j]==tiles) {
                *rowPOSITION=i ;
                *colPOSITION=j ;
                
            }
        }
    }
}

",1
hbou314,1695768498,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; i < NUM_COLS; i++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
hbou314,1695768889,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
hcha410,1695896106,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for(int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }


    *rowPos = -1;
    *colPos = -1;

}",1
hche410,1696217985,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }

}",1
hche864,1695867748,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

			}
			


		}
	}
}",1
hcop563,1695705382,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
hcro730,1695788227,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}
",1
hdeg917,1696222176,1,"{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowpos = i;
				*colpos = j;
			}
		}
	}
}",0
hdeg917,1696222712,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
hgao080,1695619692,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
hgou636,1695883475,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int count = 0;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                count++;
            }
        }
    }

    if (count == 0) {
        *rowPos = -1;
        *colPos = -1;
    }
}
",1
hjoo911,1695854952,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    int i, j;
    
    for (i = 0 ; i < NUM_ROWS ; i++) {
       for (j = 0 ; j < NUM_COLS ; j++) {
        if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
        }
    }
    }
     
} ",1
hkah523,1696141539,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
/*author: Harshdeep Kahlon*/.

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {

                // Tile found, store its position in rowPos and colPos
                *rowPos = i;
                *colPos = j;
                return; // Exit the function as we found the tile

            }
        }
    }

    // If the tile is not found, set rowPos and colPos to -1 to indicate not found
    *rowPos = -1;
    *colPos = -1;
}",0
hkah523,1696241383,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
/*author: Harshdeep Kahlon*/

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {

                // Tile found, store its position in rowPos and colPos
                *rowPos = i;
                *colPos = j;
                return; // Exit the function as we found the tile

            }
        }
    }

    // If the tile is not found, set rowPos and colPos to -1 to indicate not found
    *rowPos = -1;
    *colPos = -1;
}",1
hkee941,1696242328,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }",0
hkee941,1696242699,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
hkim807,1696058643,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int rows = 0;
	int cols = 0;

	for (rows=0; rows<NUM_ROWS; rows++) {
		for (cols=0; cols<NUM_COLS; cols++) {
			if (board[rows][cols] == tile){
				*rowPos = rows;
				*colPos = cols;
			}
		}
	}

}",1
hkon883,1696243045,1,"void FindTile(int board[NUM_ROWS][NUM_ROWS], int tile, int *rowPos, int *colPos){
	for (int i=0; i < NUM_ROWS; i++){
		for(int j=0; j < NUM_ROWS ; i++){
			if board[i][j] == tile
				*rowPos=i
				*colPos=j
			reture;
		}
	}
}
",0
hkon883,1696244190,2,"void FindTile(int board[NUM_ROWS][NUM_COLS],int tile,int *rowPos,int *colPos){
	for (int i=0; i < NUM_ROWS; i++); {
		for (int j=0; j < NUM_COLS ; j++); {
			if (board[i][j] == tile) {
				*rowPos=i;
				*colPos=j;
		}
	}
}
}
",0
hkon883,1696244284,3,"void FindTile(int board[NUM_ROWS][NUM_COLS],int tile,int *rowPos,int *colPos){
	for (int i=0; i < NUM_ROWS; i++); {
		for (int j=0; j < NUM_COLS ; j++) {
			if (board[i][j] == tile) {
				*rowPos=i;
				*colPos=j;
		}
	}
}
}
",0
hkon883,1696244321,4,"void FindTile(int board[NUM_ROWS][NUM_COLS],int tile,int *rowPos,int *colPos){
	for (int i=0; i < NUM_ROWS; i++) {
		for (int j=0; j < NUM_COLS ; j++) {
			if (board[i][j] == tile) {
				*rowPos=i;
				*colPos=j;
		}
	}
}
}
",1
hlee999,1695775978,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	int count = 0;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				break;
			} 
		}
	}
}",0
hlee999,1695776892,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				break;
			} 
		}
	}
}",1
hleu459,1696236729,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                
                *rowPos = row;
                *colPos = col;
                
                return;
            }
        }
    }
}",1
hliu836,1695912238,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j ;
    for (i=0; i< NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    
}",1
hly852,1696213091,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
hma481,1696162037,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
hma481,1696162400,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
hmcm582,1695696260,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
	
}",1
hmel649,1695709525,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
hmof971,1695869577,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
hnew638,1695635108,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
			*rowPos = i;
			*colPos = j;
			};
		};
	};
}",1
hpan363,1696229432,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i <= NUM_ROWS; i++)
    {
        for (int j = 0; j <= NUM_COLS; j++)
        {
            if (board[i][j]==tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
hpat916,1695697518,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
hpir641,1695872481,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos=j;
			}
		}
	}
}",1
hrob997,1696159200,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i; 
	int j; 

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i; 
				*colPos = j; 

			}
		}
	}
}",1
hsan267,1695867161,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    int rowValue = 0;
    int colValue = 0;
    int value;
    
    for (i=0; i<NUM_ROWS;i++) {
        for (j=0;j<NUM_COLS;j++) {
            value = (board[i][j]);
            if (value == tile) {
                rowValue = i;
                colValue = j;
            }
        }
    }
    *colPos = colValue;
    *rowPos = rowValue;
    
}",1
hson435,1696235740,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i < NUM_ROWS, i++){
        for (int j = 0; j < NUM_COLS, j++){
            if board[i][j] == tile{
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    printf(""Found at %d, %d"", rowPos, colPos);
}",0
hson435,1696235892,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    printf(""Found at %d, %d"", *rowPos, *colPos);
}",1
htew916,1695967497,1,"#define _CRT_NO_WARNINGS
#include <stdio.h>

// Dimensions of the 2D Array.
#define NUM_ROWS 4
#define NUM_COLS 4

// This function should locate the tile of interest (which is specified in the tile parameter) and then set the two pointers (rowPos and colPos) to store the row and column position of the tile. 

// Define the function, FindTile.
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* row, int* col) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *row = i;
                *col = j;
                return; 
            }
        }
    }
    *row = -1;
    *col = -1;
}",1
htho943,1695626662,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int a=0;
	int b=0;

for (a=0; a<NUM_ROWS;a++){
	for (b=0; b<NUM_COLS; b++){
		if (board[a][b]==-1)
		{
		printf(""Found at %d, %d\n"",a,b);
		}
	}
}

}",0
htho943,1695711633,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
// author hamish thompson, to find the _ within the array
{
	int a=0;
	int b=0;
	int ifcount=0;
	int foundrow, foundcol;

for (a=0; a<NUM_ROWS;a++){
	for (b=0; b<NUM_COLS; b++){
		if (board[a][b]==-1)
		{
		foundrow=a;
		foundcol=b;
		}
	}
}
*rowPos=foundrow;
*colPos=foundcol;
}",0
htho943,1695711833,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
// author hamish thompson, to find the _ within the array
{
	int a=0;
	int b=0;
	int foundrow, foundcol;

for (a=0; a<NUM_ROWS;a++){
	for (b=0; b<NUM_COLS; b++){
		if (board[a][b]==-1)
		{
		foundrow=a;
		foundcol=b;
		}
	}
}
*rowPos=foundrow;
*colPos=foundcol;
}",1
htyl682,1696237100,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int rowPos, intcolPos)
{
    for(int i = 0; i < NUM_ROWS; i++){
        for(int j = 0; j < NUM_COLS; j++){
            if (board[NUM_ROWS][NUM_COLS]==tile){
                rowPos=&i;
                colPos=&j;
            }
        }
    }
}",0
htyl682,1696237123,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int i = 0; i < NUM_ROWS; i++){
        for(int j = 0; j < NUM_COLS; j++){
            if (board[NUM_ROWS][NUM_COLS]==tile){
                rowPos=&i;
                colPos=&j;
            }
        }
    }
}",0
htyl682,1696238374,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int rowPos, intcolPos) {
    *rowPos=-1;
    *colPos=-1;
    for(int i = 0; i < NUM_ROWS; i++){
        for(int j = 0; j < NUM_COLS; j++){
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
                printf(""%d %d"",i,j);
            }
        }
    }
}",0
htyl682,1696238389,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    *rowPos=-1;
    *colPos=-1;
    for(int i = 0; i < NUM_ROWS; i++){
        for(int j = 0; j < NUM_COLS; j++){
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
                printf(""%d %d"",i,j);
            }
        }
    }
}",0
htyl682,1696238397,5,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    *rowPos=-1;
    *colPos=-1;
    for(int i = 0; i < NUM_ROWS; i++){
        for(int j = 0; j < NUM_COLS; j++){
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
            }
        }
    }
}",1
hugn924,1696240965,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++){
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}
}",1
hwen116,1695693707,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i=0; i<NUM_ROWS; i++){
		for (j=0; j<NUM_COLS; j++){
			if (board[i][j]==tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
hwin877,1695863379,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{

	int y_loop = 0;
	int x_loop = 0;
	for (y_loop = 0; y_loop < NUM_ROWS; y_loop++)
	{
		for (x_loop = 0; x_loop < NUM_COLS; x_loop++)
		{
			if (board[y_loop][x_loop] == tile)
			{
				*rowPos = y_loop;
				*colPos = x_loop;
			}
		}
	}
}",1
hyan713,1695763194,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    for (i=0;i<NUM_ROWS;i++) {
        for (j=0;j<NUM_COLS;j++) {
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
hye071,1695749980,1,"/******************************************************************************

LAB 9(Find Tile question 7)

*******************************************************************************/
#include <stdio.h>


#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    
    int row;
    int col; 
    
    for(row=0; row<NUM_ROWS ; row=row+1){
       for (col=0; col<NUM_COLS; col=col+1){
           if (board[row][col]==tile){
               *rowPos=row;
               *colPos=col;
               return;
            
        }
    }
}

}",1
ibha186,1696119353,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	*rowPos = -1;
	*colPos = -1;	
    for (int i = 0; i < NUM_COLS; i++)
    {
        for (int j = 0; j < NUM_ROWS; j++)
        {
            int index = board[i][j];
            if (tile == index) {
                *rowPos = i;
                *colPos = j;
            }   
        }
    }
}",1
ibur427,1695723882,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_ROWS; j++) {
			if (board[i][j] == tile) {
			*rowPos = i ; 
			*colPos = j ; 
			}
		}
	}
}",1
iche428,1696149860,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int r=0; r<NUM_ROWS; r++) {
		for (int c=0; c<NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}

		}
	}
}",1
ihoo440,1696214522,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i <= NUM_ROWS; i++)
	{
		for (int j = 0; i <= NUM_COLS; j++)
		{
			if(board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}

		}
	}
}",0
ihoo440,1696215918,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; i < NUM_COLS; j++)
		{
			if(board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}

		}
	}
}",0
ihoo440,1696216769,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if(board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
                return;
			}

		}

	}
    
}",1
ikis164,1696027614,1,"#include <stdio.h>
#include <math.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j; 
            }
        }
    }
}",1
iko203,1695965107,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	for (int col = 0; col < NUM_COLS; col++) {
		for (int row = 0; row < NUM_ROWS; row++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}
}",1
ilee973,1696045417,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
    *rowPos = -1;
    *colPos = -1; 
    
    for (int i=0; i<NUM_ROWS; i++){
    for (int j=0; j<NUM_COLS; j++){
    if (board[i][j] == tile){
    
    *rowPos = i;
    *colPos = j;
    
    return;
    }
    }
    }
}
",1
imac384,1695850773,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	*rowPos = -1;
	*colPos = -1;

	for (int i = 0; i < NUM_ROWS;i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}

	}

}",1
imoh000,1695806605,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
		for (int i = 0; i < NUM_ROWS; i++) //creating a nested 'for' loop to iterate
		{
			for (int j = 0; j < NUM_COLS; j++) 
			{
				if (board[i][j] == tile) //searcing for a 'match'
				{
					*rowPos = i; //therefore will return at the current index else will be unchanged
					*colPos = j; //therefore will return at the current index else will be unchanged
					return;
				}
			}
		}

}

",1
iwes050,1695759144,1,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
    int j;
	for (i = 0; i < NUM_ROWS; i++) {
	    for (j = 0; j < NUM_COLS; j++) {
		    if (board[i][j] == tile) {
		    *rowPos = i;
            *colPos = j;
            return 1;
		    }
	    }
    }
    return 0;
}",1
iwil997,1696233196,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
  int row; 
  int col;
  
  for (row = 0; row < NUM_ROWS; row++) {
      for (col = 0; col < NUM_COLS; col++) {
          if (board[row][col] == tile) {
              
              *rowPos = row;
              *colPos = col;
        
          }
      }
  }
}
",1
iwoo382,1695699402,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ixia229,1696160101,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for(i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if ((board[i][j]) == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
			else{
				
			}
		}
	}
}",1
ixu871,1695872341,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
}
}",1
jahn224,1695792197,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for (i=0; i<NUM_ROWS; i++) {
        for (j=0; j <NUM_COLS; j++) {
            if (board[i][j]==tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
jaus241,1695779795,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++) {
        for(j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
jbag235,1696235562,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}
",1
jbam701,1696200466,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	*rowPos = -1;
	*colPos = -1;

	for (int i = 0; i < NUM_ROWS; i = i + 1) {
		for (int j = 0; j < NUM_COLS; i = i + 1) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
jbam701,1696200966,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	*rowPos = -1;
	*colPos = -1;
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i = i + 1) {
		for (j = 0; j < NUM_COLS; j = j + 1) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jbam753,1696236721,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                printf(""Found at %d, %d"", i, j);
                return; 
            }
        }
    }
}",0
jbam753,1696237104,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                printf(""Found at %d, %d"", i, j);
                return; 
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",0
jbis394,1696238823,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int row = 0; row<NUM_ROWS; row++)
{
for (int col = 0; col<NUM_COLS; col++)
{
if (board[row][col] == tile)
{
    *rowPos = row;
    *colPos = col;
return;
}
}
}
}",1
jbro301,1695712806,1,"#include <stdio.h>

// This defines the starting position of the puzzle.
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    int i;
    int j;
    for (i=0;i<NUM_ROWS;i++) {
    for (j=0;j<NUM_COLS;j++) {
    if (board[i][j]==tile) {
    *rowPos = i;
    *colPos= j;
    }
}
}
}",1
jbru537,1696232401,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int row; 
int col; 

for (row = NUM_ROWS-1; row>-1; row--){
for (col = NUM_COLS-1; col>-1; col--){
if (board[row][col]==tile){
*rowPos = row;
*colPos = col;
return;
}
}
}
}",1
jbuc296,1696242572,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int * rowp, int * colp) {

  for (int i = 0; i < 4; i++) {
    for (int j = 0; j < 4; j++) {
      if (board[i][j] == tile) {
        * rowp = i;
        * colp = j;
      }
    }
  }

}",1
jcha513,1695991153,1,"{
 for(int row=0; row<NUM_ROWS; row++) {
        for(int col=0; col<NUM_COLS; col++) {
            if (board[row][col]== tile) {
                *rowPos=row;
                *colPos=col;
                return;
            }
        }
    }
}",0
jcha513,1695991273,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 for(int row=0; row<NUM_ROWS; row++) {
        for(int col=0; col<NUM_COLS; col++) {
            if (board[row][col]== tile) {
                *rowPos=row;
                *colPos=col;
                return;
            }
        }
    }
}",1
jcha574,1695780919,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    
    
    for(i=0;i<NUM_ROWS;i++) {
        for(j=0;j<NUM_COLS;j++) {
            if (board[i][j]==tile) {
                *rowPos = i;
                *colPos = j;
                break;
            }

    }
    }
}",1
jcha972,1695803864,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return
			}
		}
	}

}",0
jcha972,1695805013,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	for (int i = 0; i < NUM_ROWS; i++) {
		
		for (int j = 0; j < NUM_COLS; j++) {
			
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
jche456,1696237288,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
jchi648,1696156089,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
               *rowPos = i;
               *colPos = j;
               return;
            }
        }
    }
}",1
jchu579,1695954349,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int r = 0; r < NUM_ROWS; r++)
	{
		for (int c = 0; c < NUM_ROWS; c++)
		{
			if (board[r][c] == tile)
			{
				*rowPos = r;
				*colPos = c;
			}
		}
	}
}",1
jcla431,1695705443,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jcla755,1695781965,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int row = 0; row<NUM_ROWS; row++)
	{
		for(int col = 0; col<NUM_COLS; col++)
		{
			if(board[row][col] == tile)
			{
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
jdal353,1696234504,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
	for (int row = 0; row < NUM_ROWS; row++) {
        
		for (int col = 0; col < NUM_COLS; col++) {
            
			if (board[row][col] == tile) {
                
				*rowPos = row;
                *colPos = col;
                
				return;
            }
        }
    }

}",1
jdea126,1695982880,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++); {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i-1][j-1] == tile) {
				*rowPos = i-1;
				*colPos = j-1;
			}
		}
	}
}",0
jdea126,1695983182,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jdu853,1695723867,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; i < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}	
}",0
jdu853,1695725057,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}	
}",1
jear460,1696237685,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int rowPos, intcolPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}",0
jear460,1696237980,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
    
}",1
jfen705,1695948000,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (tile == board[i][j]) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jfet156,1696197452,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

for (int rows = 0; rows < 4; rows++) {
    for (int cols = 0; cols < 4; cols++) {
        if (board[rows][cols] == tile) {
        *rowPos = rows;
        *colPos = cols;
        return;
        }
    }
}

}",1
jgeo610,1695903489,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jgol495,1695616862,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for(int r = 0; r < NUM_ROWS; r++){
        for(int c = 0; c < NUM_COLS; c++){
            if(board[r][c] == search){
                *row = r;
                *col = c;
                return;
            }
        }
    }
}",0
jgol495,1695616873,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int search, int* row, int* col){
    for(int r = 0; r < NUM_ROWS; r++){
        for(int c = 0; c < NUM_COLS; c++){
            if(board[r][c] == search){
                *row = r;
                *col = c;
                return;
            }
        }
    }
}",1
jhor229,1696220761,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int j,c;
  for (j = 0; j < NUM_ROWS; j++)
  {
    for (c = 0; c < NUM_COLS; c++)
    {
        if (board[j][c] == tile)
        {
          rowPos = &j;
          colPos = &c;
           printf(""Found at %d, %d\n"", j, c);
        }
    }
  }
}",0
jhor229,1696221067,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
  int j, c;
  for (j = 0; j < NUM_ROWS; j++) 
  {
    for (c = 0; c < NUM_COLS; c++) 
    {
      if (board[j][c] == tile) 
      {
        *rowPos = j;
        *colPos = c;
        printf(""Found at %d, %d\n"", j, c);
      }
    }
  }
}",0
jhor229,1696221078,3,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
  int j, c;
  for (j = 0; j < NUM_ROWS; j++) 
  {
    for (c = 0; c < NUM_COLS; c++) 
    {
      if (board[j][c] == tile) 
      {
        *rowPos = j;
        *colPos = c;
      }
    }
  }
}",1
jhor229,1696222078,4,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
  int r, c;
  for (r = 0; r < NUM_ROWS; r++) 
  {
    for (c = 0; c < NUM_COLS; c++) 
    {
      if (board[j][c] == tile) 
      {
        *rowPos = r;
        *colPos = c;
      }
    }
  }
}",0
jhor229,1696222087,5,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
  int r, c;
  for (r = 0; r < NUM_ROWS; r++) 
  {
    for (c = 0; c < NUM_COLS; c++) 
    {
      if (board[r][c] == tile) 
      {
        *rowPos = r;
        *colPos = c;
      }
    }
  }
}",1
jhwa027,1696159256,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    // Loop through each row.
    for(int i = 0; i < NUM_ROWS; i++) {
        // Loop through each column in the current row.
        for(int j = 0; j < NUM_COLS; j++) {
            if(board[i][j] == tile) {
                // Set the values at the memory locations pointed to by rowPos and colPos.
                *rowPos = i;
                *colPos = j;
                return; // Exit the function once the tile is found.
            }
        }
    }
}

",1
jjeo627,1696243145,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
				
			}
		}
}

}",1
jjon350,1696213356,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ int i,j;

  for (i=0; i < NUM_ROWS; i++){
	for (j=0; j < NUM_COLS; j++){
		if(board[i][j]==tile);
		*rowPos=i;
		*colPos=j;
	}

  }
return;
}",0
jjon350,1696213507,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ int i,j;

  for (i=0; i < NUM_ROWS; i++){
	for (j=0; j < NUM_COLS; j++){
		if(board[i][j]==tile){
		*rowPos=i;
		*colPos=j;
		}
	}

  }
return;
}",1
jjos057,1696159723,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
        if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
        }
    }
}
}",1
jjun879,1695825179,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row, col;
	for (row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile){
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
jkah253,1695984183,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    // loop through all elements (along rows)
    for (int r = 0; r < NUM_ROWS; r++) {
        for (int c = 0; c < NUM_COLS; c++) {
            
            // if element is tile, set rowpos and colpos
            if (board[r][c] == tile) {
                *rowPos = r;
                *colPos = c;
            }


        }
    }
}",1
jkan172,1695898081,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;

    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    } 

}",1
jkim828,1695704423,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
    for (i = 0; i < NUM_COLS; i++) {
        for (j = 0; j < NUM_ROWS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
jkim837,1695951048,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
jkim933,1696242008,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (*rowPos = 0; *rowPos < 4; (*rowPos)++) {
        for (*colPos = 0; *colPos < 4; (*colPos)++) {
            if (board[*rowPos][*colPos] == tile) {
                return rowPos;
                return colPos;
            }
        }
    }
}",0
jkim933,1696242341,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (*rowPos = 0; *rowPos < NUM_ROWS; (*rowPos)++) {
        for (*colPos = 0; *colPos < NUM_COLS; (*colPos)++) {
            if (board[*rowPos][*colPos] == tile) {
                return;
            }
        }
    }
}",1
jkim960,1695851310,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jlah077,1696202598,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row, col;
    for (row = 0; row < NUM_ROWS; row++)
    {
        for (col = 0; col < NUM_COLS; col++)
        {
            if (board[row][col] == tile)
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
jlal056,1695809434,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

	for (int i=0; i<4 ;i++) {
		for (int j=0; j<4 ; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
jlew699,1695873646,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++) 
        {
            if (board[i][j] == tile) 
            {
               rowPos = i;
               colPos = j;
            }
        }
    }
    
}",0
jlew699,1695873674,2,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++) 
        {
            if (board[i][j] == tile) 
            {
               *rowPos = i;
               *colPos = j;
            }
        }
    }
    
}",1
jli463,1695794074,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jli876,1695607515,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) for (int j = 0; i < NUM_COLS; j++) board[i][j] == tile ? *rowPos = i, *colPos = j : 0;
}",0
jli876,1695609368,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) for (int j = 0; j < NUM_COLS; j++) board[i][j] == tile ? *rowPos = i, *colPos = j : 0;
}",1
jli917,1696227660,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j ;
    for (i = 0; i<NUM_ROWS; i++) {
        for (j = 0; j<NUM_COLS; j++){
            if (board[i][j]==tile){
                *rowPos = i;
                *colPos = j;
                return
            }
        }
    }
}
",0
jli917,1696227811,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j ;
    for (i = 0; i<NUM_ROWS; i++) {
        for (j = 0; j<NUM_COLS; j++){
            if (board[i][j]==tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}
",1
jlia486,1695970092,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
  int row, col;
  // Iterate through every row
  for (row = 0; row < NUM_ROWS; row++) {
    // Iterate through every column
    for (col = 0; col < NUM_COLS; col++) {
      // Check if the current element has the same value as the tile 
      if (board[row][col] == tile) {
        // If so, record the row and column positions using pointers.
        *rowPos = row;
        *colPos = col;
        return; // return from the function if the tile was found.
      }
    }
  }

  // If the tile was not found, set value of rowPos and colPos to -1.
  *rowPos = -1;
  *colPos = -1;
}",1
jlia948,1696241387,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (board[i][j] == tile) 
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}
",0
jlia948,1696241684,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (board[i][j] == tile) 
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
jliu295,1696038450,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int rows = 0; i < NUM_ROWS; i++){
		for(int columns = 0; j < NUM_COLS; i++){
			if(board[rows][columns] == tile){
				*rowPos = rows;
				%colPos = columns;
			}
		}
	}
}",0
jliu295,1696038505,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int rows = 0; rows < NUM_ROWS; rows++){
		for(int columns = 0; columns < NUM_COLS; columns++){
			if(board[rows][columns] == tile){
				*rowPos = rows;
				*colPos = columns;
			}
		}
	}
}",1
jliu778,1695688131,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos=i;
				*colPos=j;
				break;
			}
		}
		
	}
}",1
jluo379,1695884807,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int rows;
	int cols;

	for(rows = 0; rows < NUM_ROWS; rows ++) {
		for(cols = 0; cols < NUM_COLS; cols ++) {
			if (board[rows][cols] == tile){
				rowPos = &rows;
				colPos = &cols;
				printf(""Found at %d, %d."", rowPos, colPos);
			}
		}
	}
	return;
}",0
jluo379,1695885054,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row;
	int col;

	for(row = 0; row < NUM_ROWS; row ++) {
		for(col = 0; col < NUM_COLS; col ++) {
			if (board[row][col] == tile){
				rowPos = &row;
				colPos = &col;
			}
		}
	}
	return;
}",0
jluo379,1695885361,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row, col;
	
	for(rows = 0; rows < NUM_ROWS; rows ++) {
		for(cols = 0; cols < NUM_COLS; cols ++) {
			if (board[row][col] == tile){
				rowPos = &rows;
				colPos = &cols;
				row = *rowPos;
				col = *colPos;
			}
		}
	}
	return;
}",0
jluo379,1695885414,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row, col, rows, cols;
	
	for(rows = 0; rows < NUM_ROWS; rows ++) {
		for(cols = 0; cols < NUM_COLS; cols ++) {
			if (board[rows][cols] == tile){
				rowPos = &rows;
				colPos = &cols;
				row = *rowPos;
				col = *colPos;
			}
		}
	}
	return;
}",0
jluo379,1695887852,5,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int rows, cols;
	
	for(rows = 0; rows < NUM_ROWS; rows ++) {
		for(cols = 0; cols < NUM_COLS; cols ++) {
			if (board[rows][cols] == tile){
				rows ++;
				cols ++;
				*rowPos = rows;
				*colPos = cols;
			}
		}
	}

	return;
}",0
jluo379,1695887885,6,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int rows, cols;
	
	for(rows = 0; rows < NUM_ROWS; rows ++) {
		for(cols = 0; cols < NUM_COLS; cols ++) {
			if (board[rows][cols] == tile) {
				*rowPos = rows;
				*colPos = cols;
			}
		}
	}

	return;
}",1
jmak320,1696164040,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i, j;
for (i = 0; i < NUM_COLS; i++) {
	for (j = 0; j < NUM_ROWS; j++) {
		if (board[i][j] == tile){
			*rowPos = i;
			*colPos = j;
		}
	}
}
}",1
jmat941,1696242381,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}",1
jmei608,1696161649,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	int i, j;
	for (i = 0; i <= 3; i++) {
		for (j = 0; j <= 3; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;				
			}
		}
	}
}",1
jmil737,1695717991,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

 void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
  
for (int i = 0; i < 4; i++){
    
    
    for (int j = 0; j < 4; j++){
        
    if (board[i][j] == -1){
    
        *rowPos = i;
        *colPos = j;
        
    }
    
    }

 }

}",1
jmul290,1695692891,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    
    for (i = 0; i <= 3; i++){
        for (j = 0; j <= 3; j++){
            
            if(board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}",1
joka775,1696243729,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; i < NUM_COLS; j++) {
			if (board[i, j] == tile) {
				*rowPos = i;
					* colPos = j;
			}

		}
	}
}",0
joka775,1696243781,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; i < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
					* colPos = j;
			}

		}
	}
}",0
joka775,1696243912,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; i < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
					* colPos = j;
					return;
			}

		}
	}
}",0
joka775,1696244021,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return; 
			}
		}
	}

}",1
jpar523,1696200707,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    rowPos = &i;
    colPos = &j;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                
             
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}
",0
jpar523,1696202382,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    *rowPos = i;
    *colPos = j;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            if (board[i][j] == tile){
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}
",0
jpar523,1696202484,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    *rowPos = i;
    *colPos = j;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            if (board[i][j] == tile){
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}
",0
jpar523,1696202535,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}
",1
jpar611,1696151731,1,"#include <stdlib.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;  // Exit the function once the tile is found
            }
        }
    }
}
",1
jpat915,1695864202,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
   int row;
   int col;
   
   for (row = 0; row < NUM_ROWS; row++) {
       for (col = 0; col < NUM_COLS; col++) {
           if (board[row][col] == tile) {
               *rowPos = row;
               *colPos = col;
               return;
           }
           
       }
   }

} ",1
jpau410,1695728814,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
jpaz106,1696229103,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
jpud993,1696167916,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 3; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	return;
}",0
jpud993,1696168160,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	return;
}
",1
jros811,1695850871,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jsan813,1696220983,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}",0
jsan813,1696221002,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jsch842,1696208433,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
    for (int row = 0; row < NUM_ROWS; row++)
    {
        for (int col = 0; col < NUM_COLS; col++)
        {
            if (board[NUM_ROWS][NUM_COLS] == tile)
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    
}",0
jsch842,1696208620,2,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++)
    {
        for (int col = 0; col < NUM_COLS; col++)
        {
            if (board[row][col] == tile)
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    
}",1
jshe464,1696216103,1," void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	 int i,j;
	 for (i = 0; i < NUM_ROWS; i++)
	 {
		 for (j = 0; j < NUM_COLS; j++)
		 {
			 if (board[i][j] == tile) 
			 {
				 *rowPos = i;
				 *colPos = j;
			 }
		 }
		 }
}",1
jshi444,1695815991,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{

	int i = 0;
	int j = 0;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
jsim418,1695621976,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i=0;i<NUM_ROWS;i++) { //i represents the rows. (vertical)
		for(int j = 0;i<NUM_COLS;i++){
			if(board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",0
jsim418,1695622395,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i=0;i<NUM_ROWS;i++) { //i represents the rows. (vertical)
		for(int j = 0;j<NUM_COLS;j++){
			if(board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}
",1
jsim643,1695931798,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
       for (int col = 0; col < NUM_COLS; col++) {
           if (board[row][col] == tile) {
               *rowPos = row;
               *colPos = col;
               return;
            }
        }
    }   

    *rowPos = -1;
    *colPos = -1;
}",1
jsta466,1695701260,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i <= NUM_ROWS; i++){
		for (int j = 0; j <= NUM_ROWS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;

			}
		}
	}

}",1
jsun284,1696139480,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
jvil318,1695783781,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i;
    int j;

    for(i=0;i<NUM_ROWS;i++){
        for(j=0;j<NUM_COLS;j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
jwed606,1695946996,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; ++i)
    {
        for (int j = 0; j < NUM_COLS; ++j)
        {
            int b_t = board[i][j];
            if (b_t == tile)
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
jwil813,1695780129,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile)
			{
				*rowPos = i;	
				*colPos = j;
			}

		}
	}
}",1
jwon248,1695708535,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 4; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
jwon253,1696055535,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
jwon323,1695780208,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *row, int *col)
{
    int i;
    int j;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *row = i;
                *col = j;
            }
        }
    }
}",1
jyan420,1695691762,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int row, col;
for (row = 0; row < NUM_ROWS; row++) {
	for (col = 0; col < NUM_COLS; col++) {
		if (board[row][col] == tile) {
			*rowPos = row;
			*colPos = col;
			return;
		}
	}
}
}",1
jyua529,1695804543,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++) {
            if(board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;

                return;
            }
            
        


            
        
        }
        
    }
}",1
jzho786,1696228561,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int found = 0; 

    for (int i = 0; i < NUM_ROWS && !found; i++) {
        for (int j = 0; j < NUM_COLS && !found; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                found = 1; 
            }
        }
    }
}
",1
kabb319,1695957146,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
kahk161,1695695652,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int x_pos, y_pos;
	for (y_pos = 0; y_pos < NUM_ROWS; y_pos++) {
		for (x_pos = 0; x_pos < NUM_COLS; x_pos++) {
			if (board[y_pos][x_pos] == -1) {
				*rowPos = y_pos;
				*colPos = x_pos;
			}
		}
	}
}",1
kbar402,1696230600,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    int i, j;
    *rowPos = -1;
    *colPos = -1;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for(j=0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}",1
kbha969,1695785439,1," #include <stdio.h>
 #define NUM_ROWS 4
 #define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
kcao565,1696060103,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;  
			}
		}
	}
	*rowPos = -1;
	*colPos = -1;
}",1
kcao657,1696127720,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	*rowPos = -1;
	*colPos = -1;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {

				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
kfep063,1696225287,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int j = 0; j < NUM_COLS; j++) {
        for (int i = 0; i < NUM_ROWS; i++) {
            if (board[j][i] == tile) {
                *rowPos = j;
                *colPos = i;
                return;
            }
        }
    }
}
",1
kfer833,1696215232,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; ++i) {
        for (int j = 0; j < NUM_COLS; ++j) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
   
   
    *rowPos = -1;
    *colPos = -1;
    
}
",1
kgra470,1695691174,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for(int i=0;i<NUM_ROWS;i++){
    for(int j=0;i<NUM_COLS;i++){
        if (board[i][j] == tile){
            *rowPos =i;
            *colPos= j;
        }
    }
}
}",0
kgra470,1695692007,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j< NUM_COLS; j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
              }
        }
    }

}",1
khew624,1696160089,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) 
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;  // Exit the function once tilefound.
            }
        }
    }

    // If no tike, set position to -1 to indicate that it wasn't found.
    *rowPos = -1;
    *colPos = -1;
}",1
kjoe685,1695994121,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (tile == board[i][j]) {
				*rowPos = i;
				*colPos = j;
				break;
			}
		}
	}
}",1
kjun638,1696061444,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i; 
				*colPos = j; 
				return; 
			}
		}
	}
}",1
kkha484,1696241174,1,"#include <stdio.h>


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;  
                *colPos = col;   
                return;         
            }
        }
    }
    
}",1
kkim985,1695781495,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	 }
	*rowPos = -1;
	*colPos = -1;
}",1
kkim985,1696215957,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	 }
}",1
klam376,1695981760,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i<NUM_ROWS; i++)	{
		for (int j = 0; j<NUM_COLS; j++)	{
			if (board[i][j] == tile)	{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
kluc619,1696223207,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
    int row, col; 
    for (row = 0; row < NUM_ROWS; row++) 
    { 
        for (col = 0; col < NUM_COLS; col++) 
        { 
            if (board[row][col] == tile) 
            { 
                *rowPos = row; 
                *colPos = col; 
            } 
        } 
    } 
}",1
kmag441,1696212441,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i = 0;
int j = 0;
for (i = 0; i < NUM_ROWS; i++){
    for(j = 0; j < NUM_COLS; j++){
        if(tile == board[i][j]){
            *rowPos = i;
            *colPos = j;
        }
    }
}
}",1
kmal768,1695788237,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
kmck133,1695616920,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}
",1
kmcv530,1695852019,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}

}",1
kng361,1696230687,1,"// Lab9ex7
// Author: Kai Ng

#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }

    
    *rowPos = -1;
    *colPos = -1;
}
",1
kpat303,1695609231,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                // Store the row and column positions of the tile
                *rowPos = row;
                *colPos = col;
                return; // Exit the function once the tile is found
            }
        }
    }

    // If the tile is not found, set rowPos and colPos to -1
    *rowPos = -1;
    *colPos = -1;
}
",1
kpau893,1695693493,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

				return;
				
			}
			
		}

		
	}
	*rowPos = -1;
	*colPos = -1;
}",1
kpay633,1695705609,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
kpir468,1696215993,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; ++i) {
        for (int j = 0; j < NUM_COLS; ++j) {
            if (board[i][j] == tile) {
                // Tile found, then update rowPos and colPos
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }


    *rowPos = -1;
    *colPos = -1;
}",1
kpla566,1696211485,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos,
              int *colPos) {

  for (int i = 0; i < NUM_ROWS; i++) {
    for (int j = 0; j < NUM_COLS; j++) {
      if (board[i][j] == tile) {
        printf(""found tile \n"");
   *rowPos = i;
    *colPos = j;
        return;
      
      }
    }
  }
}
",0
kpla566,1696211546,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos,
              int *colPos) {

  for (int i = 0; i < NUM_ROWS; i++) {
    for (int j = 0; j < NUM_COLS; j++) {
      if (board[i][j] == tile) {
   *rowPos = i;
    *colPos = j;
        return;
      
      }
    }
  }
}
",1
kqua446,1696179234,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row, col;

	for (row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}
",1
kraj720,1696207701,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++) 
        {
            if (board[i][j] == tile) 
            {
                *rowPos = i;
                *colPos = j;
                return;  
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}
",1
kraw552,1695779515,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	*rowPos = -1;
	*colPos = -1;

	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}

}",1
krec980,1695706495,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ksai757,1695688120,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (*(board + i * NUM_COLS + j) == tile) {
				*rowPos = i;
				*colPos = j;
			return; // Found the tile, exit the function
			}
		}
	}
}",0
ksai757,1695688589,2,"void FindTile(int* board, int tile, int* rowPos, int* colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (*(board + i * NUM_COLS + j) == tile) {
                *rowPos = i;
                *colPos = j;
                return; // Found the tile, exit the function
            }
        }
    }
}",0
ksai757,1696124426,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int r = 0; r < NUM_ROWS; r++) {
        for (int c = 0; c < NUM_COLS; c++) {
            if (board[r][c] == tile) {
                *rowPos = r;
                *colPos = c;
                return; // Found the tile, exit the function
            }
        }
    }
}",1
ksik996,1695624689,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_COLS; i++)
        for(int j = 0; j < NUM_ROWS; j++){
            if(board[j][i] == tile)
            *rowPos = j;
            *colPos = i;
        }
}",0
ksik996,1695625076,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < 4; i++){
        for(int j = 0; j < 4; j++){
            if(board[j][i] == tile){
            *rowPos = j;
            *colPos = i;
        }
        }
        }
}",1
kwan244,1695953850,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int find, int* posRow, int* posCol)
{
	int i, j;

	*posRow = -1;
	*posCol = -1;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == find) {
				*posRow = i;
				*posCol = j;

				return;
			}
		}
	}
}",1
kwan797,1695691971,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{    
    for(int i=0; i<NUM_ROWS; i++){
        for(int j=0; j<NUM_COLS; j++){
            if(board[i][j]==tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
kyoo839,1695875861,1,"#include <stdio.h>
    #define NUM_ROWS 4
    #define NUM_COLS 4
    
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
kyoo839,1695962169,2,"#include <stdio.h>
    #define NUM_ROWS 4
    #define NUM_COLS 4
    
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
kzha391,1696127544,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }",0
kzha391,1696228578,2,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }",0
kzha391,1696228703,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }",0
kzha391,1696229072,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                
            
            }
        }
    }
}",1
kzhu796,1695697720,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
		
}",1
laba812,1696159918,1,"#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0 ; i< NUM_ROWS ; i++){
        for (j = 0 ; j < NUM_COLS ; j ++){
            
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
lazz729,1695956098,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
lbla772,1696229516,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)


int i;
int j;
{
    
   for (i = 0; i = 3; i++)
   {
       for (j = 0; j = 3; j++)
       {
           if (board[i][j] == tile)
           {
               *rowPos = i;
               *colPos = j;
           }
           
       }
        
   }

}",0
lbla772,1696229644,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

int i;
int j;
    
   for (i = 0; i = 3; i++)
   {
       for (j = 0; j = 3; j++)
       {
           if (board[i][j] == tile)
           {
               *rowPos = i;
               *colPos = j;
           }
           
       }
        
   }

}",0
lbla772,1696230287,3,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i;
int j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}

		}

	}	
return;
}",1
lbou433,1695700970,1,"void FindTile(int board[4][4], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i <= 3; i++) {
		for (j = 0; j <= 3; j++) {
			if (board[i][j] == tile) {
				*rowPos= i;
				*colPos= j;
			}
		}
	}
}",1
lbyr117,1696209636,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;

    for(i=0;i<NUM_ROWS;i++)
    {
        for(j=0;j<NUM_COLS;j++)
       {
           if(board[i][j]==tile)
          {
            *rowPos=i;
            *colPos=j;
            }
        }
    }
}
",1
lcam453,1696225280,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_COLS; i++) {
        for (int j = 0; j < NUM_ROWS; j++){
            if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            }
        }
    }
}",1
lcan243,1695853132,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

			}
				

		}

	}
printf(""Found at %d, %d"", *rowPos, *colPos);

}",0
lcan243,1695853181,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

			}
				

		}

	}

}",1
lche668,1696153019,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{

    int result = -1;
	int i;
	int j;
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == result) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
lche668,1696153280,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{

    
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
lchu848,1696161138,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);

for (int i = 0; i < rows - 1; i++) {
    for (int j = 0; j <col - 1, j++){
        if (board[i][j] == -1) {
        row = i;
        col = j;
        rowPos = &row;
        colPos = &col;
        }
    }
}",0
lchu848,1696219691,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);

for (int row = 0; row < NUM_ROWS; row++) {
    for (int col = 0; col < NUM_COLS; col++){
        if (board[row][col] == tile) {
        *rowPos = row;
        *colPos = col;
        return;
        }
    }
}",0
lchu848,1696235150,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
*rowPos = -1;
*colPos = -1;
for (row = 0; row < NUM_ROWS; row++) {
    for (col = 0; col < NUM_COLS; col++){
        if (board[row][col] == tile) {
        *rowPos = row;
        *colPos = col;
        return;
        }
    }
}
}",0
lchu848,1696235188,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
*rowPos = -1;
*colPos = -1;
for (int row = 0; row < NUM_ROWS; row++) {
    for (int col = 0; col < NUM_COLS; col++){
        if (board[row][col] == tile) {
        *rowPos = row;
        *colPos = col;
        return;
        }
    }
}
}",1
ldam917,1695891524,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i;
int j;
for (i=0;i<NUM_ROWS;i++)
{
        for (j=0;j<NUM_COLS;j++)
        {
            if (board[i][j]==tile)
            {
                *rowPos=i;
                *colPos=j;
                return;
            }
            else
            {
                *rowPos=-1;
                *colPos=-1;
            }
        }
}
}",1
ldea753,1695852266,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
ldou101,1695952683,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int r=0; r<NUM_ROWS; r++){
    for (int c=0; r<NUM_COLS; c++){
    if (board[r][c] == tile) {
        *rowPos = r;
        *colPos = c;
        
    }
    }}
}",0
ldou101,1695952774,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int r=0; r<NUM_ROWS; r++){
    for (int c=0; c<NUM_COLS; c++){
    if (board[r][c] == tile) {
        *rowPos = r;
        *colPos = c;
        
    }
    }}
}",1
lfan827,1696217056,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for ( i = 0; i < NUM_ROWS; i++){
        for ( j = 0;j < NUM_COLS; j++){
            if (board[i][j] == -1){
            *rowPos = i;
            *colPos = j;
            }
        }
    }
    
} ",1
lgan833,1696197658,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
lhal844,1695770101,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0;i < NUM_ROWS;i++)
	{
		for (j = 0;j < NUM_COLS)
		{
			if (tile == board[i][j])
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
lhal844,1695786069,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0;i < NUM_ROWS;i++)
	{
		for (j = 0;j < NUM_COLS;j++)
		{
			if (tile == board[i][j])
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
lhua313,1696157135,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++)
    {
        for (int col = 0; col < NUM_COLS; col++)
        {
            if (board[row][col] == tile)
            {
                *rowPos = row;
                *colPos = col;
                
                return;
            }
        }
    }
}
",1
ljer106,1696114907,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
ljon623,1696043081,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
	
	// Loop through each row
	for(int r=0; r < NUM_ROWS; r++){
		
		// Loop through each coloumn
		for(int c=0; c < NUM_COLS; c++) {
			
			//check if the value at this point == tile
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}
	
}
",1
ljun123,1696225460,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
    int col;
    int row;

    for (row= 0; row < NUM_ROWS; row++) {
        for (col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
lkel942,1695861106,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
llat663,1696216088,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
llei074,1696121368,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i = 0;
	int j = 0;

	while (i < NUM_ROWS) {

		while (j < NUM_COLS) {

			if (board[i][j] == tile) {
		
				*rowPos = i;
				*colPos = j;

			}

			j++;

		}

		i++;
		j = 0;

	}
}	",1
lli393,1695705242,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; i < NUM_COLS; i++){
			if (board[i][j] == -1){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
lli393,1695706289,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
llia622,1696072921,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
llig859,1696226973,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i; 
    int j;
    for (i=0; i<NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++){
        if (board[i][j] == tile) {
            *rowPos=i;
            *colPos=j;
        }
            
        }
   }
    

    return ;
} 

",1
lliu182,1696074713,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {

	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

			}
		}
	}
}",1
lliu848,1696121647,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if board[i, j] == tile;

			printf(""Found at %d, %d\n"", &i, &j);

		}
	}

}",0
lliu848,1696122070,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j; 

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {

			if (board[i][j] == tile) { 

				int row = i;
				int col = j;
			}
		}
	}
}",0
lliu848,1696122250,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return; 
			}
		}
	}
}",1
llu744,1696232249,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
lmen032,1696240396,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile (int board[NUM_ROWS](NUM_COLS), int tile, int *rowPos, int *colPos){
    int i = 0;
    int j = 0;

    for (i; i < NUM_ROWS; i++){
        for (j; j < NUM_COLS; j++){
            if (board[i][j] == tile){;
                *rowPos = i;
                *colPos = j;
            return;
            }
        }
    }
}
",0
lmen032,1696240913,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
 
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
lmor438,1695718224,1,"#include <stdio.h>

//AUTHOR:Lukem


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
 
 int i;
 int j;
 int A;

 for(i=0;i<NUM_ROWS;i++){
     
     
    for(j=0;j<NUM_COLS;j++){
        
        A=board[i][j];
        
        if(A==tile){
            
            *rowPos=i;
            *colPos=j;
            
        }
    }
    
 }
 
}",1
lpry623,1695614084,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    *rowPos = -1;
    *colPos = -1;
    for (int i = 0; i < NUM_ROWS; i++){
        for(int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}",1
lrei069,1695864070,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
lros711,1695788059,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
lrya284,1696203435,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i>=NUM_ROWS; i++) {
    for (int j = 0; j>=NUM_COLS; j++) {
    
        if (board(i,j) == tile) {
            colPos = j;
            rowPos = i;
        }
    }
}
",0
lrya284,1696203786,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i<NUM_ROWS; i++) {
    for (int j = 0; j<NUM_COLS; j++) {
    
        if (board[i][j]) == tile) {
            *colPos = j;
            *rowPos = i;
        }
    }
}
}",0
lrya284,1696203841,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i<NUM_ROWS; i++) {
    for (int j = 0; j<NUM_COLS; j++) {
    
        if (board[i][j] == tile) {
            *colPos = j;
            *rowPos = i;
        }
    }
}
}",1
lsal082,1696224997,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i < NUM_ROWS; ++i) {
        for (int j = 0; j < NUM_COLS; ++j){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
    
}",1
lsen376,1695952292,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	*rowPos = -1;
	*colPos = -1;

	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {

			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}

		}
	}

}",1
lsha172,1696239710,1,"/* ENGGEN131 (2022) - Lab 9 (25th - 30th September, 2023)
   EXERCISE SEVEN and EIGHT - Sliding Tile Puzzle
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    *rowPos = -1;
    *colPos = -1;
    
    for (i = 0; i<NUM_ROWS; i++) {
        for (j = 0; j<NUM_COLS; j++ ) {
            if(board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    

}",1
lspu128,1695758314,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row=0 ; row<NUM_ROWS ; row++){
        for (int col=0 ; col<NUM_COLS ; col++){
            if (board[row][col] == tile){
            *rowPos = row;
            *colPos = col;
            return;
        }
    }
    
}
*rowPos = -1;
*colPos = -1;    
}",1
lsu376,1695696798,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}

				
		}
	}
}",1
lsua311,1696243916,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; ++i) {
        for (int j = 0; j < NUM_COLS; ++j) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
ltan813,1696238026,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, *int colPos)
{
    
    int i = 0;
    int j = 0;
    
    for ( i = 0; i < NUM_ROWS; i++)
    {
        for ( j = 0; j < NUM_COLS; j++)
        {

            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}

",0
ltan813,1696238097,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
    int i = 0;
    int j = 0;
    
    for ( i = 0; i < NUM_ROWS; i++)
    {
        for ( j = 0; j < NUM_COLS; j++)
        {

            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}

",1
lvan346,1696071977,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {

				*rowPos = i;
				*colPos = j;

			}
		}
	}
}",1
lvin900,1696154422,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_COLS; i++) {
		for (j = 0; j < NUM_ROWS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
lwer802,1696243183,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    // Use nested loops to go through every element of the 2D array
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            // Check if the current element matches the tile we're searching for
            if (board[row][col] == tile) {
                // Set the positions using the pointers
                *rowPos = row;
                *colPos = col;
                return;  // Exit the function as we've found the tile
            }
        }
    }
}
",1
lwon290,1696206570,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

				return;
			}
		}
	}
}",1
lyou975,1696054031,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int rows = 0; rows < NUM_ROWS; rows++) {
		for (int cols = 0; cols < NUM_COLS; cols++){

			if (board[NUM_ROWS][NUM_COLS] == tile) {

				*rowPos = rows;
				*colPos = cols;
			}

		}
	}

}",0
lyou975,1696054308,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int rows = 0; rows < 4; rows++) {
		for (int cols = 0; cols < 4; cols++){

			if (board[rows][cols] == tile) {

				*rowPos = rows;
				*colPos = cols;
			}

		}
	}

}",1
mabb997,1695679754,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
mahu925,1695634015,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int x,y = 0;
    for (y=0; y< NUM_ROWS; y++){
        for(x=0; x< NUM_COLS; x++){
            if (board[y][x] == tile){
                *rowPos = y;
                *colPos = x;
            }
        }
    }
}",1
mala824,1696140355,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{    for(int i = 0; i < NUM_ROWS; i++) {
        for(int j = 0; j < NUM_COLS; j++) {
            if(board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
}
",0
mala824,1696140746,2,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{    for(int i = 0; i < NUM_ROWS; i++) {
        for(int j = 0; j < NUM_COLS; j++) {
            if(board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                 return;
}
",0
mala824,1696141016,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for(int i = 0; i < NUM_ROWS; i++) {
        for(int j = 0; j < NUM_COLS; j++) {
            if(board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
mbah279,1696019311,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }",0
mbah279,1696019333,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // Tile found, exit the function
            }
        }
    }",0
mbah279,1696020071,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }

    
    *rowPos = -1;
    *colPos = -1;
}
",1
mbal759,1695863901,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
mboy221,1695620747,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
mbut885,1695888697,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (tile == board[i][j]) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	return;
}",1
mcam799,1696209490,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	//Created pointer. Use pointer to find number? 
	int i; //rows
	int j; //columns


	for (i = 0; i <= (NUM_ROWS - 1); i++) {
		for (j = 0; j = (NUM_COLS - 1); j++) {
			if (board[i][j] == tile) {
				*rowPos = i;  //identifying position into variables??
				*rowPos = j; 
			}
		}
	}
	

	//Use pointer to convert address to number?

}
",0
mcam799,1696209551,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	//Created pointer. Use pointer to find number? 
	int i; //rows
	int j; //columns


	for (i = 0; i <= (NUM_ROWS - 1); i++) {
		for (j = 0; j <= (NUM_COLS - 1); j++) {
			if (board[i][j] == tile) {
				*rowPos = i;  //identifying position into variables??
				*rowPos = j; 
			}
		}
	}
	

	//Use pointer to convert address to number?

}
",0
mcam799,1696236565,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	//Created pointer. Use pointer to find number? 
	int i; //rows
	int j; //columns


	for (i = 0; i <= (NUM_ROWS - 1); i++) {
		for (j = 0; j <= (NUM_COLS - 1); j++) {
			if (board[i][j] == tile) {
				rowPos = i;  //identifying position into variables??
				colPos = j; 
			}
		}
	}
	

	//Use pointer to convert address to number?

}
",0
mcam799,1696236646,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	//Created pointer. Use pointer to find number? 
	int i; //rows
	int j; //columns


	for (i = 0; i <= (NUM_ROWS - 1); i++) {
		for (j = 0; j <= (NUM_COLS - 1); j++) {
			if (board[i][j] == tile) {
				rowPos = &i;  //identifying position into variables??
				colPos = &j; 
			}
		}
	}
	

	//Use pointer to convert address to number?

}
",0
mcam799,1696237850,5,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	//Created pointer. Use pointer to find number? 
	int i; //rows
	int j; //columns


	for (i = 0; i <= (NUM_ROWS - 1); i++) {
		for (j = 0; j <= (NUM_COLS - 1); j++) {
			if (board[i][j] == tile) {
				rowPos = i;  //identifying position into variables??
				colPos = j; 
			}
		}
	}
	

	//Use pointer to convert address to number?

}
",0
mcam799,1696237878,6,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	//Created pointer. Use pointer to find number? 
	int i; //rows
	int j; //columns


	for (i = 0; i <= (NUM_ROWS - 1); i++) {
		for (j = 0; j <= (NUM_COLS - 1); j++) {
			if (board[i][j] == tile) {
				*rowPos = i;  //identifying position into variables??
				*colPos = j; 
			}
		}
	}
	

	//Use pointer to convert address to number?

}
",1
mcha833,1696125046,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i,j;
    for(i = 0;i<NUM_ROWS;i++){
        for(j = 0;j<NUM_COLS;j++){
            if(board[i][j]==tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
mcha876,1696234330,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return 0;  
            }
        }
    }
}",0
mcha876,1696234352,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;  
            }
        }
    }
}",1
mche403,1696230126,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; ++row) {
        for (int col = 0; col < NUM_COLS; ++col) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
mdav506,1695625021,1,"#define NUM_ROWS 4
#define NUM_COLS 4
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
    *rowPos = -1;
    *colPos = -1;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
mdea492,1696113602,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i=0; i<NUM_ROWS; i++){
        for (int j=0; j<NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
				*colPos = j;
            }
        }
    }
}",1
mfle888,1696238502,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i, j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}
",1
mfuj750,1695766018,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	*rowPos = *colPos = -1;
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
mger154,1695949732,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
mgoy303,1695631811,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
mgua740,1696125152,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++) 
        {
            if (board[i][j] == tile) 
            {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }

    
}",1
mhua821,1696216962,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
mjun868,1695853645,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;

	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				rowPos = &row;
				colPos = &col;
				*rowPos = i;
				*colPos = j;

			printf(""Found at %d, %d"", row, col);
			} 
			
		}
	}

}",0
mjun868,1696033382,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;

	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				rowPos = &i;
				colPos = &j;
				row = *rowPos;
				col = *colPos;
			} 
		}
	}
	printf(""Found at %d, %d"", row, col);

}
",0
mjun868,1696063198,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;

	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				rowPos = &i;
				colPos = &j;
				row = *rowPos;
				col = *colPos;
			} 
		}
	}

}
",0
mjun868,1696063294,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				rowPos = &i;
				colPos = &j;
			} 
		}
	}

}
",0
mjun868,1696064743,5,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;

	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				rowPos = &i;
				colPos = &j;
				row = *rowPos;
				col = *colPos;
			} 
		}
	}
}
",0
mjun868,1696065009,6,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;

	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				row = i;
				col = j;
			} 
		}
	}
	*rowPos = row;
	*colPos = col;
}",1
mkab524,1696163661,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < (NUM_ROWS); i++) {
		for (j = 0; j < (NUM_COLS); j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
mkaj411,1695777140,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
		  if (tile==board[i][j]) {
				*rowPos = i;
				*colPos = j; 
		  }
		}
	}
}",1
mkee115,1695700951,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
    int i, j, row, col;
    
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",0
mkee115,1695700973,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
    int i, j;
    
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
mken566,1695851278,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
        }
    }
}
}",1
mket106,1696163406,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int x = 0; x < NUM_ROWS; x++) {
		for(int y = 0; y < NUM_COLS; y++) {
			if(board[x][y] == tile) {
				*rowPos = x;
				*colPos = y;
			}
		}
	}
}",1
mkim670,1695793013,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row, col, i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
mkim670,1695793160,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
mkim719,1696052333,1,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for (i=0 ; i<NUM_ROWS ; i++) 
    {
        for (j=0 ; j<NUM_COLS ; j++)
        {
            if(board[i][j]==tile)
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    
}",1
mlal864,1696233467,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
mlaw649,1696242666,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    
    // loop that scans all elements
    for (int i = 0; i< NUM_ROWS; i++) {
        for (int j =0; j < NUM_COLS; j++) {
            
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                // exit loop
                return;
            }
                
                
            
            
        }
    }
    
}
",1
mle063,1695785340,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
         
          if (board[i][j] == tile){ 
            *rowPos = i;
            *colPos = j;
          }
        }
    }
}
",1
mlin729,1695760543,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
	
	int i,j;
	for (i=0; i < NUM_ROWS;i++){
		for (j=0; j < NUM_COLS; j++)
		if (board[i][j] == tile){
			*rowPos = i;
			*colPos = j;
			return;
		}		
	
	}
}

",1
mloh302,1695785583,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i<NUM_ROWS; i++) {
        for (int j = 0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
mmak111,1696225872,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int coloumn = 0; coloumn < NUM_COLS; coloumn++) {
			if (board[row][coloumn] == tile) {
				*rowPos = row;
				*colPos = coloumn;
			}
		}
	}
}",1
mman402,1696040008,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;

	for (i = 0; i < NUM_ROWS;i++)
	{
		for (j = 0; j < NUM_COLS;j++)
		{
			if(board[i][j]==tile)
			{
				*rowPos=i;
				*colPos=j;
			}
		}
	}
}",1
mman808,1696234786,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
mmas199,1696226605,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) 
{
    int row = 0;
    int col = 0;

    while (row < NUM_ROWS) 
    {
        while (col < NUM_COLS) 
        {
            if (board[row][col] == tile) 
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
            col++;
        }
        col = 0;
        row++;
    }

    *rowPos = -1;
    *colPos = -1;
}",1
mmca276,1695893368,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int rows ;
    int columns ;

for (rows = 0; rows < NUM_ROWS; rows++) {
    for (columns = 0; columns < NUM_COLS; columns++) {
        if (board[rows][columns] == tile) {
            *rowPos = rows ;
            *colPos = columns ;  
        }
    }
}
}",1
mmcg745,1696054762,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
    
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return
            }            
        }
    }    
}",0
mmcg745,1696056607,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *row, int *col) {
    
    
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
    
            if (board[i][j] == tile) {
                *row = i;
                *col = j;
                
            }            
        }
    }    
}
",1
mmoh314,1696238118,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
mmoh456,1695878515,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
mnay503,1696146211,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++) 
    {
        for (int col = 0; col < NUM_COLS; col++) 
        {
            if (board[row][col] == tile) 
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
mnic190,1696239007,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i = 0;
    int j = 0;
    while (i < NUM_ROWS) {
      while (j < NUM_COLS) {
          if (board[i][j] == tile){
              rowPos = i;
              colPos = j;
          }
         j++ 
      }
      i++;
    }
}",0
mnic190,1696239224,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i = 0;
    int j = 0;
    while (i < NUM_ROWS) {
      while (j < NUM_COLS) {
          if (board[i][j] == tile){
              rowPos = int * i;
              colPos = int * j;
          }
         j++ 
      }
      i++;
    }
}",0
moco678,1696133304,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{   
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }

        }
    }
    
}",1
mpar342,1696232494,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++) 
        {
            if (board[i][j] == tile) 
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
mpat501,1695688979,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i=0 ; i<NUM_ROWS ; i++) {
		for (int j=0 ; j<NUM_COLS ; j++) {
			if ( board[i][j] == tile ) {
				*rowPos=i ;
				*colPos=j ;
			}
		}
	}
}",1
mpey262,1695701649,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < 4; i++) {
        for (j = 0; j < 4; j++)
        if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            return;
        }
    }    
}",1
mran851,1696157214,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowsPos = i;
				*colPos = j;
				return; 

			}
		}
	}
}",0
mran851,1696157236,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return; 

			}
		}
	}
}",1
mrog757,1695869708,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    for (i = 0; i<NUM_ROWS; i++) {
        for (j = 0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                
            }
        }
    }

}",1
mron793,1696035701,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j]==tile)
			{
				rowPos = i;
				colPos = j;
				return;
			}
			
		}
		
	}
}
",0
mron793,1696041272,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j]==tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
			
		}
		
	}
	
}",1
mshi672,1696121937,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (board[i][j] == -1)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
msil440,1696240671,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int targetTile, int *rowPosition, int *colPosition) 
{
    for (int row = 0; row < NUM_ROWS; row++) 
    {
        for (int col = 0; col < NUM_COLS; col++) 
        {
            if (board[row][col] == targetTile) 
            {
                *rowPos = row;  // Store the row position using the pointer
                *colPos = col;  // Store the column position using the pointer
                return;  // Exit the function once the tile is found
            }
        }
    }
    
    // If the tile is not found, set rowPos and colPos to -1
    *rowPosition = -1;
    *colPosition = -1;
}",0
msil440,1696240684,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int targetTile, int *rowPosition, int *colPosition) 
{
    for (int row = 0; row < NUM_ROWS; row++) 
    {
        for (int col = 0; col < NUM_COLS; col++) 
        {
            if (board[row][col] == targetTile) 
            {
                *rowPosition = row;  // Store the row position using the pointer
                *colPosition = col;  // Store the column position using the pointer
                return;  // Exit the function once the tile is found
            }
        }
    }
    
    // If the tile is not found, set rowPos and colPos to -1
    *rowPosition = -1;
    *colPosition = -1;
}",1
msin609,1696133474,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
msu975,1695968567,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[j][i] == tile) {
				*rowPos = j;
				*colPos = i;
			}
		}
	}
}",1
msuv992,1696193691,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 int i; 
 int j;
 float value;

 value = -1;
 
 
     for ( i = 0; i < 4; i ++) {
         for (j = 0; j < 4; j++) {
             if (board[i][j] == value) {
                 *rowPos = i;
                 *colPos = j;
                 
             }
         }
     }

}
",1
msuv992,1696234219,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 int i; 
 int j;
 
 
     for ( i = 0; i < NUM_ROWS; i ++) {
         for (j = 0; j < NUM_COLS; j++) {
             if (board[i][j] == tile) {
                 *rowPos = i;
                 *colPos = j;
                 
             }
         }
     }

}
",1
mtam709,1696214641,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row;
    int col;
    for (row = 0; row < NUM_ROWS; row++) {
        for (col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
            return;
            }
        
        }
      
    }
}",1
mtha724,1695967354,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
mtob213,1695795747,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	*rowPos = -1;
	*colPos = -1;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
mtob213,1696136929,2,"/*This function locates the tile of interest and then sets the two pointers to store the row and column position of the tile */
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	*rowPos = -1;
	*colPos = -1;
	
	// Iterate through each row and column until specified tile is found
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i; // Store the row position
				*colPos = j; // Store the column position
			}
		}
	}
}",1
mwan364,1695788420,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
myou984,1695699141,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
nabr105,1695771222,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i; 
				*colPos = j; 
				return;
			}
		}
	}
    return;
}",1
nalg484,1695759379,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i = 0, j = 0;
    while (i < NUM_ROWS) {
        j = 0;
        while (j < NUM_COLS) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
            j++;
        }
        i++;
    }
    *rowPos = -1;
    *colPos = -1;
}",1
nask472,1695693358,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i=0; i < NUM_ROWS; i ++)
		for (j=0; j < NUM_COLS; j++ )
		if (board[i][j]== tile){
			*rowPos = i;
			*colPos = j;
            return;
		}
}",1
ncha509,1695768407,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    int row, col;
    for (row=0;row<NUM_ROWS;row++){
        for (col=0;col<NUM_COLS;col++){
            if (board[row][col]==tile){
                *rowPos=row;
                *colPos=col;
            }
        }
    }
    
    

}
",1
ndas832,1695968084,1,"#include <stdio.h>
#define NUM_ROWS 4  
#define NUM_COLS 4 

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i; 
    int j; 
    for (i=0; i<NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++){
            //If the current element is equal to the tile,
            //then the new position of that element is stored in the pointers rowPos
            //and colPos where i and j are the current row and column indices respectively
        
            if (board[i][j] == tile) {
                
               *rowPos = i; 
               *colPos = j; 
                return;   
            }
           
        }
        
    }
}
",1
ndso791,1696137329,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS;i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				rowPos = i;
				colPos = j;
			}
		}
	}
}",0
ndso791,1696137516,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS;i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ngam724,1695869165,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ngan146,1696234676,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int flag = 0;
	for(int j = 0; j < NUM_ROWS; j++) {
		for(int k = 0; k< NUM_COLS; k++) {
			if(board[j][k] == tile) {
				*rowPos = j;
				*colPos = k;
				flag = 1;
			}
		}
	}
	if(flag == 0) {
		*rowPos = -1;
		*colPos = -1;
	}
}",1
ngna565,1695779529,1,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i; 
    *rowPos = -1;
    *colPos = -1;
    
  int j;
  
  for (i = 0; i < NUM_ROWS; i++){
      for (j = 0; j < NUM_COLS; j++) {
          if (board[i][j] == tile){
              *rowPos = i;
              *colPos = j;
          }
      }
  }
    
}",1
nhar865,1696160264,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int colunm = 0; colunm < NUM_COLS; colunm++) {
            if (board[row][colunm] == tile) {
                *rowPos = row;
                *colPos = colunm;
                return;
            }
        }
    }
}
",1
nhrs452,1695784639,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < 4; i++){ //rows
		for (int j = 0; j < 4; j++){ //cols
			if (board[i][j] == tile){
				*rowPos = i; //or can do rowPos = &i? doesn't work properly idk why
				*colPos = j; //or can do colPos = &j?
			}
			else{
				continue;
			}
		}
	}
}",1
nhua986,1695813727,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}
",1
nhut042,1695786778,1,"
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int rows, columns;
    for (rows = 0; rows < NUM_ROWS; rows++) 
    {
        for (columns = 0; columns < NUM_COLS; columns++)
        {
            if (board[rows][columns] == tile)
            {
                *rowPos = rows;
                *colPos = columns;
                return;
            }
        }
    
    }
}",1
nisa397,1695789733,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
    int i, j;



    //Use a nested loop to examine every element in the two-dimensional array
    //When you find the element being searched for, record its position
    for (i = 0; i < NUM_ROWS; i++ ) {
	    for (j = 0; j < NUM_COLS; j++) {
		    if (board[i][j]==tile) {
		    	*rowPos = i;
			    *colPos = j;
		    }
	    }

    }
}",1
njon803,1695933723,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row;
	int col;
	for (row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[NUM_ROWS][NUM_COLS] = tile) {

				*rowPos = row;
				*colPos = col;
				return 0;

			}
		}
	}
}",0
njon803,1695933837,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row;
	int col;
	for (row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[NUM_ROWS][NUM_COLS] == tile) {

				*rowPos = row;
				*colPos = col;
				return;

			}
		}
	}
}",0
njon803,1695933976,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row;
	int col;
	for (row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {

				*rowPos = row;
				*colPos = col;
				return;

			}
		}
	}
}",1
nlal162,1695820688,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}

}",1
nmah920,1696123817,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
nqua370,1696240450,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int rowIndex = 0; rowIndex < NUM_ROWS; rowIndex++) {
        for (int colIndex = 0; colIndex < NUM_COLS; colIndex++) {
            if (board[rowIndex][colIndex] == tile) {
                *rowPos = rowIndex;
                *colPos = colIndex;
                return; 
            }
        }
    }
    *rowPos = -1; 
    *colPos = -1; 
}",1
nren130,1696066310,1,"#include <stdio.h>
# define NUM_ROWS 4
# define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }
    
}

",1
nrub019,1695798369,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    for (int i = 0; i < NUM_COLS; i++){
        for (int j = 0; j < NUM_ROWS; j++){
            if (board[i][j] == tile) {
                *colPos = j;
                *rowPos = i;
                return;
            }
        }
    }
}",1
nthe160,1696141760,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++)
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
	}
	return 0;

}",0
nthe160,1696143050,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ntia856,1696063903,1,"#include <stdio.h>
/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
ntur101,1695891309,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
nwei818,1695683471,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
nwil850,1695866106,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int i = 0; i < NUM_ROWS; i++ ){
        
        for (int j = 0; j < NUM_COLS; j++ ){
            if (board[i][j] = tile){
            *rowPos = i;
            *colPos = j;
            }
        }
    }
}
",0
nwil850,1695866159,2,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int i = 0; i < NUM_ROWS; i++ ){
        
        for (int j = 0; j < NUM_COLS; j++ ){
            if (board[i][j] == tile){
            *rowPos = i;
            *colPos = j;
        }
    }
    
}
}
",1
nyua944,1695635150,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;  // Found the tile, so exit the function
            }
        }
    }

    // If the tile is not found, you can set some default values or handle it as needed.
    *rowPos = -1;
    *colPos = -1;
}",1
nyua944,1695635199,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; row < NUM_ROWS; i++) {
        for (int j = 0; col < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}",0
nyua944,1695635280,3,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}",1
obar199,1696234038,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i=0;i<NUM_ROWS;i++){
    for (int j=0;j<NUM_COLS;j++){
        if (board[i][j]==tile){
            rowPos = i;
            colPos = j;
        }
    }
}

}",0
obar199,1696234432,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
for (int i=0;i<NUM_ROWS;i++){
    for (int j=0;j<NUM_COLS;j++){
        if (board[i][j]==tile){
            *rowPos = i;
            *colPos = j;
        }
    }
}

}",1
ogab251,1695874924,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile); {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",0
ogab251,1695875044,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
ogan176,1696047835,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
ogar584,1695766395,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    i = 0;
    j = 0;
    for (i = 0; i < NUM_ROWS; i++)
    {
        for (j = 0; j < NUM_COLS; j++)
        {
            if (board[i][j] == -1)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    
}",1
oguo680,1696037602,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
oko158,1695987647,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
opat597,1696235394,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == -1){
			*rowPos = i;
			*colPos = j;
			}
		}
	}

}",1
opre469,1696149284,1,"//FindTile finds the position of a number in a 2D array//
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	//for loop to go through each row in the array//
	for (int i = 0; i < NUM_ROWS; i++) {
		//for loop to go through each column in the array
		for (int j = 0; j < NUM_COLS; j++) {
			//if statement to find the value we are looking for//
			if (board[i][j] == tile) {
				
				//assigning values for row and column//
				*rowPos = i;
				*colPos = j;
				
			}
		}
	}
}",1
orow585,1696227091,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int pos;
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			pos = board[i][j];
			if (pos == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}

		}
	}
}",1
osca399,1695719366,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; i < NUM_COLS; j++) {
			if (board[i][j] == tile)
				*rowPos = i;
				*colPos = j;
				return;
		}
	}
}",0
osca399,1695719487,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; i < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",0
osca399,1695719918,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
oshi740,1696043602,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if(board[i][j]==tile){
				*rowPos = i;
				*colPos = j;

			}
		}
	}

}",1
osko432,1696240044,1,"#include <stdio.h>
#define Deez_Nuts
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
for (int deez1=0;deez1<NUM_ROWS;deez1++){
    for (int deez2=0;deez2<NUM_COLS;deez2++){
        if (board[deez1][deez2]==tile){
           *rowPos=deez1;
           *colPos=deez2;
        }
    }
}
}   ",1
pchh683,1695850217,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int Row = 0; Row < 4; Row++)
	{
		for (int Col = 0; Col < 4; Col++)
		{
			int T = board[Row][Col];
			if (T == -1)
			{
				*rowPos = Row;
				*colPos = Col;
			}
		}
	}
}",1
pfil701,1696071228,1,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int r = 0; r + 1 <= NUM_ROWS; r++) {
        for (int c = 0; c + 1 <= NUM_COLS; c++) {
            if (board[r][c] == tile) {
                *rowPos = r;
                *colPos = c;
                return;
            }
        }
    }
                *rowPos = -1;
                *colPos = -1;
                return;
}",1
pfon568,1696199300,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++)
    {
        for (int j = 0; j < NUM_COLS; j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
            
        }
    }
}",1
phao209,1696232844,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS * NUM_COLS; i++) {
        if (*(*board + i) == tile) {
            
            *rowPos = i / NUM_COLS;
            *colPos = i % NUM_COLS;
            return; 
        }
    }
}",1
pkim777,1695707632,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			} 
		}
	}
}",1
plah275,1696205939,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < 4; i++) {
		
		for (j = 0; j < 4; j++) {

			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
plan310,1695801757,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ppax865,1696236627,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
			    *rowPos = j;
			    *colPos = i;
			}
		}
	}
}",0
ppax865,1696236647,2,"
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
			    *rowPos = i;
			    *colPos = j;
			}
		}
	}
}",1
pper327,1696118810,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i=0; i < NUM_ROWS; i++) {
		for (j=0; j < NUM_COLS; j++) {
			if (board [i] [j] == tile) {
				*rowPos = i;
				*colPos = j;
			}

		}
	}
	
}",1
pshe539,1695700452,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++){
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
				return;
			} 
		}
	}
}",1
psin207,1695872419,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i=0;
    int j=0;
    
    for (i=0; i<NUM_ROWS;i++) {
        for (j=0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
pwat943,1695729195,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row;
	int col;

	for (row = 0; row < NUM_ROWS; row++) {

		for (col = 0; col < NUM_COLS; col++) {

			if (board[row][col] == tile) {
				*rowPos = row; // Store the row position
				*colPos = col; // Store the column position
				return; // Tile found, exit the function
			}
		}
	}
	// Tile not found, set rowPos and colPos to -1
	*rowPos = -1;
	*colPos = -1;
}",1
pwil422,1696224496,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row= 0; row<NUM_ROWS; row++) {
        for (int col=0; col<NUM_COLS; col++) {
            if (board[row][col]==tile) {
                *rowPos=row;
                *colPos=col;
                return; 
            }
        }
    }
}",1
pwil422,1696224528,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row=0; row<NUM_ROWS; row++) {
        for (int col=0; col<NUM_COLS; col++) {
            if (board[row][col]==tile) {
                *rowPos=row;
                *colPos=col;
                return; 
            }
        }
    }
}",1
pwu278,1695873180,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	*rowPos = -1;
	*colPos = -1;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

	if (*rowPos == -1 && *colPos == -1) {
		*rowPos = 0;
		*colPos = 0;
	}
}",1
pxie161,1695633508,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for(int i = 0; i < NUM_ROWS; i++){
	for(int j = 0; j < NUM_COLS; j++){
		if (board[i][j] == -1){
			*rowPos = i;
			*colPos = j;
			break;
		}
	}
}
}",1
pyou182,1695849168,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            }
        }
    }

}",1
qche619,1696243986,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int rows = 0; rows < NUM_ROWS; rows++) 
    {
        for (int cols = 0; cols < NUM_COLS; cols++) 
        {
            if (board[rows][cols] == tile) 
            {
                *rowPos = rows; 
                *colPos = cols;
                return;
            }
        }
    }
}",1
qkan386,1695946700,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos){

	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
qmcc945,1695708577,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int r, c;

	for (r = 0; r < NUM_ROWS; r++) {
		for (c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == -1) {
				*rowPos = r;
				*colPos = c;
			}
		}
	}


}",1
qtra338,1695624888,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	int i, j;

	for ( i = 0; i < NUM_ROWS; i++) {
		for ( j = 0; i < NUM_COLS; i++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
		
	}
}
",0
qtra338,1695625061,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	int i, j;

	for ( i = 0; i < NUM_ROWS; i++) {
		for ( j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
		
	}
}",1
qwu129,1696243432,1,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;  // Return immediately once the tile is found
            }
        }
    }
}",1
qwu129,1696243436,2,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
}",1
qzho943,1695692393,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
raic989,1695867814,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i=0;i<NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++) {
            if (board [i][j] == tile) {
            *rowPos=i;
            *colPos=j;
            }
        }
    }
}",1
rand321,1695626887,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
		    if (board[i][j] == tile) {
		    *rowPos = i;
		    *colPos = j;
		    }
        }
    }
}",1
rbaj698,1696212049,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
	int i,j;
	for (i=0; i<*NUM_ROWS; i++) {
		for (j=0; i<*NUM_COLS; i++) {
			if (board[i][j]) == tile {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}
	",0
rbaj698,1696212105,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
	int i,j;
	for (i=0; i<NUM_ROWS; i++) {
		for (j=0; i<NUM_COLS; i++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}
	",0
rbaj698,1696228748,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
	int i,j;
	for (i=0; i < NUM_ROWS; i++) {
		for (j=0; i < NUM_COLS; i++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}
",0
rbaj698,1696229207,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
	int i,j;
	for (i=0; i < NUM_ROWS; i++) {
		for (j=0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}
",1
rbat374,1696225574,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
rbat374,1696229622,2,"void MakeMove(int board[NUM_ROWS][NUM_COLS], int tile)
{
    int row1,col1;
    int row2,col2;
    FindTile(board, tile, &row1, &col1);
    FindTile(board, -1, &row2, &col2);
    if (row1 > 0 && row1 < NUM_ROWS-1 && col1 > 0 && col1 < NUM_COLS-1){
        if (board[row1-1][col1] == -1 || board[row1+1][col1] == -1 || board[row1][col1-1] == -1|| board[row1][col1+1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile; 
        }
    }
    else if (row1 == 0 && col1 > 0 && col1 < NUM_COLS-1){
        if (board[row1+1][col1] == -1 || board[row1][col1-1] == -1|| board[row1][col1+1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile;
        }
    }
    else if (row1 == 0 && col1 == 0){
        if (board[row1+1][col1] == -1 || board[row1][col1+1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile;
        }
    }
    else if (row1 > 0 && row1 < NUM_ROWS-1 && col1 == 0){
        if (board[row1-1][col1] == -1 || board[row1+1][col1] == -1 || board[row1][col1+1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile;
        }
    }
    else if (row1 == NUM_ROWS-1 && col1 == NUM_COLS-1){
        if (board[row1-1][col1] == -1 || board[row1][col1-1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile;
        }
    }
    else if (row1 == NUM_ROWS-1 && col1 == 0){
        if(board[row1-1][col1] == -1 || board[row1][col1+1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile;
        }
    }
    else if (row1 == NUM_ROWS-1 && col1 > 0 && col1 < NUM_COLS-1){
        if(board[row1-1][col1] == -1 || board[row1][col1-1] == -1|| board[row1+1][col1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile;
        }
    }
    else if (row1 > 0 && row1 < NUM_ROWS-1 && col1 == NUM_COLS-1){
        if(board[row1-1][col1] == -1 || board[row1+1][col1] == -1 ||  board[row1][col1-1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile;
        }
    }
    else if (row1 == 0 && col1 == NUM_COLS-1){
        if(board[row1+1][col1] == -1 || board[row1][col1+1] == -1){
            board[row1][col1] = -1;
            board[row2][col2] = tile;
        }
    }
    
    
}",0
rbat374,1696229664,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
rbat561,1695626282,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rbui853,1695705206,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rbus291,1695956973,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos);
void MakeMove(int board[NUM_ROWS][NUM_COLS], int tile);

void PrintBoard(int board[NUM_ROWS][NUM_COLS]);
int GetMove(void);
int GameOver(int board[NUM_ROWS][NUM_COLS]);

int main(void)
{
    int board[NUM_ROWS][NUM_COLS] = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {-1, 13, 14, 15}
    };
    int row, col;

    PrintBoard(board);
    while (!GameOver(board)) {
        FindTile(board, -1, &row, &col);
        printf(""Empty tile is at row=%d and col=%d.\nMake your move: "", row, col);
        MakeMove(board, GetMove());
        PrintBoard(board);
    }
    printf(""Congratulations - you won!"");

    return 0;
}

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}

void MakeMove(int board[NUM_ROWS][NUM_COLS], int tile)
{
    int emptyRow, emptyCol;
    FindTile(board, -1, &emptyRow, &emptyCol);

    int tileRow, tileCol;
    FindTile(board, tile, &tileRow, &tileCol);

    
    if ((abs(emptyRow - tileRow) == 1 && emptyCol == tileCol) ||
        (abs(emptyCol - tileCol) == 1 && emptyRow == tileRow)) {
        
        board[emptyRow][emptyCol] = tile;
        board[tileRow][tileCol] = -1;
    }
}


void PrintBoard(int board[NUM_ROWS][NUM_COLS])
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                printf("" _ "");
            } else if (board[i][j] > 9) {
                printf("" %d"", board[i][j]);
            } else {
                printf("" %d "", board[i][j]);
            }
        }
        printf(""\n"");
    }
    printf(""\n"");
}

int GetMove(void)
{
    int input;
    scanf(""%d"", &input);
    return input;
}

int GameOver(int board[NUM_ROWS][NUM_COLS])
{
    int tile = 1;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] != tile) {
                return ((i == NUM_ROWS - 1) && (j == NUM_COLS - 1));
            }
            tile++;
        }
    }
 return 0;
}",0
rbus291,1696033577,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
    for (int row = 0; row < NUM_ROWS; ++row) {
        for (int col = 0; col < NUM_COLS; ++col) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}
",1
rchi339,1696132522,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rchi339,1696132954,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rcou530,1695784590,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
	for (int i =0; i<NUM_ROWS; i++){
		for (int j=0; j<NUM_COLS; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	return;
}
",1
rdas322,1696221566,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int r = 0; r < NUM_ROWS; r++) {
        for (int c = 0; c < NUM_COLS; c++) {
            if (board[r][c] == tile) {
                *rowPos = r;
                *colPos = c;
                return; ",0
rdas322,1696221649,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int r = 0; r < NUM_ROWS; r++) {
        for (int c = 0; c < NUM_COLS; c++) {
            if (board[r][c] == tile) {
                *rowPos = r;
                *colPos = c;
                return; 
            }
        }
    }
    
}",1
rdon807,1696219121,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int Xdirection;
    int Ydirection;
for (int i=0; i<NUM_ROWS; i++){
    for (int j=0; j<NUM_COLS; j++){
        if (board[i][i]==tile){
            Xdirection=i;
            Ydirection=j;
            #define rowPos i;
            #define colPos j;
        }
    }
}
}",0
rdon807,1696219244,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

for (int i=0; i<NUM_ROWS; i++){
    for (int j=0; j<NUM_COLS; j++){
        if (board[i][j]==tile){
            #define rowPos i;
            #define colPos j;
        }
    }
}
}",0
rdon807,1696220519,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

for (int i=0; i<4; i++){
    for (int j=0; j<4; j++){
        if (board[i][j]==tile){
            #define rowPos i;
            #define colPos j;
        }
    }
}
}",0
rdon807,1696221651,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

for (int i=0; i<4; i++){
    for (int j=0; j<4; j++){
        if (board[i][j]==tile){
            rowPos=i;
            colPos=j;
        }
    }
}
}",0
rdon807,1696221703,5,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

for (int i=0; i<4; i++){
    for (int j=0; j<4; j++){
        if (board[i][j]==tile){
            *rowPos=i;
            *colPos=j;
        }
    }
}
}",1
rdun690,1695807037,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return 0;
			}
		}
	}
}",0
rdun690,1695807474,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rger104,1695780571,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i=0;i<NUM_ROWS;i++) {
        for (j=0;j<NUM_COLS;j++) {
            if (board[i][j]==tile) {
                *rowPos=i;
                *colPos=j;
                return;
            }
        }
    }
    
    return;	
}",1
rgre692,1696239602,1,"
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
}",1
rhua827,1696240265,1,"void FindTile (int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
  int i, j;
  *rowPos = -1;
  *colPos = -1;

  for (i = 0; i < NUM_ROWS; i++) {
      for (j = 0; j < NUM_COLS; j++) {
	  if (board[i][j] == tile) {
	      *rowPos = i;
	      *colPos = j;
	  }
	}
  }
}",1
rkan756,1695865074,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}

		}
	}

}",1
rkar406,1695631856,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
	return 0;
}",0
rkar406,1695632006,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rkha931,1695780999,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++){
            for (int j=0; j < NUM_COLS; j++){
                if (board[i][j] == tile) {
                    *rowPos = i;
                    *colPos = j;
                    return;
                }
            }


    }

}",1
rkir245,1696216706,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

	int i,j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
rleg709,1696205166,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
	int i, j;
	// Use for loop to search for -1 value in the 2D array
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) { 
			if (board[i][j] == -1) {
			*rowPos = i; // dereference position of the array for rows
			*colPos = j; // dereference position of the array for cols
			break;
			}
		}
	}
}",1
rlin108,1695959926,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
				
				return 0;
			}
		}
	}
}",0
rlin108,1695960055,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rmar633,1696214088,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i=0; i<NUM_ROWS; i++)
    {
        j = 0;
        for (j=0; j<NUM_COLS; j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
rmur989,1696075851,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if(board[i][j] == -1){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    
}",1
rnga701,1695812237,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;

    for (i=0; i<NUM_ROWS;i++){
        for(j=0;j<NUM_COLS;j++){
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
            }
        }
    }
}",1
rnig735,1695971922,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
rpar376,1695886558,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i=0;i<NUM_ROWS;i++) {
        for (int j=0;j<NUM_COLS;j++) {
            if (tile==board[i][j]) {
                *rowPos=i;
                *colPos=j;
            }
        }
    }
}",1
rpat943,1695864493,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    /*
    for loop iterates through every element of the 2D array and locates the tile of interest
    which has a value of -1. It then stores its row and column position in two pointers
    respectively.
    */
    int i,j;
	for (i = 0; i < NUM_ROWS; i++) {
	    for (j = 0; j < NUM_COLS; j++) {
	        if (board[i][j] == -1) {
	           *rowPos = i;
	           *colPos = j;
	        } 
	    }
	}

}",1
rraj313,1695674440,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rroz381,1696221652,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    
    for (i = 0; i <= NUM_ROWS; i++) {
        for (j = 0; j <= NUM_COLS; j++) {
            if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            }
        }
    }
}",1
rsha769,1695713737,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{	
	int row, col;
	
	for (row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if(board [row][col] == tile) {
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
rsha970,1695855234,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
               
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }
}",1
rsin531,1696225181,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;  
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}",1
rsin719,1696064837,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}
",1
rsmi948,1695677294,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int total, col_length, row_length;

	total = sizeof(*board);
	col_length = sizeof((*board)[0]);
	row_length = total / col_length;

	for (int i = 0; i < row_length; i++){
		for (int j = 0; j < col_length; j++){
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
rsta265,1695794757,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
rtan654,1695790485,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	*rowPos = -1;
	*colPos = -1;
    for (int i = 0; i < NUM_ROWS; i++){
		for (int j = 0; j < NUM_COLS; j++)
      	  if (board[i][j] == tile){
        	    *rowPos = i;
				*colPos = j;
            	return;
        }
    }
}",1
rtap592,1696151947,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}

}",1
rvog842,1696230799,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                
                return; // return after tile is found 
            }
        }
    }
}",1
rwar748,1695800725,1,"{
int i;
int j;
for(i = 0; i < NUM_ROWS; i ++){
	for(j = 0; j < NUM_COLS; j++){
		if (board[i][j] == tile){
			*rowPos = i;
			*colPos = j;
		}
	}
}",0
rwar748,1695800753,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i;
int j;
for(i = 0; i < NUM_ROWS; i ++){
	for(j = 0; j < NUM_COLS; j++){
		if (board[i][j] == tile){
			*rowPos = i;
			*colPos = j;
		}
	}
}",0
rwar748,1695800923,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i;
int j;
for(i = 0; i < NUM_ROWS; i ++){
	for(j = 0; j < NUM_COLS; j++){
		if (board[i][j] == tile){
			*rowPos = i;
			*colPos = j;
		}
	}
}
}",1
rzha972,1695864708,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    *rowPos = -1;
    *colPos = -1;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
                
        }
    }
    
}",1
sabo272,1695709626,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j ++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}

	}

	*rowPos = -1;
	*colPos = -1;

}",1
sabo272,1695709783,2,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE SEVEN - FindTile
   This function finds the position of the empty tile in the board of a sliding tiles game.
*/
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j ++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j; // store the positions as pointes
				return;
			}
		}

	}

	*rowPos = -1;
	*colPos = -1;

}",1
sabo272,1696024860,3,"/* ENGGEN131 (2023) - Lab 9 (25th - 30th September, 2023)
   EXERCISE SEVEN - FindTile
   This function finds the position of the empty tile in the board of a sliding tiles game.
*/
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j ++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j; // store the positions as pointers
				return;
			}
		}

	}

	*rowPos = -1;
	*colPos = -1;

}",1
sali153,1695790103,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int i = 0; i < NUM_ROWS; i++)
	{
		for(int j = 0; j < NUM_COLS;j++)
		{
			if (board[i][j] == tile) { *rowPos = i; *colPos = j; }
		}
	}
}",1
sban919,1695625164,1,"#include <stdio.h>

/* FindTile function takes an integer array and a value to find from the array
and returns the row and column position of the value to be found. */

/* Author: Subeen Ban */

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++)
    {
        for (int col = 0; col < NUM_COLS; col++)
        {
            if (board[row][col] == tile)
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }

}",1
sbas887,1696119572,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    *rowPos = -1;
    *colPos = -1;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    } 
}",1
sben564,1696113413,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int i = 0; i < NUM_ROWS; i++){
        
        for (int j = 0; j < NUM_COLS; j++){
            
            if (board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
                
                return;
                
            }
            
        }
        
    }
    
}",1
sbha564,1696236640,1,"void FindTile(int gameBoard[NUM_ROWS][NUM_COLS], int targetTile, int *rowPosition, int *colPosition) {
    for (int rowIdx = 0; rowIdx < NUM_ROWS; rowIdx++) {
        for (int colIdx = 0; colIdx < NUM_COLS; colIdx++) {
            if (gameBoard[rowIdx][colIdx] == targetTile) {
                *rowPosition = rowIdx;
                *colPosition = colIdx;
                return;
            }
        }
    }

    *rowPosition = -1;
    *colPosition = -1;
}",1
sbou664,1696228431,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
    int i,j;   // iterators to iterate using loop over the board
    for(i=0;i<NUM_ROWS;i++)  
    {
        for(j=0;j<NUM_COLS;j++)
        {
            if(board[i][j]==tile)  // if tile is found at i,j
            {
                rowPos = i;  // assign i to rowPos
                colPos = j;  // assign j to colPos
                break;  // come out of the loop because tile of interest is found
            }
        }
    }
    
    return;
}",0
sbou664,1696231175,2,"int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
    int i,j;  
    for(i=0;i<NUM_ROWS;i++)  
    {
        for(j=0;j<NUM_COLS;j++)
        {
            if(board[i][j]==tile)  
            {
                *rowPos = i; 
                *colPos = j;  
                break;
            }
        }
    }
    
    return *rowPos, *colPos;
}",0
sbou664,1696231521,3,"int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
    int i,j;  
    for(i=0;i<NUM_ROWS;i++)  
    {
        for(j=0;j<NUM_COLS;j++)
        {
            if(board[i][j]==tile)  
            {
                *rowPos = i; 
                *colPos = j;  
                break;
            }
        }
    }
    
    return *rowPos && *colPos;
}
",1
sbro373,1695766466,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
scar362,1696063059,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i=0; i<NUM_ROWS; i++) {
        for (int j=0; j<NUM_COLS;j++){
    if (board[i][j]== tile) {
        *rowPos=i;
        *colPos=j;
    }
        }
    }
}",1
sche525,1695637420,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for(int i = 0; i < NUM_ROWS; i++){
        for(int j = 0; j < NUM_COLS; j++){
            if(board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
scho575,1696205017,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
// Record the column and row position
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
schu718,1695951514,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int i = 0; i < NUM_ROWS; i++){
        
        for(int j = 0; j < NUM_COLS; j++){
            
            if(board[i][j] == tile){
                
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
sdal739,1695869752,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		
		}
	}
}",1
sden589,1696242263,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
sekb555,1695629894,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; i < NUM_COLS; i++)
		{
			if (board[i][j] == -1)
			{	
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	
}",0
sekb555,1695629916,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; i < NUM_COLS; i++)
		{
			if (board[i][j] == tile)
			{	
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	
}",0
sekb555,1695630040,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{	
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	
}",1
sekb555,1695675510,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	//checks each row and column for the -1 tile and returns the value
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{	
				//assigns the row number to rowPos and assigns the column number to colPos
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	
}",1
sfry192,1696234586,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int row = 0;row < NUM_ROWS;row++){
        for(int col = 0;col < NUM_COLS;col++){
            if(board[row][col] = tile){
                rowPos = row;
                colPos = col;
                return;
            }
        }
    }
}",0
sfry192,1696235993,2,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){

    for(int row = 0;row < NUM_ROWS;row++){
        for(int col = 0;col < NUM_COLS;col++){
            if(board[row][col] == tile){
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
sgal263,1696229141,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
for (int i = 0; i < NUM_ROWS; i++){
for (int j = 0; j < NUM_COLS; j++){
if (board[i][j] == tile){
*rowPos = i;
*colPos = j;
return;
} 
}
}

}
",1
sgib237,1696146102,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int title, int *rowPos, int *colPos) {
    for (*rowPos = 0; *rowPos < NUM_ROWS; ++(*rowPos)) {
        for (*colPos = 0; *colPos < NUM_COLS; ++(*colPos)) {
            if (board[*rowPos][*colPos] == title) {
                return;
            }
        }
    }
}",1
shan333,1696225107,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
shan790,1695897208,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
she940,1695706230,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
shsa718,1695871918,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;

	// Locate our missing tile in the board
	for (i=0;i<NUM_ROWS;i++){
		for (j=0;j<NUM_COLS;j++){
			if (board[i][j]== -1){
                *rowPos=i;
				*colPos=j;
				return;
			}
		}
	}
    return;

}",1
shua365,1695634713,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int row, col;
    for (row=0;row<4;row++){
        for (col=0;col<6;col++){
            if (board[row][col]==tile){
                *rowPos=row;
                *colPos=col;
            }
        }
    }
}",1
shum116,1695697029,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j; 
	tile = -1;
	*rowPos = -1;
	*colPos = -1;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	
}",1
sike083,1695807163,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 for (int i = 0; i < NUM_ROWS; i++) {
     for (int j = 0; j < NUM_COLS; j++) {
         if (board[i][j] == -1) {
             *rowPos = i;
             *colPos = j;
             
         }
     }
 }
}",1
sjaf029,1696212167,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;

				return 0;
			}
		}
	}
}",0
sjaf029,1696212456,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;

				return;
			}
		}
	}
}",1
sjai563,1695990132,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j ;
	for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i ;
                *colPos = j ;
                return ; 
            }
        }
    }
}",1
sjam309,1695891098,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile)
            {
            *rowPos = i;
            *colPos = j;
            }
        }
    }
}
",1
sjob296,1696216354,1,"#include <stdio.h>

#define Num_ROWS 4 
#define Num_COLS 4 

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int row = 0; row < Num_Rows; row++)
    {
        for(int col = 0; col < NUM_COLS; col++)
        {
            if(board[row][col] == tile)
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}",0
sjob296,1696216506,2,"#include <stdio.h>

#define numRows 4 
#define numCols 4 

void FindTile(int board[numRows][numCols], int tile, int *rowPos, int *colPos)
{
    for(int row = 0; row < numRows; row++)
    {
        for(int col = 0; col < numCols; col++)
        {
            if(board[row][col] == tile)
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}",1
skan221,1696208946,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile (int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
 {
     for (int row = 0; row < NUM_ROWS; row++) {
     for (int col = 0; col < NUM_COLS; col++) {
      if (board[row][col] == tile) {
       *rowPos = row;
       *colPos = col;
        return;
   }
    }
    }",0
skan221,1696215927,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile (int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
 {
     for (int row = 0; row < NUM_ROWS; row++) {
     for (int col = 0; col < NUM_COLS; col++) {
      if (board[row][col] == tile) {
       *rowPos = row;
       *colPos = col;
        return;
   }
    }
    }
 }
 ",1
skea516,1695711284,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
	    for(j=0; j < NUM_COLS; j++) {
	        if (board[i][j] == tile) {
	            *rowPos = i;
	            *colPos = j;
	        }
	    }
    }

}
",1
skmu887,1696227298,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    // set rowPos and colPos to -1, meaning tile not found
    *rowPos = -1;
    *colPos = -1;
    
    // run through the 2D array to find the tile
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            // If the current element matches the tile, record its position
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
}",1
skop291,1696135956,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
skul970,1695690864,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
slam669,1695863847,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    
    *rowPos = -1;
    *colPos = -1;
    for (i = 0; i < NUM_ROWS; i++)  {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
            
        }
        
    }
    
}",1
slie508,1696223848,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int col = 0; col< NUM_COLS; col++){
        for (int row = 0; row<NUM_ROWS; row++){
            if (board[row][col] == tile){
                *rowPos = row;
                *colPos = col;
            }
        }
    }
}
",1
sluo487,1696211915,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
smac708,1695780969,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
	int i; 
	int j; 
	for (i=0; i < NUM_ROWS; i++){
		for (j=i; i < NUM_COLS; i++) {
			if (board[i][j] == tile) { 
				*rowPos = i; 
				*colPos = j;
			}
		}
	}
}",0
smac708,1695781929,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{ 
	int i; 
	int j; 
	for (i=0; i < NUM_ROWS; i++){
		for (j=0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) { 
				*rowPos = i; 
				*colPos = j;
			}
		}
	}
}",1
sman821,1695781039,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i,j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
sman833,1695866178,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}",1
smck855,1695811632,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    // Initialize rowPos and colPos to -1 (indicating not found)
    *rowPos = -1;
    *colPos = -1;

    // Iterate through the 2D array to find the tile
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                // If found, update rowPos and colPos and break out of the loop
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
smck855,1695811651,2,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    *rowPos = -1;
    *colPos = -1;

    
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
smou122,1695782858,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row, column;
    for (row = 0; row < NUM_ROWS; row++){
        for (column = 0; column < NUM_COLS; column++){
            if (board[row][column] == tile){
                *rowPos = row;
                *colPos = column;
                return;
            }
        }
    }

}",1
smun623,1696236998,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;

    
    *rowPos = -1;
    *colPos = -1;

    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
               
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
}
",1
snas404,1696234312,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	*rowPos = -1;
	*colPos = -1;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}




}
",1
span558,1695619692,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
       for (int j = 0; j < NUM_COLS; j++) {
           if (board[i][j] == tile) {
             *rowPos = i;
             *colPos = j;
             return; 
  }
  }",0
span558,1695620382,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
int i,j
    for (i = 0; i < NUM_ROWS; i++) {
       for (j = 0; j < NUM_COLS; j++) {
           if (board[i][j] == tile) {
             *rowPos = i;
             *colPos = j;
             return; 
             }
         }
    }
}",0
span558,1695622419,3,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    *rowPos = -1; 
    *colPos = -1; 

    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }
}",1
spar473,1695886649,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int i=0; i<NUM_ROWS; i++) {
		for(int j=0;j<NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
spar820,1696223891,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	{
		for (int i = 0; i <= 4; i++) {
			for (int j = 0; j <= 4; j++) {
				if (board[i][j] == -1){
					*rowPos = i;
				    *colPos = j;
				}
			}
		}

	}

}",1
srak374,1696239446,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
int row, col;

  for(row = 0; row < NUM_ROWS; row++){
     for (col = 0; col < NUM_COLS; col++){
         if (board[row][col] == tile){
            *rowPos = row;
            *colPos = col;
            return;
        }
    }
}
    *rowPos = -1;
    *colPos = -1;
}
",1
sran136,1696239907,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int row_number;
    int col_number;
    for (int row = 0; row < NUM_ROWS; row++) {

        for (int col = 0; col < NUM_COLS; col++) {

            if (board[row][col] == -1) {
                row_number = row;
                col_number = col;
                *rowPos = row_number;
                *colPos = col_number;
            }
        }
    }
}",1
srou953,1695879277,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int i=0; i<NUM_ROWS; i++)
    {
        for(int j=0; j<NUM_COLS; j++)
        {
            if (board[i][j] == tile) {
                *rowPos;
                *colPos;

                return;
            }
        }
    }

}",0
srou953,1695879326,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int i=0; i<NUM_ROWS; i++)
    {
        for(int j=0; j<NUM_COLS; j++)
        {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;

                return;
            }
        }
    }

}",1
ssan467,1696134439,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1); {
				*rowPos = i;
				*colPos = j;
				break;
			}
		}
	}
}",0
ssan467,1696134709,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
				break;
			}
		}
	}
}",1
ssco465,1695875945,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) 
{
    for (int row = 0; row < NUM_ROWS; ++row) {
        for (int col = 0; col < NUM_COLS; ++col) {
            
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }
    
    *rowPos = -1; 
    *colPos = -1;
}",1
ssey266,1696074636,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
int row;
int col;

for (row = 0; row < NUM_ROWS; row++) {
    for (col = 0; col < NUM_COLS; col++) {
    if (board[row][col] == tile) {
    *rowPos = row;
    *colPos = col;
    }
    }
    }

}",1
ssiv093,1696239480,1,"int board[NUM_ROWS][NUM_COLS] = {
    {1, 2, 3, 4},
    {5, 6, 7, 8},
    {9, 10, 11, 12},
    {-1, 13, 14, 15}
};
int row, col;

FindTile(board, -1, &row, &col);

printf(""Found at %d, %d"", row, col);",0
ssiv093,1696239858,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
sson972,1695702816,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{

	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == -1)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}


}",1
sspa275,1695705957,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    /* I is x, J is y*/
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j ++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
ssri357,1695705450,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}


}",1
steb012,1695711793,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i, j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;  
            }
        }
    }
}
",1
stia357,1695878897,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
sum778,1695977106,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	// always do nested loop if i'm trying to find an element in a 2d array
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
sval918,1696213901,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){ 
    
    *rowPos = -1;
    *colPos = -1;
    
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (tile == board[i][j]){
            *rowPos = i;
            *colPos = j;
            
            return;
            }
        }
    }
}
",1
swan472,1695939496,1,"int board[NUM_ROWS][NUM_COLS] = 

{
	{1, 2, 3, 4},
	{5, 6, 7, 8},
	{9, 10, 11, 12},
	{-1, 13, 14, 15}
};

int row, col;

FindTile(board, -1, &row, &col);

printf(""Found at %d, %d"", row, col);",0
swan472,1695941046,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; // Exit the function once the tile is found.
            }
        }
    }

    // If the tile is not found, set rowPos and colPos to -1 (or any other suitable value).
    *rowPos = -1;
    *colPos = -1;
}",1
sweb390,1695700512,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
	return;
}",1
swil676,1696240919,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; i++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}

	}
}",0
swil676,1696241444,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}

	}
}",1
syok443,1695702046,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    //MAIN GOAL - find the position of 0

    //2 loops to go over row and columns
    int i,j;
    for(i = 0; i < NUM_ROWS; i++){
        
        for(j = 0; j < NUM_COLS; j++){
            
            if(tile == board[i][j]){
                *rowPos = i;
                *colPos = j;
                break;   
            }

        }
    }

}",1
syua841,1696222790,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int rows = 0; rows < NUM_ROWS; rows ++){
        for (int cols = 0; cols < NUM_COLS; col ++){
            if (board[rows][cols] == tile){
                *rowPos = rows;
                *colPos = cols;
                return;
            }
        }
    }
}",0
syua841,1696222798,2,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int rows = 0; rows < NUM_ROWS; rows ++){
        for (int cols = 0; cols < NUM_COLS; cols ++){
            if (board[rows][cols] == tile){
                *rowPos = rows;
                *colPos = cols;
                return;
            }
        }
    }
}",1
szen566,1695801751,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
szho466,1696236527,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){

    int pos;
    int i;

    for (i=0; i< NUM_ROWS; i++) {
        for (j=0; j< NUM_COLS; j++) {
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
                return;
            }
        }
        
    }

} ",0
szho466,1696236588,2,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){

    int i;
    int j;

    for (i=0; i< NUM_ROWS; i++) {
        for (j=0; j< NUM_COLS; j++) {
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
                return;
            }
        }
        
    }

} ",1
szho466,1696240791,3,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tileO, int *rowPos, int *colPos){

    int i;
    int j;

    for (i=0; i< NUM_ROWS; i++) {
        for (j=0; j< NUM_COLS; j++) {
            if (board[i][j]==tileO){
                *rowPos=i;
                *colPos=j;
                return;
            }
        }
        
    }

} 
void MakeMove(int board[NUM_ROWS][NUM_COLS], int tile){
    int i,j;
    int *rowPos;
    int *colPos;

    for (i=0; i< NUM_ROWS; i++) {
        for (j=0; j< NUM_COLS; j++) {
            if (board[i][j]=tile){
                if (i>0 && i<NUM_ROWS-1 && j>0 && j<NUM_COLS-1){
                    if (board[i-1][j]== *rowPos|| board[i+1][j]== *rowPos || board[i][j-1]==*colPos||board[i][j]+1== *colPos){
                    *rowPos=i;
                    *colPos=j;
                     board[i][j]=-1;
                    return;
                    }
                }
            
                    else{
                      if (i==0||i==NUM_ROWS-1||j==0||j==NUM_COLS-1){
                        if(board[i-1][j]== *rowPos|| board[i+1][j]== *rowPos || board[i][j-1]==*colPos||board[i][j+1]== *colPos){
                        *rowPos=i;
                        *colPos=j;
                        board[i][j]=-1;
                        return;
                        }
                    }
                }
            }
        }
    }
}   ",0
szho466,1696240909,4,"
void MakeMove(int board[NUM_ROWS][NUM_COLS], int tile){
    int i,j;
    int *rowPos;
    int *colPos;

    for (i=0; i< NUM_ROWS; i++) {
        for (j=0; j< NUM_COLS; j++) {
            if (board[i][j]==tile){
                if (i>0 && i<NUM_ROWS-1 && j>0 && j<NUM_COLS-1){
                    if (board[i-1][j]== *rowPos|| board[i+1][j]== *rowPos || board[i][j-1]==*colPos||board[i][j]+1== *colPos){
                    *rowPos=i;
                    *colPos=j;
                     board[i][j]=-1;
                    return;
                    }
                }
            
                    else{
                      if (i==0||i==NUM_ROWS-1||j==0||j==NUM_COLS-1){
                        if(board[i-1][j]== *rowPos|| board[i+1][j]== *rowPos || board[i][j-1]==*colPos||board[i][j+1]== *colPos){
                        *rowPos=i;
                        *colPos=j;
                        board[i][j]=-1;
                        return;
                        }
                    }
                }
            }
        }
    }
}   ",0
tais804,1695694685,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
	int i, j;
    * rowPos = -1;
    * colPos = -1;
    for (i = 0; i < NUM_ROWS; i++){
	    for (j = 0; j< NUM_COLS; i++) {
		    if (board[i][j] == tile) {
			*rowPos = i;
			*colPos = j;
            return;
		    }
	    }
     }
}",0
tais804,1695695726,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i, j;
    for (i = 0; i < NUM_ROWS; i++){
	    for (j = 0; j< NUM_COLS; j++) {
		    if (board[i][j] == tile) {
			*rowPos = i;
			*colPos = j;
            return;
		    }
	    }
     }
}",1
tbad483,1695853104,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i, j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
tbar968,1695873243,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
		int i;
		int j;

		for (i = 0; i < NUM_ROWS; i++) {
			for (j = 0; j < NUM_COLS; j++) {
				if (board[i][j] == tile) {
					*rowPos = i;
					*colPos = j;
				}
			}
		}
}",1
tbar971,1695694223,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {

			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
tbas606,1696226279,1,"#include <stdio.h>
/* This Function should locate the tile of interest and then set the two pointers to stroe teh row and column position of the tile
Author: Taha Basar
*/
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
tbed601,1696154816,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if ((tile == (board[i][j]))) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
tbri557,1696239655,1,"void FindTile(int board[4][4], int tile, int *rowPos, int *colPos){
    int temprow, tempcol;
    temprow = 0; tempcol = 0;
    for (int i = 0; i < 4; i++) {
        temprow ++;
        tempcol = 0;
        for (int j = 0; j < 4; j++) {
            tempcol ++;
            if (board[i][j] == -1){
                *rowPos = temprow -1;
                *colPos = tempcol -1;
                return;
            }
            
            
            
        }
    }
    
}",1
tche867,1695960520,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
    int i, j;
    for (i = 0; i <= 3; i++)
    {
        for (j = 0; j <= 3; j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
tcoo725,1696150665,1,"#include <stdio.h>

void FindTile(int board[4][4], int tile, int *rowPos, int *colPos)
{
    
    int i;
    int j;
    int row;
    int col;
    
    row = 4;
    col = 4;
    
    	for (i = 0; i < row; i++){
    	    
		for (j = 0; j < col; j++){
			if (board[i][j] == tile){
			*rowPos = i; 
			*colPos = j;
			}
			
		}
	}
}
",1
tden200,1696238774,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tiles, int *rowPos, int *colPos) {

	int i, j;

	for (i = 0; i < NUM_ROWS; i++){
	    for (j = 0; j< NUM_COLS; j++){

	    	if (board[i][j] == tiles) {
			*rowPos = i;
			*colPos = j;
		    }
	    }
	}

}",1
tdha392,1695863712,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
int i = 0;
int j = 0;
    
    for (i < colPos) {
        for (j < rowsPos) {
            if (board[j, i] == tile); 
            col = i;
            row = j;
            j++;
        }
        i++
    }
}",0
tdha392,1695864052,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
int i = 0;
int j = 0;
int NUM_COLS;
int NUM_ROWS;
    
    for (i = 0; i < NUM_COLS; i++) {
        for (j=0; j < NUM_ROWS; j++) {
            if (board[j, i] == tile); 
            int col = i;
            int row = j;
        }
    }
}",0
tdha392,1695898805,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
int i = -1;
int j = -1;
    
    for (i = 0; i < NUM_COLS; i++) {
        for (j=0; j < NUM_ROWS; j++) {
            if (board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            }
        }
    }
    return;
}",1
tdic873,1695684689,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
tdon950,1695885791,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row = 0;
    int col = 0;
    
    for (row = 0; row < 4; row++) {
        for(col = 0; col < 4; col++) {
            if (board[row][col] == tile) {
            *rowPos = row;
            *colPos = col;
            }
        }
    }
    return;
} ",1
tdu824,1696236914,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
	while (i < NUM_ROWS) {
		while (j < NUM_COLS) {
			if ( board[i][j] == tile ) {
				*rowPos=i ;
				*colPos=j ;
			}
            j++;
		}
        i++;
	}
}",0
tdu824,1696237074,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
	while (i < NUM_ROWS) {
	    j = 0;
		while (j < NUM_COLS) {
			if ( board[i][j] == tile ) {
				*rowPos=i ;
				*colPos=j ;
			}
            j++;
		}
        i++;
	}
}",1
tfai092,1695941866,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
    for (int i=0; i<NUM_ROWS; i++) {
        for (int j=0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
tfai653,1695695499,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	// Define variables.
	int i;
	int j;

	// Scan for the specified tile and find it's position.
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++){
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
thal182,1695613944,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i,j;
    for (i=0; i<NUM_ROWS; i++) {
        for (j=0; j<NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
thar970,1695653415,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for(int i=0;i<NUM_ROWS;i++){
        for(int j=0;j<NUM_COLS;j++){
            if(board[i][j]==tile){
                // printf(""%d %d"",&i,&j);
                
                *rowPos=i;
                *colPos=j;
                // printf(""\n%d,%d"",*rowPos,*colPos);
            }
        }
    }

}",1
thid924,1695953346,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {

			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;

			}

		}

	}
}",1
thua238,1695879187,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i=0; i<NUM_ROWS; i++) {
		for (int j=0; j<NUM_COLS; j++) {
			//if tile found update row/col and return
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
thut580,1696126245,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
tkan918,1695855807,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int col;
	int row;
	col = 0;
	row = 0;
	for(row=0; row<(NUM_ROWS); row++) {
		for(col=0; col<(NUM_COLS); col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
				return;
			}
		}
	}
}",1
tlal352,1696229040,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
        }
    }

}",1
tlin438,1695899362,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
   *rowPos=-1;
   *colPos=-1;
   int row;
   int col;
   
	for ( row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[row][col] = tile) {
				*rowPos=row;
				*colPos=col;
				return;
			}
		}
	}
}
",0
tlin438,1695899521,2,"
{
   *rowPos=-1;
   *colPos=-1;
   int row;
   int col;
   
	for ( row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[row][col] = tile) {
				*rowPos=row;
				*colPos=col;
				return;
			}
		}
	}
}
",0
tlin438,1695899555,3,"
   *rowPos=-1;
   *colPos=-1;
   int row;
   int col;
   
	for ( row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[row][col] = tile) {
				*rowPos=row;
				*colPos=col;
				return;
			}
		}
	}
}
",0
tlin438,1695899728,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
   *rowPos=-1;
   *colPos=-1;
   int row=0;
   int col=0;
   
	for ( row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[row][col] = tile) {
				*rowPos=row;
				*colPos=col;
				return;
			}
		}
	}
}",0
tlin438,1695899992,5,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
   *rowPos=-1;
   *colPos=-1;
   int row=0;
   int col=0;
   
   for ( row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos=row;
				*colPos=col;
				return;
			}
		}
	}
}",1
tlu253,1695699359,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i=0; i<NUM_ROWS; i++) {
		for (j=0; j<NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
tluu816,1695806230,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int r, c;
	for (r = 0; r < NUM_ROWS; r++) {
		for (c = 0; c < NUM_COLS; c++) {
			if (board[r][c] == tile) {
				*rowPos = r;
				*colPos = c;

			}
		}
	}
}",1
tman942,1696214355,1,"#include <stdio.h>

#define NUM_ROWS 3
#define NUM_COLS 3

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row; // Set the row position using the pointer
                *colPos = col; // Set the column position using the pointer
                return; // Exit the function once the tile is found
            }
        }
    }

    // If the tile is not found, set both rowPos and colPos to -1
    *rowPos = -1;
    *colPos = -1;
}

int main() {
    int board[NUM_ROWS][NUM_COLS] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    int tileToFind = 5;
    int rowPosition, colPosition;

    FindTile(board, tileToFind, &rowPosition, &colPosition);

    if (rowPosition != -1 && colPosition != -1) {
        printf(""Tile %d found at row %d, column %d.\n"", tileToFind, rowPosition, colPosition);
    } else {
        printf(""Tile %d not found on the board.\n"", tileToFind);
    }

    return 0;
}
In this code:

The FindTile function takes a 2D board, a tile value to search for, and two pointer variables (rowPos and colPos) as parameters.

It uses nested loops to traverse the board and searches for the specified tile value. When the tile is found, it updates the rowPos and colPos variables through the pointers and exits the function.

If the tile is not found, both rowPos and colPos are set to -1.

In the main function, we create a sample board, call FindTile to search for a tile value (in this case, 5), and then print the position if found or a message indicating that the tile was not found.





",0
tmcl219,1695952222,1,"/*This function searches through a 2D array of a specified size and finds the
location of a particular inputed value.*/
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    *rowPos = -1;
    *colPos = -1;
    
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
tmen190,1695628611,1,"/* This function finds the position of a tile */
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (tile==board[i][j])
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
tmir110,1696222385,1,"// Online C compiler to run C program online
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row;
    int col;
    
    for (row = 0; row < NUM_ROWS; row ++) {
        
        for (col = 0; col < NUM_COLS; col ++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }

}
",1
tmun974,1695872100,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{for (int i=0; i<NUM_ROWS; i++){
	for (int j=0; j<NUM_COLS; j++){
		if (board[i][j]==tile){
			*rowPos=i;
			*colPos=j;
			return;
		}
	}
}

}",1
tpan328,1695782912,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

int row, col, tile;

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                row = *rowPos;
                col = *colPos;
            }
        }
    }
    return row;
    return col;
}",0
tpan328,1695783007,2,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

int row, col, tile;

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                row = *rowPos;
                col = *colPos;
            }
        }
    }
}",1
tpat456,1695679172,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i,j,row,col;

for (i = 0; i < NUM_ROWS; i++) {
  for (j = 0; i < NUM_COLS; i++) {
    if (tile = board[i][j]) {
     row = i;
     col = j;
    }
  }
}
printf(""Empty tile is at row=%d and col=%d.\nMake your move: "", row, col);

}",0
tpat456,1695679291,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i,j,row,col;

for (i = 0; i < NUM_ROWS; i++) {
  for (j = 0; i < NUM_COLS; i++) {
    if (tile == board[i][j]) {
     row = i;
     col = j;
    }
  }
}
printf(""Empty tile is at row=%d and col=%d.\nMake your move: "", row, col);

}",0
tpat456,1695681742,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i,j;

for (i = 0; i < NUM_ROWS; i++) {
  for (j = 0; i < NUM_COLS; i++) {
    if (tile == board[i][j]) {}
     *rowPos = i;
     *colPos = j;
    }
  }
}
",0
tpat456,1695681932,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i,j;

for (i = 0; i < NUM_ROWS; i++) {
  for (j = 0; j < NUM_COLS; j++) {

    if (tile == board[i][j]) {
     *rowPos = i;
     *colPos = j;
    }
  }
}
}",1
tpil529,1695787105,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){

            if (board[i][j] == tile){

            *rowPos = i;
            *colPos = j;

            }
        }
    }

return;

}",1
tpra228,1696236189,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; ++i) {
		for (int j = 0; j < NUM_COLS; ++j) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return; 
			}
		}
	}

	*rowPos = -1;
	*colPos = -1;
}",1
tpur744,1695789709,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int i=0;i<NUM_ROWS;i++){
		for(int j=0;j<NUM_COLS;j++){
			if(board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
	*rowPos = -1;
	*colPos = -1;

}",1
tqhu735,1695627446,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
tron042,1695713078,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int rows; 
    int cols; 
    for (rows = 0; rows < NUM_ROWS; rows++) {
        for (cols = 0; cols < NUM_COLS; cols++) {
            if (board[rows][cols] == tile) {
                *rowPos = rows;
                *colPos = cols;
                return;  
            }
        }
    }
}",1
tron042,1695719174,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPosition, int *colPosition) {
    int rows; 
    int cols; 
    for (rows = 0; rows < NUM_ROWS; rows++) {
        for (cols = 0; cols < NUM_COLS; cols++) {
            if (board[rows][cols] == tile) {
                *rowPosition = rows;
                *colPosition = cols;
                return;  
            }
        }
    }
}",1
tsan986,1695847216,1,"#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int row,col;
    
    for (row = 0; row < NUM_ROWS; row++)
    {
        for (col = 0; col < NUM_COLS; col++) 
        {
            if ( board[row][col] == -1) {
            *rowPos = row;
            *colPos = col;
            return;
            }
        }
    }
}",1
tsin304,1696151985,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    
    
    
    for (int i = 0; i <= 3; i++)
    {
        for (int j = 0; j <= 3; j++)
        {
            if (board[i][j]==tile)
            {
                *rowPos = i;
                *colPos = j;
                //printf(""%d %d"", rowPos, colPos);
            }    
        }
    }
    
}",1
ttho505,1695788602,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ttho743,1695865671,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int j, i, x, row, col;
    for(i = 0; i < NUM_ROWS; i++) {
        for(j = 0; j < NUM_COLS; j++) {
            x = board[i][j];
            if(x == tile){
               row = i;
               col = j;
            }
            
        }
        
    }
    *rowPos = row;
    *colPos = col;
}",1
twol698,1695802753,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for(int i = 0; i<4 ;i++){
		for (int j = 0; j<4; j++){
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
tyou333,1695629417,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
tyou421,1695798421,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	/*This function iterates through a 2D array and finds the position of a specifed
	  integer.

	 Inputs:
			board: A 2D array representing the sliding tiles game.
			tile: The specified integer to look for in the 2D array.
			*rowPos: A pointer to integer that stores the row the specified tile is found in.
			*colPos: A pointer to integer that stores the column the specified tile is found in.

	 Author: Toma Yousif*/

	// Declare and initialise the indexers and storing variables.
	int i;
	int j;
	int row = 0;
	int col = 0;

	// Make the pointer variables point to the storing variables.
	*rowPos = &row;
	*colPos = &col;

	// Iterate through the 2D array
	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; i < NUM_COLS; i++)
		{

			// If the indexed element matches the specified tile, return the position of the indexed element.
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
tyou421,1695850515,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	/*This function iterates through a 2D array and finds the position of a specifed
	  integer.

	 Inputs:
			board: A 2D array representing the sliding tiles game.
			tile: The specified integer to look for in the 2D array.
			*rowPos: A pointer to integer that stores the row the specified tile is found in.
			*colPos: A pointer to integer that stores the column the specified tile is found in.

	 Author: Toma Yousif*/

	// Declare the indexers.
	int i;
	int j;

	// Iterate through every element in the 2D array.
	for (i = 0; i < NUM_ROWS; i++)
	{
		for (j = 0; j < NUM_COLS; j++)
		{
			// For every element, check if it matches the tile parameter.
			if (board[i][j] == tile)
			{
				// If it matches, store the row and column position.
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
tzha578,1695613329,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rows, int *cols){
    for(int i = 0;i<NUM_ROWS;++i){
        for(int j = 0;j<NUM_COLS;++j){
            if(board[i][j] == tile){
                *rows = i;
                *cols = j;
            }
        }
    }
    
}",1
tzho903,1696223961,1,"void FindTile(int board[4][4], int tile, int *rowPos, int *colPos)
{
    int NUM_ROWS;
    int NUM_COLS;
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == tile) { 
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    
}",0
tzho903,1696224019,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == tile) { 
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    
}",1
tzho903,1696236721,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) { 
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    
}",1
uali517,1695774267,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j; 
			}

		}
	}
}",1
ujai264,1695786088,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++){
		for(int j = 0; j < NUM_COLS; j++)
		if (board[i][j] == -1){
			
			*rowPos = i;
			*colPos = j;
		}
	}
	

}",1
vbar374,1696224003,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int row = 0;
    int col = 0;

    while (row < NUM_ROWS) {
        if (board[row][col] == tile) {
            *rowPos = row;
            *colPos = col;
            return;
        }

        col++;
        if (col == NUM_COLS) {
            col = 0;
            row++;
        }
    }

    *rowPos = -1;
    *colPos = -1;
}
",1
vkap589,1695762161,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }

}",1
vlai276,1696239888,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
 
        for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] = tile) {
                *colPos = j;
                *rowPos = i;
            }
        }
    }
    

}",0
vlai276,1696239918,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    
 
        for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile) {
                *colPos = j;
                *rowPos = i;
            }
        }
    }
    

}",1
vpat188,1696013541,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{

    int i,j;

    for (i = 0; i <= NUM_ROWS; i++){
        for (j = 0; j <= NUM_COLS; j++){
            
            if(board[i][j] == -1){
                
                *rowPos = i;
                *colPos = j;
            }
            
        }
    }

}",1
vpol480,1696139278,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
					*rowPos = i;
					*colPos = j;
			}
		}
	}
}
",1
vwon573,1696235745,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }
}",1
vwu693,1696216956,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int row, col;
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",0
vwu693,1696217179,2,"#define _CRT_SECURE_NO_WARNINGS_
#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
vxie208,1695782423,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
wany079,1695905854,1,"#include <stdio.h>
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_ROWS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
wany722,1695695023,1,"#include<stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    int i,j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (tile == board[i][j]){
                *rowPos = i;
                *colPos = j;
            }
        }
    }    
}",1
wany843,1695699252,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int i = 0; i < NUM_ROWS; i++) 
    {
        for (int j = 0; j < NUM_COLS; j++) 
        {
            if (board[i][j] == tile) 
            {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}
",1
wany897,1695785525,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile)
			{
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
wany932,1696210513,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
wkev690,1695843073,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i < NUM_ROWS; i++)
	{
		for (int j = 0; j < NUM_COLS; j++)
		{
			if (board[i][j] == tile){
				*rowPos = i;
				*colPos = j;
			}
		}
		
	}
	
}",1
wli798,1695892185,1,"#include <stdio.h> 
#define NUM_ROWS 4 
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++)

        if (board[i][j] == tile) {
        *rowPos = i;
        *colPos = j;
        }
    }
}
",1
wlin709,1696240023,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define NUM_ROWS 4 
#define NUM_COLS 4  

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int index = 0; index < NUM_ROWS * NUM_COLS; index++) {
        int row = index / NUM_COLS;
        int col = index % NUM_COLS;
        
        if (board[row][col] == tile) {
            *rowPos = row;
            *colPos = col;
            return;
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}
",1
wliy226,1696222275,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int index = 0; index < NUM_ROWS * NUM_COLS; index++) {
        int i = index / NUM_COLS; //calculates the row and column from loop index
        int j = index % NUM_COLS;//calculates using % operator to find the specified no. of columns
        
        if (board[i][j] == tile) { //checks if tile matches the values
            *rowPos = i; //stores the row position into the variable
            *colPos = j; //stores the columnar position into the variable
            return;
        }
    }
}
",1
wmas516,1695613097,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i=0; i < NUM_ROWS; i++) {
		for (int j=0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*(rowPos) = i;
				*(colPos) = j;
				return (0);
			}
		}

	}
	return 1;
}",0
wmas516,1695613130,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i=0; i < NUM_ROWS; i++) {
		for (int j=0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*(rowPos) = i;
				*(colPos) = j;
				return (0);
			}
		}

	}
	return (0);
}",0
wmas516,1695613171,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i=0; i < NUM_ROWS; i++) {
		for (int j=0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*(rowPos) = i;
				*(colPos) = j;
				return;
			}
		}

	}
	return;
}",1
wmas516,1695613345,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos) {
	for (int i=0; i < NUM_ROWS; i++) {
		for (int j=0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*(rowPos) = i;
				*(colPos) = j;
				return;
			}
		}

	}
	return;
}",1
wwan296,1695769772,1,"# include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i = 0; i < NUM_ROWS; i++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}
",1
wwon485,1695788091,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{	
	// Loops through all tiles to find -1
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row; 
				*colPos = col;
				return;
			}
		}
	}
}",1
wwu295,1696099865,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
wyu523,1695766858,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i=0; i<NUM_ROWS;i++){
        for (int j=0; j<NUM_COLS;j++){
            if (board[i][j]==-1){
                *rowPos=i;
                *colPos=j;
            }
        }
    }
}",1
wyua331,1696231575,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int rown=0;
    int coln=0;
   while(rown<4)
   {
       while(coln<4)
       {
           if (board[rown][coln]== tile)
           {
               *rowPos=rown;
               *colPos=coln;
           }
           coln++;
       }
       coln=0;
       rown++;
   }

}",1
wzha508,1695953861,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	*rowPos = -1;
	*colPos = -1;
	for (int i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}
",0
wzha508,1695953931,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;
	*rowPos = -1;
	*colPos = -1;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}
",1
xche362,1695875303,1,"#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i=0;i<NUM_ROWS;i++){
        for (int j=0;j<NUM_COLS;j++){
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
                return;
            }
        }
    }
}",1
xkan320,1695718710,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    for (i=0; i<NUM_ROWS; i++){
        int j;
        for (j=0;j<NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                i = NUM_ROWS;
                break;
            }
        }
    }
}",1
xli330,1695852112,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	// Loop through all rows inside the board.
	for (i = 0; i < NUM_ROWS; i++) {

		// Loop through all columns inside the board.
		for (j = 0; j < NUM_COLS; j++) {

			// If 'tile' is found.
			if (board[i][j] == tile) {

				// Assign row and column values to pointer locations.
				*rowPos = i;
				*colPos = j;
			}
		}

	}
}",1
xlia603,1696204609,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    
    for(i = 0; i < NUM_ROWS; i++){
        for(j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
        }
    }
    *rowPos = -1;
    *colPos = -1;
}
}",1
xmet073,1696237328,1,"void
FindTile (int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
  for (int i = 0; i < NUM_ROWS; i++)
    {
      for (int j = 0; j < NUM_COLS; j++)
	{
	  if (board[i][j] == tile)
	    {
	      *rowPos = i;
	      *colPos = j;
	      return;
	    }
	}
    }
  *rowPos = -1;
  *colPos = -1;
}
",1
xsny378,1696202011,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int i = 0; i < NUM_ROWS; i++)
    {
        for(int j = 0; j< NUM_COLS; j++)
        { 
            if( board[i][j] == tile)
            {
                *rowsPos = i;
                *colPos = j
            }
        }
    }
}",0
xsny378,1696202048,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for(int i = 0; i < NUM_ROWS; i++)
    {
        for(int j = 0; j< NUM_COLS; j++)
        { 
            if( board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
xtan207,1696238487,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    *rowPos = -1;
    *colPos = -1;
    int j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (tile == board[i][j]) {
                *rowPos = i;
                *colPos = j;
                return
        }
    }
}",0
xtan207,1696240294,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    *rowPos = -1;
    *colPos = -1;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return
        }
    }
}
}",0
xtan207,1696240532,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    *rowPos = -1;
    *colPos = -1;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
          }
      }
  }
}",1
xugn489,1695685096,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int row = 0; row < NUM_ROWS; row++){
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
yayo322,1696227644,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }
    *rowPos = -1;
    *colPos = -1;
}",1
ybha528,1695864721,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)


{

	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}

		}

	}
}",1
ycho749,1695722873,1,"void FindTile(int board[NUM_ROWS][NUM_COL], int tileToFind, int *rowPos, int *colPos)
{
    for(int i = 0; i < NUM_ROWS; i++)
    {
        for(int j = 0; j < NUM_COL; j++)
        {
            // Checking if the value is inside row i, col j
            if(board[i][j] == tileToFind)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",0
ycho749,1695723561,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tileToFind, int *rowPos, int *colPos)
{
    for(int i = 0; i < NUM_ROWS; i++)
    {
        for(int j = 0; j < NUM_COLS; j++)
        {
            if(board[i][j] == tileToFind)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
ycho760,1696239281,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_COLS; i++) {
		for (j = 0; j < NUM_ROWS; j++) {
			if (board[j][i] == tile) {
				*rowPos = j;
				*colPos = i;
			}
		}
	}

}",1
ydai729,1696239475,1,"#include <stdio.h>

#define NUM_ROWS 3
#define NUM_COLS 3

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                // Tile found, store the row and column positions
                *rowPos = row;
                *colPos = col;
                return;  // Exit the function
            }
        }
    }

    // Tile not found, set both positions to -1 to indicate not found
    *rowPos = -1;
    *colPos = -1;
}

int main() {
    int board[NUM_ROWS][NUM_COLS] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    int tileToFind = 
",0
ydai729,1696239510,2,"#include <stdio.h>

#define NUM_ROWS 3
#define NUM_COLS 3

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                // Tile found, store the row and column positions
                *rowPos = row;
                *colPos = col;
                return;  // Exit the function
            }
        }
    }

    // Tile not found, set both positions to -1 to indicate not found
    *rowPos = -1;
    *colPos = -1;
}",0
ydai729,1696239538,3,"#include <stdio.h>


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                // Tile found, store the row and column positions
                *rowPos = row;
                *colPos = col;
                return;  // Exit the function
            }
        }
    }

    // Tile not found, set both positions to -1 to indicate not found
    *rowPos = -1;
    *colPos = -1;
}",1
ydar075,1696503461,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return *rowPos, *colPos;
			}
		}

	}
}",0
ydar075,1696503564,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}

	}
}",1
yfan919,1696181859,1,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    int row;
    int col;
    for (i = 0; j = 0; i < *rowPos, j < *colPos; i++; j++){
    
    }
    if (board[i][j] == tile){
        row = i;
        col = j
    }
    return i, j;
}",0
yfan919,1696181887,2,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    int row;
    int col;
    for (i = 0; j = 0; i < *rowPos; j < *colPos; i++; j++){
    
    }
    if (board[i][j] == tile){
        row = i;
        col = j
    }
    return i, j;
}",0
yfan919,1696181903,3,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    int row;
    int col;
    for (i = 0; j = 0; i < rowPos; j < colPos; i++; j++){
    
    }
    if (board[i][j] == tile){
        row = i;
        col = j
    }
    return i, j;
}",0
yfan919,1696181918,4,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    int row;
    int col;
    for (i = 0; j = 0; i < *rowPos; j < *colPos; i++; j++){
    
    }
    if (board[i][j] == tile){
        row = i;
        col = j
    }
    return i, j;
}",0
yfan919,1696181945,5,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    int row;
    int col;
    for (i = 0; j = 0; i < *rowPos; j < *colPos; i++; j++){
    
    }
    if (board[i][j] == tile){
        row = i;
        col = j;
    }
    return i, j;
}",0
yfan919,1696181974,6,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    int row = 0;
    int col =  0;
    for (i = 0; j = 0; i < *rowPos; j < *colPos; i++; j++){
    
    }
    if (board[i][j] == tile){
        row = i;
        col = j;
    }
    return i, j;
}",0
yfan919,1696182038,7,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i = 0;
    int j = 0;
    int row = 0;
    int col =  0;
    for (i = 0; j = 0; i < *rowPos; j < *colPos; i++; j++){
    
    if (board[i][j] == tile){
        row = i;
        col = j;
    }
}
    return i, j;
}",0
yfan919,1696182831,8,"#include <stdio.h>

int FindTile(int board, int tile, int &row, int &col)
{
    int i = 0;
    int j = 0;
    for (i = 0; j = 0; i < row; j < col; i++; j++){
    
    if (board[i][j] == tile){
        row = i;
        col = j;
    }
}
    return i, j;
}",0
yfan919,1696183088,9,"#include <stdio.h>

int FindTile(int board, int tile, int row, int col)
{
    int i = 0;
    int j = 0;
    for (i = 0; j = 0; i < row; j < col; i++; j++){
    
    if (board[i][j] == tile){
        row = i;
        col = j;
    }
}
    return i, j;
}",0
yfan919,1696183111,10,"#include <stdio.h>

int FindTile(int board, int tile, int &row, int &col)
{
    int i = 0;
    int j = 0;
    for (i = 0; j = 0; i < row; j < col; i++; j++){
    
    if (board[i][j] == tile){
        row = i;
        col = j;
    }
}
    return i, j;
}",0
yfan919,1696183203,11,"#include <stdio.h>

int FindTile(int board, int tile, int &row, int &col)
{
    int i = 0;
    int j = 0;
    for (i = 0; j = 0; i < row; j < col; i++; j++){
    
    if (board[i][j] == tile){
        row = i;
        col = j;
    }
}
    return row, col;
}",0
yfan919,1696183214,12,"#include <stdio.h>

int FindTile(int board, int tile, int &row, int &col)
{
    int i = 0;
    int j = 0;
    for (i = 0; j = 0; i < row; j < col; i++; j++){
    
    if (board[i][j] == tile){
        row = i;
        col = j;
    }
}
    return &row, &col;
}",0
yfan919,1696183336,13,"#include <stdio.h>

int FindTile(int board, int tile, int &row, int &col)
{
    int i = 0;
    int j = 0;
    for (i = 0; i < row; i++){
        for (j = 0; j < col; j++){
            if (board[i][j] == tile){
                row = i;
                col = j;
            }
        }
    }

    return &row, &col;
}",0
yfan919,1696183354,14,"#include <stdio.h>

int FindTile(int board, int tile, int *row, int *col)
{
    int i = 0;
    int j = 0;
    for (i = 0; i < row; i++){
        for (j = 0; j < col; j++){
            if (board[i][j] == tile){
                row = i;
                col = j;
            }
        }
    }

    return *row, *col;
}",0
yfan919,1696183367,15,"#include <stdio.h>

int FindTile(int board, int tile, int row, int col)
{
    int i = 0;
    int j = 0;
    for (i = 0; i < row; i++){
        for (j = 0; j < col; j++){
            if (board[i][j] == tile){
                row = i;
                col = j;
            }
        }
    }

    return row, col;
}",0
yfan919,1696183681,16,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }

    return *rowPos, *colPos;
}",0
yfan919,1696183703,17,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }

    return;
}",0
yfan919,1696183801,18,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",0
yfan919,1696183939,19,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    *rowPos = -1;
    *colPos = -1;
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",0
yfan919,1696184213,20,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    *rowPos = -1;
    *colPos = -1;
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return *rowPos;
                return *colPos;
            }
        }
    }
}",0
yfan919,1696184225,21,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    *rowPos = -1;
    *colPos = -1;
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return *rowPos;
                return *colPos;
            }
        }
    }
}",0
yfan919,1696184246,22,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    rowPos = -1;
    colPos = -1;
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return rowPos;
                return colPos;
            }
        }
    }
}",0
yfan919,1696184257,23,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    *rowPos = -1;
    *colPos = -1;
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return rowPos;
                return colPos;
            }
        }
    }
}",0
yfan919,1696184265,24,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    *rowPos = -1;
    *colPos = -1;
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
                return *rowPos;
                return *colPos;
            }
        }
    }
}",0
yfan919,1696184291,25,"#include <stdio.h>

int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)

{
    *rowPos = -1;
    *colPos = -1;
    int i = 0;
    int j = 0;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
    return *rowPos;
    return *colPos;
}",1
yfen481,1695694077,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    *rowPos=-1;
    *colPos=-1;
    for (i=0;i<NUM_ROWS;i++){
        for (j=0;j<NUM_COLS;j++){
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
                return
            }
        }
    }
}",0
yfen481,1695694324,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    *rowPos=-1;
    *colPos=-1;
    for (i=0;i<NUM_ROWS;i++){
        for (j=0;j<NUM_COLS;j++){
            if (board[i][j]==tile){
                *rowPos=i;
                *colPos=j;
                return;
            }
        }
    }
}",1
yhaf839,1695779624,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {

int row;
int col;

    for (row = 0; row < NUM_ROWS; row++) {
        
        for (col = 0; col < NUM_COLS; col++) {
            
            if (board[row][col] == tile) {
                
                *rowPos = row;
                *colPos = col;
                
                return;
        }
    }
}
",0
yhaf839,1695779985,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {

int row;
int col;

    for (row = 0; row < NUM_ROWS; row++) {
        
        for (col = 0; col < NUM_COLS; col++) {
            
            if (board[row][col] == tile) {
                
                *rowPos = row;
                *colPos = col;
                
               
        }
    }
}
}
",1
yilm466,1695876658,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j, row, col; 
    for (i =0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
            row = i; 
            col = j;
            }
        }
    }
    *rowPos = row;
    *colPos = col;
}
",1
yjun129,1695676848,1,"#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }

}",1
ykwa219,1696149110,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	for (int i = 0; i < NUM_ROWS; i++) {
		for (int j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
ylee818,1696134421,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4

int temprow=-1;
int tempcol=-1;
int FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 for(int newrow=0; newrow<=NUM_ROWS; newrow++){
     for(int newcol=0; newcol<=NUM_COLS; newcol++){
         if(board[newrow][newcol]==-1){
             *rowPos = newrow;
             *colPos = newcol;
         }
     }
 } 
 return tempcol, temprow;
}",0
ylee818,1696135398,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4


void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
 for(int newrow=0; newrow<NUM_ROWS; newrow++){
     for(int newcol=0; newcol<NUM_COLS; newcol++){
         if(board[newrow][newcol]==tile){
             *rowPos = newrow;
             *colPos = newcol;
              return;
         }
     }
 } 
}",1
yrah128,1696104728,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // Tile found, exit the function
            }
        }
    }
    
    // If the tile is not found, set rowPos and colPos to -1 (or some other invalid value)
    *rowPos = -1;
    *colPos = -1;
}
int board[NUM_ROWS][NUM_COLS] = {
    {9, 10, 11, 12},
    {13, 14, 15, -1}
};

int row, col;
FindTile(board, -1, &row, &col);
printf(""Empty tile is at row=%d and col=%d.\nMake your move: "", row, col);",0
yrah128,1696105014,2,"#define NUM_ROWS 4
#define NUM_COLS 4

#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; // Tile found, exit the function
            }
        }
    }

    // If the tile is not found, set rowPos and colPos to -1 (or some other invalid value)
    *rowPos = -1;
    *colPos = -1;
}

int main() {
    int board[NUM_ROWS][NUM_COLS] = {
        {9, 10, 11, 12},
        {13, 14, 15, -1}
    };

    int row, col;
    FindTile(board, -1, &row, &col);
    printf(""Empty tile is at row=%d and col=%d.\nMake your move: "", row, col);

    return 0;
}",0
yrah128,1696105243,3,"#define NUM_ROWS 4
#define NUM_COLS 4

#include <stdio.h>

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }

    // If the tile is not found, set rowPos and colPos to -1 (or some other invalid value)
    *rowPos = -1;
    *colPos = -1;
}",1
ysun512,1695815166,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}
",1
ytho155,1695680007,1,"#include <stdio.h>
//This code finds the location of an empty tile denoted by the -1
//when found it prints out the row and column of that empty tile 
//as well as prompting the user to make a move. 
//Author: Yi Shun

void FindTile(int board[4][4], int tile, int *rowPos, int *colPos) {
    int row, col;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == -1) {
                *rowPos = i;
                *colPos = j;
                row = *rowPos;
                col = *colPos;
                return; 
            }
        }
    }
}",0
ytho155,1695688936,2,"#include <stdio.h>
//This code finds the location of an empty tile denoted by the -1
//when found it prints out the row and column of that empty tile 
//as well as prompting the user to make a move. 
//Author: Yi Shun

void FindTile(int board[4][4], int tile, int *rowPos, int *colPos) {
int row, col;

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == -1) {
                *rowPos=row;
                *colPos=col;
                return; 
            }
        }
    }
}",0
ytho155,1695689369,3,"#include <stdio.h>
//This code finds the location of an empty tile denoted by the -1
//when found it prints out the row and column of that empty tile 
//as well as prompting the user to make a move. 
//Author: Yi Shun

void FindTile(int board[4][4], int tile, int *rowPos, int *colPos) {

    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == -1) {
                *rowPos=i;
                *colPos=j;
                return; 
            }
        }
    }
}",1
ytse120,1695631702,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i<NUM_ROWS; i++) {
		for (int j = 0; j<NUM_COLS; j++) {
			if (board[i][j] == tile) {
				rowPos = i;
				colPos = j;
			}
		}
	}
}",0
ytse120,1695632527,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	for (int i = 0; i<NUM_ROWS; i++) {
		for (int j = 0; j<NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
yxie884,1695612067,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (board[i][j] == tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
yyin299,1695868105,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i;
    int j;
    for (i = 0; i < NUM_ROWS; i++)
    {
        for (j = 0; j < NUM_COLS; j++)
        {
            if (board[i][j] == tile)
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}
",1
yyin440,1695779940,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;  
            }
        }
    }
   
    *rowPos = -1;
    *colPos = -1;
}",1
yzhe520,1695723440,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{ 
	int i, j;
	//Initialise the values
	*rowPos = 0;
	*colPos = 0;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == -1) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
yzhe520,1695723607,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{ 
	int i, j;
	//Initialise the values
	*rowPos = 0;
	*colPos = 0;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}

}",1
zche975,1696236746,1,"#include <stdio.h>

#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }

    *rowPos = -1;
    *colPos = -1;
}",1
zcol623,1695640935,1,"//Author:zcol623
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	//Loop through the board, checking the values in each position until  the position that holds the value equivalent to the desired tile is found
	for (int row = 0; row < NUM_ROWS; row++) {
		for (int col = 0; col < NUM_COLS; col++) {
			if (board[row][col] == tile) {
				*rowPos = row;//Row of the desired tile
				*colPos = col;//Column of the desired tile
				return; //The tile has been located
			}
		}
	}
	//If the tile doesn't exist set rowPos and colPos to -1 
	*rowPos = -1;
	*colPos = -1;
}",1
zcra120,1695862440,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
int i,j;
for (i=0;i<NUM_ROWS;i++){
for (j=0;j<NUM_COLS;j++){

    if (board[i][j] == tile) {
    *rowPos =i;
    *colPos = j;

}
}
}
}",1
zfu276,1696062594,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;

    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
zgab423,1695711930,1,"#include <stdio.h>

/* The dimensions of the puzzle */
#define NUM_ROWS 4
#define NUM_COLS 4

void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int rows = 0; rows < NUM_ROWS; rows++) {
        for (int cols = 0; cols < NUM_COLS; cols++) {
            
            if (board[rows][cols] == tile)  {
                *rowPos = rows;
                *colPos = cols;
                return;
                
            }
        }
        
    }
    
    *rowPos = -2;
    *colPos = -2;
}
",1
zgar110,1696233776,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i, j;
    for (i = 0; i < NUM_ROWS; i++) {
        for (j = 0; j < NUM_COLS; j++) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return;
             }
         } 
     }
}",1
zgas053,1696243643,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++);{
        for (int col = 0; col < NUM_COLS; col++);{
            if (row == tile && col == tile) {
               *colPos = col;
               *rowPos = row; 
               return;
            }
        }
    }
    
}",0
zgas053,1696243812,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++);{
        for (int col = 0; col < NUM_COLS; col++);{
            if (board[row] == tile && board[col] == tile) {
               *colPos = col;
               *rowPos = row; 
               return;
            }
        }
    }
    
}",0
zgas053,1696243855,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++);{
        for (int col = 0; col < NUM_COLS; col++);{
            if (board[row][col] == tile) {
               *colPos = col;
               *rowPos = row; 
               return;
            }
        }
    }
    
}",0
zgas053,1696243984,4,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++){
        for (int col = 0; col < NUM_COLS; col++){
            if (board[row][col] == tile) {
               *colPos = col;
               *rowPos = row; 
               return;
            }
        }
    }
    
}",1
zgin653,1695628384,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos){
    for (int i=0; i < NUM_ROWS; i ++){
        for (int j = 0; j < NUM_COLS; j++){
            if (board[i][j] == -1){
                *rowPos = i;
                *colPos = j;
                return;
            }
        }
    }
}",1
zguo839,1696209406,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return; 
            }
        }
    }
    
    *rowPos = -1;
    *colPos = -1;
}
",1
zguo839,1696211812,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i = 0;
    int j;
    
    while (i < NUM_ROWS) {
        j = 0;
        while (j < NUM_COLS) {
            if (board[i][j] == tile) {
                *rowPos = i;
                *colPos = j;
                return; 
            }
            i++;
        }
        j++;
    }
    *rowPos = -1;
    *colPos = -1;
}

",0
zguo839,1696212008,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int row = 0, col = 0;
    while (row < NUM_ROWS) {
        if (board[row][col] == tile) {
            *rowPos = row;
            *colPos = col;
            return; // Tile found, exit the loop
        }
        col++;
        if (col == NUM_COLS) {
            col = 0;
            row++;
        }
    }
    // If the tile is not found, you can set rowPos and colPos to some default values or handle it as needed.
    *rowPos = -1;
    *colPos = -1;
}


",1
zhon780,1696244309,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int row = 0; row < NUM_ROWS; row++)
    {
        for (int col = 0; col < NUM_COLS; col++)
        {
            if (board[row][col] == -1)
            {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}",1
zliu381,1695944860,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
zliu578,1696038412,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				rowPos = i;
				colPos = j;
			}
		}
	}
}",0
zliu578,1696038920,2,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i;
	int j;
	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
			}
		}
	}
}",1
zpen457,1696063875,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    int i,j;
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if (tile == board[i][j]){
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
zqia091,1696216070,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) 
{
    for (int row=0; row<NUM_ROWS; row++) 
    {
        for (int col=0; col<NUM_COLS; col++) 
        {
            if (board[row][col]==tile) 
            {
                *rowPos=row;
                *colPos=col;
                return;
            }
        }
    }
}",1
zshi453,1695610924,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile (int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
  int i, j;
  for (i = 0; i < NUM_ROWS; ++i){
      for (j = 0; j < NUM_COLS; ++j){
	  if (board[i][j] == tile)
	    {
	      *rowPos = i;
	      *colPos = j;
	    }
	}
    }
  return;
}",1
zvor566,1695971114,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int* rowPos, int* colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
zwan373,1695703014,1,"#include <stdio.h>
    #define NUM_ROWS 4
    #define NUM_COLS 4
    void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{   
    int i;
    int j;
    for(i=0;i<NUM_ROWS;i++){
        for(j=0;j<NUM_COLS;j++){
            if (board[i][j]==tile){
                *rowPos = i;
                *colPos = j;
            }
        }
    }

}",1
zwil198,1696229052,1,"#include <stdio.h>

void FindTile(int board[num_r][num_c], int tile, int *rowPos, int *colPos) {
    
    for (int row = 0; row < num_r; row++) {


    for (int col = 0; col < num_c; col++) {
        if (board[row][col] == tile) {
        *rowPos = row;
        *colPos = col;
        return;
            }
        }
    }

*rowPos = -1;
*colPos = -1;
}",0
zwil198,1696229086,2,"#include <stdio.h>

int num_r
int num_c


void FindTile(int board[num_r][num_c], int tile, int *rowPos, int *colPos) {
    
    for (int row = 0; row < num_r; row++) {


    for (int col = 0; col < num_c; col++) {
        if (board[row][col] == tile) {
        *rowPos = row;
        *colPos = col;
        return;
            }
        }
    }

*rowPos = -1;
*colPos = -1;
}",0
zwil198,1696229119,3,"#include <stdio.h>

#define num_r 4
#define num_c 4


void FindTile(int board[num_r][num_c], int tile, int *rowPos, int *colPos) {
    
    for (int row = 0; row < num_r; row++) {


    for (int col = 0; col < num_c; col++) {
        if (board[row][col] == tile) {
        *rowPos = row;
        *colPos = col;
        return;
            }
        }
    }

*rowPos = -1;
*colPos = -1;
}",1
zwon694,1695696273,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int i, j;

	for (i = 0; i < NUM_ROWS; i++) {
		for (j = 0; j < NUM_COLS; j++) {
			if (board[i][j] == tile) {
				*rowPos = i;
				*colPos = j;
				return;
			}
		}
	}
}",1
zwu591,1695962033,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
	int row, col;

	for (row = 0; row < NUM_ROWS; row++) {
		for (col = 0; col < NUM_COLS; col++) {
			
			if (board[row][col] == tile) {
				*rowPos = row;
				*colPos = col;
			}
		}
	}
}",1
zyah987,1696149211,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    int i = 0, j = 0;
    do {
        if(board[i][j] == tile) {
            *rowPos = i;
            *colPos = j;
            return;
        }
        j = (j + 1 < NUM_COLS) ? j + 1 : 0;
        i = (j == 0) ? i + 1 : i;
    } while(i < NUM_ROWS);
}
",1
zyao804,1695694485,1,"#include <stdio.h>
#define NUM_ROWS 4
#define NUM_COLS 4
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    for (int i=0;i<NUM_ROWS;i++)
    {
        for (int j=0;j<NUM_COLS;j++)
        {
            if (tile == board[i][j])
            {
                *rowPos = i;
                *colPos = j;
            }
        }
    }
}",1
zyu100,1695693278,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos)
{
    *colPos=-1;
    *rowPos=-1;
    for (int i=0; i<NUM_ROWS;i++){
    for (int j=0;j<NUM_COLS; j++){
        if(board[i][j]==tile){
            *rowPos=i;
            *colPos=j;
            return;
            
    }
   
  }
}
}",1
zzho965,1696239824,1,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row; 
                *colPos = col; 
                return; 
            }
        }
    }
}",1
zzho965,1696243605,2,"void MakeMove(int board[NUM_ROWS][NUM_COLS], int tile) {
    int rowPos, colPos;
    FindTile(board, tile, &rowPos, &colPos); 
   
    if (rowPos - 1 >= 0 && board[rowPos - 1][colPos] == -1) {
        board[rowPos][colPos ] = -1;
        board[rowPos - 1][colPos] = tile;
        }
        
    else if (rowPos + 1 < NUM_ROWS && board[rowPos + 1][colPos] == -1) {
        board[rowPos][colPos ] = -1;
        board[rowPos + 1][colPos] = tile;
        }
        
    else if (colPos - 1 >= 0 && board[rowPos][colPos - 1] == -1) { 
        board[rowPos][colPos ] = -1;
        board[rowPos][colPos - 1] = tile;
        }
        
    else if (colPos + 1 < NUM_COLS && board[rowPos][colPos + 1] == -1) { 
        board[rowPos][colPos ] = -1;
        board[rowPos][colPos - 1] = tile;
        }


    else {
        
    }
}
",0
zzho965,1696243762,3,"void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row; 
                *colPos = col; 
                return; 
            }
        }
    }
}",1
zzol692,1696232457,1,"//Author: Zara Zoll
//This function should locate the tile of interest (which is specified in the tile parameter) 
//and then set the two pointers (rowPos and colPos) to store the row and column position of the tile. 
void FindTile(int board[NUM_ROWS][NUM_COLS], int tile, int *rowPos, int *colPos) {
    *rowPos = -1;
    *colPos = -1;

    for (int row = 0; row < NUM_ROWS; row++) {
        for (int col = 0; col < NUM_COLS; col++) {
            if (board[row][col] == tile) {
                *rowPos = row;
                *colPos = col;
                return;
            }
        }
    }
}

",1
