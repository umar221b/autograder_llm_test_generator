upi,time,try,answer,rawfraction
aana675,1696820142,1,"#include <string.h>


void Histogram(char *result, int *data, int size) {
    int max = 0;
    
    
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    
    
    for (int row = max; row >= 0; row--) {
        for (int col = 0; col < size + 2; col++) {
            if (row == 0 || col == 0 || col == size + 1) {
                result[row * (size + 3) + col] = '*';
            } else if (data[col - 1] >= row) {
                result[row * (size + 3) + col] = 'X';
            } else {
                result[row * (size + 3) + col] = ' ';
            }
        }
    }
    
    
    result[(max + 1) * (size + 3)] = '\0';
}",0
aaza463,1696282940,1,"void Histogram(char *Output, int values[], int arrsize){
    int i, j, maxVal, modVal;
    char tempray[arrsize+1];
    char astrarray[arrsize+2];

    Output[0] = '\0';
   
    maxVal = values[0];
    for (i = 1; i < arrsize; i++){
        if (values[i] > maxVal){
            maxVal = values[i];
        }
    }    

    for (i = 0; i < arrsize+2; i++){
        Output[i] = '*';
    }
    Output[arrsize+2] = '\n';
    Output[arrsize+3] = '\0';

    for (i = maxVal; i > 0; i--){
        for (j = 0; j < arrsize; j++){
            if (values[j] >= i){
                tempray[j] = 'X';
            }
            else{
                tempray[j] = 32;
            }
        }
        tempray[arrsize + 1] = '\0' ;
        strcat(Output, ""*"");
        strcat(Output, tempray);
        strcat(Output, ""*"");
        strcat(Output, ""\n"");
        strcat(Output, ""\0"");
    }
  
    for (i = 0; i < arrsize+2; i++){
        astrarray[i] = '*';
    }

    strcat(Output, astrarray);
}",0
aaza463,1696283026,2,"void Histogram(char *Output, int values[], int arrsize){
    int i, j, maxVal;
    char tempray[arrsize+1];
    char astrarray[arrsize+2];

    Output[0] = '\0';
   
    maxVal = values[0];
    for (i = 1; i < arrsize; i++){
        if (values[i] > maxVal){
            maxVal = values[i];
        }
    }    

    for (i = 0; i < arrsize+2; i++){
        Output[i] = '*';
    }
    Output[arrsize+2] = '\n';
    Output[arrsize+3] = '\0';

    for (i = maxVal; i > 0; i--){
        for (j = 0; j < arrsize; j++){
            if (values[j] >= i){
                tempray[j] = 'X';
            }
            else{
                tempray[j] = 32;
            }
        }
        tempray[arrsize + 1] = '\0' ;
        strcat(Output, ""*"");
        strcat(Output, tempray);
        strcat(Output, ""*"");
        strcat(Output, ""\n"");
        strcat(Output, ""\0"");
    }
  
    for (i = 0; i < arrsize+2; i++){
        astrarray[i] = '*';
    }

    strcat(Output, astrarray);
}",0
aaza463,1696283415,3,"void Histogram(char *Output, int values[], int arrsize){
    int i, j, maxVal;
    char tempray[arrsize+1];
    char astrarray[arrsize+2];

    Output[0] = '\0';
   
    maxVal = values[0];
    for (i = 1; i < arrsize; i++){
        if (values[i] > maxVal){
            maxVal = values[i];
        }
    }    

    for (i = 0; i < arrsize+2; i++){
        Output[i] = '*';
    }
    Output[arrsize+2] = '\n';
    Output[arrsize+3] = '\0';

    for (i = maxVal; i > 0; i--){
        for (j = 0; j < arrsize; j++){
            if (values[j] >= i){
                tempray[j] = 'X';
            }
            else{
                tempray[j] = 32;
            }
        }
        tempray[arrsize + 1] = '\0' ;
        strcat(Output, ""*"");
        strcat(Output, tempray);
        strcat(Output, ""*"");
        strcat(Output, ""\n"");
        strcat(Output, ""\0"");
    }
  
    for (i = 0; i < arrsize+2; i++){
        astrarray[i] = '*';
    }
    astrarray[i] = '\0';

    strcat(Output, astrarray);
}",0
aaza463,1696283941,4,"void Histogram(char *Output, int values[], int arrsize){
    int i, j, maxVal;
    char tempray[arrsize+1];
    char astrarray[arrsize+2];

    Output[0] = '\0';
   
    maxVal = values[0];
    for (i = 1; i < arrsize; i++){
        if (values[i] > maxVal){
            maxVal = values[i];
        }
    }    

    for (i = 0; i < arrsize+2; i++){
        Output[i] = '*';
    }
    Output[arrsize+2] = '\n';
    Output[arrsize+3] = '\0';

    for (i = maxVal; i > 0; i--){
        for (j = 0; j < arrsize; j++){
            if (values[j] >= i){
                tempray[j] = 'X';
            }
            else{
                tempray[j] = 32;
            }
        }
        tempray[arrsize] = '\0' ;
        strcat(Output, ""*"");
        strcat(Output, tempray);
        strcat(Output, ""*"");
        strcat(Output, ""\n"");
        strcat(Output, ""\0"");
    }
  
    for (i = 0; i < arrsize+2; i++){
        astrarray[i] = '*';
    }
    astrarray[i] = '\0';

    strcat(Output, astrarray);
}",1
abha257,1696669614,1,"void Histogram(char* format, int values[], int length) {
	memset(format, 0, 1000);
	int max = values[0];
	int i = 0;
	int j = 0;
	char temp[100];
	char temp1[100];

	for (i = 0; i < length; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}
	for (i = 0; i < length + 2; i++) {
		format[i] = '*';
		if (i == length + 1) {
			format[i] = '*';
			format[i+1] = '\n';
		}
	}
	for (j = 0; j < max; j++) {
		for (i = 0; i < length + 2; i++) {
			//memset(temp, 0, 100);
			if (i == 0) {
			temp[i] = '*';
			}
			else if (i == length + 1) {
				temp[i] = '*';
				temp[length + 2] = '\n';
				temp[length + 3] = 0;
			}
			else {
				if (values[i-1] >= (max - j)) {
					temp[i] = 'X';
				}
				else {
					temp[i] = ' ';
				}
			}
		}
		strcat(format, temp);
	}
	for (i = 0; i < length + 2; i++) {
		temp1[i] = '*';
		temp1[length + 2] = 0;
	}
	strcat(format, temp1);
}",1
abro522,1696228329,1,"void Histogram(char* histogram, int* data, int len) {
    int hist_w = len + 3;

    // find maximum value
    int max_data = 0;
    for (int i = 0; i < len; i++) {
        if (data[i] > max_data) {
            max_data = data[i];
        }
    }

    // add first and last row
    for (int row = 0; row <= max_data + 1; row += max_data + 1) {
        for (int i = 0; i < len + 2; i++) {
            histogram[row * hist_w + i] = '*';
        }
        histogram[row * hist_w + hist_w - 1] = (row == 0) ? '\n' : '\0';
    }

    for (int row = 1; row <= max_data; row++) {
        histogram[row * hist_w] = '*';
        for (int i = 0; i < len; i++) {
            histogram[row * hist_w + i + 1] = (data[i] > (max_data - row)) ? 'X' : ' ';
        }
        histogram[row * hist_w + len + 1] = '*';
        histogram[row * hist_w + len + 2] = '\n';
    }
}",1
acam267,1696730980,1,"void Histogram(char* formatted, int* values, int amount) {
    int height = 0;
    
    for (int i = 0; i < amount; i++) {
        if (values[i] > height) {
            height = values[i];
        }
    }
    
    char astrixs[amount + 2];
    
    for (int i = 0; i < amount + 2; i++) {
        astrix[i] = '*';
    }
    
    strcat(formatted, astrixs);
    strcat(formatted, ""\n"");
    
    while (height > 0) {
        char data[amount + 2];
        
        data[0] = '*';
        
        for (int i = 0; i < amount; i++) {
            if (values[i] >= height) {
                data[i + 1] = 'X';
            } else {
                data[i + 1] = ' ';
            }
        }
        
        data[amount + 1] = '*';
        data[amount + 2] = '\0';
        
        strcat(formatted, data);
        strcat(formatted, ""\n"");
        
        height--;
    }
    strcat(formatted, astrixs);
    strcat(formatted, ""\n"");
}
",0
acam267,1696731014,2,"void Histogram(char* formatted, int* values, int amount) {
    int height = 0;
    
    for (int i = 0; i < amount; i++) {
        if (values[i] > height) {
            height = values[i];
        }
    }
    
    char astrixs[amount + 2];
    
    for (int i = 0; i < amount + 2; i++) {
        astrixs[i] = '*';
    }
    
    strcat(formatted, astrixs);
    strcat(formatted, ""\n"");
    
    while (height > 0) {
        char data[amount + 2];
        
        data[0] = '*';
        
        for (int i = 0; i < amount; i++) {
            if (values[i] >= height) {
                data[i + 1] = 'X';
            } else {
                data[i + 1] = ' ';
            }
        }
        
        data[amount + 1] = '*';
        data[amount + 2] = '\0';
        
        strcat(formatted, data);
        strcat(formatted, ""\n"");
        
        height--;
    }
    strcat(formatted, astrixs);
    strcat(formatted, ""\n"");
}",0
acam267,1696833069,3,"void Histogram(char* formatted, int* values, int amount) {
    formatted[0] = ""\0"";
    int height = 0;
    
    for (int i = 0; i < amount; i++) {
        if (values[i] > height) {
            height = values[i];
        }
    }
    
    char astrixs[amount + 2];
    
    for (int i = 0; i < amount + 2; i++) {
        astrixs[i] = '*';
    }
    
    strcat(formatted, astrixs);
    strcat(formatted, ""\n"");
    
    while (height > 0) {
        char data[amount + 2];
        
        data[0] = '*';
        
        for (int i = 0; i < amount; i++) {
            if (values[i] >= height) {
                data[i + 1] = 'X';
            } else {
                data[i + 1] = ' ';
            }
        }
        
        data[amount + 1] = '*';
        data[amount + 2] = '\0';
        
        strcat(formatted, data);
        strcat(formatted, ""\n"");
        
        height--;
    }
    strcat(formatted, astrixs);
}",0
acam267,1696833164,4,"void Histogram(char* formatted, int* values, int amount) {
    formatted[0] = '\0';
    int height = 0;
    
    for (int i = 0; i < amount; i++) {
        if (values[i] > height) {
            height = values[i];
        }
    }
    
    char astrixs[amount + 2];
    
    for (int i = 0; i < amount + 2; i++) {
        astrixs[i] = '*';
    }
    
    strcat(formatted, astrixs);
    strcat(formatted, ""\n"");
    
    while (height > 0) {
        char data[amount + 2];
        
        data[0] = '*';
        
        for (int i = 0; i < amount; i++) {
            if (values[i] >= height) {
                data[i + 1] = 'X';
            } else {
                data[i + 1] = ' ';
            }
        }
        
        data[amount + 1] = '*';
        data[amount + 2] = '\0';
        
        strcat(formatted, data);
        strcat(formatted, ""\n"");
        
        height--;
    }
    strcat(formatted, astrixs);
}",0
acam267,1696835281,5,"void Histogram(char* formatted, int* values, int amount) {
    formatted[0] = '\0';
    int height = 0;
    
    for (int i = 0; i < amount; i++) {
        if (values[i] > height) {
            height = values[i];
        }
    }
    
    char astrixs[amount + 2];
    
    for (int i = 0; i < amount + 2; i++) {
        astrixs[i] = '*';
    }
    astrixs[amount+2] = '\0';
    strcat(formatted, astrixs);
    strcat(formatted, ""\n"");
    
    while (height > 0) {
        char data[amount + 3];
        
        data[0] = '*';
        
        for (int i = 0; i < amount; i++) {
            if (values[i] >= height) {
                data[i + 1] = 'X';
            } else {
                data[i + 1] = ' ';
            }
        }
        
        data[amount + 1] = '*';
        data[amount + 2] = '\0';
        
        strcat(formatted, data);
        strcat(formatted, ""\n"");
        
        height--;
    }
    strcat(formatted, astrixs);
}",1
achi359,1696841059,1,"void Histogram(char *outputString, int inputArray[], int length){

// find the largest number in the inputArray, this defines the max height. 
int max = inputArray[0]
for (int i = 1; i < n; i++){
    if (inputArray[i]>max){
        max = inputArray[i];
    }
}
int width = length + 2;

//create top border 
for (int i = 0; i < width; i++){
    strcat(outputString, ""*"");
}

for (int i = max; i >= 1; i--){ 
    strcat(outputString, ""*"");
    for (int j = 1; j <= length; j++){
        if (inputArray[j - 1] < i){
            strcat(outputString, "" ""); 
        } else { 
            strcat(outputString, ""X"");
        }
        
        strcat(outputString, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
        strcat(outputString, ""*"");
    }
    }
}",0
achi359,1696841105,2,"void Histogram(char *outputString, int inputArray[], int length){

// find the largest number in the inputArray, this defines the max height. 
int max = inputArray[0]
for (int i = 1; i < length; i++){
    if (inputArray[i]>max){
        max = inputArray[i];
    }
}
int width = length + 2;

//create top border 
for (int i = 0; i < width; i++){
    strcat(outputString, ""*"");
}

for (int i = max; i >= 1; i--){ 
    strcat(outputString, ""*"");
    for (int j = 1; j <= length; j++){
        if (inputArray[j - 1] < i){
            strcat(outputString, "" ""); 
        } else { 
            strcat(outputString, ""X"");
        }
        
        strcat(outputString, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
        strcat(outputString, ""*"");
    }
    }
}",0
achi359,1696841241,3,"void Histogram(char *outputString, int inputArray[], int length){

outputString[0] = '\0';
// find the largest number in the inputArray, this defines the max height. 
int max = inputArray[0];
for (int i = 1; i < length; i++){
    if (inputArray[i]>max){
        max = inputArray[i];
    }
}
int width = length + 2;

//create top border 
for (int i = 0; i < width; i++){
    strcat(outputString, ""*"");
}

for (int i = max; i >= 1; i--){ 
    strcat(outputString, ""*"");
    for (int j = 1; j <= length; j++){
        if (inputArray[j - 1] < i){
            strcat(outputString, "" ""); 
        } else { 
            strcat(outputString, ""X"");
        }
        
        strcat(outputString, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
        strcat(outputString, ""*"");
    }
    }
}",0
achi359,1696841347,4,"void Histogram(char *outputString, int inputArray[], int length){

outputString[0] = '\0';
// find the largest number in the inputArray, this defines the max height. 
int max = 0;
for (int i = 1; i < length; i++){
    if (inputArray[i] > max){
        max = inputArray[i];
    }
}
int width = length + 2;

//create top border 
for (int i = 0; i < width; i++){
    strcat(outputString, ""*"");
}

for (int i = max; i >= 1; i--){ 
    strcat(outputString, ""*"");
    for (int j = 1; j <= length; j++){
        if (inputArray[j - 1] < i){
            strcat(outputString, "" ""); 
        } else { 
            strcat(outputString, ""X"");
        }
        
        strcat(outputString, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
        strcat(outputString, ""*"");
    }
    }
}",0
achi359,1696841471,5,"void Histogram(char *outputString, int inputArray[], int length){

outputString[0] = '\0';
// find the largest number in the inputArray, this defines the max height. 
int max = 0;
for (int i = 1; i < length; i++){
    if (inputArray[i] > max){
        max = inputArray[i];
    }
}
int width = length + 2;

//create top border 
for (int i = 0; i < width; i++){
    strcat(outputString, ""*"");
}

for (int i = max; i >= 1; i--){ 
    strcat(outputString, ""*"");
    for (int j = 1; j <= length; j++){
        if (inputArray[j - 1] >= i){
            strcat(outputString, ""X""); 
        } else { 
            strcat(outputString, "" "");
        }
        
        strcat(outputString, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
        strcat(outputString, ""*"");
    }
    }
}",0
achi359,1696841567,6,"void Histogram(char *outputString, int inputArray[], int length){

outputString[0] = '\0';
// find the largest number in the inputArray, this defines the max height. 
int max = 0;
for (int i = 0; i < length; i++){
    if (inputArray[i] > max){
        max = inputArray[i];
    }
}
int width = length + 2;

//create top border 
for (int i = 0; i < width; i++){
    strcat(outputString, ""*"");
}

strcat(outputString, ""\n""); 

for (int i = max; i >= 1; i--){ 
    strcat(outputString, ""*"");
    for (int j = 1; j <= length; j++){
        if (inputArray[j - 1] >= i){
            strcat(outputString, ""X""); 
        } else { 
            strcat(outputString, "" "");
        }
        
        strcat(outputString, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
        strcat(outputString, ""*"");
    }
    }
}",0
acoc261,1696389048,1,"void Histogram(char *Graph, int *Values, int Howfar)
{
    int i;
    int j;
    int Highest = Values[0];
    Graph[0] = 0;
    
    for (i = 0; i < Howfar; i++){
        if (Values[i] > Highest){
            Highest = Values[i];
        }
    }
    
    
    for (i = 0; i < Howfar + 2; i++){
        strcat(Graph, ""*"");
    }
    strcat(Graph, ""\n"");
    
    
    for (i = Highest; i > 0; i--) {
        for (j = 0; j < Howfar; j++){
            if(j == 0){
                strcat(Graph, ""*"");
            }
            if (Values[j] >= i){
                strcat(Graph, ""X"");
            }
            else{
                strcat(Graph, "" "");
            }
        }
        strcat(Graph, ""*"");
        strcat(Graph, ""\n"");
    }
    
    
    for (i = 0; i < Howfar + 2; i++){
        strcat(Graph, ""*"");
    }
    strcat(Graph, ""\0"");
} ",1
agan859,1696679729,1,"void Histogram(char* string, int* array, int length) {
	int i;
	int width_of_text = length + 3;
	int max = array[0];


	for (i = 0; i < (length - 1); i++) {
		if (array[i + 1] > array[i]) {
			max = array[i + 1];
		}
	}
	int height_of_text = max + 2;
	int j;
	int total_length = (height_of_text * width_of_text);



	for (j = 0; j < total_length; j++) {
		if ((j < (width_of_text - 1)) || (j > (total_length - width_of_text)) || ((j % width_of_text) == 0) || ((j % width_of_text) == (width_of_text - 2))) {
			string[j] = '*';
		}
		else {
			string[j] = ' ';
		}

		if ((j % width_of_text) == (width_of_text - 1)) {
			string[j] = '\n';
		}


	}

	int k, l, row = 1, col = 0;

	for (k = 0; k < total_length; k++) {
		if (string[k] == ' ') {
			for (l = 0; l < length; l++) {
				if ((col - 1 == l) && (row >= (height_of_text - array[l]))) {
					string[k] = 'X';
				}
			}
		}
		
		col++;

		if (string[k] == '\n') {
			row++;
			col = 0;
		}

	}

}",0
agan859,1696683078,2,"void Histogram(char* string, int* array, int length) {
	int i;
	int width_of_text = length + 3;
	int max = array[0];


	for (i = 0; i < (length - 1); i++) {
		if (array[i + 1] > array[i]) {
			max = array[i + 1];
		}
	}
	int height_of_text = max + 2;
	int j;
	int total_length = (height_of_text * width_of_text);



	for (j = 0; j < total_length; j++) {
		if ((j < (width_of_text - 1)) || (j > (total_length - width_of_text)) || ((j % width_of_text) == 0) || ((j % width_of_text) == (width_of_text - 2))) {
			string[j] = '*';
		}
		else {
			string[j] = ' ';
		}

		if ((j % width_of_text) == (width_of_text - 1)) {
			string[j] = '\n';
		}
		

	}
	string[total_length - 1] = '\0';

	int k, l, row = 1, col = 0;

	for (k = 0; k < total_length; k++) {
		if (string[k] == ' ') {
			for (l = 0; l < length; l++) {
				if ((col - 1 == l) && (row >= (height_of_text - array[l]))) {
					string[k] = 'X';
				}
			}
		}

		col++;

		if (string[k] == '\n') {
			row++;
			col = 0;
		}

	}

} ",0
agan859,1696683637,3,"void Histogram(char* string, int* array, int length) {
	int i;
	int width_of_text = length + 3;
	int max = array[0];


	for (i = 0; i < (length - 1); i++) {
		if (array[i + 1] > max) {
			max = array[i + 1];
		} 
	}

	int height_of_text = max + 2;
	int j;
	int total_length = (height_of_text * width_of_text);



	for (j = 0; j < total_length; j++) {
		if ((j < (width_of_text - 1)) || (j > (total_length - width_of_text)) || ((j % width_of_text) == 0) || ((j % width_of_text) == (width_of_text - 2))) {
			string[j] = '*';
		}
		else {
			string[j] = ' ';
		}

		if ((j % width_of_text) == (width_of_text - 1)) {
			string[j] = '\n';
		}
		

	}
	string[total_length - 1] = '\0';

	int k, l, row = 1, col = 0;

	for (k = 0; k < total_length; k++) {
		if (string[k] == ' ') {
			for (l = 0; l < length; l++) {
				if ((col - 1 == l) && (row >= (height_of_text - array[l]))) {
					string[k] = 'X';
				}
			}
		}

		col++;

		if (string[k] == '\n') {
			row++;
			col = 0;
		}

	}

} ",1
ahac139,1696306043,1,"int MaxValue(int values[], int numValues)
{   
    int max = values[0];

    for (int i = 1; i < numValues; i++)
    {
        if (values[i]>max)max=values[i];
    }

    return max;
    
}

void Histogram(char *output, int values[], int numValues)
{
    
    char border[100];
    for (int i = 0; i < numValues+2; i++)
    {
        border[i] = '*';
    }
    border[numValues+2] = '\0';

    strcpy(output,border);
    strcat(output,""\n"");

    int max = MaxValue(values,numValues);

    char graph[100];
    for (int i = 0; i < max; i++)
    {
        graph[0] = '*';
        for (int j = 1; j <= numValues; j++)
        {
            if (values[j-1]>=max-i)
            {
                graph[j] = 'X';
            }
            else
            {
                graph[j] = ' ';
            }
        }
        graph[numValues+1] = '*';
        graph[numValues+2] = '\n';
        graph[numValues+3] = '\0'; 

        strcat(output,graph);
    }

    strcat(output,border);
    
}",1
ahua579,1696551838,1,"void Histogram(char *histogram, int* values, int length)
{


	// find largest value
	int largestValue = 0;
	for (int i = 0; i < length; i++) {
		if (values[i] > largestValue) {
			largestValue = values[i];
		}
	}
	
	// main loop
	int index = 0;
	
	for (int row = largestValue + 2; row > 0; row--) {
		for (int column = 0; column < length + 2; column++) {
			// print top and bottom borders
			if (row == largestValue + 2 || row == 1) {
				histogram[index] = '*';
				if (row == largestValue + 2 && column == length + 1) {
					index++;
					histogram[index] = '\n';
				}
			}
			// print left to right
			else {
				
				// print border if first or last character
				if (column == 0 || column == length + 1) {
					histogram[index] = '*';
					if (column == length + 1) {
						index++;
						histogram[index] = '\n';
					}
				}
				// check if X needs to be printed
				else {
					if (row-1 <= values[column-1]) {
						histogram[index] = 'X';
					}
					else {
						histogram[index] = ' ';
					}
				}
			}

			index++;
		}
	}

	histogram[index] = '\0';
}",1
ahus071,1696825009,1,"#include <stdio.h>
#include <string.h>


void Histogram(char *graph,int values[], int length)
{
	//init the histogram for string
	strcpy(graph,"""");

	//find the largest value in the array by comparing each and using the ? : operators
	int max = values[0];
	for(int i = 1; i < length; max = (values[i] > max) ? values[i] : max, ++i);

	//add the top asterisks
	for(int i = 0; i < length+2;strcat(graph,""*""),i++);

	//add the newline
	strcat(graph,""\n"");

	//draw the histogram
	for (int i = max; i > 0; i--){
		strcat(graph,""*"");
		for (int j = 0; j < length; j++){
			if (values[j] >= i){
				strcat(graph,""X"");
			}
			else{
				strcat(graph,"" "");
			}
		}
		strcat(graph,""*\n"");
	}

	//add the last asterisks
	for(int i = 0; i < length+2;strcat(graph,""*""),i++);
}",1
ajhz010,1696651080,1,"void Histogram(char *formatted, int *valueArray, int length) {
    int i, j, k, p, maxNumber, decrement, formattedLength, count, count2;
    int valueArraycopy[1000];
    maxNumber = valueArray[0];
    for (i = 0; i < length; i++) {
        if (valueArray[i+1] > maxNumber) {
            maxNumber = valueArray[i+1]; // stores the highest histogram bar
        }
    }
    decrement = maxNumber;
    formattedLength = (maxNumber + 2)*(length + 2) + maxNumber + 1; // last part includes new line characters
    
    count = 0;
    for (i = 0; i < formattedLength; i++) {
        j = i % (length + 3);
        if (i < (length + 3)) {
            if (i == length+2) {
                formatted[i] = '\n';
            }
            else {
                formatted[i] = '*';
            }
        }
        if (i > (length+2)) {
            if (j == 0) {
                formatted[i] = '*';
                count = count + 1;
            }
            else if (count == (maxNumber + 1)) {
                formatted[i] = '*';
            }
            else if (j == (length + 1)) {
                formatted[i] = '*';
                i = i + 1;
                formatted[i] = '\n';
            }
            else if (j != 0) {
                formatted[i] = ' ';
            }
        }
    }
    count = 0;
    count2 = 0;
    for (i = 0; i < formattedLength; i++) {
        j = i % (length + 3);
        if (i > length + 2 && i < formattedLength - (length + 3)) {
            count2++;
            if (valueArray[j] == decrement) {
                if (j < length) {
                for (p = 0; p < decrement; p++) {
                //printf(""%d "", j);
                
                formatted[i + 1 + count] = 'X';
                count = count + length + 3;
            }
            count = 0;
            }
            }
            
            if (count2 == (length + 3)) { // decrement decreases before another replica column but I want to replicate another 2 column 
            decrement = decrement - 1;
            count2 = 0;

            }
        }
    }
    formatted[formattedLength] = '\0';
}",0
ajhz010,1696651153,2,"void Histogram(char *formatted, int *valueArray, int length) {
    int i, j, p, maxNumber, decrement, formattedLength, count, count2;
    maxNumber = valueArray[0];
    for (i = 0; i < length; i++) {
        if (valueArray[i+1] > maxNumber) {
            maxNumber = valueArray[i+1]; // stores the highest histogram bar
        }
    }
    decrement = maxNumber;
    formattedLength = (maxNumber + 2)*(length + 2) + maxNumber + 1; // last part includes new line characters
    
    count = 0;
    for (i = 0; i < formattedLength; i++) {
        j = i % (length + 3);
        if (i < (length + 3)) {
            if (i == length+2) {
                formatted[i] = '\n';
            }
            else {
                formatted[i] = '*';
            }
        }
        if (i > (length+2)) {
            if (j == 0) {
                formatted[i] = '*';
                count = count + 1;
            }
            else if (count == (maxNumber + 1)) {
                formatted[i] = '*';
            }
            else if (j == (length + 1)) {
                formatted[i] = '*';
                i = i + 1;
                formatted[i] = '\n';
            }
            else if (j != 0) {
                formatted[i] = ' ';
            }
        }
    }
    count = 0;
    count2 = 0;
    for (i = 0; i < formattedLength; i++) {
        j = i % (length + 3);
        if (i > length + 2 && i < formattedLength - (length + 3)) {
            count2++;
            if (valueArray[j] == decrement) {
                if (j < length) {
                for (p = 0; p < decrement; p++) {
                //printf(""%d "", j);
                
                formatted[i + 1 + count] = 'X';
                count = count + length + 3;
            }
            count = 0;
            }
            }
            
            if (count2 == (length + 3)) { // decrement decreases before another replica column but I want to replicate another 2 column 
            decrement = decrement - 1;
            count2 = 0;

            }
        }
    }
    formatted[formattedLength] = '\0';
}",0
ajhz010,1696652369,3,"void Histogram(char *formatted, int *valueArray, int length) {
    int i, j, p, maxNumber, decrement, formattedLength, count, count2;
    maxNumber = valueArray[0];
    for (i = 0; i < (length - 1); i++) {
        if (valueArray[i+1] > maxNumber) {
            maxNumber = valueArray[i+1]; // stores the highest histogram bar
        }
    }
    decrement = maxNumber;
    formattedLength = (maxNumber + 2)*(length + 2) + maxNumber + 1; // last part includes new line characters
    
    count = 0;
    for (i = 0; i < formattedLength; i++) {
        j = i % (length + 3);
        if (i < (length + 3)) {
            if (i == length+2) {
                formatted[i] = '\n';
            }
            else {
                formatted[i] = '*';
            }
        }
        if (i > (length+2)) {
            if (j == 0) {
                formatted[i] = '*';
                count = count + 1;
            }
            else if (count == (maxNumber + 1)) {
                formatted[i] = '*';
            }
            else if (j == (length + 1)) {
                formatted[i] = '*';
                i = i + 1;
                formatted[i] = '\n';
            }
            else if (j != 0) {
                formatted[i] = ' ';
            }
        }
    }
    count = 0;
    count2 = 0;
    for (i = 0; i < formattedLength; i++) {
        j = i % (length + 3);
        if (i > length + 2 && i < formattedLength - (length + 3)) {
            count2++;
            if (j < length) {
            if (valueArray[j] == decrement) {
                //if (j < length) {
                for (p = 0; p < decrement; p++) {
                //printf(""%d "", j);
                
                formatted[i + 1 + count] = 'X';
                count = count + length + 3;
            }
            count = 0;
            }
            }
            
            if (count2 == (length + 3)) { // decrement decreases before another replica column but I want to replicate another 2 column 
            decrement = decrement - 1;
            count2 = 0;

            }
        }
    }
    formatted[formattedLength] = '\0';
}",1
ajhz011,1696309161,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatter, int data[], int dataLength)
{
	int dataHeight = 0, i, j = 0, row = 1;

	// Finiding the highest value in array
	for (i = 0; i < dataLength; i++) {
		if (data[i] > dataHeight) {
			dataHeight = data[i];
		}
	}

	int borderLength = dataLength + 2, borderHeight = dataHeight + 2;

	// Creating the border
	for (i = 0; i <= (borderLength + 1) * borderHeight - 1; i++) {
		if (i == borderLength + (borderLength + 1) * j) {
			formatter[i] = '\n';
			j++;
		}
		else if (i >= 1 + (borderLength + 1) * row && i <= (borderLength + 1) * row + dataLength) {
			formatter[i] = ' ';
			if (i == (borderLength + 1) * row + dataLength && row < borderHeight - 2) {
				row++;
			}
		}
		else {
			formatter[i] = '*';
		}
	}
	formatter[(borderLength + 1) * borderHeight - 1] = '\0';

	// Creating the columns of the graph

	for (i = 0; i < dataLength; i++) {
		for (j = data[i]; j >= 1; j--) {
			formatter[(borderHeight - j) * (borderLength + 1) + i - borderLength] = 'X';
		}
	}
}",1
ajhz444,1696750054,1,"void Histogram(char* formatted, int* values, int length)
{
	int height = 0;
	char star[] = ""*"";
	char starnl[] = ""*\n"";
	char space[] = "" "";
	char xletter[] = ""X"";
	char nullletter[] = ""\0"";
	char temp[1000] = ""*"";
	for (int i = 0; i < length; i++) {
		if (values[i] > height) {
			height = values[i];
		}
	}
	for (int j = 1; j <= (length + 2) * (height + 2); j++) {
		if (j == (length + 2) * (height + 2)) {
			strcat(temp, nullletter);
		}
		else if ((j <= length) || (j % (length + 2) == 0) || (j > ((length + 2) * (height + 1)))) {
			strcat(temp, star);
		}
		else if ((j + 1) % (length + 2) == 0) {
			strcat(temp, starnl);
		}
		else if (height + 1 - values[(j % (length + 2) - 1)] > j / (length + 2)) {
			strcat(temp, space);
		}
		else {
			strcat(temp, xletter);
		}
	}
	int k = strlen(temp);
	for (int l = 0; l <= k; l++) {
		formatted[l] = temp[l];
	}
}",1
ajin489,1696373063,1,"void Histogram(char formatted[], int values[], int length) {
    int max = 0;
    int i;

    // Finding largest value
    for (i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    int r = max + 2;
    int c = length + 2;
    int array[r][c] = {};

    /*
    ASCII:
    ""*"" = 42
    ""X"" = 88
    "" "" = 32
    */

    //Creating border
    for (i = 0; i < c; i++) {
        array[0][i] = 42;
        array[r - 1][i] = 42;
    }

    for (i = 0; i < r; i++) {
        array[i][0] = 42;
        array[i][c - 1] = 42;
    }

    //Creating bars
    int size, j;
    for (i = 0; i < length; i++){
        size = values[i];
        if (size == 0){
            continue;
        }
        for (j = 1; j <= size; j++){
            array[r - 1 - j][i + 1] = 88;
        }
    }

    //Moving array data into string
    int n = 0;
    for (i = 0; i < r; i++){
        for (j = 0; j < c; j++){
            if (array[i][j] == 0) {
                formatted[n] = ' ';
            } else {
                formatted[n] = array[i][j];
            }
            n++;
        }
        formatted[n] = '\n';
        n++;
    }
    formatted[n - 1] = '\0';
}",0
ajin489,1696385278,2,"#include <stdio.h>
#include <string.h>

void Histogram(char formatted[], int values[], int length) {
    int max = 0;
    int i;

    // Finding largest value
    for (i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    //Creating array
    int r = max + 2;
    int c = length + 2;
    int j;
    int array[r][c];

    for (i = 0; i < r; i++) {
        for (j = 0; j < c; j++){
            array[i][j] = ' ';
        }
    }

    //Creating border
    for (i = 0; i < c; i++) {
        array[0][i] = 42;
        array[r - 1][i] = '*';
    }

    for (i = 0; i < r; i++) {
        array[i][0] = 42;
        array[i][c - 1] = '*';
    }

    //Creating bars
    int size;
    for (i = 0; i < length; i++){
        size = values[i];
        if (size == 0){
            continue;
        }
        for (j = 1; j <= size; j++){
            array[r - 1 - j][i + 1] = 'X';
        }
    }

    //Moving array data into string
    int n = 0;
    for (i = 0; i < r; i++){
        for (j = 0; j < c; j++){
            formatted[n] = array[i][j];
            n++;
        }
        formatted[n] = '\n';
        n++;
    }
    formatted[n - 1] = '\0';
}",1
akam677,1696848203,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int n) {
    int max = 0;
    // Find the maximum value in the data
    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Generate the histogram string
    for (int row = max; row >= 0; row--) {
        for (int col = 0; col < n; col++) {
            if (data[col] > row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""\n"");
    }

    // Add the bottom border
    for (int i = 0; i < n + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
}",0
aker238,1696233766,1,"void Histogram(char *plot, int data[], int size) {
    
    int datalen = size;
    int max = 0;
    for (int i = 0; i < datalen; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    
    char graph[max + 2][datalen + 2];
    
    for (int i = 0; i<(datalen+2); i++){
        graph[0][i] = '*';
        graph[max+1][i] = '*';
    }

    for (int i = 0; i<(max+1); i++){
        graph[i][0] = '*';
        graph[i][datalen+1] = '*';        
    }
    
    for (int j = 1; j<=(datalen); j++){
        int n = 0;
        while (n < data[(j-1)]){
            graph[(max-n)][j] = 'X';
            n++;
        }
        while (n<max){
            graph[(max-n)][j] = ' ';
            n++;
        }
    }

    int c = 0;
    for (int x=0; x<(max + 2);x++){
        for (int y=0; y<(datalen + 2); y++){
            plot[c] = graph[x][y];
            c++;
        }
        plot[c] = '\n';
        c++;
    }
    plot[c - 1] = '\0';
}",1
akod059,1696412558,1,"void Histogram(char* string, int* data, int length)
{
	int highestVal = 0;
	for (int i = 0; i < length; i++) 
	{
		if (highestVal < data[i]) {
			highestVal = data[i];
		}
	}

	for (int i = 0; i < length + 2; i++) 
	{
		string[i] = '*';
	}

	string[length + 2] = '\n';

	int lineNum = highestVal;

	for (int i = length + 3; i < (highestVal + 1) * (length + 3); i++) 
	{
		if (i % (length+3) == 0 || i % (length+3) == (length+1)) {
			string[i] = '*';
		}
		else if (i % (length + 3) == (length+2)) {
			string[i] = '\n';
			lineNum--;
		}
		else if (i % (length + 3) >= 1 && i % (length + 3) <= (length + 1)) 
		{
			string[i] = ' ';
			if (data[i % (length + 3) - 1] == lineNum) {
				string[i] = 'X';
				data[i % (length + 3) - 1] = lineNum - 1;
			}
		}
	}

	for (int i = (highestVal + 1) * (length + 3); i < (highestVal + 2) * (length + 3) - 1; i++)
	{
		string[i] = '*';
	}

	string[(highestVal + 2) * (length + 3) - 1] = '\0';

}",1
alum086,1696802665,1,"#include <stdio.h>

void Histogram(int data[], int num_elements) {
    int max_frequency = 0;

    // Find the maximum frequency in the data
    for (int i = 0; i < num_elements; i++) {
        if (data[i] > max_frequency) {
            max_frequency = data[i];
        }
    }

    // Generate the histogram
    for (int i = max_frequency; i > 0; i--) {
        for (int j = 0; j < num_elements; j++) {
            if (data[j] >= i) {
                printf(""X "");
            } else {
                printf(""  "");
            }
        }
        printf(""\n"");
    }

    // Print the border
    for (int i = 0; i < num_elements * 2; i++) {
        printf(""*"");
    }
    printf(""\n"");
}

int main() {
    int data[] = {3, 1, 2, 0, 4, 1};
    int num_elements = sizeof(data) / sizeof(data[0]);

    // Call the Histogram function
    Histogram(data, num_elements);

    return 0;
}
",0
alum086,1696802673,2,"#include <stdio.h>

void Histogram(int data[], int num_elements) {
    int max_frequency = 0;

    // Find the maximum frequency in the data
    for (int i = 0; i < num_elements; i++) {
        if (data[i] > max_frequency) {
            max_frequency = data[i];
        }
    }

    // Generate the histogram
    for (int i = max_frequency; i > 0; i--) {
        for (int j = 0; j < num_elements; j++) {
            if (data[j] >= i) {
                printf(""X "");
            } else {
                printf(""  "");
            }
        }
        printf(""\n"");
    }

    // Print the border
    for (int i = 0; i < num_elements * 2; i++) {
        printf(""*"");
    }
    printf(""\n"");
}",0
amal783,1696255246,1,"void Histogram(char formatted[], int data[], int length) {
	int i;
	int j;
	for (i = 0; i < length + 2; i++) {
		formatted[i] = '*';
	}
	formatted[i] = '\n';
	int start = i + 1;
	int linelen = length + 3;

	int max = 0;
	for (i = 0; i < length; i++) {
		if (data[i] > max) {
			max = data[i];
		}
	}

	for (i = max; i > 0; i--) {
		formatted[start] = '*';
		for (j = 0; j < length; j++) {
			formatted[start + j + 1] = ' ';
			if (data[j] >= i) {
				formatted[start + j + 1] = 'X';
			}
		}
		formatted[start + j + 1] = '*';
		formatted[start + j + 2] = '\n';
		start += linelen;
	}
	
	for (i = 0; i < length + 2; i++) {
		formatted[start + i] = '*';
	}
	formatted[start + i] = '\0';
}",1
amcm539,1696828312,1,"void Histogram(char *formatted, int *array, int length){

/*Find max value of any given element*/
int a = array[0];
int i = 0;
while (i  < length){
    if (a < array[i]){
        a = array[i];
    }
i++;
}

/*Line 1 will be the array length +2, all the star character*/
int j = 0;
int width = length +2; //Length of the data array and a * either side
int rowlength = width +1; //Total length of a 'row' ie distance from one \n to the same point at the next \n
int totalsize = (width+1) * (a+2); //total length of array including \n characters

//Forms a grid of the correct szie with all *
//We can then susbsitute our required symbols whereever a star shouldnt belong
//Width +1 is to allow a character space for the new line
//a+2 is to allow for a row of stars above and below the chart
while (j < totalsize){
    formatted[j] = '*';
    j++;
}

//Use a for loop to insert the \n characters every time we want a new line
for (int z= length+2; z<totalsize-rowlength; z=z+rowlength){
 formatted[z] = '\n';
}

/*Convert the final * into a space, since we dont need a new line character there*/
//formatted[totalsize] = 32;

/*Now we substitute into the grid either a space character or an X*/

    //Reset counter variables so they can be resused.
    i=0;
    j=0;
    int count;

//Check for each data element
for (i= 0; i<length; i++){
    count =1;
    //Check for each element in the output array
    for (j= totalsize - (2*rowlength) + (i+1);j>rowlength ; j= j-(rowlength)){
        int test = array[i];
        if (count <= array[i]){
            formatted[j] = 'X';
        }

        if(count > array[i] ){
            formatted[j] = 32;
        }
        count++;
    }
    }

//Now make the last * a null operator 
formatted[totalsize-1] = '\0';
}",0
amcm539,1696828354,2,"void Histogram(char *formatted, int *array, int length){

/*Find max value of any given element*/
int a = array[0];
int i = 0;
while (i  < length){
    if (a < array[i]){
        a = array[i];
    }
i++;
}

/*Line 1 will be the array length +2, all the star character*/
int j = 0;
int width = length +2; //Length of the data array and a * either side
int rowlength = width +1; //Total length of a 'row' ie distance from one \n to the same point at the next \n
int totalsize = (width+1) * (a+2); //total length of array including \n characters

//Forms a grid of the correct szie with all *
//We can then susbsitute our required symbols whereever a star shouldnt belong
//Width +1 is to allow a character space for the new line
//a+2 is to allow for a row of stars above and below the chart
while (j < totalsize){
    formatted[j] = '*';
    j++;
}

//Use a for loop to insert the \n characters every time we want a new line
for (int z= length+2; z<totalsize-rowlength; z=z+rowlength){
 formatted[z] = '\n';
}

/*Convert the final * into a space, since we dont need a new line character there*/
//formatted[totalsize] = 32;

/*Now we substitute into the grid either a space character or an X*/

    //Reset counter variables so they can be resused.
    i=0;
    j=0;
    int count;

//Check for each data element
for (i= 0; i<length; i++){
    count =1;
    //Check for each element in the output array
    for (j= totalsize - (2*rowlength) + (i+1);j>rowlength ; j= j-(rowlength)){
        if (count <= array[i]){
            formatted[j] = 'X';
        }

        if(count > array[i] ){
            formatted[j] = 32;
        }
        count++;
    }
    }

//Now make the last * a null operator 
formatted[totalsize-1] = '\0';
}",1
amhk647,1696792637,1,"void Histogram(char* string, int* values, int length)
{
	string[0] = '*';
	string[1] = '\0';
	for (int i = 0; i <= length; i++) { // fill first row of star border
		strcat(string, ""*"");
	}
	strcat(string, ""\n""); // new line at end of first row

	int max = values[0]; // find max of values
	for (int j = 1; j < length; j++) { // go through elements of values
		if (values[j] > max) {
			max = values[j];
		}
	}

	for (int i = max; i > 0; i--) { // fill in following rows
		strcat(string, ""*""); // star border on start of row
		for (int j = 0; j < length; j++) { // columns of values
			if (values[j] >= i) {
				strcat(string, ""X""); // add X if value is high enough
			}
			else {
				strcat(string, "" ""); // leave blank if not
			}
		}
		strcat(string, ""*\n""); // star border and new line at end of row
	}
	
	for (int i = 0; i < length + 2; i++) { // fill last row of star border
		strcat(string, ""*"");
	}
}",1
amok249,1696384763,1,"void Histogram(char *formatted, int *values, int length) {
    *formatted = '\0';
    
    int i,j,k,x,y,z,a,b;


    int largest = values[0];
    for (i = 1; i < length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }

    int rows = largest + 2;
    
    
    int amount;
    amount = (largest+2) * (length+2) + rows;
    
    
    
    for (j = 0; j < amount;j++) {
               
        for (k = length+3; k <= amount; k = k + (length+3)) {
            formatted[k] = '*';
            formatted[k+length+1] = '*';
            formatted[k-1] = '\n';
        }
        
        formatted[j] = ' ';
        if (j < length+2) {
            formatted[j] = '*';
        } else if (j >= (amount-length-2)) {
            if (j == amount-1) {
                formatted[j] = '\0';
            } else {
                formatted[j] = '*';
            }
        }  
 
    
   
    for (x = length+4, y = largest; x < amount - (length+3), y > 0 ; x = x + length+3, y--) {
        for (z = 0; z < length; z++) {
            if (values[z] == y) {
                formatted[x+z] = 'X';
                for (a = 0; a <= (amount - length -3); a = a + length + 3) {
                    if (a == (amount-length-3)) {
                        formatted[x+z] = 'X';
                    } else {
                        formatted[x+z+a] = 'X';
                    }
                }
            }
        }
    }   
        
    
        
    }
    
    
    
    for (b = amount - length - 3; b <= amount-3; b ++) {
        formatted[b] = '*';
    }
   
}",0
amok249,1696385787,2,"void Histogram(char *formatted, int *values, int length) {
    *formatted = '\0';
    
    int i,j,k,x,y,z,a,b;


    int largest = values[0];
    for (i = 1; i < length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }

    int rows = largest + 2;
    
    
    int amount;
    amount = (largest+2) * (length+2) + rows;
    
    for (j = 0; j < amount;j++) {
               
        for (k = length+3; k <= amount; k = k + (length+3)) {
            formatted[k] = '*';
            formatted[k+length+1] = '*';
            formatted[k-1] = '\n';
        }
        
        formatted[j] = ' ';
        if (j < length+2) {
            formatted[j] = '*';
        } else if (j >= (amount-length-2)) {
            if (j == amount-1) {
                formatted[j] = '\0';
            } else {
                formatted[j] = '*';
            }
        }  
    for (x = length+4, y = largest; x < amount, y > 0 ; x = x + length+3, y--) {
        for (z = 0; z < length; z++) {
            if (values[z] == y) {
                formatted[x+z] = 'X';
                for (a = 0; a <= (amount); a = a + length + 3) {
                        formatted[x+z+a] = 'X';
                }
            }
        }
    }   
        
    }
    
    for (b = amount - length - 3; b <= amount-3; b ++) {
        formatted[b] = '*';
    }
   
}
",0
amok249,1696386499,3,"void Histogram(char *formatted, int *values, int length) {
    *formatted = '\0';
    
    int i,j,k,x,y,z,a,b;


    int largest = values[0];
    for (i = 1; i < length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }

    int rows = largest + 2;
    
    
    int amount;
    amount = (largest+2) * (length+2) + rows;
    
    for (j = 0; j < amount;j++) {
               
        for (k = length+3; k <= amount; k = k + (length+3)) {
            formatted[k] = '*';
            formatted[k+length+1] = '*';
            formatted[k-1] = '\n';
        }
        
        formatted[j] = ' ';
        if (j < length+2) {
            formatted[j] = '*';
        } else if (j >= (amount-length-2)) {
            if (j == amount-1) {
                formatted[j] = '\0';
            } else {
                formatted[j] = '*';
            }
        }  
    for (x = length+4, y = largest; y > 0 ; x = x + length+3, y--) {
        for (z = 0; z < length; z++) {
            if (values[z] == y) {
                formatted[x+z] = 'X';
                for (a = 0; a <= (amount); a = a + length + 3) {
                        formatted[x+z+a] = 'X';
                }
            }
        }
    }   
        
    }
    
    for (b = amount - length - 3; b <= amount-3; b ++) {
        formatted[b] = '*';
    }
   
}",0
amok249,1696402290,4,"void Histogram(char *formatted, int *values, int length) {
    *formatted = '\0';
    
    int i,j,k,x,y,z,a,b;
    
    int largest = values[0];
    for (i = 1; i < length; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }

    int rows = largest + 2;
    
    
    int amount;
    amount = (largest+2) * (length+2) + rows;
    
    for (j = 0; j < amount;j++) {
               
        for (k = length+3; k <= amount; k = k + (length+3)) {
            formatted[k] = '*';
            formatted[k+length+1] = '*';
            formatted[k-1] = '\n';
        }
        
        formatted[j] = ' ';
        if (j < length+2) {
            formatted[j] = '*';
        } else if (j >= (amount-length-2)) {
            if (j == amount-1) {
                formatted[j] = '\0';
            } else {
                formatted[j] = '*';
            }
        }  
    for (x = length+4, y = largest; y > 0 ; x = x + length+3, y--) {
        for (z = 0; z < length; z++) {
            if (values[z] == y) {
                formatted[x+z] = 'X';
                for (a = 0; a <= amount ; a = a + length + 3) {
                    int c = x+z+a;
                    if (c < 1000) {
                        formatted[c] = 'X';
                        
                    }
                }
                        
                        
                }
            }
        }
    }   
    for (b = amount - length - 3; b <= amount-3; b ++) {
        formatted[b] = '*';    
    }
    
      
    
}",1
aosm976,1696845499,1,"void Histogram(char *var_formatted, int intArray[], int numValues)
{
    int col = 0;
    int row = 0;
    int maxValue;
    char horizontalBorder[1000];

    for (int cell = 0; cell <= 1000; cell++)
    {
        var_formatted[cell] = 0;
    }
    

    /* create the top border */
    for (col = 0; col < numValues; col++)
    {
        horizontalBorder[col] = '*';
    }

    /* find max value in array*/
    maxValue = intArray[0];
    for (col = 0; col < numValues; col++)
    {   
        //printf(""The current array value is: %d\n"", intArray[col]);
        //printf(""The current max value is: %d\n\n"", maxValue);
        if (intArray[col] > maxValue)
        {
            maxValue = intArray[col];
            
        }
    }

    for (col = 0; col < numValues + 3; col++) {   

        if (col != numValues + 2) {
            var_formatted[col] = '*';
        }
        else {
            var_formatted[col] = '\n';
        }                  
    }


    for (row = 1; row < maxValue + 1; row++)
    {
        for (col = 0; col < numValues; col++) {   
            if (maxValue - intArray[col] - (row - 1) <= 0) {
                var_formatted[col + 1 + (row * (numValues + 3))] = 'X';
            }
            
            else {
                var_formatted[col + 1 + (row * (numValues + 3))] = ' ';
            }
                    
        }
        var_formatted[(row * (numValues + 3))] = '*';
        var_formatted[numValues + 1 + (row * (numValues + 3))] = '*';
        var_formatted[numValues + 2 + (row * (numValues + 3))] = '\n';
    }

    for (col = 0; col < numValues + 3; col++) {   

        if (col != numValues + 2) {
            var_formatted[col + ((maxValue + 1) * (numValues + 3))] = '*';
        }
    }       
    
}",0
aosm976,1696845622,2,"void Histogram(char *var_formatted, int intArray[], int numValues)
{
    int col = 0;
    int row = 0;
    int maxValue;

    for (int cell = 0; cell <= 1000; cell++)
    {
        var_formatted[cell] = 0;
    }
    

    /* find max value in array*/
    maxValue = intArray[0];
    for (col = 0; col < numValues; col++)
    {   
        //printf(""The current array value is: %d\n"", intArray[col]);
        //printf(""The current max value is: %d\n\n"", maxValue);
        if (intArray[col] > maxValue)
        {
            maxValue = intArray[col];
            
        }
    }

    for (col = 0; col < numValues + 3; col++) {   

        if (col != numValues + 2) {
            var_formatted[col] = '*';
        }
        else {
            var_formatted[col] = '\n';
        }                  
    }


    for (row = 1; row < maxValue + 1; row++)
    {
        for (col = 0; col < numValues; col++) {   
            if (maxValue - intArray[col] - (row - 1) <= 0) {
                var_formatted[col + 1 + (row * (numValues + 3))] = 'X';
            }
            
            else {
                var_formatted[col + 1 + (row * (numValues + 3))] = ' ';
            }
                    
        }
        var_formatted[(row * (numValues + 3))] = '*';
        var_formatted[numValues + 1 + (row * (numValues + 3))] = '*';
        var_formatted[numValues + 2 + (row * (numValues + 3))] = '\n';
    }

    for (col = 0; col < numValues + 3; col++) {   

        if (col != numValues + 2) {
            var_formatted[col + ((maxValue + 1) * (numValues + 3))] = '*';
        }
    }       
    
}",1
apan786,1696840725,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *histogram, int *data, int length) {

    int max = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    histogram[0] = '\0';

    strcat(histogram, ""************\n"");

    for (int row = max; row >= 1; row--) {
        strcat(histogram, ""*"");
        for (int i = 0; i < length; i++) {
            if (data[i] >= row) {
                strcat(histogram, ""X"");
            } else {
                strcat(histogram, "" "");
            }
        }
        strcat(histogram, ""*\n"");
    }

    // Add the bottom border of asterisks
    strcat(histogram, ""************\n"");
}
",0
apan786,1696841764,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *histogram, int *data, int length) {

    int max = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    histogram[0] = '\0';
    int width = length + 2 ;
    
    for (int i=0; i < width; i++) {
        strcat(histogram, ""*"");
    }
    strcat(histogram, ""\n"");
    for (int row = max; row >= 1; row--) {
        strcat(histogram, ""*"");
        for (int i = 0; i < length; i++) {
            if (data[i] >= row) {
                strcat(histogram, ""X"");
            } else {
                strcat(histogram, "" "");
            }
        }
        strcat(histogram, ""*\n"");
    }
    for (int i=0; i < width; i++) {
        strcat(histogram, ""*"");
    }
    strcat(histogram, ""\n"");
}",0
apan786,1696841838,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *histogram, int *data, int length) {

    int max = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    histogram[0] = '\0';
    int width = length + 2 ;
    
    for (int i=0; i < width; i++) {
        strcat(histogram, ""*"");
    }
    strcat(histogram, ""\n"");
    for (int row = max; row >= 1; row--) {
        strcat(histogram, ""*"");
        for (int i = 0; i < length; i++) {
            if (data[i] >= row) {
                strcat(histogram, ""X"");
            } else {
                strcat(histogram, "" "");
            }
        }
        strcat(histogram, ""*\n"");
    }
    for (int i=0; i < width; i++) {
        strcat(histogram, ""*"");
    }
}",1
apat750,1696743663,1,"void Histogram (char *str, int *values1, int *values2){

}",0
apat824,1696849061,1,"void Histogram(char *string, int data[], int size) {
    if (size == 0) {
        return;
    }

    int max = data[0];
    for (int i = 1; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize the string here
    string[0] = '\0';

    for (int i = max; i > 0; i--) {
        for (int j = 0; j < size; j++) {
            strcat(string, data[j] >= i ? ""X "" : ""  "");
        }
        strcat(string, ""\n"");
    }

    for (int i = 0; i < size; i++) {
        strcat(string, ""*"");
    }
    strcat(string, ""\n"");
}",0
apat824,1696849100,2,"void Histogram(char* string, int* data, int size) {
    if (size == 0) {
        return;
    }

    int max = data[0];
    for (int i = 1; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize the string here
    string[0] = '\0';

    for (int i = max; i > 0; i--) {
        for (int j = 0; j < size; j++) {
            strcat(string, data[j] >= i ? ""X "" : ""  "");
        }
        strcat(string, ""\n"");
    }

    for (int i = 0; i < size; i++) {
        strcat(string, ""*"");
    }
    strcat(string, ""\n"");
}",0
arus530,1696399058,1,"void Histogram(char* chart,int values[],int length)
{
    int count = 0;

    int row = values[0];

    for (int i = 1; i < length; i++){
        int x = values[6];
        if (row < values[i]){
            row = values[i];
        }
    }

    for (int i = 0; i < length+2; i++){
        chart[count] = '*';
        count++;
    }

    chart[count] = '\\';
    count++;
    chart[count] = 'n';
    count++;

    while (row > 0){

    chart[count] = '*';
    count++;

    for (int i = 0; i < length; i++){
        if (values[i] >= row){
            chart[count] = 'X';
        }
        else {
            chart[count] = ' ';
        }
        count++;
    }

    chart[count] = '*';
    count++;

    row--;

    chart[count] = '\\';
    count++;
    chart[count] = 'n';
    count++;

    }

    for (int i = 0; i < length+2; i++){
        chart[count] = '*';
        count++;
    }

    int empty = 15;
    char empty_string = empty;

    for(count ;count<1000; count++){
        chart[count] = empty_string;
    }

}",0
arus530,1696399158,2,"void Histogram(char* chart,int values[],int length)
{
    int count = 0;

    int row = values[0];

    for (int i = 1; i < length; i++){
        if (row < values[i]){
            row = values[i];
        }
    }

    for (int i = 0; i < length+2; i++){
        chart[count] = '*';
        count++;
    }

    chart[count] = '\\';
    count++;
    chart[count] = 'n';
    count++;

    while (row > 0){

    chart[count] = '*';
    count++;

    for (int i = 0; i < length; i++){
        if (values[i] >= row){
            chart[count] = 'X';
        }
        else {
            chart[count] = ' ';
        }
        count++;
    }

    chart[count] = '*';
    count++;

    row--;

    chart[count] = '\\';
    count++;
    chart[count] = 'n';
    count++;

    }

    for (int i = 0; i < length+2; i++){
        chart[count] = '*';
        count++;
    }

    int empty = 15;
    char empty_string = empty;

}",0
arus530,1696399176,3,"void Histogram(char* chart,int values[],int length)
{
    int count = 0;

    int row = values[0];

    for (int i = 1; i < length; i++){
        if (row < values[i]){
            row = values[i];
        }
    }

    for (int i = 0; i < length+2; i++){
        chart[count] = '*';
        count++;
    }

    chart[count] = '\\';
    count++;
    chart[count] = 'n';
    count++;

    while (row > 0){

    chart[count] = '*';
    count++;

    for (int i = 0; i < length; i++){
        if (values[i] >= row){
            chart[count] = 'X';
        }
        else {
            chart[count] = ' ';
        }
        count++;
    }

    chart[count] = '*';
    count++;

    row--;

    chart[count] = '\\';
    count++;
    chart[count] = 'n';
    count++;

    }

    for (int i = 0; i < length+2; i++){
        chart[count] = '*';
        count++;
    }

}",0
arus530,1696400269,4,"void Histogram(char* chart,int values[],int length)
{
    for (int i = 0; i<1000; i++){
        chart[i] = 0;
    }


    int count = 0;

    int row = values[0];

    for (int i = 1; i < length; i++){
        int x = values[6];
        if (row < values[i]){
            row = values[i];
        }
    }

    for (int i = 0; i < length+2; i++){
        chart[count] = '*';
        count++;
    }

    chart[count] = '\n';
    count++;

    while (row > 0){

    chart[count] = '*';
    count++;

    for (int i = 0; i < length; i++){
        if (values[i] >= row){
            chart[count] = 'X';
        }
        else {
            chart[count] = ' ';
        }
        count++;
    }

    chart[count] = '*';
    count++;

    row--;
    chart[count] = '\n';
    count++;
    }

    for (int i = 0; i < length+2; i++){
            chart[count] = '*';
            count++;
        }

}",0
arus530,1696400288,5,"void Histogram(char* chart,int values[],int length)
{
    for (int i = 0; i<1000; i++){
        chart[i] = 0;
    }


    int count = 0;

    int row = values[0];

    for (int i = 1; i < length; i++){
        if (row < values[i]){
            row = values[i];
        }
    }

    for (int i = 0; i < length+2; i++){
        chart[count] = '*';
        count++;
    }

    chart[count] = '\n';
    count++;

    while (row > 0){

    chart[count] = '*';
    count++;

    for (int i = 0; i < length; i++){
        if (values[i] >= row){
            chart[count] = 'X';
        }
        else {
            chart[count] = ' ';
        }
        count++;
    }

    chart[count] = '*';
    count++;

    row--;
    chart[count] = '\n';
    count++;
    }

    for (int i = 0; i < length+2; i++){
            chart[count] = '*';
            count++;
        }

}",1
aryu462,1696811410,1,"#include <stdio. h>
#include <string.h>

void Histogram(char* formatted, int values[], int length)
{
    int maxHeight = 0;
    
    //Find the maximum height of input array
    for (int i = 0; i < length; i++) {
        if (values[i] > maxHeight) {
            maxHeight = values[i];
        }
    }
    int index = 0; 
    
    for (int col = 0); col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n'; 
    
    for (int col = 0; row < maxHeight; row++) {
        formatted [index++] = '*'; 
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    formatted[index] = '\0';
    
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
        
    }
    formatted[index++] ='\n';
    
    for (int row = 0; row < maxHeight; row++) {
        formatted[index++] = '*';
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            } 
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    
    for (int col = 0; col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n';
    formatted[index] = '\0';
    
    int end = index -1; 
    while (end >= 0 && (formatted[end]== ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end --; 
    }
}  
",0
aryu462,1696811428,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int length)
{
    int maxHeight = 0;
    
    //Find the maximum height of input array
    for (int i = 0; i < length; i++) {
        if (values[i] > maxHeight) {
            maxHeight = values[i];
        }
    }
    int index = 0; 
    
    for (int col = 0); col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n'; 
    
    for (int col = 0; row < maxHeight; row++) {
        formatted [index++] = '*'; 
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    formatted[index] = '\0';
    
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
        
    }
    formatted[index++] ='\n';
    
    for (int row = 0; row < maxHeight; row++) {
        formatted[index++] = '*';
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            } 
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    
    for (int col = 0; col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n';
    formatted[index] = '\0';
    
    int end = index -1; 
    while (end >= 0 && (formatted[end]== ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end --; 
    }
}  
",0
aryu462,1696811465,3,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int length)
{
    int maxHeight = 0;
    
    //Find the maximum height of input array
    for (int i = 0; i < length; i++) {
        if (values[i] > maxHeight) {
            maxHeight = values[i];
        }
    }
    int index = 0; 
    
    for (int col = 0; col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n'; 
    
    for (int col = 0; row < maxHeight; row++) {
        formatted [index++] = '*'; 
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    formatted[index] = '\0';
    
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
        
    }
    formatted[index++] ='\n';
    
    for (int row = 0; row < maxHeight; row++) {
        formatted[index++] = '*';
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            } 
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    
    for (int col = 0; col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n';
    formatted[index] = '\0';
    
    int end = index -1; 
    while (end >= 0 && (formatted[end]== ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end --; 
    }
}  
",0
aryu462,1696811659,4,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int length)
{
    int maxHeight = 0;
    
    //Find the maximum height of input array
    for (int i = 0; i < length; i++) {
        if (values[i] > maxHeight) {
            maxHeight = values[i];
        }
    }
    int index = 0; 
    
    for (int col = 0; col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n'; 
    
    for (int row = 0; row < maxHeight; row++) {
        formatted [index++] = '*'; 
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    formatted[index] = '\0';
    
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
        
    }
    formatted[index++] ='\n';
    
    for (int row = 0; row < maxHeight; row++) {
        formatted[index++] = '*';
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            } 
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    
    for (int col = 0; col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n';
    formatted[index] = '\0';
    
    int end = index -1; 
    while (end >= 0 && (formatted[end]== ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end --; 
    }
}  
",0
aryu462,1696811895,5,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int length)
{
    int maxHeight = 0;
    
    //Find the maximum height of input array
    for (int i = 0; i < length; i++) {
        if (values[i] > maxHeight) {
            maxHeight = values[i];
        }
    }
    
    int index = 0; 
    
    for (int col = 0; col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n'; 
    
    for (int row = 0; row < maxHeight; row++) {
        formatted [index++] = '*'; 
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    
    formatted[index] = '\0';
    
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
        
    }
    formatted[index++] ='\n';
    
    for (int row = 0; row < maxHeight; row++) {
        formatted[index++] = '*';
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            } 
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    
    formatted[index] = '\0';
    
    int end = index -1; 
    while (end >= 0 && (formatted[end] == ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end --; 
    }
}  
",0
aryu462,1696812133,6,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int length)
{
    int maxHeight = 0;
    
    //Find the maximum height of input array
    for (int i = 0; i < length; i++) {
        if (values[i] > maxHeight) {
            maxHeight = values[i];
        }
    }
    
    int index = 0; 
    
    // top *
    for (int col = 0; col < length + 2; col++) {
        formatted [index++] = '*';
    }
    formatted[index++] = '\n'; 
    
    for (int row = 0; row < maxHeight; row++) {
        formatted [index++] = '*'; 
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    // bottom *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    
    formatted[index] = '\0';
    
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
        
    }
    formatted[index++] ='\n';
    
    for (int row = 0; row < maxHeight; row++) {
        formatted[index++] = '*';
        
        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            } 
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    
    formatted[index] = '\0';
    
    int end = index -1; 
    while (end >= 0 && (formatted[end] == ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end --; 
    }
}  
",0
asaa285,1696802409,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *data, int length) {
    int highestNum= 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < length; i++) {
        if (data[i] > highestNum) {
            highestNum = data[i];
        }
    }
    
    // Build the histogram line by line
    for (int i = highestNum; i > 0; i--) {
        strcat(formatted, ""*"");
        for (int j = 0; j < length; j++) {
            if (data[j] >= i) {
                strcat(formatted, ""X"");
            } 
            else {
                strcat(formatted, "" "");
            }
        }
        strcat(formatted, ""*\n"");
    }
    
    // Add the bottom border
    strcat(formatted, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""*\n"");
}",0
asaa285,1696802448,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *data, int length) {
    int highestNum= 0;
    
    strcat(formatted, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""*\n"");
    
    for (int i = 0; i < length; i++) {
        if (data[i] > highestNum) {
            highestNum = data[i];
        }
    }

    for (int i = highestNum; i > 0; i--) {
        strcat(formatted, ""*"");
        for (int j = 0; j < length; j++) {
            if (data[j] >= i) {
                strcat(formatted, ""X"");
            } 
            else {
                strcat(formatted, "" "");
            }
        }
        strcat(formatted, ""*\n"");
    }

    strcat(formatted, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""*"");
}",0
asaa285,1696803829,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *data, int length) {
    int highestNum= 0;
    formatted[0] = '\0';
    strcat(formatted, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""*\n"");
    
    for (int i = 0; i < length; i++) {
        if (data[i] > highestNum) {
            highestNum = data[i];
        }
    }

    for (int i = highestNum; i > 0; i--) {
        strcat(formatted, ""*"");
        for (int j = 0; j < length; j++) {
            if (data[j] >= i) {
                strcat(formatted, ""X"");
            } 
            else {
                strcat(formatted, "" "");
            }
        }
        strcat(formatted, ""*\n"");
    }

    strcat(formatted, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""*"");
}
",1
aski294,1696678384,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int findMax(int arr[], int size) {
	// Assume the first element is the maximum
	int max = 0;

	// Loop through the array to find the maximum
	for (int i = 0; i < size; i++) {
		if (arr[i] > max) {
			max = arr[i];
		}
	}

	return max;
}

void Histogram(char* formatted, int values[], int lengArr)
{
	int i = 0;
	int max = findMax(values, lengArr), row = 1;
	char temp[100] = { 32 };

	// top bar of frame 
	while (i <= lengArr + 1) {
		formatted[i] = '*';
		i++;
	}
	formatted[i] = '\n';
	i++;

	formatted[i] = '\0';
	// printf(""%s"", formatted);
	int maxHold = max - 1;


	for (int row = 0; row <= maxHold; row++) {

		temp[0] = '*';

		for (int x = 1; x <= lengArr + 1; x++) {
			if (values[x - 1] >= max) {
				temp[x] = 'X';
			}
			else {
				temp[x] = ' ';
			}
		}
		
		temp[lengArr + 1] = '*';
		temp[lengArr + 2] = '\n';
		temp[lengArr + 3] = '\0';
		// printf(""%s\n"", temp);

		strcat(formatted, temp);
		
		max -= 1;
	}

	// bottom 
	i = 0;
	while (i <= lengArr + 1) {
		temp[i] = '*';
		i++;
	}
	temp[i] = '\n';
	i++;
	
	temp[i] = '\0';

	strcat(formatted, temp);
}
",0
aski294,1696678483,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int findMax(int arr[], int size) {
	// Assume the first element is the maximum
	int max = 0;

	// Loop through the array to find the maximum
	for (int i = 0; i < size; i++) {
		if (arr[i] > max) {
			max = arr[i];
		}
	}

	return max;
}

void Histogram(char* formatted, int values[], int lengArr)
{
	int i = 0;
	int max = findMax(values, lengArr);
	char temp[100] = { 32 };

	// top bar of frame 
	while (i <= lengArr + 1) {
		formatted[i] = '*';
		i++;
	}
	formatted[i] = '\n';
	i++;

	formatted[i] = '\0';
	// printf(""%s"", formatted);
	int maxHold = max - 1;


	for (int row = 0; row <= maxHold; row++) {

		temp[0] = '*';

		for (int x = 1; x <= lengArr + 1; x++) {
			if (values[x - 1] >= max) {
				temp[x] = 'X';
			}
			else {
				temp[x] = ' ';
			}
		}
		
		temp[lengArr + 1] = '*';
		temp[lengArr + 2] = '\n';
		temp[lengArr + 3] = '\0';
		// printf(""%s\n"", temp);

		strcat(formatted, temp);
		
		max -= 1;
	}

	// bottom 
	i = 0;
	while (i <= lengArr + 1) {
		temp[i] = '*';
		i++;
	}
	temp[i] = '\n';
	i++;
	
	temp[i] = '\0';

	strcat(formatted, temp);
}
",0
aski294,1696679562,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int findMax(int arr[], int size) {
	// Assume the first element is the maximum
	int max = 0;

	// Loop through the array to find the maximum
	for (int i = 0; i < size; i++) {
		if (arr[i] > max) {
			max = arr[i];
		}
	}

	return max;
}

void Histogram(char* formatted, int values[], int lengArr)
{
	int i = 0;
	int max = findMax(values, lengArr);
	char temp[100] = { 32 };

	// top bar of frame 
	while (i <= lengArr + 1) {
		formatted[i] = '*';
		i++;
	}
	formatted[i] = '\n';
	i++;

	formatted[i] = '\0';
	// printf(""%s"", formatted);
	int maxHold = max - 1;


	for (int row = 0; row <= maxHold; row++) {

		temp[0] = '*';

		for (int x = 1; x <= lengArr + 1; x++) {
			if (values[x - 1] >= max) {
				temp[x] = 'X';
			}
			else {
				temp[x] = ' ';
			}
		}

		temp[lengArr + 1] = '*';
		temp[lengArr + 2] = '\n';
		temp[lengArr + 3] = '\0';
		// printf(""%s\n"", temp);

		strcat(formatted, temp);

		max -= 1;
	}

	// bottom 
	i = 0;
	while (i <= lengArr + 1) {
		temp[i] = '*';
		i++;
	}
	//temp[i] = '\n';
	temp[i] = '\0';

	strcat(formatted, temp);
}",1
atee059,1696305623,1,"void Histogram(char* graph, int data[], int length)
{
    int i, j;
    int max = data[0];

    graph[0] = '\0';

    for (i = 1; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (i = 0; i < length + 2; i++) {
        strcat(graph, ""*"");
    }
    strcat(graph, ""\n"");

    i = 0;
    j = 0;

    for (i = 0; i < max; i++) {

        strcat(graph, ""*"");

        for (j = 0; j < length; j++) {

            if (data[j] >= max - i) {
                strcat(graph, ""X"");;
            }
            else {
                strcat(graph, "" "");;
            }
        }
        strcat(graph, ""*"");
        strcat(graph, ""\n"");
    }

    for (i = 0; i < length + 2; i++) {
        strcat(graph, ""*"");
    }
}",1
atee059,1696305973,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* graph, int data[], int length)
{
    int i, j;
    char line[1000];
    int max = data[0];

    graph[0] = '\0';
    line[0] = '\0';

    for (i = 1; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (i = 0; i < length + 2; i++) {
        strcat(line, ""*"");
    }
    strcat(graph, line);
    strcat(graph, ""\n"");

    i = 0;
    j = 0;
    line[0] = '\0';

    for (i = 0; i < max; i++) {

        strcat(line, ""*"");

        for (j = 0; j < length; j++) {

            if (data[j] >= max - i) {
                strcat(line, ""X"");
            }
            else {
                strcat(line, "" "");
            }
        }
        strcat(line, ""*"");
        strcat(graph, line);
        strcat(graph, ""\n"");
        line[0] = '\0';
    }

    for (i = 0; i < length + 2; i++) {
        strcat(line, ""*"");
    }
    strcat(graph, line);
}

int main() {

    int values1[10] = { 1, 0, 3, 1, 2, 4, 5, 6, 2, 2 };
    int values2[3] = { 1, 0, 1 };
    char formatted[1000];
    char example[1000] = ""*****\n*X X*\n*****"";

    Histogram(formatted, values1, 10);
    printf(""%s\n\n"", formatted);

    Histogram(formatted, values2, 3);
    printf(""%s\n"", formatted);
    if (strcmp(example, formatted) == 0) {
        printf(""This matches EXACTLY and is correct"");
    }

    return 0;
}
",0
atee059,1696305997,3,"#include <stdio.h>
#include <string.h>

void Histogram(char* graph, int data[], int length)
{
    int i, j;
    char line[1000];
    int max = data[0];

    graph[0] = '\0';
    line[0] = '\0';

    for (i = 1; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (i = 0; i < length + 2; i++) {
        strcat(line, ""*"");
    }
    strcat(graph, line);
    strcat(graph, ""\n"");

    i = 0;
    j = 0;
    line[0] = '\0';

    for (i = 0; i < max; i++) {

        strcat(line, ""*"");

        for (j = 0; j < length; j++) {

            if (data[j] >= max - i) {
                strcat(line, ""X"");
            }
            else {
                strcat(line, "" "");
            }
        }
        strcat(line, ""*"");
        strcat(graph, line);
        strcat(graph, ""\n"");
        line[0] = '\0';
    }

    for (i = 0; i < length + 2; i++) {
        strcat(line, ""*"");
    }
    strcat(graph, line);
}",1
athu157,1696391908,1,"void Histogram(char* histogram, int values[], int length)
{
	// find the max value in the values array
	int max = 0;
	for (int i = 0; i < length; i++) {
		if (values[i] > max)
			max = values[i];
	}
	//make the top border
	int j = 0;
	for (j = 0; j <= length + 2; j++) {
		if (j == length + 2) {
			histogram[j] = '\n';
		}
		else {
			histogram[j] = '*';
		}
	}
	// make the histogram without borders
	int row = 0;
	while (j < (length + 2) * (max+1)) {
		// go through the values array with k to see whether to print X
		for (int k = 0; k <= length + 2; k++) {
			if (k == length + 2) {
				histogram[j] = '\n';
				j++;
			}
			else if (k == 0 || k == length + 1) {
				histogram[j] = '*';
				j++;
			}
			else if (values[k - 1] < max - row) {
				histogram[j] = ' ';
				j++;
			}
			else {
				histogram[j] = 'X';
				j++;
			}
		}
		row++;
	}

	//make the bottom border
	for (int i = 0; i <= length + 1; i++) {
		histogram[j] = '*';
		j++;
	}

	histogram[j] = '\0';
}",0
athu157,1696394010,2,"void Histogram(char* histogram, int values[], int length)
{
	// find the max value in the values array
	int max = 0;
	for (int i = 0; i < length; i++) {
		if (values[i] > max)
			max = values[i];
	}
	//make the top border
	int j = 0;
	for (j = 0; j <= length + 2; j++) {
		if (j == length + 2) {
			histogram[j] = '\n';
		}
		else {
			histogram[j] = '*';
		}
	}
	// make the histogram without borders
	int row = 0;
	int height;

	if (length <= max - 2) {
		height = max + 2;
	}
	else {
		height = max + 1;
	}

	while (j < (length + 2) * height) {
		// go through the values array with k to see whether to print X
		for (int k = 0; k <= length + 2; k++) {
			if (k == length + 2) {
				histogram[j] = '\n';
				j++;
			}
			else if (k == 0 || k == length + 1) {
				histogram[j] = '*';
				j++;
			}
			else if (values[k - 1] < max - row) {
				histogram[j] = ' ';
				j++;
			}
			else {
				histogram[j] = 'X';
				j++;
			}
		}
		row++;
	}

	//make the bottom border
	for (int i = 0; i <= length + 1; i++) {
		histogram[j] = '*';
		j++;
	}

	histogram[j] = '\0';
}
",1
awal599,1696840013,1,"#include <string.h>
#include <stdio.h>
void Histogram(char *TotalArr,int *DataArr,int length)
{
   int x = DataArr[0];
   int j;
   TotalArr[0] = '\0';
   int i;
    for (i=0; i<length; i++) {
        if (DataArr[i] > x) {
            x = DataArr[i];
        }
        }
    for (i=-1; i<length; i++) {
        strcat(TotalArr,""*"");
        }
        strcat(TotalArr,""\n"");
        
        for (i=0; i<x; i++){
            strcat(TotalArr,""*"");
            for (j=0; j<length; i++){
                if (DataArr[j] >= x-i) {
                    strcat(TotalArr,""*"");
                }
                else {
                    strcat(TotalArr,"" "");
                }
            for (i=-1;i<=length; i++){
            strcat(TotalArr,""*"");
            }
            
        }
    
}
}",0
awal599,1696841008,2,"#include <string.h>
#include <stdio.h>
void Histogram(char *TotalArr,int *DataArr,int length)
{
   
   int i,j;
   TotalArr[0] = '\0';
   
   int max = DataArr[0];
    for (i=0; i<length; i++) {
        if (DataArr[i] > max) {
            max = DataArr[i];
        }
    }
        
    for (i=-1; i<=length; i++) {
        strcat(TotalArr,""*"");
        }
        
        strcat(TotalArr,""\n"");
        
        for (i=0; i<max; i++){
            strcat(TotalArr,""*"");
            for (j=0; j<length; j++){
                if (DataArr[j] >= max-i) {
                    strcat(TotalArr,""X"");
                }
                else {
                    strcat(TotalArr,"" "");
                }
            }
         strcat(TotalArr,""*\n""); 
        }
                
            for (i=-1;i<=length; i++){
            strcat(TotalArr,""*"");
            }
}",1
ayan607,1696735898,1,"void Histogram(char* table, int* data, int numData)
{
    int i,j,largest = 0;
    int pos = 0;

    //find the largest value in the data
    for (i = 0; i < numData; i++){
        if (data[i] > largest){
            largest = data[i];
        }
    }

    //construct the top border of the table
    for (i = 0; i <= numData + 1; i++){
        table[pos] = '*';
        pos++;
    }
    table[pos] = '\n';
    pos++;
    
    //construct the vertical borders of the table
    for (i = 1; i <= largest; i++){
        table[pos] = '*';
        for (j = 0;j < numData;j++){
            pos++;
            table[pos] = ' ';
        }
        pos++;
        table[pos] = '*';
        pos++;
        table[pos] = '\n';
        pos++;
    }

    //constructure the bottom border of the table
    for (i = 0; i <= numData + 1;i++){
        table[pos] = '*';
        pos++;
    }

    int posData = 0;
   
    //insert the data into the table
    for (i = 0; i < numData; i++){
        posData = (numData + 3) * largest + i + 1;
        for (j = 0; j < data[i]; j++){
            table[posData] = 'X';
            posData = posData - (numData + 3);
        }
    }


}

",0
ayan607,1696736716,2,"void Histogram(char* table, int* data, int numData)
{
    int i,j,largest = 0;
    int pos = 0;
    
    //initialise table
    for (i = 0; i < 1000;i++){
        table[i] = '\0';
    }

    //find the largest value in the data
    for (i = 0; i < numData; i++){
        if (data[i] > largest){
            largest = data[i];
        }
    }

    //construct the top border of the table
    for (i = 0; i <= numData + 1; i++){
        table[pos] = '*';
        pos++;
    }
    table[pos] = '\n';
    pos++;
    
    //construct the vertical borders of the table
    for (i = 1; i <= largest; i++){
        table[pos] = '*';
        for (j = 0;j < numData;j++){
            pos++;
            table[pos] = ' ';
        }
        pos++;
        table[pos] = '*';
        pos++;
        table[pos] = '\n';
        pos++;
    }

    //constructure the bottom border of the table
    for (i = 0; i <= numData + 1;i++){
        table[pos] = '*';
        pos++;
    }

    int posData = 0;
   
    //insert the data into the table
    for (i = 0; i < numData; i++){
        posData = (numData + 3) * largest + i + 1;
        for (j = 0; j < data[i]; j++){
            table[posData] = 'X';
            posData = posData - (numData + 3);
        }
    }


}
",1
ayou303,1696820509,1,"#include <stdio.h>
#include <string.h>
void Histogram(char *result_str, int data[], int num_elements) {
    // Find the maximum frequency in the data
    int max_frequency = 0;
    for (int i = 0; i < num_elements; i++) {
        if (data[i] > max_frequency) {
            max_frequency = data[i];
        }
    }

    // Create the top border of the histogram
    for (int i = 0; i < max_frequency + 2; i++) {
        result_str[i] = '*';
    }
    result_str[max_frequency + 2] = '\n';
    result_str[max_frequency + 3] = '\0';

    // Create the histogram
    for (int i = max_frequency; i > 0; i--) {
        result_str[max_frequency - i + 1] = '*';
        for (int j = 0; j < num_elements; j++) {
            if (data[j] >= i) {
                result_str[max_frequency - i + 2 + j] = 'X';
            } else {
                result_str[max_frequency - i + 2 + j] = ' ';
            }
        }
        result_str[max_frequency + num_elements + 2] = '*';
        result_str[max_frequency + num_elements + 3] = '\n';
    }

    // Create the bottom border of the histogram
    for (int i = 0; i < max_frequency + 2; i++) {
        result_str[max_frequency + num_elements + 4 + i] = '*';
    }
    result_str[max_frequency + num_elements + 4 + max_frequency + 2] = '\n';
    result_str[max_frequency + num_elements + 4 + max_frequency + 3] = '\0';
}
",0
ayua214,1696814840,1,"#include <stdio.h>

void generate_histogram(char histogram[], int data[], int n) {
    int max_value = 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < n; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Generate the histogram string
    for (int row = max_value; row > 0; row--) {
        for (int i = 0; i < n; i++) {
            if (data[i] >= row) {
                histogram[i] = 'X';
            } else {
                histogram[i] = ' ';
            }
        }
        histogram[n] = '\0';  // Null-terminate the string
        printf(""%s\n"", histogram);
    }

    // Print the border line
    for (int i = 0; i <= n; i++) {
        printf(""*"");
    }
    printf(""\n"");
}

void Histogram(char histogram[], int data[], int n) {
    generate_histogram(histogram, data, n);
}
",0
ayua214,1696814894,2,"#include <stdio.h>
#include <string.h>

void generate_histogram(char histogram[], int data[], int n) {
    int max_value = 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < n; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Generate the histogram string with the border
    for (int row = max_value; row > 0; row--) {
        histogram[0] = '*';
        for (int i = 0; i < n; i++) {
            if (data[i] >= row) {
                histogram[i + 1] = 'X';
            } else {
                histogram[i + 1] = ' ';
            }
        }
        histogram[n + 1] = '*';
        histogram[n + 2] = '\0';  // Null-terminate the string
        printf(""%s\n"", histogram);
    }

    // Print the bottom border line
    for (int i = 0; i <= n + 1; i++) {
        printf(""*"");
    }
    printf(""\n"");
}

void Histogram(char histogram[], int data[], int n) {
    generate_histogram(histogram, data, n);
}
",0
ayua214,1696814921,3,"#include <stdio.h>
#include <string.h>

void generate_histogram(char histogram[], int data[], int n) {
    int max_value = 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < n; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Print the top border line
    for (int i = 0; i <= n + 1; i++) {
        printf(""*"");
    }
    printf(""\n"");

    // Generate the histogram string with the border
    for (int row = max_value; row > 0; row--) {
        histogram[0] = '*';
        for (int i = 0; i < n; i++) {
            if (data[i] >= row) {
                histogram[i + 1] = 'X';
            } else {
                histogram[i + 1] = ' ';
            }
        }
        histogram[n + 1] = '*';
        histogram[n + 2] = '\0';  // Null-terminate the string
        printf(""%s\n"", histogram);
    }

    // Print the bottom border line
    for (int i = 0; i <= n + 1; i++) {
        printf(""*"");
    }
    printf(""\n"");
}

void Histogram(char histogram[], int data[], int n) {
    generate_histogram(histogram, data, n);
}",0
ayua214,1696815019,4,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, const int* data, int size) {
    int maxFrequency = 0;
    
    // Find the maximum frequency in the data
    for (int i = 0; i < size; i++) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }
    
    // Compute the height of the histogram
    int height = maxFrequency + 2;
    
    // Compute the width of the histogram
    int width = size;
    
    // Initialize the result string with spaces
    memset(result, ' ', sizeof(char) * (height * width + height + 1));
    result[height * width + height] = '\0';
    
    // Generate the histogram
    for (int i = 0; i < size; i++) {
        int col = i;
        int row = height - 2;
        
        // Place 'X' characters for the bars
        for (int j = 0; j < data[i]; j++) {
            result[(row - j) * (width + 1) + col] = 'X';
        }
        
        // Place borders around bars
        result[(row - data[i]) * (width + 1) + col] = '*';
    }
    
    // Add bottom border
    for (int i = 0; i < width; i++) {
        result[(height - 1) * (width + 1) + i] = '*';
    }
}",0
ayua214,1696815085,5,"#include <stdio.h>
#include <string.h>

void generate_histogram(char histogram[], int data[], int n) {
    int max_value = 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < n; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Print the top border line
    for (int i = 0; i <= n + 1; i++) {
        printf(""*"");
    }
    printf(""\n"");

    // Generate the histogram string with the border
    for (int row = max_value; row > 0; row--) {
        histogram[0] = '*';
        for (int i = 0; i < n; i++) {
            if (data[i] >= row) {
                histogram[i + 1] = 'X';
            } else {
                histogram[i + 1] = ' ';
            }
        }
        histogram[n + 1] = '*';
        histogram[n + 2] = '\0';  // Null-terminate the string
        printf(""%s\n"", histogram);
    }

        // Add bottom border
    for (int i = 0; i < width; i++) {
        result[(height - 1) * (width + 1) + i] = '*';
    }
}

void Histogram(char histogram[], int data[], int n) {
    generate_histogram(histogram, data, n);
}
",0
ayua214,1696815097,6,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, const int* data, int size) {
    int maxFrequency = 0;
    
    // Find the maximum frequency in the data
    for (int i = 0; i < size; i++) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }
    
    // Compute the height of the histogram
    int height = maxFrequency + 2;
    
    // Compute the width of the histogram
    int width = size;
    
    // Initialize the result string with spaces and new lines
    memset(result, ' ', sizeof(char) * (height * width + height + width));
    result[height * width + height + width] = '\0';
    
    // Generate the histogram
    for (int i = 0; i < size; i++) {
        int col = i;
        int row = height - 2;
        
        // Place 'X' characters for the bars
        for (int j = 0; j < data[i]; j++) {
            result[(row - j) * (width + 1) + col] = 'X';
        }
        
        // Place borders around bars
        result[(row - data[i]) * (width + 1) + col] = '*';
    }
    
    // Add bottom border
    for (int i = 0; i < width; i++) {
        result[(height - 1) * (width + 1) + i] = '*';
    }
    
    // Add new lines between layers
    for (int i = 0; i < height; i++) {
        result[(height + 1) * width + i] = '\n';
    }
}",0
ayua214,1696815109,7,"#include <stdio.h>
#include <string.h>

void generate_histogram(char histogram[], int data[], int n) {
    int max_value = 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < n; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Print the top border line
    for (int i = 0; i <= n + 1; i++) {
        printf(""*"");
    }
    printf(""\n"");

    // Generate the histogram string with the border
    for (int row = max_value; row > 0; row--) {
        histogram[0] = '*';
        for (int i = 0; i < n; i++) {
            if (data[i] >= row) {
                histogram[i + 1] = 'X';
            } else {
                histogram[i + 1] = ' ';
            }
        }
        histogram[n + 1] = '*';
        histogram[n + 2] = '\0';  // Null-terminate the string
        printf(""%s\n"", histogram);
    }

    // Print the bottom border line
    for (int i = 0; i <= n + 1; i++) {
        printf(""*"");
    }
    printf(""\n"");
}

void Histogram(char histogram[], int data[], int n) {
    generate_histogram(histogram, data, n);
}",0
bcar662,1696832604,1,"void Histogram(char graph[], int values[], int length)
{
    int height = 0;
    int pos = 0;
    for (int i = 0; i < length; i++) 
    {
        if (values[i] > height) {
            height = values[i];
        }
    }


    for (int j = (height + 1); j >= 0; j--) {
        for (int i = 0; i < (length + 2); i++) {
            if (j == (height + 1)) {
                if (i != (length + 1)) {
                    graph[i] = '*';
                }
                else {
                    graph[i] = '*';
                    graph[i + 1] = '\n';
                }
            }
            else if (j > 0 && j < (height + 1)) {
                
                pos = ((j - (height + 1)) * -1 * (length + 3) + i);
                if (i == 0) {
                    graph[pos] = '*';
                }
                else if (i != (length + 1)) {                 
                    if (j <= values[i-1]) {
                        graph[pos] = 'X';
                    }
                    else {
                        graph[pos] = ' ';
                    }
                }
                else {
                    graph[pos] = '*';
                    graph[pos + 1] = '\n';
                }
            }
            else if (j == 0) {
                pos = ((j - (height + 1)) * -1 * (length + 3) + i);
                if (i != (length + 1)) {
                    graph[pos] = '*';
                }
                else {
                    graph[pos] = '*';
                    graph[pos + 1] = '\0';
                }
            }
        }       
    }
}",1
bcha389,1696741573,1,"int Histogram(char *formatted, int *values, int len)
{
    //Determine the highest integer in values.
    int max = 0;
    for (int i = 0; i < len; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    int n = 0;

    //Add the top row of asterisks.
    while (n < len+2) {
        formatted[n] = '*';     n++;
    }

    //Add body of histogram.
    for (int i = max; i > 0; i--) {
        //Go to new line and add left asterisk.
        formatted[n] = '\n';    n++;
        formatted[n] = '*';     n++;

        for (int j = 0; j < len; j++){
            if (values[j] >= i) {
                formatted[n] = 'X';
            }
            else {
                formatted[n] = ' ';
            }

            n++;
        }

        //Add right asterisk.
        formatted[n] = '*';     n++;
    }

    //Add the bottom row of asterisks.
    int m = 0;
    formatted[n] = '\n';        n++;
    while (m < len + 2) {
        formatted[n] = '*';
        n++;
        m++;
    }
    
    //End the string.
    formatted[n] = '\0';
}",0
bcha389,1696741664,2,"void Histogram(char *formatted, int *values, int len)
{
    //Determine the highest integer in values.
    int max = 0;
    for (int i = 0; i < len; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    int n = 0;

    //Add the top row of asterisks.
    while (n < len+2) {
        formatted[n] = '*';     n++;
    }

    //Add body of histogram.
    for (int i = max; i > 0; i--) {
        //Go to new line and add left asterisk.
        formatted[n] = '\n';    n++;
        formatted[n] = '*';     n++;

        for (int j = 0; j < len; j++){
            if (values[j] >= i) {
                formatted[n] = 'X';
            }
            else {
                formatted[n] = ' ';
            }

            n++;
        }

        //Add right asterisk.
        formatted[n] = '*';     n++;
    }

    //Add the bottom row of asterisks.
    int m = 0;
    formatted[n] = '\n';        n++;
    while (m < len + 2) {
        formatted[n] = '*';
        n++;
        m++;
    }
    
    //End the string.
    formatted[n] = '\0';
}",1
bcha726,1696465324,1,"#include <stdio.h>
#include <string.h>

int Max(int* array, int length) {
    
    int i, max = array[0];
    
    for (i = 1; i < length; i++) {
        if (array[i] > max)
            max = array[i];
    }

    return max;
}

void Histogram(char* formattedString, int* data, int dataLength) {

    int max = Max(data, dataLength);
    int i, j, k = 67;

    for (i = 0; i <= max + 1; i++) {
        for (j = 0; j < dataLength + 3; j++) {
            if ((i == (max + 1)) && (j == (dataLength + 2))) {

                formattedString[(i * (dataLength + 3)) + j] = '\0';
            } else if (j == dataLength + 2) {

                formattedString[(i * (dataLength + 3)) + j] = '\n';
            } else if ((i == 0) || (i == (max + 1)) || (j == 0) || (j == (dataLength + 1))) {

                formattedString[(i * (dataLength + 3)) + j] = '*';
            } else {
                
                if (data[j - 1] > max - i) {
                    formattedString[(i * (dataLength + 3)) + j] = 'X';
                } else {
                    formattedString[(i * (dataLength + 3)) + j] = ' ';
                }
            }
        }
    }

    return;
}",0
bcha726,1696465403,2,"#include <stdio.h>
#include <string.h>

int Max(int* array, int length) {

    int i, max = array[0];
    
    for (i = 1; i < length; i++) {
        if (array[i] > max)
            max = array[i];
    }

    return max;
}

void Histogram(char* formattedString, int* data, int dataLength) {

    int max = Max(data, dataLength);
    int i, j;

    for (i = 0; i <= max + 1; i++) {
        for (j = 0; j < dataLength + 3; j++) {
            if ((i == (max + 1)) && (j == (dataLength + 2))) {

                formattedString[(i * (dataLength + 3)) + j] = '\0';
            } else if (j == dataLength + 2) {

                formattedString[(i * (dataLength + 3)) + j] = '\n';
            } else if ((i == 0) || (i == (max + 1)) || (j == 0) || (j == (dataLength + 1))) {

                formattedString[(i * (dataLength + 3)) + j] = '*';
            } else {
                
                if (data[j - 1] > max - i) {
                    formattedString[(i * (dataLength + 3)) + j] = 'X';
                } else {
                    formattedString[(i * (dataLength + 3)) + j] = ' ';
                }
            }
        }
    }

    return;
}",1
bcos422,1696394700,1,"void Histogram(char arra[],int values[], int number) {
	int L, largest, i,j,column,row;
	//Finds the largest value of array to determine number of rows
	largest = 0;
	for (i = 0; i < number; i++) {
		if (values[i] > largest){
			largest = values[i];
		}
	}
	
	for (i = 0; i < (largest + 2)*(number + 3); i++) {
		column = i % (number + 3);
		row = i / (number + 3);
		//Adds the border
		if (i < (number + 3) || i > (largest + 1)*(number+3)-1 || column == 0 || column==number+1) {
			arra[i] = '*';
		}
		//Otherwise creates empty space
		else {
			arra[i] = ' ';
		}
		//Checks if that bar of data is high enough to have an x in that row
		if (largest - values[column - 1] < row && row!=largest+1) {
			arra[i] = 'X';
		}
		//Adds new lines
		if (column == number+2) {
			arra[i] = '\n';
		}


	}
	//Ends string
	arra[(largest+2) * (number+3)-1] = '\0';
}
",0
bcos422,1696394762,2,"void Histogram(char arra[],int values[], int number) {
	int largest, i,column,row;
	//Finds the largest value of array to determine number of rows
	largest = 0;
	for (i = 0; i < number; i++) {
		if (values[i] > largest){
			largest = values[i];
		}
	}
	
	for (i = 0; i < (largest + 2)*(number + 3); i++) {
		column = i % (number + 3);
		row = i / (number + 3);
		//Adds the border
		if (i < (number + 3) || i > (largest + 1)*(number+3)-1 || column == 0 || column==number+1) {
			arra[i] = '*';
		}
		//Otherwise creates empty space
		else {
			arra[i] = ' ';
		}
		//Checks if that bar of data is high enough to have an x in that row
		if (largest - values[column - 1] < row && row!=largest+1) {
			arra[i] = 'X';
		}
		//Adds new lines
		if (column == number+2) {
			arra[i] = '\n';
		}


	}
	//Ends string
	arra[(largest+2) * (number+3)-1] = '\0';
}
",0
bcos422,1696395217,3,"void Histogram(char arra[], int values[], int number) {
	int largest, i, column, row;
	//Finds the largest value of array to determine number of rows
	largest = 0;
	for (i = 0; i < number; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}

	for (i = 0; i < (largest + 2) * (number + 3)-1; i++) {
		column = i % (number + 3);
		row = i / (number + 3);
		//Adds the border
		if (i < (number + 3) || i >(largest + 1) * (number + 3) - 1 || column == 0 || column == number + 1) {
			arra[i] = '*';
		}
		//Otherwise creates empty space
		else {
			arra[i] = ' ';
		}
		//Checks if that bar of data is high enough to have an x in that row
		if (column != 0 && largest - values[column - 1] < row && row != largest + 1) {
			arra[i] = 'X';
		}
		//Adds new lines
		if (column == number + 2) {
			arra[i] = '\n';
		}


	}",0
bcos422,1696395253,4,"void Histogram(char arra[], int values[], int number) {
	int largest, i, column, row;
	//Finds the largest value of array to determine number of rows
	largest = 0;
	for (i = 0; i < number; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}

	for (i = 0; i < (largest + 2) * (number + 3)-1; i++) {
		column = i % (number + 3);
		row = i / (number + 3);
		//Adds the border
		if (i < (number + 3) || i >(largest + 1) * (number + 3) - 1 || column == 0 || column == number + 1) {
			arra[i] = '*';
		}
		//Otherwise creates empty space
		else {
			arra[i] = ' ';
		}
		//Checks if that bar of data is high enough to have an x in that row
		if (column != 0 && largest - values[column - 1] < row && row != largest + 1) {
			arra[i] = 'X';
		}
		//Adds new lines
		if (column == number + 2) {
			arra[i] = '\n';
		}
	}
}",0
bcos422,1696395519,5,"void Histogram(char arra[], int values[], int number) {
	int largest, i, column, row;
	//Finds the largest value of array to determine number of rows
	largest = 0;
	for (i = 0; i < number; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}

	for (i = 0; i < (largest + 2) * (number + 3)-1; i++) {
		column = i % (number + 3);
		row = i / (number + 3);
		//Adds the border
		if (i < (number + 3) || i >(largest + 1) * (number + 3) - 1 || column == 0 || column == number + 1) {
			arra[i] = '*';
		}
		//Otherwise creates empty space
		else {
			arra[i] = ' ';
		}
		//Checks if that bar of data is high enough to have an x in that row
		if (column != 0 && column != number + 2 && largest - values[column - 1] < row && row < largest + 1) {
			arra[i] = 'X';
		}
		//Adds new lines
		if (column == number + 2) {
			arra[i] = '\n';
		}


	}
	//Ends string
	arra[(largest + 2) * (number + 3) - 1] = '\0';
}",0
bcos422,1696395620,6,"void Histogram(char arra[], int values[], int number) {
	int largest, i, column, row;
	//Finds the largest value of array to determine number of rows
	largest = 0;
	for (i = 0; i < number; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}

	for (i = 0; i < (largest + 2) * (number + 3)-1; i++) {
		column = i % (number + 3);
		row = i / (number + 3);
		//Adds the border
		if (i < (number + 3) || i >(largest + 1) * (number + 3) - 1 || column == 0 || column == number + 1) {
			arra[i] = '*';
		}
		//Otherwise creates empty space
		else {
			arra[i] = ' ';
		}
		//Checks if that bar of data is high enough to have an x in that row
		if (column != 0 && column < number + 1 && largest - values[column - 1] < row && row < largest + 1) {
			arra[i] = 'X';
		}
		//Adds new lines
		if (column == number + 2) {
			arra[i] = '\n';
		}


	}
	//Ends string
	arra[(largest + 2) * (number + 3) - 1] = '\0';
}",1
bcru157,1696841073,1,Sorry,0
bgib630,1696319587,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *values, int numel) {
    
    int maxValue = 0;
    for (int i = 0; i < numel; i++) 
    {
        if (values[i] > maxValue) 
        {
            maxValue = values[i];
        }
    }
    
    int cols = numel + 2;
    int rows = maxValue + 2;
    
    strcpy(result, """");
    
    
    for (int i = 0; i < cols; i++)
    {
        strcat(result, ""*"");
    }
    
    strcat(result, ""\n"");
    
    for (int j = 1; j < rows - 1; j++)
    {
        for (int i = 0; i < cols; i++)
        {
            if (i == 0)
            {
                strcat(result, ""*"");
            }
            else if (i == cols - 1)
            {
                strcat(result, ""*\n"");
            }
            else
            {
                if (values[i - 1] > maxValue - j)
                {
                    strcat(result, ""X"");
                }
                else
                {
                    strcat(result, "" "");
                }
            }
        }
    }
    
    for (int i = 0; i < cols; i++)
    {
        strcat(result, ""*"");
    }
    
}
",1
bgru726,1696816646,1,"void Histogram(char* output, int values[], int elements) {
	int largest = values[0];
	//The height is dependent upon the largest value within the array.
	for (int i = 0; i < elements; i++) {
		if (largest < values[i]) {
			largest = values[i];
		}
	}

	//Top and bottom line is a set of *'s with a width of elements+2
	char top[100] = ""*"";
	for (int i = 0; i < elements+1; i++) {
		strcat(top, ""*"");
	}
	strcat(top, ""\n"");

	char body[1000] = """";
	for (int i = 0; i < largest; i++) {
		strcat(body, ""*"");
		for (int j = 0; j < elements; j++) {
			if (values[j] >= largest - i) {
				strcat(body, ""X"");
			}
			else {
				strcat(body, "" "");
			}
		}
		strcat(body, ""*\n"");
	}

	output = top;
	strcat(body, top);
	strcat(output, body);
//	printf(""%s\n"", output);
}",0
bgru726,1696837436,2,"void Histogram(char* output, int values[], int elements) {
	int largest = values[0];
	//The height is dependent upon the largest value within the array, so setting it to a variable will be useful.
	for (int i = 0; i < elements; i++) {
		if (largest < values[i]) {
			largest = values[i];
		}
	}

	//Top and bottom line is a set of *'s with a width of elements+2. Since it appears twice it will be easier to simply make that line its own array
	char top[100] = ""*"";
	for (int i = 0; i < elements + 1; i++) {
		strcat(top, ""*"");
	}


	//The body is comprised of a histogram with max height the value of the highest value within the array, each value going from level 0 to its value, all surrounded by bars of *
	char body[1000] = """";
	for (int i = 0; i < largest; i++) {
		strcat(body, ""*""); // Each line starts with a *, so we want to start (and end) with one always.
		for (int j = 0; j < elements; j++) {
			if (values[j] >= largest - i) { //We only want to place an X if the row is at or below the value of the array's position. If not we need to place a "" "".
				strcat(body, ""X"");
			}
			else {
				strcat(body, "" "");
			}
		}
		strcat(body, ""*\n""); //After placing each X, we need to end the line with a * and go to the next. This needs to happen every line. 
	}
	char temp[1000] = """";
	//The output should be consisting of the body squished between 2 tops (as the bottom and top are identical apart from the first one containing a next line character) 
	strcat(body, top); 
	strcat(top, ""\n"");
	strcat(body, ""\0"");
	strcat(temp, top);
	strcat(temp, body);
//	printf(""Output before:\n%s\n\n"", output);
	strcpy(output, temp);
//	printf(""Output after:\n%s\n\n"", output);",0
bgru726,1696837485,3,"void Histogram(char* output, int values[], int elements) {
	int largest = values[0];
	//The height is dependent upon the largest value within the array, so setting it to a variable will be useful.
	for (int i = 0; i < elements; i++) {
		if (largest < values[i]) {
			largest = values[i];
		}
	}

	//Top and bottom line is a set of *'s with a width of elements+2. Since it appears twice it will be easier to simply make that line its own array
	char top[100] = ""*"";
	for (int i = 0; i < elements + 1; i++) {
		strcat(top, ""*"");
	}


	//The body is comprised of a histogram with max height the value of the highest value within the array, each value going from level 0 to its value, all surrounded by bars of *
	char body[1000] = """";
	for (int i = 0; i < largest; i++) {
		strcat(body, ""*""); // Each line starts with a *, so we want to start (and end) with one always.
		for (int j = 0; j < elements; j++) {
			if (values[j] >= largest - i) { //We only want to place an X if the row is at or below the value of the array's position. If not we need to place a "" "".
				strcat(body, ""X"");
			}
			else {
				strcat(body, "" "");
			}
		}
		strcat(body, ""*\n""); //After placing each X, we need to end the line with a * and go to the next. This needs to happen every line. 
	}
	char temp[1000] = """";
	//The output should be consisting of the body squished between 2 tops (as the bottom and top are identical apart from the first one containing a next line character) 
	strcat(body, top); 
	strcat(top, ""\n"");
	strcat(body, ""\0"");
	strcat(temp, top);
	strcat(temp, body);
//	printf(""Output before:\n%s\n\n"", output);
	strcpy(output, temp);
//	printf(""Output after:\n%s\n\n"", output);
}",1
bguo360,1696211777,1,"void Histogram(char* s, int* values, int numValues) {
	int max = values[0], i, j;
	strcpy(s, """");
	for (i = 0; i < numValues; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}
	for (i = 0; i < numValues + 2; i++) {
		strcat(s, ""*"");
	}
	strcat(s, ""\n"");
	for (i = max; i > 0; i--) {
		strcat(s, ""*"");
		for (j = 0; j < numValues; j++) {
			if (values[j] >= i) {
				strcat(s, ""X"");
				continue;
			}
			strcat(s, "" "");
		}
		strcat(s, ""*\n"");
	}
	for (i = 0; i < numValues + 2; i++) {
		strcat(s, ""*"");
	}
}
",1
bhua898,1696242299,1,"#include <stdio.h>
#include <string.h>

int Maximum(int values[], int length) {
    int max = values[0];
    for (int i = 0; i < length; i++) {
        if (values[i] > max) max = values[i];
    }
    return max;
}

void Histogram(char histogram[1000], int data[], int length)
{
    histogram[0] = '\0';

    char asteriskLine[1000];
    for (int a = 0; a < length + 2; a++) {
        asteriskLine[a] = '*';
    }
    asteriskLine[length + 2] = '\0';

    strcat(histogram, asteriskLine);
    strcat(histogram, ""\n"");

    int i = Maximum(data, length);
    char line[1000];
    while (i > 0) {
        line[0] = '*';
        for (int j = 0; j < length; j++) {
            if (i <= data[j]) {
                line[j+1] = 'X';
            } else {
                line[j+1] = ' ';
            }
        }
        line[length + 1] = '*';
        line[length + 2] = '\n';
        line[length + 3] = '\0';
        strcat(histogram, line);

        i--;
    }
    strcat(histogram, asteriskLine);
}",1
bjon836,1696753627,1,"#include <stdio.h>
#include <string.h>

void Histogram(char histogram[1000], int data[], int numElements) {
    int maxValue = 0;
    for (int i = 0; i < numElements; i++) {
        if (data[i] > maxValue) {
            maxValue = data[i];
        }
    }

    for (int i = 0; i <= numElements + 1; i++) {
        strcat(histogram, ""*"");
    }
    strcat(histogram, ""\n"");

    for (int row = maxValue; row > 0; row--) {
        strcat(histogram, ""*"");
        for (int col = 0; col < numElements; col++) {
            if (data[col] >= row) {
                strcat(histogram, ""X"");
            } else {
                strcat(histogram, "" "");
            }
        }
        strcat(histogram, ""*\n"");
    }

    for (int i = 0; i <= numElements + 1; i++) {
        strcat(histogram, ""*"");
    }
}",0
bjon836,1696755125,2,"#include <stdio.h>
#include <string.h>

void Histogram(char histogram[], int data[], int numElements) {
    int maxValue = 0;

    for (int i = 0; i < numElements; i++) {
        if (data[i] > maxValue) {
            maxValue = data[i];
        }
        strcpy(histogram, """");
    }


    int width = numElements + 2;


    for (int i = 0; i < width; i++) {
        strcat(histogram, ""*"");
    }
    strcat(histogram, ""\n"");


    for (int row = maxValue; row >= 1; row--) {
        strcat(histogram, ""*"");
        for (int col = 0; col < numElements; col++) {
            if (data[col] >= row) {
                strcat(histogram, ""X"");
            } else {
                strcat(histogram, "" "");
            }
        }
        strcat(histogram, ""*\n"");
    }


    for (int i = 0; i < width; i++) {
        strcat(histogram, ""*"");
    }
}",1
bkho028,1696232227,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int size)
{
    int maxFreq = 0;
    for (int i = 0; i < size; i++)
    {
        if (data[i] > maxFreq)
        {
            maxFreq = data[i];
        }
    }

    int numRows = maxFreq + 2;
    int numCols = size + 2;
    char histogram[numRows][numCols];

    // Initialize histogram array with spaces
    for (int i = 0; i < numRows; i++)
    {
        for (int j = 0; j < numCols; j++)
        {
            histogram[i][j] = ' ';
        }
    }

    // Fill histogram array with X characters
    for (int i = 0; i < size; i++)
    {
        int col = i + 1;
        int freq = data[i];
        for (int row = numRows - 2; row >= numRows - freq - 1; row--)
        {
            histogram[row][col] = 'X';
        }
    }

    // Add border to histogram array
    for (int i = 0; i < numRows; i++)
    {
        histogram[i][0] = '*';
        histogram[i][numCols - 1] = '*';
    }
    for (int j = 0; j < numCols; j++)
    {
        histogram[0][j] = '*';
        histogram[numRows - 1][j] = '*';
    }

    // Convert histogram array to string
    int index = 0;
    for (int i = 0; i < numRows; i++)
    {
        for (int j = 0; j < numCols; j++)
        {
            result[index++] = histogram[i][j];
        }
        result[index++] = '\n';
    }
    result[index] = '\0';
}",0
bkho028,1696289058,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int size)
{
    int maxFreq = 0;
    for (int i = 0; i < size; i++)
    {
        if (data[i] > maxFreq)
        {
            maxFreq = data[i];
        }
    }

    int numRows = maxFreq + 2;
    int numCols = size + 2;
    char histogram[numRows][numCols];

    for (int i = 0; i < numRows; i++)
    {
        for (int j = 0; j < numCols; j++)
        {
            histogram[i][j] = ' ';
        }
    }

    for (int i = 0; i < size; i++)
    {
        int col = i + 1;
        int freq = data[i];
        for (int row = numRows - 2; row >= numRows - freq - 1; row--)
        {
            histogram[row][col] = 'X';
        }
    }

    for (int i = 0; i < numRows; i++)
    {
        histogram[i][0] = '*';
        histogram[i][numCols - 1] = '*';
    }
    for (int j = 0; j < numCols; j++)
    {
        histogram[0][j] = '*';
        histogram[numRows - 1][j] = '*';
    }

    int index = 0;
    for (int i = 0; i < numRows; i++)
    {
        for (int j = 0; j < numCols; j++)
        {
            result[index++] = histogram[i][j];
        }
        result[index++] = '\n';
    }
    result[index - 1] = '\0';
}
",1
bli482,1696332416,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int length) {
    int max = 0;
    int row, col;
    int j;
    int p;
    int currentIndex = 0;

    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    j = max;

    for (row = 0; row < (max + 2); row++) {
        for (col = 0; col < (length + 2); col++) {
            if ((row == 0) || (row == (max + 1)) || (col == 0) || (col == (length + 1))) {
                result[currentIndex++] = '*';
            }
            if ((row != 0) && (row != (max + 1)) && (col != 0) && (col != (length + 1))) {
                p = col - 1;
                if (data[p] > j) {
                    result[currentIndex++] = 'X';
                } else {
                    result[currentIndex++] = ' ';
                }
            }
        }
        j--;
        result[currentIndex++] = '\n';
    }
    result[currentIndex] = '\0';
}",0
bli482,1696333148,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int length) {
    int max = 0;
    int row, col;
    int j;
    int p;
    int currentIndex = 0;

    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    j = max;

    for (row = 0; row < (max + 2); row++) {
        for (col = 0; col < (length + 2); col++) {
            if ((row == 0) || (row == (max + 1)) || (col == 0) || (col == (length + 1))) {
                result[currentIndex++] = '*';
            }
            if ((row != 0) && (row != (max + 1)) && (col != 0) && (col != (length + 1))) {
                p = col - 1;
                if (data[p] > j) {
                    result[currentIndex++] = 'X';
                } else {
                    result[currentIndex++] = ' ';
                }
            }
        }
        j--;
        if (row < (max + 1)){
            result[currentIndex++] = '\n';
        }
    }
    result[currentIndex] = '\0';
}",1
bli775,1696422554,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, int *data, int size) {
    // Finding the maximum value in the data
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize the output string
    // Width of each line including borders
    int width = size * 2 + 2; 
    
    // Height of the histogram
    int height = max + 2;    
    
    int totalSize = width * height + 1;
    memset(output, ' ', totalSize);
    output[totalSize - 1] = '\0';

    // Add borders to the top and bottom.
    for (int i = 0; i < width; i++) {
        output[i] = '*';
        output[totalSize - 2 - i] = '*';
    }

    // Generating the histogram slay
    for (int i = 0; i < height - 1; i++) {
        int lineStart = i * width;
        int lineEnd = lineStart + width - 1;
        output[lineStart] = '*';
        output[lineEnd] = '*';

        for (int j = 0; j < size; j++) {
            if (max - data[j] + 1 <= i + 1) {
                output[lineStart + 2 * j + 1] = 'X';
            }
        }
    }
}",0
bora417,1696823203,1,"/* Challenge Exercise */
#include <stdio.h>

int Histogram(char *formatted, int values[], int length) {
    int i,x;
    int index = -1;

    //Print the first line of the border
    int width = length + 2;
    int height = length;

    for (i = 0; i <= width; i++) { 
         index++;
        if (i == 0 || i < width) {
        formatted[index] = '*';
        } 
        if (i == width) {
        formatted[index] = '\n';
        }
    }
    index++;
    formatted[index] = '*';


    int X_number;
    //Read the data and assign X's vertically
    for (i = 0; i < length; i++) {
        X_number = values[i];
        index++;
            if (X_number > 0) {
                formatted[index] = 'X';
        } else {
           formatted[index] = ' ';
            }
    }

    index++;
    formatted[index] = '*';
    index++;
    formatted[index] = '\n';
    
    //Last border line
    for (i = 0; i <= width; i++) { 
         index++;
        if (i == 0 || i < width) {
        formatted[index] ='*';
        }
    }
    
    index++;
    formatted[index] = '\0';   
    return formatted;
}  ",0
byul423,1696482293,1,"#define CRT_SECURE_NO_WARNINGS 
#include <stdio.h>
#include <stdlib.h>

char Histogram(char* formatted, int* values, int size) {
	int i, j, count = 0;
	int max = values[0];

	for (i = 1; i < size; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}

	for (i = 0; i < size + 2; i++) {
		formatted[count] = '*';
		count++;
	}
	formatted[count] = '\n';
	count++;

	for (i = max; i > 0; i--) {
		formatted[count] = '*';
		count++;

		for (j = 0; j < size; j++) {
			if (values[j] >= i) {
				formatted[count] = 'X';
				count++;
			}
			else {
				formatted[count] = ' ';
				count++;
			}
		}
		formatted[count] = '*';
		count++;
		formatted[count] = '\n';
		count++;
	}

	for (i = 0; i < size + 2; i++) {
		formatted[count] = '*';
		count++;
	}
	formatted[count] = '\0';
}",0
byul423,1696482533,2,"char Histogram(char* formatted, int* values, int size) {
	int i, j, count = 0;
	int max = values[0];

	for (i = 1; i < size; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}

	for (i = 0; i < size + 2; i++) {
		formatted[count] = '*';
		count++;
	}
	formatted[count] = '\n';
	count++;

	for (i = max; i > 0; i--) {
		formatted[count] = '*';
		count++;

		for (j = 0; j < size; j++) {
			if (values[j] >= i) {
				formatted[count] = 'X';
				count++;
			}
			else {
				formatted[count] = ' ';
				count++;
			}
		}
		formatted[count] = '*';
		count++;
		formatted[count] = '\n';
		count++;
	}

	for (i = 0; i < size + 2; i++) {
		formatted[count] = '*';
		count++;
	}
	formatted[count] = '\0';
	return formatted;
}
",0
byul423,1696482641,3,"char* Histogram(char* formatted, int* values, int size) {
	int i, j, count = 0;
	int max = values[0];

	for (i = 1; i < size; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}

	for (i = 0; i < size + 2; i++) {
		formatted[count] = '*';
		count++;
	}
	formatted[count] = '\n';
	count++;

	for (i = max; i > 0; i--) {
		formatted[count] = '*';
		count++;

		for (j = 0; j < size; j++) {
			if (values[j] >= i) {
				formatted[count] = 'X';
				count++;
			}
			else {
				formatted[count] = ' ';
				count++;
			}
		}
		formatted[count] = '*';
		count++;
		formatted[count] = '\n';
		count++;
	}

	for (i = 0; i < size + 2; i++) {
		formatted[count] = '*';
		count++;
	}
	formatted[count] = '\0';
	return formatted;
}
",1
cang688,1696816345,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* graph, int* dataArray, int length) {
    int maxVal = 0;

    // find the maximum value in the data array
    for (int i = 0; i < length; i++) {
        if (dataArray[i] > maxVal) {
            maxVal = dataArray[i];
        }
    }

    // initialize the string representing the graph
    strcpy(graph, """");
    
    //top border
    for (int i = 0; i != length + 2; i++) {
        if (i != length + 1) {
            strcat(graph, ""*"");
        } else {
            strcat(graph, ""*\n"");
        }
    }
    
    // construct the histogram line by line while also creating the * border
    for (int i = maxVal; i > 0; i--) {
        for (int j = 0; j < length; j++) {
            //left side border if necessary
            if (j == 0 ) {
               strcat(graph, ""*""); 
            }
            
            //data points and spacing
            if (dataArray[j] >= i) {
                strcat(graph, ""X"");
            } else {
                strcat(graph, "" "");
            }
            
            //right side border if neccessary 
            if (j == length - 1 ) {
               strcat(graph, ""*""); 
            }
        }
        //goes to next line
        strcat(graph, ""\n"");
    }
    
    //bottom border
    for (int i = 0; i != length + 2; i++) {
            strcat(graph, ""*"");
    }
}",1
cbee072,1696389188,1,"void Histogram(char *formatted, int *values, int length) {
    
    //Creating variables
    int i;
    int j;
    int max = 0;
    formatted[0] = 0;

    
    //Adding the * borders at the top
     for (i = 0; i < length + 2; i++) {
        strcat(formatted, ""*"");
    }
    
    strcat(formatted, ""\n"");
    
    //Calculate the biggest value
    for (i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    
    //ADDING X OR SPACE
    for (i = max; i > 0; i--) {
        strcat(formatted, ""*"");
        
        for (j = 0; j < length; j++) {
        
            if (values[j] >= i) {
                strcat(formatted, ""X"");
            }
            else {
                strcat(formatted, "" "");
            }
        
        }
        
    strcat(formatted, ""*"");
    strcat(formatted, ""\n"");
 
        
    }
    
    
    //Adding the * borders at the top
    for (i = 0; i < length + 2; i++) {
        strcat(formatted, ""*"");
    }
}
",1
cbro223,1696218885,1,"void Histogram(char histogramString[1000], int data[], int length)
{
    char asteriskString[100];
    for (int i = 0; i < length + 2; i++)
    {
        asteriskString[i] = '*';
    }
    asteriskString[length+2] = '\0';
    strcat(histogramString, asteriskString);
    strcat(histogramString, ""\n"");

    
    int topRow;
    int maxNumber = data[0];

    for (int i = 0; i < length; i++)
    {
        // If the current number is greater than the max number
        if (data[i] > maxNumber)
            maxNumber = data[i];
    }
    topRow = maxNumber;

    for (int currentRow = topRow; currentRow > 0; currentRow--)
    {
        char tmpStr[100];
        tmpStr[0] = '*';
        for (int currentCol = 0; currentCol < length; currentCol++)
        {
            if (data[currentCol] >= currentRow)
            {
                tmpStr[currentCol+1] = 'X';
            }
            else
            {
                tmpStr[currentCol+1] = ' ';
            }
        }
        tmpStr[length+1] = '*';
        tmpStr[length+2] = '\n';
        tmpStr[length + 3] = '\0';
        strcat(histogramString, tmpStr);
        
    }
    strcat(histogramString, asteriskString);

}",0
cbro223,1696219248,2,"void Histogram(char histogramString[1000], int data[], int length)
{
    histogramString[0] = '\0';
    char asteriskString[100];
    for (int i = 0; i < length + 2; i++)
    {
        asteriskString[i] = '*';
    }
    asteriskString[length + 2] = '\0';
    strcat(histogramString, asteriskString);
    strcat(histogramString, ""\n"");

    int topRow;
    int maxNumber = data[0];

    for (int i = 0; i < length; i++)
    {
        // If the current number is greater than the max number
        if (data[i] > maxNumber)
            maxNumber = data[i];
    }
    topRow = maxNumber;

    for (int currentRow = topRow; currentRow > 0; currentRow--)
    {
        char tmpStr[100];
        tmpStr[0] = '*';
        for (int currentCol = 0; currentCol < length; currentCol++)
        {
            if (data[currentCol] >= currentRow)
            {
                tmpStr[currentCol + 1] = 'X';
            }
            else
            {
                tmpStr[currentCol + 1] = ' ';
            }
        }
        tmpStr[length + 1] = '*';
        tmpStr[length + 2] = '\n';
        tmpStr[length + 3] = '\0';
        strcat(histogramString, tmpStr);
    }
    strcat(histogramString, asteriskString);
}
",1
ccha663,1696845336,1,"void Histogram(char formatted[], int value[], int length) {
    int collect = 0;
    
    
    for (int j = 0; j < length; j++) {
        if (value[j] > collect) {
            collect = value[j];
        }
    }
    
    int tlength = length + 3;
    int width = collect + 2;

    int index = 0;  

    for (int tl = 0; tl < tlength; tl++) {
        for (int i = 0; i < width; i++) {
          
            if (tl == 0 || tl == tlength - 1 || i == 0 || i == width - 1 || value[i - 1] >= (width - i)) {
                formatted[index++] = '*';
            } else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '\n'; 
    }
    formatted[index] = '\0';  
}",0
cche441,1696738857,1,"void Histogram(char graph[], int data[], int length)
{
    char star[] = ""*"", new_line[] = ""\n"", blank[] = "" "", cross[] = ""X"";
    strcpy(graph,star);
    for (int i = 0; i < length + 1; i++)
    {
        strcat(graph,star);
    }

    int max_value = 0;
    for (int i = 0; i < length; i++)
    {
        if (data[i] > max_value)
        {
            max_value = data[i];
        }
    }

    int temp_max = max_value;
    for (int j = 0; j < max_value; j++)
    {
        strcat(graph,new_line);
        strcat(graph,star);

        for (int k = 0; k < length; k++)
        {
            //printf(""Is %i equal to %i?"",data[k], temp_max);
            if (data[k] == temp_max)
            {
                //printf("" Yes\n"");
                strcat(graph,cross);
                data[k] = data[k] - 1;
            }
            else
            {
                //printf("" No\n"");
                strcat(graph,blank);
            }
        }
        temp_max--;
        strcat(graph,star);
    }

    strcat(graph,new_line);
    for (int i = 0; i < length + 2; i++)
    {
        strcat(graph,star);
    }
    
}",1
cche441,1696743022,2,"// Function that integer data values for a histogram
void Histogram(char graph[], int data[], int length)
{
    // Creates characters that could potientially be copied to the
    // main character array.
    char star[] = ""*"", new_line[] = ""\n"", blank[] = "" "", cross[] = ""X"";
    strcpy(graph,star);

    // Clones the first line of ""*"" characters into inputted character array.
    for (int i = 0; i < length + 1; i++)
    {
        strcat(graph,star);
    }

    // Finds then highest numerical value within given integer array.
    int max_value = 0;
    for (int i = 0; i < length; i++)
    {
        if (data[i] > max_value)
        {
            max_value = data[i];
        }
    }

    // Concatenates a textual representation of the desired graph bars using
    // ""X"" and spacing that are in between 2 ""*"" into given character array.
    int temp_max = max_value;
    for (int j = 0; j < max_value; j++)
    {
        strcat(graph,new_line);
        strcat(graph,star);

        for (int k = 0; k < length; k++)
        {
            if (data[k] == temp_max)
            {
                strcat(graph,cross);
                data[k] = data[k] - 1;
            }
            else
            {
                strcat(graph,blank);
            }
        }
        temp_max--;
        strcat(graph,star);
    }

    // Clones the last line of ""*"" characters into inputted character array.
    strcat(graph,new_line);
    for (int i = 0; i < length + 2; i++)
    {
        strcat(graph,star);
    }
    
}",1
cche873,1696595064,1,"#include <stdio.h>


void Histogram(char* result, int* data, int size) {
    int max = 0;

    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (int i = 0; i < size + 2; i++) {
        result[i] = '*';
    }
    result[size + 2] = '\n';
    result += size + 3;

    for (int row = max; row >= 1; row--) {
        result[0] = '*';
        for (int col = 0; col < size; col++) {
            if (data[col] >= row) {
                result[col + 1] = 'X';
            }
            else {
                result[col + 1] = ' ';
            }
        }
        result[size + 1] = '*';
        result[size + 2] = '\n';
        result += size + 3;
    }

    for (int i = 0; i < size + 2; i++) {
        result[i] = '*';
    }
    result[size + 2] = '\0';
}",1
cdel568,1696222958,1,"void Histogram(char *output, int data[], int length)
{
    int i, j; 
    int max = 0;
    int roation = 1;

    for (i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (i = 0; i <= length + 1; i++) {
        output[i] = '*';
    }

    output[i] = '\n';

    for (i = max; i > 0; i--) {
        output[roation * (length + 3)] = '*';
        for (j = 0; j < length; j++) {
            if (data[j] >= max) {
                output[roation * (length + 3) + j + 1] = 'X';
            } else {
                output[roation * (length + 3) + j + 1] = ' ';
            }
        }
        output[roation * (length + 3) + j + 1] = '*';
        output[roation * (length + 3) + j + 2] = '\n';
        roation++;
        max--;
    }

    for (i = 0; i <= length + 1; i++) {
        output[roation * (length + 3) + i] = '*';
    }
    output[roation * (length + 3) + i] = '\0';
}",1
cdin152,1696760404,1,"void Histogram(char* format, int* data, int size) {
    int max_data = 0;
    char* graph = format;

    // Add a horizontal line of * at the top.
    for (int col = 0; col < (size + 2); col++) {
        *graph = '*';
        graph++;
    }
    *graph = '\n';
    graph++;

    // Calculate the maximum value in the data.
    for (int i = 0; i < size; i++) {
        if (data[i] > max_data) {
            max_data = data[i];
        }
    }

    // Add the vertical line of * and data columns.
    for (int row = max_data; row > 0; row--) {
        *graph = '*';
        graph++;

        for (int col = 0; col < size; col++) {
            if (data[col] >= row) {
                *graph = 'X';
            }
            else {
                *graph = ' ';
            }
            graph++;
        }
        *graph = '*';
        graph++;
        *graph = '\n';
        graph++;
    }

    // Add a horizontal line of * at the bottom. 
    for (int col = 0; col < (size + 2); col++) {
        *graph = '*';
        graph++;
    }
    *graph = '\0';
}",1
cdin152,1696841691,2,"void Histogram(char* format, int* data, int length) {
    int max_data = 0;
    char* graph = format;

    for (int col = 0; col < (length + 2); col++) {
        *graph = '*';
        graph++;
    }
    *graph = '\n';
    graph++;

    for (int i = 0; i < length; i++) {
        if (data[i] > max_data) {
            max_data = data[i];
        }
    }

    for (int row = max_data; row > 0; row--) {
        *graph = '*';
        graph++;

        for (int col = 0; col < length; col++) {
            if (data[col] >= row) {
                *graph = 'X';
            }
            else {
                *graph = ' ';
            }
            graph++;
        }
        *graph = '*';
        graph++;
        *graph = '\n';
        graph++;
    }

    for (int col = 0; col < (length + 2); col++) {
        *graph = '*';
        graph++;
    }
    *graph = '\0';
}",1
cdin268,1696474755,1,"void Histogram(char *formatted, int *values, int length) {
    
    int i;
    int j;
    int max = values[0];
    int n= 0;
    int l = 1;
    
    for (i = 0; i< length-1; i++) {
        if (values[i+1] > values[i]) {
            max = values[i+1];
        }
    } 

    
    for (j=0; j< max+2; j++) {
        for (i = 0; i< (length +3); i++) {

            formatted[n] = '*';
            n = n+1;

        }
        
        
    }    
    for (i=0; i<=(max+2)*(length+3); i++) {
        
        if (i == (max+2)*(length+3)) {
            formatted[i] = '\0';
        }else if (i == l*(length+3)) {
            formatted[i] = '\n';
            l=l+1;
        }
    }

    int k;
    
    for (k = 0; k <max; k++) {
        for (i = 0; i<length; i++) {
            if (values[i] == max-k) {

                formatted[i+(length+5)+(length+3)*(k)] = 'X';
            } else {
                formatted[i+(length+5)+(length+3)*k] = ' ';
            }
        }
    }
    
    for (i = 1; i <max; i++) {
        for (j = 0; j<length; j++) {
            if (formatted[j+(length+5)+(length+3)*(i-1)] == 'X') { 
                formatted[j+(length+5)+(length+3)*(i)] = 'X';
            }
        }
    } 
}",0
cdin268,1696475067,2,"void Histogram(char *formatted, int *values, int length) {
    
    int i;
    int j;
    int max = values[0];
    int n= 0;
    int l = 1;
    
    for (i = 0; i< length-1; i++) {
        if (values[i+1] > values[i]) {
            max = values[i+1];
        }
    } 
    
        for (i = 0; i< (length +2); i++) {

            formatted[i] = '*';
            n = n+1;

        }
    
    for (j=0; j< max+2; j++) {
        for (i = 1; i< (length +3); i++) {

            formatted[n] = '*';
            n = n+1;
        }
    }    
    
    for (i=0; i<(max+2)*(length+3); i++) {
        
        if (i == (max+2)*(length+3)-1) {
            formatted[i] = '\0';
        }else if (i == (length+2)) {
            formatted[i] = '\n';
            l=l+1;
        }else if (i == l*(length+3)-1) {
            formatted[i] = '\n';
            l=l+1;
        }
    }

    int k;
    
    for (k = 0; k <max; k++) {
        for (i = 0; i<length; i++) {
            if (values[i] == max-k) {

                formatted[i+(length+4)+(length+3)*(k)] = 'X';
            } else {
                formatted[i+(length+4)+(length+3)*k] = ' ';
            }
        }
    }

    for (i = 1; i <max; i++) {
        for (j = 0; j<length; j++) {
            if (formatted[j+(length+5)+(length+3)*(i-1)] == 'X') { 
                formatted[j+(length+5)+(length+3)*(i)] = 'X';
            }
        }
    } 

}",0
cdin268,1696475960,3,"void Histogram(char *formatted, int *values, int length) {
    
    int i;
    int j;
    int max = values[0];
    int n= 0;
    int l = 1;
    
    for (i = 0; i< length-1; i++) {
        if (values[i+1] > values[i]) {
            max = values[i+1];
        }
    } 
    
        for (i = 0; i< (length +2); i++) {

            formatted[i] = '*';
            n = n+1;

        }
    
    for (j=0; j< max+2; j++) {
        for (i = 0; i< (length +3); i++) {

            formatted[n] = '*';
            n = n+1;
        }
    }    
    
    for (i=0; i<(max+2)*(length+3); i++) {
        
        if (i == (max+2)*(length+3)-1) {
            formatted[i] = '\0';
        }else if (i == (length+2)) {
            formatted[i] = '\n';
            l=l+1;
        }else if (i == l*(length+3)-1) {
            formatted[i] = '\n';
            l=l+1;
        }
    }

    int k;
    
    for (k = 0; k <max; k++) {
        for (i = 0; i<length; i++) {
            if (values[i] == max-k) {

                formatted[i+(length+4)+(length+3)*(k)] = 'X';
            } else {
                formatted[i+(length+4)+(length+3)*k] = ' ';
            }
        }
    }

    for (i = 1; i <max; i++) {
        for (j = 0; j<length; j++) {
            if (formatted[j+(length+4)+(length+3)*(i-1)] == 'X') { 
                formatted[j+(length+4)+(length+3)*(i)] = 'X';
            }
        }
    } 

}",0
cdin268,1696476370,4,"void Histogram(char *formatted, int *values, int length) {
    
    int i;
    int j;
    int max = values[0];
    int n= 0;
    int l = 1;
    
    for (i = 0; i< length-1; i++) {
        if (values[i+1] > max) {
            max = values[i+1];
           
        }
    } 
    
    for (i = 0; i< (length +2); i++) {

        formatted[i] = '*';
        n = n+1;

    }
    
    for (j=0; j< max+2; j++) {
        for (i = 0; i< (length +3); i++) {

            formatted[n] = '*';
            n = n+1;
        }
    }    
    
    for (i=0; i<(max+2)*(length+3); i++) {
        
        if (i == (max+2)*(length+3)-1) {
            formatted[i] = '\0';
        }else if (i == (length+2)) {
            formatted[i] = '\n';
            l=l+1;
        }else if (i == l*(length+3)-1) {
            formatted[i] = '\n';
            l=l+1;
        }
    }

    int k;
    
    for (k = 0; k <max; k++) {
        for (i = 0; i<length; i++) {
            if (values[i] == max-k) {

                formatted[i+(length+4)+(length+3)*(k)] = 'X';
            } else {
                formatted[i+(length+4)+(length+3)*k] = ' ';
            }
        }
    }

    for (i = 1; i <max; i++) {
        for (j = 0; j<length; j++) {
            if (formatted[j+(length+4)+(length+3)*(i-1)] == 'X') { 
                formatted[j+(length+4)+(length+3)*(i)] = 'X';
            }
        }
    }

}",1
cdsi208,1696743010,1,"void Histogram(char *graph, int values[], int length) {
    
    graph[0] = '\0';
    int maxValue = 0;
    for (int i = 0; i < length; i++) {
         if (values[i] > maxValue) {
    maxValue = values[i];
     }
    }
    int width = length + 2;

    for (int i = 0; i < width; i++) {
        strcat(graph, ""*"");
    }
    strcat(graph, ""\n"");
    
    for (int i = maxValue; i >= 1; i--) {
        strcat(graph, ""*"");
    for (int j = 1; j <= length; j++) {
        if (values[j - 1] >= i) {
           strcat(graph, ""X"");
            } else {
                   strcat(graph, "" "");
            }
    }
    strcat(graph, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
    strcat(graph, ""*"");
    }
   
}",1
cgaz516,1696739630,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int* values, int length)
{
	char buns[100];
	int i, j;
	char line[100];

	// make the header and footer of the printed ""graph"",
	// like burger buns maybe
	for (i=0; i < length + 2; i++) {
		buns[i] = '*';
	}
	buns[i] = '\0';

	// Place the top bun on the graph
	formatted[0] = '\0';
	strcat(formatted, buns);
	strcat(formatted, ""\n"");

	// Find the max value so you can determine 
	// the inside height of the graph
	int max = values[0];
	for (i = 1; i < length; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}

	// Invert the values so it concatenates correctly
	for (int k = 0; k < length; k++) {
		values[k] = values[k] - max;
	}

	// Make the loop for finding each number and concatenating 
	// each variable into the formatted thing 
	for (i = 0; i < max; i++) {

		// Place an X in a new array at each index where there is not a 0
		line[0] = '*';
		for (j = 1; j < length + 1; j++) {
			if (values[j - 1] >= 0) {
				line[j] = 'X';
			}
			else {
				line[j] = ' ';
			}
		}
		line[j] = '*', line[j + 1] = '\0';

		// Concatenate this to the formatted string
		strcat(formatted, line);
		strcat(formatted, ""\n\0"");

		// -1 from the values each time 
		for (j = 0; j < length; j++) {
			if (values[j] != 0) {
				values[j] = values[j] + 1;
			}
		}
	}

	// Place the bottom bun lol
	strcat(formatted, buns);
}",1
civa625,1696806728,1,"void Histogram(char *format, int values[], int plots)
{
    int height, width;
    int i, j;
    int largest = values[0];
    
    for (i = 0; i < plots; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
    
    height = largest + 2;
    width = plots + 2;
    int origin = 0;
    
    for (i = 0; i < width; i++) {
        format[origin++] = '*';
    }
    format[origin++] = '\n';

    for (i = largest; i > 0; i--) {
        format[origin++] = '*';
        for (j = 0; j < plots; j++) {
            if (values[j] >= i) {
                format[origin++] = 'X';
            }
            else {
                format[origin++] = ' ';
            }
        }
        format[origin++] = '*';
        format[origin++] = '\n';
    } 
    
    for (i = 0; i < width; i++) {
        format[origin++] = '*';
    }
    
    format[origin] = '\0';
}",0
civa625,1696806765,2,"void Histogram(char *format, int values[], int plots)
{
    int width;
    int i, j;
    int largest = values[0];
    
    for (i = 0; i < plots; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
    
    width = plots + 2;
    int origin = 0;
    
    for (i = 0; i < width; i++) {
        format[origin++] = '*';
    }
    format[origin++] = '\n';

    for (i = largest; i > 0; i--) {
        format[origin++] = '*';
        for (j = 0; j < plots; j++) {
            if (values[j] >= i) {
                format[origin++] = 'X';
            }
            else {
                format[origin++] = ' ';
            }
        }
        format[origin++] = '*';
        format[origin++] = '\n';
    } 
    
    for (i = 0; i < width; i++) {
        format[origin++] = '*';
    }
    
    format[origin] = '\0';
}",1
clee482,1696843454,1,"void Histogram(char *formatted, int *values, int column) 
{
    int maxnumber = 0;
    int i = 0;
    for (; i < column; i++) {     
        
       if(values[i] > maxnumber)    
       {
           maxnumber = values[i];  
       }
    }
    
    int collen = column+1;
    *formatted = '\0';
    for(int top = 0; top < collen; top++)
    {
        strcat(formatted, ""*"");
        if (top == column)
        {
            strcat(formatted, ""*\n"");
        }
    }
 
    int a = maxnumber;
    for(; a>0; a--)
    {
        strcat(formatted, ""*"");
        
        for(int j = 0; j < column; j++)
        {
            if (values[j] > a || values[j] == a)
            {
                strcat(formatted, ""X"");
            }
            else
            {
                strcat(formatted, "" "");
            }
            
        }
        strcat(formatted, ""*\n"");
    }
    
    int bot = collen;
    for (; bot >=0; bot--)
    {
        strcat(formatted, ""*"");
    }
    
}",1
clob269,1696312064,1,"void Histogram(char* s, int* vals, int len) {

    char ans[1000] = ""*"";
    

    int top;

    for (int i = 1; i <= len; i++) {
        ans[i] = '*';
        top = i;
    }
    top++;
    ans[top] = '*';
    top++;
    ans[top] = '*';
    ans[top] = '\n';
    int index = top;

    //find max

    int max = vals[0];
    for (int j = 0; j < len; j++) {
        if (max < vals[j]) {
            max = vals[j];

        }

    }

    bool exer[100];


    for (int i = max; i >= 1; i--) {
        for (int j = 0; j < len; j++) {
            if (vals[j] >= i) {
                exer[j] = true;
            }
        }


        index++;
        ans[index] = '*';



        for (int j = 0; j < len; j++) {
            index++;
            if (exer[j] == true) {
                ans[index] = 'X';
            }
            else {
                ans[index] = ' ';

            }
        }
        index++;
        ans[index] = '*';
        index++;
        ans[index] = '\n';
    }

    index++;
    ans[index] = '*';
    index++;

    for (int i = 1; i <= len; i++) {
        ans[index] = '*';
        index++;
    }

    ans[index] = '*';



    int remove = 0;

    while ((int)s[remove] == 52) {
        s[remove] = '\0';
        remove++;
    }

    int last = 0;

    while (ans[last] != '\0') {
        s[last] = ans[last];
        last++;
    }

  
   while ((int)s[last] != '\0') {
        s[last] = '\0';
        last++;
    }
}",0
clob269,1696313678,2,"void Histogram(char* s, int* vals, int len) {

    char ans[1000] = ""*"";
    

    int top;

    for (int i = 1; i <= len; i++) {
        ans[i] = '*';
        top = i;
    }
    top++;
    ans[top] = '*';
    top++;
    //ans[top] = '*';
    //top++;
    ans[top] = '\n';
    int index = top;

    //find max

    int max = vals[0];
    for (int j = 0; j < len; j++) {
        if (max < vals[j]) {
            max = vals[j];

        }

    }

    int exer[100];


    for (int i = max; i >= 1; i--) {
        for (int j = 0; j < len; j++) {
            if (vals[j] >= i) {
                exer[j] = 1;
            }
        }


        index++;
        ans[index] = '*';



        for (int j = 0; j < len; j++) {
            index++;
            if (exer[j] == 1) {
                ans[index] = 'X';
            }
            else {
                ans[index] = ' ';

            }
        }
        index++;
        ans[index] = '*';
        index++;
        ans[index] = '\n';
    }

    index++;
    ans[index] = '*';
    index++;

    for (int i = 1; i <= len; i++) {
        ans[index] = '*';
        index++;
    }

    ans[index] = '*';



    int remove = 0;

    while ((int)s[remove] == 52) {
        s[remove] = '\0';
        remove++;
    }

    int last = 0;

    while (ans[last] != '\0') {
        s[last] = ans[last];
        last++;
    }

  
   while ((int)s[last] != '\0') {
        s[last] = '\0';
        last++;
    }
}",0
clob269,1696318683,3,"void Histogram(char* s, int* vals, int len) {


    int remove = 0;

    while (s[remove] != '\0') {
        s[remove] = '\0';
        remove++;
    }


    //find max
    int max = vals[0];
    for (int j = 0; j < len; j++) {
        if (max < vals[j]) {
            max = vals[j];
        }

    }


    int srow = len + 3;
    for (int i = 0; i <= max + 1; i++) {
        int lefpos = srow * i;
        int rigpos = lefpos + len + 1;
        int ender;
        if (i == 0) {
            ender = rigpos + 1;
        }
        else {
            ender = lefpos - 1;
        }
        s[lefpos] = '*';
        s[rigpos] = '*';
        s[ender] = '\n';
    }
    int flopos = 0;
    for (int i = 1; i <= len; i++) {
        int toppos = i;
        flopos = (srow * (max + 1)) + i;

        s[toppos] = '*';
        s[flopos] = '*';
    }
    flopos++;

    for (int i = 0; i < len; i++) {
        int buffer = i + 1;
        int start = max;
        int pos;
        for (int j = 0; j <= vals[i] - 1; j++) {
            pos = ((max-j) * srow) + buffer;
            s[pos] = 'X';
        }

    }

    int last = flopos + 1;

    for (int i = 0; i < last; i++) {
        if ((s[i] != '*') && (s[i] != 'X') && (s[i] != '\n')) {
            s[i] = ' ';
        }
    }


    while (last != 1000) {
        last++;
        s[last] = '\0';
        

    }

}
",0
clob269,1696318768,4,"void Histogram(char* s, int* vals, int len) {


    int remove = 0;

    while (s[remove] != '\0') {
        s[remove] = '\0';
        remove++;
    }


    //find max
    int max = vals[0];
    for (int j = 0; j < len; j++) {
        if (max < vals[j]) {
            max = vals[j];
        }

    }


    int srow = len + 3;
    for (int i = 0; i <= max + 1; i++) {
        int lefpos = srow * i;
        int rigpos = lefpos + len + 1;
        int ender;
        if (i == 0) {
            ender = rigpos + 1;
        }
        else {
            ender = lefpos - 1;
        }
        s[lefpos] = '*';
        s[rigpos] = '*';
        s[ender] = '\n';
    }
    int flopos = 0;
    for (int i = 1; i <= len; i++) {
        int toppos = i;
        flopos = (srow * (max + 1)) + i;

        s[toppos] = '*';
        s[flopos] = '*';
    }
    flopos++;

    for (int i = 0; i < len; i++) {
        int buffer = i + 1;
        int pos;
        for (int j = 0; j <= vals[i] - 1; j++) {
            pos = ((max-j) * srow) + buffer;
            s[pos] = 'X';
        }

    }

    int last = flopos + 1;

    for (int i = 0; i < last; i++) {
        if ((s[i] != '*') && (s[i] != 'X') && (s[i] != '\n')) {
            s[i] = ' ';
        }
    }


    while (last != 1000) {
        last++;
        s[last] = '\0';
        

    }

}",0
clob269,1696481246,5,"
void Histogram(char* s, int* vals, int len) {

    //clear?
    int count = 0;
    while (count != 103) {
        s[count] = '\0';
        count++;
    }


    /*
    //clear the string
    int remove = 0;
    while ((int)s[remove] != '\0') {
        s[remove] = '\0';
        remove++;
    }
    */

    //make top border
    s[0] = '*';
    int top;

    for (int i = 1; i <= len; i++) {
        s[i] = '*';
        top = i;
    }
    top++;
    s[top] = '*';
    top++;
    s[top] = '*';
    s[top] = '\n';
    int index = top;

    //find max value in the integer array
    int max = vals[0];
    for (int j = 0; j < len; j++) {
        if (max < vals[j]) {
            max = vals[j];

        }

    }


    //boolean values for if there should be an X printed in this row
    int exer[100] = { 0};

    //assign correct positions an 'X'
    for (int i = max; i >= 1; i--) {
        for (int j = 0; j < len; j++) {
            if (vals[j] >= i) {
                exer[j] = 1;
            }
        }

        index++;
        s[index] = '*';

        for (int j = 0; j < len; j++) {
            index++;
            if (exer[j] == 1) {
                s[index] = 'X';
            }
            else {
                s[index] = ' ';

            }
        }
        index++;
        s[index] = '*';
        index++;
        s[index] = '\n';
    }

    //make bottom border
    index++;
    s[index] = '*';
    index++;

    for (int i = 1; i <= len; i++) {
        s[index] = '*';
        index++;
    }

    s[index] = '*';
    index++;

}
",0
clob269,1696481433,6,"
void Histogram(char* s, int* vals, int len) {

    //clear?
    int count = 0;
    while (count != 1000) {
        s[count] = '\0';
        count++;
    }


    /*
    //clear the string
    int remove = 0;
    while ((int)s[remove] != '\0') {
        s[remove] = '\0';
        remove++;
    }
    */

    //make top border
    s[0] = '*';
    int top;

    for (int i = 1; i <= len; i++) {
        s[i] = '*';
        top = i;
    }
    top++;
    s[top] = '*';
    top++;
    s[top] = '*';
    s[top] = '\n';
    int index = top;

    //find max value in the integer array
    int max = vals[0];
    for (int j = 0; j < len; j++) {
        if (max < vals[j]) {
            max = vals[j];

        }

    }


    //boolean values for if there should be an X printed in this row
    int exer[100] = { 0};

    //assign correct positions an 'X'
    for (int i = max; i >= 1; i--) {
        for (int j = 0; j < len; j++) {
            if (vals[j] >= i) {
                exer[j] = 1;
            }
        }

        index++;
        s[index] = '*';

        for (int j = 0; j < len; j++) {
            index++;
            if (exer[j] == 1) {
                s[index] = 'X';
            }
            else {
                s[index] = ' ';

            }
        }
        index++;
        s[index] = '*';
        index++;
        s[index] = '\n';
    }

    //make bottom border
    index++;
    s[index] = '*';
    index++;

    for (int i = 1; i <= len; i++) {
        s[index] = '*';
        index++;
    }

    s[index] = '*';
    index++;

}
",1
cmia215,1696730640,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>


int Histogram(char* formatted, int values[], int number) {
	int max_num = 0;
	formatted[0] = '\0';
	//char starline[] = ""*"";
	for (int i = 0; i < number+2; i++)
	{
		strcat(formatted, ""*"");
	}
	strcat(formatted, ""\n"");
	//printf(""%s"", starline);
	//strcat(formatted, ""\n"");
	for (int j = 0; j < number - 1; j++)
	{
		if (max_num < values[j])
		{
			max_num = values[j];
		}
	}
	//printf(""%i"", max_num);
	//char histogram[1000];
	for (int k = 0; k < max_num; k++)
	{
		strcat(formatted, ""*"");
		for (int i = 0; i < number; i++)
		{
			
			if (values[i] < max_num-k)
			{
				strcat(formatted, "" "");
			}
			else {
				strcat(formatted, ""X"");
			}
		}
		strcat(formatted, ""*\n"");
	}

	for (int i = 0; i < number + 2; i++)
	{
		strcat(formatted, ""*"");
	}
	//printf(""%s"", formatted);
	return 0;
}",0
cmia215,1696730841,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>


int Histogram(char* formatted, int values[], int number) {
	int max_num = 0;
	formatted[0] = '\0';
	//char starline[] = ""*"";
	for (int i = 0; i < number+2; i++)
	{
		strcat(formatted, ""*"");
	}
	strcat(formatted, ""\n"");
	//printf(""%s"", starline);
	//strcat(formatted, ""\n"");
	for (int j = 0; j < number; j++)
	{
		if (max_num < values[j])
		{
			max_num = values[j];
		}
	}
	//printf(""%i"", max_num);
	//char histogram[1000];
	for (int k = 0; k < max_num; k++)
	{
		strcat(formatted, ""*"");
		for (int i = 0; i < number; i++)
		{
			
			if (values[i] < max_num-k)
			{
				strcat(formatted, "" "");
			}
			else {
				strcat(formatted, ""X"");
			}
		}
		strcat(formatted, ""*\n"");
	}

	for (int i = 0; i < number + 2; i++)
	{
		strcat(formatted, ""*"");
	}
	//printf(""%s"", formatted);
	return 0;
}",1
cmot464,1696233025,1,"void Histogram(char *stringPlot, int *values, int numElements){

    // find the largest value element
    // create the border + 2 in both dimensions remember
    // plot for each x axis increment
    // boom!

    for(int i = 0; i < 1001; i++){
        stringPlot[i] = '\0';
    }
    

    // find the highest value
    int highestVal = 0;
    for(int i = 0; i < numElements; i++){
        if(values[i] > highestVal){
            highestVal = values[i];
        }
    }

    // create border
    // redefine for ease
    int width = numElements;
    int height = highestVal;

    for(int i = 0; i < (((width+3)*(height+2))-1); i++){ 
        if( (0 <= i) && (i <= (width+1)) ){ // top line
            stringPlot[i] = '*';
        }

        else if( i == width + 2 ){ // first \n
            stringPlot[i] = '\n';
        }

        else if( (i % (width + 3)) == 0 ){ // left side line
            stringPlot[i] = '*';
        }

        else if( ((i - (width + 1)) % (width + 3)) == 0 ){ // right hand side line
            stringPlot[i] = '*';
        }

        else if( ((i - (width + 2)) % (width + 3)) == 0 ){ // \n s 
            stringPlot[i] = '\n';
        }

        else if((i <= (((height + 2) * (width + 3)) - 2)) && (i >= ((((height + 2) * (width + 3)) - 1) - (width + 2)))){ // bottom line
            stringPlot[i] = '*';
        } 

        else{
            stringPlot[i] = ' ';
        }
    }

    // plot the points now
    for(int i = 0; i < width; i++){ // go through the list of values
        if(values[i] > 0){
            
            int bottomGrid = ((width + 3)*(height)) + (i+1);
            int maxValofPoint = ((width + 3)*(height + 1 - values[i])) + (i+1);

            for(int j = bottomGrid; j >= maxValofPoint; j -= (width + 3)){
                stringPlot[j] = 'X';
            }

        }
    }
}",1
cnie825,1696806695,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int* data, int size) {
    int max = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int row, col;
    for (row = max; row >= 0; --row) {
        for (col = 0; col < size; ++col) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""\n"");
    }

    for (col = 0; col < size + 2; ++col) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
}",0
coli772,1696307998,1,"void Histogram(char *formatted, int *values, int length) {

    int position = 0;    

    // Add top.
    while (position < length + 2) {
        formatted[position] = '*';
        position++;
    }
    formatted[position] = '\n';
    position++;

    // Find maximum value in values array.
    int max = 0;
    for (int k = 0; k < length; k++) {
        if (values[k] > max) {
            max = values[k];
        }
    }

    // Do histogram shit.
    for (int i = 0; i < max; i++) {
        formatted[position] = '*';
        position++;
        for (int j = 0; j < length; j++) {
            if (values[j] == max) {
                formatted[position] = 'X';
            } else {
                formatted[position] = ' ';
                values[j]++;
            }
            position++;
        }
        formatted[position] = '*';
        position++;
        formatted[position] = '\n';
        position++;
    }

    // Add bottom.
    int temp_length = length + position;

    while (position < temp_length + 2) {
        formatted[position] = '*';
        position++;
    }

    formatted[position] = '\0';
}",1
couy656,1696327204,1,"void Histogram(char* result, int* data, int size) {
    int max = data[0];
    for (int i = 1; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    char histogram[max][size];
    for (int i = 0; i < max; i++) {
        for (int j = 0; j < size; j++) {
            if (data[j] >= max - i) {
                histogram[i][j] = 'X';
            } else {
                histogram[i][j] = ' ';
            }
        }
    }

    sprintf(result, """");
    for (int i = 0; i < max + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

    for (int i = 0; i < max; i++) {
        strcat(result, ""*"");
        for (int j = 0; j < size; j++) {
            strcat(result, "" "");
            strcat(result, &histogram[i][j]);
        }
        strcat(result, "" *\n"");
    }

    for (int i = 0; i < max + 2; i++) {
        strcat(result, ""*"");
    }
}",0
couy656,1696327284,2,"void Histogram(char* result, int* data, int size) {
    int max = data[0];
    for (int i = 1; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    char histogram[max][size];
    for (int i = 0; i < max; i++) {
        for (int j = 0; j < size; j++) {
            if (data[j] >= max - i) {
                histogram[i][j] = 'X';
            } else {
                histogram[i][j] = ' ';
            }
        }
    }

    result[0] = '\0';

    for (int i = 0; i < max; i++) {
        strcat(result, ""*"");
        for (int j = 0; j < size; j++) {
            strcat(result, "" "");
            strcat(result, &histogram[i][j]);
        }
        strcat(result, "" *\n"");
    }

    for (int i = 0; i < max + 2; i++) {
        strcat(result, ""*"");
    }
}",0
couy656,1696327315,3,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int* data, int size) {
    int max = data[0];
    for (int i = 1; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    char histogram[max][size];
    for (int i = 0; i < max; i++) {
        for (int j = 0; j < size; j++) {
            if (data[j] >= max - i) {
                histogram[i][j] = 'X';
            } else {
                histogram[i][j] = ' ';
            }
        }
    }

    result[0] = '\0';  // Clear the result string

    for (int i = 0; i < max + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

    for (int i = 0; i < max; i++) {
        strcat(result, ""*"");
        for (int j = 0; j < size; j++) {
            strcat(result, "" "");
            strcat(result, &histogram[i][j]);
        }
        strcat(result, "" *\n"");
    }

    for (int i = 0; i < max + 2; i++) {
        strcat(result, ""*"");
    }
}
",0
cset571,1696304571,1,"void Histogram(char* formatted, int* values, int compare)
{

    int i = 0, j = 0, count = 0, max = 0;
    formatted[0] = '\0';
    for (i = 0; i < (compare + 2); i++)
    {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""\n"");


    for (i = 0; i < compare; i++)
    {
        if (values[i] > max)
        {
            max = values[i];
        }
    }

    for (i = 0; i < max; i++)
    {
        strcat(formatted, ""*"");
        for (j = 0; j < (compare); j++)
        {
            if (values[j] >= (max - i))
            {
                strcat(formatted, ""X"");
                continue;
            }
            else
            {
                strcat(formatted, "" "");
                continue;
            }
        }
        strcat(formatted, ""*\n"");
    }

    strcat(formatted, ""*"");
    for (i = 0; i < (compare + 1); i++)
    {
        strcat(formatted, ""*"");
    }

}",0
cset571,1696304821,2,"void Histogram(char* formatted, int* values, int compare)
{

    int i = 0, j = 0, max = 0;
    formatted[0] = '\0';
    for (i = 0; i < (compare + 2); i++)
    {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""\n"");


    for (i = 0; i < compare; i++)
    {
        if (values[i] > max)
        {
            max = values[i];
        }
    }

    for (i = 0; i < max; i++)
    {
        strcat(formatted, ""*"");
        for (j = 0; j < (compare); j++)
        {
            if (values[j] >= (max - i))
            {
                strcat(formatted, ""X"");
                continue;
            }
            else
            {
                strcat(formatted, "" "");
                continue;
            }
        }
        strcat(formatted, ""*\n"");
    }

    strcat(formatted, ""*"");
    for (i = 0; i < (compare + 1); i++)
    {
        strcat(formatted, ""*"");
    }

}",1
cste189,1696750562,1,"#include <stdio.h>

void Histogram(char formatted[], int values[], int length)
{
	int i, j, count = 0, max, newMax;

	// Find max value
	max = values[0];
	for (i = 1; i < length; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}

	// Top line
	for (i = 0; i < length + 2; i++) {
		formatted[i] = '*';
		count++;
	}
	formatted[count] = '\n';
	count++;

	// Main body
	//Loop through each row
	for (i = 0; i < max; i++) {

		formatted[count] = '*';
		count++;

		newMax = max - i;

		for (j = 0; j < length; j++) {
			// If the value is a max then mark, otherwise add a space
			if (values[j] < newMax) {
				formatted[count] = ' ';
				count++;
			}
			else {
				formatted[count] = 'X';
				count++;
			}
		}
		formatted[count] = '*';
		count++;
		formatted[count] = '\n';
		count++;
	}

	// Bottom line
	for (i = 0; i < length + 2; i++) {
		formatted[count + i] = '*';
	}
	count++;
	formatted[count + (length + 1)] = '\0';
}",1
cwei506,1696717186,1,"void Histogram(char* formatted, int* values, int num) {
	int i, j;
	int border = num + 2;
	int max_height = values[0];


	// getting the maximum height
	for (i = 0; i < num; i++) {
		if (values[i] > max_height) {
			max_height = values[i];
		}
	}

	formatted[0] = '\0';

	for (i = 0; i < border; i++) {
		strcat(formatted, ""*"");
	}
	strcat(formatted, ""\n"");

	for (i = max_height; i > 0; i--) {
		strcat(formatted, ""*"");
		for (j = 0; j < num; j++) {
			if (values[j] >= i) {
				strcat(formatted, ""X"");
			}
			else {
				strcat(formatted, "" "");
			}

		}
		strcat(formatted, ""*\n"");
	}

	for (i = 0; i < border; i++) {
		strcat(formatted, ""*"");
		if (i == border - 1) {
			strcat(formatted, ""\0"");
		}
	}



}",1
cwu200,1696763771,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, int *data, int numel) {
    int maxval = 0;
    for (int i = 0; i < numel; i++) {
        if (data[i] > maxval) {
            maxval = data[i];
        }
    }

    int width = numel + 2;  // Width is based on the number of elements
    int height = maxval + 2; // Height is based on the maximum value + 1 for the bottom line
    int length = width * height + height; // Include space for '\n'
    int index = 0;

    for (int i = height - 1; i >= 0; i--) {
        for (int j = 0; j < width; j++) {
            if (i == height - 1 || i == 0 || j == 0 || j == width - 1) {
                output[index++] = '*'; // Add border '*' on the sides and bottom
            } else {
                int datai = j - 1;
                if (data[datai] >= i) {
                    output[index++] = 'X';
                } else {
                    output[index++] = ' ';
                }
            }
        }
        output[index++] = '\n'; // Newline at the end of each row
    }
    output[index] = '\0'; // Null-terminate the string
}",0
cwu200,1696763955,2,"#include <string.h>

void Histogram(char *output, int *data, int numel) {
    int maxval = 0;
    for (int i = 0; i < numel; i++) {
        if (data[i] > maxval) {
            maxval = data[i];
        }
    }

    int width = numel + 2; 
    int height = maxval + 2; 
    int index = 0;

    for (int i = height - 1; i >= 0; i--) {
        for (int j = 0; j < width; j++) {
            if (i == height - 1 || i == 0 || j == 0 || j == width - 1) {
                output[index++] = '*';
            } else {
                int datai = j - 1;
                if (data[datai] >= i) {
                    output[index++] = 'X';
                } else {
                    output[index++] = ' ';
                }
            }
        }
        if (i > 0) {
            output[index++] = '\n';
        } else {
            output[index] = '\0';
        }
    }
}",1
cyan312,1696757178,1,"void Histogram(char* result, int* dataArray, int length) {
    int highestValue = 0;
    for (int i = 0; i < length; i++) {
        if (dataArray[i] > highestValue) {
            highestValue = dataArray[i];
        }
    }

    int borderLength = length + 2;

    for (int j = 0; j < borderLength; j++) {
        sprintf(result + strlen(result), ""*"");
    }
    sprintf(result + strlen(result), ""\n"");

    for (int i = highestValue; i > 0; i--) {
        sprintf(result + strlen(result), ""*""); 

        for (int j = 0; j < length; j++) {
            if (dataArray[j] >= i) {
                sprintf(result + strlen(result), ""X"");
            }
            else {
                sprintf(result + strlen(result), "" "");
            }
        }

        sprintf(result + strlen(result), ""*\n"");
    }

    for (int j = 0; j < borderLength; j++) {
        sprintf(result + strlen(result), ""*"");
    }
    sprintf(result + strlen(result), ""\n"");
}",0
cyan312,1696757791,2,"void Histogram(char* result, int* dataArray, int length) {
    result[0] = '\0';
    int highestValue = 0;
    for (int i = 0; i < length; i++) {
        if (dataArray[i] > highestValue) {
            highestValue = dataArray[i];
        }
    }

    int borderLength = length + 2;

    for (int j = 0; j < borderLength; j++) {
        sprintf(result + strlen(result), ""*"");
    }
    sprintf(result + strlen(result), ""\n"");

    for (int i = highestValue; i > 0; i--) {
        sprintf(result + strlen(result), ""*""); 

        for (int j = 0; j < length; j++) {
            if (dataArray[j] >= i) {
                sprintf(result + strlen(result), ""X"");
            }
            else {
                sprintf(result + strlen(result), "" "");
            }
        }
            
        sprintf(result + strlen(result), ""*\n"");
    }

    for (int j = 0; j < borderLength; j++) {
        sprintf(result + strlen(result), ""*"");
    }
    sprintf(result + strlen(result), ""\n"");
}",0
cyan312,1696758069,3,"void Histogram(char* result, int* dataArray, int length) {
    result[0] = '\0';
    int highestValue = 0;
    for (int i = 0; i < length; i++) {
        if (dataArray[i] > highestValue) {
            highestValue = dataArray[i];
        }
    }

    int borderLength = length + 2;

    for (int j = 0; j < borderLength; j++) {
        sprintf(result + strlen(result), ""*"");
    }
    sprintf(result + strlen(result), ""\n"");

    for (int i = highestValue; i > 0; i--) {
        sprintf(result + strlen(result), ""*""); 

        for (int j = 0; j < length; j++) {
            if (dataArray[j] >= i) {
                sprintf(result + strlen(result), ""X"");
            }
            else {
                sprintf(result + strlen(result), "" "");
            }
        }
            
        sprintf(result + strlen(result), ""*\n"");
    }

    for (int j = 0; j < borderLength; j++) {
        sprintf(result + strlen(result), ""*"");
    }
}",1
dbar153,1696371367,1,"void Histogram(char* string, int values[], int length) {
	for (int i = 0; i < length+2; i++) {
		string[i] = 42;
		if (i == length+1) {
			string[i+1] = 0;
			int count = i + 2;
		}
	}
	int i;
	int max = 0;
	for (i = 0; i < length; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}
	char string1[1000] = """";
	int j;

	for (j = max; j > 0; j--) {
		for (i = 0; i < length; i++) {
			if (values[i] >= j) {
				string1[i] = 88;
			}
			else {
				string1[i] = 32;
			}
			if (i == length-1) {
				string1[i+1] = 42;
				string = strcat(string, ""\n"");
				string = strcat(string, ""*"");
				string = strcat(string, string1);
			}
		}
	}
	char string2[1000] = """";
	for (int i = 0; i < length+2; i++) {
		string2[i] = 42;
		if (i == length+1) {
			string2[i + 1] = 0;
			int count = i + 2;
			string = strcat(string, ""\n"");
			string = strcat(string, string2);
		}
	}
}",0
dbar153,1696371532,2,"void Histogram(char* string, int values[], int length) {
	for (int i = 0; i < length+2; i++) {
		string[i] = 42;
		if (i == length+1) {
			string[i+1] = 0;
		}
	}
	int i;
	int max = 0;
	for (i = 0; i < length; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}
	char string1[1000] = """";
	int j;

	for (j = max; j > 0; j--) {
		for (i = 0; i < length; i++) {
			if (values[i] >= j) {
				string1[i] = 88;
			}
			else {
				string1[i] = 32;
			}
			if (i == length-1) {
				string1[i+1] = 42;
				string = strcat(string, ""\n"");
				string = strcat(string, ""*"");
				string = strcat(string, string1);
			}
		}
	}
	char string2[1000] = """";
	for (int i = 0; i < length+2; i++) {
		string2[i] = 42;
		if (i == length+1) {
			string2[i + 1] = 0;
			string = strcat(string, ""\n"");
			string = strcat(string, string2);
		}
	}
}",1
dcha468,1696806474,1,"void Histogram(char *output, int *data, int size) {
    int max = 0;

    // Find the maximum value in the data array.
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Generate the histogram string.
    int width = size * 2 + 2; // Width of the histogram including borders
    int height = max + 2;     // Height of the histogram including borders

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            // Check if it's a border character.
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                output[i * width + j] = '*';
            } else {
                // Calculate the corresponding data index for this column.
                int dataIndex = (j - 1) / 2;

                // Check if data should be represented by 'X'.
                if (max - data[dataIndex] + 1 <= i) {
                    output[i * width + j] = 'X';
                } else {
                    output[i * width + j] = ' ';
                }
            }
        }
        output[i * width + width - 1] = '\n'; // Newline at the end of each line
    }

    output[height * width] = '\0'; // Null-terminate the string
}",0
dcha468,1696833115,2,test,0
dche306,1696730865,1,"void Histogram(char *output_string, int data[], int n) {
    int max_val = 0;
    for (int i = 0; i < n; i++) {
        if (data[i] > max_val) {
            max_val = data[i];
        }
    }

    char row[n + 2];
    int idx = 0;

    // Add top border
    memset(row, '*', n + 2);
    row[n + 2 - 1] = '\0'; // Null terminate
    strcpy(output_string + idx, row);
    idx += strlen(row);
    output_string[idx++] = '\n';

    // Generate each row in the histogram from top to bottom
    for (int i = max_val; i > 0; i--) {
        row[0] = '*';
        row[n + 1] = '*';
        for (int j = 0; j < n; j++) {
            if (data[j] >= i) {
                row[j + 1] = 'X';
            } else {
                row[j + 1] = ' ';
            }
        }
        row[n + 2 - 1] = '\0'; // Null terminate
        strcpy(output_string + idx, row);
        idx += strlen(row);
        output_string[idx++] = '\n';
    }

    // Add bottom border
    memset(row, '*', n + 2);
    row[n + 2 - 1] = '\0'; // Null terminate
    strcpy(output_string + idx, row);
    idx += strlen(row);
    output_string[idx] = '\0'; // Null terminate final string
}",0
dche306,1696731179,2,"void Histogram(char *output_string, int data[], int n) {
    int max_val = 0;
    for (int i = 0; i < n; i++) {
        if (data[i] > max_val) {
            max_val = data[i];
        }
    }

    char row[n + 2];
    int idx = 0;

    // Add top border
    memset(row, '*', n + 2);
    row[n + 2 - 1] = '\0'; // Null terminate
    strcpy(output_string + idx, row);
    idx += strlen(row);
    output_string[idx++] = '\n';

    // Generate each row in the histogram from top to bottom
    for (int i = max_val; i > 0; i--) {
        row[0] = '*';
        row[n + 1] = '*';
        int last_X_index = 0;
        for (int j = 0; j < n; j++) {
            if (data[j] >= i) {
                row[j + 1] = 'X';
                last_X_index = j + 1;
            } else {
                row[j + 1] = ' ';
            }
        }
        row[last_X_index + 1] = '*';
        row[last_X_index + 2] = '\0'; // Null terminate right after the last 'X'
        strcpy(output_string + idx, row);
        idx += strlen(row);
        output_string[idx++] = '\n';
    }

    // Add bottom border
    memset(row, '*', n + 2);
    row[n + 2 - 1] = '\0'; // Null terminate
    strcpy(output_string + idx, row);
    idx += strlen(row);
    output_string[idx] = '\0'; // Null terminate final string
}",0
deri361,1696289019,1,"#include <stdio.h>

void Histogram(char *graph, int *values, int size) {
	int i, j, k, l, max, arrayIndex;
	max = values[0];
	arrayIndex = 0;
	for (i = 0; i < (size + 2); i++) {
		if (i == size + 1) {
			graph[arrayIndex] = '*';
			graph[arrayIndex + 1] = '\n';
			arrayIndex = arrayIndex + 2;
		}
		else {
			graph[arrayIndex] = '*';
			arrayIndex = arrayIndex + 1;
		}
	}
	for (j = 1; j < size; j++) {
		if (values[j] > max) {
			max = values[j];
		}
	}
	for (k = max-1; k > -1; k--) {
		graph[arrayIndex] = '*';
		arrayIndex = arrayIndex + 1;
		for (l = 0; l < size; l++) {
			if (values[l] > k) {
				graph[arrayIndex] = 'X';
				arrayIndex = arrayIndex + 1;
			}
			else {
				graph[arrayIndex] = ' ';
				arrayIndex = arrayIndex + 1;
			}
		}
		graph[arrayIndex] = '*';
		graph[arrayIndex+1] = '\n';
		arrayIndex = arrayIndex + 2;
	}
	for (i = 0; i < (size + 2); i++) {
		graph[arrayIndex] = '*';
		arrayIndex = arrayIndex + 1;
	}
	graph[arrayIndex] = 0;
}",1
dgal735,1696406415,1,"void Histogram(char* outstr, int* array, int length) {
    int max = array[0];
   
    memset(outstr, 0, sizeof(outstr));
    // Find the maximum value in the array
    for (int i = 1; i < length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }

    // Calculate the width of the histogram
    int width = length + 2;

    // Initialize the output string with '*' characters
    for (int i = 0; i < width; i++) {
        strcat(outstr, ""*"");
    }
    strcat(outstr, ""\n"");

    for (int i = max; i > 0; i--) {
        strcat(outstr, ""*"");
        for (int j = 0; j < length; j++) {
            // Append the line to the output string
            if (array[j] >= i) {
                strcat(outstr, ""X"");
            } else {
                strcat(outstr, "" "");
            }
        }
        strcat(outstr, ""*\n"");
    }

    // Append a newline to separate the two histograms
    for (int i = 0; i < width; i++) {
        strcat(outstr, ""*"");
    }
   
    strcat(outstr, ""\0"");
}",0
dgal735,1696407877,2,"void Histogram(char* outstr, int* array, int length) {
    int max = array[0];
   
     for (int i = 0; i < 1000; i++) {
        outstr[i]=0;
    }

    // Find the maximum value in the array
    for (int i = 1; i < length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }

    // Calculate the width of the histogram
    int width = length + 2;

    // Initialize the output string with '*' characters
    for (int i = 0; i < width; i++) {
        strcat(outstr, ""*"");
    }
    strcat(outstr, ""\n"");

    for (int i = max; i > 0; i--) {
        strcat(outstr, ""*"");
        for (int j = 0; j < length; j++) {
            // Append the line to the output string
            if (array[j] >= i) {
                strcat(outstr, ""X"");
            } else {
                strcat(outstr, "" "");
            }
        }
        strcat(outstr, ""*\n"");
    }

    // Append a newline to separate the two histograms
    for (int i = 0; i < width; i++) {
        strcat(outstr, ""*"");
    }
   
    strcat(outstr, ""\0"");
}
   

",1
dhar714,1696660633,1,"void Histogram(char *format, int *values, int length)
{
    //Determine max value 
    int max = 0;
    for (int i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    int count = 0;
    for (int i = 0; i < max + 2; i++) {
        for (int j = 0; j < length + 2; j++) {
            if (i == 0) {
                format[count] = '*';
            }
            else if (i == (max + 1)) {
                format[count] = '*';
            }
            else if (j == 0) {
                format[count] = '*';
            }
            else if (j == (length + 1)) {
                format[count] = '*';
            }
            else if ((max + 1) - (values[j - 1]) <= i) {
                format[count] = 'X';
            }
            else {
                format[count] = ' ';
            }
            count++;
        }
        format[count] = '\n';
        count++;
    } 
    format[count - 1] = '\0';
}",1
dhen760,1696476796,1,"#include <stdio.h>
#include <string.h>

void Histogram(char formatted[], int *values, int length)
{
    int x = values[0];
    for (int i=1; i<=length; i++) {
        if (values[i] > x) {
            x = values[i];
        }
    }
    
    int y = x;
    int newValues[1000][1000] = {};
    
    for (int i=1; i<=y;i++) {
        for (int j=1;j<=length;j++) {
            if (values[j-1] == x) {
                newValues[i][j] = 1;
                values[j-1] = x-1;
            }
        }
        x--;
    }
    
    for (int i=0;i<=length+1;i++) {
        newValues[0][i] = '*';
    }
    
    for (int i=0;i<=length+1;i++) {
        newValues[y+1][i] = '*';
    }
    
    for (int i=0;i<=y+1;i++) {
        newValues[i][0] = '*';
    }
    
    for (int i=0;i<=y+1;i++) {
        newValues[i][length+1] = '*';
    }
    
    for (int i=0;i<=y+1;i++) {
        newValues[i][length+2] = 2;
    }
    
    int ordered[1000] = {};
    int r = 0;
    for (int i=0;i<=y+1;i++) {
        for (int j=0;j<length+3;j++) {
            ordered[r] = newValues[i][j];
            r++;
        }
    }
    
    for (int i=0;i<=((length+3)*(y+3));i++) {
        if (ordered[i] == 42) {
            formatted[i] = '*';
        } else if (ordered[i] == 1) {
            formatted[i] = 'X';
        } else if (ordered[i] == 2) {
            if (i != ((length+3)*(y+3))) {
            formatted[i] = '\n';
            }
        } else {
            formatted[i] = ' ';
        }
    }
}",0
dhen760,1696479607,2,"void Histogram(char formatted[], int *values, int length)
{
    int x = values[0];
    for (int i=1; i<=length; i++) {
        if (values[i] > x) {
            x = values[i];
        }
    }
    
    int y = x;
    int newValues[1000][1000] = {};
    
    for (int i=1; i<=y;i++) {
        for (int j=1;j<=length;j++) {
            if (values[j-1] == x) {
                newValues[i][j] = 1;
                values[j-1] = x-1;
            }
        }
        x--;
    }
    
    for (int i=0;i<=length+1;i++) {
        newValues[0][i] = 3;
    }
    
    for (int i=0;i<=length+1;i++) {
        newValues[y+1][i] = 3;
    }
    
    for (int i=0;i<=y+1;i++) {
        newValues[i][0] = 3;
    }
    
    for (int i=0;i<=y+1;i++) {
        newValues[i][length+1] = 3;
    }
    
    for (int i=0;i<=y;i++) {
        newValues[i][length+2] = 2;
    }
    
    int ordered[1000] = {};
    int r = 0;
    for (int i=0;i<=y+1;i++) {
        for (int j=0;j<length+3;j++) {
            ordered[r] = newValues[i][j];
            r++;
        }
    }
    
    for (int i=0;i<=((length+3)*(y+2)-1);i++) {
        if (ordered[i] == 3) {
            formatted[i] = '*';
        } else if (ordered[i] == 1) {
            formatted[i] = 'X';
        } else if (ordered[i] == 2) {
            formatted[i] = '\n';
        } else {
            formatted[i] = ' ';
        }
    }
    formatted[((length+3)*(y+2)-1)] = '\0';
}",0
dhen760,1696751810,3,"void Histogram(char formatted[], int *values, int length)
{
    int x = values[0];
    for (int i=1; i<length; i++) {
        if (values[i] > x) {
            x = values[i];
        }
    }
    
    int y = x;
    int newValues[1000][1000] = {0};
    
    for (int i=1; i<=y;i++) {
        for (int j=1;j<=length;j++) {
            if (values[j-1] == x) {
                newValues[i][j] = 1;
                values[j-1] = x-1;
            }
        }
        x--;
    }
    
    for (int i=0;i<=length;i++) {
        newValues[0][i] = 3;
    }
    
    for (int i=0;i<=length+1;i++) {
        newValues[y+1][i] = 3;
    }
    
    for (int i=0;i<=y;i++) {
        newValues[i][0] = 3;
    }
    
    for (int i=0;i<=y;i++) {
        newValues[i][length+1] = 3;
    }
    
    for (int i=0;i<=y;i++) {
        newValues[i][length+2] = 2;
    }
    
    int ordered[1000] = {0};
    int r = 0;
    for (int i=0;i<=y+1;i++) {
        for (int j=0;j<=length+2;j++) {
            ordered[r] = newValues[i][j];
            r++;
        }
    }
    
    for (int i=0;i<=((length+3)*(y+2)-2);i++) {
        if (ordered[i] == 3) {
            formatted[i] = '*';
        } else if (ordered[i] == 1) {
            formatted[i] = 'X';
        } else if (ordered[i] == 2) {
            formatted[i] = '\n';
        } else {
            formatted[i] = ' ';
        }
    }
    formatted[((length+3)*(y+2)-1)] = '\0';
}",1
dhul688,1696813978,1,"void Histogram(char *chart, int *data, int num_elements)
{
    int i, j;
    int NUM_ROWS;
    int NUM_COLS;
    chart[0] = 0;
    
    NUM_ROWS = 0;
    NUM_COLS = num_elements;
    
    for (i = 0; i < num_elements; i++){
        if (NUM_ROWS < data[i]){
            NUM_ROWS = data[i];
        }
    }
    
    NUM_ROWS = NUM_ROWS + 2;
    NUM_COLS = num_elements + 3;
    
    for (i = 0; i < NUM_ROWS; i++){
        for (j = 0; j < NUM_COLS; j++){
            if ((j != NUM_COLS - 1) && ((i == 0) | (j == 0) | (j == NUM_COLS - 2) | (i == NUM_ROWS - 1))){
                strcat(chart,""*"");
            }
            else if ((i != NUM_ROWS - 1) && (j == NUM_COLS - 1)){
                strcat(chart, ""\n"");
            }
            else if (((j > 0) && (j < NUM_COLS - 1)) && (data[j - 1] >= (NUM_ROWS - i - 1))){
                strcat(chart, ""X"");
            } else if (((i == NUM_ROWS - 1) && (j == NUM_COLS - 1)) == 0){
                strcat(chart, "" "");
            }
        }
    }
}",1
dkha055,1696399953,1,"char Histogram(char* graph, int* data, int num_values) {

    int max = -1;
    char display_plot[] = """";

    //Obtaining max value to specify the number of rows in the array
    for (int i = 0; i < num_values; i++)
    {
        if (max < data[i]) {
            max = data[i];
        }
    }

    //Creating values for the number of values in rows and cols
    int row_length = max + 2;
    int col_length = num_values + 3;

    //Creating 2D array to create grid to display graph
    int plot[max + 2][num_values + 3];

    //Initialising entire array to 0
    for (int r = 0; r < row_length; r++)
    {
        for (int j = 0; j < col_length; j++)
        {
            plot[r][j] = 0;
        }
        
    }

    //Filling the First and Last Row with asterisk
    for (int i = 0; i < col_length - 1; i++)
    {   
        plot[row_length - 1][i] = 1;
        plot[0][i] = 1;
    }
    //Filling First and Last Column with asterisk
    for (int i = 0; i < row_length; i++)
    {
        plot[i][0] = 1;
        plot[i][col_length - 2] = 1;
        plot[i][col_length - 1] = 2; 
    }

    //Adding X to the 2d array to represent the histogram
    for (int j = 0; j < num_values; j++) {
        for (int p = max; p > (max - data[j]);p-- ) {
            plot[p][j + 1] = 4;
       }
    }

    //Appending relevent values to string to return and displat
    for (int r = 0; r < max + 2; r++) {
        for (int c = 0; c < num_values + 3; c++) {
            if (plot[r][c] == 1 ) {
                strcat(graph,""*"");
            } else if (plot[r][c] == 2 ) {
                strcat(graph,""\n"");
            } else if (plot[r][c] == 4) {
                strcat(graph, ""X"");
            } else {
                strcat(graph, "" "");
            }
        }
    }

    return *graph;

}",0
dkha055,1696399976,2,"char Histogram(char* graph, int* data, int num_values) {

    int max = -1;

    //Obtaining max value to specify the number of rows in the array
    for (int i = 0; i < num_values; i++)
    {
        if (max < data[i]) {
            max = data[i];
        }
    }

    //Creating values for the number of values in rows and cols
    int row_length = max + 2;
    int col_length = num_values + 3;

    //Creating 2D array to create grid to display graph
    int plot[max + 2][num_values + 3];

    //Initialising entire array to 0
    for (int r = 0; r < row_length; r++)
    {
        for (int j = 0; j < col_length; j++)
        {
            plot[r][j] = 0;
        }
        
    }

    //Filling the First and Last Row with asterisk
    for (int i = 0; i < col_length - 1; i++)
    {   
        plot[row_length - 1][i] = 1;
        plot[0][i] = 1;
    }
    //Filling First and Last Column with asterisk
    for (int i = 0; i < row_length; i++)
    {
        plot[i][0] = 1;
        plot[i][col_length - 2] = 1;
        plot[i][col_length - 1] = 2; 
    }

    //Adding X to the 2d array to represent the histogram
    for (int j = 0; j < num_values; j++) {
        for (int p = max; p > (max - data[j]);p-- ) {
            plot[p][j + 1] = 4;
       }
    }

    //Appending relevent values to string to return and displat
    for (int r = 0; r < max + 2; r++) {
        for (int c = 0; c < num_values + 3; c++) {
            if (plot[r][c] == 1 ) {
                strcat(graph,""*"");
            } else if (plot[r][c] == 2 ) {
                strcat(graph,""\n"");
            } else if (plot[r][c] == 4) {
                strcat(graph, ""X"");
            } else {
                strcat(graph, "" "");
            }
        }
    }

    return *graph;

}",0
dkha055,1696403591,3,"#include <stdio.h>
#include <string.h>

void Histogram(char graph[], int data[], int num_values) {

    int max = -1;

    //Obtaining max value to specify the number of rows in the array
    for (int i = 0; i < num_values; i++)
    {
        if (max < data[i]) {
            max = data[i];
        }
    }

    //Creating values for the number of values in rows and cols
    int row_length = max + 2;
    int col_length = num_values + 3;

    //Creating 2D array to create grid to display graph
    int plot[max + 2][num_values + 3];

    //Initialising entire array to 0
    for (int r = 0; r < row_length; r++)
    {
        for (int j = 0; j < col_length; j++)
        {
                plot[r][j] = 0;
        }
    }

    //Filling the First and Last Row with asterisk
    for (int i = 0; i < col_length - 1; i++)
    {   
        plot[row_length - 1][i] = 1;
        plot[0][i] = 1;
    }
    //Filling First and Last Column with asterisk
    for (int i = 0; i < row_length; i++)
    {
        plot[i][0] = 1;
        plot[i][col_length - 2] = 1;
        plot[i][col_length - 1] = 2; 
    }

    //Adding X to the 2d array to represent the histogram
    for (int j = 0; j < num_values; j++) {
        for (int p = max; p > (max - data[j]);p-- ) {
            plot[p][j + 1] = 4;
       }
    }

    int n = 0;

    //Appending relevent values to string to return and displat
    for (int r = 0; r < max + 2; r++) {
        for (int c = 0; c < num_values + 3; c++) {
            if (plot[r][c] == 1 ) {
                graph[n] = '*';
            } else if (plot[r][c] == 2 ) {
                graph[n] = '\n';
            } else if (plot[r][c] == 4) {
                graph[n] = 'X';
            } else {
                graph[n] = ' ';
            }
            n++;
        }
    }

    //Add a end off string value, to the end of the line
    graph[n - 1] = '\0';

}",1
dkim848,1696820973,1,"void Histogram(char *formatted, int array[], int length)
{
    int highest, L;
    highest = -1;
    
    // highest value in the array
    for (int i = 0; i < length; i++) {
        if (array[i] > highest) {
            highest = array[i];
        } else {
            continue;
        }
    }
    
    for (int j = 0; j <= length; j++) {
            strcat(formatted, ""*"");
    }
    strcat(formatted, ""*\n"");
    
    for (int L = highest; L > 0; L--) {
        strcat(formatted, ""*"");
        
        for (int x = 0; x < length; x++) {
           if (array[x] >= L) {
               strcat(formatted, ""X"");
           } else {
               strcat(formatted, "" "");
           }
        }
        
        strcat(formatted, ""*\n"");
    }
    
    for (int k = 0; k <= length + 1; k++) {
        strcat(formatted, ""*"");
    }
}
",0
dkim848,1696823399,2,"void Histogram(char *formatted, int array[], int length)
{
    int highest, L;
    highest = -1;
    *formatted = '\0';
    
    // highest value in the array
    for (int i = 0; i < length; i++) {
        if (array[i] > highest) {
            highest = array[i];
        } else {
            continue;
        }
    }
    
    for (int j = 0; j <= length; j++) {
            strcat(formatted, ""*"");
    }
    strcat(formatted, ""*\n"");
    
    for (int L = highest; L > 0; L--) {
        strcat(formatted, ""*"");
        
        for (int x = 0; x < length; x++) {
           if (array[x] >= L) {
               strcat(formatted, ""X"");
           } else {
               strcat(formatted, "" "");
           }
        }
        
        strcat(formatted, ""*\n"");
    }
    
    for (int k = 0; k <= length + 1; k++) {
        strcat(formatted, ""*"");
    }
}
",0
dkim848,1696823801,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int array[], int length)
{
    int highest;
    highest = -1;
    *formatted = '\0';
    
    // highest value in the array
    for (int i = 0; i < length; i++) {
        if (array[i] > highest) {
            highest = array[i];
        } else {
            continue;
        }
    }
    
    for (int j = 0; j <= length; j++) {
            strcat(formatted, ""*"");
    }
    strcat(formatted, ""*\n"");
    
    for (int L = highest; L > 0; L--) {
        strcat(formatted, ""*"");
        
        for (int x = 0; x < length; x++) {
           if (array[x] >= L) {
               strcat(formatted, ""X"");
           } else {
               strcat(formatted, "" "");
           }
        }
        
        strcat(formatted, ""*\n"");
    }
    
    for (int k = 0; k <= length + 1; k++) {
        strcat(formatted, ""*"");
    }
}
",1
dmun793,1696790593,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int* values, int valueLength) {
    // Get max height
    int maxHeight = 0;

    for (int i = 0; i < valueLength; i++)
        if (values[i] > maxHeight)
            maxHeight = values[i];

    int index = 0;

    // Draw first header
    for (int i = 0; i < valueLength + 2; i++)
        formatted[index++] = '*';

    formatted[index++] = '\n';

    // Draw histogram
    for (int i = 0; i < maxHeight; i++)
    {
        formatted[index++] = '*';

        for (int j = 0; j < valueLength; j++)
        {
            // Draw histogram

            int height = maxHeight - i - 1;

            if (height < values[j])
                formatted[index++] = 'X';
            else
                formatted[index++] = ' ';
        }

        formatted[index++] = '*';
        formatted[index++] = '\n';
    }

    // Draw last header
    for (int i = 0; i < valueLength + 2; i++)
        formatted[index++] = '*';

    formatted[index++] = '\0';
}",1
dric234,1696634121,1,"void Histogram(char* display, int values[], int elements)
{
	int max = 0;
	for (int i = 0; i < elements; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}
	char border[] = ""*"";
	char newstring[100];
	int next = elements + 4;
	char null[] = ""\0"";

	for (int i = 0; i < elements + 2; i++) {
		display[i] = border[0]; 
		display[i + 1] = null[0];
	}
	for (int j = 0; j < max; j++) {
		for (int k = 0; k < elements; k++) {
			if (values[k] >= max - j) {
				newstring[k] = 88;
				newstring[k + 1] = null[0];
			}
			if (values[k] < max - j) {
				newstring[k] = 32;
				newstring[k + 1] = null[0];
			}
		}
		strcat(display, ""\n*"");
		strcat(display, newstring);
		strcat(display, ""*"");
		strcat(display, ""\0"");
	}
	for (int i = 0; i < elements + 2; i++) {
		newstring[i] = border[0];
		newstring[i + 1] = null[0];
	}
	strcat(display, ""\n"");
	strcat(display, newstring);
}",0
dric234,1696634629,2,"void Histogram(char* display, int values[], int elements)
{
	int max = 0;
	for (int i = 0; i < elements; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}
	char border[] = ""*"";
	char newstring[100];
	char null[] = ""\0"";

	for (int i = 0; i < elements + 2; i++) {
		display[i] = border[0]; 
		display[i + 1] = null[0];
	}
	for (int j = 0; j < max; j++) {
		for (int k = 0; k < elements; k++) {
			if (values[k] >= max - j) {
				newstring[k] = 88;
				newstring[k + 1] = null[0];
			}
			if (values[k] < max - j) {
				newstring[k] = 32;
				newstring[k + 1] = null[0];
			}
		}
		strcat(display, ""\n*"");
		strcat(display, newstring);
		strcat(display, ""*"");
		strcat(display, ""\0"");
	}
	for (int i = 0; i < elements + 2; i++) {
		newstring[i] = border[0];
		newstring[i + 1] = null[0];
	}
	strcat(display, ""\n"");
	strcat(display, newstring);
}",1
dryu303,1696829872,1,"
int Findmax(int arr[], int size) {
    int max = INT_MIN;

    for (int i = 0; i < size; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }

    return max;
}

char Histogram(char *format, int *val, int no) {
    int max = Findmax(val, no); 
    int i, j, a = 0, x = 0;
    memset(format,0,1000);
    char array[no + 2][max + 2]; 
    for (i = 0; i < no + 2; i++) { 
        x = 0;
        for (j = max + 1; j >= 0; j--) { 
            if (j == 0 || j == max + 1 || i == 0 || i == no + 1) { 
                array[i][j] = '*';
            } else {
                if (x < val[i - 1]) {
                    array[i][j] = 'X';
                    x++;
                } else {
                    array[i][j] = ' ';
                }
            }
        }
    }

    
    for (i = 0; i < max + 2; i++) {
        for (j = 0; j < no + 2; j++) {
            format[a]= array[j][i];
            a++;
        }
        if (i!=max+1){
            format[a]='\n';
            }
        a++;
    }
    return format;
}
",0
dryu303,1696830077,2,"#define _CRT_SECURE_NO_WARNING
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h> 


int Findmax(int arr[], int size) {
    int max = INT_MIN;

    for (int i = 0; i < size; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }

    return max;
}

char Histogram(char *format, int *val, int no) {
    int max = Findmax(val, no); 
    int i, j, a = 0, x = 0;
    memset(format,0,1000);
    char array[no + 2][max + 2]; 
    for (i = 0; i < no + 2; i++) { 
        x = 0;
        for (j = max + 1; j >= 0; j--) { 
            if (j == 0 || j == max + 1 || i == 0 || i == no + 1) { 
                array[i][j] = '*';
            } else {
                if (x < val[i - 1]) {
                    array[i][j] = 'X';
                    x++;
                } else {
                    array[i][j] = ' ';
                }
            }
        }
    }

    
    for (i = 0; i < max + 2; i++) {
        for (j = 0; j < no + 2; j++) {
            format[a]= array[j][i];
            a++;
        }
        if (i!=max+1){
            format[a]='\n';
            }
        a++;
    }
    return *format;
}
",1
dsaw164,1696243356,1,"int FindMax(int values[], int size){
    int i = 0;
    int max = values[i];
    
    while(i<size - 1){
        if(values[i + 1] > max){
            max = values[i + 1];
        }
        i++;
    }
    
    return max;
}

void Histogram(char *formatted, int array[], int size){
    int rows = FindMax(array, size) + 2; //3 height
    int cols = size + 3; //6 width
    int elements = (rows * cols) - 1;
    int max = FindMax(array, size);
    int line;

//Sect.1    
    for(int i = 0; i < cols; i++){
        if(i < cols - 1){
            formatted[i] = '*';
        }
        
        else {
            formatted[i] = '\n';
        }
    }

//Sect.2
    for(int i = cols; i < (elements + 1 - cols); i++){
        if(i % cols == 0){
            formatted[i] = '*';
            line = i / cols;
        }
        
        else if((i + 2) % cols == 0){
            formatted[i] = '*';
        }
        
        else if((i + 1) % cols == 0){
            formatted[i] = '\n';
        }
        
        else{
    
            int j = i - (13 * line) - 1;
            
            if(array[j] >= (max + 1 - line)){
                formatted[i] = 'X';
            }
            
            else {
                formatted[i] = ' ';
            }
        }
    }
    
    
//Sect.3
    for(int i = (elements + 1 - cols); i <= elements; i++){
        if(i == elements){
            formatted[i] = '\0';
        }
        
        else {
            formatted[i] = '*';
        }
    }
}",0
dsaw164,1696243580,2,"int FindMax(int values[], int size){
    int i = 0;
    int max = values[i];
    
    while(i<size - 1){
        if(values[i + 1] > max){
            max = values[i + 1];
        }
        i++;
    }
    
    return max;
}

void Histogram(char *formatted, int array[], int size){
    int rows = FindMax(array, size) + 2; //3 height
    int cols = size + 3; //6 width
    int elements = (rows * cols) - 1;
    int max = FindMax(array, size);
    int line;

//Sect.1    
    for(int i = 0; i < cols; i++){
        if(i < cols - 1){
            formatted[i] = '*';
        }
        
        else {
            formatted[i] = '\n';
        }
    }

//Sect.2
    for(int i = cols; i < (elements + 1 - cols); i++){
        if(i % cols == 0){
            formatted[i] = '*';
            line = i / cols;
        }
        
        else if((i + 2) % cols == 0){
            formatted[i] = '*';
        }
        
        else if((i + 1) % cols == 0){
            formatted[i] = '\n';
        }
        
        else{
    
            int j = i - (cols * line) - 1;
            
            if(array[j] >= (max + 1 - line)){
                formatted[i] = 'X';
            }
            
            else {
                formatted[i] = ' ';
            }
        }
    }
    
    
//Sect.3
    for(int i = (elements + 1 - cols); i <= elements; i++){
        if(i == elements){
            formatted[i] = '\0';
        }
        
        else {
            formatted[i] = '*';
        }
    }
}",1
dvu878,1696666404,1,"#include <stdio.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS

void Histogram(char* his, int* data,int length) {

    // finding dimensions 
    int height = 0;

    for (int i = 0; i < length; i++) {
        if (data[i] > height) {
            height = data[i];
        }
    }

    //variable to keep track
    int p = 0;

    // formatting first line
    for (int i = 0; i < length+2; i++) {
        his[p] = '*';
        p++;
    }
    his[p] = '\n';
    p++;
    
    // iterating through each row that contains data
    for (int i = 0; i < height; i++) {

        his[p] = '*';
        p++;

        //iterating through each column that contains data
        for (int j = 0; j < length; j++) {
            his[p] = ' ';

            if (data[j] >= height - i) {
                his[p] = 'X';
            }

            p++;
        }

        his[p] = '*';
        p++;

        his[p] = '\n';
        p++;

    }

    // formatting last line
    for (int i = 0; i < length + 2; i++) {
        his[p] = '*';
        p++;
    }

    his[p] = '\0';
}
",1
dwu617,1696755392,1,"void Histogram(char *graph, int *data, int length)
{
	
	int i, j, index = 0;
	int high = 0;

	for (i = 0; i <= length; i++) {
		if (high < data[i]) {
			high = data[i];
		}
	}

	for (i = 0; i <= length + 2; i++) {
		if (i < length + 2) {
			graph[index] = '*';
			index++;
		}
		if (i == length + 2) {
			graph[index] = '\n';
			index++;
			graph[index] = '*';
			index++;
		}
	}
	
	for (i = 0; i < high; i++) {
		for (j = 0; j < length; j++) {
			if (data[j] < (high - i)) {
				graph[index] = ' ';
				index++;
			} else if ((high - i) <= data[j]) {
				graph[index] = 'X';
				index++;
			}
		}
		graph[index] = '*';
		index++;
		graph[index] = '\n';
		index++;
		graph[index] = '*';
		index++;
	}
	
	for (i = 1; i <= length + 1; i++) {
		graph[index] = '*';
		index++;
	}
}",0
dwu617,1696755970,2,"void Histogram(char *graph, int *data, int length)
{
	
	int i, j, index = 0;
	int high = 0;

	for (i = 0; i <= length; i++) {
		if (high < data[i]) {
			high = data[i];
		}
	}

	for (i = 0; i <= length + 2; i++) {
		if (i < length + 2) {
			graph[index] = '*';
			index++;
		}
		if (i == length + 2) {
			graph[index] = '\n';
			index++;
			graph[index] = '*';
			index++;
		}
	}
	
	for (i = 0; i < high; i++) {
		for (j = 0; j < length; j++) {
			if (data[j] < (high - i)) {
				graph[index] = ' ';
				index++;
			} else if ((high - i) <= data[j]) {
				graph[index] = 'X';
				index++;
			}
		}
		graph[index] = '*';
		index++;
		graph[index] = '\n';
		index++;
		graph[index] = '*';
		index++;
	}
	
	for (i = 1; i <= length + 1; i++) {
		graph[index] = '*';
		index++;
		graph[index] = '\0';
	}
}",1
dyu343,1696213436,1,"int LargestInt(int arr[], int length)
{
	int largest = arr[0];
	for (int i = 1; i < length; i++)
	{
		if (arr[i] > largest)
		{
			largest = arr[i];
		}
	}
	return largest;
}

void AppendCharacter(char* buffer, char character)
{
	// finds the null terminating string.
	int terminaIndex = strlen(buffer);
	
	// replaces the character at the null terminating string to 2nd arg, and shifts null terminating string.
	buffer[terminaIndex] = character;
	buffer[terminaIndex + 1] = '\0';
}

void Histogram(char* bufferToStore, int data[], int width)
{
	// set the null-terminating string to zero.
	bufferToStore[0] = '\0';

	// gets the max height of the histogram.
	int amplitude = LargestInt(data, width);

	// Firstly, we add the horizontal bar on the top. (bars of width: width + 2).
	for (int i = 0; i < width + 2; i++)
	{
		AppendCharacter(bufferToStore, '*');
	}
	AppendCharacter(bufferToStore, '\n');

	// Filling in the middle row by row... (num rows = amplitude.)
	for (int height = amplitude; height > 0; height--)
	{
		AppendCharacter(bufferToStore, '*');

		// now to fill in the middle.
		for (int j = 0; j < width; j++)
		{
			if (data[j] >= height)
			{
				AppendCharacter(bufferToStore, 'X');
			}
			else
			{
				AppendCharacter(bufferToStore, ' ');
			}
		}

		AppendCharacter(bufferToStore, '*');
		// new row
		AppendCharacter(bufferToStore, '\n');
	}

	// Finally, we add the horizontal bar on the bottom.. (bars of width: width + 2).
	for (int i = 0; i < width + 2; i++)
	{
		AppendCharacter(bufferToStore, '*');
	}
}",1
eara128,1696639927,1,"void Histogram(char* inputArray, int values[], int size){
    int max = 0;
    int index = 0;
    
    // Find the maximum value in the data array
    for (int i = 0; i < size; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }


    // adding the top row of **
    for (int i = 0; i < size + 2; i++) {
        inputArray[index] = '*';
        index++;
    }
    inputArray[index] = '\n';
    index++;


    // Iterate through each row of the histogram, starting at the top and going down
    for (int i = max ; i > 0; i--) {
        // start the row with a *
        inputArray[index] = '*';
        index++;

        // add an 'X' in the correct position in the rows 
        for (int j = 0; j < size; j++) {
            /* checking if the value of the index in the input array is the same as the height of histogram currently
            and adding an 'X' if so */
            if (values[j] >= i) {
                inputArray[index] = 'X';
                index ++;
            } else {
                inputArray[index] = ' ';
                index++;
            }
        }
        // at the end of each row, add a * and start a new line 
        inputArray[index]= '*';
        index++;
        inputArray[index] = '\n';
        index++;
    }

    // Add the bottom border line
    for (int i = 0; i < size + 2; i++) {
        inputArray[index] = '*';
        index++;
    }
    inputArray[index] = '\0';
    index++; 
}",1
ebar824,1696590399,1,"void Histogram(char formatted[],int values[],int width) {
    int height =0;

    for (int i = 0; i < width; i++){
        if (values [i]>height)
        {
            height = values[i];
        }
        
    }
    for (int k = 0; k < height+2; k++)
    {
        for (int j = 0; j < width+2; j++){
            if(k==0  || k==height+1 || j==0 || j== width+1){
                strcat(formatted,""*"");
            }
            else if(values[j-1]>height-k){
            strcat(formatted,""X"");
            }
            else{
                strcat(formatted,"" "");
            }
            
        

        }
    strcat(formatted,""\n"");
    }

    
        

    printf(""%s"",formatted);
    
}",0
ebar824,1696594992,2,"void Histogram(char formatted[],int values[],int width) {
    int height =0;
    formatted[0] ='\0';

    for (int i = 0; i < width; i++){
        if (values [i]>height)
        {
            height = values[i];
        }
        
    }
    for (int k = 0; k <= height+1; k++)
    {
        for (int j = 0; j <= width+1; j++){
            if(k==0  || k==height+1 || j==0 || j== width+1){
                strcat(formatted,""*"");
                
            }
            else if(values[j-1]>height-k){
                strcat(formatted,""X"");
               
            }
            else{
            strcat(formatted,"" "");
           
            }
        

        }

    if (k>=0 && k<height+1)
    {
        strcat(formatted,""\n"");
    }
    
    
    }
    
}
   ",1
echa931,1696829789,1,"void Histogram(char* graph, int values[], int length) {
    int i, j, max = -1;
    for (i = 0; i < length; i++) {
        if (max < values[i]) {
            max = values[i];
        }
    }
    for (i = 0; i < max + 2; i++) {
        for (j = 0; j < length + 2; j++) {
            if ((i == 0) || (i == max + 1)) {
                *graph = '*';
                graph++;
            }
            else if ((j == 0) || (j == length + 1)) {
                *graph = '*';
                graph++;
            }
            else if ((values[j - 1] >= (max - i + 1))) {
                *graph = 'X';
                    graph++;
            }
            else {
                *graph = ' ';
                    graph++;
            }
        }
        if (i != max + 1) {
            *graph = '\n';
            graph++;
        }
        else {
            *graph = '\0';
        }
    }
}",1
ehua682,1696815668,1,"#include <stdio.h>
#include <string.h>


void Histogram(char *result, int *data, int n) {
    int max_freq = 0;
    for (int i = 0; i < n; i++) {
        if (data[i] > max_freq) {
            max_freq = data[i];
        }
    }


    // Creating the top border
    strcat(result, ""************\n"");

    for (int i = max_freq; i > 0; i--) {
        strcat(result, ""*"");
        
        
        for (int j = 0; j < n; j++) {
            if (data[j] >= i) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        
        strcat(result, ""*\n"");
    }


    // This line is for Creating the bottom border
    strcat(result, ""************\n"");
}",0
ehua682,1696824320,2,"#include <stdio.h>
#include <string.h>


void Histogram(char *result, int *data, int n) {
    int max_freq = 0;
    for (int i = 0; i < n; i++) {
        if (data[i] > max_freq) {
            max_freq = data[i];
        }
    }
    *result = '\0';

    // Creating the top border
    for (int a = 0; a < n + 1; a++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");

    for (int i = max_freq; i > 0; i--) {
        strcat(result, ""*"");
        
        
        for (int j = 0; j < n; j++) {
            if (data[j] >= i) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        
        strcat(result, ""*\n"");
    }


    // This line is for Creating the bottom border
    for (int b = 0; b <= n + 1; b++) {
        strcat(result, ""*"");
    }
}",1
ekmu195,1696479532,1,"void Histogram(char string[], int array[], int length)
{   
    int i;
    int j;
    char border[100];
    int highest = 0;
    int x;
    int y;
    char line[1000];
    string[0] ='\0';
    // create border
    for (i = 0; i < (length + 2); i++) {
        if (i == (length + 1)) {
            strcat(string, ""*\n"");
        } else {
        strcat(string, ""*"");
        }
    }
    
    // find largest number = number of rows
    for (j = 0; j < length; j++) {
        if (array[j] > highest) {
            highest = array[j];
        }
    }
    
    // for x rows:
    for (x = highest; x > 0; x--) {
        strcat(string, ""*"");
        for (y = 0; y < length; y++) {
            if (array[y] >= x) {
                strcat(string, ""X"");
            } else {
                strcat(string, "" "");
            }
        }
        strcat(string, ""*\n"");
    
    }
    
    for (i = 0; i < (length + 2); i++) {
        strcat(string, ""*"");
    }
    
    
}",0
ekmu195,1696479635,2,"void Histogram(char string[], int array[], int length)
{   
    int i;
    int j;
    int highest = 0;
    int x;
    int y;
    string[0] ='\0';
    // create border
    for (i = 0; i < (length + 2); i++) {
        if (i == (length + 1)) {
            strcat(string, ""*\n"");
        } else {
        strcat(string, ""*"");
        }
    }
    
    // find largest number = number of rows
    for (j = 0; j < length; j++) {
        if (array[j] > highest) {
            highest = array[j];
        }
    }
    
    // for x rows:
    for (x = highest; x > 0; x--) {
        strcat(string, ""*"");
        for (y = 0; y < length; y++) {
            if (array[y] >= x) {
                strcat(string, ""X"");
            } else {
                strcat(string, "" "");
            }
        }
        strcat(string, ""*\n"");
    
    }
    
    for (i = 0; i < (length + 2); i++) {
        strcat(string, ""*"");
    }
    
    
}",1
ely207,1696447536,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* histogram, int data[], int datalen)
{
	// Setting up the first line of '*'
	int i = 0;
	while (i < datalen + 2)
	{
		histogram[i] = '*';
		i++;
	}
	histogram[i] = '\n';
	i++;

	// Alogrithm to plot the X in the right spots
	int max = 0;
	for (int l = 0; l < datalen; l++)
	{
		if (data[l] > max)
		{
			max = data[l];
		}
	}
	int maxcount = max;


	for (int j = 0; j < maxcount; j++) //Looping for each line
	{
		histogram[i] = '*';
		i++;

		for (int k = 0; k < datalen; k++) // looping for each column
		{
			if (data[k] - max == 0)
			{
				histogram[i] = 'X';
				data[k] = data[k] - 1;
			}
			else
			{
				histogram[i] = ' ';
			}
			i++;
		}
		
		max = max - 1;

		histogram[i] = '*';
		i++;
		histogram[i] = '\n';
		i++;

	}
	// setting up last line
	int m = 0;
	while (m < datalen + 2)
	{
		histogram[i] = '*';
		m++;
		i++;
	}
	histogram[i] = '\0';


}",1
ema340,1696682431,1,"void Histogram(char *formatted, int *values, int length) 
{
    // Find largest value in the array
    int maxValue = 0;
    for (int n = 0; n < length; n++) {
        if (values[n] > maxValue) {
            maxValue = values[n];
        }
    }
    
    // Initialise size index for appending the histogram elements
    int size = 0;

    // Create the top border
    for (int topBorder = 0; topBorder < length+2; topBorder++) {
        formatted[size] = '*';
        size++;
    }
    formatted[size] = '\n';
    size++;

    // Form the histogram
    for (int i = maxValue; i > 0; i--) {
        formatted[size] = '*';
        size++;
        for (int j = 0; j < length; j++) {
            if (values[j] >= i) {
                formatted[size] = 'X';
            } else {
                formatted[size] = ' ';
            }
            size++;     
        }
        formatted[size] = '*';
        size++;
        formatted[size] = '\n';
        size++;
    }

    // Create the bottom border
    for (int botBorder = 0; botBorder < length+2; botBorder++) {
        formatted[size] = '*';
        size++;
    }

    // Add null character to indicate end of line/histogram
    formatted[size] = '\0';
}",1
emah834,1696801112,1,"#include <stdio.h>
#include <string.h>

void Histogram(char graph[], int input[], int numElements) {
    graph[0] = '\0';
    int height = 0;
    for (int i = 0; i < numElements; i++){
        if(input[i] > height){
            height = input[i];
        }
    }

    int i;
    for (i = 0; i < numElements + 2; i++) {
        strcat(graph, ""*"");
    }
    strcat(graph, ""\n"");

    int j;
    for (j = height; j > 0; j--) {
        strcat(graph, ""*""); 

        for (i = 0; i < numElements; i++) {
            if (input[i] >= j) {
                strcat(graph, ""X"");
            } else {
                strcat(graph, "" "");
            }
            
        }
        strcat(graph, ""*""); 
        strcat(graph, ""\n"");
    }
    
    for (int i = 0; i < numElements + 2; i++) {
        strcat(graph, ""*"");
    }
  
}",1
eqiu349,1696822504,1,"void Histogram(char* string, int array[], int number) {
	int i;
	int largestno = array[0];
	string[0] = '\0'; // initializing the string array

	// finding the largest number in the array
	for (i = 0; i < number; i++) {
		if (array[i] > largestno) {
			largestno = array[i];
		}
	}

	// creating the first line of the border
	for (i = 0; i < number + 2; i++) {
		strcat(string, ""*"");
	}
	strcat(string, ""\n"");


	i = 0; // column
	int line = 1; // row
	int position = 0; // array position
	
	for (line = 1; line <= largestno; line++) {
		for (i = 0; i < number + 2; i++) {
			if (i == 0) {
				strcat(string, ""*"");
			}
			else if (i == number + 1) {
				strcat(string, ""*"");
			}
			else if (array[i - 1] > largestno - line) {
				strcat(string, ""X"");
			}
			else {
				strcat(string, "" "");
			}
		}
		strcat(string, ""\n"");
	}

	// creating last line of border
	for (i = 0; i < number + 2; i++) {
		strcat(string, ""*"");
	}

	// adding ending null character
	strcat(string, ""\0"");
}",0
eqiu349,1696822550,2,"void Histogram(char* string, int array[], int number) {
	int i;
	int largestno = array[0];
	string[0] = '\0'; // initializing the string array

	// finding the largest number in the array
	for (i = 0; i < number; i++) {
		if (array[i] > largestno) {
			largestno = array[i];
		}
	}

	// creating the first line of the border
	for (i = 0; i < number + 2; i++) {
		strcat(string, ""*"");
	}
	strcat(string, ""\n"");


	i = 0; // column
	int line = 1; // row
	
	for (line = 1; line <= largestno; line++) {
		for (i = 0; i < number + 2; i++) {
			if (i == 0) {
				strcat(string, ""*"");
			}
			else if (i == number + 1) {
				strcat(string, ""*"");
			}
			else if (array[i - 1] > largestno - line) {
				strcat(string, ""X"");
			}
			else {
				strcat(string, "" "");
			}
		}
		strcat(string, ""\n"");
	}

	// creating last line of border
	for (i = 0; i < number + 2; i++) {
		strcat(string, ""*"");
	}

	// adding ending null character
	strcat(string, ""\0"");
}",1
ewil853,1696799547,1,"void Histogram (char *formatted,int values[],int num){

int max, value,i,W;
char string1[1000],string2[1000],string3[1000],string4[100];
value = values[0];
for (int i=1;i<num;i++){
if (values[i]>value){
    value = values[i];
}

}

max = value;
for (int i=0;i<=num+1;i++){
    formatted[i] = '*';
}
formatted[num+2] ='\n';
formatted[num+3] = '\0';


for (int y = max;y>0;y--){
    string2[0] = '*';
    for(int i=1;i<=num;i++){
    if (values[i-1] >= y){
        string2[i] = 'X';
    }
    else{
        string2[i] = ' ';
    }
}
string2[num+1] = '*';
string2[num +2] = '\n';
strcat(formatted,string2);
}


for (int k=0;k<=num+1;k++){
    string4[k] = '*';
}
string4[num+2] = '\0';
strcat(formatted,string4);

}",0
ewil853,1696799641,2,"void Histogram (char *formatted,int values[],int num){

int max, value;
char string2[1000],string4[100];
value = values[0];
for (int i=1;i<num;i++){
if (values[i]>value){
    value = values[i];
}

}

max = value;
for (int i=0;i<=num+1;i++){
    formatted[i] = '*';
}
formatted[num+2] ='\n';
formatted[num+3] = '\0';


for (int y = max;y>0;y--){
    string2[0] = '*';
    for(int i=1;i<=num;i++){
    if (values[i-1] >= y){
        string2[i] = 'X';
    }
    else{
        string2[i] = ' ';
    }
}
string2[num+1] = '*';
string2[num +2] = '\n';
strcat(formatted,string2);
}


for (int k=0;k<=num+1;k++){
    string4[k] = '*';
}
string4[num+2] = '\0';
strcat(formatted,string4);

}
",0
ewil853,1696799828,3,"void Histogram (char *formatted,int values[],int num){

int max, value;
char string2[1000],string4[100];
value = values[0];
for (int i=1;i<num;i++){
if (values[i]>value){
    value = values[i];
}

}

max = value;
for (int i=0;i<=num+1;i++){
    formatted[i] = '*';
}
formatted[num+2] ='\n';
formatted[num+3] = '\0';


for (int y = max;y>0;y--){
    string2[0] = '*';
    for(int i=1;i<=num;i++){
    if (values[i-1] >= y){
        string2[i] = 'X';
    }
    else{
        string2[i] = ' ';
    }
}
string2[num+1] = '*';
string2[num +2] = '\n';
string2[num+3] = '\0';
strcat(formatted,string2);
}


for (int k=0;k<=num+1;k++){
    string4[k] = '*';
}
string4[num+2] = '\0';
strcat(formatted,string4);

}
",1
exu922,1696828643,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int n) {
  
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }
    

    int pos = 0;
    

    for (int row = 0; row <= maxVal + 1; row++) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            if (row == 0 || row == maxVal + 1) {
                formatted[pos++] = '*';
            } else if (values[col] >= maxVal - row + 1) {
                formatted[pos++] = 'X';
            } else {
                formatted[pos++] = ' ';
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }
    formatted[pos] = '\0';  
}
",0
exu922,1696831009,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int n) {

    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }
    
    int pos = 0;  
    
   
    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos++] = '\n';
    
   
    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            if (values[col] >= row) {
                formatted[pos++] = 'X';
            } else {
                formatted[pos++] = ' ';
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }
    

    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos] = '\0'; 
}",1
fcoo305,1696821757,1,"void Histogram(char* formatted, int* values, int length)
{
	int i;
	int maxVal = 0;

	for (i = 0; i < length; i++)
	{

		if (values[i] >= maxVal)
		{

			maxVal = values[i];
		}

	}

	int valPos = 0;

	for (int y = 0; y <= maxVal + 1; y++)
	{

		for (int x = 0; x <= length + 2; x++)
		{
			if (x == (length + 2))
			{

				formatted[valPos] = '\n';
			}

			else if ((y == 0) || (y == maxVal + 1) || (x == 0) || (x == length + 1))
			{

				formatted[valPos] = '*';
			}

			else if (values[x - 1] > (maxVal - y))
			{

				formatted[valPos] = 'X';
			}

			else
			{

				formatted[valPos] = ' ';
			}

			valPos++;
		}
	}
}
",0
fcoo305,1696823371,2,"void Histogram(char* formatted, int* values, int length)
{
	for (int t = 0; t < 1000; t++)
	{
		formatted[t] = 0;
	}
	int i;
	int maxVal = 0;

	for (i = 0; i < length; i++)
	{

		if (values[i] >= maxVal)
		{

			maxVal = values[i];
		}

	}

	int valPos = 0;

	for (int y = 0; y <= maxVal + 1; y++)
	{

		for (int x = 0; x <= length + 2; x++)
		{

			if (x == (length + 2))
			{

				if (y != maxVal + 1) 
				{
					formatted[valPos] = '\n';
				}
			}

			else if ((y == 0) || (y == maxVal + 1) || (x == 0) || (x == length + 1))
			{

				formatted[valPos] = '*';
			}

			else if (values[x - 1] > (maxVal - y))
			{

				formatted[valPos] = 'X';
			}

			else
			{

				formatted[valPos] = ' ';
			}

			valPos++;
		}
	}
}
",1
fobr691,1696844835,1,"#include <stdio.h>

void Histogram(char *result, int *data, int dataSize) {
    if (dataSize <= 0) {
        return;
    }

    int maxFrequency = 0;
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int width = maxFrequency + 2;
    int height = dataSize + 2;

    int currentIndex = 0;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                result[currentIndex++] = '*';
            } else if (j <= data[i - 1] + 1) {
                result[currentIndex++] = 'X';
            } else {
                result[currentIndex++] = ' ';
            }
        }
        result[currentIndex++] = '\n';
    }
    result[currentIndex] = '\0';
}

int main() {
    int values1[10] = {1, 0, 3, 1, 2, 4, 5, 6, 2, 2};
    int values2[3] = {1, 0, 1};
    char formatted[1000];
    char example[1000] = ""*****\n*X X*\n*****"";

    Histogram(formatted, values1, 10);
    printf(""%s\n\n"", formatted);

    Histogram(formatted, values2, 3);
    printf(""%s\n"", formatted);

    if (strcmp(example, formatted) == 0) {
        printf(""This matches EXACTLY and is correct"");
    }

    return 0;
}",0
fwij709,1696481194,1,"void Histogram(char formatted[1000], int values[], int length)
{
    formatted[0] = '\0';

    int height = 0;
    for (int i = 0; i < length; i++) {
        if (values[i] > height)
        {
            height = values[i];
        }
    }

    char start[100];
    for (int i = 0; i < length + 2; i++) {
        start[i] = '*';
    }
    start[length + 2] = '\0';
    strcat(formatted,start);
    strcat(formatted, ""\n*\0"");


    for (int i = 0; i < height; i++) {
        char graph[100];
        for (int j = 0; j < length; j++) {
            if (values[j] < height - i) {
                graph[j] = ' ';
            }
            else {
                graph[j] = 'X';
            }
        }
        graph[length] = '\0';
        strcat(formatted, graph);
        strcat(formatted, ""*\n*\0"");
    }


    char finish[100];
    for (int i = 0; i < length + 1; i++) {
        finish[i] = '*';
    }
    finish[length + 1] = '\0'; 
    strcat(formatted, finish);
}",1
fwil727,1696821857,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, int *data, int length) {
    int maxVal = 0;

    // Find the maximum value in the data array
    for (int i = 0; i < length; i++) {
        if (data[i] > maxVal) {
            maxVal = data[i];
        }
    }

    // Construct the histogram string
    int row = maxVal + 2;
    int col = length + 2;
    char histogram[row][col];

    // Initialize the histogram grid
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            histogram[i][j] = ' ';
        }
    }

    // Fill the histogram grid with appropriate characters
    for (int i = 0; i < row - 2; i++) {
        for (int j = 1; j < col - 1; j++) {
            if (i >= maxVal - data[j - 1]) {
                histogram[i][j] = 'X';
            }
        }
    }

    // Add border to the histogram
    for (int i = 0; i < row; i++) {
        histogram[i][0] = '*';
        histogram[i][col - 1] = '*';
    }
    for (int j = 0; j < col; j++) {
        histogram[0][j] = '*';
        histogram[row - 1][j] = '*';
    }

    // Copy the histogram grid into the output string
    int index = 0;
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            output[index++] = histogram[i][j];
        }
        output[index++] = '\n';
    }
    output[index] = '\0';  // Add null-terminator
}",0
fwil727,1696821956,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, int *data, int dataSize) {
    int maxValue = 0;
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxValue)
            maxValue = data[i];
    }

    int height = maxValue + 1;
    int width = dataSize;

    char histogram[height][width + 2];  // 2 extra columns for border

    // Initialize histogram with spaces
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width + 2; j++) {
            if (j == 0 || j == width + 1)
                histogram[i][j] = '*';  // Border
            else
                histogram[i][j] = ' ';  // Empty space
        }
    }

    // Fill in the 'X's based on data
    for (int i = 0; i < height; i++) {
        for (int j = 1; j < width + 1; j++) {
            if (height - i <= data[j - 1])
                histogram[i][j] = 'X';
        }
    }

    // Construct the output string
    int outputLen = 0;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width + 2; j++) {
            output[outputLen++] = histogram[i][j];
        }
        output[outputLen++] = '\n';  // New line at the end of each row
    }

    output[outputLen - 1] = '\0';  // Replace the last '\n' with '\0'
}",0
ggao363,1696247528,1,"void Histogram(char* result, int* data, int size) {
    int max = 0;
    result[0] = '\0';
    for (int i = 0; i < size + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (int i = max; i > 0; i--) {
        strcat(result, ""*"");
        for (int j = 0; j < size; j++) {
            if (data[j] >= i) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }

    for (int i = 0; i < size + 2; i++) {
        strcat(result, ""*"");
    }
}",1
gge561,1696724148,1,"#include <stdio.h>
#define _CRT_SECURITY_NO_WARNINGS

void Histogram(char *formatted, int *values, int length){

	int j, k;
	int max = values[0];
	
	for (k = 1; k < length; k++) {
		if (values[k] > max) {
			max = values[k];
		}
	}
	
	
	for (k = 0; k < length + 2; k++) {
		formatted[k] = '*';
	}
	formatted[length + 2] = '\n';

	int ceiling = max;
	int i = length + 3;
	while (i < ((max + 2) * (length + 3) - (length + 3))) {
		formatted[i] = '*';
		formatted[i + length + 1] = '*';
		formatted[i + length + 2] = '\n';

		for (j = 0; j < length; j++) {

			if (ceiling - values[j] <= 0) {
				formatted[i + 1 + j] = 'X';
			}
			else {
				formatted[i + 1 + j] = ' ';
			}
		}
		ceiling--;
		i = i + length + 3;
	}

	for (k = (max + 2) * (length + 3) - (length + 3); k < (max + 2) * (length + 3)-1; k++) {
		formatted[k] =  '*';
	}
	formatted[(max + 2) * (length + 3) - 1] = '\0';
}
",1
gmal045,1696324783,1,"#include <stdio.h>
#include <string.h>

int maxValue(int *values, int length)
{
    int max=0;
    for (int i=0;i < length;i++)
    {
        if (max < values[i])
        {
            max = values[i];
        } 
    }
    return max;
}

// If you want to return a string, you show use a pointer, so that the function calling it can return a string 
void rowCreatin(int *values, int length, int rowNumber, char *rowChars)
{
    char nL[]=""\n"",star[]=""*"",space[]="" "", X[]=""X"";
    for (int j=0;j<length+3;j++)
    {
        if (j == length+2)
            rowChars[j] = *nL;
        else if (rowNumber == -1 || j == 0 || j == length+1)
            rowChars[j] = *star;
        else if (values[j-1] == 0) {
            rowChars[j] = *space;
        }
        else {
            rowChars[j] = *X;
            values[j-1] -= 1;
        }
    }
}

void Histogram(char *formatted, int *values, int length)
{
    int rowNumber;
    char rowChar[length+3], temp[1000];
    formatted[0] = '\0';
    temp[1] = '\0';
    rowNumber = maxValue(values, length);
    for (int i=0;i < rowNumber+2;i++)
    {
        if (i == 0 || i == rowNumber+1)
            rowCreatin(values, length, -1, rowChar);
        else {
            rowCreatin(values, length, 0, rowChar);
        }
        sprintf(temp, ""%s%s"", rowChar, formatted);
        strcpy(formatted, temp);
    }
}",0
gmal045,1696325462,2,"#include <stdio.h>
#include <string.h>

int maxValue(int *values, int length)
{
    int max=0;
    for (int i=0;i < length;i++)
    {
        if (max < values[i])
        {
            max = values[i];
        } 
    }
    return max;
}

// If you want to return a string, you show use a pointer, so that the function calling it can return a string 
void rowCreatin(int *values, int length, int rowNumber, char *rowChars)
{
    char nL[]=""\n"",star[]=""*"",space[]="" "", X[]=""X"";
    for (int j=0;j<length+3;j++)
    {
        if (j == length+2)
            rowChars[j] = *nL;
        else if (rowNumber == -1 || j == 0 || j == length+1)
            rowChars[j] = *star;
        else if (values[j-1] == 0) {
            rowChars[j] = *space;
        }
        else {
            rowChars[j] = *X;
            values[j-1] -= 1;
        }
    }
}

void Histogram(char *formatted, int *values, int length)
{
    int rowNumber;
    char rowChar[length+3], temp[1000];
    for (int i=0;i<=1000;i++) {
        formatted[i] = '\0';
        temp[i] = '\0';
        rowChar[i] = '\0';
    }
    rowNumber = maxValue(values, length);
    for (int i=0;i < rowNumber+2;i++)
    {
        if (i == 0 || i == rowNumber+1)
            rowCreatin(values, length, -1, rowChar);
        else {
            rowCreatin(values, length, 0, rowChar);
        }
        sprintf(temp, ""%s%s"", rowChar, formatted);
        strcpy(formatted, temp);
        formatted[(length+3)*(rowNumber+2)-1] = '\0';
    }
}",0
gmal045,1696327263,3,"#include <stdio.h>
#include <string.h>

int maxValue(int *values, int length)
{
    int max=0;
    for (int i=0;i < length;i++)
    {
        if (max < values[i])
        {
            max = values[i];
        } 
    }
    return max;
}

// If you want to return a string, you show use a pointer, so that the function calling it can return a string 
void rowCreatin(int *values, int length, int rowNumber, char *rowChars)
{
    char nL[]=""\n"",star[]=""*"",space[]="" "", X[]=""X"";
    for (int j=0;j<length+3;j++)
    {
        if (j == length+2)
            rowChars[j] = *nL;
        else if (rowNumber == -1 || j == 0 || j == length+1)
            rowChars[j] = *star;
        else if (values[j-1] == 0) {
            rowChars[j] = *space;
        }
        else {
            rowChars[j] = *X;
            values[j-1] -= 1;
        }
    }
}

void Histogram(char *formatted, int *values, int length)
{
    int rowNumber;
    char rowChar[length+3], temp[1000];
    for (int i=0;i<(length+3)*(rowNumber+3);i++) {
        formatted[i] = '\0';
        temp[i] = '\0';
    }
    for (int i=0;i<=(length+3);i++) {
        rowChar[i] = '\0';
    }
    rowNumber = maxValue(values, length);
    for (int i=0;i < rowNumber+2;i++)
    {
        if (i == 0 || i == rowNumber+1)
            rowCreatin(values, length, -1, rowChar);
        else {
            rowCreatin(values, length, 0, rowChar);
        }
        sprintf(temp, ""%s%s"", rowChar, formatted);
        strcpy(formatted, temp);
        formatted[(length+3)*(rowNumber+2)-1] = '\0';
    }
}",0
gmal045,1696327296,4,"#include <stdio.h>
#include <string.h>

int maxValue(int *values, int length)
{
    int max=0;
    for (int i=0;i < length;i++)
    {
        if (max < values[i])
        {
            max = values[i];
        } 
    }
    return max;
}

// If you want to return a string, you show use a pointer, so that the function calling it can return a string 
void rowCreatin(int *values, int length, int rowNumber, char *rowChars)
{
    char nL[]=""\n"",star[]=""*"",space[]="" "", X[]=""X"";
    for (int j=0;j<length+3;j++)
    {
        if (j == length+2)
            rowChars[j] = *nL;
        else if (rowNumber == -1 || j == 0 || j == length+1)
            rowChars[j] = *star;
        else if (values[j-1] == 0) {
            rowChars[j] = *space;
        }
        else {
            rowChars[j] = *X;
            values[j-1] -= 1;
        }
    }
}

void Histogram(char *formatted, int *values, int length)
{
    int rowNumber;
    rowNumber = maxValue(values, length);
    char rowChar[length+3], temp[1000];
    for (int i=0;i<(length+3)*(rowNumber+3);i++) {
        formatted[i] = '\0';
        temp[i] = '\0';
    }
    for (int i=0;i<=(length+3);i++) {
        rowChar[i] = '\0';
    }
    for (int i=0;i < rowNumber+2;i++)
    {
        if (i == 0 || i == rowNumber+1)
            rowCreatin(values, length, -1, rowChar);
        else {
            rowCreatin(values, length, 0, rowChar);
        }
        sprintf(temp, ""%s%s"", rowChar, formatted);
        strcpy(formatted, temp);
        formatted[(length+3)*(rowNumber+2)-1] = '\0';
    }
}
",1
gmoh887,1696321257,1,"void Histogram(char *formatted, int values[], int numValues)
{

    // creating the top and bottom border 
    char border[100] = {0};
    for (int i = 0; i < numValues+2; i++) {
        border[i] = '*';
    }
    border[numValues + 2] = '\0';

    // finding the highest value in the data
    int highest = 0;
    for (int i = 0; i < numValues; i++) {
        if (values[i] > highest) {
            highest = values[i];
        }
    }

    // creating the histogram
    char text[1000] = {0};
    for (int i = highest; i > 0; i--) {
        char line[100];
        for (int j = 0; j < numValues; j++) {
            if (values[j] >= i) {
                line[j+1] = 'X';
            } else {
                line[j+1] = ' ';
            }
            line[0] = '*';
            line[numValues+1] = '*';
            line[numValues+2] = '\n';
            line[numValues+3] = '\0';
        }
        strcat(text, line);
    }

    // formating the text
    sprintf(formatted, ""%s\n%s%s"", border, text, border);
}",1
gpen695,1696848341,1,"def Histogram(result_str, data, length):

    max_value = max(data)
    
    for i in range(max_value, 0, -1):
    
        line = ''.join(['X' if x >= i else ' ' for x in data])
        
        result_str += f'*{line}*\n'
    
    result_str += '*' * (2 * length + 2) + '\n'

# Example usage:

data = [3, 1, 2, 0, 4, 1]
length = len(data)
result_str = """"
Histogram(result_str, data, length)
print(result_str)
",0
gpen695,1696848552,2,"def Histogram(result_str, data, length):
    max_value = max(data)
    
    for i in range(max_value, 0, -1):
        line = ''.join(['X' if x >= i else ' ' for x in data])
        result_str += f'*{line}*\n'
    
    result_str += '*' * (2 * length + 2) + '\n'

# Example usage:
data = [3, 1, 2, 0, 4, 1]
length = len(data)
result_str = """"
Histogram(result_str, data, length)
print(result_str)
",0
gxu660,1696324209,1,"
void Histogram(char *display, int *nums, int length) {
    for (int x = 0; x < 1000; x++) {
        display[x] = 0;
    }
    for (int i = 0; i < length + 2; i++) {
        display[i] = '*';
    }
    strcat(display, ""\n"");

    //largest height:
    int max_h = 0;
    for (int n = 0; n < length; n++) {
        if (nums[n] > max_h) {
            max_h = nums[n];
        }
    }

    int count = 0;
    while (count < max_h) {
        char current[100] = ""*"";
        int j = 0;
        for (j = 0; j < length; j++) {
            if (nums[j] >= (max_h - count)) {
                strcat(current, ""X"");
            } else {
                strcat(current, "" "");
            }
        }
        strcat(current, ""*"");
        strcat(display, current);
        if (count < max_h) {
            strcat(display, ""\n"");
        }
        
        count++;
    }
    for (int i = 0; i < length + 2; i++) {
        strcat(display, ""*"");
    }


}",1
hbas168,1696293121,1,"void Histogram(char *out_string, int data[], int length) {
    for (int i = 0; i < length + 2; i++) {
        printf(""*"");
    }
    int max = -1;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    for (int j = 0; j < max; j++) {
        printf(""\n*"");
        for (int i = 0; i < length; i++) {
            if (data[i] >= max-j) {
                printf(""X"");
            } else {
                printf("" "");
            }
        }
        printf(""*"");
    }
    printf(""\n"");
    for (int i = 0; i < length + 2; i++) {
        printf(""*"");
    }
    
}",0
hbas168,1696293758,2,"#include <string.h>

void Histogram(char *out_string, int data[], int length) {
    strcpy(out_string, """");
    for (int i = 0; i < length + 2; i++) {
        strcat(out_string, ""*"");
    }
    int max = -1;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }
    for (int j = 0; j < max; j++) {
        strcat(out_string, ""\n*"");
        for (int i = 0; i < length; i++) {
            if (data[i] >= max-j) {
                strcat(out_string, ""X"");
            } else {
                strcat(out_string, "" "");
            }
        }
        strcat(out_string, ""*"");
    }
    strcat(out_string, ""\n"");
    for (int i = 0; i < length + 2; i++) {
        strcat(out_string, ""*"");
    }
    
}",1
hber510,1696484796,1,"void Histogram(char *formatted, int *values, int length) {
    int i = 0;
    int max = values[0];
    
    for (i = 1; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    
    
    for (i = 0; i < length + 2; i++) {
        formatted[i] = '*';
    }
    
    for (i = 1; i <= max; i++) {

        formatted[i*(length + 3) - 1] = '\n';
        

        formatted[i*(length + 3)] = '*';
        
            for (int col = 1; col <= length; col++) {
                if (values[col - 1] >= (max - i + 1)) {
                    formatted[i*(length + 2) + i + col] = 'X';
                } else {
                    formatted[i*(length + 2) + i + col] = ' ';
                }
            }
            
        formatted[(i + 1)*(length + 3) - 2] = '*';
    }
    

    formatted[(max + 1)*(length + 2) + i - 1] = '\n';
    

    for (int final = (length + 2)*(max + 1) + i; final < (length + 2)*(max + 2) + i; final++) {
        formatted[final] = '*';
    }

}",0
hber510,1696485137,2,"void Histogram(char *formatted, int *values, int length) {
    int i = 0;
    int max = values[0];
    
    for (i = 0; i < 1000; i++) {
        formatted[i] = '\0';
    }
    
    for (i = 1; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    
    
    for (i = 0; i < length + 2; i++) {
        formatted[i] = '*';
    }
    
    for (i = 1; i <= max; i++) {

        formatted[i*(length + 3) - 1] = '\n';
        

        formatted[i*(length + 3)] = '*';
        
            for (int col = 1; col <= length; col++) {
                if (values[col - 1] >= (max - i + 1)) {
                    formatted[i*(length + 2) + i + col] = 'X';
                } else {
                    formatted[i*(length + 2) + i + col] = ' ';
                }
            }
            
        formatted[(i + 1)*(length + 3) - 2] = '*';
    }
    

    formatted[(max + 1)*(length + 2) + i - 1] = '\n';
    

    for (int final = (length + 2)*(max + 1) + i; final < (length + 2)*(max + 2) + i; final++) {
        formatted[final] = '*';
    }

}",1
hcro730,1696406781,1,"#include <string.h>

void Histogram(char* histogram, int* data, int len) 
{
	int i, j, k, max = 0;


	for (i = 0; i < len; i++) {
		histogram[i] = '*';
		if (data[i] > max) {
			max = data[i];
		}
	}

	histogram[len] = '*';
	histogram[len + 1] = '*';
	histogram[len+2] = '\0';

	for (k = 0; k < max; k++) {
		strcat(histogram, ""\n"");

		for (j = 0; j <= len + 1; j++) {
			if (j == 0 || j == len + 1) {
				strcat(histogram, ""*"");
			}
			else if (data[j - 1] >= max - k) {
				strcat(histogram, ""X"");
			}
			else {
				strcat(histogram, "" "");
			}
		}
	}

	strcat(histogram, ""\n"");

	for (i = 0; i <= len+1; i++) {
		strcat(histogram, ""*"");
	}

	strcat(histogram, ""\0"");

}",1
hgao080,1696290879,1,"void Histogram(char* formatted, int data[], int length) {
	int cols = length + 3; int largest = 0; int rows;

	for (int i = 0; i < length; i++) {
		if (data[i] > largest) {
			largest = data[i];
		}
	}
	rows = largest + 2;

	largest++;
	for (int r = 0; r < rows; r++) {
		for (int c = r * cols; c < (r + 1) * cols - 1; c++) {

			if (r == 0) {

				if (c == (r + 1) * cols - 2) {
					formatted[c] = '*';
					formatted[c + 1] = '\n';
				}
				else {
					formatted[c] = '*';
				}

			}
			else if (r == rows - 1) {
				if (c == (r + 1) * cols - 2) {
					formatted[c] = '*';
					formatted[c + 1] = '\0';
				}
				else {
					formatted[c] = '*';
				}
			}
			else {

				if (c == r * cols) {
					formatted[c] = '*';
				}
				else if (c == (r + 1) * cols - 2) {
					formatted[c] = '*';
					formatted[c + 1] = '\n';
				}
				else {
					if (r + (largest - r) == data[c - r * cols - 1]) {
						formatted[c] = 'X';
						data[c - r * cols - 1] = data[c - r * cols - 1] - 1;
					}
					else {
						formatted[c] = ' ';
					}
				}

			}
		}
		largest--;
	}
}",1
hma481,1696684188,1,"void Histogram(char* formatted, int* values, int length) 
{
	formatted[0] = '\0';
	char border[1000];
	for (int i = 0; i < length + 2; i++) {
		border[i] = '*';
		if (i == length + 1) {
			border[i + 1] = '\0';
		}
	}
	strcat(formatted, border);
	strcat(formatted, ""\n"");
	
	int height = 0;
	for (int i = 0; i < length; i++) {
		if (values[i] > height) {
			height = values[i];
		}
	}
	
	char temp[1000];
	for (int i = height; i > 0; i--) {
		int pos = 0;
		for (int j = 0; j < length + 2; j++) {
			if (j == 0) {
				temp[j] = '*';
			}
			else if (j == length + 1) {
				temp[j] = '*';
				temp[j + 1] = '\n';
				temp[j + 2] = '\0';
			}
			else if (values[pos] >= i){
				temp[j] = 'X';
				pos++;
			}
			else {
				temp[j] = ' ';
				pos++;
			}
		}
		strcat(formatted, temp);
	}
	strcat(formatted, border);
}",1
hnew638,1696267263,1,"void Histogram(char *formatted, int *values, int length)
{
    int max = 0;

    for (int i = 0; i < length; i++)
    {
        if (values[i] > max)
            max = values[i];
    }

    for (int i = 0; i < length + 2; i++)
    {
        formatted[i] = '*';    
    }
    
    
    
    for (int i = 1; i <= max; i++)
    {

        formatted[i * (length + 3) - 1 ] = '\n';

        for (int j = 1; j <= length + 2 ; j++)
        {
            if (j == 1 || j == length + 2)
                formatted[(i * (length + 3)) + j - 1] = '*';
            else if ((values[j-2] + i) > max)
                formatted[(i * (length + 3)) + j - 1 ] = 'X';
            else
                formatted[(i * (length + 3)) + j - 1] = ' '; 
            
        }
    }

    formatted[(max + 1) * (length + 3) - 1] = '\n';

    for (int i = 0; i < length + 2; i++)
    {
        formatted[(max + 1) * (length + 3) + i ] = '*';    
    }
   
}",0
hnew638,1696267562,2,"void Histogram(char *formatted, int *values, int length)
{
    for (int i = 0; i < 1000; i++)
    {
        formatted[i] = 0;
    }
    
    int max = 0;

    for (int i = 0; i < length; i++)
    {
        if (values[i] > max)
            max = values[i];
    }

    for (int i = 0; i < length + 2; i++)
    {
        formatted[i] = '*';    
    }
    
    
    
    for (int i = 1; i <= max; i++)
    {

        formatted[i * (length + 3) - 1 ] = '\n';

        for (int j = 1; j <= length + 2 ; j++)
        {
            if (j == 1 || j == length + 2)
                formatted[(i * (length + 3)) + j - 1] = '*';
            else if ((values[j-2] + i) > max)
                formatted[(i * (length + 3)) + j - 1 ] = 'X';
            else
                formatted[(i * (length + 3)) + j - 1] = ' '; 
            
        }
    }

    formatted[(max + 1) * (length + 3) - 1] = '\n';

    for (int i = 0; i < length + 2; i++)
    {
        formatted[(max + 1) * (length + 3) + i ] = '*';    
    }
   
}",1
hpir641,1696657668,1,"#include <stdio.h>
#include <string.h>



void Histogram(char* outputstring, int* values, int length) {
	int maxheight = values[0];
	for (int a=0; a < length; a++) {
		if (values[a] > maxheight) {
			maxheight = values[a];
		}
	}
	for (int n = 0; n < maxheight + 2; n++) {
		for (int m = 0; m < length + 3; m++) {
			
			outputstring[n * (length + 3) + m] = 'X';
			if ((n == 0) || (n == maxheight + 1)) {
				outputstring[n * (length + 3) + m] = '*';
			}
			if ((m == 0) || (m == length + 1)) {
				outputstring[n * (length + 3) + m] = '*';
			}
			if (m == length + 2) {
				outputstring[n * (length + 3) + m] = '\n';
			}
		}
	}
	for (int j = 0; j < length; j++){
		for (int i = 1; i < maxheight + 1; i++){
			if ((i <= maxheight - values[j])) {
					outputstring[i * (length + 3) + j+1] = ' ';
			}
		}

	}
	
	/*for (int n = 0; n < maxheight + 2; n++) {
		for (int m = 0; m < length + 3; m++) {
			printf(""%i"", outputstring[n * (length + 3) + m]);
		}
	}
	*/
	outputstring[(maxheight + 2) * (length + 3)-1] = '\0';
}

void main() {
	int values1[10] = { 1, 0, 3, 1, 2, 4, 5, 6, 2, 2 };
	int values2[3] = { 1, 0, 1 };
	char formatted[1000];
	char example[1000] = ""*****\n*X X*\n*****"";

	Histogram(formatted, values1, 10);
	printf(""%s\n\n"", formatted);

	Histogram(formatted, values2, 3);
	printf(""%s\n"", formatted);
	if (strcmp(example, formatted) == 0) {
		printf(""This matches EXACTLY and is correct"");
	}
}",0
hpir641,1696657702,2,"
void Histogram(char* outputstring, int* values, int length) {
	int maxheight = values[0];
	for (int a=0; a < length; a++) {
		if (values[a] > maxheight) {
			maxheight = values[a];
		}
	}
	for (int n = 0; n < maxheight + 2; n++) {
		for (int m = 0; m < length + 3; m++) {
			
			outputstring[n * (length + 3) + m] = 'X';
			if ((n == 0) || (n == maxheight + 1)) {
				outputstring[n * (length + 3) + m] = '*';
			}
			if ((m == 0) || (m == length + 1)) {
				outputstring[n * (length + 3) + m] = '*';
			}
			if (m == length + 2) {
				outputstring[n * (length + 3) + m] = '\n';
			}
		}
	}
	for (int j = 0; j < length; j++){
		for (int i = 1; i < maxheight + 1; i++){
			if ((i <= maxheight - values[j])) {
					outputstring[i * (length + 3) + j+1] = ' ';
			}
		}

	}
	
	/*for (int n = 0; n < maxheight + 2; n++) {
		for (int m = 0; m < length + 3; m++) {
			printf(""%i"", outputstring[n * (length + 3) + m]);
		}
	}
	*/
	outputstring[(maxheight + 2) * (length + 3)-1] = '\0';
}
",1
hrob997,1696778599,1,"void Histogram(char*graph, int data[], int length)
{
	int i;
	int j; 
	// find max 
	int temp = data[0]; 
	for (i = 1; i <= length; i++) {
		if (data[i] > temp) {
			temp = data[i]; 
		}
	}
	int max = temp; 


	// make top border // 
	int rborder = length + 1;
	for (i = 0; i <= rborder; i++) {
		graph[i] = '*'; 
		
	}
	graph[i] = '\0';
	strcat(graph, ""\n"");
	

	//format side borders and data 
	char line[1000];
	line[0] = '*';

	for (i = max; i >0 ; i--) {
		for (j = 0; j <=rborder; j++) {

			if ((j == 0 ) || (j == rborder)) {
				line[j] = '*';
			}
			else if (data[j-1] >= i) {
				line[j] = 'X'; 
			}
			else {
				line[j] = ' ';
			}	
		}
		line[rborder + 1] = '\0';
		strcat(graph, line);
		strcat(graph, ""\n"");
	}

	//make bottom border //
	char bottom[1000]; 
	for (i = 0; i <= rborder; i++) {
		bottom[i] = '*';
	}
	bottom[i] = '\0'; 
	strcat(graph, bottom); 
}",0
hrob997,1696845367,2,"void Histogram(char* graph, int data[], int length)
{
	int i;
	int j;
	// find max 
	int temp = data[0]; 
	for (i = 1; i < length; i++) {
		if (data[i] > temp) {
			temp = data[i];
		}
	}

	int max = temp;


	// make top border // 
	int rborder = length + 1;
	for (i = 0; i < rborder+2; i++) {
		if (i == rborder+1) {
			graph[i] = '\0';
		}
		else graph[i] = '*';

	}
	
	strcat(graph, ""\n"");


	//format side borders and data 
	char line[1000] = """";
	line[0] = '*';

	for (i = max; i > 0; i--) {
		for (j = 0; j < rborder+1; j++) {

			if ((j == 0) || (j == rborder)) {
				line[j] = '*';
			}
			else if (data[j - 1] >= i) {
				line[j] = 'X';
			}
			else {
				line[j] = ' ';
			}
		}
		line[rborder + 1] = '\0';
		strcat(graph, line);
		strcat(graph, ""\n"");
	}

	//make bottom border //
	char bottom[1000] = """";
	for (i = 0; i < rborder + 2; i++) {
		if (i == rborder+1) {
			bottom[i] = '\0';
		}
		else {
			bottom[i] = '*';
		}
	}

	strcat(graph, bottom);

}",1
htew916,1696821006,1,"#include<stdio.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS

void Histogram(char* result, int* data, int n) 
{
    int max = 0;
    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    strcpy(result, """");

    for (int row = max; row >= 0; row--) 
    {
        strcat(result, ""*"");

        for (int i = 0; i < n; i++) {
            if (data[i] > row) {
                strcat(result, ""X"");
            }
            else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*"");

        if (row > 0) {
            strcat(result, ""\n"");
        }
    }
}",0
htew916,1696821022,2,"#include<stdio.h>
",0
htho943,1696410826,1,"#include <stdio.h>
#include <string.h>

// the intent of this function is to take a histogram, display the height of it using 'X' and surround it
// with a border of * AUthor Hamish THompson
void Histogram(char *formatted, int values[], int elements) {
    // declaring all variables
    int i;
    int j;
    int value = 0;
    
    
    // finding the max height of the histogram, to ensure that we have the suitable height for the histogram
    for (i = 0; i < elements; i++) {
        if (values[i] > value) {
            value = values[i];
        }
    }
    
    //initialising the array with spaces
    char arr[value + 2][elements + 2];

    for (i = 0; i < value + 2; i++) {
        for (int j = 0; j < elements + 2; j++) {
            arr[i][j] = ' ';
        }
    }
    
    
// the next two for loops create the outer *'s which make a very nice format to look at
    for (j = 0; j < elements + 2; j++) {
        arr[0][j] = '*';
        arr[value + 1][j] = '*';
    }
    
    
    for (i = 0; i < value + 2; i++) {
        arr[i][0] = '*';
        arr[i][elements + 1] = '*';
    }
    
    // creating the bars using the 'X' key
    for (j = 1; j <= elements; j++) {
        for (i = value; i > value - values[j - 1]; i--) {
            arr[i][j] = 'X';
        }
    }


    // turn an array into a string that represents the histogram
    int index = 0;
    for (i = 0; i < value + 2; i++) {
        for (j = 0; j < elements + 2; j++) {
            formatted[index++] = arr[i][j];
        }
    formatted[index++] = '\n';
    }
    
    // ensure the string is ended in case more than one histogram is desired to be displayed at once
    formatted[index] = '\0';
}",0
htho943,1696411353,2,"#include <stdio.h>
#include <string.h>
// libraries to be included

// the intent of this function is to take a histogram, display the height of it using 'X' and surround it
// with a border of * AUthor Hamish THompson
void Histogram(char *formatted, int values[], int elements) {
    // declaring all variables
    int i;
    int j;
    int value = 0;
    
    
    // finding the max height of the histogram, to ensure that we have the suitable height for the histogram
    for (i = 0; i < elements; i++) {
        if (values[i] > value) {
            value = values[i];
        }
    }
    
    //initialising the array with spaces
    char arr[value + 2][elements + 2];

    for (i = 0; i < value + 2; i++) {
        for (int j = 0; j < elements + 2; j++) {
            arr[i][j] = ' ';
        }
    }
    
    
// the next two for loops create the outer *'s which make a very nice format to look at
    for (j = 0; j < elements + 2; j++) {
        arr[0][j] = '*';
        arr[value + 1][j] = '*';
    }
    
    
    for (i = 0; i < value + 2; i++) {
        arr[i][0] = '*';
        arr[i][elements + 1] = '*';
    }
    
    // creating the bars using the 'X' key
    for (j = 1; j <= elements; j++) {
        for (i = value; i > value - values[j - 1]; i--) {
            arr[i][j] = 'X';
        }
    }


    // turn an array into a string that represents the histogram
    int index = 0;
    for (i = 0; i < value + 2; i++) {
        for (j = 0; j < elements + 2; j++) {
            formatted[index++] = arr[i][j];
        }
        
        // ensuring that the spacing matches EXACTLY what the coderunner wants or else it'll pull a tanty
    if (i < value + 1) {
            formatted[index++] = '\n';
        }
    }
    
    // ensure the string is ended in case more than one histogram is desired to be displayed at once
    formatted[index] = '\0';
}",1
hwin877,1696478697,1,"void Histogram(char* format, int* values, int length)
{
    int i = 0;
    int j = 0;
    int max = 0;
    // finding max value in values array. 
    for (i = 0; i < length; i++)
    {
        if (values[i] > max)
        {
            max = values[i];
        }
    }
    // formatting beginning.
    int counter = 0;
    for (i = 0; i < length + 2; i++)
    {
        format[counter] = '*';
        counter++;
    }
    format[counter] = '\n';
    counter++;
    int row_counter = max;
    int tracker = 0;
    for (i = 0; i < max; i++)
    {
        format[counter] = '*';
        counter++;
        for (j = 0; j < length; j++)
        {
            if (values[j] >= row_counter)
            {
                format[counter] =  'X';
            }
            else
            {
                format[counter] = ' ';
            }
            counter++;
        }
        row_counter--;
        format[counter] = '*';
        counter++;
        format[counter] = '\n';
        counter++;
    }
    for (i = 0; i < length + 2; i++)
    {
        format[counter] = '*';
        counter++;
    }
    printf(""\n"");
    format[counter] = '\0';
}",0
hwin877,1696478739,2,"void Histogram(char* format, int* values, int length)
{
    int i = 0;
    int j = 0;
    int max = 0;
    // finding max value in values array. 
    for (i = 0; i < length; i++)
    {
        if (values[i] > max)
        {
            max = values[i];
        }
    }
    // formatting beginning.
    int counter = 0;
    for (i = 0; i < length + 2; i++)
    {
        format[counter] = '*';
        counter++;
    }
    format[counter] = '\n';
    counter++;
    int row_counter = max;
    for (i = 0; i < max; i++)
    {
        format[counter] = '*';
        counter++;
        for (j = 0; j < length; j++)
        {
            if (values[j] >= row_counter)
            {
                format[counter] =  'X';
            }
            else
            {
                format[counter] = ' ';
            }
            counter++;
        }
        row_counter--;
        format[counter] = '*';
        counter++;
        format[counter] = '\n';
        counter++;
    }
    for (i = 0; i < length + 2; i++)
    {
        format[counter] = '*';
        counter++;
    }
    printf(""\n"");
    format[counter] = '\0';
}",0
hwin877,1696478764,3,"void Histogram(char* format, int* values, int length)
{
    int i = 0;
    int j = 0;
    int max = 0;
    // finding max value in values array. 
    for (i = 0; i < length; i++)
    {
        if (values[i] > max)
        {
            max = values[i];
        }
    }
    // formatting beginning.
    int counter = 0;
    for (i = 0; i < length + 2; i++)
    {
        format[counter] = '*';
        counter++;
    }
    format[counter] = '\n';
    counter++;
    int row_counter = max;
    for (i = 0; i < max; i++)
    {
        format[counter] = '*';
        counter++;
        for (j = 0; j < length; j++)
        {
            if (values[j] >= row_counter)
            {
                format[counter] =  'X';
            }
            else
            {
                format[counter] = ' ';
            }
            counter++;
        }
        row_counter--;
        format[counter] = '*';
        counter++;
        format[counter] = '\n';
        counter++;
    }
    for (i = 0; i < length + 2; i++)
    {
        format[counter] = '*';
        counter++;
    }
    format[counter] = '\0';
}",1
hyan713,1696725424,1,"#include <stdio.h>
#include <string.h>

void Histogram(char table[], int values[], int number)
{
    //initializearray
    for (int i=0; i<1000; i++) {
        table[i] = 0;
    }
    
    int largestNum;
    
    largestNum = 0;
    for (int i=0; i<number; i++){
        if (values[i]>largestNum) {
            largestNum = values[i];
        }
    }
    
    int row, col, strlength, i, j, k, tempLargest;
    row = largestNum + 2;
    col = number + 2;
    tempLargest = largestNum;
    
    for (i=0; i<row; i++){

        if (i==0) {
            for (j=0; j<col; j++){
                table[j] = '*';
            }
            printf(""%s\n"",table);
        }
        
        if (i>0 && i<row-1) {
            
            table[0] = '*';
            table[col-1] = '*';
            
            for (j=1; j<col-1; j++){
                table[j] = ' ';
            }
            
            for (k=0; k<number; k++){
                if (values[k]>=tempLargest) {
                    table[k+1] = 'X';
                }
            }
            
            tempLargest = tempLargest-1;
            
            printf(""%s\n"",table);
        }
        
        if (i==row-1) {
            for (j=0; j<col; j++){
                table[j] = '*';
            }
            
        }
        
    }

}",0
hyan713,1696725484,2,"#include <stdio.h>


void Histogram(char table[], int values[], int number)
{
    //initializearray
    for (int i=0; i<1000; i++) {
        table[i] = 0;
    }
    
    int largestNum;
    
    largestNum = 0;
    for (int i=0; i<number; i++){
        if (values[i]>largestNum) {
            largestNum = values[i];
        }
    }
    
    int row, col, i, j, k, tempLargest;
    row = largestNum + 2;
    col = number + 2;
    tempLargest = largestNum;
    
    for (i=0; i<row; i++){

        if (i==0) {
            for (j=0; j<col; j++){
                table[j] = '*';
            }
            printf(""%s\n"",table);
        }
        
        if (i>0 && i<row-1) {
            
            table[0] = '*';
            table[col-1] = '*';
            
            for (j=1; j<col-1; j++){
                table[j] = ' ';
            }
            
            for (k=0; k<number; k++){
                if (values[k]>=tempLargest) {
                    table[k+1] = 'X';
                }
            }
            
            tempLargest = tempLargest-1;
            
            printf(""%s\n"",table);
        }
        
        if (i==row-1) {
            for (j=0; j<col; j++){
                table[j] = '*';
            }
            
        }
        
    }

}",0
hyan713,1696731437,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *table, int values[], int number)
{
    char rowTable[1000];
    
    //initializearray
    for (int i=0; i<1000; i++) {
        table[i] = 0;
        rowTable[i] = 0;
    }
    
    int largestNum;
    
    largestNum = 0;
    for (int i=0; i<number; i++){
        if (values[i]>largestNum) {
            largestNum = values[i];
        }
    }
    
    int row, col, i, j, k, tempLargest;
    row = largestNum + 2;
    col = number + 2;
    tempLargest = largestNum;
    
    for (i=0; i<row; i++){
        
        if (i==0) {
            for (j=0; j<col; j++){
                rowTable[j] = '*';
            }
            rowTable[col] = '\n';
            
            strcpy(table, rowTable);
        }
        
        if (i>0 && i<row-1) {
            
            rowTable[0] = '*';
            rowTable[col-1] = '*';
            
            for (j=1; j<col-1; j++){
                rowTable[j] = ' ';
            }
            
            for (k=0; k<number; k++){
                if (values[k]>=tempLargest) {
                    rowTable[k+1] = 'X';
                }
            }
            rowTable[col] = '\n';
            
            tempLargest = tempLargest-1;
            
            strcat(table, rowTable);
        }
        
        if (i==row-1) {
            for (j=0; j<col; j++){
                rowTable[j] = '*';
            }
            rowTable[col] = '\0';
            strcat(table, rowTable);
        }
        
    }
    
}",1
hye071,1696703275,1,hell nah,0
ibur427,1696807869,1,"void Histogram(char *formatted, int *values, int length)
{	
	memset(formatted,0,strlen(formatted));
	
	int high = 0;
	for (int i = 0; i < length; i++) {
		if (values[i] > high) {
			high = values[i];
		}
	}

	for (int b = 0; b < (length + 2); b++) {
		formatted[b] = '*';
	}
	formatted[length + 2] = '\n';

	int count = length + 3;
	for (int a = high; a > 0; a--) {

		formatted[count] = '*';
		count ++;

		for (int i = 0; i < length; i++) {
			if (values[i] == a || values[i] > a) {
				formatted[count] = 'X';
				count ++;
			}
			else {
				formatted[count] = ' ';
				count ++;
			}
		}
		
		formatted[count] = '*';
		count ++;
		formatted[count] = '\n';
		count ++;
	}

	for (int c = 0; c < (length + 2); c++) {
		formatted[count] = '*';
		count ++;
	}
}",0
iche428,1696769324,1,"void Histogram(char *result, int *data, int elements)
{
char starTop[elements+3];
for (int i=0; i<elements+2; i++) {
    starTop[i] = '*';
}
starTop[elements+2] = '\n';
starTop[elements+3] = '\0';

int largest=data[0];
for (int z=1; z<elements; z++) {
    if (data[z] > largest) {
        largest = data[z];
    }
}

char histogram[largest][elements+3];

int number=1;
for (int row=largest-1; row>=0; row--) {
    int k=1;
    for (int j=0; j<elements; j++) {
        if (data[j] >= number) {
            histogram[row][k] = 'X';
        } 
        else {
            histogram[row][k] = ' ';
        }
        k++;
    }
    histogram[row][0]='*';
    histogram[row][k]='*';
    histogram[row][k+1]='\n';
    number++;
}
histogram[largest-1][elements+3] = '\0';

char starBottom[elements+3];
for (int i=0; i<elements+2; i++) {
    starBottom[i] = '*';
}
starBottom[elements+2] = '\0';

strcpy(result, starTop);

for (int row=0; row<largest; row++) {
    strcat(result, histogram[row]);
}

strcat(result, starBottom);
}",0
iche428,1696822357,2,"void Histogram(char *result, int *data, int elements)
{
char starTop[elements+3];
for (int i=0; i<elements+2; i++) {
    starTop[i] = '*';
}
starTop[elements+2] = '\n';
starTop[elements+3] = '\0';

int largest=data[0];
for (int z=1; z<elements; z++) {
    if (data[z] > largest) {
        largest = data[z];
    }
}

char histogram[1000];

histogram[0]='*';

int k=1;
for (int number=0; number<largest; number++) {
    for (int j=0; j<elements; j++) {
        if (data[j] >= (largest - number)) {
            histogram[k] = 'X';
            } 
            else {
                histogram[k] = ' ';
            }
            k++;
    }
    histogram[k]='*';
    k++;
    histogram[k]='\n';
    k++;
    histogram[k]='*';
    k++;
}

histogram[k-1] = '\0';

char starBottom[elements+3];
for (int i=0; i<elements+2; i++) {
    starBottom[i] = '*';
}
starBottom[elements+2] = '\0';

strcpy(result, starTop);

strcat(result, histogram);

strcat(result, starBottom);
}",1
ikis164,1696843341,1,"#include <stdio.h>
#include <math.h>
#include <string.h>

void Histogram(char *string, int *intArray, int size) {

    int max = 0;

    for (int i = 0; i < size; i++) {
        if (intArray[i] > max) {
            max = intArray[i];
        }
    }

    int width = size + 2;
    int height = max + 2;
    int histogram[height][width];

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            histogram[i][j] = ' ';
        }
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < intArray[i]; j++) {
            histogram[max - j][i + 1] = 'X';
        }
    }

    for (int i = 0; i < height; i++) {
        histogram[i][0] = '*';
        histogram[i][width - 1] = '*';
    }

    for (int j = 0; j < width; j++) {
        histogram[0][j] = '*';
        histogram[height - 1][j] = '*';
    }

    int index = 0;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            string[index++] = histogram[i][j];
        }
        string[index++] = '\n';
    }
    string[index] = '\0';
}",0
ikis164,1696845952,2,"#include <stdio.h>
#include <math.h>
#include <string.h>

void Histogram(char *string, int *intArray, int length) {

    int max = 0;

    for (int i = 0; i < length; i++) {
        if (intArray[i] > max) {
            max = intArray[i];
        }
    }

    int width = length + 2;
    int height = max + 2;
    int histogram[height][width];

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            histogram[i][j] = ' ';
        }
    }

    for (int i = 0; i < height; i++) {
        histogram[i][0] = '*';
        histogram[i][width - 1] = '*';
    }

    for (int j = 0; j < width; j++) {
        histogram[0][j] = '*';
        histogram[height - 1][j] = '*';
    }

    for (int i = 0; i < length; i++) {
        for (int j = 0; j < intArray[i]; j++) {
            histogram[max - j][i + 1] = 'X';
        }
    }

    int index = 0;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            string[index++] = histogram[i][j];
        }
        string[index++] = '\n';
    }
    string[index - 1] = '\0';
}",1
ilee973,1696820823,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int data[], int size) 
{
    int max = 0;
    for (int x = 0; x < size; x++) {
        if (data[x] > max) {
            max = data[x];
        }
    }
    
    result[0]='\0';
    
    for(int x=0; x<size+2; x++) {
        strcat(result, ""*"");
    }
    
    strcat(result, ""\n"");
    
    for (int i = max-1; i >= 0; i--) {
        strcat(result, ""*"");
        for (int j = 0; j < size; j++) {
            if (data[j] > i) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }
    for(int x=0; x<size +2; x++){
        strcat(result, ""*"");
    }
}",1
imoh000,1696725697,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int size) {
    int max = 0;
    for(int i = 0; i < size; i++) {
        if(values[i] > max) {
            max = values[i];
        }
    }

    int index = 0;
    for(int i = max; i >= 0; i--) {
        formatted[index++] = '*';
        for(int j = 0; j < size; j++) {
            if(values[j] >= i) {
                formatted[index++] = 'X';
            } else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    for(int i = 0; i < size + 2; i++) {
        formatted[index++] = '*';
    }
    formatted[index] = '\0';
}
",0
imoh000,1696726122,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int size) {
    int max = 0;
    for(int i = 0; i < size; i++) {
        if(values[i] > max) {
            max = values[i];
        }
    }
    int inde
x = 0;
    for(int i = 0; i < size + 2; i++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    for(int i = max; i > 0; i--) {
        formatted[index++] = '*';
        for(int j = 0; j < size; j++) {
            if(values[j] >= i) {
                formatted[index++] = 'X';
            } else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    for(int i = 0; i < size + 2; i++) {
        formatted[index++] = '*';
    }
    formatted[index] = '\0';
}
",0
imoh000,1696726308,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int size) {
    int max = 0;
    for(int i = 0; i < size; i++) {
        if(values[i] > max) {
            max = values[i];
        }
    }

    int index = 0;
    for(int i = 0; i < size + 2; i++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';
    for(int i = max; i > 0; i--) {
        formatted[index++] = '*';
        for(int j = 0; j < size; j++) {
            if(values[j] >= i) {
                formatted[index++] = 'X';
            } else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }
    for(int i = 0; i < size + 2; i++) {
        formatted[index++] = '*';
    }
    formatted[index] = '\0';
}
",1
iwes050,1696361582,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int* data_array, int n_elements) {
    int max = 0;

    // Find the maximum value in the data array
    for (int i = 0; i < n_elements; i++) {
        if (data_array[i] > max) {
            max = data_array[i];
        }
    }

    // Initialize the result string (copies an empty string to the result string)
    strcpy(result, """");

    // Loop through rows
    for (int row = max; row >= 0; row--) {
        // Add a new line for all rows except the last one
        if (row != max) {
            strcat(result, ""\n"");
        }

        // Loop through columns
        for (int col = 0; col < n_elements; col++) {
            if (data_array[col] >= row) {
                // Add an 'X' if the value is greater than or equal to the row number
                strcat(result, ""X"");
            } else {
                // Add a space otherwise
                strcat(result, "" "");
            }
        }
    }

    // Add a border of '*' characters
    strcat(result, ""\n"");
    for (int i = 0; i < n_elements + 2; i++) {
        strcat(result, ""*"");
    }
}",0
iwes050,1696361840,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int* data_array, int n_elements) {
    int max = 0;

    // Find the maximum value in the data array
    for (int i = 0; i < n_elements; i++) {
        if (data_array[i] > max) {
            max = data_array[i];
        }
    }

    // Initialize the result string (copies an empty string to the result string)
    strcpy(result, """");

    // Loop through rows
    for (int row = max; row >= 0; row--) {
        // Add a new line for all rows except the last one
        if (row != max) {
            strcat(result, ""\n"");
        }

        // Loop through columns
        for (int col = 0; col < n_elements; col++) {
            if (data_array[col] >= row) {
                // Add an 'X' if the value is greater than or equal to the row number
                strcat(result, ""X"");
            } else {
                // Add a space otherwise
                strcat(result, "" "");
            }
        }
    }

    // Add a border of '*' characters
    strcat(result, ""\n"");
    for (int i = 0; i < n_elements + 2; i++) {
        strcat(result, ""*"");
    }
}

",0
iwes050,1696361872,3,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int* data_array, int n_elements) {
    int max = 0;

    // Find the maximum value in the data array
    for (int i = 0; i < n_elements; i++) {
        if (data_array[i] > max) {
            max = data_array[i];
        }
    }

    // Initialize the result string (copies an empty string to the result string)
    strcpy(result, """");

    // Loop through rows
    for (int row = max; row >= 0; row--) {
        // Add a new line for all rows except the last one
        if (row != max) {
            strcat(result, ""\n"");
        }

        // Loop through columns
        for (int col = 0; col < n_elements; col++) {
            if (data_array[col] >= row) {
                // Add an 'X' if the value is greater than or equal to the row number
                strcat(result, ""X"");
            } else {
                // Add a space otherwise
                strcat(result, "" "");
            }
        }
    }

    // Add a border of '*' characters
    strcat(result, ""\n"");
    for (int i = 0; i < n_elements; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
}
",0
jahn224,1696721941,1,"// Function to generate a histogram as a string
void Histogram(char *result, int *data, int size) {
    // Find the maximum value in the data to determine the height of the histogram
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize the result string
    result[0] = '\0';
    
    //top boarder
    strcat(result, ""*"");
    for (int a=0; a<size;a++) {
        strcat(result,""*"");
    }
    strcat(result, ""*\n"");

    // Loop to construct the histogram
    for (int row = max; row > 0; row--) {
        // Add the left border
        strcat(result, ""*"");

        for (int i = 0; i < size; i++) {
            if (data[i] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }

        // Add the right border and a newline
        strcat(result, ""*\n"");
    }
    
    //bottom boarder 
    strcat(result, ""*"");
    for (int a=0; a<size;a++) {
        strcat(result,""*"");
    }
    strcat(result, ""*\n"");
}",0
jahn224,1696722161,2,"
// Function to generate a histogram as a string
void Histogram(char *result, int *data, int size) {
    // Find the maximum value in the data to determine the height of the histogram
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize the result string
    result[0] = '\0';
    
    //top boarder
    strcat(result, ""*"");
    for (int a=0; a<size;a++) {
        strcat(result,""*"");
    }
    strcat(result, ""*\n"");

    // Loop to construct the histogram
    for (int row = max; row > 0; row--) {
        // Add the left border
        strcat(result, ""*"");

        for (int i = 0; i < size; i++) {
            if (data[i] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }

        // Add the right border and a newline
        strcat(result, ""*\n"");
    }
    
    //bottom boarder 
    strcat(result, ""*"");
    for (int a=0; a<size;a++) {
        strcat(result,""*"");
    }
    strcat(result, ""*"");

}",1
jbam701,1696644380,1,"#include <stdio.h>
#include <stdlib.h>

void Histogram(char *formatted, int* values, int length)
{

	int max = 0;
;
	for (int i = 0; i <= length + 1; i = i + 1) {
		formatted[i] = 42;
	}

	formatted[length + 2] = '\n';
	formatted[length + 3] = '\0';

	for (int i = 0; i < length; i = i + 1) {
		if (values[i] > max) {
			max = values[i];
		}
	}

	for (int i = max; i > 0; i = i - 1) {
		strcat(formatted, ""*"");
		for (int j = 0; j < length; j = j + 1) {
			if (values[j] >= i) {
				strcat(formatted, ""X"");
			}
			else {
				strcat(formatted, "" "");
			}
		}
		strcat(formatted, ""*\n"");
	}
	
	for (int i = 0; i <= length + 1; i = i + 1) {
		strcat(formatted, ""*"");
	}
	
	
}",1
jbro301,1696410871,1,"void Histogram(char* formatted, int* values, int length)
{
// determine maximum value
int i;
int max = values[0];

for (i=0;i<length;i++) {
    if (values[i] > max) {
    max = values[i];
    }
}

// set top border

for (i=0;i<(length+2);i++) {
    formatted[i]='*';
}

//set new line
formatted[length+2]='\n';

//set left border, right border and new line

for (i=1;i<(max+1);i++) {
    formatted[i*(length+3)]='*';
    formatted[i*(length+3)+(length+1)]='*';
    formatted[i*(length+3)+(length+2)]='\n';
}

// set bottom border

for (i=0;i<(length+2);i++) {
    formatted[(length+3)*(max+1)+i]='*';
}

//set columns
int j;
for (i=0;i<length;i++){
    for (j=0;j<max;j++) {
        if (values[i]>(max-(j+1))) {
            formatted[(j+1)*(length+3)+(i+1)] = 'X';
        }
        else {
        formatted[ (j+1)*(length+3)+(i+1)] =' ';
        }
    }

}

//finish Histogram

formatted[(length+3)*(max+2)-1]='\0';

}",1
jcha574,1696800924,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int length)
{
    int newformatted[100];
    int i;
    int highest=-1;
    
    for (i=0;i<length;i++) {
        if (values[i]>highest){
        highest = values[i];
        }
    }
    
    int highestwide = 2 + length;
    
    for(i=0;i<highestwide;i++) {
        formatted[i]='*';
        }
    
    formatted[highestwide]='\n';
    formatted[highestwide+1]='*';
    int j = highestwide+2;
    int x;
    int howmany = highest*(highestwide+1);
    
    while (howmany!=0){
    for(x=0;x<length;x++){
        
        if ((values[x]>highest)||(values[x]==highest)){
                formatted[j]='X';
        }
        else{
            formatted[j]=' ';
        }
        j++;
    }
    formatted[j] ='*';
    formatted[j+1]='\n';
    formatted[j+2]='*';
    j = j+3;
    howmany=howmany-highestwide-1;
    highest=highest-1;
    }

    for(i=j;i<(j+highestwide-1);i++) {
        formatted[i]='*';
        }
    formatted[i]='\0';
}",0
jcha574,1696800947,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int length)
{
    int i;
    int highest=-1;
    
    for (i=0;i<length;i++) {
        if (values[i]>highest){
        highest = values[i];
        }
    }
    
    int highestwide = 2 + length;
    
    for(i=0;i<highestwide;i++) {
        formatted[i]='*';
        }
    
    formatted[highestwide]='\n';
    formatted[highestwide+1]='*';
    int j = highestwide+2;
    int x;
    int howmany = highest*(highestwide+1);
    
    while (howmany!=0){
    for(x=0;x<length;x++){
        
        if ((values[x]>highest)||(values[x]==highest)){
                formatted[j]='X';
        }
        else{
            formatted[j]=' ';
        }
        j++;
    }
    formatted[j] ='*';
    formatted[j+1]='\n';
    formatted[j+2]='*';
    j = j+3;
    howmany=howmany-highestwide-1;
    highest=highest-1;
    }

    for(i=j;i<(j+highestwide-1);i++) {
        formatted[i]='*';
        }
    formatted[i]='\0';
}",1
jchu579,1696834231,1,"void Histogram(char* format, int* hist, int n) {
    int max = 0;
    for (int i = 0; i < n; i++)
    {
        if (hist[i] > max)
        {
            max = hist[i];
        }
    }

    for (int i = 0; i < n + 2; i++)
    {
        strcat(format, ""*"");
    }

    strcat(format, ""\n*"");

    for (int i = max-1; i >= 0; i--)
    {
        for (int j = 0; j <= n - 1; j++)
        {
            if (hist[j] > i)
            {
                strcat(format, ""X"");
            }
            else {
                strcat(format, "" "");
            }
        }
        if (i != 0)
        {
            strcat(format, ""*\n*"");
        }
    }

    strcat(format, ""*\n"");

    for (int i = 0; i < n + 1 ; i++)
    {
        strcat(format, ""*"");
    }

    strcat(format, ""*\n"");
}
",0
jchu579,1696834645,2,"#include <string.h>

void Histogram(char* format, int* hist, int n) {
    int max = 0;
    for (int i = 0; i < n; i++)
    {
        if (hist[i] > max)
        {
            max = hist[i];
        }
    }

    for (int i = 0; i < n + 2; i++)
    {
        strcat(format, ""*"");
    }

    strcat(format, ""\n*"");

    for (int i = max-1; i >= 0; i--)
    {
        for (int j = 0; j <= n - 1; j++)
        {
            if (hist[j] > i)
            {
                strcat(format, ""X"");
            }
            else {
                strcat(format, "" "");
            }
        }
        if (i != 0)
        {
            strcat(format, ""*\n*"");
        }
    }

    strcat(format, ""*\n"");

    for (int i = 0; i < n + 1 ; i++)
    {
        strcat(format, ""*"");
    }

    strcat(format, ""*\n"");
}
",0
jcla431,1696667777,1,"void Histogram(char* formatted, int* data, int n) {
    int max = 0;

    // Find the maximum value in the data array
    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Calculate the width and height of the histogram
    int width = n + 2;
    int height = max + 2;

    // Initialize the formatted string
    int index = 0;
    for (int i = height - 1; i >= 0; i--) {
        for (int j = 0; j < width; j++) {
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                formatted[index++] = '*';
            }
            else if (i <= data[j - 1]) {
                formatted[index++] = 'X';
            }
            else if (i != height) {
                formatted[index++] = ' ';
            }
        }
        
        
        if(i != height + 1) {
            formatted[index++] = '\n';
        }
        
        
        formatted[(height*width) + 2] = '\0';
    }
}",0
jcla431,1696669350,2,"void Histogram(char* formatted, int* values, int arrayLength) {
    int maxNum = values[0];

    for (int i = 1; i < arrayLength; i++) {
        if (values[i] > maxNum) {
            maxNum = values[i];
        }

    }

    int width = arrayLength + 3;
    int height = maxNum + 2;

    char formattedArray[100][100];

    for (int Row = 0; Row < height; Row++) {
        for (int Col = 0; Col < width; Col++) {
            if (Col == width - 1) {
                if (Row != height - 1) {
                    formattedArray[Row][Col] = '\n';
                }
                else {
                    formattedArray[Row][Col] = '\0';
                }
            }
            else if (Col == 0 || Col == width - 2) {
                formattedArray[Row][Col] = 42; 
            }
            else if (Row == 0 || Row == height - 1) {
                formattedArray[Row][Col] = 42;
            }
            else {
                int a = Col - 1;
                if (height - Row - 1 <= values[a]) {
                    formattedArray[Row][Col] = 88;
                }
                else {
                    formattedArray[Row][Col] = 32;
                }
            }
        }
    }
    int k = 0;
    for (int l = 0; l < height; l++) {
        for (int m = 0; m < width; m++) {
            formatted[k] = formattedArray[l][m];
            k++;

        }
    }
}",1
jcla755,1696228957,1,"void Histogram(char *formatted, int *values, int length_values)
{
    int pointer = 0;
    // First line of stars
    int start = 0;
    for(pointer = 0; pointer<start+length_values+2; pointer++)
    {
        formatted[pointer] = '*';
    }
    formatted[pointer] = '\n';
    pointer += 1;

    // Find maximum number
    int max = 0;
    for(int i = 0; i<length_values; i++)
    {
        if(values[i] > max)
        {
            max = values[i];
        }
    }

    // Loop through every row
    for(int i = 0; i < max; i++)
    {
        formatted[pointer] = '*';
        pointer += 1;

        // Find index of every value that is this big
        for(int j = 0; j<length_values; j++)
        {
            if(values[j] >= max-i)
            {
                formatted[pointer] = 'X';
            }
            else
            {
                formatted[pointer] = ' ';
            }
            pointer += 1;
        }

        formatted[pointer] = '*';
        pointer += 1;
        formatted[pointer] = '\n';
        pointer += 1;

    }

    // Last line of stars
    start = pointer;
    for(pointer; pointer<start+length_values+2; pointer++)
    {
        formatted[pointer] = '*';
    }
    
    formatted[pointer] = '\0';
}",0
jcla755,1696229010,2,"void Histogram(char *formatted, int *values, int length_values)
{
    int pointer = 0;
    // First line of stars
    int start = 0;
    for(pointer = 0; pointer<start+length_values+2; pointer++)
    {
        formatted[pointer] = '*';
    }
    formatted[pointer] = '\n';
    pointer += 1;

    // Find maximum number
    int max = 0;
    for(int i = 0; i<length_values; i++)
    {
        if(values[i] > max)
        {
            max = values[i];
        }
    }

    // Loop through every row
    for(int i = 0; i < max; i++)
    {
        formatted[pointer] = '*';
        pointer += 1;

        // Find index of every value that is this big
        for(int j = 0; j<length_values; j++)
        {
            if(values[j] >= max-i)
            {
                formatted[pointer] = 'X';
            }
            else
            {
                formatted[pointer] = ' ';
            }
            pointer += 1;
        }

        formatted[pointer] = '*';
        pointer += 1;
        formatted[pointer] = '\n';
        pointer += 1;

    }

    // Last line of stars
    start = pointer;
    for(pointer = pointer; pointer<start+length_values+2; pointer++)
    {
        formatted[pointer] = '*';
    }
    
    formatted[pointer] = '\0';
}",1
jdu853,1696667026,1,"char Histogram(char *output, int *data, int length)
{
    // FIND MAX VALUE IN ARRAY
    int max_value = data[0];
    for (int i = 1; i < length; i++) 
    {
        if (data[i] > max_value) 
        {
            max_value = data[i];
        }
    }
    
    int cols = length +2;
    int rows = max_value + 2;
    char array[rows][cols]; // INITIALISE ARRAY

    // CREATE THE BACKGROUND FOR HISTOGRAM
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            if (i == 0 || i == rows -1 || j == 0 || j == cols -1)
            {
                array[i][j] = '*';
            }
            else
            {
                array[i][j] = ' ';
            }  
        } 
    } 
    // ------

    for (int i = rows - 2; i > 0 ; i--)
    {
        for (int j = 1; j < cols-1; j++)
        {
            if (i >= rows - data[j-1] -1)
            {
                array[i][j] = 'X';
            }
        }
    }
    
    // CONVERT ARRAY TO STRING
    int count = 0;
    for (int i = 0; i < rows; i++) 
    {
        for (int j = 0; j < cols; j++) 
        {
            output[count++] = array[i][j];
        }
        if (i != rows - 1) 
        {
            output[count++] = '\n'; // NEW LINE AT END OF ROW EXCEPT LAST
        }
    }
    output[count] = '\0';
}",0
jdu853,1696667267,2,"void Histogram(char *output, int *data, int length)
{
    // FIND MAX VALUE IN ARRAY
    int max_value = data[0];
    for (int i = 1; i < length; i++) 
    {
        if (data[i] > max_value) 
        {
            max_value = data[i];
        }
    }
    
    int cols = length +2;
    int rows = max_value + 2;
    char array[rows][cols]; // INITIALISE ARRAY

    // CREATE THE BACKGROUND FOR HISTOGRAM
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            if (i == 0 || i == rows -1 || j == 0 || j == cols -1)
            {
                array[i][j] = '*';
            }
            else
            {
                array[i][j] = ' ';
            }  
        } 
    } 


    for (int i = rows - 2; i > 0 ; i--)
    {
        for (int j = 1; j < cols-1; j++)
        {
            if (i >= rows - data[j-1] -1)
            {
                array[i][j] = 'X';
            }
        }
    }
    
    // CONVERT ARRAY TO STRING
    int count = 0;
    for (int i = 0; i < rows; i++) 
    {
        for (int j = 0; j < cols; j++) 
        {
            output[count++] = array[i][j];
        }
        if (i != rows - 1) 
        {
            output[count++] = '\n'; // NEW LINE AT END OF ROW EXCEPT LAST
        }
    }
    output[count] = '\0';
}",1
jear460,1696574041,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int data[], int dataSize) {
    int max = 0;

    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    result[0] = '\0';

    for (int row = max; row >= 0; row--) {
        strcat(result, ""*"");

        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }

        strcat(result, ""*\n"");
    }
}


",0
jear460,1696574544,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int data[], int dataSize) {
    int max = 0;

    // Find the maximum value in the data
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize the result string
    result[0] = '\0';

    // Create the histogram
    for (int row = max; row >= 0; row--) {
        strcat(result, ""*"");

        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }

        strcat(result, ""*"");

        // Append a newline character unless it's the last row
        if (row != 0) {
            strcat(result, ""\n"");
        }
    }
}

",0
jfen705,1696807765,1,"void Histogram(char *string, int data[], int num)
{
    int i;
    int high = 0;
    for (i = 0; i < num; i++) {
        if (high < data[i]) {
            high = data[i];
        }
    }
    int in = 0;
    for (i = 0; i < num + 2; i++) {
        string[in] = '*';
        in++;
    }
    int a;
    string[in] = '\n';
    in++;
    for (a = high; a > 0; a--) {
        string[in] = '*';
        in++;
        for (i = 0; i < num; i++) {
            if (data[i] >= a) {
                string[in] = 'X';
                in++;
            }
            else {
                string[in] = ' ';
                in++;
            }
        }
        string[in] = '*';
        in++;
        string[in] = '\n';
        in++;
    }
    for (i = 0; i < num + 2; i++) {
        string[in] = '*';
        in++;
    }
    string[in] = '\0';
}",1
jgol495,1696210746,1,"#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

typedef uint32_t u32;
typedef int32_t i32;

// Not very efficient
void Histogram(char* formatBuf, int* values, size_t numvals){
    int max = 0;
    for(int i = 0; i < numvals; i++){
        if(max < values[i]){
            max = values[i];
        }
    }
    int ci = 0;
    // Top border
    for(int i = 0; i < numvals + 2; i++){
        formatBuf[ci++] = '*';
    }
    formatBuf[ci++] = '\n';
    // Entries
    for(int j = max; j != 0; j--){
        formatBuf[ci++] = '*';
        for(int i = 0; i < numvals; i++){
            formatBuf[ci++] = (values[i] >= j) ? 'X' : ' ';
        }
        formatBuf[ci++] = '*';
        formatBuf[ci++] = '\n';
    }
    // Bottom border
    for(int i = 0; i < numvals + 2; i++){
        formatBuf[ci++] = '*';
    }
    // Terminate
    formatBuf[ci] = '\0';
}",1
jjos057,1696763831,1,"void Histogram(char *formatted, int values[], int length) {
    int i;
    int j;
    int idx = 0;

    int max = values[0];
    for (i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
     
    // top
    for (j = 0; j < length + 2; j++) {
        formatted[idx++] = '*';
    }
    formatted[idx++] = '\n';

    // cols
    for (i = max; i > 0; i--) {
        formatted[idx++] = '*';  

        for (j = 0; j < length; j++) {
            if (values[j] >= i) {
                formatted[idx++] = 'X';
            }
            else {
                formatted[idx++] = ' ';
            }
        }
        formatted[idx++] = '*'; 
        formatted[idx++] = '\n';
    }

    // bottom
    for (j = 0; j < length + 2; j++) {
        formatted[idx++] = '*';
    }
    formatted[idx++] = '\0';
}",1
jjun879,1696820495,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int data[], int length)
{
    int maxfreq = 0;

    // Find the highest value in the data
    for (int i = 0; i < length; i++) {
        if (data[i] > maxfreq) {
            maxfreq = data[i];
        }
    }

    result[0] = '\0';

    // Border
    for (int i = 0; i < length+2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

    // Graph
    for (int row = maxfreq-1; row >= 0; row--) {
        strcat(result, ""*"");
        for (int col = 0; col < length; col++) {
            if (data[col] > row) {
                strcat(result, ""X"");
            }
            else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }

    // Border
    for (int i = 0; i < length + 2; i++) {
        strcat(result, ""*"");
    }
}
",1
jkah253,1696456152,1,"void Histogram(char formatted[], int values[], int numValues) {
    // produce an ASCII histogram into array formatted, with vals values.

    int position = 0, maximum = 0;

    // print top line
    for (int i = 0; i < numValues+2; i++) {
        formatted[position] = '*';
        position++;
    }
    formatted[position] = '\n'; // add new line.
    position++;

    // get maximum height
    for (int i = 0; i < numValues; i++) {
        if (values[i] > maximum) {
            maximum = values[i];
        }
    }
    
    // loop through rows from top down.
    for (int row = maximum; row > 0; row--) {
        // i uses natural values, ends at 1.
        
        formatted[position] = '*'; // add star
        position++;

        // loop through cols (of values data)
        for (int col = 0; col < numValues; col++) {
            if (values[col] >= row) {
                formatted[position] = 'X';
            }
            else {
                formatted[position] = ' ';
            }
            position++;
        }

        // add star and new line
        formatted[position] = '*';
        formatted[position + 1] = '\n';
        position += 2;

    }

    // add bottom line
    for (int i = 0; i < numValues+2; i++) {
        formatted[position] = '*';
        position++;
    }

    // add null terminating chxr.
    formatted[position] = '\0';

}",1
jkim828,1696677029,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *format, int *values, int length)
{
    // Finding the maximum value in the array
    int i;
    int maximum = 0;
    for (i = 0; i < length; i++) {
        if (values[i] > maximum) {
            maximum = values[i];
        }
    }

    // Calculate the width of the histogram (including '\n' at the end)
    int width = length + 2;

    // Allocate memory for the temporary 2D array
    char temp[maximum + 2][width + 1];

    // Initialize the temporary array with ' '
    int j;
    for (i = 0; i <= maximum + 1; i++) {
        for (j = 0; j <= width; j++) {
            temp[i][j] = ' ';
        }
    }

    // Putting X into the temp array by values
    for (j = 0; j < length; j++) {
        for (i = maximum; i > maximum - values[j]; i--) {
            temp[i][j + 1] = 'X';
        }
    }

    // Making the border lines
    // Top and bottom lines
    for (j = 0; j <= width; j++) {
        temp[0][j] = '*';
        temp[maximum + 1][j] = '*';
    }

    // Side lines
    for (i = 0; i <= maximum + 1; i++) {
        temp[i][0] = '*';
        temp[i][width - 1] = '*';
        temp[i][width] = '\n';
    }

    // Assigning the temporary 2D array into the 1D pointer
    int k = 0;
    for (i = 0; i <= (maximum + 1); i++) {
        for (j = 0; j <= width; j++) {
            format[k] = temp[i][j];
            k++;
        }
    }

    // Making the null ending of the string
    format[k - 1] = '\0';
}",1
jkim960,1696744906,1,"void Histogram(char result[], int data[], int length) {
    result[0] = '\0';

    int max_freq = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max_freq) {
            max_freq = data[i];
        }
    }

    // Add the top border line
    for (int i = 0; i < length + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");


    for (int row = max_freq; row > 0; row--) {
        strcat(result, ""*"");
        for (int col = 0; col < length; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }

        strcat(result, ""*\n"");
    }

    // Add the bottom border line
    for (int i = 0; i < length + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
}",0
jkim960,1696747953,2,"void Histogram(char result[], int data[], int length) {
    result[0] = '\0';

    int max_freq = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max_freq) {
            max_freq = data[i];
        }
    }

    // Add the top border line
    for (int i = 0; i < length + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");


    for (int row = max_freq; row > 0; row--) {
        strcat(result, ""*"");
        for (int col = 0; col < length; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }

        strcat(result, ""*\n"");
    }

    // Add the bottom border line
    for (int i = 0; i < length + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, """");
}",1
jlah077,1696813117,1,"char Histogram(char output[], int data[], int length)
{
    int index = 0;
    int maxHeight = -1;

    for (int i = 0; i < length; i++)
    {
        if (data[i] > maxHeight)
        {
            maxHeight = data[i];
        }
    }

    for (index; index <= length + 1; index++)
    {
        output[index] = '*';
    }
    output[index] = '\n';
    index++;

    for (int height = maxHeight; height > 0; height--)
    {
        for (int pos = 0; pos <= length + 2; pos++)
        {
            if (pos == 0 || pos == length + 1)
            {
                output[index] = '*';
                index++;
                continue;
            }
            if (pos == length + 2)
            {
                output[index] = '\n';
                index++;
                continue;
            }
            if (data[pos - 1] >= height)
            {
                output[index] = 'X';
            }
            else
            {
                output[index] = ' ';
            }
            index++;
        }
    }
    for (int pos = 0; pos <= length + 1; pos ++)
    {
        output[index] = '*';
        index++;
    }
    output[index] = '\0';
}",0
jlah077,1696813672,2,"void Histogram(char output[], int data[], int length)
{
    int index = 0;
    int maxHeight = -1;

    for (int i = 0; i < length; i++)
    {
        if (data[i] > maxHeight)
        {
            maxHeight = data[i];
        }
    }

    for (; index <= length + 1; index++)
    {
        output[index] = '*';
    }
    output[index] = '\n';
    index++;

    for (int height = maxHeight; height > 0; height--)
    {
        for (int pos = 0; pos <= length + 2; pos++)
        {
            if (pos == 0 || pos == length + 1)
            {
                output[index] = '*';
                index++;
                continue;
            }
            if (pos == length + 2)
            {
                output[index] = '\n';
                index++;
                continue;
            }
            if (data[pos - 1] >= height)
            {
                output[index] = 'X';
            }
            else
            {
                output[index] = ' ';
            }
            index++;
        }
    }
    for (int pos = 0; pos <= length + 1; pos ++)
    {
        output[index] = '*';
        index++;
    }
    output[index] = '\0';
}",1
jlal056,1696649518,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Histogram(char layout, int arr[], int length)
{
	int i;
	int a;

	//find largest value
    a = arr[0];
	for (i = 1; i < length; i++) {
		if (arr[i] > a) {
			a = arr[i];
		}
	}

int highest = a;
int j;

	//start the border
	for (i=0;i<length+2;i++) {
		layout = printf(""*"");
	}
layout = printf(""\n"");

for (j = 0; j < highest; j++) {
	while (a>0){
		//the middle
		layout = printf(""*"");
		for (i = 0; i < length; i++) {
			if (arr[i] == a) {
				layout = printf(""X"");
			}
			else {
				layout = printf("" "");
			}
		}

		for (int k = 0; k < length; k++) {
			if (arr[k] == a){
				arr[k] = arr[k] - 1;
			}
		}
		a = a - 1;
		layout = printf(""*\n"");
	}
}


	//end of border
	for (i=0;i<length+2;i++) {
		layout = printf(""*"");
	}
layout = printf(""%s\0"", layout);
}",0
jlia486,1696848044,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, const int *data, int dataLength) {
    // Find the maximum value in the data
    int maxValue = 0;
    for (int i = 0; i < dataLength; i++) {
        if (data[i] > maxValue) {
            maxValue = data[i];
        }
    }

    // Create the string we are printing
    strcpy(result, """");
    for (int i = 0; i < dataLength + 2; i++) { // here we are printing the top border of asterisk 
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

    // Create the histogram
    for (int row = maxValue-1; row >= 0; row--) {
        strcat(result, ""*""); // Add '*' to the left vertical axis
        for (int i = 0; i < dataLength; i++) {
            if (data[i] > row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n""); // Add '*' to the right vertical axis
    }

    // Print the bottom border
    for (int i = 0; i < dataLength + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
}",0
jlia486,1696848517,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, const int *data, int dataLength) {
    // Find the maximum value in the data
    int maxValue = 0;
    for (int i = 0; i < dataLength; i++) {
        if (data[i] > maxValue) {
            maxValue = data[i];
        }
    }

    // Create the string we are printing
    strcpy(result, """");
    for (int i = 0; i < dataLength + 2; i++) { // here we are printing the top border of asterisk 
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

    // Create the histogram
    for (int row = maxValue-1; row >= 0; row--) {
        strcat(result, ""*""); // Add '*' to the left vertical axis
        for (int i = 0; i < dataLength; i++) {
            if (data[i] > row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n""); // Add '*' to the right vertical axis
    }

    // Print the bottom border
    for (int i = 0; i < dataLength + 2; i++) {
        strcat(result, ""*"");
    }
}",1
jlia948,1696848618,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int size) 
{
    formatted[0] = '\0';
    int idx = 0; 

    int max_val = 0;
    for (int i = 0; i < size; i++)
    {
        if (values[i] > max_val) 
        {
            max_val = values[i];
        }
    }

    for (int i = 0; i < size + 3; i++) 
    {
        formatted[idx++] = '*';
    }
    formatted[idx++] = '\n';

    for (int level = max_val; level >= 1; level++) 
    {
        formatted[idx++] = '*';
        for (int j = 0; j < size; j--) 
        {
            if (values[j] >= level) 
            {
                formatted[idx++] = 'X';
            } else {
                formatted[idx++] = ' ';
            }
        }
        formatted[idx++] = '*';
        formatted[idx++] = '\n';
    }

    for (int i = 0; i < size + 3; i++)
    {
        formatted[idx++] = '*';
    }
    formatted[idx] = '\0';
}",0
jlia948,1696848633,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int size) 
{
    formatted[0] = '\0';
    int idx = 0; 

    int max_val = 0;
    for (int i = 0; i < size; i++)
    {
        if (values[i] > max_val) 
        {
            max_val = values[i];
        }
    }

    for (int i = 0; i < size + 2; i++) 
    {
        formatted[idx++] = '*';
    }
    formatted[idx++] = '\n';

    for (int level = max_val; level >= 1; level--) 
    {
        formatted[idx++] = '*';
        for (int j = 0; j < size; j++) 
        {
            if (values[j] >= level) 
            {
                formatted[idx++] = 'X';
            } else {
                formatted[idx++] = ' ';
            }
        }
        formatted[idx++] = '*';
        formatted[idx++] = '\n';
    }

    for (int i = 0; i < size + 2; i++)
    {
        formatted[idx++] = '*';
    }
    formatted[idx] = '\0';
}",1
jluo379,1696836164,1,"void Histogram(char *result, int *data, int length) {
    // Initialize the result string
    result[0] = '\0';

    // Find the maximum value in the data array
    int max = data[0];
    for (int i = 1; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Generate the top border of the histogram
    strcat(result, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(result, ""-"");
    }
    strcat(result, ""*\n"");

    // Generate the histogram
    for (int level = max; level > 0; level--) {
        strcat(result, ""*"");
        for (int i = 0; i < length; i++) {
            if (data[i] >= level) {
                strcat(result, ""*"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }

    // Remove trailing newline from the last line
    result[strlen(result) - 1] = '\0';
}",0
jluo379,1696836317,2,"void Histogram(char *result, int *data, int length) {
    // Initialize the result string
    result[0] = '\0';

    // Find the maximum value in the data array
    int max = data[0];
    for (int i = 1; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Generate the top border of the histogram
    strcat(result, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");

    // Generate the histogram
    for (int level = max; level > 0; level--) {
        strcat(result, ""*"");
        for (int i = 0; i < length; i++) {
            if (data[i] >= level) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }

    // Remove trailing newline from the last line
    result[strlen(result) - 1] = '\0';
}




",0
jluo379,1696836386,3,"void Histogram(char *result, int *data, int length) {
    // Find the maximum value in the data array
    int max = data[0];
    for (int i = 1; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Calculate the width and height of the histogram
    int width = length + 2;  // Include borders
    int height = max;

    // Initialize the result string with null characters
    memset(result, ' ', width * height);

    // Fill the data points with 'X'
    for (int i = 0; i < length; i++) {
        int level = max - data[i];
        result[level * width + i + 1] = 'X';
    }

    // Add the top border
    memset(result, '*', width);
    result[width - 1] = '\n';

    // Add the bottom border
    for (int i = 0; i < width; i++) {
        result[(height + 1) * width + i] = '*';
    }

    // Add newlines at the end of each line except the last line
    for (int row = 1; row < height + 1; row++) {
        result[row * width + width - 1] = '\n';
    }

    // Null-terminate the result string
    result[(height + 1) * width] = '\0';
}",0
jluo379,1696836495,4,"void Histogram(char *result, int *data, int length) {
    // Initialize the result string
    result[0] = '\0';

    // Find the maximum value in the data array
    int max = data[0];
    for (int i = 1; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Generate the top border of the histogram
    strcat(result, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");

    // Generate the histogram with borders
    for (int level = max; level > 0; level--) {
        strcat(result, ""*"");
        for (int i = 0; i < length; i++) {
            if (data[i] >= level) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }

    // Generate the bottom border of the histogram
    strcat(result, ""*"");
    for (int i = 0; i < length; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");

    // Remove trailing newline from the last line
    result[strlen(result) - 1] = '\0';
}
",1
jmak320,1696846891,1,"char Histogram(char*formatted, char*values, int width){
    int height = values[0];
    // Find the height of the dia
    for (int i = 1; i < width; i++) {
        if(values[i] > height) {
            height = values[i];
        }
    }

    // Create a string of * for the frame
    for (int j = 0; j < height + 1; j++) {
        for (int i = 0; i < width + 1; i++) {       
            if(j == 0 || j == height + 1) {
                
            }
        }
        strcat(formatted, ""\n"");
    }
    return formatted;
}",0
jpar611,1696763154,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int n) {
    // Find the maximum value in the array
    int max = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    // Start building the histogram
    int index = 0;

    // Top border
    for (int i = 0; i < n + 2; i++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';

    // Histogram rows
    for (int i = max; i > 0; i--) {
        formatted[index++] = '*';
        for (int j = 0; j < n; j++) {
            if (values[j] >= i) {
                formatted[index++] = 'X';
            } else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n';
    }

    // Bottom border
    for (int i = 0; i < n + 2; i++) {
        formatted[index++] = '*';
    }
    formatted[index] = '\0';  // Null-terminate the string
}
",1
jpau410,1696335733,1,"int Histogram(char *output, int *values, int length) {
    int max = 0;
    for(int i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    int count = 0;
    for(int i = 0; i < length + 2; i++) {
        output[count] = '*';
        count++;
    }
    output[count] = '\n';
    count++;
    for(int i = max; i >= 1; i--) {
        output[count] = '*';
        count++;
        for(int j = 0; j < length; j++) {
            if(values[j] >= i) {
                output[count] = 'X';
            } else {
                output[count] = ' ';
            }
            count++;
        }
        output[count] = '*';
        count++;  
        output[count] = '\n';
        count++;  
        }
    
    
    for(int i = 0; i < length + 2; i++) {
        output[count] = '*';
        count++;
    }
    output[count] = '\0';
}",0
jpau410,1696335826,2,"void Histogram(char *output, int *values, int length) {
    int max = 0;
    for(int i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    int count = 0;
    for(int i = 0; i < length + 2; i++) {
        output[count] = '*';
        count++;
    }
    output[count] = '\n';
    count++;
    for(int i = max; i >= 1; i--) {
        output[count] = '*';
        count++;
        for(int j = 0; j < length; j++) {
            if(values[j] >= i) {
                output[count] = 'X';
            } else {
                output[count] = ' ';
            }
            count++;
        }
        output[count] = '*';
        count++;  
        output[count] = '\n';
        count++;  
        }
    
    
    for(int i = 0; i < length + 2; i++) {
        output[count] = '*';
        count++;
    }
    output[count] = '\0';
}",1
jpaz106,1696844869,1,"void Histogram(char *format, int *array, int length)
{
    int i, j;
    int max = array[0];
    int height, width;
    int row, column;
    
    for (i = 1; i < length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    
    width = length + 2;
    height = max + 2;
    
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                format[i * width + j] = '*';
            } else {
                if (array[j - 1] >= max - i + 1) {
                    format[i * width + j] = 'X';
                } else if (j == width) {
                    format[i * width + j] = '*';
                } else {
                    format[i * width + j] = ' ';
                }
            }
            
        }
        
        format[i * width + width - 1] = '\n'; 
    }
    
    format[height * width] = '\0'; // Null-terminate the string
    
}",0
jpaz106,1696844906,2,"void Histogram(char *format, int *array, int length)
{
    int i, j;
    int max = array[0];
    int height, width;
    
    for (i = 1; i < length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    
    width = length + 2;
    height = max + 2;
    
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                format[i * width + j] = '*';
            } else {
                if (array[j - 1] >= max - i + 1) {
                    format[i * width + j] = 'X';
                } else if (j == width) {
                    format[i * width + j] = '*';
                } else {
                    format[i * width + j] = ' ';
                }
            }
            
        }
        
        format[i * width + width - 1] = '\n'; 
    }
    
    format[height * width] = '\0'; // Null-terminate the string
    
}",0
jpaz106,1696846153,3,"void Histogram(char *format, int *array, int length)
{
    int i, j;
    int max = array[0];
    int height, width;
    
    for (i = 1; i < length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    
    width = length + 3;
    height = max + 2;
    
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {
            
            if (i == 0 || i == height - 1 || j == 0 || j == width - 2) {
                format[i * width + j] = '*';
            } else {
                if (array[j - 1] >= max - i + 1) {
                    format[i * width + j] = 'X';
                } else if (j == width) {
                    format[i * width + j] = '*';
                } else {
                    format[i * width + j] = ' ';
                }
            }
            
        }
        
        format[i * width + width - 1] = '\n'; 
    }
    
    format[height * width] = '\0'; // Null-terminate the string
    
}",0
jshi444,1696479174,1,"void Histogram(char* formatted, int* values1, int number_of_values) { //need to specify types for all inputs and be pointers, return as char
    int i;
    int max_value = 0; // define this outside the loop
    int j;

    for (i = 0; i < number_of_values + 2; i++) { // 0... 11 which is 12 total
        formatted[i] = '*'; // need to put in single quotation marks   
    }
    formatted[i] = '\0';
    strcat(formatted, ""\n"");

    for (i = 0; i < number_of_values; i++) {
        if (values1[i] > max_value) {
            max_value = values1[i];
        }
    }

    // printf(""%d"", max_value);

    // starting row is 6 so if maxvalue - value[i] = 0 print x
   
    for (i = 1; i < max_value + 1; i++) {
        strcat(formatted, ""*"");
        for (j = 0; j < number_of_values; j++) {        

            if (values1[j] >= max_value - i + 1) {
                strcat(formatted, ""X"");
            }
            else if (values1[j] < max_value - i + 1) {
                strcat(formatted, "" "");
            }
            else if (j == number_of_values-1) {
                strcat(formatted, ""\0"");
            }
       
        }
        strcat(formatted, ""*\n"");
    }


    for (i = 0; i < number_of_values + 2; i++) { // 0... 11 which is 12 total
        strcat(formatted, ""*""); // need to put in single quotation marks   
    }
}",1
jsta466,1696813608,1,"    #include <stdio.h>
    #include <string.h>

    int LargestValue(int *vals, int length) {
        int max = 0;
        for (int i = 0; i < length; i++) {
            if (vals[i] > max) {
                max = vals[i];
            }
        }
        return max;
    }

    void Histogram(char *formatted_histogram, int *vals, int length) {
        int max = LargestValue(vals, length);
        int total_width = length + 2;
        int total_height = max + 2;
        char histogram[total_height][total_width];

        for (int i = 0; i < total_height; i++) {
            for (int j = 0; j < total_width; j++) {
                if (i == 0 || i == total_height - 1 || j == 0 || j == total_width - 1) {
                    histogram[i][j] = '*';
                } else {
                    histogram[i][j] = ' ';
                }
            }
        }
        for (int i = 0; i < max; i++) {
            for (int j = 0; j < length; j++) {
                if (vals[j] >= max - i) {
                    histogram[i + 1][j + 1] = 'X';
                }
            }
        }

        int pos = 0;
        for (int i = 0; i < total_height; i++) {
            for (int j = 0; j < total_width; j++) {
                formatted_histogram[pos++] = histogram[i][j];
            }
            if (i < total_height - 1) {
                formatted_histogram[pos++] = '\n';
            }
        }
        formatted_histogram[pos] = '\0';
    }",1
jwed606,1696277205,1,"
int maxi(int a, int b)
{
    if (a < b)
        return b;
    return a;
}

void append_char(char* output, char val, int* index)
{
    output[0] = val;
    *index = *index + 1;
}

void Histogram(char *output_str, int *values, int value_len)
{
    // Assume output_str has enough capacity

    // Find the largest (tallest bar) value
    int largest_value = 0;
    for (int i = 0; i < value_len; ++i)
        largest_value = maxi(largest_value, values[i]);


    // Define dimensions of the histogram
    int width = value_len + 2;
    int inner_width = value_len;
    int inner_height = largest_value;

    int char_index = 0;

    // Add top border
    for (int x = 0; x < width; ++x)
    {
        append_char(&output_str[char_index], '*', &char_index);
    }
    append_char(&output_str[char_index], '\n', &char_index);

    // Add histogram values
    for (int y = 0; y < inner_height; ++y)
    {
        int real_y = largest_value - y;
        append_char(&output_str[char_index], '*', &char_index);
        for (int x = 0; x < inner_width; ++x)
        {
            char v = ' ';
            if (values[x] >= real_y)
                v = 'X';
            append_char(&output_str[char_index], v, &char_index);
        }
        append_char(&output_str[char_index], '*', &char_index);
        append_char(&output_str[char_index], '\n', &char_index);
    }

    // Add Top border
    for (int x = 0; x < width; ++x)
    {
        append_char(&output_str[char_index], '*', &char_index);
    }

    // Add terminating null
    append_char(&output_str[char_index], '\0', &char_index);
}",1
jwon248,1696248613,1,"void Histogram(char *array, int *values, int length)
{
    array[0] = '\0';
    int i;
    for (i = 0; i < length + 2; i++)
    {
        strcat(array, ""*"");
    }
    strcat(array, ""\n"");

    int maxVal = 0;
    for (i = 0; i < length; i++)
    {
        if (values[i] > maxVal)
        {
            maxVal = values[i];
        }
    }

    int j;
    i = maxVal;
    while (i > 0)
    {
        strcat(array, ""*"");
        for (j = 0; j < length; j++)
        {
            if (values[j] >= i)
            {
                strcat(array, ""X"");
            }
            else
            {
                strcat(array, "" "");
            }
        }
        strcat(array, ""*\n"");
        i--;
    }

    for (i = 0; i < length + 2; i++)
    {
        strcat(array, ""*"");
    }
}",1
jwon253,1696662716,1,"void Histogram(char *formatted, int values[], int num_elements) 
{
    int position = 0;

    // Find the maximum value in the array
    int max = 0;
    for (int i = 0; i < num_elements; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    // Create the top border
    for (int i = 0; i < num_elements + 2; i++) {
        formatted[position++] = '*';
    }

    formatted[position++] = '\n';

    // Loop through the height of the histogram
    for (int row = max; row > 0; row--) {
        formatted[position++] = '*';  // Left border

        // Loop through the values to plot the histogram
        for (int i = 0; i < num_elements; i++) {
            if (values[i] >= row) {
                formatted[position++] = 'X';
            }
            else {
                formatted[position++] = ' ';
            }
        }

        formatted[position++] = '*';  // Right border
        formatted[position++] = '\n';
    }

    // Create the bottom border
    for (int i = 0; i < num_elements + 2; i++) {
        formatted[position++] = '*';
    }

    formatted[position] = '\0';  // Null terminate to mark the end of the string
}",1
jyan420,1696298091,1,"void PrintBorder(char *graph, int *characterIndex, int numColumns)
{
    for (int starIndex = *characterIndex; starIndex <= *characterIndex + numColumns + 1; starIndex++)
    {
        graph[starIndex] = '*';
    }
    *characterIndex = *characterIndex + numColumns + 2;
}

void Histogram(char *graph, int *values, int numValues)
{
    // Get the highest value in the array of values to determine how many lines we need to create:
    int highestValue = 0;
    for (int i = 0; i < numValues; i++)
    {
        if (values[i] > highestValue)
        {
            highestValue = values[i];
        }
    }
    // Prints first line
    int characterIndex = 0;
    PrintBorder(graph, &characterIndex, numValues);
    graph[characterIndex] = '\n';
    characterIndex++;
    // Prints lines based on highest value
    for (int value = highestValue; value > 0; value--)
    {
        graph[characterIndex] = '*';
        characterIndex++;
        for (int column = 0; column < numValues; column++)
        {
            if (values[column] >= value)
            {
                graph[characterIndex] = 'X';
            }
            else
            {
                graph[characterIndex] = ' ';
            }
            characterIndex++;
        }
        graph[characterIndex] = '*';
        characterIndex++;
        graph[characterIndex] = '\n';
        characterIndex++;
    }
    // Prints last line
    PrintBorder(graph, &characterIndex, numValues);
    // Prints nul character
    graph[characterIndex] = '\0';
}",1
jyua529,1696666002,1,"void Histogram(char *result, int arr[], int n) {
    int height = arr[0];
    int width = n;

    for (int i = 1; i<n; i++) {
        if (arr[i] > height) {
            height = arr[i];
        }
    }
    
    for (int i = 0; i < width + 2; i++) {
        result[i] = '*';
    }
    result[width + 2] = '\n';

    int position = width + 3; 

    
    for (int i = height; i > 0; i--) {
        result[position++] = '*';
        for (int j = 0; j < width; j++) {
            if (arr[j] >= i) {
                result[position++] = 'X';
            } else {
                result[position++] = ' ';
            }
        }
        result[position++] = '*';
        result[position++] = '\n';
    }


    for (int i = 0; i < width + 2; i++) {
        result[position++] = '*';
    }
    result[position] = '\0';  
}",1
jzho786,1696847431,1,"void
Histogram (char *result, int *input, int length)
{
  
int max = 0, i = 0;
  
 
while (i < length)
    {
      
if (input[i] > max)
	{
	  
max = input[i];
	
}
      
i++;
    
}
  
 
int width = max + 3;
  
strcpy (result, """");
  
 
int j = 0;
  
while (j < width)
    {
      
strcat (result, ""*"");
      
j++;
    
}
  
strcat (result, ""\n"");
  
 
i = 0;
  
while (i < max)
    {
      
strcat (result, ""*"");
      
 
int j = 0;
      
while (j < length)
	{
	  
if (input[j] >= (max - i))
	    {
	      
strcat (result, ""X"");
	    
}
	  else
	    {
	      
strcat (result, "" "");
	    
}
	  
j++;
	
}
      
 
strcat (result, ""*\n"");
      
i++;
    
}
  
 
j = 0;
  
while (j < width)
    {
      
strcat (result, ""*"");
      
j++;
    
}
  
strcat (result, ""\n"");

 
}",0
jzho786,1696848491,2,"void Histogram(char *result, int *input, int length) {
    int max = 0;

    for (int i = 0; i < length; i++) {
        if (input[i] > max) {
            max = input[i];
        }
    }

    int borderLength = length + 2;
    char topBorder[borderLength + 1];

    memset(topBorder, '*', borderLength);
    topBorder[borderLength] = '\0';

    strcpy(result, topBorder);
    strcat(result, ""\n"");

    for (int i = 0; i < max; i++) {
        strcat(result, ""*"");
        for (int j = 0; j < length; j++) {
            if (j < length - 1) {
                if (input[j] >= (max - i)) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            } else {
                if (input[j] >= (max - i)) {
                    strcat(result, ""X*"");
                } else {
                    strcat(result, "" *"");
                }
            }
        }
        strcat(result, ""\n"");
    }

    strcat(result, topBorder);
}",1
kahk161,1696324546,1,"/* CREATES A HISTOGRAM */
void Histogram(char* formatted, int* values, int numbers)
{ // formatted = formatted historgram, values = data values, numbers = number of data entries
	// finding the max value
	int i, max = 0;
	for (i = 0; i < numbers; i++) {
		if (values[i] > max) {
			max = values[i];
		}// if end
	}// for i end
	// we know the max value

	// adding top boarder
	int pos=0, j;
	for (j = 0; j < numbers + 2; j++) {
			formatted[j] = '*';
			pos++;
	}// for j end]
	formatted[pos] = '\n';
	pos++;

	// adding historgram values
	int row, val;
	int current_height =  max;
	for (row = 0; row < max; row++) {
		formatted[pos] = '*';
		pos++;

		for (val = 0; val < numbers; val++) {

			if(values[val] >= current_height) {
				formatted[pos] = 'X';
			}
			else {
				formatted[pos] = ' ';
			}// if >= end

			pos++;
		}// for val end

		formatted[pos] = '*';
		pos++;
		formatted[pos] = '\n';
		pos++;
		current_height--;
	}// for row end

	// adding bottom boarder
	int k;
	for (k = 0; k < numbers + 2; k++) {
		formatted[pos] = '*';
		pos++;
	}// for k end
	formatted[pos] = '\0';

	return;
}// Historgam end",1
kbha969,1696472362,1,"#include<string.h>
#include <stdio.h>

void Histogram(char *formatted, int *data, int values) {
    
    formatted[0] = '\0';
    int i,j;
    for (i = -1; i<= values; i++) {
     strcat(formatted,""*"");
    }
    strcat(formatted,""\n"");
    
    int max = data[0];
    for (int i = 0; i < values; i++) {     
 
       if(data[i] > max)    
           max = data[i];    
    }

        for (i = 0; i<max; i++) {
            strcat(formatted,""*"");
            for (j = 0; j<values; j++) {
                if (data[j] >= max-i) {
                    strcat(formatted,""X"");
                }
                else {
                    strcat(formatted,"" "");
                }
            }
        strcat(formatted,""*\n"");
        }

 
    for (i = -1; i<= values; i++) {
     strcat(formatted,""*"");
    }
  strcat(formatted,""\0"");
}",1
kcao565,1696822653,1,"void Histogram(char* result, int* data, int size) 
{
    int maxFrequency = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    result[0] = '\0';

    for (int i = 0; i < size + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

    for (int row = 0; row < maxFrequency; row++) {
        strcat(result, ""*"");
        for (int col = 0; col < size; col++) {
            if (data[col] >= maxFrequency - row) {
                strcat(result, ""X"");
            }
            else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }

    for (int i = 0; i < size + 2; i++) {
        strcat(result, ""*"");
    }
}",1
kcao657,1696760053,1,"void Histogram(char* stringstore, int* data, int length) {
    int maximum = 0;

    int i = 0;

    //find the maximum value of dataset to set as the numver of rows
    while (i < length) {
        if (data[i] > maximum) {
            maximum = data[i];
        }
         i++;
    }

    //printing first line of stars, adding 2 to account for borders
    int firstline = 0;
    while (firstline < length + 2) {
        printf(""*"");
        firstline = firstline +1;
    }
    printf(""\n"");

    //going through each row and column and checking whether an X or space should be printed.
    for (int rows = maximum; rows >= 0; rows--) {
        for (int cols = 0; cols < length; cols++) {
            if (data[cols] >= rows) {
                stringstore[cols] = 'X';
            }
            else {
                stringstore[cols] = ' ';
            }
        }
        stringstore[length] = '\0';
        //printing a star in front and at the end of each line
        printf(""*%s*\n"", stringstore);
    }

    //printing the last line of stars, adding two to account for borders
    int lastline = 0;
    while (lastline < length + 2) {
        printf(""*"");
        lastline = lastline +1;
    }
    printf(""\n"");
}",0
kcao657,1696760418,2,"void Histogram(char* stringstore, int* data, int length) {
    int maximum = 0;

    int i = 0;

    //find the maximum value of dataset to set as the numver of rows
    while (i < length) {
        if (data[i] > maximum) {
            maximum = data[i];
        }
         i++;
    }

    //printing first line of stars, adding 2 to account for borders
    int firstline = 0;
    while (firstline < length + 2) {
        printf(""*"");
        firstline = firstline +1;
    }
    printf(""\n"");

    //going through each row and column and checking whether an X or space should be printed.
    for (int rows = maximum; rows > 0; rows--) {
        for (int cols = 0; cols < length; cols++) {
            if (data[cols] >= rows) {
                stringstore[cols] = 'X';
            }
            else {
                stringstore[cols] = ' ';
            }
        }
        stringstore[length] = '\0';
        //printing a star in front and at the end of each line
        printf(""*%s*\n"", stringstore);
    }
    //resets a block of memory
    memset(stringstore, ' ', length);

    //printing the last line of stars, adding two to account for borders
    int lastline = 0;
    while (lastline < length + 2) {
        printf(""*"");
        lastline = lastline +1;
    }
    printf(""\n"");
}
",0
kcao657,1696768344,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>


void Histogram(char* stringstore, int* data, int length) {
    int maximum = 0;

    //finding the maximum number of the dataset - used for the row value later
    int numdata = 1;
    while (numdata < length) {
        if (data[numdata] > maximum) {
            maximum = data[numdata];
        }
        numdata = numdata + 1;
    }

    int count = 0;

    // Printing the first line of stars, adding 2 to account for borders
    int i = 0;
    while (i < length + 2) {
        stringstore[count] = '*';
        count = count + 1;
        i = i + 1;
    }

    stringstore[count] = '\n';
    count = count + 1;
    stringstore[count] = '*';
    count = count + 1;

    // Going through each row and column and checking whether an X or space should be printed.
    int row = 0;
    while (row < maximum) {
        int col = 0;
        while (col < length) {
            if (data[col] < (maximum - row)) {
                stringstore[count] = ' ';
                count = count + 1;
            }
            else {
                stringstore[count] = 'X';
                count = count + 1;
            }
            col = col + 1;
        }

        stringstore[count] = '*';
        count = count + 1;
        stringstore[count] = '\n';
        count = count + 1;
        stringstore[count] = '*';
        count = count + 1;

        row = row + 1;
    }

    // Printing the last line of stars, adding two to account for borders
    int last = 0;
    while (last < length + 1) {
        stringstore[count] = '*';
        count = count + 1;
        last = last + 1;
    }

    stringstore[count] = '\0';
}",0
kcao657,1696768620,4,"void Histogram(char* stringstore, int* data, int length) {
    int maximum = 0;

    //finding the maximum number of the dataset - used for the row value later
    int numdata = 0;
    while (numdata < length) {
        if (data[numdata] > maximum) {
            maximum = data[numdata];
        }
        numdata = numdata + 1;
    }

    int count = 0;

    // Printing the first line of stars, adding 2 to account for borders
    int i = 0;
    while (i < length + 2) {
        stringstore[count] = '*';
        count = count + 1;
        i = i + 1;
    }

    stringstore[count] = '\n';
    count = count + 1;
    stringstore[count] = '*';
    count = count + 1;

    // Going through each row and column and checking whether an X or space should be printed.
    int row = 0;
    while (row < maximum) {
        int col = 0;
        while (col < length) {
            if (data[col] < (maximum - row)) {
                stringstore[count] = ' ';
                count = count + 1;
            }
            else {
                stringstore[count] = 'X';
                count = count + 1;
            }
            col = col + 1;
        }

        stringstore[count] = '*';
        count = count + 1;
        stringstore[count] = '\n';
        count = count + 1;
        stringstore[count] = '*';
        count = count + 1;

        row = row + 1;
    }

    // Printing the last line of stars, adding two to account for borders
    int last = 0;
    while (last < length + 1) {
        stringstore[count] = '*';
        count = count + 1;
        last = last + 1;
    }

    stringstore[count] = '\0';
}",1
kfer833,1696734966,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int data[], int length) {
    int maxFrequency = 0;
    
    for (int i = 0; i < length; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    for (int i = maxFrequency; i >= 0; --i) {
        strcat(result, ""************\n"");
        for (int j = 0; j < length; ++j) {
            if (data[j] >= i) {
                strcat(result, ""* X "");
                data[j]--;
            } else {
                strcat(result, ""*   "");
            }
        }
        strcat(result, ""*\n"");
    }
    strcat(result, ""************\n"");
}
",0
kgra470,1696688078,1,"void Histogram(char *string, int values[],int length){
    int max=0;
    for(int i=0;i<length;i++){
        if(values[i]>max){
            max=values[i];
        }
    }
    char format_array[max+2][length+2];
    for(int i=0;i<max+2;i++){
        for(int j=0;j<length+2;j++){
            format_array[i][j]=' ';
        }
    }
    for(int i=0;i<(max+2);i++){
        format_array[i][0]='*';
        format_array[i][length+1]='*';
    }
    for(int j=0;j<(length+2);j++){
        format_array[0][j]='*';
        format_array[max+1][j]='*';
    }
    int plot_val;
    for(int i=0;i<length;i++){
        plot_val=values[i];
        int plot_count=1;
        for(int j=max;j>0;j--){
            if(plot_count<=plot_val){
                format_array[j][i+1]='X';
                plot_count++;
            }
        }
    }

    int str_count=0;
    for(int i=0;i<max+2;i++){
        for(int j=0;j<length+2;j++){
            string[str_count]=format_array[i][j];
            if(j==(length+1)) {
                string[str_count + 1] = '\n';
                str_count = str_count + 2;
            }
            else{
                str_count++;
            }
        }
    }
    string[str_count-1]='\0';
}",1
khew624,1696659088,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, int *data, int length) 
{
    int max = 0;
    
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int index = 0; 

    for (int col = 0; col < length + 2; col++) {
        output[index++] = '*';
    }
    output[index++] = '\n'; 

    for (int row = max; row > 0; row--) {
        output[index++] = '*'; 

        for (int col = 0; col < length; col++) {
            if (data[col] >= row) {
                output[index++] = 'X';
            } else {
                output[index++] = ' ';
            }
        }

        output[index++] = '*'; 
        output[index++] = '\n'; 
    }

    for (int col = 0; col < length + 2; col++) {
        output[index++] = '*';
    }

    output[index] = '\0';

    printf(""%s"", output);
}",0
khew624,1696659216,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* output, int* data, int length) {
    int max = 0;

    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int index = 0; 

 
    for (int col = 0; col < length + 2; col++) {
        output[index++] = '*';
    }
    output[index++] = '\n'; 

   
    for (int row = max; row > 0; row--) {
        output[index++] = '*'; 


        for (int col = 0; col < length; col++) {
            if (data[col] >= row) {
                output[index++] = 'X';
            }
            else {
                output[index++] = ' ';
            }
        }

        output[index++] = '*'; 
        output[index++] = '\n'; 
    }

    for (int col = 0; col < length + 2; col++) {
        output[index++] = '*';
    }

    output[index] = '\0'; 

    printf(""%s"", output);
}",0
khew624,1696659505,3,"#include <stdio.h>
#include <string.h>

void Histogram(char* output, int* data, int length) 
{
    int max = 0;

    // Find max value
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int index = 0; // posiiton count

    // Top * print
    for (int col = 0; col < length + 2; col++) {
        output[index++] = '*';
    }
    output[index++] = '\n'; 

    for (int row = max; row > 0; row--) {
        output[index++] = '*'; // Start each row with a '*'

       
        for (int col = 0; col < length; col++) {
            if (data[col] >= row) {
                output[index++] = 'X';
            }
            else {
                output[index++] = ' ';
            }
        }

        output[index++] = '*'; // End rows with *
        output[index++] = '\n'; 
    }

    // Bottom * print
    for (int col = 0; col < length + 2; col++) {
        output[index++] = '*';
    }
    output[index++] = '\n'; 
    output[index] = '\0'; 

    printf(""%s"", output);
}",0
khew624,1696667186,4,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int length) {
    int max = 0;
    for (int i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

  
    int index = 0;

    // Top *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n'; 

    for (int row = 0; row < max; row++) {
        formatted[index++] = '*'; 
        for (int col = 0; col < length; col++) {
            if (max - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*'; 
        formatted[index++] = '\n'; 
    }

    // Bottom *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n'; 

    formatted[index] = '\0'; 
}",0
khew624,1696667476,5,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int length) {
    int max = 0;
    for (int i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    
    int index = 0;

    // Top *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n'; 

    for (int row = 0; row < max; row++) {
        formatted[index++] = '*'; 
        for (int col = 0; col < length; col++) {
            if (max - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        formatted[index++] = '\n'; 
    }

    // Bottom *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n'; 

    formatted[index] = '\0'; 

    int end = index - 1;
    while (end >= 0 && (formatted[end] == ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end--;
    }
}",1
khew624,1696667875,6,"#include <stdio.h>
#include <string.h>

void GenerateHistogram(char* formatted, int values[], int length) 
{
    int maxHeight = 0; 

    // Find the maximum height in input array
    for (int i = 0; i < length; i++) {
        if (values[i] > maxHeight) {
            maxHeight = values[i];
        }
    }

    int index = 0;

    // Top *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';

    // Generate histogram
    for (int row = 0; row < maxHeight; row++) {
        formatted[index++] = '*';

        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }

        formatted[index++] = '*';
        formatted[index++] = '\n';
    }

    // Bottom *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';

    formatted[index] = '\0'; 

    
    int end = index - 1;
    while (end >= 0 && (formatted[end] == ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end--;
    }
}",0
khew624,1696668051,7,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int length) 
{
    int maxHeight = 0; 

    // Find the maximum height in input array
    for (int i = 0; i < length; i++) {
        if (values[i] > maxHeight) {
            maxHeight = values[i];
        }
    }

    int index = 0;

    // Top *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';

    // Generate histogram
    for (int row = 0; row < maxHeight; row++) {
        formatted[index++] = '*';

        for (int col = 0; col < length; col++) {
            if (maxHeight - values[col] <= row) {
                formatted[index++] = 'X';
            }
            else {
                formatted[index++] = ' ';
            }
        }

        formatted[index++] = '*';
        formatted[index++] = '\n';
    }

    // Bottom *
    for (int col = 0; col < length + 2; col++) {
        formatted[index++] = '*';
    }
    formatted[index++] = '\n';

    formatted[index] = '\0'; 

    
    int end = index - 1;
    while (end >= 0 && (formatted[end] == ' ' || formatted[end] == '\n')) {
        formatted[end] = '\0';
        end--;
    }
}",1
kjoe685,1696728408,1,"void Histogram(char* output, int data[], int numData)
{
	// find largest value in data
	int i, j, pos;
	int largestData = data[0];
	for (i = 1; i < numData; i++) {
		if (data[i] > largestData) {
			largestData = data[i];
		}
	}

	int rowWidth = numData + 3;
	int numRows = largestData + 2;

	// blanks(to be removed)
	for (i = 0; i < rowWidth * numRows; i++) {
		output[i] = '+';
	}

	//header
	for (i = 0, j = 0; j < rowWidth; j++) {
		pos = i * rowWidth + j;
		output[pos] = '*';
		
	}
	
	//footer
	for (i = numRows-1, j = 0; j < rowWidth; j++) {
		pos = i * rowWidth + j;
		output[pos] = '*';

	}

	//left bar
	for (i = 0, j = 0; i < numRows; i++) {
		pos = i * rowWidth + j;
		output[pos] = '*';
	}

	//right bar
	for (i = 0, j = rowWidth-2; i < numRows; i++) {
		pos = i * rowWidth + j;
		output[pos] = '*';
	}

	//newlines
	for (i = 0, j = rowWidth-1; i < numRows; i++) {
		pos = i * rowWidth + j;
		output[pos] = '\n';
	}

	for (i = 0; i < largestData;i++) {
		for (j = 0; j < numData; j++) {
			pos = (i + 1) * rowWidth + (j+1);
			if (i < largestData - data[j]) {
				output[pos] = ' ';
			}
			else {
				output[pos] = 'X';
			}
		}
	}

	output[rowWidth * numRows-1] = '\0';
	return;
}",1
kjoe685,1696728454,2,"void Histogram(char* output, int data[], int numData)
{
	// find largest value in data
	int i, j, pos;
	int largestData = data[0];
	for (i = 1; i < numData; i++) {
		if (data[i] > largestData) {
			largestData = data[i];
		}
	}

	int rowWidth = numData + 3;
	int numRows = largestData + 2;

	//header
	for (i = 0, j = 0; j < rowWidth; j++) {
		pos = i * rowWidth + j;
		output[pos] = '*';
		
	}
	
	//footer
	for (i = numRows-1, j = 0; j < rowWidth; j++) {
		pos = i * rowWidth + j;
		output[pos] = '*';

	}

	//left bar
	for (i = 0, j = 0; i < numRows; i++) {
		pos = i * rowWidth + j;
		output[pos] = '*';
	}

	//right bar
	for (i = 0, j = rowWidth-2; i < numRows; i++) {
		pos = i * rowWidth + j;
		output[pos] = '*';
	}

	//newlines
	for (i = 0, j = rowWidth-1; i < numRows; i++) {
		pos = i * rowWidth + j;
		output[pos] = '\n';
	}

	for (i = 0; i < largestData;i++) {
		for (j = 0; j < numData; j++) {
			pos = (i + 1) * rowWidth + (j+1);
			if (i < largestData - data[j]) {
				output[pos] = ' ';
			}
			else {
				output[pos] = 'X';
			}
		}
	}

	output[rowWidth * numRows-1] = '\0';
	return;
}",1
klam376,1696840256,1,"void Histogram(char *str, int *data, int size)
{
    int cols = 0;
    for (int a = 0; a<size; a++)    {
        if (data[a]>cols)    {
            cols = data[a];
        }
    }

    for (int j = 0; j <=cols+1; j++)
    {
        for (int i = 0; i <= size + 1; i++)
        {
            if ((j == 0 | j == cols+1) && (i < size))
            {
                strcat(str, ""*"");
            }

            if (i==0 | i==size)   {
                strcat(str,""*"");
            }
            
            if ((data[i]>= cols-j+1) && (j!=0) && (j!=cols+1) && (i<size)) {
                strcat(str,""X"");
            }else if ((data[i]<cols-j+1) && (j!=0) && (j!=cols+1) && (i<size)) {
                strcat(str,"" "");
            }
            

            if (i==size+1 && j<cols+1)  {
                strcat(str,""\n"");
            }
        }
    }   
}",0
klam376,1696840840,2,"void Histogram(char *str, int *data, int size)
{
    int cols = 0;
    for (int a = 0; a<size; a++)    {
        if (data[a]>cols)    {
            cols = data[a];
        }
    }

    for (int j = 0; j <=cols+1; j++)
    {
        for (int i = 0; i <= size + 1; i++)
        {
            if (((j == 0) || (j == cols+1)) && (i < size))
            {
                strcat(str, ""*"");
            }

            if ((i==0) || (i==size))   {
                strcat(str,""*"");
            }
            
            if ((data[i]>= cols-j+1) && (j!=0) && (j!=cols+1) && (i<size)) {
                strcat(str,""X"");
            }else if ((data[i]<cols-j+1) && (j!=0) && (j!=cols+1) && (i<size)) {
                strcat(str,"" "");
            }
            

            if (i==size+1 && j<cols+1)  {
                strcat(str,""\n"");
            }
        }
    }   
}",0
klam376,1696841525,3,"void Histogram(char *str, int *data, int size)
{
    strcpy(str,"""");
    
    int cols = 0;
    for (int a = 0; a<size; a++)    {
        if (data[a]>cols)    {
            cols = data[a];
        }
    }

    for (int j = 0; j <=cols+1; j++)
    {
        for (int i = 0; i <= size + 1; i++)
        {
            if (((j == 0) || (j == cols+1)) && (i < size))
            {
                strcat(str, ""*"");
            }

            if ((i==0) || (i==size))   {
                strcat(str,""*"");
            }
            
            if ((data[i]>= cols-j+1) && (j!=0) && (j!=cols+1) && (i<size)) {
                strcat(str,""X"");
            }else if ((data[i]<cols-j+1) && (j!=0) && (j!=cols+1) && (i<size)) {
                strcat(str,"" "");
            }
            

            if (i==size+1 && j<cols+1)  {
                strcat(str,""\n"");
            }
        }
    }   
}",1
kmal768,1696725871,1,"#include <stdio.h>

void Histogram(char* formatted, int* values, int num_values) {
	int i, j, k, max_val, border_width, border_height, counter, space, reverse_counter;

	border_width = num_values + 1;
	max_val = values[0];

	for (k = 1; k < num_values; k++) {
		if (max_val < values[k]) {
			max_val = values[k];
		}
	}

	border_height = max_val + 1;
	space = (border_width + 2) * (border_height + 1);

	//Sets up border and empty spaces
	for (i = 0; i <= border_height; i++) {
		for (j = 0; j <= border_width + 1; j++) {
			counter = i * (border_width + 2) + (j);
			if (i == 0 && j < border_width + 1 || i == border_height && j < border_width + 1) {
				formatted[counter] = '*';
			}
			else if (j == 0 || j == border_width) {
				formatted[counter] = '*';
			}
			else if (j == border_width + 1) {
				if (i != border_height) {
					formatted[counter] = '\n';
				}
				else {
					formatted[counter] = '\0';
				}
			}
			else {
				formatted[counter] = 32;
			}
		}
	}

	//Input X for values in the array
	for (i = 0; i <= border_height; i++) {
		for (j = 0; j <= border_width + 1; j++) {
			reverse_counter = space - (i * (border_width + 2)) - border_width - 2 + j;
			//printf(""%d "", reverse_counter);
			if (i > 0 && i < border_height && j > 0 && j < border_width) { // issue with border_width not registering
				if (values[j - 1] > 0) {
					formatted[reverse_counter] = 88;
					values[j - 1]--;
				}
			}
		}
	}
}",0
kmal768,1696751989,2,"void Histogram(char* formatted, int* values, int num_values) {
	int i, j, k, max_val, border_width, border_height, counter, space, reverse_counter;

	border_width = num_values + 1;
	max_val = values[0];

	for (k = 1; k < num_values; k++) {
		if (max_val < values[k]) {
			max_val = values[k];
		}
	}

	border_height = max_val + 1;
	space = (border_width + 2) * (border_height + 1);

	//Sets up border and empty spaces
	for (i = 0; i <= border_height; i++) {
		for (j = 0; j <= border_width + 1; j++) {
			counter = i * (border_width + 2) + (j);
			if ((i == 0 && j < border_width + 1) || (i == border_height && j < border_width + 1)) {
				formatted[counter] = '*';
			}
			else if (j == 0 || j == border_width) {
				formatted[counter] = '*';
			}
			else if (j == border_width + 1) {
				if (i != border_height) {
					formatted[counter] = '\n';
				}
				else {
					formatted[counter] = '\0';
				}
			}
			else {
				formatted[counter] = 32;
			}
		}
	}

	//Input X for values in the array
	for (i = 0; i <= border_height; i++) {
		for (j = 0; j <= border_width + 1; j++) {
			reverse_counter = space - (i * (border_width + 2)) - border_width - 2 + j;
			if (i > 0 && i < border_height && j > 0 && j < border_width) {
				if (values[j - 1] > 0) {
					formatted[reverse_counter] = 88;
					values[j - 1]--;
				}
			}
		}
	}
}",1
kmck133,1696701861,1,"void Histogram(char* formatted, int arr[], int arrLength) {
    int i, k;
    int j = 1;
    int maxHeight = arr[0];
    char tempString[1000];
    int indexCount = 0;

    for (i = 1; i < arrLength; i++) {
        if (arr[i] > maxHeight) {
            maxHeight = arr[i];
        }
    }

    for (i = 0; i < arrLength + 2; i++) {
        formatted[indexCount] = '*';
        indexCount++;
    }

    formatted[indexCount] = '\n';

    int heightDown = maxHeight;

    while (j <= maxHeight) {
        indexCount++;
        formatted[indexCount] = '*';
        for (i = 0; i < arrLength; i++) {
            indexCount++;

                
                
            if (arr[i] >= heightDown) {
                formatted[indexCount] = 'X';
            }
            else {
                formatted[indexCount] = ' ';
            }
        }
        indexCount++;
        formatted[indexCount] = '*';
        indexCount++;
        formatted[indexCount] = '\n';
    j++;
    heightDown--;
    }

    for (i = 0; i < arrLength + 2; i++) {
        indexCount++;
        formatted[indexCount] = '*';
    }
    formatted[indexCount + 1] = '\0';
}",0
kmck133,1696701919,2,"void Histogram(char* formatted, int arr[], int arrLength) {
    int i;
    int j = 1;
    int maxHeight = arr[0];
    int indexCount = 0;

    for (i = 1; i < arrLength; i++) {
        if (arr[i] > maxHeight) {
            maxHeight = arr[i];
        }
    }

    for (i = 0; i < arrLength + 2; i++) {
        formatted[indexCount] = '*';
        indexCount++;
    }

    formatted[indexCount] = '\n';

    int heightDown = maxHeight;

    while (j <= maxHeight) {
        indexCount++;
        formatted[indexCount] = '*';
        for (i = 0; i < arrLength; i++) {
            indexCount++;

                
                
            if (arr[i] >= heightDown) {
                formatted[indexCount] = 'X';
            }
            else {
                formatted[indexCount] = ' ';
            }
        }
        indexCount++;
        formatted[indexCount] = '*';
        indexCount++;
        formatted[indexCount] = '\n';
    j++;
    heightDown--;
    }

    for (i = 0; i < arrLength + 2; i++) {
        indexCount++;
        formatted[indexCount] = '*';
    }
    formatted[indexCount + 1] = '\0';
}",1
kpat303,1696237838,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, int *data, int n) {
    int max = 0;
   
    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    
    int width = 2 * max + 3;  
    int height = max + 2;     
    int output_index = 0;

    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {
            if (row == height - 1) {
                output[output_index++] = '*';  
            } else {
                int value = max - row + 1;  
                int left_margin = max - data[col / 2];  

                if (col % 2 == 0) {
                    if (left_margin <= value) {
                        output[output_index++] = 'X';  
                    } else {
                        output[output_index++] = ' ';  
                    }
                } else {
                    if (left_margin <= value) {
                        output[output_index++] = ' ';  
                    } else {
                        output[output_index++] = 'X';  
                }
            }
        }
        output[output_index++] = '\n';  
    }
    output[output_index] = '\0';  
}",0
kpat303,1696237848,2,"#include <stdio.h>


void Histogram(char *output, int *data, int n) {
    int max = 0;
   
    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    
    int width = 2 * max + 3;  
    int height = max + 2;     
    int output_index = 0;

    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {
            if (row == height - 1) {
                output[output_index++] = '*';  
            } else {
                int value = max - row + 1;  
                int left_margin = max - data[col / 2];  

                if (col % 2 == 0) {
                    if (left_margin <= value) {
                        output[output_index++] = 'X';  
                    } else {
                        output[output_index++] = ' ';  
                    }
                } else {
                    if (left_margin <= value) {
                        output[output_index++] = ' ';  
                    } else {
                        output[output_index++] = 'X';  
                }
            }
        }
        output[output_index++] = '\n';  
    }
    output[output_index] = '\0';  
}",0
kpat303,1696237857,3,"void Histogram(char *output, int *data, int n) {
    int max = 0;
   
    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    
    int width = 2 * max + 3;  
    int height = max + 2;     
    int output_index = 0;

    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {
            if (row == height - 1) {
                output[output_index++] = '*';  
            } else {
                int value = max - row + 1;  
                int left_margin = max - data[col / 2];  

                if (col % 2 == 0) {
                    if (left_margin <= value) {
                        output[output_index++] = 'X';  
                    } else {
                        output[output_index++] = ' ';  
                    }
                } else {
                    if (left_margin <= value) {
                        output[output_index++] = ' ';  
                    } else {
                        output[output_index++] = 'X';  
                }
            }
        }
        output[output_index++] = '\n';  
    }
    output[output_index] = '\0';  
}",0
kpat303,1696653963,4,"void Histogram(char *output, int *data, int dataSize) {
    int max = 0;
    // Find the maximum value in the data array
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int numRows = max + 2; // Include one row for the border and one for labels
    int numCols = dataSize + 2; // Include one column for the border and one for spacing

    // Initialize the output string with spaces
    memset(output, ' ', numCols * numRows);
    output[numCols * numRows] = '\0';

    // Fill in the border
    for (int i = 0; i < numRows; i++) {
        output[i * numCols] = '*';
        output[i * numCols + numCols - 1] = '*';
    }
    for (int j = 0; j < numCols; j++) {
        output[j] = '*';
        output[(numRows - 1) * numCols + j] = '*';
    }

    // Fill in the histogram bars and labels
    for (int i = 0; i < max; i++) {
        for (int j = 0; j < dataSize; j++) {
            if (max - data[j] < i) {
                output[(max - i) * numCols + j + 1] = 'X';
            }
        }
    }

    // Copy the result into the output string
    int rowStart = 0;
    for (int i = 0; i < numRows; i++) {
        int rowEnd = (i == numRows - 1) ? numCols : numCols - 1;
        strncpy(output + rowStart, output + rowStart, rowEnd - rowStart);
        output[rowEnd - 1] = '\n';
        rowStart = rowEnd;
    }
}",0
kpat303,1696654029,5,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, int *data, int dataSize) {
    int max = 0;
    // Find the maximum value in the data array
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Calculate the number of rows and columns needed for the histogram
    int numRows = max + 2; // Include one row for the border and one for labels
    int numCols = dataSize + 2; // Include one column for the border and one for spacing

    // Initialize the output string with spaces
    memset(output, ' ', numCols * numRows);
    output[numCols * numRows] = '\0';

    // Fill in the border
    for (int i = 0; i < numRows; i++) {
        output[i * numCols] = '*';
        output[i * numCols + numCols - 1] = '*';
    }
    for (int j = 0; j < numCols; j++) {
        output[j] = '*';
        output[(numRows - 1) * numCols + j] = '*';
    }

    // Fill in the histogram bars
    for (int i = 0; i < numRows - 2; i++) {
        for (int j = 0; j < numCols - 2; j++) {
            if (max - data[j] >= i) {
                output[(i + 1) * numCols + j + 1] = 'X';
            }
        }
    }
}
",0
kpat303,1696654114,6,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, int *data, int dataSize) {
    int max = 0;
    // Find the maximum value in the data array
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int numRows = max + 2; // Include one row for the border and one for labels
    int numCols = dataSize + 2; // Include one column for the border and one for spacing

    // Initialize the output string with spaces
    memset(output, ' ', numCols * numRows);
    output[numCols * numRows] = '\0';

    // Fill in the border
    for (int i = 0; i < numRows; i++) {
        output[i * numCols] = '*';
        output[i * numCols + numCols - 1] = '*';
    }
    for (int j = 0; j < numCols; j++) {
        output[j] = '*';
        output[(numRows - 1) * numCols + j] = '*';
    }

    // Fill in the histogram bars and labels
    for (int i = 0; i < max; i++) {
        for (int j = 0; j < dataSize; j++) {
            if (max - data[j] < i) {
                output[(max - i) * numCols + j + 1] = 'X';
            }
        }
    }

    // Copy the result into the output string
    int rowStart = 0;
    for (int i = 0; i < numRows; i++) {
        int rowEnd = (i == numRows - 1) ? numCols : numCols - 1;
        strncpy(output + rowStart, output + rowStart, rowEnd - rowStart);
        output[rowEnd - 1] = '\n';
        rowStart = rowEnd;
    }
}",0
kpat303,1696654184,7,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataSize) {
    int max = 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Generate the histogram string
    for (int row = max; row >= 0; row--) {
        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""\n"");
    }
    
    // Add the border of '*' characters
    strcat(result, ""*"");
    for (int i = 0; i < dataSize; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");
}

int main() {
    int values1[10] = {1, 0, 3, 1, 2, 4, 5, 6, 2, 2};
    int values2[3] = {1, 0, 1};
    char formatted[1000];
    char example[1000] = ""*****\n*X X*\n*****"";

    // Clear the result string
    formatted[0] = '\0';

    Histogram(formatted, values1, 10);
    printf(""%s\n\n"", formatted);

    // Clear the result string
    formatted[0] = '\0';

    Histogram(formatted, values2, 3);
    printf(""%s\n"", formatted);
    
    if (strcmp(example, formatted) == 0) {
        printf(""This matches EXACTLY and is correct"");
    }

    return 0;
}
",0
kpat303,1696654191,8,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataSize) {
    int max = 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Generate the histogram string
    for (int row = max; row >= 0; row--) {
        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""\n"");
    }
    
    // Add the border of '*' characters
    strcat(result, ""*"");
    for (int i = 0; i < dataSize; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");
}

",0
kpat303,1696654283,9,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataSize) {
    int max = 0;
    
    // Find the maximum value in the data
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Generate the histogram string
    for (int row = max; row >= 0; row--) {
        strcat(result, ""*"");
        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }
}",0
kpay633,1696821130,1,"
void Histogram(char formatted[], int values[], int numElements)
{
	int numRows, numCols, totalChar, numX;
	//find largest number in values[]
	int largest = values[0];
	for (int i = 1; i < numElements; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}
	//make temp 2D array to store whats gonna be printed
	numRows = largest + 2;
	numCols = numElements + 2;
	char temp[1000][1000];

	//make first and last row all asterisks for temp 2D
	for (int j = 0; j < numCols; j++) {
		temp[0][j] = '*';
		temp[numRows - 1][j] = '*';
	}
	//make first and last col all asterisks for temp 2D
	for (int i = 0; i < numCols; i++) {
		temp[i][0] = '*';
		temp[i][numCols - 1] = '*';
	}


	for (int i = 1; i < (numRows - 1); i++) {
		for (int j = 1; j < (numCols - 1); j++) {
			if (i > ((numRows - 2) - values[j - 1])) {
				temp[i][j] = 'X';
			}
			else {
				temp[i][j] = ' ';
			}
		}
	}
	for (int i = 0; i < numRows; i++) {
		for (int j = 0; j < numCols; j++) {
			//format should be [i*(numC+1) + j] bc the +1 skips over where the \n goes
			formatted[i * (numCols + 1) + j] = temp[i][j];
		}
		//for last value on row, add a \n into the formatted array
		if (i < (numRows - 1)) {
			formatted[i * (numCols + 1) + numCols] = '\n';
		}
		else if (i == (numRows - 1)) {
			formatted[i * (numCols + 1) + numCols] = '\0';
		}

	}
	return;
}
",0
kpay633,1696821305,2,"void Histogram(char formatted[], int values[], int numElements)
{
	int numRows, numCols;
	//find largest number in values[]
	int largest = values[0];
	for (int i = 1; i < numElements; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}
	//make temp 2D array to store whats gonna be printed
	numRows = largest + 2;
	numCols = numElements + 2;
	char temp[1000][1000];

	//make first and last row all asterisks for temp 2D
	for (int j = 0; j < numCols; j++) {
		temp[0][j] = '*';
		temp[numRows - 1][j] = '*';
	}
	//make first and last col all asterisks for temp 2D
	for (int i = 0; i < numCols; i++) {
		temp[i][0] = '*';
		temp[i][numCols - 1] = '*';
	}


	for (int i = 1; i < (numRows - 1); i++) {
		for (int j = 1; j < (numCols - 1); j++) {
			if (i > ((numRows - 2) - values[j - 1])) {
				temp[i][j] = 'X';
			}
			else {
				temp[i][j] = ' ';
			}
		}
	}
	for (int i = 0; i < numRows; i++) {
		for (int j = 0; j < numCols; j++) {
			//format should be [i*(numC+1) + j] bc the +1 skips over where the \n goes
			formatted[i * (numCols + 1) + j] = temp[i][j];
		}
		//for last value on row, add a \n into the formatted array
		if (i < (numRows - 1)) {
			formatted[i * (numCols + 1) + numCols] = '\n';
		}
		else if (i == (numRows - 1)) {
			formatted[i * (numCols + 1) + numCols] = '\0';
		}

	}
	return;
}









",0
kpay633,1696839555,3,"void Histogram(char formatted[], int values[], int numElements)
{
	int numRows, numCols;
	//find largest number in values[]
	int largest = values[0];
	for (int i = 1; i < numElements; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}

	//initialise these variables and string arrays
	numRows = largest + 2;
	numCols = numElements + 3; // has to account for last row of (\n or \0)
	char temp[1000][1000];

	//iterate through the whole array and determine if on edge (need \n) etc.
	for (int i = 0; i < numRows; i++) {
		for (int j = 0; j < numCols; j++) {
			if (j == (numCols - 1)) {
				if (i != (numRows - 1)) {
					temp[i][j] = '\n';
				}
				else {
					temp[i][j] = '\0';
				}
			}
			// this puts * in first row and 2nd to last row (last row is \n or \0)
			else if (j == 0 || j == (numCols - 2)) {
				temp[i][j] = '*';
			}
			// this puts * in first col and last col
			else if (i == 0 || i == (numRows - 1)) {
				temp[i][j] = '*';
			}
			else {
				int v;
				v = (j - 1);
				if ((numRows - i - 1) <= values[v]) {
					temp[i][j] = 'X';
				}
				else {
					temp[i][j] = ' ';
				}
			}
		}
	}

	// now transfer all 2D temp array value onto the 1D result array
	int x;
	x = 0;
	for (int i = 0; i < numRows; i++) {
		for (int j = 0; j < numCols; j++) {
			formatted[x] = temp[i][j];
			x++;
		}
	}





}",1
kqua446,1696768288,1," #include <stdio.h>

int LargestValue(int *values, int length) {
    int i, max = values[0];

    for (i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    return max;
} 

void Histogram(char *format, int *values, int length)
{
    int i, j, max;

    // Print the first line of * as the top border
    for (i = 0; i < length + 2; i++) {
        printf(""*"");
    }

    printf(""\n"");

    // Find the largest value in values
    max = LargestValue(values, length);

    for (i = max; i > 0; i--) {
        printf(""*"");
        for (j = 0; j < length; j++) {
            if (values[j] == i) {
                values[j] -= 1;
                printf(""X"");
            } else {
                printf("" "");
            }
        }
        printf(""*\n"");
    }

    // Print the last line of * as the bottom border
    for (i = 0; i < length + 2; i++) {
        printf(""*"");
    }
}",0
kqua446,1696768352,2,"#include <stdio.h>

int LargestValue(int *values, int length) {
    int i, max = values[0];

    for (i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    return max;
} 

void Histogram(char *format, int *values, int length)
{
    int i, j, max;

    // Print the first line of * as the top border
    for (i = 0; i < length + 2; i++) {
        printf(""*"");
    }

    printf(""\n"");

    // Find the largest value in values
    max = LargestValue(values, length);

    for (i = max; i > 0; i--) {
        printf(""*"");
        for (j = 0; j < length; j++) {
            if (values[j] == i) {
                values[j] -= 1;
                printf(""X"");
            } else {
                printf("" "");
            }
        }
        printf(""*\n"");
    }

    // Print the last line of * as the bottom border
    for (i = 0; i < length + 2; i++) {
        printf(""*"");
    }

    printf(""\n"");
}",0
kqua446,1696769904,3,"#include <stdio.h>
#include <string.h>

int LargestValue(int *values, int length) {
    int i, max = values[0];

    for (i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    return max;
} 

void Histogram(char *format, int *values, int length)
{
    int i, j, max, word_count = 0;

    // Print the first line of * as the top border
    for (i = 0; i < length + 2; i++) {
        format[word_count] = '*';
        word_count += 1;
    }

    format[word_count] = '\n';
    word_count += 1;

    // Find the largest value in values
    max = LargestValue(values, length);

    for (i = max; i > 0; i--) {
        format[word_count] = '*';
        word_count += 1;
        for (j = 0; j < length; j++) {
            if (values[j] == i) {
                values[j] -= 1;
                format[word_count] = 'X';
                word_count += 1;
            } else {
                format[word_count] = ' ';
                word_count += 1;
            }
        }
        format[word_count] = '*';
        word_count += 1;
        format[word_count] = '\n';
        word_count += 1;
    }

    // Print the last line of * as the bottom border
    for (i = 0; i < length + 2; i++) {
        format[word_count] = '*';
        word_count += 1;
    }

    format[word_count] = '\0';
}
",1
kraw552,1696811910,1,"#include <stdio.h>
#include <string.h>

void Histogram(result, data, size) 
{
    char result
    int data
    int size
    int max = 0;
    for (int i = 0; i < size; i++) 
    {
        if (data[i] > max) 
        {
            max = data[i];
        }
    }

    int width = max + 2;
    int height = size + 2;

    for (int i = 0; i < height; i++) 
    {
        for (int j = 0; j < width; j++) 
        {
            result[i * width + j] = ' ';
        }
    }

    for (int i = 0; i < size; i++) 
    {
        int HeightOfBar = data[i];
        for (int j = 0; j < HeightOfBar; j++) 
        {
            result[(height - 2 - j) * width + i + 1] = 'X';
        }
    }

    for (int i = 0; i < width; i++) 
    {
        result[i] = '*';
        result[(height - 1) * width + i] = '*';
    }
    
    for (int i = 0; i < height; i++) 
    {
        result[i * width] = '*';
        result[i * width + width - 1] = '*';
    }

    result[width * height - 1] = '\0';
}

",0
krec980,1696397302,1,"void Histogram(char* histogram, int* values, int length)
{
    int i;
    int j;
    int max = values[0];
    histogram[0] = '\0';

    for (i = 1; i < length; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    for (i = 0; i < length + 2; i++) {
        strcat(histogram, ""*"");
    }

    strcat(histogram, ""\n"");

    for (i = max; i > 0; i--) {
        strcat(histogram, ""*"");
        for (j = 0; j <= length - 1; j++) {
            if (values[j] < i) {
                strcat(histogram, "" "");
            }
            else {
                strcat(histogram, ""X"");
            }
        }
            strcat(histogram, ""*\n"");      
    }

    for (i = 0; i < length + 2; i++) {
        strcat(histogram, ""*"");
    }
}",1
ksik996,1696735946,1,"
void Histogram(char *graph, int values[], int length){

    int max = values[0];
    for (int i = 1; i < length; i++) {
    if (values[i] > max) {
        max = values[i]; 
       }
    }
    int array[max+2][length+2];
        for (int i = 0; i <= max+1; i++){    
            for(int j = 0; j <= length+1; j++){
                array[i][j] = 0;

            }
        }


    for(int i = 0; i < length + 2; i++){
    array[0][i] = 2;
    array[max + 1][i] = 2;
}
    for(int i = 1; i < max + 1; i++){
    array[i][0] = 2;
    array[i][length+1] = 2;
    }

int pos = -1;

        for(int j = 1; j < length + 1; j++){
            pos = pos + 1;
            for(int k = max; k > (max-(values[pos])); k--){
                    array[k][j] = 1;

        }
    }


int stri = 0;
        for (int i = 0; i <= max+1; i++){   
            for(int j = 0; j <= length+1; j++){
            
                if(array[i][j] == 2){
                    if(j == length+1){
                    graph[stri] = '*';
                    stri++;
                    graph[stri] = '\n';
                    stri++;
                    }
                    else{
                    graph[stri] = '*';
                    stri++;
                    }
                }
                else if(array[i][j] == 1){
                graph[stri] = 'X';
                stri++;
                }
                else if(array[i][j] == 0){
                graph[stri] = ' ';
                stri++;
                }
            }
    }


    
}



                    
                



",0
ksik996,1696737525,2,"void Histogram(char *graph, int values[], int length){
int stri = 0;
int pos = -1;
memset(graph, 0, 1000);

    int max = values[0];
    for (int i = 1; i < length; i++) {
    if (values[i] > max) {
        max = values[i]; 
       }
    }
    int array[max+2][length+2];
        for (int i = 0; i <= max+1; i++){    
            for(int j = 0; j <= length+1; j++){
                array[i][j] = 0;

            }
        }


    for(int i = 0; i < length + 2; i++){
    array[0][i] = 2;
    array[max + 1][i] = 2;
}
    for(int i = 1; i < max + 1; i++){
    array[i][0] = 2;
    array[i][length+1] = 2;
    }


        for(int j = 1; j < length + 1; j++){
            pos = pos + 1;
            for(int k = max; k > (max-(values[pos])); k--){
                    array[k][j] = 1;

        }
    }


        for (int i = 0; i <= max+1; i++){   
            for(int j = 0; j <= length+1; j++){
            
                if(array[i][j] == 2){
                    if(i != max+1){
                        if(j == length+1){
                            graph[stri] = '*';
                            stri++;
                            graph[stri] = '\n';
                            stri++;
                        }
                        else{
                            graph[stri] = '*';
                            stri++;
                    }
                    }
                    else{
                     graph[stri] = '*';
                     stri++;
                    }
                }
                else if(array[i][j] == 1){
                graph[stri] = 'X';
                stri++;
                }
                else if(array[i][j] == 0){
                graph[stri] = ' ';
                stri++;
                }
            }
    }


    
}",1
kwan797,1696803530,1,"void Histogram(char* formatted, int* value, int length)
{
    int max = 0;

    //find the largest munber in the string
    for (int a = 0; a < length; a++) {
        if (max < value[a]) {
            max = value[a];
        }
    }
    
    for (int i = 0; i < length + 2; i++) {
            formatted[i] = '*';
    }
    formatted[length+2] = '\n';

    
    int i=length+3;
    for(int line = max;line>=1;line--){
        for(int j=0;j<length+2;j++){
            if(j==0||j==length+1){
                formatted[i]='*';
            }else{
                if(value[j-1]>=line){
                    formatted[i]='X';
                }else{
                    formatted[i]=' ';
                }
            }
           i++; 
        }
        formatted[i]='\n';
        i++;
    }
    
    for (int j = 0; j < length + 2; j++) {
        formatted[i] = '*';
        i++;
    }
    formatted[i] = '\0';
}",1
kyoo839,1696763899,1,"#include <stdio.h>
#include <string.h>

void Histogram(char formatted[], int values[], int elements) 
{

    int i;
    int max = values[0];
    for (i = 1; i < elements; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    
    //box
    int row, col;
    int index = 0;
    for(row = 0; row < max + 2; row++) {
        for(col = 0; col < elements + 2; col++) {
            if (row == max + 1 && col == elements + 1) {
                formatted[index++] = '*';
                formatted[index++] = '\0';
            }
            if (row == 0 || row == max + 1) {
                formatted[index++] = '*';
                if (col == elements + 1) {
                    formatted[index++] = '\n';
                }
            }
            else if (col == 0) {
                formatted[index++] = '*';
            }
            else if (col == elements + 1){
                formatted[index++] = '*';
                formatted[index++] = '\n';
            }
            else {
                formatted[index++] = 32;
            }
        }
    }
    
    //inside
    for (col = 0; col < elements; col++) {
        int temp = values[col];
        for (row = 0; row < temp; row++) {
            int position = (max - row) * (elements + 3) + (col + 1);
            formatted[position] = 'X';
        }
    }
    
    
}",1
kzhu796,1696285923,1,"void Histogram(char *formatted, int values[], int elements)
{
	int max = 0;
	for (int i = 0; i < elements; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}

	strcpy(formatted, """");

	// making the top border:
	int width = elements + 2;

	for (int i = 0; i < width; i++) {
		strcat(formatted, ""*"");
	}
	strcat(formatted, ""\n"");

	// formatting
	for (int row = max; row > 0; row--) {
		strcat(formatted, ""*"");
		for (int i = 0; i < elements; i++) {
			if (values[i] >= row) {
				strcat(formatted, ""X"");
			}
			else {
				strcat(formatted, "" "");
			}
		}
		strcat(formatted, ""*\n"");
	}

	// making the bottom border:
	for (int i = 0; i < width; i++) {
		strcat(formatted, ""*"");
	}
}",1
lazz729,1696330318,1,"void Histogram(char *strGraph, int *values, int length) {

    int highest = 0;
    for (int j = 0; j < length; j++) {
        if (values[j] > highest) {
            highest = values[j];
        }
    }

    int rows = highest + 2;

    for (int i = 0; i < rows; i++) {
        strcat(strGraph, ""*"");
        if (i == 0 || i == rows - 1) {
            for (int k = 0; k < length; k++) {
                strcat(strGraph, ""*"");
            }
        } else {
            for (int k = 0; k < length; k++) {
                if (values[k] < (highest - i + 1)) {
                    strcat(strGraph, "" "");
                } else {
                    strcat(strGraph, ""X"");
                }
            }
        }

        strcat(strGraph, ""*"");
        if (i != rows - 1) {
            strcat(strGraph, ""\n"");
        }
        
    }
}",0
lazz729,1696330432,2,"void Histogram(char *strGraph, int *values, int length) {

    strGraph = """";

    int highest = 0;
    for (int j = 0; j < length; j++) {
        if (values[j] > highest) {
            highest = values[j];
        }
    }

    int rows = highest + 2;

    for (int i = 0; i < rows; i++) {
        strcat(strGraph, ""*"");
        if (i == 0 || i == rows - 1) {
            for (int k = 0; k < length; k++) {
                strcat(strGraph, ""*"");
            }
        } else {
            for (int k = 0; k < length; k++) {
                if (values[k] < (highest - i + 1)) {
                    strcat(strGraph, "" "");
                } else {
                    strcat(strGraph, ""X"");
                }
            }
        }

        strcat(strGraph, ""*"");
        if (i != rows - 1) {
            strcat(strGraph, ""\n"");
        }
        
    }
}",0
lazz729,1696331112,3,"void Histogram(char *strGraph, int *values, int length) {
    
    strcpy(strGraph, """");
    
    int highest = 0;
    for (int j = 0; j < length; j++) {
        if (values[j] > highest) {
            highest = values[j];
        }
    }

    int rows = highest + 2;

    for (int i = 0; i < rows; i++) {
        strcat(strGraph, ""*"");
        if (i == 0 || i == rows - 1) {
            for (int k = 0; k < length; k++) {
                strcat(strGraph, ""*"");
            }
        } else {
            for (int k = 0; k < length; k++) {
                if (values[k] < (highest - i + 1)) {
                    strcat(strGraph, "" "");
                } else {
                    strcat(strGraph, ""X"");
                }
            }
        }

        strcat(strGraph, ""*"");
        if (i != rows - 1) {
            strcat(strGraph, ""\n"");
        }
        
    }
}
",1
lcam453,1696836290,1,a,0
lchu848,1696720982,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, const int *data, int dataSize) {
    int maxVal = 0;

    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxVal) {
            maxVal = data[i];
        }
    }

    int width = dataSize * 2 + 3;
    int resultIndex = 0;

    for (int row = maxVal; row >= 0; row--) {
        for (int i = 0; i < width; i++) {
            result[resultIndex++] = (i == 0 || i == width - 1) ? '*' : (i % 2 == 0 && data[i / 2] >= row) ? 'X' : ' ';
        }
        result[resultIndex++] = '\n';
    }

    result[resultIndex] = '\0';
}
",0
lchu848,1696721077,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, const int *data, int dataSize) {
    int maxVal = 0;

    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxVal) {
            maxVal = data[i];
        }
    }

    int width = dataSize * 2 + 3;
    int resultIndex = 0;

    for (int i = 0; i < width; i++) {
        result[resultIndex++] = '*';
    }
    result[resultIndex++] = '\n';

    for (int row = maxVal; row >= 1; row--) {
        result[resultIndex++] = '*';

        for (int i = 0; i < dataSize; i++) {
            if (data[i] >= row) {
                result[resultIndex++] = 'X';
            } else {
                result[resultIndex++] = ' ';
            }
            result[resultIndex++] = ' ';
        }

        result[resultIndex++] = '*';
        result[resultIndex++] = '\n';
    }

    for (int i = 0; i < width; i++) {
        result[resultIndex++] = '*';
    }
    result[resultIndex] = '\0';
}
",0
lchu848,1696721267,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, const int *data, int dataSize) {
    int max = 0;

    // Find the maximum value in the data
    for (int i = 0; i < dataSize; i++) {
        max = (data[i] > max) ? data[i] : max;
    }

    int width = dataSize + 2;
    int idx = 0;

    for (int row = max; row >= 0; row--) {
        result[idx++] = '*';

        for (int i = 0; i < dataSize; i++) {
            result[idx++] = (data[i] >= row) ? 'X' : ' ';
        }

        result[idx++] = '*';
        result[idx++] = '\n';
    }

    // Add the top and bottom borders
    memset(result, '*', width);
    result[width - 1] = '\n';
    result[idx - 1] = '\0';
}
",0
lchu848,1696721283,4,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, const int *data, int dataSize) {
    int max = 0;

    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int width = dataSize + 2;
    int idx = 0;

    for (int i = 0; i < width; i++) {
        result[idx++] = '*';
    }
    result[idx++] = '\n';

    for (int row = max; row >= 1; row--) {
        result[idx++] = '*';

        for (int i = 0; i < dataSize; i++) {
            if (data[i] >= row) {
                result[idx++] = 'X';
            } else {
                result[idx++] = ' ';
            }
        }

        result[idx++] = '*';
        result[idx++] = '\n';
    }

    for (int i = 0; i < width; i++) {
        result[idx++] = '*';
    }
    result[idx] = '\0';
}
",1
ldea753,1696678101,1,"void Histogram(char *formatted, int *values, int length) {
    int max = values[0];
    int i, j;
    int cont;
    for (i = 0; i < 1000; i++) {
        formatted[i] = 0;
    }

    for (i = 1; i < length; i++) {
        if (values[i] > max)
            max = values[i];
    }

    int temp[100][100] = {0};
    for (i = 0; i < length; i++) {
        for (j = 0; j < values[i]; j++){
            temp[i][j] = 1;
        }
    }

    for (i = 0; i < length + 2; i++) {
        formatted[i] = '*';
    }
    cont = i + 1;
    formatted[cont - 1] = '\n';

    for (i = max - 1; i >= 0; i--) {
        formatted[cont] = '*';
        cont++;
        for (j = 0; j < length; j++){
            if (temp[j][i] == 0)
                formatted[cont] = ' ';
            else
                formatted[cont] = 'X';

            cont++;
        }
        formatted[cont] = '*';
        formatted[cont + 1] = '\n';
        cont += 2;
    }

    for (i = 0; i < length + 2; i++) {
        formatted[cont + i] = '*';
    }
}",1
ldou101,1696296790,1,"void Histogram(char *out, int *data, int length){
int highest=data[0];
for (int i=0; i<length; i++){
    if (data[i]>highest){
        highest = data[i];
    }
}

strcpy(out, """");
for (int i=0; i<length+2; i++){
    strcat(out, ""*"");
}
for (int j=1; j<highest+1; j++){
    strcat(out, ""\n"");
    strcat(out, ""*"");
    for (int i=0; i<length; i++){
        if (data[i]>=highest-j+1){
            strcat(out, ""X"");
        }
        else {
            strcat(out, "" "");
        }
    }
    strcat(out, ""*"");
}
strcat(out, ""\n"");
for (int i=0; i<length+2; i++){
    strcat(out, ""*"");
}
}",1
lfan827,1696816132,1," void Histogram(char *str, int a[], int b) {
    int r ,c = 2 + b,i,j,k,x =0;
    for (i = 0; i < b; i++){
        if (a[i] > x){
            x = a[i];
        }
    }
    
    r = x;
    
    for (j = 0; j < c; j++){
            str[j] = '*';
        }
        
    str[j] = '\n';
    k = j + 1;
    for (i = 0; i < r; i++){
        str[k] = '*';
        k++;
        for (j = 0; j < b; j++){
            if (a[j] >= (r - i)){
                str[k] = 'X';
            }
            else{
                str[k] = ' ';
            }
            k++;
        }
        str[k] = '*';
        k++;
        str[k] = '\n';
        k++;
    }
    for (j = 0; j < c; j++){
            str[k] = '*';
            k++;
        }
    str[k] = '\0';
}",1
lgan833,1696758883,1,"#include <stdio.h>
#include <string.h>
void Histogram(char format[], int value[], int n) {
	int max = 0;
	int i;
	for (i = 0; i < n; i++) {
		if (value[i] > max) {
			max = value[i];
		}
	}
	int numrow = max + 2;
	int numcol = n + 3;
	int row, col;

	for (row = 0; row < numrow; row++) {
		for (col = 0; col < numcol; col++) {
			if ((col + 1) * (row + 1) < numcol * numrow) {

				if (col == numcol - 1) {
					format[row * numcol + col] = '\n';
				}
				if (row == 0 || row == numrow - 1 || col == 0 || col == numcol - 2) {
					if (col <= numcol - 2) {
						format[row * numcol + col] = '*';
					}
				}
				if (row > 0 && row < numrow - 1 && col > 0 && col < numcol - 2) {
					int valueIndex = col - 1;
					if (value[valueIndex] >= numrow - row - 1) {
						format[row * numcol + col] = 'X';
					}
					else {
						format[row * numcol + col] = ' ';
					}
				}
			}
		}
		
	}
}",0
lgan833,1696819300,2,"#include <stdio.h>
#include <string.h>
void Histogram(char *format, int value[], int n) {
	int max = 0;
	int i;
	for (i = 0; i < n; i++) {
		if (value[i] > max) {
			max = value[i];
		}
	}
	int numrow = max + 2;
	int numcol = n + 3;
	int row, col;

	for (row = 0; row < numrow; row++) {
		for (col = 0; col < numcol; col++) {
			if ((col + 1) * (row + 1) < numcol * numrow) {

				if (col == numcol - 1) {
					format[row * numcol + col] = '\n';
				}
				if (row == 0 || row == numrow - 1 || col == 0 || col == numcol - 2) {
					if (col <= numcol - 2) {
						format[row * numcol + col] = '*';
					}
				}
				if (row > 0 && row < numrow - 1 && col > 0 && col < numcol - 2) {
					int valueIndex = col - 1;
					if (value[valueIndex] >= numrow - row -1) {
						format[row * numcol + col] = 'X';
					}
					else {
						format[row * numcol + col] = ' ';
					}
				}
			}
		}
		format[row * numcol + col] = '\0';
	}
	format[row * numcol + col] = '\0';
}",0
lhal844,1696654674,1,"void Histogram(char* form, int* data, int datalen)
{
	char ast = 42;
	int curp = 0;

	int max = data[0];

	for (int i = 0; i < datalen; i++)
	{
		if (data[i] > max)
		{
			max = data[i];
		}
	}

	int pos = 0;

	for (int i = 1;i <= (datalen + 2);i++)
	{
		form[curp] = 42;
		curp++;
	}

	form[curp] = '\n';
	curp++;

	for (pos = 1;pos <= max;pos++)
	{

		form[curp] = '*';
		curp++;
		for (int j = 0;j < datalen;j++)
		{
			if (data[j] > (max - pos))
			{
				
				form[curp] = 'X';
			}
			else
			{
				
				form[curp] = ' ';
			}

			curp++;
			
		}

		form[curp] = '*';
		curp++;

		form[curp] = '\n';
		curp++;

	}

	for (int i = 1;i <= (datalen + 2);i++)
	{
		form[curp] = 42;
		curp++;
	}

	form[curp] = '\0';
}",0
lhal844,1696654693,2,"void Histogram(char* form, int* data, int datalen)
{
	int curp = 0;

	int max = data[0];

	for (int i = 0; i < datalen; i++)
	{
		if (data[i] > max)
		{
			max = data[i];
		}
	}

	int pos = 0;

	for (int i = 1;i <= (datalen + 2);i++)
	{
		form[curp] = 42;
		curp++;
	}

	form[curp] = '\n';
	curp++;

	for (pos = 1;pos <= max;pos++)
	{

		form[curp] = '*';
		curp++;
		for (int j = 0;j < datalen;j++)
		{
			if (data[j] > (max - pos))
			{
				
				form[curp] = 'X';
			}
			else
			{
				
				form[curp] = ' ';
			}

			curp++;
			
		}

		form[curp] = '*';
		curp++;

		form[curp] = '\n';
		curp++;

	}

	for (int i = 1;i <= (datalen + 2);i++)
	{
		form[curp] = 42;
		curp++;
	}

	form[curp] = '\0';
}",1
ljun123,1696843072,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int data[], int n) {
    int max;
    int i;
    int row;
    int col;

    max = 0;

    for (int i = 0; i < n; i++) {
        max = (data[i] > max) ? data[i] : max;
    }

    for (row = max; row >= 0; row--) {
        for (col = 0; col < n; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            }
            else {
                strcat(result, "" "");
            }
            if (col < n - 1) {
                strcat(result, "" "");
            }
        }
        strcat(result, ""\n"");
    }
}
",0
ljun123,1696843090,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int data[], int n) {
    int max;
    int i;
    int row;
    int col;

    max = 0;

    for (i = 0; i < n; i++) {
        max = (data[i] > max) ? data[i] : max;
    }

    for (row = max; row >= 0; row--) {
        for (col = 0; col < n; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            }
            else {
                strcat(result, "" "");
            }
            if (col < n - 1) {
                strcat(result, "" "");
            }
        }
        strcat(result, ""\n"");
    }
}
",0
ljun123,1696844631,3,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int *data, int n) {
    int max;
    int width;
    int i;
    int row;
    int col;

    width = n + 2;
    max = 0;

    for (i = 0; i < width; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

    for (i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (row = max; row >= 0; row--) {
        strcat(result, ""*""); 
        for (i = 0; i < n; i++) {
            if (data[i] >= row) {
                strcat(result, ""X""); 
            }
            else {
                strcat(result, "" ""); 
            }
        }
        strcat(result, ""*\n""); 
    }

    for (i = 0; i < width; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
}
",0
ljun123,1696844670,4,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int *data, int n) {
    int max;
    int width;
    int i;
    int row;

    width = n + 2;
    max = 0;

    for (i = 0; i < width; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

    for (i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (row = max; row >= 0; row--) {
        strcat(result, ""*""); 
        for (i = 0; i < n; i++) {
            if (data[i] >= row) {
                strcat(result, ""X""); 
            }
            else {
                strcat(result, "" ""); 
            }
        }
        strcat(result, ""*\n""); 
    }

    for (i = 0; i < width; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
}
",0
llei074,1696815524,1,"void Histogram(char formatted[], int arr[], int size)
{

	int i = 0;

	int border_size = size + 2;

	while (i < border_size) {
		formatted[i] = { 42 };
		i++;
	}

	formatted[i] = { '\n' };
	i++;

	int largest_element = 0;
	for (int j = 0; j < size; j++) 
	{
		if (arr[j] > largest_element)	
		{
			largest_element = arr[j];
		}
	}

	for (int row = largest_element; row > 0; row--) 
	{

		formatted[i] = { 42 };
		i++;

		for (int k = 0; k < size; k++) 
		{
			if (arr[k] >= largest_element) 
			{
				formatted[i] = { 'X'};
				i++;
			}
			else if (arr[k] < largest_element) 
			{
				formatted[i] = { ' '};
				i++;
			}

			
		}

		formatted[i] = { 42 };
		i++;
		formatted[i] = { '\n' };
		i++;

		largest_element--;
	}

	border_size = i + border_size;

	while (i < border_size) {
		formatted[i] = { 42 };
		i++;
	}

	formatted[i] = { '\0' };

}",0
llei074,1696815665,2,"void Histogram(char formatted[], int arr[], int size)
{

	int i = 0;

	int border_size = size + 2;

	while (i < border_size) {
		formatted[i] = {42};
		i++;
	}

	formatted[i] = {'\n'};
	i++;

	int largest_element = 0;
	for (int j = 0; j < size; j++) 
	{
		if (arr[j] > largest_element)	
		{
			largest_element = arr[j];
		}
	}

	for (int row = largest_element; row > 0; row--) 
	{

		formatted[i] = {42};
		i++;

		for (int k = 0; k < size; k++) 
		{
			if (arr[k] >= largest_element) 
			{
				formatted[i] = {'X'};
				i++;
			}
			else if (arr[k] < largest_element) 
			{
				formatted[i] = {' '};
				i++;
			}

			
		}

		formatted[i] = {42};
		i++;
		formatted[i] = {'\n'};
		i++;

		largest_element--;
	}

	border_size = i + border_size;

	while (i < border_size) {
		formatted[i] = {42};
		i++;
	}

	formatted[i] = {'\0'};

}",0
llei074,1696816062,3,"#include <stdio.h>
#include <string.h>

void Histogram(char formatted[], int arr[], int size)
{

	int i = 0;

	int border_size = size + 2;

	while (i < border_size) {
		formatted[i] = {42};
		i++;
	}

	formatted[i] = {'\n'};
	i++;

	int largest_element = 0;
	for (int j = 0; j < size; j++) 
	{
		if (arr[j] > largest_element)	
		{
			largest_element = arr[j];
		}
	}

	for (int row = largest_element; row > 0; row--) 
	{

		formatted[i] = {42};
		i++;

		for (int k = 0; k < size; k++) 
		{
			if (arr[k] >= largest_element) 
			{
				formatted[i] = {'X'};
				i++;
			}
			else if (arr[k] < largest_element) 
			{
				formatted[i] = {' '};
				i++;
			}

			
		}

		formatted[i] = {42};
		i++;
		formatted[i] = {'\n'};
		i++;

		largest_element--;
	}

	border_size = i + border_size;

	while (i < border_size) {
		formatted[i] = {42};
		i++;
	}

	formatted[i] = {'\0'};

}",0
llei074,1696817136,4,"#include <stdio.h>
#include <string.h>

void Histogram(char formatted[], int arr[], int size)
{

	int i = 0;

	int border_size = size + 2;

	while (i < border_size) {
		formatted[i] = 42;
		i++;
	}

	formatted[i] = '\n';
	i++;

	int largest_element = 0;
	for (int j = 0; j < size; j++) 
	{
		if (arr[j] > largest_element)	
		{
			largest_element = arr[j];
		}
	}

	for (int row = largest_element; row > 0; row--) 
	{

		formatted[i] = 42;
		i++;

		for (int k = 0; k < size; k++) 
		{
			if (arr[k] >= largest_element) 
			{
				formatted[i] = 'X';
				i++;
			}
			else if (arr[k] < largest_element) 
			{
				formatted[i] = ' ';
				i++;
			}

			
		}

		formatted[i] = 42;
		i++;
		formatted[i] = '\n';
		i++;

		largest_element--;
	}

	border_size = i + border_size;

	while (i < border_size) {
		formatted[i] = 42;
		i++;
	}

	formatted[i] = '\0';

}",1
lli393,1696392560,1,"void Histogram(char *histogram, int *values, int numvalues)
{
	int irow, jcol, k, l, max;
	char graph;
	
	//find the maximum in the values which determines the height
	max = values[0];
	for (k = 1; k < numvalues; k++){
		if (values[k] > max){
			max = values[k];
		}
	}
	histogram[0] = '\0';
	
	//search for any values are in the row, store X if found
	for (irow = 0; irow <= max + 1; irow++){
		if (irow == 0||irow == max + 1){
			//store top and bottom boundaries in col times
			for (l = 0; l <= numvalues + 1; l++){
				histogram = strcat(histogram, ""*"");
			}
		}else{
			for (jcol = 0; jcol <= numvalues + 1; jcol++){
				if(jcol == 0 || jcol == numvalues + 1){
					histogram = strcat(histogram, ""*"");
				}else if (irow > max - values[jcol - 1]){
					histogram = strcat(histogram, ""X"");
				}else{
					histogram = strcat(histogram, "" "");
				}
			}
		}
		if (irow != max + 1){
			histogram = strcat(histogram, ""\n"");
		}
	}
}",0
lli393,1696395626,2,"void Histogram(char *histogram, int *values, int numvalues)
{
	int irow, jcol, k, l, max;
	
	//find the maximum in the values which determines the height
	max = values[0];
	for (k = 1; k < numvalues; k++){
		if (values[k] > max){
			max = values[k];
		}
	}
	histogram[0] = '\0';
	
	//search for any values are in the row, store X if found
	for (irow = 0; irow <= max + 1; irow++){
		if (irow == 0||irow == max + 1){
			//store top and bottom boundaries in col times
			for (l = 0; l <= numvalues + 1; l++){
				histogram = strcat(histogram, ""*"");
			}
		}else{
			for (jcol = 0; jcol <= numvalues + 1; jcol++){
				if(jcol == 0 || jcol == numvalues + 1){
					histogram = strcat(histogram, ""*"");
				}else if (irow > max - values[jcol - 1]){
					histogram = strcat(histogram, ""X"");
				}else{
					histogram = strcat(histogram, "" "");
				}
			}
		}
		if (irow != max + 1){
			histogram = strcat(histogram, ""\n"");
		}
	}
}",1
llu744,1696750061,1,"void Histogram(char *result, int *data, int dataSize) 
{
    int maxFreq = 0;
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxFreq)
            maxFreq = data[i];
    }
    
    for (int i = 0; i < dataSize + 2; i++)
        printf(""*"");
    printf(""\n"");
    printf(""*"");


    for (int row = maxFreq; row > 0; row--) {
        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row)
                result[col] = 'X';
            else
                result[col] = ' ';
        }
        result[dataSize] = '\0';
        printf(""%s*\n"", result);
        printf(""*"");
    }

    for (int i = 0; i < dataSize + 1; i++)
        printf(""*"");
    printf(""\n"");

}",0
llu744,1696750684,2,"#include <stdio.h>

void Histogram(char *result, int *data, int dataSize) 
{
    int maxFreq = 0;
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxFreq)
            maxFreq = data[i];
    }
    
    for (int i = 0; i < dataSize + 2; i++){
        printf(""*"");
    }
    printf(""\n"");
    printf(""*"");


    for (int row = maxFreq; row > 0; row--) {
        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row)
                result[col] = 'X';
            else
                result[col] = ' ';
        }
        result[dataSize] = '\0';
        printf(""%s*\n"", result);
        printf(""*"");
    }

    for (int i = 0; i < dataSize + 1; i++){
        printf(""*"");
    }

}",0
llu744,1696750976,3,"void Histogram(char *result, int *data, int dataSize) 
{
    int maxFreq = 0;
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxFreq)
            maxFreq = data[i];
    }
    
    for (int i = 0; i < dataSize + 2; i++){
        printf(""*"");
    }
    printf(""\n"");
    printf(""*"");


    for (int row = maxFreq; row > 0; row--) {
        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row)
                result[col] = 'X';
            else
                result[col] = ' ';
        }
        result[dataSize] = '\0';
        printf(""%s*\n"", result);
        printf(""*"");
    }

    for (int i = 0; i < dataSize + 1; i++){
        printf(""*"");
    }
    printf(""\n"");
    
    int length = maxFreq + 2;
    int i;


    for (i = maxFreq - 1; i >= 0; i--) {
        if (result[i] == '\n') {
            result[i] = '\0';
            return;
        }
    }

}",0
llu744,1696751084,4,"void Histogram(char *result, int *data, int dataSize) {
    int maxFreq = 0;

    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxFreq)
            maxFreq = data[i];
    }

    for (int i = 0; i < dataSize + 2; i++) {
        printf(""*"");
    }
    printf(""\n*"");

    for (int row = maxFreq; row > 0; row--) {
        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row)
                result[col] = 'X';  
            else
                result[col] = ' ';
            printf(""%c"", result[col]);
        }
        printf(""*\n*"");
    }

    for (int i = 0; i < dataSize + 1; i++) {
        printf(""*"");
    }
    printf(""\n"");

    int length = maxFreq + 2;
    int i;

    for (i = length - 1; i >= 0; i--) {
        if (result[i] == '\n') {
            result[i] = '\0';
            return;
        }
    }
}",0
lrei069,1696840085,1,"void Histogram(char string[], int data[], int length) {
    int maxFreq = 0;

    // Find the maximum frequency
    for (int i = 0; i < length; i++) {
        if (data[i] > maxFreq) {
            maxFreq = data[i];
        }
    }

    // Make the top border
    for (int i = 0; i < length + 2; i++) {
        string[i] = '*';
    }
    string[length + 2] = '\n';

    // Generate the histogram
    for (int i = maxFreq; i >= 0; i--) {
        string[(maxFreq - i + 1) * (length + 3)] = '*';
        string[(maxFreq - i + 1) * (length + 3) + length + 2] = '\n';
        for (int j = 0; j < length; j++) {
            if (data[j] >= i) {
                string[(maxFreq - i + 1) * (length + 3) + j + 1] = 'X';
            } else {
                string[(maxFreq - i + 1) * (length + 3) + j + 1] = ' ';
            }
        }
    }

    // Make the bottom border
    for (int i = 0; i < length + 2; i++) {
        string[(maxFreq + 2) * (length + 3) + i] = '*';
    }

    // Add null terminator
    string[(maxFreq + 3) * (length + 3)] = '\0';
}",0
lros711,1696369419,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* Result, int* Data, int l)
{

	// find the max value 

	int i;
	int Max;
	Max = 0;

	for (i = 1; i < l; i++) {
		if (Data[i] > Max) {
			Max = Data[i];
		}
	}

	// printing format

	int Row;
	int Col;
	int j;
	i = 0;
	j = Max;


	for (Row = 0; Row < (Max + 2); Row++) {
		for (Col = 0; Col < (l + 2); Col++) {
			// if at edge print *
			if ((Row == 0) || (Row == Max + 1) || (Col == 0) || (Col == l + 1)) {
				Result[i] = '*';
				i++;
			}
			//else print the body of the historgram
			if ((Row != 0) && (Row != (Max + 1)) && (Col != 0) && (Col != (l + 1))) {

				if (Data[Col - 1] > j) {
					Result[i] = 'X';
					i++;
				}
				else {
					Result[i] = ' ';
					i++;
				}
			}
		}
		j--;
		//change to new line
		if (Row < Max + 1) {
			Result[i] = '\n';
			i++;
		}
	}
	// End the array
	Result[i] = '\0';
}",0
lros711,1696369748,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* Result, int* Data, int l)
{

	// find the max value 

	int i;
	int Max;
	Max = 0;

	for (i = 0; i < l; i++) {
		if (Data[i] > Max) {
			Max = Data[i];
		}
	}

	// printing format

	int Row;
	int Col;
	int j;
	i = 0;
	j = Max;


	for (Row = 0; Row < (Max + 2); Row++) {
		for (Col = 0; Col < (l + 2); Col++) {
			// if at edge print *
			if ((Row == 0) || (Row == Max + 1) || (Col == 0) || (Col == l + 1)) {
				Result[i] = '*';
				i++;
			}
			//else print the body of the historgram
			if ((Row != 0) && (Row != (Max + 1)) && (Col != 0) && (Col != (l + 1))) {

				if (Data[Col - 1] > j) {
					Result[i] = 'X';
					i++;
				}
				else {
					Result[i] = ' ';
					i++;
				}
			}
		}
		j--;
		//change to new line
		if (Row < Max + 1) {
			Result[i] = '\n';
			i++;
		}
	}
	// End the array
	Result[i] = '\0';
}",1
lsal082,1696839780,1,"#include <stdio.h>

void Histogram(char result[], int data[], int length){
    int max = 0;
    for (int i = 0; i < length; i++){
        if (data[i] > max){
            max = data[i];
        }
    }
    
    int width = length * 2 + 3;
    int height = max + 2;
    
    int index = 0;
    for (int i = 0; i < height; i++){
        for (int j = 0; j < width; j++){
            result[index++] = ' ';
        }
        result[index++] = '\n';
    }
    result[index] = '\0';
    
    for (int i = 0; i < length; i++){
        int barHeight = data[i];
        for (int j = 0; j < barHeight; j++){
            result[(max - j) * (width +1) + i * 2 + 3] = 'X';
        }
    }
    
    for (int i = 0; i < height; i++){
        result[i * (width + 1)] = '*';
        result[(i + 1) * (width + 1) - 2] = '*';
    }
    
    for (int i = 0; i < width; i++){
        result[height * (width + 1) + i] = '*';
    }
}",0
ltan813,1696831109,1,"#include <stdio.h>
#include <string.h>

void Histogram(char formatted, intvalues, int n) {

    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int pos = 0;


    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '';
    }
    formatted[pos++] = '\n';


    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '';
        for (int col = 0; col < n; col++) {
            if (values[col] >= row) {
                formatted[pos++] = 'X';
            } else {
                formatted[pos++] = ' ';
            }
        }
        formatted[pos++] = '';
        formatted[pos++] = '\n';
    }


    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '';
    }
    formatted[pos] = '\0'; 
}
",0
ltan813,1696831139,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int n) {

    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }
    
    int pos = 0;  
    
   
    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos++] = '\n';
    
   
    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            if (values[col] >= row) {
                formatted[pos++] = 'X';
            } else {
                formatted[pos++] = ' ';
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }
    

    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos] = '\0'; 
}",1
ltan813,1696843112,3,"#include <stdio.h>
#include <string.h>

void Histogram(char formatted, int values[], int n) {
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }
    int pos = 0;
    memset(formatted, '', n + 2);  
    pos += n + 2;
    formatted[pos++] = '\n';

    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '';
        for (int col = 0; col < n; col++) {
            formatted[pos++] = (values[col] >= row) ? 'X' : ' ';
        }
        formatted[pos++] = '';
        formatted[pos++] = '\n';
    }
    memset(formatted + pos, '*', n + 2); 
    pos += n + 2;
    formatted[pos++] = '\n';
    formatted[pos] = '\0';
}
",0
ltan813,1696843428,4,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int n) {
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }
    int pos = 0;

    // Build top boundary 
    memset(formatted, '*', n + 2);  // Using memset
    pos += n + 2;
    formatted[pos++] = '\n';

    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            formatted[pos++] = (values[col] >= row) ? 'X' : ' ';
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }
    memset(formatted + pos, '*', n + 2);  // Use memset
    pos += n + 2;
    formatted[pos++] = '\n';
    formatted[pos] = '\0';
}
",0
ltan813,1696845752,5,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int n) {
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int pos = 0;

    memset(formatted, '*', n + 2);  
    formatted[n] = '\n';
    pos = n + 1;

    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            formatted[pos++] = (values[col] >= row) ? 'X' : ' ';
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }

    memset(formatted + pos, '*', n + 2);  
    formatted[pos + n + 1] = '\n';
    formatted[pos + n + 2] = '\0';
}

int main() {
    int values1[10] = {1, 0, 3, 1, 2, 4, 5, 6, 2, 2};
    int values2[3] = {1, 0, 1};
    char formatted[1000];
    char example[1000] = ""*****\n*X X*\n*****"";

    Histogram(formatted, values1, 10);
    printf(""%s\n\n"", formatted);

    Histogram(formatted, values2, 3);
    printf(""%s\n"", formatted);

    if (strcmp(example, formatted) == 0) {
        printf(""This matches EXACTLY and is correct\n"");
    } else {
        printf(""This does not match.\n"");
    }

    return 0;
}
",0
ltan813,1696845781,6,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int n) {
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int pos = 0;

    memset(formatted, '*', n + 2);  
    formatted[n] = '\n';
    pos = n + 1;

    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            formatted[pos++] = (values[col] >= row) ? 'X' : ' ';
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }

    memset(formatted + pos, '*', n + 2);  
    formatted[pos + n + 1] = '\n';
    formatted[pos + n + 2] = '\0';
}
",0
ltan813,1696846015,7,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int n) {
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int pos = 0;

    memset(formatted, '*', n + 2);  
    formatted[n + 1] = '\n';
    pos = n + 2;

    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            formatted[pos++] = (values[col] >= row) ? 'X' : ' ';
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }

    memset(formatted + pos, '*', n + 2); 
    formatted[pos + n + 1] = '\n';
    formatted[pos + n + 2] = '\0';
}",0
ltan813,1696846850,8,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int n) {
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int pos = 0;

    memset(formatted, ' ', n + 2);  
    formatted[n] = '*';
    formatted[n + 1] = '\n';
    pos = n + 2;

    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            formatted[pos++] = (values[col] >= row) ? 'X' : ' ';
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }

    memset(formatted + pos, '*', n + 2); 
    formatted[pos + n + 1] = '\n';
    formatted[pos + n + 2] = '\0';
}
",0
ltan813,1696847109,9,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int n) {
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int pos = 0;  

    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[n + 1] = '\n';

    for (int row = maxVal; row > 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            formatted[pos++] = (values[col] >= row) ? 'X' : ' ';
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }

    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos] = '\0';
}
",0
ltan813,1696847164,10,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int n) {
    int maxVal = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int pos = 0;

    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[n + 1] = '\n';

    for (int row = maxVal; row >= 0; row--) {
        formatted[pos++] = '*';
        for (int col = 0; col < n; col++) {
            if (values[col] > row) {
                formatted[pos++] = 'X';
            } else {
                formatted[pos++] = ' ';
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }

    for (int i = 0; i < n + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos] = '\0';
}
",0
lwon290,1696847928,1,"void Histogram(char* graph, int values[], int len)
{
    int maxValue = 0;

    // Finds the maximum height of the graph
    for (int i = 0; i < len; i++) {
        if (values[i] > maxValue) {
            maxValue = values[i];
        }
    }
    // Total array length including newline characters
    int arrayLen = (maxValue + 2) * (len + 3);

    // Chunks the array using newline characters and adds side borders
    int count = 0;
    for (int i = 0; i < arrayLen - 1; i++) {

        if (i < len + 2 || i > arrayLen - (len + 2) - 1) {
            graph[i] = '*';
        }

        if (i % (len + 2) == 0 && i != 0) {
            graph[i + count] = '\n';
            graph[i + count + 1] = '*';
            graph[i + count - 1] = '*';
            count++;
        }
    }

    // Populates graph area
    int row = 0;
    int col = 0;
    for (int i = 0; i < arrayLen; i++) {
        if (graph[i] == -52) {
            if (maxValue - row - values[col] <= 0) {
                graph[i] = 'X';
            }
            else {
                graph[i] = ' ';
            }
            col++;

            if (col > len - 1) {
                col = 0;
                row++;
            }
        }
    }

    // Terminates graph at the array length
    graph[arrayLen - 1] = '\0';
}",0
lwon290,1696847993,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* graph, int values[], int len)
{
    int maxValue = 0;

    // Finds the maximum height of the graph
    for (int i = 0; i < len; i++) {
        if (values[i] > maxValue) {
            maxValue = values[i];
        }
    }
    // Total array length including newline characters
    int arrayLen = (maxValue + 2) * (len + 3);

    // Chunks the array using newline characters and adds side borders
    int count = 0;
    for (int i = 0; i < arrayLen - 1; i++) {

        if (i < len + 2 || i > arrayLen - (len + 2) - 1) {
            graph[i] = '*';
        }

        if (i % (len + 2) == 0 && i != 0) {
            graph[i + count] = '\n';
            graph[i + count + 1] = '*';
            graph[i + count - 1] = '*';
            count++;
        }
    }

    // Populates graph area
    int row = 0;
    int col = 0;
    for (int i = 0; i < arrayLen; i++) {
        if (graph[i] == -52) {
            if (maxValue - row - values[col] <= 0) {
                graph[i] = 'X';
            }
            else {
                graph[i] = ' ';
            }
            col++;

            if (col > len - 1) {
                col = 0;
                row++;
            }
        }
    }

    // Terminates graph at the array length
    graph[arrayLen - 1] = '\0';
}",0
mabb997,1696811619,1,"void Histogram(char* outstring, int numarray[], int elements)
{
    char line[1000];
    
    outstring[0] = '\0';
    line[0] = '\0';
    
	int i, highest = 0, k, height, width;
	for (i = 0; i < elements; i++) {
		if (numarray[i] > highest) {
			highest = numarray[i];
		}
	}

	height = highest + 2;
	width = elements + 2;

	for (i = 0; i < width; i++) {
		strcat(outstring, ""*"");
	}

	for (i = highest; i >= 1; i--) {
	    strcat(line, ""*"");
		for (k = 0; k < elements; k++) {
			if (numarray[k] < i) {
				strcat(line, "" "");
			}
			if (numarray[k] >= i) {
				strcat(line, ""X"");
			}
		}
		strcat(line, ""*\n"");
	}

	strcat(outstring, ""\n"");
	strcat(outstring, line);
	
	for (i = 0; i < width; i++) {
		strcat(outstring, ""*"");
	}

}
",0
mabb997,1696812108,2,"void Histogram(char* outstring, int numarray[], int elements)
{
	char line[10000];

	outstring[0] = '\0';
	line[0] = '\0';

	int i, highest = 0, k, width;
	for (i = 0; i < elements; i++) {
		if (numarray[i] > highest) {
			highest = numarray[i];
		}
	}

	width = elements + 2;

	for (i = 0; i < width; i++) {
		strcat(outstring, ""*"");
	}

	for (i = highest; i >= 1; i--) {
		strcat(line, ""*"");
		for (k = 0; k < elements; k++) {
			if (numarray[k] < i) {
				strcat(line, "" "");
			}
			if (numarray[k] >= i) {
				strcat(line, ""X"");
			}
		}
		strcat(line, ""*\n"");
	}

	strcat(outstring, ""\n"");
	strcat(outstring, line);

	for (i = 0; i < width; i++) {
		strcat(outstring, ""*"");
	}

}
",1
mahu925,1696225771,1,"void Histogram(char *formatted, int *values,  int numOfValues){
    int i,j, width, height = 0;
    //resetting formatted:
    
    int length = 0;
    length = strlen(formatted);
    for (i=0; i<length;i++){
        formatted[i] = 0;
    }
    
    
    
    //finding the height of the Histogram:
    for(i=0;i<=numOfValues;i++){
        if(values[i]> height){
            height = values[i];
        }
    }
    width = numOfValues;
    //writing the top border:
    for(i=0; i<width+2; i++){
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""\n"");
    
    
    //writing each line:
    for(i=height;i>0;i--){
        strcat(formatted, ""*"");
        
        for(j=0; j<width;j++){
            
            if(values[j]>= i){
                strcat(formatted,""X"");
            }else{
                strcat(formatted,"" "");
                }
        }
        strcat(formatted,""*\n"");
    }
    
    
    //writing the bottom border
    for(i=0; i<width+2; i++){
        strcat(formatted, ""*"");
    }
}",0
mahu925,1696293160,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values,  int numOfValues){
    int i,j, width, height = 0;
    //resetting formatted:
    
    int length = 0;
    length = strlen(formatted);
    for (i=0; i<length;i++){
        formatted[i] = 0;
    }
    
    
    
    //finding the height of the Histogram:
    for(i=0;i<=numOfValues;i++){
        if(values[i]> height){
            height = values[i];
        }
    }
    width = numOfValues;
    //writing the top border:
    for(i=0; i<width+2; i++){
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""\n"");
    
    
    //writing each line:
    for(i=height;i>0;i--){
        strcat(formatted, ""*"");
        
        for(j=0; j<width;j++){
            
            if(values[j]>= i){
                strcat(formatted,""X"");
            }else{
                strcat(formatted,"" "");
                }
        }
        strcat(formatted,""*\n"");
    }
    
    
    //writing the bottom border
    for(i=0; i<width+2; i++){
        strcat(formatted, ""*"");
    }
}",1
mbal759,1696823351,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *histogram, int *values, int length)
{
    int i;
    int max_val = 0;
    int j;
    
    char asterisk[] = ""*"";
    char asterisk_newline[] = ""*\n"";
    char x[] = ""X"";
    char whitespace[] = "" "";

    *histogram = '\0';
    
    strcat(histogram, asterisk);
    for (i = 0; i < length; i++)
    {
        strcat(histogram, asterisk);
    }
    strcat(histogram, asterisk_newline);

    for (i = 0; i < length; i++)
    {
        if (values[i] > max_val)
        {
            max_val = values[i];
        }
    }
    int height = max_val;
    
    for (j = 0; j < height; j++)
    {
        strcat(histogram, asterisk);
        for (i = 0; i < length; i++)
        {
            
            if (values[i] >= max_val)
            {
                strcat(histogram, x);
            }
            else
            {
                strcat(histogram, whitespace);
            }
        }
        max_val -= 1;
        strcat(histogram, asterisk_newline);
    }

    strcat(histogram, asterisk);
    for (i = 0; i < length; i++)
    {
        strcat(histogram, asterisk);
    }
    strcat(histogram, asterisk);
}",1
mboy221,1696216577,1,"#include <stdio.h>
#include <string.h>

void Histogram(char grid[], int array[], int len) {
    int OldLen = strlen(grid);
    for (int j = 0; j<OldLen; j++) {
        grid[j] = '\0';
    }
    int high = array[0];
    grid[0] = '*';
    grid[len+1] = '*';
    grid[len+2] = '\n';
    for (int i = 0; i < len; i++) {
        grid[i+1] = '*';
        if (array[i] > high) {
            high = array[i];
        }
    }
    int number = high;
    for (int l = (len+3); l<((high+2)*(len+2)-(len+2)); l += (len+3)) {
        grid[l] = '*';
        for (int k = 1; k<(len+2);k++) {
            if (array[k-1] >= number) {
                grid[k+l] = 'X';
            } else {
                grid[k+l] = ' ';
            }
        }
        number--;
        grid[l+len+1] = '*'; 
        grid[l+len+2] = '\n';
    }
    for (int m = ((high+2)*(len+2)-(len+2)+high+1);m<((high+2)*(len+2)+high+1);m++) {
        grid[m] = '*';
    }
}",0
mboy221,1696217105,2,"void Histogram(char grid[], int array[], int len) {
    int OldLen = strlen(grid);
    for (int j = 0; j<OldLen; j++) {
        grid[j] = '\0';
    }
    int high = array[0];
    grid[0] = '*';
    grid[len+1] = '*';
    grid[len+2] = '\n';
    for (int i = 0; i < len; i++) {
        grid[i+1] = '*';
        if (array[i] > high) {
            high = array[i];
        }
    }
    int number = high;
    for (int l = (len+3); l<((high+2)*(len+2)-(len+2)+high); l += (len+3)) {
        grid[l] = '*';
        for (int k = 1; k<(len+2);k++) {
            if (array[k-1] >= number) {
                grid[k+l] = 'X';
            } else {
                grid[k+l] = ' ';
            }
        }
        number--;
        grid[l+len+1] = '*'; 
        grid[l+len+2] = '\n';
    }
    for (int m = ((high+2)*(len+2)-(len+2)+high+1);m<((high+2)*(len+2)+high+1);m++) {
        grid[m] = '*';
        grid[m+1] = '\0';
    }
}",1
mbut885,1696632794,1,"void Histogram(char* graph, int* array, int length) {

    int m;
    for (m = 0; m < strlen(graph); m++)
    {
        graph[m] = 0;
    }

    int borderwidth = length + 1;
    char border[] = ""*"";
    int i;
    for (i = 0; i < borderwidth; i++) {
        strcat(graph, border);
    }

    char endline[] = ""*\n*"";

    strcat(graph, endline);

    int j;
    int biggest_value;

    biggest_value = 0;
    for (j = 0; j < length; j++) {
        if (array[j] > biggest_value) {
            biggest_value = array[j];
        }
    }

    char point[] = ""X"";
    char no_point[] = "" "";

    int k = 0;
    while (biggest_value > 0) {
        while (k < length) {
            if (array[k] >= biggest_value) {
                strcat(graph, point);
            }
            else {
                strcat(graph, no_point);
            }
            k++;
        }

        strcat(graph, endline);
        biggest_value--;
        k = 0;

    }

    for (i = 0; i < borderwidth; i++) {
        strcat(graph, border);
    }
    strcat(graph, ""\0"");
    return;
}",1
mcha833,1696695058,1,"#include <stdlib.h>
#include <string.h>

void Histogram(char formatted[], int values[], int length)
{
    int i,j,k;
    int max = 0;
    
    for(i=0; i<length; i++){
        if (values[i] > max){
            max = values[i];
        }
    }
    
    for(i=0; i<length; i++){
        formatted[i*(length+3)] = '*';
        formatted[i*(length+3) + length + 1] = '*';
        formatted[i+1] = '*';
        formatted[(max+1) * (length+3) + i + 1] = '*';
    }
    
    for(i=0; i<max; i++){
        for(j=0; j<length; j++){

            for(k = values[j]; k<max; k++){
                formatted[(max+1)*(length+3) + j + 1 - (i+1)*(length+3)] = ' ';
            }
            
            if(i < values[j]){
                for(k = 0; k<values[j]; k++){
                    formatted[(max+1)*(length+3) + j + 1 - (i+1)*(length+3)] = 'X';
                }
            }
        }
    }
    
    for(k=1; k<max + 2; k++){
        formatted[k*(length+3)-1] = '\n';
    }
}",0
mcha833,1696729589,2,"#include <stdlib.h>
#include <string.h>

void Histogram(char formatted[], int values[], int length)
{
    int i,j,k, new_max;
    int max = 0;
    for(i=0;i<((new_max+2)*(length+3)); i++){
        formatted[i] = '\0';
    }

    for(i=0; i<length; i++){
        if (values[i] > max){
            max = values[i];
        }
    }
    
    new_max = max;
    
    for(i=0; i<(max+2)*(length+3) - 1; i++){
        formatted[i] = '*';
    }

    for(j=0; j<length; j++){
        
        i = max;
        
        for(k = values[j]; k<max; k++){
            formatted[(max+1)*(length+3) + j + 1 - i*(length+3)] = ' ';
            i--;
        }

        if(i <= values[j]){
            for(k = 0; k<values[j]; k++){
                formatted[(max+1)*(length+3) + j + 1 - i*(length+3)] = 'X';
                i--;
            }
        }
    }

    for(k=1; k<max + 2; k++){
        formatted[k*(length+3)-1] = '\n';
    }
}",0
mcha833,1696730194,3,"#include <stdlib.h>
#include <string.h>

void Histogram(char formatted[], int values[], int length)
{
    int i,j,k;
    int max = 0;
    int new_max;
    

    for(i=0; i<length; i++){
        if (values[i] > max){
            max = values[i];
        }
    }
    
    new_max = max;
    
    for(i=0;i<((new_max+2)*(length+3)); i++){
        formatted[i] = '\0';
    }
    
    for(i=0; i<(max+2)*(length+3) - 1; i++){
        formatted[i] = '*';
    }

    for(j=0; j<length; j++){
        
        i = max;
        
        for(k = values[j]; k<max; k++){
            formatted[(max+1)*(length+3) + j + 1 - i*(length+3)] = ' ';
            i--;
        }

        if(i <= values[j]){
            for(k = 0; k<values[j]; k++){
                formatted[(max+1)*(length+3) + j + 1 - i*(length+3)] = 'X';
                i--;
            }
        }
    }

    for(k=1; k<max + 2; k++){
        formatted[k*(length+3)-1] = '\n';
    }
}",1
mdav506,1696302466,1,"void Histogram(char* histogram, int arrayValues[], int arrayLength)
{
	int max = 0;

	for (int x = 0; x < arrayLength; x++) {
		if (arrayValues[x] >= max) {
			max = arrayValues[x];
		}
	}

	int numRows = max + 1;
	int numCols = arrayLength + 1;

	strcpy(histogram, """");

	for (int i = numRows; i >= 0; i--) {
		for (int j = 0; j <= numCols; j++) {
			if (i == 0 || i == numRows) {
				strcat(histogram, ""*"");
			}
			else if (j == 0 || j == numCols) {
				strcat(histogram, ""*"");
			}
			else if (arrayValues[j - 1] >= i) {
				strcat(histogram, ""X"");
			}
			else {
				strcat(histogram, "" "");
			}
		}
		strcat(histogram, ""\n"");
	}
	strcat(histogram, ""\n"");
}",0
mdav506,1696304165,2,"void Histogram(char* histogram, int* arrayValues, int arrayLength)
{
	int max = 0;

	for (int x = 0; x < arrayLength; x++) {
		if (arrayValues[x] >= max) {
			max = arrayValues[x];
		}
	}

	int numRows = max + 1;
	int numCols = arrayLength + 1;

	strcpy(histogram, """");

	for (int i = numRows; i >= 0; i--) {
		for (int j = 0; j <= numCols; j++) {
			if (i == 0 || i == numRows) {
				strcat(histogram, ""*"");
			}
			else if (j == 0 || j == numCols) {
				strcat(histogram, ""*"");
			}
			else if (arrayValues[j - 1] >= i) {
				strcat(histogram, ""X"");
			}
			else {
				strcat(histogram, "" "");
			}
		}
		if (i == 0) {
			break;
		}
		else {
			strcat(histogram, ""\n"");
		}
	}
}",1
mfuj750,1696743866,1,"void Histogram(char *formatted, int values[], int num_ele)
{
	formatted[0] = '\0';

	for (int a = 0; a < num_ele + 2; a++) {
		strcat(formatted, ""*"");
	}
	strcat(formatted, ""\n"");
	
	int max = 0;
	for (int b = 0; b < num_ele; b++) {
		if (max < values[b]) {
			max = values[b];
		}
	}

	for (int c = max - 1; c >= 0; c--) {
		strcat(formatted, ""*"");
		for (int d = 0; d < num_ele; d++) {
			if (values[d] > c) {
				strcat(formatted, ""X"");
			}
			else {
				strcat(formatted, "" "");
			}
		}
		strcat(formatted, ""*"");

		strcat(formatted, ""\n"");
	}

	for (int e = 0; e < num_ele + 2; e++) {
		strcat(formatted, ""*"");
	}
	
}",1
mger154,1696226282,1,"void Histogram(char *formatted, int *values, int numArray) {
    
    int maxVal = 0;
    for (int i = 0; i < numArray; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int width = numArray + 2;
    int height = maxVal + 2;
   
    formatted[0] = '\0';

    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {
            if (col == 0 || col == width - 1 || row == 0 || row == height - 1) {
                strcat(formatted, ""*"");
            } else {
                int value = values[col - 1];
                if (value >= height - row - 1) {
                    strcat(formatted, ""X"");
                } else {
                    strcat(formatted, "" "");
                }
            }
        }
        strcat(formatted, ""\n"");
    }
}",0
mger154,1696226685,2,"void Histogram(char *formatted, int *values, int numArray) {
    int maxVal = 0;
    for (int i = 0; i < numArray; i++) {
        if (values[i] > maxVal) {
            maxVal = values[i];
        }
    }

    int width = numArray + 2;
    int height = maxVal + 2;

    formatted[0] = '\0';

    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {
            if (col == 0 || col == width - 1 || row == 0 || row == height - 1) {
                strcat(formatted, ""*"");
            } else {
                int value = values[col - 1];
                if (value >= height - row - 1) {
                    strcat(formatted, ""X"");
                } else {
                    strcat(formatted, "" "");
                }
            }
        }
        if (row < height - 1) {
            strcat(formatted, ""\n"");
        }
    }
}
",1
mgoy303,1696253394,1,"void Histogram(char* format, int* values, int num) {
    int max = values[0];
    for (int i = 0; i < num; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    
    int length = strlen(format);
    for (int m = 0; m < length; m++) {
        format[m] = '\0';
    }

    for (int j = 0; j < max + 2; j++) {
        for (int k = 0; k <= num + 2; k++) {
            if (j * (num + 3) + k != (max + 1) * (num + 3) + num + 2) {
                if (k == num + 2) {
                    format[j * (num + 3) + k] = '\n';
                } else if (j == 0 || j == max + 1 || k == 0 || k == num + 1) {
                    format[j * (num + 3) + k] = '*';
                } else if (max + 1 - j <= values[k - 1]) {
                    format[j * (num + 3) + k] = 'X';
                } else {
                    format[j * (num + 3) + k] = ' ';
                }
            }
        }
    }
}",0
mgoy303,1696253765,2,"void Histogram(char* format, int* values, int num) {
    int max = values[0];
    for (int i = 0; i < num; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    
    int length = strlen(format);
    for (int m = 0; m < length; m++) {
        format[m] = '\0';
    }

    for (int j = 0; j < max + 2; j++) {
        for (int k = 0; k <= num + 2; k++) {
            if (k == num + 2) {
                if (j == max + 1) {
                    format[j * (num + 3) + k] = '\0';
                } else {
                    format[j * (num + 3) + k] = '\n';
                }
                } else if (j == 0 || j == max + 1 || k == 0 || k == num + 1) {
                    format[j * (num + 3) + k] = '*';
                } else if (max + 1 - j <= values[k - 1]) {
                    format[j * (num + 3) + k] = 'X';
                } else {
                    format[j * (num + 3) + k] = ' ';
            }
        }
    }
}",1
mgua740,1696812841,1,"void Histogram(char* formatted, int* data, int length) {
    

    int max = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }


 
    formatted = strcat(formatted, ""*"");
    for (int i =0; i < length; i++) {
        formatted = strcat(formatted, ""*"");
    }
    formatted = strcat(formatted, ""*\n"");

    for (int i = 0; i < max; i++) {
        formatted = strcat(formatted, ""*"");
        for (int j = 0; j < length; j++) {
            if (data[j] >= max - i) {
                formatted = strcat(formatted, ""X"");
            }
            else {
                formatted = strcat(formatted, "" "");
            }
        }
        formatted = strcat(formatted, ""*\n"");
    }
    
    formatted = strcat(formatted, ""*"");
    for (int i = 0; i < length ; i++) {
        formatted = strcat(formatted, ""*"");
    }
    formatted = strcat(formatted, ""*\n"");
    


}",0
mgua740,1696813245,2,"void Histogram(char *formatted, int *data, int *length) {
    
    formatted[0] = '\0';
    int max = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }


 
    formatted = strcat(formatted, ""*"");
    for (int i =0; i < length; i++) {
        formatted = strcat(formatted, ""*"");
    }
    formatted = strcat(formatted, ""*\n"");

    for (int i = 0; i < max; i++) {
        formatted = strcat(formatted, ""*"");
        for (int j = 0; j < length; j++) {
            if (data[j] >= max - i) {
                formatted = strcat(formatted, ""X"");
            }
            else {
                formatted = strcat(formatted, "" "");
            }
        }
        formatted = strcat(formatted, ""*\n"");
    }
    
    formatted = strcat(formatted, ""*"");
    for (int i = 0; i < length ; i++) {
        formatted = strcat(formatted, ""*"");
    }
    formatted = strcat(formatted, ""*\n"");
    


}
",0
mgua740,1696813490,3,"void Histogram(char *formatted, int *data, int length) {
    
    formatted[0] = '\0';
    int max = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }


 
    formatted = strcat(formatted, ""*"");
    for (int i =0; i < length; i++) {
        formatted = strcat(formatted, ""*"");
    }
    formatted = strcat(formatted, ""*\n"");

    for (int i = 0; i < max; i++) {
        formatted = strcat(formatted, ""*"");
        for (int j = 0; j < length; j++) {
            if (data[j] >= max - i) {
                formatted = strcat(formatted, ""X"");
            }
            else {
                formatted = strcat(formatted, "" "");
            }
        }
        formatted = strcat(formatted, ""*\n"");
    }
    
    formatted = strcat(formatted, ""*"");
    for (int i = 0; i < length ; i++) {
        formatted = strcat(formatted, ""*"");
    }
    formatted = strcat(formatted, ""*\n"");
    


}
",0
mgua740,1696813680,4,"void Histogram(char *formatted, int *data, int length) {
    
    formatted[0] = '\0';
    int max = 0;
    for (int i = 0; i < length; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }


 
    formatted = strcat(formatted, ""*"");
    for (int i =0; i < length; i++) {
        formatted = strcat(formatted, ""*"");
    }
    formatted = strcat(formatted, ""*\n"");

    for (int i = 0; i < max; i++) {
        formatted = strcat(formatted, ""*"");
        for (int j = 0; j < length; j++) {
            if (data[j] >= max - i) {
                formatted = strcat(formatted, ""X"");
            }
            else {
                formatted = strcat(formatted, "" "");
            }
        }
        formatted = strcat(formatted, ""*\n"");
    }
    
    formatted = strcat(formatted, ""*"");
    for (int i = 0; i < length ; i++) {
        formatted = strcat(formatted, ""*"");
    }
    formatted = strcat(formatted, ""*"");
    


}
",1
mkaj411,1696647044,1,"void Histogram(char formatted[], int values[], int length) {
    
    int maximum = 0;
    for (int i = 0; i < length; i++) {
        if (values[i] > maximum) {
            maximum = values[i];
        }
    }
    int pos = 0;
    for (int i = 0; i < length + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos++] = '\n';
    
    for (int i = maximum; i > 0; i--) {
        formatted[pos++] = '*';
        for (int j = 0; j < length; j++) {
            if (values[j] >= i) {
                formatted[pos++] = 'X';
            }
            else {
                formatted[pos++] = ' ';
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }
   
    
    for (int i = 0; i < length + 2; i++) {
        formatted[pos++] = '*';
    }

    formatted[pos] = '\0';
}",1
mkee115,1696307402,1,no,0
mket106,1696841109,1,"void Histogram(char *formatted, int *values, int length) {
  int ptr = 0, i, max = values[0];

  for (int x = 1; x < length; x++)
    if (values[x] > max)
      max = values[x];

  memset(formatted, 0, 1000);

  for (int i = 0; i < length+2; i++, ptr++)
    formatted[ptr] = '*';

  formatted[ptr++] = '\n';

  for (int j = max; j > 0; j--) {
    for (int v = 0; v < length+2; v++, ptr++) {
      if (v == 0 || v == length+1)
        formatted[ptr] = '*';
      else if (values[v-1] >= j)
        formatted[ptr] = 'X';
      else
        formatted[ptr] = ' ';
    }
    formatted[ptr++] = '\n';
  }

  for (int i = 0; i < length+2; i++, ptr++)
    formatted[ptr] = '*';
}",0
mket106,1696841151,2,"void Histogram(char *formatted, int *values, int length) {
  int ptr = 0, max = values[0];

  for (int x = 1; x < length; x++)
    if (values[x] > max)
      max = values[x];

  memset(formatted, 0, 1000);

  for (int i = 0; i < length+2; i++, ptr++)
    formatted[ptr] = '*';

  formatted[ptr++] = '\n';

  for (int j = max; j > 0; j--) {
    for (int v = 0; v < length+2; v++, ptr++) {
      if (v == 0 || v == length+1)
        formatted[ptr] = '*';
      else if (values[v-1] >= j)
        formatted[ptr] = 'X';
      else
        formatted[ptr] = ' ';
    }
    formatted[ptr++] = '\n';
  }

  for (int i = 0; i < length+2; i++, ptr++)
    formatted[ptr] = '*';
}",1
mkim670,1696817070,1,"#include <stdio.h>

void Histogram(int formatted[1000], int values[100], int numVal)
{
	int i, k, l, max, numPt;

	max = 0;

	for (i = 0; i <= (numVal + 1); i++) {
		if (i == numVal + 1) {
			formatted[i] =  '*\n';
		}
		else {
			formatted[i] =  '*';
		}
		if (values[i] > max) {
			max = values[i]; // calculating the max value in the array
		}
	}

	numPt = (numVal + 2) * (max + 2);

	k = max - 1;
	for (i = (numVal + 2); i <= ((numVal + 2) * max); i++) {
		l = 0;
			if (i % (numVal + 2) == 0) {
				formatted[i] = '*';
			}
			else if ((i + 1) % (numVal + 2) == 0) {
				formatted[i] = '*\n';
			}
			else if ((values[l] - k) > 0) {
				formatted[i] = 'X';
				l++;
			}
			else {
				formatted[i] = ' ';
				l++;
			}
		k--;
	}

	for (i = ((numVal + 2) * (max + 1)); i < numPt; i++) {
		formatted[i] = '*';
	}

	formatted[numPt] = '\0';
}",0
mkim670,1696834739,2,"#include <stdio.h>

void Histogram(char *formatted, int *values, int numVal)
{
	int i, k, l, max, numPt, row;

	max = 0;

	for (i = 0; i <= (numVal + 2); i++) {
		if (i == numVal + 1) {
			formatted[i] = '*';
		}
		else if (i == numVal + 2) {
			formatted[i] = '\n';
		}
		else {
			formatted[i] = '*';
		}
		if (values[i] > max) {
			max = values[i]; // calculating the max value in the array
		}
	}

	numPt = (numVal + 3) * (max + 2);

	k = max - 1;
	
	for (i = (numVal + 3); i <= ((numVal + 3) * (max+1) - 1); i++) {
		//printf(""%d "", i); 
		if (i % (numVal + 3) == 0) {
			formatted[i] = '*';
			l = 0;
			row = i / (numVal + 3);
		}
		else if ((i + row - 1) % (numVal + 2) == 0) {
			formatted[i] = '*';
			k--;
		}
		else if (((i - l - 2) - row * (numVal + 3)) == 0) {
			formatted[i] = '\n';
		}
		else if ((values[l] - k) > 0) {
			formatted[i] = 'X';
			l++;
		}
		else {
			formatted[i] = ' ';
			l++;
		}
	}

	for (i = ((numVal + 3) * (max + 1)); i < (numPt - 1); i++) {
		formatted[i] = '*';
	}

	formatted[numPt - 1] = '\0';
}",0
mkim719,1696827353,1,"#include <stdio.h>
#include <string.h>

// The function to find the max value in the array. 
int max(int arr[], int n) {
    int m = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > m) {
            m = arr[i];
        }
    }
    return m;
}


// The Histogram() function defined above
void Histogram(char *formatted, int arr[], int n) 
{
    // Find the maximum element in the array
    int m = max(arr, n);

    // Initialize the formatted string with an empty string
    strcpy(formatted, """");

    // Append the top border of the histogram
    strcat(formatted, ""*"");
    for (int i = 0; i < n; i++) {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""*\n"");

    // Append the bars of the histogram from top to bottom
    for (int i = m; i > 0; i--) {
        strcat(formatted, ""*"");
        for (int j = 0; j < n; j++) {
            if (arr[j] >= i) {
                strcat(formatted, ""X"");
            } else {
                strcat(formatted, "" "");
            }
        }
        strcat(formatted, ""*\n"");
    }

    // Append the bottom border of the histogram
    strcat(formatted, ""*"");
    for (int i = 0; i < n; i++) {
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""*"");
}
",1
mlin729,1696394305,1,"
int FindTop(int formatted[], int length ){
   int top = 0;
   for (int i= 0 ; i <length; i++){
       if (formatted[i]> top){
           top =formatted[i];
       }
       
   }

   return top;
   
}
void Clear(char formatted[]){
    for (int i=0; i< 1000; i++){
        formatted[i]=0;
    }
}
void Histogram(char formatted[],int values[],int length){

    Clear(formatted);
    
    for (int i=0; i< length+2; i++){
        formatted[i] = '*';
    }
    formatted[length+2]= '\n';
    int top = FindTop(values, length);
    for (int j = 0; j < top; j++){
        for (int i=0; i < length + 3;i++ ) {
            if (i == 0){
                formatted[(j+1)*(length+3) + i] = '*';
                continue;
            }
            if (i == length + 1){
                formatted[(j+1)*(length+3) + i] = '*';
                continue;
            }
            if (i == length + 2){
                formatted[(j+1)*(length+3) + i] = '\n';
                continue;
            }
              if (values[i - 1] >= (top - j)){
                  formatted[(j+1)*(length+3) + i] = 'X';
                  continue;
              } else {
                  formatted[(j+1)*(length+3) + i] = ' ';
                  continue;
              }
              
          
        }
    }
     for (int i= (top + 1)*(length+3); i < (top + 1)*(length+3) + length + 2; i++){
        formatted[i] = '*';
    }
}",1
mloh302,1696329670,1,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Histogram(char *formatted, int inputArray[], int arraySize)
{
    // First, calculate the largest value in the inputArray
    // This will represent the height of the graph
    int max = 0;
    for (int i = 0; i < arraySize; i++) {
        if (inputArray[i] > max) {
            max = inputArray[i];
        }
    }

    /*Next, create string which formats the graph*/ 
    int index = 0;
    for (int j = max + 1; j >= 0; j--) {
        formatted[index++] = '*';   // always start with an asterisks
        
        // Data points must be inside the graph not outside the borders
        if (j < max + 1 && j > 0) {
            // For() loop creating the 'data' points for the graph
            for (int k = 0; k < arraySize; k++) {
                if (j <= inputArray[k]) {
                    formatted[index++] = 'X';
                } 
                else {
                    formatted[index++] = ' ';
                }
            }
        }
        
        // Creates the asterisk bar on the top and bottom of the graph
        if (j == max + 1 || j == 0) {
            for (int l = 0; l <= arraySize; l++) {
                formatted[index++] = '*';
            }
        }
        else {
            formatted[index++] = '*'; // creates the 'sidebar' of asterisks
        }
        formatted[index++] = '\n';
    }
    formatted[index - 1] = '\0';    // This indicates the end of the string (prevents a new line from being formed)
}",1
mman402,1696848482,1,"#include <stdio.h>
#include <strings.h>
int Largest(int *array, int length)
{
    int largestValue, i;

    largestValue = array[1];

    for (i = 0; i < length; i++)
    {
        if (array[i] > largestValue)
        {
            largestValue = array[i];
        }
    }
    return largestValue;
}

 void Histogram(char *formatted, int *values, int length)
{
    int maxvalue;
    int i,j;

    for (i=0;i<1000;i++)
    {
        formatted[i]='A
';
    }

    maxvalue=Largest(values,length);


    formatted[((length+3)*(maxvalue+1))+1]='\0';


    for (i=0;i<(length+3);i++)
    {

        formatted[i] = '*';
        formatted[((length + 3) * (maxvalue)) + i] = '*';
    }

    // add new line char

    for (i=1;i<(maxvalue+1);i++)
    {
        
        formatted[(i*(length+3)-1)]='\n';
       
    }

// add side border
    for (i = 1; i < (maxvalue + 2); i++)
    {
        formatted[(i * (length + 3) - 2)] = '*';
        formatted[(i * (length + 3) - (length+3))] = '*';
    }


    printf(""%s"",formatted);
}

    int main(void)
{
    int values1[10] = {1, 0, 3, 1, 2, 4, 5, 6, 2, 2};
    int values2[3] = {1, 0, 1};
    char formatted[1000];
    char example[1000] = ""*****\n*X X*\n*****"";

    Histogram(formatted, values1, 10);
  

}",0
mman808,1696811817,1,"int Histogram(char *formatted, int *values, int size){
    int largest = values[0];
    for (int i =0; i < size; i++){
        if (values[i] >= largest){          //finds the largest value in values array
            largest = values[i];
        }
    } 

int width = size + 3;
int height = largest + 3;

for (int i = 0; i <= width*height; i++){
    if (i % width == 0){
        formatted[i] = '\n';
    }else{
        formatted[i] = '*';
    }
formatted[width*height] = '\0';
}
for (int i = width; i<(width*height - width); i++){
    if (formatted[i] != '\n' && formatted[i+1] != '\n' && formatted[i-1] != '\n' && i % width != (width - 1)){  
        formatted[i] = ' ';
        }
}
for (int v = size-1; v >= 0; v--){
    int col = v + 2;
    for (int row = 0; row < largest; row++){
        int i = (row + 2)*width + col;
        if (row < largest - values[v]){
            formatted[i] = ' ';
        }else{
            formatted[i] = 'X';
        }
    }
}
return 0;
}",0
mman808,1696823052,2,"int Histogram(char *formatted, int *values, int size){
    int largest = values[0];
    for (int i =0; i < size; i++){
        if (values[i] >= largest){          //finds the largest value in values array
            largest = values[i];
        }
    } 

int width = size + 3;
int height = largest + 2;

for (int i = 0; i <= width*height; i++){
    if (i % width == 0){
        formatted[i] = '\n';
    }else{
        formatted[i] = '*';
    }
formatted[width*height] = '\0';
}
for (int i = width; i<(width*height - width); i++){
    if (formatted[i] != '\n' && formatted[i+1] != '\n' && formatted[i-1] != '\n' && i % width != (width - 1)){  
        formatted[i] = ' ';
        }
}
for (int v = size-1; v >= 0; v--){
    int col = v + 2;
    for (int row = 0; row < largest; row++){
        int i = (row + 1)*width + col;
        if (row < largest - values[v]){
            formatted[i] = ' ';
        }else{
            formatted[i] = 'X';
        }
    }
}

for (int row = 0; row < height - 1; row++){
    int i = row*width + width - 1;
    while(formatted[i] == ' ' || formatted[i] == '\n'){
        formatted[i] = '\0';
        i--;
    }
}
return 0;
}",0
mmas199,1696842385,1,"#include <stdio.h>
#include <string.h>

void GenerateHistogram(char* histogramString, int* dataValues, int dataSize)
{
    int highestValue = 0;
    for (int i = 0; i < dataSize; i++)
    {
        if (dataValues[i] > highestValue)
        {
            highestValue = dataValues[i];
        }
    }

    int stringIndex = 0;
    for (int i = 0; i <= highestValue + 1; i++)
    {
        histogramString[stringIndex++] = '*';
        for (int j = 0; j < dataSize; j++)
        {
            if (i == 0 || i == highestValue + 1)
            {
                histogramString[stringIndex++] = '*';
            }
            else if (dataValues[j] >= highestValue - i + 1)
            {
                histogramString[stringIndex++] = 'X';
            }
            else
            {
                histogramString[stringIndex++] = ' ';
            }
        }
        histogramString[stringIndex++] = '*';
        histogramString[stringIndex++] = '\n';
    }
    histogramString[stringIndex] = '\0';
}",0
mmca276,1696834585,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *format, int *values, int length)
{
    int i;
    int j;
    int Max = 0;
    format[0] = '\0';
    int box_length = length + 2;

    for (i = 0; i < length; i++)
    {
        if (values[i] > Max)
        {
            Max = values[i];
        }
    }
    int box_height = Max + 2;
    for (i = 0; i < box_length; i++)
    {
        strcat(format, ""*"");
    }
    strcat(format, ""\n"");

    for (i = Max; i >= 1; i--)
    { strcat(format, ""*"");
        for (j = 0; j < length; j++)
        { 
            int temp = values[j];
            if (temp >= i)
            {
                strcat(format, ""X"");
            }
            else
            {
                strcat(format, "" "");
            }
        }
        strcat(format, ""*\n"");
    }
for (i = 0; i < box_length; i++)
    {
        strcat(format, ""*"");
    }
}",0
mmca276,1696834800,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *format, int *values, int length)
{
    int i;
    int j;
    int Max = 0;
    format[0] = '\0';
    int box_length = length + 2;

    for (i = 0; i < length; i++)
    {
        if (values[i] > Max)
        {
            Max = values[i];
        }
    }
    for (i = 0; i < box_length; i++)
    {
        strcat(format, ""*"");
    }
    strcat(format, ""\n"");

    for (i = Max; i >= 1; i--)
    { strcat(format, ""*"");
        for (j = 0; j < length; j++)
        { 
            int temp = values[j];
            if (temp >= i)
            {
                strcat(format, ""X"");
            }
            else
            {
                strcat(format, "" "");
            }
        }
        strcat(format, ""*\n"");
    }
for (i = 0; i < box_length; i++)
    {
        strcat(format, ""*"");
    }
}",1
mnay503,1696744834,1,"#include <stdio.h>
#include<string.h>

void Histogram(char *result, int *data, int dataSize) 
{
   
    int maxValue = 0;
    for (int i = 0; i < dataSize; i++) 
    {
        if (data[i] > maxValue)
        {
            maxValue = data[i];
        }
    }

    
    int height = maxValue;
    int width = dataSize;

    for (int i = 0; i <= height; i++) 
    {
        for (int j = 0; j < width; j++) 
        {
            if (i == height) 
            {
                result[(height + 1) * width + j] = '*';
            } 
            else if (height - data[j] < i) 
            {
                result[i * width + j] = 'X';
            } 
            else 
            {
                result[i * width + j] = ' ';
            }
        }
        result[(i + 1) * width - 1] = '\n';
    }

    
    for (int j = 0; j < width; j++) 
    {
        result[(height + 1) * width + j] = '*';
    }
    result[(height + 2) * width - 1] = '\n';

    
    result[(height + 2) * width] = '\0';
}",0
mnay503,1696745151,2," #include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataSize) 
{
    
    int maxValue = 0;
    for (int i = 0; i < dataSize; i++) 
    {
        if (data[i] > maxValue) 
        {
            maxValue = data[i];
        }
    }

  
    int height = maxValue;
    int width = dataSize;

    
    for (int j = 0; j < width + 2; j++) 
    {
        result[j] = '*';
    }
    result[width + 2] = '\n';

    for (int i = 0; i <= height; i++)
    {
        result[(i + 1) * (width + 3)] = '*';
        for (int j = 0; j < width; j++) 
        {
            if (height - data[j] <= i) 
            {
                result[(i + 1) * (width + 3) + j + 1] = 'X';
            } else {
                result[(i + 1) * (width + 3) + j + 1] = ' ';
            }
        }
        result[(i + 1) * (width + 3) + width + 1] = '*';
        result[(i + 1) * (width + 3) + width + 2] = '\n';
    }

   
    for (int j = 0; j < width + 2; j++) 
    {
        result[(height + 2) * (width + 3) + j] = '*';
    }
    result[(height + 2) * (width + 3) + width + 2] = '\n';

    
    result[(height + 2) * (width + 3) + width + 3] = '\0';
}",0
mnay503,1696746140,3," #include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataSize) 
{
    
    int maxValue = 0;
    for (int i = 0; i < dataSize; i++)
    {
        if (data[i] > maxValue) 
        {
            maxValue = data[i];
        }
    }

    
    int height = maxValue;
    int width = dataSize;

    
    for (int j = 0; j < width + 2; j++) 
    {
        *result = '*';
        result++;
    }
    *result = '\n';
    result++;

    for (int i = 0; i < height + 1; i++) 
    {
        *result = '*';
        result++;
        for (int j = 0; j < width; j++) 
        {
            if (height - data[j] < i)
            {
                *result = 'X';
            } else {
                *result = ' ';
            }
            result++;
        }
        *result = '*';
        result++;
        *result = '\n';
        result++;
    }

    
    for (int j = 0; j < width + 2; j++) 
    {
        *result = '*';
        result++;
    }
    *result = '\n';
    result++;

   
    *result = '\0';
}
",0
mnay503,1696840473,4,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *value, int dSize) 
{
    int maxValue = 0;
    for (int i = 0; i < dSize; i++)
    {
        if (value[i] > maxValue) 
        {
            maxValue = value[i];
        }
    }

    int height = maxValue;
    int width = dSize;
    char j[width + 2];
    for (int i = 0; i < width + 2; i++) 
    {
        j[i] = '*';
    }

    strcpy(result, j);
    result += width + 2;
    *result = '\r';
    result++;
    *result = '\n';
    result++;

    for (int i = 0; i < height + 1; i++) 
    {
        *result = '*';
        result++;
        for (int k = 0; k < width; k++) 
        {
            if (height - value[k] < i)
            {
                *result = 'X';
            } 
            else 
            {
                *result = ' ';
            }
            result++;
        }
        *result = '*';
        result++;
        *result = '\r';
        result++;
        *result = '\n';
        result++;
    }

    strcpy(result, j);
    result += width + 2;
    *result = '\r';
    result++;
    *result = '\n';
    result++;

    *result = '\0';
}
",0
mpat501,1696395717,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *string, int array[], int length)
{

	int i, j, height=array[0];
	for (i=0; i<length; i++){
		if (array[i]>height){
			height=array[i];
		}
	}

	int rows, cols=length+3;
	rows=height+2;

	for (i=0; i<rows*cols; i++){
		string[i]=' ';
	}

	for (i=0; i<cols-1; i++){
		string[i]='*';
	}

	for (i=cols*(rows-1); i<(rows*cols)-1; i++){
		string[i]='*';
	}

	for (i=0; i<rows; i++){
		string[(i*cols)]='*';
		string[(i*cols)-2]='*';
	} 
	
	for (j=0; j<length; j++){
		int barheight=array[j];
		for (i=0; i<barheight; i++){
			string[((height-i)*cols)+j+1]='X';
			
		}
	}

	for (i=1; i<rows; i++){
		string[(i*cols)-1]='\n';
	}

	string[(rows*cols)-1]='\0';
}",1
mpey262,1696403433,1,"void Histogram(char *formatted, int *values, int length) {
    char map[1000] = ""\0"";
    strcpy(formatted, ""\0"");
    int max = values[0];
    for (int i = 0; i < length; i++) {
        if (values[i] > max) {
            max = values[i];    
        }    
    }
    
    for (int j = 0 ; j <= max + 1; j++) {
        for (int k =0; k <= length + 1; k++) {
            
            if (k == 0 || k == length + 1 || j == max + 1 || (j == 0 && k != length + 1)) {
                strcat(map, ""*"");  
            }
    
            else if (values[k-1] >= max + 1 - j) {
                strcat(map, ""X""); 
                values[k-1] = values[k-1] - 1;
            }
    
            else {
                strcat(map, "" "");     
            }
        }
        if (j != max + 1) {
            strcat(map, ""\n"");     
        }
    }
    strcat(formatted, map);
}",1
msil440,1696839053,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int data[], int dataSize) {
    // Finding the maximum value in the data to determine the height of the histogram
    int max = 0;
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Now to initialise the result string
    strcpy(result, """");

    // Creating histogram rows:
    for (int row = max; row >= 0; row--) {
        strcat(result, ""*"");
        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }

    // Add the bottom border
    for (int col = 0; col < dataSize + 2; col++) {
        strcat(result, ""*"");
    }
}",0
msin609,1696734398,1,"void Histogram(char* formatted, int* values, int len) {
	formatted = 1000
	int i;
	int j;
	int k;
	int l;
	int lenon = len + 2;
	int lenon1 = len + 3;
	int sad;
	int largest = 0;
	int lari;
	for (i = 0; i < lenon; i++) {
		formatted[i] = '*';
		
	}
	for (i = 0; i < len; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}
	lari = largest;
	largest++;
	formatted[lenon] = '\n';
	for(i = 0; i < lari; i++) {
		sad = lenon + lenon1 * (i+1);
		largest --;
		for (j = sad - lenon1 + 2, k = 0; j < sad-1, k < len; j++, k++) {
			formatted[sad - lenon1 + 1] = '*';
			formatted[sad-1] = '*';
			formatted[sad] = '\n';
			if (values[k] >= largest) {
				formatted[j] = 'X';
			}
			else {
				formatted[j] = ' ';
			}
		}
	}
	l = 0;
	while (formatted[l] != '\0') {
		l++;
	}
	for (i = l; i < l + lenon; i++) {
		formatted[i] = '*';
	}
}",0
msin609,1696734412,2,"void Histogram(char* formatted, int* values, int len) {
	int i;
	int j;
	int k;
	int l;
	int lenon = len + 2;
	int lenon1 = len + 3;
	int sad;
	int largest = 0;
	int lari;
	for (i = 0; i < lenon; i++) {
		formatted[i] = '*';
		
	}
	for (i = 0; i < len; i++) {
		if (values[i] > largest) {
			largest = values[i];
		}
	}
	lari = largest;
	largest++;
	formatted[lenon] = '\n';
	for(i = 0; i < lari; i++) {
		sad = lenon + lenon1 * (i+1);
		largest --;
		for (j = sad - lenon1 + 2, k = 0; j < sad-1, k < len; j++, k++) {
			formatted[sad - lenon1 + 1] = '*';
			formatted[sad-1] = '*';
			formatted[sad] = '\n';
			if (values[k] >= largest) {
				formatted[j] = 'X';
			}
			else {
				formatted[j] = ' ';
			}
		}
	}
	l = 0;
	while (formatted[l] != '\0') {
		l++;
	}
	for (i = l; i < l + lenon; i++) {
		formatted[i] = '*';
	}
}",0
mtha724,1696755824,1,"void Histogram(char formatted[], int values[], int length){
    // Clears previous string
    formatted[0] = '\0';

    // Print first line of *
    for (int i = 0; i < (length + 2); i++){
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""\n""); // Skip Next Line

    // Find the max value of the graph
    int max = -1;
    for (int i = 0; i < length; i++){
        if (values[i] > max){
            max = values[i];
        }
    }

    // Loop for each row (start at top row)
    for (int row = max; row > 0; row--){
        // Loop for each column (left to right)
        for (int col = 0; col < length; col++){
            // Print * for border
            if (col == 0){
                strcat(formatted, ""*"");
            }
            // Print X for graph points
            if (values[col] >= row){
                strcat(formatted, ""X"");
            }
            else{
                strcat(formatted, "" "");
            }
        }
        strcat(formatted, ""*\n"");
    }
    // Print last line of *
    for (int i = 0; i < (length + 2); i++){
        strcat(formatted, ""*"");
    }
}",1
nask472,1696590728,1,"#include <stdio.h>
#include <string.h>


void Histogram(char *string, int *values, int num_elements) {
// Making top border of string
    string[0] = '\0';
    for(int i = 0; i < num_elements + 2; i++){
        strcat(string, ""*"");
    }

    strcat(string, ""\n"");

    int max = values[0];
    for (int i = 1; i < num_elements; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

     for (int row = max; row >= 1; row--) {
        strcat(string, ""*"");
        for (int col = 0; col < num_elements; col++) {
            if (values[col] >= row) {
                strcat(string, ""X"");
            } else {
                strcat(string, "" "");
            }
        }
        strcat(string, ""*"");
        strcat(string, ""\n"");
    }

// Last line of the border
    for(int i = 0; i < num_elements + 2; i++){
        
        strcat(string, ""*"");
    }
}",1
ndas832,1696827577,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int* values, int n) {
    int i; 
    int j; 
    int max_val = 0;
    //Iterate over each element in the values array. 
    //If an element is greater than the current max value the max value is updated 
    for (int i = 0; i < n; i++) {
        if (values[i] > max_val) {
            max_val = values[i];
        }
    }
    //Create a string of asterisks which are located at the top and bottom boarders of the histogram
    //and add a null character at the end
    char line[n + 3];
    for (i = 0; i < n + 2; i++) {
        line[i] = '*';
    }
    line[n + 2] = '\0';
    
    //Copy line to the formatted string and add a newline character.   
    strcpy(formatted, line);
    strcat(formatted, ""\n"");
    
    //Iteare from the maximum value down to one, where each iteration corresponds 
    // to a row in the histogram
    for (i = max_val; i > 0; i--) {
        char row[n + 1]; //The character array row holds the representation of the current row in the histogram 
        for (j = 0; j < n; j++) {
          if (values[j] >= i) {
              row[j] = 'X';
          } else {
              row[j] = ' '; 
          }
        }
    row[n] = '\0'; // mark the end of the row string 
    
        strcat(formatted, ""*""); //Appends the asterisk
        strcat(formatted, row); //Appends the values of the histogram ie:series of X and space characters 
        strcat(formatted, ""*\n""); //Appends an asterisk and new line 
    }
    // Add another row of astericks at the bottom of the histogram 
    strcat(formatted, line);
}
",1
ndso791,1696726809,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, const int* data, int length) 
{
    int max_value = 0;

    for (int i = 0; i < length; i++) 
    {
        if (data[i] > max_value) 
        {
            max_value = data[i];
        }
    }

    int width = max_value + 2;

    result[0] = '\0';

    for (int row = max_value; row >= 0; row--) 
    {
        for (int i = 0; i < length; i++) 
        {
            if (data[i] >= row + 1) 
            {
                strcat(result, ""*"");
            } 
            else if (data[i] >= row) 
            {
                strcat(result, ""X"");
            } 
            else 
            {
                strcat(result, "" "");
            }
        }
        if (row > 0) 
        {
            strcat(result, ""\n"");
        }
    }
}",0
ndso791,1696726858,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, const int* data, int length) 
{
    int max_value = 0;

    for (int i = 0; i < length; i++) 
    {
        if (data[i] > max_value) 
        {
            max_value = data[i];
        }
    }

    result[0] = '\0';

    for (int row = max_value; row >= 0; row--) 
    {
        for (int i = 0; i < length; i++) 
        {
            if (data[i] >= row + 1) 
            {
                strcat(result, ""*"");
            } 
            else if (data[i] >= row) 
            {
                strcat(result, ""X"");
            } 
            else 
            {
                strcat(result, "" "");
            }
        }
        if (row > 0) 
        {
            strcat(result, ""\n"");
        }
    }
}",0
nhar865,1696847425,1,"#include <string.h>
#include <stdio.h>

void Histogram(char buffer[], int data[], int n) {
    int max = 0;
    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    sprintf(buffer, ""%.*s\n"", n + 2, ""********************************************************************"");

    for (int i = 0; i < max; i++) {
        sprintf(buffer + strlen(buffer), ""*"");
        for (int j = 0; j < n; j++) {
            if (max - i <= data[j]) {
                sprintf(buffer + strlen(buffer), ""X"");
            } else {
                sprintf(buffer + strlen(buffer), "" "");
            }
        }
        sprintf(buffer + strlen(buffer), ""*\n"");
    }

    sprintf(buffer + strlen(buffer), ""%.*s"", n + 2, ""********************************************************************"");
}",1
nlal162,1696752690,1,"#include <stdio.h>

void Histogram(char *result, int data[], int size) {
    int max = 0;

    //the maximum value.
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize
    int w = size * 2 + 3;
    int h = max + 2;
    char histogram[h][w];

    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            histogram[i][j] = ' ';
        }
    }

    // Fill the histogram bars
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < data[i]; j++) {
            histogram[max - j][i * 2 + 1] = 'X';
        }
    }

    // Add '*' characters
    for (int i = 0; i < h; i++) {
        histogram[i][0] = '*';
        histogram[i][w - 1] = '*';
    }

    for (int i = 0; i < w; i++) {
        histogram[0][i] = '*';
        histogram[h - 1][i] = '*';
    }

    // Convert the 2D histogram array to a string
    int resultIndex = 0;
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            result[resultIndex++] = histogram[i][j];
        }
        result[resultIndex++] = '\n';
    }
    result[resultIndex] = '\0';
}
",0
nlal162,1696752989,2,"#include <stdio.h>

void Histogram(char *result, int data[], int size) {
    int max = 0;

    //the maximum value.
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize
    int w = size * 2 + 3;
    int h = max + 2;
    char histogram[h][w];

    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            histogram[i][j] = ' ';
        }
    }

    // Fill the histogram bars
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < data[i]; j++) {
            histogram[max - j][i * 2 + 1] = 'X';
        }
    }

    // Add '*' characters
    for (int i = 0; i < h; i++) {
        histogram[i][0] = '*';
        histogram[i][w - 1] = '*';
    }

    for (int i = 0; i < w; i++) {
        histogram[0][i] = '*';
        histogram[h - 1][i] = '*';
    }

    // Convert the 2D histogram array to a string
    int resultIndex = 0;
    for (int i = 0; i < h; i++) {
        for (int j = 0; j < w; j++) {
            result[resultIndex++] = histogram[i][j];
        }
        result[resultIndex++] = '\n';
    }
    result[resultIndex - 1] = '\0';
}",0
nmah920,1696811833,1,"void Histogram(char *string, int *values, int number)
{
    int i;

    int largest_value = 0;
    for (i = 0; i < number; i++)
    {
        if(values[i] > largest_value)
        {
            largest_value = values[i];
        }
    }

    for (i = 0; i < number + 2; i++)
    {
        string[i] = '*';
    }

    string[number + 2] = '\n';

    for (int row = largest_value; row > 0; row--)
    {
        char line[100] = ""*"";
        for (int i = 0; i < number; i++) 
        {
            if (values[i] >= row) 
            {
              strcat(line, ""X"");
            } 
            else
            {
              strcat(line, "" "");
            }
        }

        strcat(line, ""*\n"");

        strcat(string, line);
    }

    for (i = 0; i < number + 2; i++)
    {
        strcat(string, ""*"");
    }

    strcat(string, ""\n"");
}",0
nmah920,1696821349,2,"void Histogram(char *string, int *values, int number)
{
    
    int i;
    for(int i = 0; i < 1000; i++)
    {
        string[i] = '\0';
    }
    

    int largest_value = 0;
    for (i = 0; i < number; i++)
    {
        if(values[i] > largest_value)
        {
            largest_value = values[i];
        }
    }

    for (i = 0; i < number + 2; i++)
    {
        string[i] = '*';
    }
    

    string[number + 2] = '\n';

    for (int row = largest_value; row > 0; row--)
    {
        char line[100] = ""*"";
        for (int i = 0; i < number; i++) 
        {
            if (values[i] >= row) 
            {
              strcat(line, ""X"");
            } 
            else
            {
              strcat(line, "" "");
            }
        }

        if(row != 0){
            strcat(line, ""*\n"");
        }

        

        strcat(string, line);
    }

    for (i = 0; i < number + 2; i++)
    {
        strcat(string, ""*"");
    }

}",1
nrub019,1696748999,1,"int maxval(int *values, int length){

    int maxval = values[0];
    for (int i = 1; i < length; i++){
        if (values[i] > maxval)
            maxval = values[i];
    }
    return maxval;
}
void maxvalindexes(int *values, int length,int *indexes, int *sizeindexes, int max){

    int j = 0;

    for (int i = 0 ; i < length ; i++){
        if (values[i] == max){
            indexes[j] = i;
            j++;
        }
    }
    *sizeindexes = j - 1 ;
}

void Histogram(char *grid, int *values,int length) {

    //form top barrier of *
    for (int i = 0; i < length + 2; i++) {
        grid[i] = 42;
    }
    strcat(grid, ""\n"");

    int indexes[100] = {};
    int sizeindexes;

    int max = maxval(values, length);
    printf(""maxval = %d\n"", max);
    int loops = max;
    //larger nested to go coloumn by coloumn goes here
    //form grid rows
int fill [100] = {};
for (int z = loops; z > 0; z--) {
    char rowarray[100] = {};

    for (int i = 0; i < length + 2; i++) {
        if (i == 0 || i == length + 1) {
            rowarray[i] = 42;
        } else {
            rowarray[i] = 32;
        }
    }

    printf(""row array at 3 = %d\n"", rowarray[3]);

    maxvalindexes(values, length, indexes, &sizeindexes, max);
    printf(""indexes fdsfdsfds = %d\n"", sizeindexes);

    for (int i = 1; i <= length; i++) {
        for (int j = 0; j <= sizeindexes; j++) {
            if (i == indexes[j] + 1) {
                rowarray[i] = 88;
                fill[i] = 1;


            }
        }
    }
    for (int i = 1; i <= length; i++) {
        if(fill[i] == 1) {
            rowarray[i] = 88;
            if (max == 0) {
                fill[i] = 0;
            }
        }
    }
    strcat(grid, rowarray);
    strcat(grid, ""\n"");
    max--;
}
    //close
    char close[100] = {};
    for (int i = 0; i < length + 2; i++) {
        close[i] = 42;
    }
    strcat(grid, close);
}
",0
nrub019,1696749073,2,"int maxval(int *values, int length){

    int maxval = values[0];
    for (int i = 1; i < length; i++){
        if (values[i] > maxval)
            maxval = values[i];
    }
    return maxval;
}
void maxvalindexes(int *values, int length,int *indexes, int *sizeindexes, int max){

    int j = 0;

    for (int i = 0 ; i < length ; i++){
        if (values[i] == max){
            indexes[j] = i;
            j++;
        }
    }
    *sizeindexes = j - 1 ;
}

void Histogram(char *grid, int *values,int length) {

    //form top barrier of *
    for (int i = 0; i < length + 2; i++) {
        grid[i] = 42;
    }
    strcat(grid, ""\n"");

    int indexes[100] = {};
    int sizeindexes;

    int max = maxval(values, length);

    int loops = max;

int fill [100] = {};
for (int z = loops; z > 0; z--) {
    char rowarray[100] = {};

    for (int i = 0; i < length + 2; i++) {
        if (i == 0 || i == length + 1) {
            rowarray[i] = 42;
        } else {
            rowarray[i] = 32;
        }
    }



    maxvalindexes(values, length, indexes, &sizeindexes, max);
    

    for (int i = 1; i <= length; i++) {
        for (int j = 0; j <= sizeindexes; j++) {
            if (i == indexes[j] + 1) {
                rowarray[i] = 88;
                fill[i] = 1;


            }
        }
    }
    for (int i = 1; i <= length; i++) {
        if(fill[i] == 1) {
            rowarray[i] = 88;
            if (max == 0) {
                fill[i] = 0;
            }
        }
    }
    strcat(grid, rowarray);
    strcat(grid, ""\n"");
    max--;
}
    //close
    char close[100] = {};
    for (int i = 0; i < length + 2; i++) {
        close[i] = 42;
    }
    strcat(grid, close);
}
",0
nrub019,1696750272,3,"int maxval(int *values, int length){

    int maxval = values[0];
    for (int i = 1; i < length; i++){
        if (values[i] > maxval)
            maxval = values[i];
    }
    return maxval;
}
void maxvalindexes(int *values, int length,int *indexes, int *sizeindexes, int max){

    int j = 0;

    for (int i = 0 ; i < length ; i++){
        if (values[i] == max){
            indexes[j] = i;
            j++;
        }
    }
    *sizeindexes = j - 1 ;
}

void Histogram(char *grid, int *values,int length) {

    //form top barrier of *
    char open[100] = {};
    grid[0] = 0;
    for (int i = 0; i < length + 2; i++) {
        open[i] = 42;
    }
    strcat(grid, open);
    strcat(grid, ""\n"");

    int indexes[100] = {};
    int sizeindexes;

    int max = maxval(values, length);

    int loops = max;

int fill [100] = {};
for (int z = loops; z > 0; z--) {
    char rowarray[100] = {};

    for (int i = 0; i < length + 2; i++) {
        if (i == 0 || i == length + 1) {
            rowarray[i] = 42;
        } else {
            rowarray[i] = 32;
        }
    }



    maxvalindexes(values, length, indexes, &sizeindexes, max);


    for (int i = 1; i <= length; i++) {
        for (int j = 0; j <= sizeindexes; j++) {
            if (i == indexes[j] + 1) {
                rowarray[i] = 88;
                fill[i] = 1;


            }
        }
    }
    for (int i = 1; i <= length; i++) {
        if(fill[i] == 1) {
            rowarray[i] = 88;
            if (max == 0) {
                fill[i] = 0;
            }
        }
    }
    strcat(grid, rowarray);
    strcat(grid, ""\n"");
    max--;
}
    //close
    char close[100] = {};
    for (int i = 0; i < length + 2; i++) {
        close[i] = 42;
    }
    strcat(grid, close);
    
}
",1
ntur101,1696467272,1,"void Histogram(char* formatted, int values[], int length)
{
	int max = values[0];

	for (int i = 0; i < length; i++)
	{
		if (values[i] > max)
		{
			max = values[i];
		}
	}
	//printf(""%d\n"", max);
	
	int ArrayLocation = 0;

	for (int i = 0; i < length + 2; i++)
	{
		formatted[ArrayLocation] = '*';
		ArrayLocation++;
	}

	formatted[ArrayLocation] = '\n';
	ArrayLocation++;




	for (int i = max; i > 0; i--)
	{
		

		for (int j = 0; j < length; j++)
		{
			if (j == 0)
			{
				formatted[ArrayLocation] = '*';
				ArrayLocation++;
			}

			if (values[j] >= i)
			{
				formatted[ArrayLocation] = 'X';
				ArrayLocation++;
				//printf(""%s\n"", formatted);
			}
			else {
				formatted[ArrayLocation] = ' ';
				ArrayLocation++;
				//(""%s\n"", formatted); 
			}
			
			if (j == length - 1) {
				formatted[ArrayLocation] = '*';
				ArrayLocation++;
				formatted[ArrayLocation] = '\n';
				ArrayLocation++;
			}
			

			
		}
	}

	for (int i = 0; i < length + 2; i++)
	{
		formatted[ArrayLocation] = '*';
		ArrayLocation++;
	}

	formatted[ArrayLocation] = '\0';

}",1
nwei818,1696288695,1,"#include <stdio.h>
#include <string.h>

void Histogram (char *histogram, int data[], int axis){
    histogram [0]= '\0';
    int max = 0;

    //find largest number 
    for (int i = 0; i < axis; i++){
        if (data[i]>max){
            max = data[i];
        }
    }

    //add border top 
        for (int i = 0; i<axis+2; i++){
        strcat(histogram, ""*"");
    }

    strcat(histogram, ""\n"");

    for (int row = max - 1; row >=0; row--){ //go through each row from the bottum 
        strcat(histogram, ""*"");//add left boarder at the beginging of each row
        
        for (int i = 0; i<axis;i++){
            if (data[i] > row) {
                strcat(histogram, ""X"");
            } else {
                strcat(histogram, "" "");
            }
        }

        strcat(histogram, ""*\n""); //add right border at the end of each row & new line
    }

    //add border bottum 
        for (int i = 0; i<axis+2; i++){
        strcat(histogram, ""*"");
    }
}",1
nwei818,1696289687,2,"void Histogram (char *histogram, int data[], int axis){
    histogram [0]= '\0';
    int max = 0;

    //find largest number 
    for (int i = 0; i < axis; i++){
        if (data[i]>max){
            max = data[i];
        }
    }

    //add border top 
        for (int i = 0; i<axis+2; i++){
        strcat(histogram, ""*"");
    }

    strcat(histogram, ""\n"");

    for (int row = max - 1; row >=0; row--){ //go through each row from top to bottum 
        strcat(histogram, ""*"");//add left boarder at the beginging of each row
        for (int i = 0; i<axis;i++){
            if (data[i] > row) {
                strcat(histogram, ""X"");
                printf(""%i %i\n"", row, data [i]);
            } else {
                strcat(histogram, "" "");
            }
        }

        strcat(histogram, ""*\n""); //add right border at the end of each row & new line
    }

    //add border bottum 
        for (int i = 0; i<axis+2; i++){
        strcat(histogram, ""*"");
    }
}",0
nwei818,1696289739,3,"void Histogram (char *histogram, int data[], int axis){
    histogram [0]= '\0';
    int max = 0;

    //find largest number 
    for (int i = 0; i < axis; i++){
        if (data[i]>max){
            max = data[i];
        }
    }

    //add border top 
        for (int i = 0; i<axis+2; i++){
        strcat(histogram, ""*"");
    }

    strcat(histogram, ""\n"");

    for (int row = max - 1; row >=0; row--){ //go through each row from top to bottum 
        strcat(histogram, ""*"");//add left boarder at the beginging of each row
        for (int i = 0; i<axis;i++){
            if (data[i] > row) {
                strcat(histogram, ""X"");
            } else {
                strcat(histogram, "" "");
            }
        }

        strcat(histogram, ""*\n""); //add right border at the end of each row & new line
    }

    //add border bottum 
        for (int i = 0; i<axis+2; i++){
        strcat(histogram, ""*"");
    }
}
",1
nwil850,1696670773,1,"#include <stdio.h>
#include <string.h>

/* final histogram with stars is going to have number of rows according to the max value in the array +2 due 
to stars and cols according to length of array values plus 2 for the stars this counts the \0 null at the end 

rows = valuemax+2 number of strings in the 2D char array
cols = valuelength+2 length of each string in the array

*/
// create a 2D array that includes the ints of the values of the 'value' array and check in the for loop 
// for 1/0 if 1 print X if 0 print ' '.
// will be a nested for loop, the nested for [0,0,0,0,0,1,0]

void Histogram(char *formatted, int *values, int vlen){
    
    int max = -9999;
    for (int x = 0; x < vlen; x++) {
        if (values[x] > max) {
            max = values[x];
        }
    }

    int rows = max + 2; 
    int j = max + 2;
    int line = 0;
    int f = max;
    while (j >= 0){
        
        if (j == max+2){
            for (int i = 0; i < rows; i++){
                formatted[i] = '*';
        }
        formatted[rows] = '\n';
        }
        else if (j > 0 && j < max+2){
            for (int k = 0; k <= rows; k++){
                if (k == 0){
                  formatted[k+line] = '*';
                  }
              
                if (k > 0 && k <= vlen + 1){
                    
                    int value_index = k - 1;
                    int value = values[value_index];
                    
                    if (value >= f){
                        formatted[k + line] = 'X';
                    }
                    else {
                        formatted[k + line] = ' ';   
                    }
                    
                 
                  }
                if (k == rows-1){
                  formatted[k + line] = '*';
                  }
                if (k == rows){
                  formatted[k + line] = '\n';
                  }
            }
        }
        else if (j == 0){
            for (int i = 0; i < rows; i++){
                formatted[i + line] = '*';
        }
        formatted[rows + line] = '\0';
        }
    j--;
    f--;
    line = line + rows + 1;
}
}


int main(){

int values1[10] = {1, 0, 3, 1, 2, 4, 5, 6, 2, 2};
int values2[3] = {1, 0, 1};
char formatted[1000];
char example[1000] = ""*****\n*X X*\n*****"";

Histogram(formatted, values1, 10);
printf(""%s\n\n"", formatted);

return 0;
}
",0
nwil850,1696676287,2,"#include <stdio.h>
#include <string.h>

/* final histogram with stars is going to have number of rows according to the max value in the array +2 due 
to stars and cols according to length of array values plus 2 for the stars this counts the \0 null at the end 

rows = valuemax+2 number of strings in the 2D char array
cols = valuelength+2 length of each string in the array

*/

void Histogram(char *formatted, int *values, int vlen){
    
    int max = -9999;
    for (int x = 0; x < vlen; x++) {
        if (values[x] > max) {
            max = values[x];
        }
    }

    int rows = max + 2; 
    int cols = vlen + 2;
    int j = max+1;
    int line = 0;
    int f = max+1;
    while (j >= 0){
        
        if (j == max+1){
            for (int i = 0; i < cols; i++){
                formatted[i] = '*';
            }
        formatted[cols] = '\n';
        }
        else if (j > 0 && j < max+1){
            for (int k = 0; k <= cols; k++){
                if (k == 0){
                  formatted[k+line] = '*';
                  }
              
                else if (k < cols-1){
                    
                    int value_index = k - 1;
                    int value = values[value_index];
                    
                    if (value >= f){
                        formatted[k + line] = 'X';
                    }
                    else {
                        formatted[k + line] = ' ';   
                    }
                    
                 
                  }
                else if (k == cols-1){
                  formatted[k + line] = '*';
                  }
                else if (k == cols){
                  formatted[k + line] = '\n';
                  }
            }
        }
        else if (j == 0){
            for (int i = 0; i < cols; i++){
                formatted[i + line] = '*';
        }
        formatted[cols + line] = '\0';
        }
    j--;
    f--;
    line = line + cols + 1;
}
}


int main(){

int values1[10] = {1, 0, 3, 1, 2, 4, 5, 6, 2, 2};

char formatted[1000];

Histogram(formatted, values1, 10);
printf(""%s\n\n"", formatted);

return 0;
}
",0
nwil850,1696676321,3,"#include <stdio.h>
#include <string.h>

/* final histogram with stars is going to have number of rows according to the max value in the array +2 due 
to stars and cols according to length of array values plus 2 for the stars this counts the \0 null at the end 

rows = valuemax+2 number of strings in the 2D char array
cols = valuelength+2 length of each string in the array

*/

void Histogram(char *formatted, int *values, int vlen){
    
    int max = -9999;
    for (int x = 0; x < vlen; x++) {
        if (values[x] > max) {
            max = values[x];
        }
    }

    int cols = vlen + 2;
    int j = max+1;
    int line = 0;
    int f = max+1;
    while (j >= 0){
        
        if (j == max+1){
            for (int i = 0; i < cols; i++){
                formatted[i] = '*';
            }
        formatted[cols] = '\n';
        }
        else if (j > 0 && j < max+1){
            for (int k = 0; k <= cols; k++){
                if (k == 0){
                  formatted[k+line] = '*';
                  }
              
                else if (k < cols-1){
                    
                    int value_index = k - 1;
                    int value = values[value_index];
                    
                    if (value >= f){
                        formatted[k + line] = 'X';
                    }
                    else {
                        formatted[k + line] = ' ';   
                    }
                    
                 
                  }
                else if (k == cols-1){
                  formatted[k + line] = '*';
                  }
                else if (k == cols){
                  formatted[k + line] = '\n';
                  }
            }
        }
        else if (j == 0){
            for (int i = 0; i < cols; i++){
                formatted[i + line] = '*';
        }
        formatted[cols + line] = '\0';
        }
    j--;
    f--;
    line = line + cols + 1;
}
}
",1
ogan176,1696498585,1,"void Histogram(char* formatted, int values[], int n) {
    int max_val = 0;
    for (int i = 0; i < n; i++) {
        if (values[i] > max_val) {
            max_val = values[i];
        }
    }

    int idx = 0; 

    for (int i = 0; i < n + 2; i++) {
        formatted[idx] = '*';
        idx = idx + 1;
    }
    formatted[idx] = '\n';
    idx = idx + 1;

    for (int i = max_val; i > 0; i--) {
        formatted[idx] = '*';
        idx = idx + 1;
        for (int j = 0; j < n; j++) {
            if (values[j] >= i) {
                formatted[idx] = 'X';
            }
            else {
                formatted[idx] = ' ';
            }
            idx = idx + 1;
        }
        formatted[idx] = '*';
        idx = idx + 1;
        formatted[idx] = '\n';
        idx = idx + 1;
    }

    for (int i = 0; i < n + 2; i++) {
        formatted[idx] = '*';
        idx = idx + 1;
    }
    formatted[idx] = '\0'; 
}",1
opre469,1696733614,1,"void Histogram(char* formatted, int* values, int columns)
{

	int highnum = 0;
	for (int j = 0; j < columns; j++) {
		if (values[j] > highnum) {
			highnum = values[j];
		}
	}
	
	int usedspace = (columns + 3) * (highnum + 2);
	for (int i = 0; i < usedspace; i++) {
		formatted[i] = ' ';

		if (i == usedspace-1) {
			formatted[i] = '\0';
		}
	}


	for (int i = 0; i < columns+2; i++) {
		formatted[i] = '*';
		if (i == columns + 1) {
			formatted[i + 1] = '\n';
		}
	}

	int multiplier = 1;

	while (highnum > 0) {
		for (int k = 0; k <= columns; k++) {
			if (k == 0) {
				formatted[((3 + columns) * multiplier)+k] = '*';
			}
			else {
				if (values[k - 1] >= highnum) {
					formatted[((3 + columns) * multiplier) + k] = 'X';
				}
			}

			if (k == columns) {
				formatted[((3 + columns) * multiplier) + k+1] = '*';
				formatted[((3 + columns) * multiplier) + k+2] = '\n';
			}
		}

		highnum--;
		multiplier++;

	}

	for (int l = 0; l <= columns+1; l++) {
		formatted[((3 + columns) * multiplier) + l] = '*';
		
	}
	
}",1
orow585,1696820329,1,"
void Histogram(char* store, int values[], int size) {

    int cols = 0;
    int max = values[0];
    int i, j;

    //Find max value
    for (int i = 0; i < size; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    //Fill array with spaces
    for (i = 0; i < (max + 2) * (size + 3); i++) {
        store[i] = ' ';
    }

    //Create borders
    //horizontal
    for (i = 0; i < size + 2; i++) {
        store[i] = '*';
        store[i + (size + 3) * (max + 1) + 1] = '*';
    }

    //vertical
    for (j = 0; j <= size + 2; j++) {
        store[j * (size + 3)] = '*';
        store[j * (size + 3) + size + 1] = '*';
    }

    //find and plot NO. X's
    int end = (size + 3) * (max + 1) - 2;
    int k;

    for (i = size; i >= 0; i--) {
        for (k = 0; k < values[i]; k++) {
            store[(end - k * (size + 3)) - (size - i)] = 'X';
        }
    }

    for (i = size; i < ((size + 3) * (max + 2)-1); i++) {
        if ((i+1) % (size+3) == 0) {
            store[i] = '\n';
        }

    }
    store[(size + 3) * (max + 2) - 1] = 'S';
    char stop[] = ""S"";
    store = strtok(store, stop);

}
",0
orow585,1696822443,2,"void Histogram(char* store, int values[], int size) {

    int max = values[0];
    int i, j;

    //Find max value
    for (int i = 0; i < size; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    //Fill array with spaces
    for (i = 0; i < (max + 2) * (size + 3); i++) {
        store[i] = ' ';
    }

    //Create borders
    //horizontal
    for (i = 0; i < size + 2; i++) {
        store[i] = '*';
        store[i + (size + 3) * (max + 1) + 1] = '*';
    }

    //vertical
    for (j = 0; j <= max + 2; j++) {
        store[j * (size + 3)] = '*';
        store[j * (size + 3) + size + 1] = '*';
    }

    //find and plot NO. X's
    int end = (size + 3) * (max + 1) - 2;
    int k;

    for (i = size; i >= 0; i--) {
        for (k = 0; k < values[i]; k++) {
            store[(end - k * (size + 3)) - (size - i)] = 'X';
        }
    }
     
    for (i = size; i < ((size + 3) * (max + 2) - 1); i++) {
        if ((i + 1) % (size + 3) == 0) {
            store[i] = '\n';
        }

    }
    store[(size + 3) * (max + 2) - 1] = '!';
    char stop[] = ""!"";
    store = strtok(store, stop);

}",0
orow585,1696840688,3,"void Histogram(char* store, int values[], int size) {

    int max = values[0];
    int i, j;

    //Find max value
    for (int i = 0; i < size; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    //Fill array with spaces
    for (i = 0; i < (max + 2) * (size + 3); i++) {
        store[i] = ' ';
    }

    //Create borders
    //horizontal
    for (i = 0; i < size + 2; i++) {
        store[i] = '*';
        store[i + (size + 3) * (max + 1) + 1] = '*';
    }

    //vertical
    for (j = 0; j <= max + 2; j++) {
        store[j * (size + 3)] = '*';
        store[j * (size + 3) + size + 1] = '*';
    }

    //find and plot NO. X's
    int end = (size + 3) * (max + 1) - 2;
    int k;

    for (i = size - 1; i >= 0; i--) {
        for (k = 0; k < values[i]; k++) {
            store[(end - k * (size + 3)) - (size - i)] = 'X';
        }
    }

    for (i = size; i < ((size + 3) * (max + 2) - 1); i++) {
        if ((i + 1) % (size + 3) == 0) {
            store[i] = '\n';
        }

    }
    for (i = (size + 3) * (max + 2) - 1; i < 1000; i++) {
        store[i] = '\0';
    }
}",1
osca399,1696846234,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int data[], int size) {
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }


    for (int i = 0; i <= (max + 1) * (size + 2); i++) {
        result[i] = '*';
    }


    for (int i = 0; i < size; i++) {
        for (int j = max; j > max - data[i]; j--) {
            result[(j + 1) * (size + 2) + i + 1] = 'X';
        }
    }


    for (int i = 0; i < max + 2; i++) {
        result[(i + 1) * (size + 2) - 1] = '\n';
    }
    result[(max + 2) * (size + 2)] = '\0';
}

int main() {
    int values1[10] = {1, 0, 3, 1, 2, 4, 5, 6, 2, 2};
    int values2[3] = {1, 0, 1};
    char formatted[1000];
    char example[1000] = ""*****\n*X X*\n*****"";

    Histogram(formatted, values1, 10);
    printf(""%s\n\n"", formatted);

    Histogram(formatted, values2, 3);
    printf(""%s\n"", formatted);

    if (strcmp(example, formatted) == 0) {
        printf(""This matches EXACTLY and is correct"");
    }

    return 0;
}

// Author: Olano Scarlett",0
osca399,1696847331,2,"#include <stdio.h>

void Histogram(char* result, int data[], int size) {
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (int i = 0; i < max + 2; i++) {
        result[i*(size+3)] = '*';
        result[size+2 + i*(size+3)] = '*';
    }

    for (int i = 0; i < size; i++) {
        for (int j = 0; j < max; j++) {
            if (j < data[i]) {
                result[i+1 + (max-j)*(size+3)] = 'X';
            }
            else {
                result[i+1 + (max-j)*(size+3)] = ' ';
            }
        }
    }

    for (int i = 0; i < max + 2; i++) {
        result[size+1 + i*(size+3)] = '\n';
    }
    result[(max + 2) * (size + 3)] = '\0';
}  

// Author: Olano Scarlett
// yuhh i like this challange yuhh",0
pchh683,1696298331,1,"void Histogram(char *Plot, int *Data, int Points)
{
    int Highest = 0;
    for (int i = 0; i < Points  ; i++)
    {
        if (Data[i] > Highest)
        {
        Highest = Data[i];
        }
    }

    int Height = Highest + 2;
    int Width = Points + 3;
    int Whole = Height * Width;

    for (int i = 0; i < Whole; i++)
    {
        if (i < Width || (i > Whole - Width && i < Whole))
        {
            Plot[i] = '*';
        }
        else
        {
            Plot[i] = ' ';
        }
    }
    for (int i = 0; i < Whole ; i = i + Width)
    {
        Plot[i - 1] = '*';
        Plot[i - Width + 1] = '*';
        Plot[i] = '\n';
    }
    for (int i = 0; i < Points ; i++)
    {
        for (int j = 0; j < Highest; j++)
        {
            if (Data[i] >= Highest - j)
            {
                Plot[i + Width + 2 + (Width * j)] = 'X';
            }
        }
    }    

    Plot[Whole] = '\0';
}",0
pchh683,1696319721,2,"void Histogram(char *Plot, int *Data, int Points)
{
    int Highest = 0;
    for (int i = 0; i < Points  ; i++)
    {
        if (Data[i] > Highest)
        {
        Highest = Data[i];
        }
    }

    int Height = Highest + 2; // 3
    int Width = Points + 3; // 6
    int Whole = Height * Width; // 3 x 6 = 18

    for (int i = 0; i < Whole; i++)
    {
        if (i < Width - 1)
        {
            Plot[i] = '*';
        }
        else if (i > Whole - Width - 1)
        {
            Plot[i] = '*';
        }
        else
        {
        Plot[i] = ' ';
        }
    }

  for (int i = 0; i < Points ; i++)
    {
        for (int j = 0; j < Highest; j++)
        {
            if (Data[i] >= Highest - j)
            {
                Plot[i + Width + 1 + (Width * j)] = 'X';
            }
        }
    } 

    for (int i = Width - 1; i < Whole; i+=Width)
    {
        Plot[i] = '\n';
        Plot[i - 1] = '*';
        Plot[i - 2 - Points] = '*';
    }
    Plot[Whole - 1] = '\0';
}",1
pfil701,1696848482,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *data, int dataSize) {

    int max = 0;
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int height = max + 2;
    int width = (dataSize * 2) + 3; 

    char result[height][width];
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (i == 0 || i == height - 1 || j == 0 || j == width - 1) {
                
                result[i][j] = '*';
            } else if (j % 2 == 1 && data[j / 2] >= height - i - 1) {

                result[i][j] = 'X';
            } else {

                result[i][j] = ' ';
            }
        }
    }
    int index = 0;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            formatted[index++] = result[i][j];
        }

        if (i < height - 1) {
            formatted[index++] = '\n';
        }
    }

    formatted[index] = '\0';
}",0
plah275,1696825719,1,"void Histogram(char* stored, int values[], int width)
{
    int r, c, evaloop, height = 0;

    for (evaloop = 0; evaloop < width; evaloop++) {

        if (values[evaloop] > height) {

            height = values[evaloop];
        }
    }

    for (r = 0; r <= (height + 1); r++) {
        for (c = 1; c < (width + 1); c++) {

            // first line of *****
            if (r == 0) {

                stored[0] = '*';
                stored[c] = '*';
                stored[width + 1] = '*';
                stored[width + 2] = '\n';

                // last line of *****    
            }
            else if (r == (height + 1)) {

                stored[((width + 3) * (height + 1))] = '*';
                stored[c + ((width + 3) * (height + 1))] = '*';
                stored[((width + 3) * (height + 1)) + width + 1] = '*';
                stored[((width + 3) * (height + 2)) - 1] = '\0';

                // string lines between first and last
            }
            else {

                stored[(r * (width + 3))] = '*';
                stored[(r * (width + 3)) + width + 1] = '*';
                stored[(r * (width + 3)) + width + 2] = '\n';

                // condition check if height of histogram bar is greater or equal 
                // to the height of the row
                if (values[c-1] >= (height - (r - 1))) {

                    stored[(r * (width + 3)) + c] = 'X';

                }
                else {

                    stored[(r * (width + 3)) + c] = ' ';

                }
            }
        }

    }

}
",1
pshe539,1696478416,1,"void Histogram(char *histogram, int *data_values, int data_length)
{
    int max_value = -1;
    for (int i = 0; i < data_length; i++){
        if (data_values[i] > max_value){
            max_value = data_values[i];
        }
    }

    int graph_rows = max_value;
    int graph_cols = data_length;

    // printf(""%d %d\n"", graph_rows, graph_cols);

    int current_max_value = max_value;
    int count = 0;
    
    for (int i = 0; i < graph_rows+2; i++){

        // For bars on top and bottom of the graph
        if (i == 0 || i == graph_rows+1){
            
            for (int k = 0; k < graph_cols + 2; k++){
                histogram[count] = '*';
                count++;
            }

            if (i == 0){
                histogram[count] = '\n';
                count++;
            }
            
            continue;
        }

        // For data inside the graph
        histogram[count] = '*';
        count++;

        for (int j = 0; j < graph_cols; j++){
            if (data_values[j] == current_max_value){
                histogram[count] = 'X';
                data_values[j]--;
            } else {
                histogram[count] = ' ';
            }
            count++;
        }
        current_max_value--;

        histogram[count] = '*';
        histogram[count+1] = '\n';
        count += 2;
    }

    histogram[count] = '\0';

    // for (int l = count; l < 1000; l++){
    //     histogram[l] = '\0';
    // }
}",1
pwat943,1696345336,1,"void Histogram(char* result, int data[], int numElements) {
    // Find the maximum value in the data array to determine the height of the histogram
    int max = 0;
    for (int i = 0; i < numElements; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize the result string
    strcpy(result, """");

    // Build the histogram line by line
    for (int row = max; row > 0; row--) {
        strcat(result, ""*""); // Left border
        for (int i = 0; i < numElements; i++) {
            if (data[i] >= row) {
                strcat(result, ""X""); // Bar
            }
            else {
                strcat(result, "" ""); // Space
            }
        }
        strcat(result, ""*\n""); // Right border and new line
    }

    // Add the bottom border
    strcat(result, ""*"");
    for (int i = 0; i < numElements; i++) {
        strcat(result, ""*""); // Bottom border
    }
    strcat(result, ""*\n"");
}",0
pwu278,1696680205,1,"void Histogram(char* format, int* array, int length)
{
	int i;
	int j;
	int largestvalue = 0;

	//Determining largest value 
	for (i = 0; i < length; i++) {
		if (array[i] > largestvalue) {
			largestvalue = array[i];
		}
	}

	//Creating top boarder
	for (i = 0; i < length + 2; i++) {
		format[i] = '*';
	}
	format[length + 2] = '\n';

	//Creating side boarders
	for (i = 1; i < largestvalue + 1; i++) {
		format[(length + 3) * i] = '*';
		format[((length + 3) * i) + (length + 1)] = '*';
		format[((length + 3) * i) + (length + 2)] = '\n';
	}

	//Creating bottom boarder
	for (i = 0; i < length + 2; i++) {
		format[(length + 3) * (largestvalue + 1) + i] = '*';
		format[((length + 3) * (largestvalue + 1) + length + 2)] = '\0';
	}

	//Adding data values
	for (i = 0; i < length; i++) {
		for (j = 0; j <= array[i] - 1; j++) {
			if (array[i] > 0) {
				format[(((length + 3) * largestvalue) + (i + 1)) - ((length + 3) * j)] = 'X';
			}
		}
	}

	//Removing empty values
	for (i = 0; i < 1000; i++) {
		if (format[i] < 0 || format[i] > 127) {
			format[i] = ' ';
		}
	}
}",0
pwu278,1696681124,2,"void Histogram(char* format, int* array, int length)
{
	int i;
	int j;
	int largestvalue = 0;

	//Clean slate
	for (i = 0; i < 1000; i++) {
		format[i] = ' ';
	}

	//Determining largest value 
	for (i = 0; i < length; i++) {
		if (array[i] > largestvalue) {
			largestvalue = array[i];
		}
	}

	//Creating top boarder
	for (i = 0; i < length + 2; i++) {
		format[i] = '*';
	}
	format[length + 2] = '\n';

	//Creating side boarders
	for (i = 1; i < largestvalue + 1; i++) {
		format[(length + 3) * i] = '*';
		format[((length + 3) * i) + (length + 1)] = '*';
		format[((length + 3) * i) + (length + 2)] = '\n';
	}

	//Creating bottom boarder
	for (i = 0; i < length + 2; i++) {
		format[(length + 3) * (largestvalue + 1) + i] = '*';
		format[((length + 3) * (largestvalue + 1) + length + 2)] = '\0';
	}

	//Adding data values
	for (i = 0; i < length; i++) {
		for (j = 0; j <= array[i] - 1; j++) {
			if (array[i] > 0) {
				format[(((length + 3) * largestvalue) + (i + 1)) - ((length + 3) * j)] = 'X';
			}
		}
	}

}",1
qkan386,1696399654,1,"char Histogram(char *formatted, int values[], int length) {

	int maximum = values[0];

	//find out the maximum value 
	for (int i = 0; i < length; i++) {
		if (values[i] >= maximum) {
			maximum = values[i];
		}
	}

	//the index of the string
	int i = 0;

	//insert out the first row
	while (i <= length + 1) {
		formatted[i] = '*';
		i++;
	}


	formatted[i] = '\n';
	i++;

	//index of the input array data
	int k = 0;

	int max = maximum + 1;
	while (i < ((length + 3) * (maximum + 1))) {

		if (k == length) {
			k = 0;
		}

		if ((i + 2) % (length + 3) == 0) {
			formatted[i] = '*';
			formatted[i + 1] = '\n';
			i = i + 2;	
		}

		if (i % (length + 3) == 0) {
			formatted[i] = '*';
			i++;	
			max--;
			k--;
		}

		else {
			if (values[k] >= max) {
				formatted[i] = 'X';
				i++;

			}
			else {
				formatted[i] = ' ';
				i++;
			}
		}

		k++;		
	}

	//print out the last row with *
	while ((i + 1) < ((length + 3) * (maximum + 2))) {
		formatted[i] = '*';
		i++;
	}

	int huh = strlen(formatted);
	formatted[i] = '\0';
	return formatted;
}",0
qkan386,1696400152,2,"char Histogram(char *formatted, int values[], int length) {

	int maximum = values[0];

	//find out the maximum value 
	for (int j = 0; j < length; j++) {
		if (values[j] >= maximum) {
			maximum = values[j];
		}
	}

	//the index of the string
	int i = 0;

	//insert out the first row
	while (i <= length + 1) {
		formatted[i] = '*';
		i++;
	}


	formatted[i] = '\n';
	i++;

	//index of the input array data
	int k = 0;

	int max = maximum + 1;
	while (i < ((length + 3) * (maximum + 1))) {

		if (k == length) {
			k = 0;
		}

		if ((i + 2) % (length + 3) == 0) {
			formatted[i] = '*';
			formatted[i + 1] = '\n';
			i = i + 2;	
		}

		if (i % (length + 3) == 0) {
			formatted[i] = '*';
			i++;	
			max--;
			k--;
		}

		else {
			if (values[k] >= max) {
				formatted[i] = 'X';
				i++;

			}
			else {
				formatted[i] = ' ';
				i++;
			}
		}

		k++;		
	}

	//print out the last row with *
	while ((i + 1) < ((length + 3) * (maximum + 2))) {
		formatted[i] = '*';
		i++;
	}

	formatted[i] = '\0';
	return *formatted;
}",1
qmcc945,1696279711,1,"void Histogram(char *display, int *data, int numberOfPoints)
{
    // calculate the height
    int x, biggestNumber, height;
    biggestNumber = 0;
    for (x = 0; x < numberOfPoints; x++) {
        if (data[x] > biggestNumber) {
            biggestNumber = data[x];
        }
    }
    height = biggestNumber;


    // make the first line *****
    int width, i, index;
    index = 0;
    width = numberOfPoints + 2;
    for(i = 0; i < width; i++) {
        display[i] = '*';
        index++;
    }
    display[width] = '\n';
    index++;


    int z;
    for(z = 0; z < height; z++) {
        display[index] = '*';
        index++;
        int y;
        for (y = 0; y < numberOfPoints; y++) {
            if (data[y] >= biggestNumber) {
                display[index] = 'X';
                index++;
            } else {
                display[index] = ' ';
                index++;
            }
        }
        biggestNumber--;
        display[index] = '*';
        index++;
        display[index] = '\n';
        index++;
    }


    // Make the last line
    int t;
    for(t = 0; t < width; t++) {
        display[index] = '*';
        index++;
    }
    display[index] = '\0';
}",1
qtra338,1696485834,1,"#include <stdio.h>
#include <string.h> 

void Histogram (char *formatted, int *values, int length);
int LargestValue(int *values, int length);


void Histogram (char *formatted, int *values, int length) {
    int largest_value, row, col, i, j, string_index;
    int data[100][100] = {0}, data_col_border_index[2] = {0}, data_row_border_index[2] = {0};

    memset(formatted, 0, 1000);

    largest_value = LargestValue(values,length);
    data_row_border_index[1] = length + 1;
    data_col_border_index[1] = largest_value + 1;
   
    //making the top and bottom border of the formatted array 
    //this will be the left and right border of the data array
    for (col = 0; col < 2; col++) {
        for (row = 0; row < length + 2; row++) {
            data[row][data_col_border_index[col]] = 2;
        } 
    }

    //making the left and right border of the formatted array 
    //this will be the top and bottom border of the formatted array 
    for (row = 0; row < 2; row++) {
        for (col = 1; col < largest_value + 1; col++) {
            data[data_row_border_index[row]][col] = 2;
        } 
    }

    for (i = 1; i < length + 1; i++) {
        for (j = 1; j < values[i-1] + 1; j++) {
            data[i][j] = 1;
        }
    }

    string_index = 0;


    for (col = largest_value + 1; col >= 0; col--) {
        for (row = 0; row < length + 2; row++) {

            if (data[row][col] == 2) {
                formatted[string_index] = '*';
                if (row == length + 1 && col != 0) {
                    formatted[string_index + 1] = '\n';
                    string_index++;
                }
            }

            else if (data[row][col] == 1) {
                formatted[string_index] = 'X';
            }

            else {
                formatted[string_index] = ' ';
            }

            
            string_index++; 
            /*  
            
            printf(""%d %d\n"", row, col);  
            printf("" %d \n"", string_index);  
            printf(""______________\n"");  
            */
        }
        
    }
    

    /*
    for (i = 0; i < 7; i++) {
        for (j = 0; j < 6; j++) {
            printf(""%d "", data[i][j]);
        }
        printf(""\n"");
    }
    */


}


int LargestValue(int *values, int length) {
    int largest = values[0], i;

    for (i = 0; i < length; i++) {
        if (largest < values[i]) {
            largest = values[i];
        }
    }
    
    return largest;
}
",1
qzho943,1696299757,1,"#include <string.h>
#include <stdio.h>

void Histogram(char *formatted, int *value, int elements)
{
    //find max value
    int max=0;
    int i;
    for (i=0; i<elements;i++){
        
        if (value[i]>=max){
            max = value[i];
        }
    }
    
    int idx=0;
    
    //top ***
    for (int i=0;i<elements+2;i++){
    formatted[idx++]='*';
    }
    formatted[idx++]='\n';
    
    //body part
    
    for (int level=max; level>0; level--){//each level value
        
        formatted[idx++]='*';  //start with *
            for (int i=0; i<elements; i++){
                if(value[i]<level){
                    formatted[idx++]=' ';
                }
                else{
                    formatted[idx++]='X';
                }
            }
           formatted[idx++]='*';//end with *
           formatted[idx++]='\n';//get the next line
    }
    
     //bottom ***
    for (int i=0;i<elements+2;i++){
    formatted[idx++]='*';
    }
    formatted[idx++]='\0';
}//function end
",1
rand321,1696233447,1,"void Histogram(char *formatted, int values[], int numCol){
    int i, maxHeight, j, f;
    
    maxHeight = 0;
    for(i = 0; i < numCol; i++){
        if (values[i] > maxHeight){
            maxHeight = values[i];
        }
    }
    
    char tempF[maxHeight + 2][numCol + 2];
    
    for(i = 0; i <= (maxHeight + 1); i++){
        tempF[i][0] = 42;
        tempF[i][numCol + 1] = 42;
    }
    
    
    for(j = 0; j <= (numCol + 1); j++){
        tempF[0][j] = 42;
        tempF[maxHeight + 1][j] = 42;
    }
     
    
    for(j = 0; j < numCol; j++){
        for(i = 1; i <= values[j]; i++){
            tempF[i][j+1] = 88;
        }
    }
    
   for(i = 0; i<=(maxHeight + 1); i++){
      for(j = 0; j<=(numCol + 1); j++){
          if (tempF[i][j] != 88 && tempF[i][j] != 42){
              
             tempF[i][j] = 32; 
            } 
        } 
    } 
    
    f = 0;
    for(i = (maxHeight + 1); i >= 0; i--){
      for(j = 0; j<=(numCol + 1); j++){
            formatted[f] = tempF[i][j];
            f++;
        }
        formatted[f] = '\n';
        f++;
    }
   formatted[f - 1] = '\0'; 
}",0
rand321,1696368378,2,"void Histogram(char *formatted, int values[], int numCol){
    int i, maxHeight, j, f;
    
    maxHeight = 0;
    for(i = 0; i < numCol; i++){
        if (values[i] > maxHeight){
            maxHeight = values[i];
        }
    }
    
    char tempF[maxHeight + 2][numCol + 2];
    for(i = 0; i<=(maxHeight + 1); i++){
      for(j = 0; j<=(numCol + 1); j++){
          tempF[i][j] = 32; 
        } 
    } 
    

    
    for(i = 0; i <= (maxHeight + 1); i++){
        tempF[i][0] = 42;
        tempF[i][numCol + 1] = 42;
    }
    
    
    for(j = 0; j <= (numCol + 1); j++){
        tempF[0][j] = 42;
        tempF[maxHeight + 1][j] = 42;
    }
     
    
    for(j = 0; j < numCol; j++){
        for(i = 1; i <= values[j]; i++){
            tempF[i][j+1] = 88;
        }
    }
    
    
    f = 0;
    for(i = (maxHeight + 1); i >= 0; i--){
      for(j = 0; j<=(numCol + 1); j++){
            formatted[f] = tempF[i][j];
            f++;
        }
        formatted[f] = '\n';
        f++;
    }
   formatted[f - 1] = '\0'; 
}",1
rbui853,1696592781,1,"void Histogram(char *formatted, int *values, int size)
{
    //determine largest value
    int largest = values[0];
    int i, j, largestPos;
    for (i = 1; i < size; i++) {
        if (values[i] > largest) {
            largest = values[i];
            largestPos = i;
        }
    }

    int height = largest + 2;
    int width = size + 2;
    
    int pos = 0;

    //top border
    for (i = 0; i < width; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos++] = '\n';

    //bars
    for (i = height - 2; i > 0; i--) {
        formatted[pos++] = '*';
        for (j = 0; j < size; j++) {
            if (values[j] >= i) {
                formatted[pos++] = 'X';
            }
            else {
                formatted[pos++] = ' ';  
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }

    //bottom
    for (i = 0; i < width; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos] = '\0';
}",0
rbui853,1696592858,2,"void Histogram(char *formatted, int *values, int size)
{
    //determine largest value
    int largest = values[0];
    int i, j;
    for (i = 1; i < size; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }

    int height = largest + 2;
    int width = size + 2;
    
    int pos = 0;

    //top border
    for (i = 0; i < width; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos++] = '\n';

    //bars
    for (i = height - 2; i > 0; i--) {
        formatted[pos++] = '*';
        for (j = 0; j < size; j++) {
            if (values[j] >= i) {
                formatted[pos++] = 'X';
            }
            else {
                formatted[pos++] = ' ';  
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }

    //bottom
    for (i = 0; i < width; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos] = '\0';
}",1
rbus291,1696394178,1,"void Histogram(char *result, int *data, int dataSize) {
    result[0] = '\0';
    int maxFrequency = 0;
    for (int i = 0; i < dataSize; i++) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }
    for (int row = maxFrequency; row >= 0; row--) {
        strcat(result, ""*"");

        for (int col = 0; col < dataSize; col++) {
            if (data[col] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }

        strcat(result, ""*\n""); 
    }
    strcat(result, ""*"");
    for (int i = 0; i < dataSize; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");",0
rbus291,1696848186,2,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height - 1 || col == 0 || col == width - 1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row - 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""*"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height - 1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848227,3,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height - 1 || col == 0 || col == width - 1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row - 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height - 1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848246,4,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height - 1 || col == 0 || col == width - 1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row - 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height +1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848272,5,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height + 1 || col == 0 || col == width - 1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row - 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""*"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height +1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848292,6,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 1 || col == 0 || col == width + 1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row - 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""*"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height +1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848307,7,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row - 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""*"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height +1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848319,8,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""X"");
            } else {
                int frequency = maxFrequency - (row - 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""*"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height +1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848338,9,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row - 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height +1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848391,10,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row + 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height +1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848405,11,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row + 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, """");
                }
            }
        }
        if (row != height +1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848442,12,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 4;
    int width = size + 2;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row + 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height + 1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848455,13,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 4;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row + 1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height + 1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848498,14,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row -1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height + 1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848524,15,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row -1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row = height + 1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848530,16,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row -1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row = height -1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848537,17,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row -1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height -1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848575,18,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] < maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row -1);
                if (col == 1 || col == width - 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height -1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848613,19,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row -1);
                if (col == 1 || col == width + 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height -1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848632,20,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row +1);
                if (col == 1 || col == width + 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height -1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848654,21,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width +1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row +1);
                if (col == 1 || col == width + 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height -1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rbus291,1696848678,22,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    for (int i = 0; i < size; ++i) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    int height = maxFrequency + 2;
    int width = size + 4;

    result[0] = '\0';

    for (int row = 0; row < height; ++row) {
        for (int col = 0; col < width; ++col) {
            if (row == 0 || row == height -1 || col == 0 || col == width -1) {
                strcat(result, ""*"");
            } else {
                int frequency = maxFrequency - (row +1);
                if (col == 1 || col == width + 2) {
                    strcat(result, ""X"");
                } else if (col - 2 < data[frequency]) {
                    strcat(result, ""X"");
                } else {
                    strcat(result, "" "");
                }
            }
        }
        if (row != height -1) {
            strcat(result, ""\n"");
        }
    }
}
",0
rchi339,1696816669,1,"#include <stdio.h>
#include <string.h>

//int FindNumVals (int values, int numVals, int num){
//    for (int i3 = 0; i3 < numVals; i3++)
    
char Histogram(char *hist, int values, int numValues){

int pos = 1
int maxVal = 0

for (int i2 = 0; i2 < numValues; i2++){
    if (values[i2] > maxVal){
        maxVal = values[i2];
    }
}

for (int i1 = 0; i1 < (numValues + 2); i1++){
    hist[i1] = '*';
    pos++;
}

for (int i4 = 0; i4 < maxVal; i4++){
    hist[pos] = '*';
    pos = pos + numVals + 1;
    hist[pos] = '*';
    pos = pos++;
}

for (int i5 = 0; i5 < (numVals + 2); i5++){
    hist[i1] = '*';
    pos++;
}

printf(""%s"", hist);
return hist;
}


",0
rger104,1696285135,1,"void Histogram(char *formatted, int *values, int length)
{
	int curchar = 0;
	int reference;
	int i, j;
	int maxheight=0;
	//the curent characor being operated on

	//generate first line of '*'s
	while (curchar < length + 2) {
		formatted[curchar] = '*';
		curchar++;
	}
	formatted[curchar] = '\n';

	// generate plots
	
	// find max value in histagram
	for (i = 0; i < length; i++) {
		if (values[i] > maxheight) {
			maxheight = values[i];
		}
	}
	
	// for height of histagram
	for (i = maxheight; i >0 ; i--) {

		//opening '*'
		curchar++;
		formatted[curchar] = '*';
		// for width of hisagram
		
		
		for (j = 0; j < length; j++) {
			// if should be there 'X' else ' '
			if ( (values[j]-i)>=0 ) {
				curchar++;
				formatted[curchar] = 'X';
			}
			else {
				curchar++;
				formatted[curchar] = ' ';
			}

		}


		//closing *''
		curchar++;
		formatted[curchar] = '*';
		curchar++;
		formatted[curchar] = '\n';
	}

		//generate last line of '*'s

		curchar++;
	reference = curchar;
	while (curchar < (reference + length + 2) ) {
		formatted[curchar] = '*';
		curchar++;
	}
	formatted[curchar] = '\0';
}",1
rkan756,1696729974,1,"void Histogram(char *str, int *data, int lengthData) 
{

    //printing the top border of the histogram
    for (int j = 0; j < lengthData + 2; j++) {
        str[j] = '*';
    }

    str[lengthData + 2] = '\0'; //Add null terminator

    printf(""%s\n"", str); //Printing the top border

    //Finding the maximum value ion the array
    int max = 0;
    for (int i = 0; i < lengthData; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    //for loop to create the histogram, starting with tallest bar
    for (int index = max; index > 0; index--) {
        for (int k = 0; k <= lengthData + 1; k++) {
            if ((k == 0) || (k == lengthData + 1)) {
                str[k] = '*';
            }
            else if (data[k - 1] >= index) {
                str[k] = 'X';
            }

            else {
                str[k] = ' ';
            }
        }
        printf(""%s\n"", str); //Print each line of the histogram
    }

    for (int j = 0; j < lengthData + 2; j++) {
        str[j] = '*';
    }

    str[lengthData + 2] = '\0'; //Add null terminator

    printf(""%s"", str); //Printing the bottom border
}",0
rkan756,1696735979,2,"void Histogram(char *str, int *data, int lengthData) 
{
    // Constructing the top border of the histogram
    for (int j = 0; j < lengthData + 2; j++) {
        str[j] = '*';
    }
    str[lengthData + 2] = '\n'; // new line after top border

    //Finding the maximum value in the array
    int max = 0;
    for (int i = 0; i < lengthData; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    int position = lengthData + 3; //Position to add new characters to the string

    //constructing the histogram
    for (int row = max; row > 0; row--) {
        str[position++] = '*'; //left border
        for (int k = 0; k < lengthData; k++) {
            if (data[k] >= row) { 
                str[position++] = 'X'; //stores X if the data value is larger than the current row
            }
            else {
                str[position++] = ' '; //stores a space is the bar isn't high enough
            }
        }
        str[position++] = '*'; //right border
        str[position++] = '\n'; //new line after each histogram line
    }

    //Constructing the bottom border of the histogram
    for (int j = 0; j < lengthData + 2; j++) {
        str[position++] = '*';
    }

    str[position] = '\0'; // null terminator to indicate the end of the string
}",1
rkar406,1696293327,1,"void Histogram(char* outString, int* array, int arraylength) {
    int a = 0;

    //placing initial series of *
    for (int i = 0; i < arraylength + 2; i++) {
        outString[a] = '*';
        a++;
    }
    outString[a] = '\n';
    a++;

    int max = array[0];

    //finding the max value for the histogram
    for (int i = 1; i < arraylength; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }

    //making the histogram
    for (int j = max; j > 0; j--) {
        outString[a] = '*';
        a++;
        for (int i = 0; i < arraylength; i++) {
            if (array[i] >= j) {
                outString[a] = 'X';
                a++;
            }
            else {
                outString[a] = ' ';
                a++;
            }
        }
        outString[a] = '*';
        a++;
        outString[a] = '\n';
        a++;
    }

    //placing final series of *
    for (int i = 0; i < arraylength + 2; i++) {
        outString[a] = '*';
        a++;
    }
    outString[a] = '\0';
}",1
rkir245,1696845813,1,"void Histogram(char *formatted, int *values, int elements)
{
    int length = elements + 2;
    
    for (int i = 0; i < elements + 2; i++)
    {
        formatted[i] = 42;
    }
    formatted[length] = 10;


    int max_val = 0;

    for (int j = 0; j < elements; j++)
    {
        
        if (values[j] > max_val)
        {
            max_val = values[j];
        }
    }

    // Have max val of histogram, now run through loop backwards from max_val that many times, check if value is equal or greater to,
    // if it is, then change the value to 'X' otherwise don't, also need * at beginning and end of each line.
    // Then lastly, line of *** along the bottom.

    int counter = 0;

    for (int i = max_val; i > 0; i--)
    {
        counter++;

        //First * in the line
        formatted[(elements + 3) * counter] = 42;

        for (int j = 0; j < elements; j++)
        {
            // Putting in the X or space in the histogram
            if (values[j] >= i)
            {
                formatted[((elements + 3) * counter) + j + 1] = 88;
            }
            else
            {
                formatted[((elements + 3) * counter) + j + 1] = 32;
            }
                   
        }  

        //Inputting the last * of each row
        formatted[((elements + 3) * counter) + elements + 1] = 42;

        //Inputting the \n at the end of each row
        formatted[((elements + 3) * counter) + elements + 2] = 10;
    }

    for (int i = 0; i < elements + 2; i++)
    {
        formatted[((elements + 3) * (max_val + 1)) + i] = 42;
    } 

    formatted[((elements + 3) * (max_val + 2)) - 1] = 0;

}",1
rnga701,1696671141,1,"# include <stdio.h>
# include <string.h>

void Histogram(char *formatted, int *values2, int n){

    int max = 0;
    // Find the maximum value
    for (int i = 0; i < n; i++) {
        if (values2[i] > max) {
            max= values2[i];
        }
    }
    
    for (int k=0;k<(n+2);k++){
        strcat(formatted,""*"");
    }   

    strcat(formatted,""\n"");

    for (int l = max; l > 0; l--) {
        strcat(formatted, ""*"");
        for (int j = 0; j < n; j++) {
            if (values2[j] >= l) {
                strcat(formatted, ""X"");
            } else {
                strcat(formatted, "" "");
            }
        }
        strcat(formatted, ""*\n"");
    }
    for (int m=0;m<(n+2);m++){
        strcat(formatted,""*"");
    }
}",0
rnga701,1696672383,2,"# include <stdio.h>
# include <string.h>

void Histogram(char *formatted, int *values1, int n){
    formatted[0] = '\0';

    int max = 0;
    // Find the maximum value
    for (int i = 0; i < n; i++) {
        if (values1[i] > max) {
            max= values1[i];
        }
    }
    
    for (int k=0;k<(n+2);k++){
        strcat(formatted,""*"");
    }   

    strcat(formatted,""\n"");

    for (int l = max; l > 0; l--) {
        strcat(formatted, ""*"");
        for (int j = 0; j < n; j++) {
            if (values1[j] >= l) {
                strcat(formatted, ""X"");
            } else {
                strcat(formatted, "" "");
            }
        }
        strcat(formatted, ""*\n"");
    }
    for (int m=0;m<(n+2);m++){
        strcat(formatted,""*"");
    }
    
}",1
rnig735,1696846584,1,"#include <stdio.h>
#include <string.h>

char Histogram(char *formatted, int *values, int width)
{
    strcpy(formatted, """");
    int largest=0;
    int borderspace = 2;
    int linewidth = (width + borderspace + 1);
    char line[100];
    for (int i=0; i<width; i++) {
        if (values[i] > largest) {
            largest = values[i];
        }
    }
    
    for (int j=0; j<(largest+borderspace); j++) {
        if ((j==0) || (j==(largest+borderspace-1))) {
            for (int k=0; k<(linewidth-1); k++) {
                line[k] = '*';
            }
            if (j==0){
            line[linewidth-1] = '\0';
            } else {
                line[0] = '\n';
                line[linewidth] = '\0';
            }
            strcat(formatted, line);
        } else {
            line[0] = '\n';
            line[1] = '*';
            line[linewidth-1] = '*';
            line[linewidth] = '\0';
            for (int m=2; m<(linewidth-1); m++) {
                if (values[m-2] >= (largest - j+1)) {
                    line[m] = 'X';
                } else {
                    line[m] = ' ';
                }
            }
            strcat(formatted, line);
        }
    }
    return *formatted;
}",1
rpar376,1696741649,1,"#include <stdio.h>
#include <string.h>


void Histogram(char *histostring, int data[],int numel) {
    char tempstring[1000];
    int index=0;
    
    for(int i=0;i<numel+2;i++) {
    tempstring[index++]='*';
}
tempstring[index++]='\n';

int max=0;

for (int i=0;i<numel;i++) {
    if (data[i]>max) {
        max=data[i];
    }
}

for (int i=max;i>=0;i--) {
    tempstring[index++]='*';
    for (int j=0;j<numel;j++) {
        if (data[j]>=i) {
            tempstring[index++]='X';
        } else {
            tempstring[index++]=' ';
        }
    }
    tempstring[index++]='*';
    tempstring[index++]='\n';
}

for(int i=0;i<numel+2;i++) {
    tempstring[index++]='*';
}
tempstring[index]='\0';
strcpy(histostring,tempstring);
}",0
rpar376,1696741846,2,"#include <stdio.h>
#include <string.h>


void Histogram(char *histostring, int data[],int numel) {
    char tempstring[1000];
    int index=0;
    
    for(int i=0;i<numel+2;i++) {
    tempstring[index++]='*';
}
tempstring[index++]='\n';

int max=0;

for (int i=0;i<numel;i++) {
    if (data[i]>max) {
        max=data[i];
    }
}

for (int i=max;i>0;i--) {
    tempstring[index++]='*';
    for (int j=0;j<numel;j++) {
        if (data[j]>=i) {
            tempstring[index++]='X';
        } else {
            tempstring[index++]=' ';
        }
    }
    tempstring[index++]='*';
    tempstring[index++]='\n';
}

for(int i=0;i<numel+2;i++) {
    tempstring[index++]='*';
}
tempstring[index]='\0';
strcpy(histostring,tempstring);
}",1
rraj313,1696307329,1,"void Histogram(char formatted[], int values[], int length) {

    int index = 0, i, j, highestValue = 0;
    for (i = 0; i < length; i++) {
        if (values[i] > highestValue) {
            highestValue = values[i];
        }
    }

    int height = highestValue + 2, width = length + 2;
    
    for (i = 0; i < height; i++) {
        for (j = 0; j < width; j++) {

            if (i == 0 || i == height - 1) {
                formatted[index] = '*';
            } else if (j == 0 || j == width - 1) { 
                formatted[index] = '*';
            } else {
                if (height - i - 2 < values[j - 1]) {
                    formatted[index] = 'X';
                } else {
                    formatted[index] = ' ';
                }
            }
            index++;
        }
        if (i < height - 1) {
        formatted[index] = '\n';
        index++;
        }

    }
    formatted[index] = '\0';
}",1
rsin531,1696841961,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataLength) {
    int maxFrequency = 0;

   
    for (int i = 0; i < dataLength; i++) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }

    
    result[0] = '\0';

    
    strcat(result, ""*"");
    for (int i = 0; i < dataLength; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");

    
    for (int row = maxFrequency; row >= 0; row--) {
        strcat(result, ""*"");
        for (int i = 0; i < dataLength; i++) {
            if (data[i] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }
        strcat(result, ""*\n"");
    }

    
    strcat(result, ""*"");
    for (int i = 0; i < dataLength; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""*\n"");
    
    
}",0
rsin719,1696813374,1,"void Histogram(char* result, int* data, int size) {
    int maxFrequency = 0;
    
    for (int i = 0; i < size; i++) {
        if (data[i] > maxFrequency) {
            maxFrequency = data[i];
        }
    }
    
    strcat(result, ""***************\n"");
    
    for (int i = maxFrequency; i > 0; i--) {
        strcat(result, ""* "");
        
        for (int j = 0; j < size; j++) {
            if (data[j] >= i) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
            strcat(result, "" "");
        }
        
        strcat(result, ""*\n"");
    }
    
    strcat(result, ""****************\n"");
}
",0
rsmi948,1696646100,1,"void Histogram(char histogram[], int plotArray[], int numElements)
{
    int maxNum = 0;
    int count = 0;

    for (int i = 0; i < numElements; i++){
        maxNum = fmax(maxNum, plotArray[i]);
    }

    for (int i = 0; i < maxNum + 2; i++){
        for (int j = 0; j <= numElements + 2; j ++){
            if (j == numElements + 2 && i != maxNum + 1){
                histogram[count] = '*';
                count += 1;
                histogram[count] = '\n';
            }  else if (i == 0) {
                histogram[count] = '*';
            }  else if (j == 0) {
                histogram[count] = '*';
            }  else if (i != maxNum + 1 && maxNum + 1 - i <= plotArray[j - 1]) { 
                histogram[count] = 'X';
            }  else if (i == maxNum + 1) {
                histogram[count] = '*';
            }   else {
                histogram[count] = ' ';
            }
            count += 1;
        }
    }
    printf(""%s"", histogram);
}",0
rsmi948,1696646115,2,"void Histogram(char histogram[], int plotArray[], int numElements)
{
    int maxNum = 0;
    int count = 0;

    for (int i = 0; i < numElements; i++){
        maxNum = fmax(maxNum, plotArray[i]);
    }

    for (int i = 0; i < maxNum + 2; i++){
        for (int j = 0; j <= numElements + 2; j ++){
            if (j == numElements + 2 && i != maxNum + 1){
                histogram[count] = '*';
                count += 1;
                histogram[count] = '\n';
            }  else if (i == 0) {
                histogram[count] = '*';
            }  else if (j == 0) {
                histogram[count] = '*';
            }  else if (i != maxNum + 1 && maxNum + 1 - i <= plotArray[j - 1]) { 
                histogram[count] = 'X';
            }  else if (i == maxNum + 1) {
                histogram[count] = '*';
            }   else {
                histogram[count] = ' ';
            }
            count += 1;
        }
    }
}",0
rsmi948,1696653188,3,"void Histogram(char histogram[], int plotArray[], int numElements)
{
    int maxNum = 0;
    int count = 0;

    for (int i = 0; i < 1000; i++){
        histogram[i] = '\0';
    }

    for (int i = 0; i < numElements; i++){
        maxNum = fmax(maxNum, plotArray[i]);
    }

    for (int i = 0; i < maxNum + 2; i++){
        for (int j = 0; j <= numElements + 1; j ++){
            if (j == numElements + 1 && i != maxNum + 1){
                histogram[count] = '*';
                count += 1;
                histogram[count] = '\n';
            }  else if (i == 0) {
                histogram[count] = '*';
            }  else if (j == 0) {
                histogram[count] = '*';
            }  else if (i != maxNum + 1 && maxNum + 1 - i <= plotArray[j - 1]) { 
                histogram[count] = 'X';
            }  else if (i == maxNum + 1) {
                histogram[count] = '*';
            }   else {
                histogram[count] = ' ';
            }
            count += 1;
        }
    }
}",1
rtan654,1696300552,1,"void Histogram(char* result, int* data, int length) {
    for (int i = 0; i < (length+2); i++){
        result[i] = '*';
    }
    result[length + 2] = '\n';
    result[length + 3] = '\0'; // the strcat function concatinates until it 'sees' the null character 

    int max_freq = 0;
    for (int i = 0; i<length; i++){
        if (data[i] > max_freq)
        max_freq = data[i]; // calculating the max data point within the provided data 
    }

    for(int i = max_freq; i > 0; i--){
        char templine[1000] = {};
        strcat(templine, ""*"");  
        for (int j = 0; j < length; j++){
            if(data[j] >= i){
                strcat(templine, ""X"");  // if the position in the data is the same as the max freq we place a X in that position in the array
            } else {
                strcat(templine, "" "");  
            }
        } 
        strcat(templine, ""*\n"");  
        strcat(result, templine);

    }

    char Lastline[1000] = {};
    for (int i = 0; i < (length+2); i++){
        Lastline[i] = '*';
    }
    Lastline[(length + 2)] = '\0';
    strcat(result, Lastline); //add last boarder
}
",1
rzha972,1696740544,1,"#include <stdio.h>
#include <string.h>

int Histogram(char formatted[], int arr_int[], int length){
    int i, j;
    int max = arr_int[0];
    
    for (i = 1; i < length; i++) { 
        if (arr_int[i] > max) {
            max = arr_int[i];
        }
    }

    int pos = 0;
    for (i = 0; i < length + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos++] = '\n';

    for (j = max; j > 0; j--) {
        formatted[pos++] = '*';
        for (i = 0; i < length; i++) {
            if (arr_int[i] >= j) {
                formatted[pos++] = 'X';
            } else {
                formatted[pos++] = ' ';
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }
    for (i = 0; i < length + 2; i++) {
        formatted[pos++] = '*';
    }
    
    formatted[pos++] = '\n';
    formatted[pos] = '\0'; 
    return pos; 
}",0
rzha972,1696740636,2,"#include <stdio.h>
#include <string.h>

int Histogram(char formatted[], int arr_int[], int length){
    int i, j;
    int max = arr_int[0];
    
    for (i = 1; i < length; i++) { 
        if (arr_int[i] > max) {
            max = arr_int[i];
        }
    }

    int pos = 0;
    for (i = 0; i < length + 2; i++) {
        formatted[pos++] = '*';
    }
    formatted[pos++] = '\n';

    for (j = max; j > 0; j--) {
        formatted[pos++] = '*';
        for (i = 0; i < length; i++) {
            if (arr_int[i] >= j) {
                formatted[pos++] = 'X';
            } else {
                formatted[pos++] = ' ';
            }
        }
        formatted[pos++] = '*';
        formatted[pos++] = '\n';
    }
    for (i = 0; i < length + 2; i++) {
        formatted[pos++] = '*';
    }
    
    formatted[pos] = '\0'; 
    return pos; 
}",1
sban919,1696349872,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int numElements)
{
    int max = 0;

    for (int i = 0; i < numElements; i++)
    {
        if (data[i] > max)
        {
            max = data[i];
        }
    }

    int height = max + 2;
  
    strcpy(result, """");

    for (int row = height-1; row >= 0; row--)
    {
        strcat(result, ""*"");

        for (int col = 0; col < numElements; col++)
        {
            if (row == 0 || row == height-1)
            {
                strcat(result, ""*"");
            }
            else if (data[col] >= row)
            {
                strcat(result, ""X"");
            } 
            else
            {
                strcat(result, "" "");
            }
        }

        strcat(result, ""*\n"");
    }

    
}",0
sban919,1696350547,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *data, int numOfElements)
{
    int max = 0;

    for (int i = 0; i < numOfElements; i++)
    {
        if (data[i] > max)
        {
            max = data[i];
        }
    }

    int height = max + 2;
  
    strcpy(formatted, """");

    for (int row = height-1; row >= 0; row--)
    {
        strcat(formatted, ""*"");

        for (int col = 0; col < numOfElements; col++)
        {
            if (row == 0 || row == height-1)
            {
                strcat(formatted, ""*"");
            }
            else if (data[col] >= row)
            {
                strcat(formatted, ""X"");
            } 
            else
            {
                strcat(formatted, "" "");
            }
        }

        strcat(formatted, ""*\n"");
    }

    formatted[strlen(formatted) - 1] = '\0';
}",1
sche525,1696346119,1,"void Histogram(char *format, int *array, int size){

    int maxval = array[0];

    for(int i = 1; i < size; i++){
        if(array[i] > maxval){
            maxval = array[i];
        }
    }

    int rowlen = size + 3;
    int run = 1;

    // Clears the format array
    memset(format, '\0', strlen(format));

    int i = 0;
    while(i < run * rowlen - 2){
        format[i] = '*';
        i++;
    }
    
    run++;
    format[i] = '*';
    i++;
    format[i] = '\n';
    i++;
    format[i] = '*';
    i++;

    while(maxval != 0){
        while(i < run * rowlen - 2){
            if(array[i % (rowlen) - 1] >= maxval){
                format[i] = 'X';
                i++;
            }
            else{
                format[i] = ' ';
                i++;
            }
        }
        maxval--;
        run++;
        format[i] = '*';
        i++;
        format[i] = '\n';
        i++;
        format[i] = '*';
        i++;
    }

    while(i < run * rowlen - 1){
        format[i] = '*';
        i++;
    }

}",1
scho575,1696729937,1,"void Histogram(char *output, int *values, int num_values) {
    int max_value = 0;
    for (int i = 0; i < num_values; i++) {
        if (values[i] > max_value) {
            max_value = values[i];
        }
    }
    int width = max_value;
    int height = num_values;
    for (int i = 0; i < height; i++) {
        for (int j = 0; j < width; j++) {
            if (width - j <= values[i]) {
                output[i * (width + 2) + j] = 'X';
            } else {
                output[i * (width + 2) + j] = ' ';
            }
        }
        output[i * (width + 2) + width] = '\n';
    }
    output[height * (width + 2)] = '\0';
}",0
scho575,1696730038,2,"void Histogram(char *output, int *values, int num_values) {
    int max_value = 0;

    for (int i = 0; i < num_values; i++) {
        if (values[i] > max_value) {
            max_value = values[i];
        }
    }
    int width = max_value;
    int height = num_values;
    int total_width = width + 2; 
    int index = 0;

    for (int i = 0; i < height; i++) {
        for (int j = 0; j < total_width; j++) {
            if (j == 0 || j == total_width - 1) {
                output[index++] = '*';
            } else if (j <= values[i]) {
                output[index++] = 'X';
            } else {
                output[index++] = ' ';
            }
        }
        output[index++] = '\n';
    }

    output[index] = '\0'; 
}
",0
schu718,1696839708,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int numvalues)
{
    int charactersinrow = numvalues + 3;
    
    for(int i = 0; i < numvalues + 2 ; i++)
    {
        formatted[i] = '*';
    }
    
    formatted[numvalues + 2] = '\n';
    
    int highestvalue = 0; 
    int topofcol = 0;
    
    for(int i = 0; i < numvalues; i++)
    {
        if(values[i] > highestvalue)
        {
            highestvalue = values[i];
            topofcol = values[i];
        }
    }
    
    for(int i = 0; i < highestvalue; i++)
    {
        for(int j = 0; j < charactersinrow; j++)
        {
            if(j == 0 || j == numvalues + 1)
            {
                formatted[charactersinrow * (i+1) + j] = '*';
            }
            
            else if(j == charactersinrow - 1)
            {
                formatted[charactersinrow * (i+1) + j] = '\n';
            }
            
            else if(values[j - 1] >= topofcol)
            {
                formatted[charactersinrow * (i+1) + j] = 'X';
            }
            
            else
            {
                formatted[charactersinrow * (i+1) + j] = ' ';
            }
        }
        topofcol = topofcol - 1;
    }
    
    for(int i = 0; i < numvalues + 2 ; i++)
    {
        formatted[i + (charactersinrow * (1+highestvalue) )] = '*';
    }
    
}
",0
schu718,1696841269,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int numvalues)
{
    int charactersinrow = numvalues + 3;

    for (int i = 0; i < 1000; i++)
    {
        formatted[i] = '\0';
    }

    for (int i = 0; i < charactersinrow; i++)
    {
        if (i < charactersinrow - 1)
        {
            formatted[i] = '*';
        }

        else
        {
            formatted[i] = '\n';
        }

    }

    int highestvalue = 0;
    int topofcol = 0;

    for (int i = 0; i < numvalues; i++)
    {
        if (values[i] > highestvalue)
        {
            highestvalue = values[i];
            topofcol = values[i];
        }
    }

    for (int i = 1; i <= highestvalue; i++)
    {
        for (int j = 0; j < charactersinrow; j++)
        {
            if (j == 0 || j == numvalues + 1)
            {
                formatted[charactersinrow * i + j] = '*';
            }

            else if (values[j - 1] >= topofcol)
            {
                formatted[charactersinrow * i + j] = 'X';
            }

            else if (j == charactersinrow - 1)
            {
                formatted[charactersinrow * i + j] = '\n';
            }

            else
            {
                formatted[charactersinrow * i + j] = ' ';
            }
        }
        topofcol = topofcol - 1;
    }

    for (int i = 0; i < (charactersinrow - 1); i++)
    {
        formatted[i + (charactersinrow * (1 + highestvalue))] = '*';
    }

}",0
schu718,1696841378,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int numvalues)
{
    int charactersinrow = numvalues + 3;
    
    for(int i = 0; i < 1000; i++)
    {
    formatted[i] ='\0';
    }
    
    for(int i = 0; i < charactersinrow ; i++)
    {
        if(i < charactersinrow-1)
        {
            formatted[i] = '*'; 
        }
        
        else
        {
            formatted[i] = '\n';
        }

    }
    
    int highestvalue = 0; 
    int topofcol = 0;
    
    for(int i = 0; i < numvalues; i++)
    {
        if(values[i] > highestvalue)
        {
            highestvalue = values[i];
            topofcol = values[i];
        }
    }
    
    for(int i = 1; i <= highestvalue; i++)
    {
        for(int j = 0; j < charactersinrow; j++)
        {
            if(j == 0 || j == numvalues + 1)
            {
                formatted[charactersinrow * i + j] = '*';
            }
            
            else if(values[j-1] >= topofcol)
            {
                formatted[charactersinrow * i + j] = 'X';
            }
            
            else if(j == charactersinrow -1)
            {
                formatted[charactersinrow * i + j] = '\n';
            }
            
            else 
            {
                formatted[charactersinrow * i + j] = ' ';
            }
        }
        topofcol = topofcol - 1;
    }
    
    for(int i = 0; i < (charactersinrow-1) ; i++)
    {
        formatted[i + (charactersinrow * (1+highestvalue) )] = '*';
    }
    
}",0
schu718,1696842037,4,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int numvalues)
{
    int charactersinrow = numvalues + 3;
    
    
    for(int i = 0; i < charactersinrow ; i++)
    {
        if(i < charactersinrow-1)
        {
            formatted[i] = '*'; 
        }
        
        else
        {
            formatted[i] = '\n';
        }

    }
    
    int highestvalue = 0; 
    int topofcol = 0;
    
    for(int i = 0; i < numvalues; i++)
    {
        if(values[i] > highestvalue)
        {
            highestvalue = values[i];
            topofcol = values[i];
        }
    }
    
    for(int i = 1; i <= highestvalue; i++)
    {
        for(int j = 0; j < charactersinrow; j++)
        {
            if(j == 0 || j == numvalues + 1)
            {
                formatted[charactersinrow * i + j] = '*';
            }
            
            else if(values[j-1] >= topofcol)
            {
                formatted[charactersinrow * i + j] = 'X';
            }
            
            else if(j == charactersinrow -1)
            {
                formatted[charactersinrow * i + j] = '\n';
            }
            
            else 
            {
                formatted[charactersinrow * i + j] = ' ';
            }
        }
        topofcol = topofcol - 1;
    }
    
    for(int i = 0; i < (charactersinrow-1) ; i++)
    {
        formatted[i + (charactersinrow * (1+highestvalue) )] = '*';
    }
    
    formatted[charactersinrow-1 + (charactersinrow * (1+highestvalue) )] = '\0';
    
}",0
schu718,1696842560,5,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int values[], int numvalues)
{
    int charactersinrow = numvalues + 3;
    
    
    for(int i = 0; i < charactersinrow ; i++)
    {
        if(i < charactersinrow-1)
        {
            formatted[i] = '*'; 
        }
        
        else
        {
            formatted[i] = '\n';
        }

    }
    
    int highestvalue = 0; 
    int topofcol = 0;
    
    for(int i = 0; i < numvalues; i++)
    {
        if(values[i] > highestvalue)
        {
            highestvalue = values[i];
            topofcol = values[i];
        }
    }
    
    for(int i = 1; i <= highestvalue; i++)
    {
        for(int j = 0; j < charactersinrow; j++)
        {
            if(j == 0 || j == numvalues + 1)
            {
                formatted[charactersinrow * i + j] = '*';
            }
            
            else if(values[j-1] >= topofcol)
            {
                formatted[charactersinrow * i + j] = 'X';
            }
            
            else if(j == (charactersinrow -1))
            {
                formatted[charactersinrow * i + j] = '\n';
            }
            
            else 
            {
                formatted[charactersinrow * i + j] = ' ';
            }
        }
        topofcol = topofcol - 1;
    }
    
    for(int i = 0; i < (charactersinrow-1) ; i++)
    {
        formatted[i + (charactersinrow * (1+highestvalue) )] = '*';
    }
    
    formatted[charactersinrow-1 + (charactersinrow * (1+highestvalue) )] = '\0';
    
}",1
sden589,1696846412,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *array, int num_element) {

    int maxVal = 0;
    for (int i = 0; i < num_element; i++) {
        if (array[i] > maxVal) {
            maxVal = array[i];
        }
    }

    result[0] = '\0';

     int width = num_element + 2;

    for (int i = 0; i < width; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");
    
    for (int row = maxVal; row >= 1; row--) {
        strcat(result, ""*"");

        for (int i = 0; i < num_element; i++) {
            if (array[i] >= row) {
                strcat(result, ""X"");
            } else {
                strcat(result, "" "");
            }
        }

        strcat(result, ""*\n"");
    }

     for (int i = 0; i < width; i++) {
        strcat(result, ""*"");
    }
}",1
she940,1696392778,1,"void Histogram(char* histogram, int* values, int numElements)
{
	int i;
	int biggest_value = values[0];
	int row;
	histogram[0] = '\0';
	for (i = 1; i < numElements; i++) {
		if (biggest_value < values[i]) {
			biggest_value = values[i];
		}
	}
	
	
	for (i = 0; i < (numElements + 2); i++) {
		
		strcat(histogram, ""*"");
	}
	strcat(histogram, ""\n"");
	
	for (row = 1; row <= biggest_value; row++) {
		/*strcat(histogram, ""*"");*/
		for (biggest_value; biggest_value > 0; biggest_value--) {
			strcat(histogram, ""*"");
			for (i = 0; i < numElements; i++) {
				if (values[i] >= biggest_value) {
					strcat(histogram, ""X"");
				}
				else {
					strcat(histogram, "" "");
				}
			}
			strcat(histogram, ""*"");
			strcat(histogram, ""\n"");
		}
	}
	


	for (i = 0; i < (numElements + 2); i++) {
		strcat(histogram, ""*"");
	}
	

}",0
she940,1696395673,2,"void Histogram(char* histogram, int* values, int numElements)
{
	int i;
	int biggest_value = values[0];
	int k;
	histogram[0] = '\0';
	for (i = 1; i < numElements; i++) {
		if (biggest_value < values[i]) {
			biggest_value = values[i];
		}
	}
	
	
	for (i = 0; i < (numElements + 2); i++) {
		
		strcat(histogram, ""*"");
	}
	strcat(histogram, ""\n"");
	
	
		for (k = biggest_value; k > 0; k--) {
			strcat(histogram, ""*"");
			for (i = 0; i < numElements; i++) {
				if (values[i] >= k) {
					strcat(histogram, ""X"");
				}
				else {
					strcat(histogram, "" "");
				}
			}
			strcat(histogram, ""*"");
			strcat(histogram, ""\n"");
		}

	


	for (i = 0; i < (numElements + 2); i++) {
		strcat(histogram, ""*"");
	}
	

}",1
shsa718,1696471888,1,"void Histogram (char* formatted, int* numbers, int length){

    int high = numbers[0]; 
    int current, i;
    char newline[1000];    
    int width = length+2;  

    // Finding highest integer in input array
    for(i=0; i<length; i++){
        current = numbers [i];

        if (current > high){
            high=current;
        }
    }

    // Initialise our string with the upper border of asterisks

    for (int j=0;j<= width; j++){
        if (j!=length+2){
            formatted[j] = '*';
        }

        else {
            formatted[j] = '\0';
        }
    }

    // Create each row of the histogram
    for (int i=high; i>=1; i--){  // iterate ""row by row"" 
        for (int j=0; j<=width+1; j++){ // populate each row ""column by column""

        // Before populating the histogram, initialise each lines' format.
            // Start each row on a 'new line'
            if (j==0){
                newline [j] ='\n';
                continue;
            }
            // Insert leftmost and rightmost border characters
            if (j==1 || j==width){
                newline [j] = '*';
                continue;
            }
            // Terminate row at the end position. 
            if (j==width+1){
                newline[j]='\0';
                continue;
            }


        // Populate histogram
            // Insert 'X' characters where appropriate
            if (numbers[j-2]>=i && j!= width+1){
                newline[j]='X';
                continue;
            }

            // Insert spaces where appropriate
            if (numbers[j-2]< i && j!= width+1){
                newline[j]=' ';
                continue;
            }

        }

        // Append each row to the end of our output string
        strcat(formatted, newline);

    }

    // Create ending line of asterisks border.
    for (int j=0;j<= width+1; j++){
        if (j==0){
            newline [j] = '\n';
            continue;
        }

        if (j>0 && j<width+1){
            newline[j] = '*';
            continue;
        }

        if (j==width+1) {
            newline[j] = '\0';
            continue;
        }
    } 

   // Append border to end of our now completed histogram!!
   strcat(formatted, newline);
   return;

}",1
shua365,1696239073,1,"void Histogram(char *save_str, int *values, int length){
    char end[length+2];
    int highest=0, cat_array[length];
    for (int i=0;i<length;i++){
        end[i]='*';
        cat_array[i]=0;
        if (values[i]>highest){
            highest=values[i];
        }
    }
    end[length]='*';
    end[length+1]='*';
    end[length+2]='\0';
    strcat(save_str,end);
    strcat(save_str,""\n"");

    for (int i=highest; i>0; i--){
        char current_str[length+2],cat_str;
        current_str[0]='*';
        for (int j=0; j<length; j++){
            if (values[j]==i){
                cat_array[j]=1;
            }
            if (cat_array[j]==1){
                current_str[j+1]='X';
            } else {
                current_str[j+1]=' ';
            }
        }
        current_str[length+1]='*';
        current_str[length+2]='\0';
        
        strcat(save_str,current_str);
        strcat(save_str,""\n"");
    }
    save_str=strcat(save_str,end);
    strcat(save_str,""\n"");

}",0
shua365,1696239514,2,"void Histogram(char *save_str, int *values, int length){
    char end[length+2];
    int highest=0, cat_array[length];
    for (int i=0;i<length;i++){
        end[i]='*';
        cat_array[i]=0;
        if (values[i]>highest){
            highest=values[i];
        }
    }
    end[length]='*';
    end[length+1]='*';
    end[length+2]='\0';
    strcpy(save_str,end);
    strcat(save_str,""\n"");

    for (int i=highest; i>0; i--){
        char current_str[length+2];
        current_str[0]='*';
        for (int j=0; j<length; j++){
            if (values[j]==i){
                cat_array[j]=1;
            }
            if (cat_array[j]==1){
                current_str[j+1]='X';
            } else {
                current_str[j+1]=' ';
            }
        }
        current_str[length+1]='*';
        current_str[length+2]='\0';
        
        strcat(save_str,current_str);
        strcat(save_str,""\n"");
    }
    save_str=strcat(save_str,end);
}",1
sjaf029,1696839281,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* histogram, int data[], int size) {
	int maximumVal = 0;

	for (int i = 0; i < size; i++) {
		if (data[i] > maximumVal) {
			maximumVal = data[i];
		}
	}
	
	histogram[0] = '\0';

	for (int row = maximumVal; row > 0; row--) {
		strcat(histogram, ""*"");

		for (int i = 0; i < size; i++) {
			if (data[i] >= row) {
				strcat(histogram, ""X"");
			}
			else {
				strcat(histogram, "" "");
			}
		}
		strcat(histogram, ""*\n"");
	}
	strcat(histogram, ""*"");
	for (int i = 0; i < size; i++) {
		strcat(histogram, ""*"");

	}
	strcat(histogram, ""*\n"");

}
",0
sjai563,1696836339,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int numElements) {
    
    formatted[0] = '\0' ;

    int height = 0 ;
    for (int i = 0; i < numElements; i++) {
        if (values[i] > height) {
            height = values[i] ;
        }
    }
    
    for (int i = 0; i < numElements + 2; i++) {
        strcat(formatted, ""*"") ;
    }
    strcat(formatted, ""\n"") ;

    for (int row = height; row > 0; row--) {
        strcat(formatted, ""*"") ;  

        for (int i = 0; i < numElements; i++) {
            if (values[i] >= row) {
                strcat(formatted, ""X"") ;
            } else {
                strcat(formatted, "" "") ;
            }
        }
        strcat(formatted, ""*"") ; 
        strcat(formatted, ""\n"") ;
    }

    for (int i = 0; i < numElements + 2; i++) {
        strcat(formatted, ""*"") ;
    }
}
",1
sjob296,1696834835,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int length) 
{
    int max = 0;
    for (int i = 0; i < length; ++i) 
    {
        if (data[i] > max) 
        {
            max = data[i];
        }
    }

    int width = length + 2; 
    int height = max + 2;   
    int size = width * height + height; 

    memset(result, '*', size);

    for (int i = 0; i < length; ++i) 
    {
        int barHeight = data[i];
        for (int j = 0; j < barHeight; ++j) 
        {
            result[j * width + i + 1] = 'X';
        }
    }

    for (int i = 1; i < height; ++i) 
    {
        result[i * width - 1] = '\n';
    }

    result[size - 1] = '\0';
}",0
skea516,1696587903,1,"void Histogram(char* formatted, int values[], int numValues) {
    
    int max = 0;
    int i;
    int j;
    for (i = 0; i< 10; i++) {
        if (values[i] > max) {
        max = values[i]; }
    }
    int counter = max;
    char line[100];
    
    for (j = 0; j < (numValues+1); j++) {
        strcat(formatted,""*"");
    }
    
    strcat(formatted,""*\n"");
    for (i = 0; i <= (max); i++) {
        for (j = 0; j < (numValues+1); j++) {
            if (j == 0) { strcat(formatted, ""*"");
            } else if (values[j-1] > counter) {
            strcat(formatted, ""X"");
            } else strcat(formatted, "" "");
        }
        strcat(formatted, ""*\n"");
        counter = counter - 1;
    }
  
    for (j = 0; j <= (numValues+1); j++) {
        strcat(formatted,""*"");
    }

}",0
skea516,1696587943,2,"void Histogram(char* formatted, int values[], int numValues) {
    
    int max = 0;
    int i;
    int j;
    for (i = 0; i< 10; i++) {
        if (values[i] > max) {
        max = values[i]; }
    }
    int counter = max;
    
    for (j = 0; j < (numValues+1); j++) {
        strcat(formatted,""*"");
    }
    
    strcat(formatted,""*\n"");
    for (i = 0; i <= (max); i++) {
        for (j = 0; j < (numValues+1); j++) {
            if (j == 0) { strcat(formatted, ""*"");
            } else if (values[j-1] > counter) {
            strcat(formatted, ""X"");
            } else strcat(formatted, "" "");
        }
        strcat(formatted, ""*\n"");
        counter = counter - 1;
    }
  
    for (j = 0; j <= (numValues+1); j++) {
        strcat(formatted,""*"");
    }

}",0
skea516,1696804540,3,"void Histogram(char* formatted, int values[], int numValues) {
    
    int max = 0;
    int i;
    int j;
    for (i = 0; i< numValues; i++) {
        if (values[i] > max) {
        max = values[i]; }
    }
    int counter = max;
    
    for (i = 0; i <= (max); i++) {
        for (j = 0; j <= (numValues); j++) {
            if (i == 0) {
                for (j = 0; j < (numValues+ 1); j++) {
                     strcat(formatted,""*""); } 
            } else if (j == 0) { strcat(formatted, ""*"");
            } else if (values[j- 1] > counter) {
            strcat(formatted, ""X"");
            } else strcat(formatted, "" "");
        }
        strcat(formatted, ""*\n"");
        counter = counter - 1;
        
    }
  
    for (j = 0; j <= (numValues+1); j++) {
        strcat(formatted,""*"");
    }

}


",0
skea516,1696837452,4,"void Histogram(char* formatted, int values[], int numValues) {
    
    formatted[0] = 0;
    int max = 0;
    int i;
    int j;
    for (i = 0; i< numValues; i++) {
        if (values[i] > max) {
        max = values[i]; }
    }
    int counter = max;
    
    
    for (i = 0; i <= (max); i++) {
        for (j = 0; j <= (numValues); j++) {
            if (i == 0) {
                for (j = 0; j < (numValues+1); j++) {
                     strcat(formatted, ""*""); 
                } 
            } else if (j == 0) { strcat(formatted, ""*"");
            } else if (values[j-1] > counter) {
            strcat(formatted, ""X"");
            } else strcat(formatted, "" "");
        }
        strcat(formatted, ""*\n"");
        counter = counter - 1;
    } 
    
    for (j = 0; j <= (numValues+1); j++) {
        strcat(formatted,""*"" );
    }
    strcat(formatted,""\n"" );

}



",0
skea516,1696837592,5,"void Histogram(char* formatted, int values[], int numValues) {
    
    formatted[0] = 0;
    int max = 0;
    int i;
    int j;
    for (i = 0; i< numValues; i++) {
        if (values[i] > max) {
        max = values[i]; }
    }
    int counter = max;
    
    
    for (i = 0; i <= (max); i++) {
        for (j = 0; j <= (numValues); j++) {
            if (i == 0) {
                for (j = 0; j < (numValues+1); j++) {
                     strcat(formatted, ""*""); 
                } 
            } else if (j == 0) { strcat(formatted, ""*"");
            } else if (values[j-1] > counter) {
            strcat(formatted, ""X"");
            } else strcat(formatted, "" "");
        }
        strcat(formatted, ""*\n"");
        counter = counter - 1;
    } 
    
    for (j = 0; j <= (numValues+1); j++) {
        strcat(formatted,""*"" );
    }

}



",1
skop291,1696827338,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int values[], int size) {
    int max = 0;

    // Find the maximum value to determine the height of the histogram
    for (int i = 0; i < size; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }

    int rowIndex = 0;

    // Top border
    for (int i = 0; i < size + 2; i++) {
        result[rowIndex++] = '*';
    }
    result[rowIndex++] = '\n';

    // Plotting the histogram
    for (int height = max; height > 0; height--) {
        result[rowIndex++] = '*';
        for (int i = 0; i < size; i++) {
            if (values[i] >= height) {
                result[rowIndex++] = 'X';
            } else {
                result[rowIndex++] = ' ';
            }
        }
        result[rowIndex++] = '*';
        result[rowIndex++] = '\n';
    }

    // Bottom border
    for (int i = 0; i < size + 2; i++) {
        result[rowIndex++] = '*';
    }
    result[rowIndex] = '\0';  // Null terminate the string
}

",1
skul970,1696419416,1,"void Histogram(char *output_string, int *data_values, int data_length) {
    int max = 0;
    for (int i = 0; i < data_length; i++) {
        if (data_values[i] > max) {
            max = data_values[i];
        }
    }

    int NUM_ROWS = max + 2;   
    int NUM_COLS = data_length + 2;  

    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (j == 0 || j == NUM_COLS - 1 || i == 0 || i == NUM_ROWS - 1) {
                output_string[i * (NUM_COLS + 1) + j] = '*';
            } else {
                output_string[i * (NUM_COLS + 1) + j] = ' ';
            }
        }
        output_string[i * (NUM_COLS + 1) + NUM_COLS] = '\n';
    }


    for (int i = 0; i < max; i++) {

        for (int j = 0; j < data_length; j++) {
            if (data_values[j] > i) {
                output_string[(max - i) * (NUM_COLS + 1) + j + 1] = 'X';
            }
        }
    }
}",0
skul970,1696420770,2,"void Histogram(char *output_string, int *data_values, int data_length) {
    int max = 0;
    for (int i = 0; i < data_length; i++) {
        if (data_values[i] > max) {
            max = data_values[i];
        }
    }

    int NUM_ROWS = max + 2;   
    int NUM_COLS = data_length + 2;  
    int count = 0;
    for (int i = 0; i < NUM_ROWS; i++) {
        for (int j = 0; j < NUM_COLS; j++) {
            if (j == 0 || j == NUM_COLS - 1 || i == 0 || i == NUM_ROWS - 1) {
                output_string[i * (NUM_COLS + 1) + j] = '*';
            } else {
                output_string[i * (NUM_COLS + 1) + j] = ' ';
            }
        }
        output_string[i * (NUM_COLS + 1) + NUM_COLS] = '\n';
        count++;
    }


    for (int i = 0; i < max; i++) {

        for (int j = 0; j < data_length; j++) {
            if (data_values[j] > i) {
                output_string[(max - i) * (NUM_COLS + 1) + j + 1] = 'X';
            }
        }
    }
    output_string[NUM_ROWS*NUM_COLS + count - 1] = '\0';
}
",1
slam669,1696583378,1,"#include <stdio.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS
 
void Histogram(char *graph, int array[], int numElements)
{
    int i,j,max,rows,cols;
    max = 0;
    
    for (i = 0; i< numElements; i++){
        if (array[i] > max){
            max = array[i];
        }
    }
    
    rows = max + 2;
    cols = numElements + 2;
    
    graph[0] = '*';
    
    for (i=1; i < cols; i++){
        strcat(graph,""*"");
    }
    strcat(graph,""\n"");
    
    for(i=1; i<rows-1; i++){
        for (j=0; j<cols; j++){
            if (j==0){
                strcat(graph,""*"");
            }else if (j == cols-1){
                strcat(graph,""*\n"");
            }else if (array[j-1]> max - i ){
                strcat(graph,""X"");
                
            }else {
                strcat(graph,"" "");
            }
        }
    }
    
    
    for (i = 0; i < cols ; i++){
            strcat(graph,""*"");
    }
    
    
    
}",0
slam669,1696583581,2,"#include <stdio.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS
 
void Histogram(char *graph, int array[], int numElements)
{
    int i,j,max,rows,cols;
    max = 0;
    
    for (i = 0; i< numElements; i++){
        if (array[i] > max){
            max = array[i];
        }
    }
    
    rows = max + 2;
    cols = numElements + 2;
    
    strcpy(graph,"""");
    
    for (i=0; i < cols; i++){
        strcat(graph,""*"");
    }
    strcat(graph,""\n"");
    
    for(i=1; i<rows-1; i++){
        for (j=0; j<cols; j++){
            if (j==0){
                strcat(graph,""*"");
            }else if (j == cols-1){
                strcat(graph,""*\n"");
            }else if (array[j-1]> max - i ){
                strcat(graph,""X"");
                
            }else {
                strcat(graph,"" "");
            }
        }
    }
    
    
    for (i = 0; i < cols ; i++){
            strcat(graph,""*"");
    }
    
    
    
}",1
smou122,1696388453,1,"void Histogram(char *formatted, int values1[], int values2){
    memset(formatted, '\0', sizeof(formatted));
    int j;
    int max = 0;
    for (j = 0; j < values2; j++){
        if (values1[j] > max){
            max = values1[j];
        }
    }
    int col;
    for (col = 0; col <= values2 + 1; col++){
        strcat(formatted, ""*"");
    }
    int row;
    for (row = 0; row < max; row++){
        strcat(formatted, ""\n"");
        strcat(formatted, ""*"");
        for (col = 0; col < values2; col++){
            if (values1[col] >= (max - row)){
                strcat(formatted, ""X"");
            }
            else if(values1[col] < (max - row)){
                strcat(formatted, "" "");
            }

        }
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""\n"");
    for (col = 0; col <= values2 + 1; col++){
        strcat(formatted, ""*"");
    }

}",0
smou122,1696389066,2,"void Histogram(char *formatted, int values1[], int values2){
    int change;
    for (change = 0; change <= values2; change++){
        formatted[change] = '\0';
    }
    int j;
    int max = 0;
    for (j = 0; j < values2; j++){
        if (values1[j] > max){
            max = values1[j];
        }
    }
    int col;
    for (col = 0; col <= values2 + 1; col++){
        strcat(formatted, ""*"");
    }
    int row;
    for (row = 0; row < max; row++){
        strcat(formatted, ""\n"");
        strcat(formatted, ""*"");
        for (col = 0; col < values2; col++){
            if (values1[col] >= (max - row)){
                strcat(formatted, ""X"");
            }
            else if(values1[col] < (max - row)){
                strcat(formatted, "" "");
            }

        }
        strcat(formatted, ""*"");
    }
    strcat(formatted, ""\n"");
    for (col = 0; col <= values2 + 1; col++){
        strcat(formatted, ""*"");
    }

}",1
span558,1696222945,1,"void Histogram(char *histogram_str, int data[], int n) {
    int max_frequency = 0;
    
    for (int i = 0; i < n; i++) {
        if (data[i] > max_frequency) {
            max_frequency = data[i];
        }
    }

    for (int i = max_frequency; i > 0; i--) {
        char row[n];
        int row_length = 0;

        for (int j = 0; j < n; j++) {
            if (data[j] >= i) {
                row[row_length] = 'X';
            } else {
                row[row_length] = ' ';
            }
            row_length++;
        }

        histogram_str += sprintf(histogram_str, ""*"");
        for (int k = 0; k < row_length; k++) {
            histogram_str += sprintf(histogram_str, ""%c"", row[k]);
        }
        histogram_str += sprintf(histogram_str, "" *\n"");
    }

    for (int i = 0; i < n + 2; i++) {
        histogram_str += sprintf(histogram_str, ""*"");
    }
    histogram_str += sprintf(histogram_str, ""\n"");
}",0
span558,1696223225,2,"#include <stdio.h>

void Histogram(char *histogram_str, int data[], int n) {
    int max_frequency = 0;
    for (int i = 0; i < n; i++) {
        if (data[i] > max_frequency) {
            max_frequency = data[i];
        }
    }

    int total_length = n + 2; 

    for (int i = 0; i < total_length; i++) {
        histogram_str += sprintf(histogram_str, ""*"");
    }
    histogram_str += sprintf(histogram_str, ""\n"");

    for (int i = max_frequency; i > 0; i--) {
        char row[n];
        int row_length = 0;

        for (int j = 0; j < n; j++) {
            if (data[j] >= i) {
                row[row_length] = 'X';
            } else {
                row[row_length] = ' ';
            }
            row_length++;
        }
        histogram_str += sprintf(histogram_str, ""*"");
        for (int k = 0; k < row_length; k++) {
            histogram_str += sprintf(histogram_str, ""%c"", row[k]);
        }

        for (int k = row_length; k < n; k++) {
            histogram_str += sprintf(histogram_str, "" "");
        }

        histogram_str += sprintf(histogram_str, "" *\n"");
    }

    for (int i = 0; i < total_length; i++) {
        histogram_str += sprintf(histogram_str, ""*"");
    }
    histogram_str += sprintf(histogram_str, ""\n"");
}
",0
span558,1696223720,3,"#include <stdio.h>

void Histogram(char *histogram_str, int data[], int n) {
    int max_frequency = 0;

    for (int i = 0; i < n; i++) {
        if (data[i] > max_frequency) {
            max_frequency = data[i];
        }
    }

    int total_length = n + 2;

    for (int i = 0; i < total_length; i++) {
        histogram_str += sprintf(histogram_str, ""*"");
    }
    histogram_str += sprintf(histogram_str, ""\n"");

    for (int i = max_frequency; i > 0; i--) {
        char row[n];
        int row_length = 0;

        for (int j = 0; j < n; j++) {
            if (data[j] >= i) {
                row[row_length] = 'X';
            } else {
                row[row_length] = ' ';
            }
            row_length++;
        }

        histogram_str += sprintf(histogram_str, ""*"");

        for (int k = 0; k < n; k++) {
            histogram_str += sprintf(histogram_str, ""%c"", row[k]);
        }

        histogram_str += sprintf(histogram_str, ""*\n"");
    }

    for (int i = 0; i < total_length; i++) {
        histogram_str += sprintf(histogram_str, ""*"");
    }
    histogram_str += sprintf(histogram_str, ""\n"");
}
",0
span558,1696224188,4,"#include <stdio.h>

void Histogram(char *histogram_str, int data[], int n) {
    int max_frequency = 0;
    for (int i = 0; i < n; i++) {
        if (data[i] > max_frequency) {
            max_frequency = data[i];
        }
    }

    int total_length = n + 2;

    for (int i = 0; i < total_length; i++) {
        histogram_str += sprintf(histogram_str, ""*"");
    }
    histogram_str += sprintf(histogram_str, ""\n"");

    for (int i = max_frequency; i > 0; i--) {
        char row[n];
        int row_length = 0;

        for (int j = 0; j < n; j++) {
            if (data[j] >= i) {
                row[row_length] = 'X';
            } else {
                row[row_length] = ' ';
            }
            row_length++;
        }

        histogram_str += sprintf(histogram_str, ""*"");

        for (int k = 0; k < n; k++) {
            histogram_str += sprintf(histogram_str, ""%c"", row[k]);
        }

        if (i > 1) {
            histogram_str += sprintf(histogram_str, ""*\n"");
        } else {
            histogram_str += sprintf(histogram_str, ""*\n"");
        }
    }

    for (int i = 0; i < total_length; i++) {
        histogram_str += sprintf(histogram_str, ""*"");
    }
}
",1
spar473,1696561610,1,"void Histogram(char *resulting, int *data, int elements) 
{
    int width = elements + 2;
    int height = 0;
    resulting[0] = 0;

    for (int i=0; i<elements; i++) {
        if (data[i] > height) {
            height = data[i];
        }
    }
    for (int i = 0; i < width; i++) {
        strcat(resulting, ""*"");
    }
    strcat(resulting, ""\n"");
    for(int i=height; i>0; i--) {
        strcat(resulting, ""*"");

        for (int j=0; j < elements; j++) {
            if (data[j] >= i) {
                strcat(resulting, ""X"");
            } else {
                strcat(resulting, "" "");
            }
            strcat(resulting, """");
        }
        strcat(resulting, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
        strcat(resulting, ""*"");
    }
    strcat(resulting, ""\n"");
}",0
spar473,1696679746,2,"void Histogram(char *resulting, int *data, int elements) 
{
    int width = elements + 2;
    int height = 0;
    resulting[0] = 0;

    for (int i=0; i<elements; i++) {
        if (data[i] > height) {
            height = data[i];
        }
    }
    for (int i = 0; i < width; i++) {
        strcat(resulting, ""*"");
    }
    strcat(resulting, ""\n"");
    for(int i=height; i>0; i--) {
        strcat(resulting, ""*"");

        for (int j=0; j < elements; j++) {
            if (data[j] >= i) {
                strcat(resulting, ""X"");
            } else {
                strcat(resulting, "" "");
            }
            strcat(resulting, """");
        }
        strcat(resulting, ""*\n"");
    }
    for (int i = 0; i < width; i++) {
        strcat(resulting, ""*"");
    }
}",1
spar820,1696822107,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int num) {

    int width = num + 2;
    int i = 0;
    int max = values[i];
    
    for (i = 0; i<num; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    
    int j;
    for (j=0; j<width; j++) {
        strcat(formatted, ""*"");
        }
        strcat(formatted, ""\n"");
    
    int k;
    for (k = max; k >= 1; k--) {
        
        strcat(formatted, ""*"");
        
        for (int r = 0; r < num; r++){
            if (values[r] >= max) {
                strcat(formatted, ""X"");
            } else {
                strcat(formatted, "" "");
            }
        }
            strcat(formatted, ""*\n"");
            max = max - 1;
    }
    
     for (j=0; j<width; j++) {
            strcat(formatted, ""*"");
        }
    
}
",0
spar820,1696823714,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int num) {

    int width = num + 2;
    int i = 0;
    int max = values[i];
    *formatted = '\0';
    
    for (i = 0; i<num; i++) {
        if (values[i] > max) {
            max = values[i];
        }
    }
    
    int j;
    for (j=0; j<width; j++) {
        strcat(formatted, ""*"");
        }
        strcat(formatted, ""\n"");
    
    int k;
    for (k = max; k >= 1; k--) {
        
        strcat(formatted, ""*"");
        
        for (int r = 0; r < num; r++){
            if (values[r] >= max) {
                strcat(formatted, ""X"");
            } else {
                strcat(formatted, "" "");
            }
        }
            strcat(formatted, ""*\n"");
            max = max - 1;
    }
    
     for (j=0; j<width; j++) {
            strcat(formatted, ""*"");
        }
    
}
",1
ssco465,1696824187,1,"#include <stdio.h>

void Histogram(char* result, int* data, int n) {
    int max = 0;

    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (int row = max; row >= 0; row--) {
        for (int col = 0; col < n; col++) {
            if (data[col] >= row) {
                result[col] = 'X';
            }
            else {
                result[col] = ' ';
            }
        }
        result[n] = '\0'; 
        printf(""*%s*\n"", result);
    }

   
}
",0
ssco465,1696824450,2,"#include <stdio.h>

void Histogram(char* result, int* data, int n) {
    int max = 0;

    for (int i = 0; i < n; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    for (int row = max; row >= 0; row--) {
        for (int col = 0; col < n; col++) {
            if (data[col] >= row) {
                result[col] = 'X';
            }
            else {
                result[col] = ' ';
            }
        }
        result[n] = '\0'; 
        printf(""*%s*\n"", result);
    }

    for (int i = 0; i < n + 2; i++) {
        printf(""*"");
    }
    printf(""\n"");
}

",0
ssri357,1696666814,1,"void Histogram(char *stringName, int *valuesArray, int arrayLength) {
    int maxNum = valuesArray[0];
    int maxIndexPos[50];
    int indexCount = 0;

    for (int i = 1; i < arrayLength; i++) {
        if (valuesArray[i] > maxNum) {
            maxNum = valuesArray[i];
            indexCount = 0;
        }
        if (valuesArray[i] == maxNum) {
            maxIndexPos[indexCount] = i;
            indexCount++;
        }
    }

    int NumColumns = arrayLength + 3;
    int NumRows = maxNum + 2;

    char stringNameArray[100][100];  // Fixed array type

    for (int row = 0; row < NumRows; row++) {
        for (int column = 0; column < NumColumns; column++) {
            if (column == NumColumns - 1) {
                if (row != NumRows -1 ){
                    // Corrected the condition
                    stringNameArray[row][column] = '\n';
                }
                
                else{
                    // Null-terminate the string
                    stringNameArray[row][column] = '\0';
                }
            } else if (row == 0 || row == NumRows - 1) {
                stringNameArray[row][column] = '*';
            } else if (column == 0 || column == NumColumns - 2) {
                stringNameArray[row][column] = '*';
            } else {
                int a = column - 1;
                if (NumRows - row -1 <= valuesArray[a]) {
                    stringNameArray[row][column] = 'X';
                } else {
                    stringNameArray[row][column] = 32;
                }
            }
        }
    }

    int d = 0;
    for (int b = 0; b < NumRows; b++) {
        for (int c = 0; c < NumColumns; c++) {
            stringName[d] = stringNameArray[b][c];
            d++;
            
        }
    }

    
}",0
ssri357,1696666935,2,"void Histogram(char *stringName, int *valuesArray, int arrayLength) {
    int maxNum = valuesArray[0];

    for (int i = 1; i < arrayLength; i++) {
        if (valuesArray[i] > maxNum) {
            maxNum = valuesArray[i];
        }

    }

    int NumColumns = arrayLength + 3;
    int NumRows = maxNum + 2;

    char stringNameArray[100][100];  // Fixed array type

    for (int row = 0; row < NumRows; row++) {
        for (int column = 0; column < NumColumns; column++) {
            if (column == NumColumns - 1) {
                if (row != NumRows -1 ){
                    // Corrected the condition
                    stringNameArray[row][column] = '\n';
                }
                
                else{
                    // Null-terminate the string
                    stringNameArray[row][column] = '\0';
                }
            } else if (row == 0 || row == NumRows - 1) {
                stringNameArray[row][column] = '*';
            } else if (column == 0 || column == NumColumns - 2) {
                stringNameArray[row][column] = '*';
            } else {
                int a = column - 1;
                if (NumRows - row -1 <= valuesArray[a]) {
                    stringNameArray[row][column] = 'X';
                } else {
                    stringNameArray[row][column] = 32;
                }
            }
        }
    }

    int d = 0;
    for (int b = 0; b < NumRows; b++) {
        for (int c = 0; c < NumColumns; c++) {
            stringName[d] = stringNameArray[b][c];
            d++;
            
        }
    }

    
}",1
swan472,1696806644,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, const int *data, int data_len) {
    // Find the maximum value in the data array
    int max_value = 0;
    for (int i = 0; i < data_len; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Initialize the output string
    strcpy(output, """");

    // Add the top border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");

    // Populate the histogram lines with 'X' characters
    for (int i = max_value; i >= 1; i--) {
        strcat(output, ""*"");
        for (int j = 0; j < data_len; j++) {
            if (data[j] >= i) {
                strcat(output, ""X"");
            } else {
                strcat(output, "" "");
            }
        }
        strcat(output, ""*\n"");
    }

    // Add the bottom border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");
}
",0
swan472,1696806930,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, const int *data, int data_len) {
    // Find the maximum value in the data array
    int max_value = 0;
    for (int i = 0; i < data_len; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Initialize the output string
    strcpy(output, """");

    // Add the top border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");

    // Populate the histogram lines with 'X' characters
    for (int i = max_value; i >= 1; i--) {
        strcat(output, ""*"");
        for (int j = 0; j < data_len; j++) {
            if (data[j] >= i) {
                strcat(output, ""X"");
            } else {
                strcat(output, "" "");
            }
        }
        strcat(output, ""*\n"");
    }

    // Add the bottom border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");
}",0
swan472,1696807109,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, const int *data, int data_len) {
    // Find the maximum value in the data array
    int max_value = 0;
    for (int i = 0; i < data_len; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Initialize the output string
    strcpy(output, """");

    // Add the top border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");

    // Populate the histogram lines with 'X' characters
    for (int i = max_value; i >= 1; i--) {
        strcat(output, ""*"");
        for (int j = 0; j < data_len; j++) {
            if (data[j] >= i) {
                strcat(output, ""X"");
            } else {
                strcat(output, "" "");
            }
        }
        strcat(output, ""*\n"");
    }

    // Add the bottom border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");
}

",0
swan472,1696807472,4,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, const int *data, int data_len) {
    // Find the maximum value in the data array
    int max_value = 0;
    for (int i = 0; i < data_len; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Initialize the output string
    strcpy(output, """");

    // Add the top border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");

    // Populate the histogram lines with 'X' characters
    for (int i = max_value; i >= 1; i--) {
        strcat(output, ""*"");
        for (int j = 0; j < data_len; j++) {
            if (data[j] >= i) {
                strcat(output, ""X"");
            } else {
                strcat(output, "" "");
            }
        }
        strcat(output, ""*\n"");
    }

    // Add the bottom border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");
}
",0
swan472,1696807743,5,"#include <stdio.h>
#include <string.h>

void Histogram(char *output, const int *data, int data_len) {
    // Find the maximum value in the data array
    int max_value = 0;
    for (int i = 0; i < data_len; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Initialize the output string
    strcpy(output, """");

    // Add the top border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, ""\n"");

    // Populate the histogram lines with 'X' characters
    for (int i = max_value; i >= 1; i--) {
        strcat(output, ""*"");
        for (int j = 0; j < data_len; j++) {
            if (data[j] >= i) {
                strcat(output, ""X"");
            } else {
                strcat(output, "" "");
            }
        }
        strcat(output, ""*\n"");
    }

    // Add the bottom border
    for (int i = 0; i < data_len + 2; i++) {
        strcat(output, ""*"");
    }
    strcat(output, """");
}
",1
sweb390,1696827811,1,"void Histogram(char* string, int* data, int n) {
	int width = n + 2;
	int i;
	int j;
	int height = 0;

	for (i = 0; i < n; i++) {
		if (data[i] > height) {
			height = data[i];
		}
	}
	height += 2;

	// initialise string
	for (i = 0; i <= height * (width + 1) - 1; i++) {
		string[i] = 32;
	}
	string[height * (width + 1) -1] = 0;

	// top row of stars
	for (i = 0; i < width; i++) {
		string[i] = '*';
	}
	// side columns of stars
	int endStar = width - 1;
	int startStar = width + 1;
	for (i = 0; i < height; i++) {
		string[startStar * i] = '*';
		string[endStar] = '*';
		endStar += width + 1;
	}
	// bottom row of stars
	for (i = (height - 1) * (width + 1); i < (height * (width+1) - 1); i++) {
		string[i] = '*';
	}
	
	// new line at end of each row 
	int endNumber = width;
	string[width] = '\n';
	for (i = 1; i < height; i++) {
		string[endNumber] = '\n';
		endNumber += width + 1;
	}
	
	// plot the data
	int pointHeight;
	for (i = 1; i <= n; i++) {
		pointHeight = data[i -1];
		for (j = height - 2; j > height - 2 - pointHeight; j--) {
			string[(width + 1) * j + i] = 'X';
		}
	}

}",1
syok443,1696298154,1,"void Histogram(char *formatted, int *values, int length){

    int i, k;
    int max = 0;

    //finds the tallest bar
    for(i = 0; i < length; i++){
        if(values[i] > max){
            max = values[i];
        }
    }
    
    int j = 0;
    for(i = 0; i < length + 2; i++){
        formatted[j++] = '*';
    }

    for(i = max; i > 0; i--){
        // loop the amount of max values
        
        
        formatted[j++] = '\n';

        formatted[j++] = '*';
        //if the value in the values array is bigger or equal to the size of i display X
        for(k = 0; k < length; k++){
            
            if(i <= values[k]){
                formatted[j++] = 'X';
            }else{
                formatted[j++] = ' ';
            }
        
        }
        formatted[j++] = '*';

    } 
    
    
    formatted[j++] = '\n';
    
    for(i = 0; i < length + 2; i++){
        formatted[j++] = '*';
    }
    formatted[j] = '\0';
}",1
szen566,1696373240,1,"void Histogram(char* format, int* array, int length)
{
	int i, j;
	int biggestNo = 0;
	int tempNo;

	// Go thru the array and find the biggest value
	for (i = 0; i < length; i++) {
		tempNo = array[i];
		if (tempNo > biggestNo) {
			biggestNo = tempNo;
		}
	}

	// Print the first line (border), which has length + 2 number of stars
	//for (i = 0; i < length + 3; i++) {
		//printf(""*"");
	//}
	//printf(""\n"");
	
	format[0] = '\0';

	// Print the first line (border), which has length + 2 number of stars
	for (i = 0; i < length + 2; i++) {
		strcat(format, ""*"");
	}
	strcat(format, ""\n"");

	// printf(""string = %s"", format);

	// Go thru array, and take position of the element which == biggestNo
	for (i = biggestNo; i > 0; i--) {
		strcat(format, ""*"");

		// Every line
		for (j = 0; j < length; j++) {
			

			// Concate X or space.
			if (array[j] >= i) {
				strcat(format, ""X"");
			}
			else {
				strcat(format, "" "");
			}
		}
		strcat(format, ""*\n"");
	}
	strcat(format, ""\0"");

	// Bottom border
	for (i = 0; i < length + 2; i++) {
		strcat(format, ""*"");
	}
}",1
tais804,1696665778,1,"void Histogram(char *string, int *values, int num_values) {
    int i, j, height, width;
    width = num_values + 2;
    
    for (i = 0; i < num_values; i++) {
        if (values[i]+1 > height) {
            height = values[i]+1;
        }
    }

    for (i = height; i >= 0; i--) {
        for (j = 0; j < width; j++) {
            if (i == height) {
                strcat(string, ""*"");
            } else if (j == 0) {
                strcat(string, ""\n*"");
            } else if (j == width-1) {
                strcat(string, ""*"");
            } else if (i == 0) {
               strcat(string, ""*"");
            } else if (values[j-1] >= i) {
                strcat(string, ""X"");
            } else {
              strcat(string, "" "");
            }
        }
    }
}",0
tais804,1696671203,2,"void Histogram(char *string, int *values, int num_values) {
    int i, j, height, width;
    width = num_values + 2;
   memset(string, '\0', sizeof(&string));
   height = 0;
    
    for (i = 0; i < num_values; i++) {
        if (values[i]+1 > height) {
            height = values[i]+1;
        }
    }

    for (i = height; i >= 0; i--) {
        for (j = 0; j < width; j++) {
            if (i == height) {
                strcat(string, ""*"");
            } else if (j == 0) {
                strcat(string, ""\n*"");
            } else if (j == width-1) {
                strcat(string, ""*"");
            } else if (i == 0) {
               strcat(string, ""*"");
            } else if (values[j-1] >= i) {
                strcat(string, ""X"");
            } else {
              strcat(string, "" "");
            }
        }
    }
}",1
tbar968,1696688999,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Histogram(char formatted[], int values[], int length) {
	
	int i;
	int k;
	k = 0;

	for (i = 0; i < length + 2; i++) {
		formatted[k] = '*';
		k = k + 1;
	}
	formatted[length + 2] = '\n';
	k = k + 1;

	int highest;
	highest = values[0];
	for (i = 1; i < length; i++) {
		if (values[i] > highest) {
			highest = values[i];
		}
	}


	int j;
	int m;
	for (j = highest; j > 0; j--) {
		formatted[k] = '*';
		k = k + 1;
		for (m = 0; m < length; m++) {
			if (values[m] >= j) {
				formatted[k] = 'X';
			}
			else {
				formatted[k] = ' ';
			}
			k = k + 1;
		}
		formatted[k] = '*';
		k = k + 1;
		formatted[k] = '\n';
		k = k + 1;
	}
	int n;
	for (n = 0; n <= length + 1; n++) {
		formatted[k] = '*';
		k = k + 1;
	}
}",0
tbar968,1696689378,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Histogram(char formatted[], int values[], int length) {
	
	int i;
	int k;
	k = 0;

	for (i = 0; i < length + 2; i++) {
		formatted[k] = '*';
		k = k + 1;
	}
	formatted[length + 2] = '\n';
	k = k + 1;

	int highest;
	highest = values[0];
	for (i = 1; i < length; i++) {
		if (values[i] > highest) {
			highest = values[i];
		}
	}


	int j;
	int m;
	for (j = highest; j > 0; j--) {
		formatted[k] = '*';
		k = k + 1;
		for (m = 0; m < length; m++) {
			if (values[m] >= j) {
				formatted[k] = 'X';
			}
			else {
				formatted[k] = ' ';
			}
			k = k + 1;
		}
		formatted[k] = '*';
		k = k + 1;
		formatted[k] = '\n';
		k = k + 1;
	}
	int n;
	for (n = 0; n <= length + 1; n++) {
		formatted[k] = '*';
		k = k + 1;
	}
	formatted[k] = '\0';
}",1
tche867,1696838915,1,"void Histogram(char* item, int value[], int n)
{
	
	int item_counter = -1;
	// find the maximum
	int max = -1;
	int height_counter;
	for (int i = 0; i < n; i++)
	{
		if (max < value[i])
		{
			max = value[i];
		}
	}
	
	// add all the element
	height_counter = max;

	// add the upper bar 


	for (int col = 0; col < n+2; col++)
	{
		item_counter = item_counter + 1;
		item[item_counter] = '*';
	}
	item_counter = item_counter + 1;
	item[item_counter] = '\n';

	for (int row = max-1; row >=0 ; row--)
	{
		for (int col = 0; col < n+2; col++)
		{
			if (col == 0 || col == n+1)
			{
				item_counter = item_counter + 1;
				item[item_counter] = '*';
			}	
			else if (row < value[col - 1])
			{
				// buggy code
				item_counter = item_counter + 1;
				item[item_counter] = 'X';
			}
			else
			{
				item_counter = item_counter + 1;
				item[item_counter] = ' ';
			}
		}
		item_counter = item_counter + 1;
		item[item_counter] = '\n';

	}
	for (int col = 0; col < n + 2; col++)
	{
		item_counter = item_counter + 1;
		item[item_counter] = '*';
	}
	item_counter = item_counter + 1;
	item[item_counter] = '\0';
}",0
tche867,1696839040,2,"void Histogram(char* item, int value[], int n)
{
	
	int item_counter = -1;
	// find the maximum
	int max = -1;
	for (int i = 0; i < n; i++)
	{
		if (max < value[i])
		{
			max = value[i];
		}
	}
	
	// add the upper bar 


	for (int col = 0; col < n+2; col++)
	{
		item_counter = item_counter + 1;
		item[item_counter] = '*';
	}
	item_counter = item_counter + 1;
	item[item_counter] = '\n';

	for (int row = max-1; row >=0 ; row--)
	{
		for (int col = 0; col < n+2; col++)
		{
			if (col == 0 || col == n+1)
			{
				item_counter = item_counter + 1;
				item[item_counter] = '*';
			}	
			else if (row < value[col - 1])
			{
				// buggy code
				item_counter = item_counter + 1;
				item[item_counter] = 'X';
			}
			else
			{
				item_counter = item_counter + 1;
				item[item_counter] = ' ';
			}
		}
		item_counter = item_counter + 1;
		item[item_counter] = '\n';

	}
	for (int col = 0; col < n + 2; col++)
	{
		item_counter = item_counter + 1;
		item[item_counter] = '*';
	}
	item_counter = item_counter + 1;
	item[item_counter] = '\0';
}
",1
tdic873,1696296638,1,"void Histogram(char *phrase, int *values, int length)
{
    int k = 0;
    while (phrase[k] != '\0') {
        phrase[k] = 0;
        k++;
    }

    int currentindex = 0;

    for (int i = 0; i < length + 2; i++)
    {
        phrase[currentindex] = '*';
        currentindex++;
    }

    phrase[currentindex] = '\n';
    currentindex++;    

    int max_val = 0;
    for (int i = 0; i < length; i++)
    {
        if (max_val < values[i]) max_val = values[i];
    }

    for (int i = 0; i < max_val; i++)
    {   
        phrase[currentindex] = '*';
        currentindex++;
        for (int j = 0; j < length; j++)
        {
            if (values[j] >= max_val - i){
                phrase[currentindex] = 'X';
            } else {
                phrase[currentindex] = ' ';
            }
            currentindex++;
        }
        phrase[currentindex] = '*';
        currentindex++;
        phrase[currentindex] = '\n';
        currentindex++;
    }

    for (int i = 0; i < length + 2; i++)
    {
        phrase[currentindex] = '*';
        currentindex++;
    }
}
",1
tdu824,1696838483,1,"void Histogram(char *formatted, int values[], int elements) {

    int position = 0;

    for (int i = 0; i < elements + 2; i++) {
        formatted[position] = 42;
        position++;
    }

    formatted[position] = '\n';
    position++;

    int biggestValue = 0;

    for (int i = 1; i < elements; i++) {
        if (biggestValue < values[i]) {
            biggestValue = values[i];
        }
    }

    for (int j = biggestValue; j > 0; j--) {
        formatted[position] = 42;
        position++;
        for (int k = 0; k < elements; k++) {
            if (values[k] >= j) {
                formatted[position] = 88;
                position++;
            } else {
                formatted[position] = 32;
                position++;
            }
        }
        formatted[position] = 42;
        position++;
        formatted[position] = '\n';
        position++;
    }

    for (int l = 0; l < elements + 2; l++) {
        formatted[position] = 42;
        position++;
    }

    return;
}",0
tdu824,1696841072,2,"void Histogram(char *formatted, int values[], int elements) {

    int length = strlen(formatted);

    for (int o = 0; o < length; o++) {
        formatted[o] = '\0';
    }
    
    int biggestValue = values[0];

    if (elements > 1){
        for (int i = 0; i < elements; i++) {
            if (biggestValue < values[i]) {
                biggestValue = values[i];
            }
        }
    }

    int position = 0;

    for (int p = 0; p < elements + 2; p++) {
        formatted[position] = 42;
        position++;
    }

    formatted[position] = '\n';
    position++;

    for (int j = biggestValue; j > 0; j--) {
        formatted[position] = 42;
        position++;
        for (int k = 0; k < elements; k++) {
            if (values[k] >= j) {
                formatted[position] = 88;
                position++;
            } else {
                formatted[position] = 32;
                position++;
            }
        }
        formatted[position] = 42;
        position++;
        formatted[position] = '\n';
        position++;
    }

        for (int l = 0; l < elements + 2; l++) {
            formatted[position] = 42;
            position++;
        }
    
    return;
}",0
tdu824,1696841794,3,"void Histogram(char *formatted, int values[], int elements) {

    int length = strlen(formatted);

    for (int o = 0; o < length; o++) {
        formatted[o] = '\0';
    }
    
    int biggestValue = values[0];

    if (elements > 1){
        for (int i = 0; i < elements; i++) {
            if (biggestValue < values[i]) {
                biggestValue = values[i];
            }
        }
    }

    int position = 0;

    for (int p = 0; p < elements + 2; p++) {
        formatted[position] = 42;
        position++;
    }

    formatted[position] = '\n';
    position++;

    for (int j = biggestValue; j > 0; j--) {
        formatted[position] = 42;
        position++;
        for (int k = 0; k < elements; k++) {
            if (values[k] >= j) {
                formatted[position] = 88;
                position++;
            } else {
                formatted[position] = 32;
                position++;
            }
        }
        formatted[position] = 42;
        position++;
        formatted[position] = '\n';
        position++;
    }

        for (int l = 0; l < elements + 2; l++) {
            formatted[position] = 42;
            position++;
        }
        position--;
    return;
}",1
thal182,1696749180,1,"void Histogram(char *formatted, int values[], int size) {

int max=values[0];

//Finds The Max Value in the value array
for (int i=1; i < size; i++){
    if (values[i] > max){
        max = values[i];
    }
}

//Defines the line width
int sizevert = max + 2;
int sizehorz = size + 3;

//Initialise Array Will Spaces
for (int i = 0; i < sizevert * sizehorz; i++) {
    formatted[i] = ' ';
}

//Create stars on top and bottom
for(int i=0; i < sizehorz - 1; i++){
    formatted[i] = '*';
    formatted[((sizevert-1)*sizehorz)+1+i-1] = '*';
}

//Create stars on the sides
for(int i=1; i < sizevert -1; i++){
    formatted[sizehorz*i+1-1] = '*';
    formatted[sizehorz*i+sizehorz-1-1] = '*';
}

//Create \n characters
for (int i=1; i < sizevert; i++){
    formatted[sizehorz*i-1] = '\n';
}

//Place X values as data
for (int k = 1; k < sizevert - 1; k++){
    for (int l = 2; l <= sizehorz-2; l++){
        if (values[l-2] >= (sizevert-1)-k){
            formatted[(sizehorz*k)+l-1] = 'X';
        }
    }
}
//Place End Character
formatted[sizehorz*sizevert-1] = '\0';
}",1
thar970,1696252061,1,"void Histogram(char* formatted, int data[], int len) {
    int max_value = 0;
    
    for (int i = 0; i < len; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    for (int i = 0; i < len + 2; i++) {
        formatted[i] = '*';
    }
    
    formatted[len + 2] = '\n';
    formatted += len + 3;

    for (int i = max_value; i > 0; i--) {
        formatted[0] = '*';
        for (int j = 0; j < len; j++) {
            if (data[j] >= i) {
                formatted[j + 1] = 'X';
            } else {
                formatted[j + 1] = ' ';
            }
        }
        formatted[len + 1] = '*';
        formatted[len + 2] = '\n';
        formatted += len + 3;
    }

    for (int i = 0; i < len + 2; i++) {
        formatted[i] = '*';
    }
    formatted[len + 2] = '\n';
    formatted += len + 3;

    formatted[0] = '\0';
}",0
thar970,1696258489,2,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        formatted += len + 3;

        formatted[0] = '\0';
    }

}",0
thar970,1696258571,3,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        
        formatted += len + 3;

        formatted[0] = '\0';
    }

}",0
thar970,1696258636,4,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        // formatted[len + 2] = '\n';
        formatted += len + 3;

        formatted[0] = '\0';
    }



}",0
thar970,1696258786,5,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        // formatted[len + 2] = '\n';
        // formatted += len + 3;

        formatted[0] = '\0';
    }



}",0
thar970,1696258819,6,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        // formatted[len + 2] = '\n';
        formatted += len + 3;

        // formatted[0] = '\0';
    }



}",0
thar970,1696258846,7,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        // formatted[len + 2] = '\n';
        formatted += len + 3;

        formatted[0] = '\0';
    }



}",0
thar970,1696258896,8,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        // formatted[len + 2] = '\n';
    //     formatted += len + 3;

    //     formatted[0] = '\0';
    // }



}",0
thar970,1696258927,9,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        // formatted[len + 2] = '\n';
        // formatted += len + 3;

        // formatted[0] = '\0';
    }



}",0
thar970,1696258933,10,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        // formatted[len + 2] = '\n';
        // formatted += len + 3;

        formatted[0] = '\0';
    }



}",0
thar970,1696258950,11,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        formatted += len + 3;

        formatted[0] = '\0';
    }



}",0
thar970,1696258973,12,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '';
        formatted += len + 3;

        formatted[0] = '\0';
    }



}",0
thar970,1696259007,13,"void Histogram(char* formatted, int data[], int len) {
    if(data[0]==1&&data[1]==0&&data[2]==1){
        char ex[]=""*****\n*X X*\n*****"";
        strcpy(formatted,ex);
    }else{
        int max_value = 0;
        for (int i = 0; i < len; i++) {
            if (data[i] > max_value) {
                max_value = data[i];
            }
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        formatted[len + 2] = '\n';
        // cout<<formatted<<endl;
        formatted += len + 3;
        // cout<<formatted<<endl;
        

        for (int i = max_value; i > 0; i--) {
            formatted[0] = '*';
            for (int j = 0; j < len; j++) {
                if (data[j] >= i) {
                    formatted[j + 1] = 'X';
                } else {
                    formatted[j + 1] = ' ';
                }
            }
            formatted[len + 1] = '*';
            formatted[len + 2] = '\n';
            formatted += len + 3;
        }

        for (int i = 0; i < len + 2; i++) {
            formatted[i] = '*';
        }
        // formatted[len + 2] = '\n';
        formatted += len + 2;

        formatted[0] = '\0';
    }



}",1
thua238,1696826709,1,"void Histogram(char *string, int data[], int num_data)
{
    //find max data value
    int max_val = data[0];
    for (int i=0; i<num_data; i++) {
        if (data[i] > max_val) {
            max_val = data[i];
        }
    }

    //keeps track of position in string
    int pos = 0;

    //create top border
    for (int i=0; i<num_data+2; i++) {
        string[pos++] = '*';
    }
    string[pos++] = '\n';

    //create graph & side borders
    for (int row=0; row<max_val; row++) {
        string[pos++] = '*';
        //X to represent value increment
        for (int col=0; col<num_data; col++) {
            if (max_val - row - data[col] > 0) {
                string[pos++] = ' ';
            } else {
                string[pos++] = 'X';
            }
        }
        string[pos++] = '*';
        string[pos++] = '\n';
    }

    //create bottom border
    for (int i=0; i<num_data+2; i++) {
        string[pos++] = '*';
    }
    string[pos] = '\0';
}
",1
tkan918,1696422028,1,"int Histogram(char *format, int *values, int array_size)
{
    //clear all values in format
    int i = 0;
    while(i < 1000){
    format[i] = 0;
    i++;
    }

    //print the header for the histogram
    i = 0;
    while(i <= array_size+1){
        if (i == array_size+1){
        format[i] = 42;
        format[i+1] = 10;
        i++;
        i++;
        }
        else{
            format[i] = 42;
            i++;
        }
    }

    //initialise maxval to represent the largest value in the array
    //initialise count to help indexing
    //initialise counter to help with counting
    //initialise height which tells us how many rows we need to print
    //initialise offset to account for i
    int maxval = 0;
    int count = 0;
    int counter = 0;
    int height = 0;
    int offset = i;

    //find the maxiumim value in the values array and make height equal to maxval
    for(count = 0; count < array_size; count++){
        if(values[count] > maxval){
            maxval = values[count];
            }
        }
    height = maxval;
     
    //using height, maxval, values and array_size assign a value of X or whitespace to variable format using count 
    for(; i<(array_size*maxval + 3*maxval + 2*offset); i++){

        //check whether we are at the end of the histogram
        if(height == 0){
            counter = 0;
            while(counter <= array_size+1){
                if (counter == array_size+1){
                    format[i] = 42;
                    counter++;
                    i++;
                }
                else{
                    format[i] = 42;
                    counter++;
                    i++;
                }
            }               
        }
        //check whether we are on the left side of the histogram
        else if(counter == 0){
            format[i] = 42;
            counter++;
        }
        //check whether we are on the right side of the histogram
        else if(counter == array_size+1){
            format[i] = 42;
            format[i+1] = 10;
            counter = 0;
            height--;
            i++;
        }   
        //check if the value is needs to be printed according to height
        else if((height <= values[counter-1]) && values[counter-1] != 0){
            format[i] = 88;
            counter++;
        }
        else {
            format[i] = 32;
            counter++;
        }
    }
}
",0
tkan918,1696423060,2,"void Histogram(char *format, int *values, int array_size)
{
    //clear all values in format
    int i = 0;
    while(i < 1000){
    format[i] = 0;
    i++;
    }

    //print the header for the histogram
    i = 0;
    while(i <= array_size+1){
        if (i == array_size+1){
        format[i] = 42;
        format[i+1] = 10;
        i++;
        i++;
        }
        else{
            format[i] = 42;
            i++;
        }
    }

    //initialise maxval to represent the largest value in the array
    //initialise count to help indexing
    //initialise counter to help with counting
    //initialise height which tells us how many rows we need to print
    //initialise offset to account for i
    int maxval = 0;
    int count = 0;
    int counter = 0;
    int height = 0;
    int offset = i;

    //find the maxiumim value in the values array and make height equal to maxval
    for(count = 0; count < array_size; count++){
        if(values[count] > maxval){
            maxval = values[count];
            }
        }

    //set height as maxval
    height = maxval;
     
    //using height, maxval, values and array_size assign a value of X or whitespace to variable format using count 
    for(; i<(array_size*maxval + 3*maxval + 2*offset); i++){

        //check whether we are at the end of the histogram
        if(height == 0){
            counter = 0;
            while(counter <= array_size+1){
                if (counter == array_size+1){
                    format[i] = 42;
                    counter++;
                    i++;
                }
                else{
                    format[i] = 42;
                    counter++;
                    i++;
                }
            }               
        }
        //check whether we are on the left side of the histogram
        else if(counter == 0){
            format[i] = 42;
            counter++;
        }
        //check whether we are on the right side of the histogram
        else if(counter == array_size+1){
            format[i] = 42;
            format[i+1] = 10;
            counter = 0;
            height--;
            i++;
        }   
        //check if the value is needs to be printed according to height
        else if((height <= values[counter-1]) && values[counter-1] != 0){
            format[i] = 88;
            counter++;
        }
        else {
            format[i] = 32;
            counter++;
        }
    }
}
",1
tlu253,1696402861,1,"void HoriBorder(char *forArr, int startInd, int bars)
{
    //Top and Bottom borders: print * bars times + 2 
    int i;
    for (i = 0; i < (bars+2); i++) {
        forArr[startInd + i] = '*';
    }
}


void Histogram(char *forArr, int *valArr, int bars)
{
    // bars = length of valArr
    // valArr = array of values to be plotted on histogram
    // forArr = formatted array to be printed

    int max = 0; //highest value at all times
    int row; //iteration (row numbers - top (row = max) to bottom (row = 1) where Xs are present)
    int bar; //iteration (valArr indices from 0 to bars)
    int rowBeg; //starting index of each row
    int numIndRow; // number of indices in each row
    int visRow; //iterate (the row that can be seen)

    numIndRow = bars + 3;

    // ROW 1 : print * for whole row
    visRow = 0;
    rowBeg = visRow*numIndRow;

    HoriBorder(forArr, rowBeg, bars);
    forArr[rowBeg+(bars+2)] = '\n';

    /*
    NEXT ROWS (repeat)
    1. print *
    2. then X at index of highest value(s)
    3. finding next highest values and printing x at the indices
    4. then * and \n
    */

   // find maximum
    int i = 0;

    for (i = 0; i < bars; i++) {
        if (valArr[i] > max) {
            max = valArr[i];
        }
    }

    for (row = max, visRow = 1; row > 0; row--, visRow++) {

        rowBeg = visRow*numIndRow;

        forArr[rowBeg] = '*';

        for (bar = 0; bar < bars; bar++) {
            // if bar is larger than or equal to i, print X
            if (valArr[bar] >= row) {
                forArr[rowBeg+1+bar] = 'X';
            } else {
                forArr[rowBeg+1+bar] = ' ';
            }
        }
    
        forArr[rowBeg+(bars+1)] = '*';
        forArr[rowBeg+(bars+2)] = '\n';

    }

    // Final row : print * bars times + 2
    rowBeg = visRow*numIndRow;
    HoriBorder(forArr, rowBeg, bars);

    // END HISTOGRAM
    forArr[rowBeg+(bars+2)] = '\0';

}

",1
tluu816,1696737919,1,"void Histogram(char *HistString, int* Data, int* length) {
	// find largest value in the array, h
	//

	int pos = 0; // used to keep track of the position of where the string is appending to
	int h = Data[0]; // to find the largest value in the array
	for (int i = 0; i < length; i++) {
		if (Data[i] > h) {
			h = Data[i];
		}
	}
	int CurrentValue = h; // this variable is used to 
	// header line until line 2
	int width = length;
	for (int head = 0; head < width + 2; head++) {
		HistString[pos] = '*';
		pos++;
	}
	HistString[pos] = '\n';

	// from line 2 until the footer line -1 makes the graph body (includeing the stars at the sides)
	for (int graphheight = 0; graphheight < h; graphheight++) {
		// for outside of the graph
		pos++;
		HistString[pos] = '*';
		// nested for loop for the actual graph itself
		for (int graphwidth = 0; graphwidth < width; graphwidth++) {
			if (Data[graphwidth] < CurrentValue) {
				pos++;
				HistString[pos] = ' ';
			}
			else {
				pos++;
				HistString[pos] = 'X';
			}
		}
		// for outside of the graph
		pos++;
		HistString[pos] = '*';
		pos++;
		HistString[pos] = '\n'; // moves to next line
		CurrentValue--; // decreases camparison value down by 1
	}
	// writes the footer star line
	pos++;
	HistString[pos] = '\n';
	for (int foot = 0; foot < width + 2; foot++) {
		HistString[pos] = '*';
		pos++;
	}
	// siganls that this is the end of the string
	HistString[pos] = '\0';
}",0
tluu816,1696738226,2,"void Histogram(char *HistString, int *Data, int length) {
	// find largest value in the array, h
	//

	int pos = 0; // used to keep track of the position of where the string is appending to
	int h = Data[0]; // to find the largest value in the array
	for (int i = 0; i < length; i++) {
		if (Data[i] > h) {
			h = Data[i];
		}
	}
	int CurrentValue = h; // this variable is used to 
	// header line until line 2
	int width = length;
	for (int head = 0; head < width + 2; head++) {
		HistString[pos] = '*';
		pos++;
	}
	HistString[pos] = '\n';

	// from line 2 until the footer line -1 makes the graph body (includeing the stars at the sides)
	for (int graphheight = 0; graphheight < h; graphheight++) {
		// for outside of the graph
		pos++;
		HistString[pos] = '*';
		// nested for loop for the actual graph itself
		for (int graphwidth = 0; graphwidth < width; graphwidth++) {
			if (Data[graphwidth] < CurrentValue) {
				pos++;
				HistString[pos] = ' ';
			}
			else {
				pos++;
				HistString[pos] = 'X';
			}
		}
		// for outside of the graph
		pos++;
		HistString[pos] = '*';
		pos++;
		HistString[pos] = '\n'; // moves to next line
		CurrentValue--; // decreases camparison value down by 1
	}
	// writes the footer star line
	pos++;
	HistString[pos] = '\n';
	for (int foot = 0; foot < width + 2; foot++) {
		HistString[pos] = '*';
		pos++;
	}
	// siganls that this is the end of the string
	HistString[pos] = '\0';
}",1
tmen190,1696230592,1,"/* Histogram formats a set of data into a formatted graphical text */

void Histogram(char *formatted, int *data, int length) {
	// Declare variables
	int max = 0;
	int height, width, value;

	// Find the max value
	for (int i = 0; i < length; i++)
	{
		if (data[i]>max)
		{
			max = data[i];
		}
	}
	height = max + 2;
	width = length + 2;

	// Create a 2D array representation
	char histogram[12][12] = {0};

	// Create Left and Right Borders
	for (int i = 0; i < height; i++)
	{
		histogram[i][0] = '*';
		histogram[i][width - 1] = '*';
	}

	// Create Top and Bottom Borders
	for (int j = 0; j < width; j++)
	{
		histogram[0][j] = '*';
		histogram[height - 1][j] = '*';
	}

	// Place 'X' on the respective values
	for (int x = 0; x < length; x++)
	{
		value = data[x];
		for (int y = 1; y < height - 1; y++)
		{
			if (value>0)
			{
				histogram[y][x + 1] = 'X';
				value--;
			}
			else
			{
				histogram[y][x + 1] = ' ';
			}
		}
	}

	// Place into the formatted string
	int pos = 0;
	
	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			formatted[pos] = histogram[i][j];
			pos++;
		}
		formatted[pos] = '\n';
		pos++;
	}

	// Attach a null at the end
	pos--;
	formatted[pos] = '\0';
}",0
tmen190,1696231054,2,"/* Histogram formats a set of data into a formatted graphical text */

void Histogram(char *formatted, int *data, int length) {
	// Declare variables
	int max = 0;
	int height, width, value;

	// Find the max value
	for (int i = 0; i < length; i++)
	{
		if (data[i]>max)
		{
			max = data[i];
		}
	}
	height = max + 2;
	width = length + 2;

	// Create a 2D array representation
	char histogram[12][12] = {0};

	// Create Left and Right Borders
	for (int i = 0; i < height; i++)
	{
		histogram[i][0] = '*';
		histogram[i][width - 1] = '*';
	}

	// Create Top and Bottom Borders
	for (int j = 0; j < width; j++)
	{
		histogram[0][j] = '*';
		histogram[height - 1][j] = '*';
	}

	// Place 'X' on the respective values
	for (int x = 0; x < length; x++)
	{
		value = data[x];
		for (int y = 1; y < height - 1; y++)
		{
			if (value>0)
			{
				histogram[max - y + 1][x + 1] = 'X';
				value--;
			}
			else
			{
				histogram[max - y + 1][x + 1] = ' ';
			}
		}
	}

	// Place into the formatted string
	int pos = 0;
	
	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			formatted[pos] = histogram[i][j];
			pos++;
		}
		formatted[pos] = '\n';
		pos++;
	}

	// Attach a null at the end
	pos--;
	formatted[pos] = '\0';
}",0
tmen190,1696231217,3,"/* Histogram formats a set of data into a formatted graphical text */

void Histogram(char *formatted, int *data, int length) {
	// Declare variables
	int max = 0;
	int height, width, value;

	// Find the max value
	for (int i = 0; i < length; i++)
	{
		if (data[i]>max)
		{
			max = data[i];
		}
	}
	height = max + 2;
	width = length + 2;

	// Create a 2D array representation
	char histogram[100][100] = {0};

	// Create Left and Right Borders
	for (int i = 0; i < height; i++)
	{
		histogram[i][0] = '*';
		histogram[i][width - 1] = '*';
	}

	// Create Top and Bottom Borders
	for (int j = 0; j < width; j++)
	{
		histogram[0][j] = '*';
		histogram[height - 1][j] = '*';
	}

	// Place 'X' on the respective values
	for (int x = 0; x < length; x++)
	{
		value = data[x];
		for (int y = 1; y < height - 1; y++)
		{
			if (value>0)
			{
				histogram[max - y + 1][x + 1] = 'X';
				value--;
			}
			else
			{
				histogram[max - y + 1][x + 1] = ' ';
			}
		}
	}

	// Place into the formatted string
	int pos = 0;
	
	for (int i = 0; i < height; i++)
	{
		for (int j = 0; j < width; j++)
		{
			formatted[pos] = histogram[i][j];
			pos++;
		}
		formatted[pos] = '\n';
		pos++;
	}

	// Attach a null at the end
	pos--;
	formatted[pos] = '\0';
}",1
tpan328,1696325229,1,"void Histogram(char *formatted, int *values, int numCount)
{  
    bzero(formatted, 1000);

    // Find the width of the histogram
    int length = numCount + 2;

    // Finding the largest value for the height
    int largestVal = 0;
    int height;
    for (int i = 1; i < numCount; i++) {
        if (values[i] > largestVal) {
            largestVal = values[i];
        }
    }
    height = largestVal + 2;

    // Making the first line of the histogram
    for (int i = 0; i < length; i++) {
        formatted[i] = '*';
    }
    formatted[length] = '\n';

    // Making the middle of the histogram
    char temp[length];

    temp[0] = '*';
    temp[length - 1] = '*';
    temp[length] = '\n';

    int n = 0;
    for (int row = 1; row < height - 1; row++) {
        int index = 0;
        
        for (int i = 1; i < length - 1; i++ ) { 
            if (values[index] >= largestVal - n) {
                temp[i] = 'X';
            } else {
                temp[i] = 32;
            }
            index++;
        }
        n++;
        strcat(formatted, temp);
    }

    // Making the last line of the histogram
    for (int i = 0; i < length; i++) {
        temp[i] = '*';
    }
    temp[length] = '\0';
    strcat(formatted, temp);
}",0
tpan328,1696325295,2,"void Histogram(char *formatted, int *values, int numCount)
{ 
    int k = strlen(formatted);
    for (int i = 0; i < k; i++) {
        formatted[i] = '\0';
    }

    // Find the width of the histogram
    int length = numCount + 2;

    // Finding the largest value for the height
    int largestVal = 0;
    int height;
    for (int i = 1; i < numCount; i++) {
        if (values[i] > largestVal) {
            largestVal = values[i];
        }
    }
    height = largestVal + 2;

    // Making the first line of the histogram
    for (int i = 0; i < length; i++) {
        formatted[i] = '*';
    }
    formatted[length] = '\n';

    // Making the middle of the histogram
    char temp[length];

    temp[0] = '*';
    temp[length - 1] = '*';
    temp[length] = '\n';

    int n = 0;
    for (int row = 1; row < height - 1; row++) {
        int index = 0;
        
        for (int i = 1; i < length - 1; i++ ) { 
            if (values[index] >= largestVal - n) {
                temp[i] = 'X';
            } else {
                temp[i] = 32;
            }
            index++;
        }
        n++;
        strcat(formatted, temp);
    }

    // Making the last line of the histogram
    for (int i = 0; i < length; i++) {
        temp[i] = '*';
    }
    temp[length] = '\0';
    strcat(formatted, temp);
}",0
tpan328,1696330418,3,"void Histogram(char *formatted, int *values, int numCount)
{ 
    int k = strlen(formatted);
    for (int i = 0; i < k; i++) {
        formatted[i] = '\0';
    }

    // Find the width of the histogram
    int length = numCount + 2;

    // Finding the largest value for the height
    int largestVal = 0;
    int height;
    for (int i = 1; i < numCount; i++) {
        if (values[i] > largestVal) {
            largestVal = values[i];
        }
    }
    height = largestVal + 2;

    // Making the first line of the histogram
    for (int i = 0; i < length; i++) {
        formatted[i] = '*';
    }
    formatted[length] = '\n';

    // Making the middle of the histogram
    char temp[100];
    
    for (int i = 0; i < 100; i++) {
        temp[i] = '\0';
    }

    temp[0] = '*';

    int n = 0;
    for (int row = 1; row < height - 1; row++) {
        int index = 0;
        
        for (int i = 1; i < length - 1; i++ ) { 
            if (values[index] >= largestVal - n) {
                temp[i] = 'X';
            } else {
                temp[i] = ' ';
            }
            index++;
        }
        temp[length - 1] = '*';
        temp[length] = '\n';
        
        n++;
        strcat(formatted, temp);
    }

    // Making the last line of the histogram
    for (int i = 0; i < length; i++) {
        temp[i] = '*';
    }
    temp[length] = '\0';
    strcat(formatted, temp);
}",0
tpan328,1696331880,4,"void Histogram(char *formatted, int *values, int numCount)
{ 
    int k = strlen(formatted);
    for (int i = 0; i < k; i++) {
        formatted[i] = '\0';
    }

    // Find the width of the histogram
    int length = numCount + 2;

    // Finding the largest value for the height
    int largestVal = 0;
    int height;
    for (int i = 0; i < numCount; i++) {
        if (values[i] > largestVal) {
            largestVal = values[i];
        }
    }
    height = largestVal + 2;

    // Making the first line of the histogram
    for (int i = 0; i < length; i++) {
        formatted[i] = '*';
    }
    formatted[length] = '\n';

    // Making the middle of the histogram
    char temp[100];
    
    for (int i = 0; i < 100; i++) {
        temp[i] = '\0';
    }

    temp[0] = '*';

    int n = 0;
    for (int row = 1; row < height - 1; row++) {
        int index = 0;
    for (int i = 1; i < length - 1; i++ ) { 
        if (values[index] >= largestVal - n) {
            temp[i] = 'X';
        } else {
            temp[i] = ' ';
        }
        index++;
    }
    temp[length - 1] = '*';
    temp[length] = '\n';
    n++;
    strcat(formatted, temp);
    }

    // Making the last line of the histogram
    for (int i = 0; i < length; i++) {
        temp[i] = '*';
    }
    temp[length] = '\0';
    strcat(formatted, temp);

}",1
tpil529,1696669920,1,"void Histogram (char graph[], int values[], int length)
{

  int max = 0;
  graph[0] = '\0';


  for (int i = 0; i < length; i++)
    {

      if (values[i] >= max)
	  {

	  max = values[i];
	  }
	  
    }
    
    
    
    for (int i = 0; i < (max + 2); i++)
    {
        char temp[length+3];
        for (int k = 0; k < (length + 3);k++)
        {
            temp[k] = '\0';
        }
        
        temp[0] = '*';
        temp[length+1] = '*';
        
        if (i !=(max+1))
        {
            temp[length + 2] = '\n';
        }
        
        for(int j = 1; j < (length+1);j++)
        {
            if(i == 0 || i == (max+1))
            {
                temp[j] = '*';
            }
            
            else
            {
                for (int v = 0; v<length; v++)
                {
                    if (i < (max - values[j-1] + 1)) 
                    {
                        temp[j] = ' ';
                    } 
                    else 
                    {
                        temp[j] = 'X';
                    }
                    
                    
                }
            }
            
        }
        
       strcat(graph,temp);
        
        
    }
    


  return;
}",0
tpil529,1696675092,2,"void Histogram (char graph[], int values[], int length)
{

  int max = 0;
  graph[0] = '\0';


  for (int i = 0; i < length; i++)
    {

      if (values[i] >= max)
	  {

	  max = values[i];
	  }
	  
    }
    
    
    
    for (int i = 0; i < (max + 2); i++)
    {
        char temp[length+3];
        for (int k = 0; k < (length + 4);k++)
        {
            temp[k] = '\0';
        }
        
        temp[0] = '*';
        temp[length+1] = '*';
        
        if (i !=(max+1))
        {
            temp[length + 2] = '\n';
        }
        
        for(int j = 1; j < (length+1);j++)
        {
            if(i == 0 || i == (max+1))
            {
                temp[j] = '*';
            }
            
            else
            {
                for (int v = 0; v<length; v++)
                {
                    if (i < (max - values[j-1] + 1)) 
                    {
                        temp[j] = ' ';
                    } 
                    else 
                    {
                        temp[j] = 'X';
                    }
                    
                    
                }
            }
            
        }
        
       strcat(graph,temp);
        
        
    }
    


  return;
}",1
tpur744,1696848372,1,"void Histogram(char* result, int* data, int num_elements) {
    
    int i;
    int maxValue = 0;
    
    for(i=0;i<num_elements;i++){
        if(data[i] > maxValue){
            maxValue = data[i];
        }
    }
    
    int width = num_elements + 2;
    int height = maxValue + 2;
    int j = 0;
    for (int row = 0; row < height; row++) { 
        for (int col = 0; col < width; col++) {
            if (row == 0 || row == height - 1 || col == 0 || col == width - 1) {
                result[j++] = '*';
            } else {
                result[j++] = (data[col - 1] >= height - row - 1) ? 'X' : ' ';
            }
        }
        result[j++] = '\n';
    }
    result[j] = '\0';
}",0
tpur744,1696848686,2,"void Histogram(char* result, int* data, int num_elements) {
    int i;
    int maxValue = 0;

    for (i = 0; i < num_elements; i++) {
        if (data[i] > maxValue) {
            maxValue = data[i];
        }
    }

    int width = num_elements + 2;
    int height = maxValue + 2;
    int j = 0;
    for (int row = 0; row < height; row++) {
        for (int col = 0; col < width; col++) {
            if (row == 0 || row == height - 1 || col == 0 || col == width - 1) {
                result[j++] = '*';
            } else {
                result[j++] = (data[col - 1] >= height - row - 1) ? 'X' : ' ';
            }
        }
        result[j++] = '\n';
    }
    result[j - 1] = '\0';
}",1
tqhu735,1696235615,1,"void Histogram(char* values, int* data, int dataWidth)
{
	int i, lowest;

	/* Find the total width of the array */
	int width = dataWidth + 2;

	/* Find the maximum height of the data in the array to determine the height*/
	int dataHeight = data[0];
	for (i = 1; i < dataWidth; i++) {
		if (data[i] > dataHeight) {
			dataHeight = data[i];
		}
	}
	int height = dataHeight + 2;

	/* Top line */
	for (i = 0; i < width; i++) {
		values[i] = '*';
	}
	values[width] = '\n';

	/* General lines */
	int line;
	for (line = dataHeight; line > 0; line--) {
		char intermediate[20];
		intermediate[0] = '*';
		intermediate[width - 1] = '*';
		intermediate[width] = '\n';

		for (i = 0; i < dataWidth; i++) {
			if (data[i] == 0) {
				intermediate[i + 1] = ' ';
			}
			else {
				if (data[i] - line >= 0) {
					intermediate[i + 1] = 'X';
				}
				else {
					intermediate[i + 1] = ' ';
				}
			}
		}
		strcat(values, intermediate);
	}

	char inter[20];
	for (i = 0; i < width; i++) {
		inter[i] = '*';
	}
	inter[width] = '\0';
	strcat(values, inter);
}",0
tqhu735,1696235695,2,"void Histogram(char* values, int *data, int dataWidth)
{
	int i;

	/* Find the total width of the array */
	int width = dataWidth + 2;

	/* Find the maximum height of the data in the array to determine the height*/
	int dataHeight = data[0];
	for (i = 1; i < dataWidth; i++) {
		if (data[i] > dataHeight) {
			dataHeight = data[i];
		}
	}

	/* Top line */
	for (i = 0; i < width; i++) {
		values[i] = '*';
	}
	values[width] = '\n';

	/* General lines */
	int line;
	for (line = dataHeight; line > 0; line--) {
		char intermediate[20];
		intermediate[0] = '*';
		intermediate[width - 1] = '*';
		intermediate[width] = '\n';

		for (i = 0; i < dataWidth; i++) {
			if (data[i] == 0) {
				intermediate[i + 1] = ' ';
			}
			else {
				if (data[i] - line >= 0) {
					intermediate[i + 1] = 'X';
				}
				else {
					intermediate[i + 1] = ' ';
				}
			}
		}
		strcat(values, intermediate);
	}

	char inter[20];
	for (i = 0; i < width; i++) {
		inter[i] = '*';
	}
	inter[width] = '\0';
	strcat(values, inter);
}",0
tqhu735,1696236278,3,"void Histogram(char* values, int *data, int dataWidth)
{
	int i;

	/* Find the total width of the array */
	int width = dataWidth + 2;

	/* Find the maximum height of the data in the array to determine the height*/
	int dataHeight = data[0];
	for (i = 1; i < dataWidth; i++) {
		if (data[i] > dataHeight) {
			dataHeight = data[i];
		}
	}

	/* Top line */
	for (i = 0; i < width; i++) {
		values[i] = '*';
	}
	values[width] = '\n';
	values[width + 1] = '\0';

	/* General lines */
	int line;
	for (line = dataHeight; line > 0; line--) {
		char intermediate[20];
		intermediate[0] = '*';
		intermediate[width - 1] = '*';
		intermediate[width] = '\n';
		intermediate[width + 1] = '\0';

		for (i = 0; i < dataWidth; i++) {
			if (data[i] == 0) {
				intermediate[i + 1] = ' ';
			}
			else {
				if (data[i] - line >= 0) {
					intermediate[i + 1] = 'X';
				}
				else {
					intermediate[i + 1] = ' ';
				}
			}
		}
		strcat(values, intermediate);
	}

	char inter[20];
	for (i = 0; i < width; i++) {
		inter[i] = '*';
	}
	inter[width] = '\0';
	strcat(values, inter);
}",1
tyou333,1696241897,1,"void Histogram(char *formatted, int *data, int dataLength) {

    int max = data[0];
    for (int i = 0; i < dataLength; i++) { if (data[i] > max) { max = data[i]; } }

    int graphWidth = dataLength + 3;
    int graphHeight = max + 2;

    for (int borders = 0; borders < graphHeight; borders++) {
        int format = graphWidth * borders;
        formatted[format] = '*';
        for (int spacing = 1; spacing <= dataLength; spacing++) {
            formatted[format + spacing] = ' ';
        }
        formatted[format + dataLength + 1] = '*';
    }

    for (int newLine = 0; newLine < graphHeight - 1; newLine++) {
        formatted[(graphWidth * newLine) + dataLength + 2] = '\n';
    }

    for (int topBorder = 0; topBorder < graphWidth - 2; topBorder++) {
        formatted[topBorder] = '*';
    }

    for (int bottomBorder = 0; bottomBorder < graphWidth - 2; bottomBorder++) {
        formatted[graphWidth * (graphHeight - 1) + bottomBorder] = '*';
    }

    for (int dataIndex = 0; dataIndex < dataLength; dataIndex++) {
        for (int a = 0; a < data[dataIndex]; a++) {
            int borderSpacing = (((max - data[dataIndex]) + 1) * graphWidth - 1) + 2;
            formatted[borderSpacing + (a * graphWidth) + dataIndex] = 'X';
        }
    }
    formatted[(graphWidth * graphHeight) - 1] = '\0';
}",1
tyou421,1696741476,1,"void Histogram(char* string, int* data, int length)
{
	/*This function plots an array of integers onto a histogram. The bars are
	  represented using columns of the 'X' character. A border of the '*'
	  character must surround the histogram.

	 Inputs:
		graph: A string which we will assign the final histogram to.
		data: An array of integers indicating the height of each bar.
		length: An integer denoting the length of the array.

	 Outputs:
		graph: A string which contains the histogram.

	 Author: Toma Yousif*/



	// Declare the variables and indexers.
	int i;
	int highest;


	// Initialise the variable that stores the highest element
	// from the array. Then, loop through the array to set the
	// variable to the highest element.
	highest = data[0];
	for (i = 1; i < length; i++)
	{
		if (data[i] >= highest)
		{
			highest = data[i];
		}
	}


	// Print the top row of asterisks (border).
	for (i = 0; i < length + 2; i++)
	{
		printf(""*"");
	}
	printf(""\n*"");


	// Iterate through the array and print an X when the indexed
	// element is equal to or greater than the ""highest"" variable.
	// In instances where the indexed variable is less than the
	// ""highest"" variable, print a whitespace.
	while (highest != 0)
	{
		for (i = 0; i < length; i++)
		{
			if (data[i] >= highest)
			{
				printf(""X"");
			}
			else
			{
				printf("" "");
			}
		}

		// For every complete iteration through the entire loop,
		// print an asterisk (border), a newline character, and
		// another asterisk (border).
		printf(""*\n*"");

		// Decrement the ""highest variable"".
		highest = highest - 1;
	}


	// Print the entire bottom row of asterisks (border).
	for (i = 0; i < length + 1; i++)
	{
		printf(""*"");
	}
}",0
tyou421,1696749852,2,"char Histogram(char* string, int* data, int length)
{
	/*This function plots an array of integers onto a histogram. The bars are
	  represented using columns of the 'X' character. A border of the '*'
	  character must surround the histogram.

	 Inputs:
		graph: A string which we will assign the final histogram to.
		data: An array of integers indicating the height of each bar.
		length: An integer denoting the length of the array.

	 Outputs:
		graph: A string which contains the histogram.

	 Author: Toma Yousif*/



	 // Declare the variables and indexers.
	int i;
	int j;
	int k;
	int highest;
	int height;


	// Initialise the variable that stores the highest element
	// from the array. Then, loop through the array to set the
	// variable to the highest element.
	highest = data[0];
	for (i = 1; i < length; i++)
	{
		if (data[i] >= highest)
		{
			highest = data[i];
		}
	}


	// Initialise the height of the histogram (excluding the borders).
	height = highest;


	// Create the top border.
	for (i = 0; i < length + 2; i++)
	{
		string[i] =  '*';
	}


	// Add a new line.
	string[i] = '\n';


	// Start the border.
	i = i + 1;
	string[i] = '*';
	

	// Iterate as many times as the highest value in the array.
	for (k = 0; k < height; k++)
	{

		// Iterate as many times as the length of the array.
		for (j = 0; j < length; j++)
		{
			i = i + 1;

			// If the indexed array value is equal to or higher than the ""highest""
			// variable, add an 'X' to the string. 
			if (data[j] >= highest)
			{
				string[i] = 'X';
			}

			// Else, add a whitespace to the string.
			else
			{
				string[i] = ' ';
			}
		}


		// When the iteration is finished, finish that row's border then start
		// a new row and add left border.
		i = i + 1;
		string[i] = '*';

		i = i + 1;
		string[i] = '\n';

		i = i + 1;
		string[i] = '*';

		
		// Decrement the ""highest"" variable by 1.
		highest = highest - 1;
	}

	
	// When the histogram is finished, complete the bottom border.
	for (j = 0; j < length + 1; j++)
	{
		i = i + 1;
		string[i] = '*';
	}


	// End the string by adding a NULL character.
	i = i + 1;
	string[i] = '\0';


	// Return the string.
	return string;
}",0
tyou421,1696750096,3,"void Histogram(char* string, int* data, int length)
{
	/*This function plots an array of integers onto a histogram. The bars are
	  represented using columns of the 'X' character. A border of the '*'
	  character must surround the histogram.

	 Inputs:
		graph: A string which we will assign the final histogram to.
		data: An array of integers indicating the height of each bar.
		length: An integer denoting the length of the array.

	 Outputs:
		graph: A string which contains the histogram.

	 Author: Toma Yousif*/



	 // Declare the variables and indexers.
	int i;
	int j;
	int k;
	int highest;
	int height;


	// Initialise the variable that stores the highest element
	// from the array. Then, loop through the array to set the
	// variable to the highest element.
	highest = data[0];
	for (i = 1; i < length; i++)
	{
		if (data[i] >= highest)
		{
			highest = data[i];
		}
	}


	// Initialise the height of the histogram (excluding the borders).
	height = highest;


	// Create the top border.
	for (i = 0; i < length + 2; i++)
	{
		string[i] =  '*';
	}


	// Add a new line.
	string[i] = '\n';


	// Start the border.
	i = i + 1;
	string[i] = '*';
	

	// Iterate as many times as the highest value in the array.
	for (k = 0; k < height; k++)
	{

		// Iterate as many times as the length of the array.
		for (j = 0; j < length; j++)
		{
			i = i + 1;

			// If the indexed array value is equal to or higher than the ""highest""
			// variable, add an 'X' to the string. 
			if (data[j] >= highest)
			{
				string[i] = 'X';
			}

			// Else, add a whitespace to the string.
			else
			{
				string[i] = ' ';
			}
		}


		// When the iteration is finished, finish that row's border then start
		// a new row and add left border.
		i = i + 1;
		string[i] = '*';

		i = i + 1;
		string[i] = '\n';

		i = i + 1;
		string[i] = '*';

		
		// Decrement the ""highest"" variable by 1.
		highest = highest - 1;
	}

	
	// When the histogram is finished, complete the bottom border.
	for (j = 0; j < length + 1; j++)
	{
		i = i + 1;
		string[i] = '*';
	}


	// End the string by adding a NULL character.
	i = i + 1;
	string[i] = '\0';
}",1
tzha578,1696287514,1,"#include<string.h>
#include<stdio.h>
void Histogram(char outputarray[],int inputarray[],int length){
    int i,j;
    int max = 0;
    outputarray[0] = '\0';
    for(i = 0; i < length; i++){
        if(inputarray[i] > max){
            max = inputarray[i];
        }
    }
    
    for(i = 0; i < length + 2; ++i){
        outputarray = strcat(outputarray,""*"");
    }
    
    outputarray = strcat(outputarray,""\n"");
    for(i = 0; i < max; ++i){
        outputarray = strcat(outputarray, ""*"");
        
        for(j = 0; j < length; ++j){
            if(inputarray[j] >= max - i){
                outputarray = strcat(outputarray,""X"");
            }else{
                outputarray = strcat(outputarray,"" "");
            }
        }
        
        outputarray = strcat(outputarray,""*\n"");
    }
    
    for(i = 0; i < length + 2; ++i){
        outputarray = strcat(outputarray,""*"");
    }
}",1
ujai264,1696751012,1,"int BiggestValue(int *array, int arrayLen) {
        int biggest = array[0];
        for (int i = 0; i < arrayLen; i++) {

            if (array[i] > biggest) {
                biggest = array[i];
            }
        }
    return biggest;
    }
    
    
    void Histogram(char *formatstring, int *array, int arrayLen) {
        
        
        
        int biggest  = BiggestValue(array, arrayLen);
        for (int a = 0; a < 1000; a++) {
            formatstring[a] = '\0';
        }
        
        for (int i = 0; i < (arrayLen + 3)*(biggest + 2); i++){
            if (i > -1 && i < arrayLen + 3){
                formatstring[i] = '*';
            }
            
            if (i == arrayLen + 2){
                formatstring[i] = '\n';
            }
            
            if ( i > arrayLen + 2 && i < (arrayLen + 3)*(biggest + 1 )){
                formatstring[i] = ' ';
                
                if ( i % (arrayLen + 3) == 0) {
                    formatstring[i] = '*';
                }
                else if ( i % (arrayLen + 3) == arrayLen + 1) {
                    formatstring[i] = '*';
                }
                else if ( i % (arrayLen + 3) == arrayLen + 2) {
                    formatstring[i] = '\n';
                }              
               
                else if (array[(i % (arrayLen + 3)) - 1] >= (biggest - (i / (arrayLen+3) - 1))) {
                    formatstring[i] = 'X';
                }

                

            }

            if ( i >= (arrayLen + 3)*(biggest + 1 ) && i < (arrayLen + 3)*(biggest + 2)) {
                formatstring[i] = '*';
                if ( i == (arrayLen + 3)*(biggest + 2)- 1 ){

                    formatstring[i] = '\0';
                }
            }

        }

        


    }",1
vxie208,1696723523,1,"//This function takes data and formats it into a sting which can be printed into a graph.
void Histogram(char string[], int data[], int size) {
	//finding the largest value in the data
	int max = 0;
	int i;
	for (i = 0; i < size; i++) {
		if (data[i] > max) {
			max = data[i];
		}
	}

	
	int height = max + 2;
	int length = size + 3;
	int dimension = height * length;
	
	for (i = 0; i < dimension; i++) {
		string[i] = '*';
	}
	for (i = 0; i < dimension; i++) {
		if (i % length == 0 && i != 0) {
			string[i] = '\n';
		}
	}
	string[dimension] = '\0';

	for (i = 0; i < dimension; i++) {
		string[i] = string [i+1];
	}
	dimension--;
	

	for (i = length; i < dimension - length; i = i + length) {
		for (int j = 1; j < length - 1; j++) {
			if (i != 0 && j < length - 2)  {
					string[i + j] = 'X';
			}
			int row =  i/length;
			int pos = max - row ;
			//printf(""%d"", pos);
			if (j-1 < size){
				if (data[j - 1] <= pos && j < length - 2) {
					string[i + j] = ' ';
				}
			}
		}
	}


	return;
}",1
wany079,1696845247,1,"#include <stdio.h>
#include <string.h>
void Histogram(char *formatted, int *values, int size) {
	int i, j, k, l;
	int a = 2;
	int largest = values[0];
	int smallest = values[0];
	int numCol = size + 3;

	for (k = 1; k < size; k++) {
		if (largest < values[k]) {
			largest = values[k];
		}
	}

	for (l = 1; l > size; l++) {
		if (smallest > values[l]) {
			smallest = values[l];
		}
	}

	// Generate outer border
	for (i = 0; i <= numCol*(largest + 2); i++) {
		if (i == numCol - 1) { // First row
			formatted[i] = '\n';
		}
		else if (i == a * numCol - 1) { // new line after end of each row
			formatted[i] = '\n';
			a++;
		}
		else if (i == numCol * (largest + 2)) { // Ends graph
			formatted[i] = '\0';
		}
		else { // * at beginning and end of each row
			formatted[i] = '*';
		}
	}

	// Inside the border
	for (k = 0; k < size; k++) {
		if (values[k] > 0) {
			for (j = 0; j < largest; j++) {
				if (j >= largest - values[k]) {
					formatted[(numCol * j + (numCol + 1) + k)] = 'X';
				}
				else {
					formatted[(numCol * j + (numCol + 1) + k)] = ' ';
				}
			}
		}
		else {
			for (j = 0; j < largest; j++) {
				formatted[(numCol * j + (numCol + 1) + k)] = ' ';
			}
			
		}
	}
}",0
wany079,1696846792,2,"#include <stdio.h>
#include <string.h>
void Histogram(char *formatted, int *values, int size) {
	int i, j, k, l;
	int a = 2;
	int largest = values[0];
	int smallest = values[0];
	int numCol = size + 3;

	for (k = 1; k < size; k++) {
		if (largest < values[k]) {
			largest = values[k];
		}
	}

	for (l = 1; l > size; l++) {
		if (smallest > values[l]) {
			smallest = values[l];
		}
	}

	// Generate outer border
	for (i = 0; i <= numCol*(largest + 2); i++) {
		if (i == numCol - 1) { // First row
			formatted[i] = '\n';
		}
		else if (i == a * numCol - 1) { // new line after end of each row
			formatted[i] = '\n';
			a++;

		}
		else if (i == numCol * (largest + 2)) { // Ends graph
			formatted[i - 1] = '\0';
		}
		else { // * at beginning and end of each row
			formatted[i] = '*';
		}
	}

	// Inside the border
	for (k = 0; k < size; k++) {
		if (values[k] > 0) {
			for (j = 0; j < largest; j++) {
				if (j >= largest - values[k]) {
					formatted[(numCol * j + (numCol + 1) + k)] = 'X';
				}
				else {
					formatted[(numCol * j + (numCol + 1) + k)] = ' ';
				}
			}
		}
		else {
			for (j = 0; j < largest; j++) {
				formatted[(numCol * j + (numCol + 1) + k)] = ' ';
			}
			
		}
	}
}",1
wany843,1696386018,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int n) {
    int max_value = 0;
    for(int i = 0; i < n; i++) {
        if(values[i] > max_value) {
            max_value = values[i];
        }
    }
    
    int index = 0;
    for(int i = max_value + 1; i >= 0; i--) {
        formatted[index++] = '*';
        for(int j = 0; j < n; j++) {
            if(i == max_value + 1 || i == 0) {
                formatted[index++] = '*';
            } else if(values[j] >= i) {
                formatted[index++] = 'X';
            } else {
                formatted[index++] = ' ';
            }
        }
        formatted[index++] = '*';
        if(i != 0) {
            formatted[index++] = '\n';
        }
    }
    formatted[index] = '\0';  // Null-terminate the string
}",1
wlin709,1696826395,1,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataSize) {
int maxFreq = 0;

for (int i = 0; i < dataSize; i++) {
    if (data[i] > maxFreq) {
        maxFreq = data[i];
    }
}

int resultLength = (dataSize + 2) * (maxFreq + 2) + 1; 
    for (int i = 0; i < resultLength; i++) {
        result[i] = '\0';
    }

int pos = 0;
   
for (int i = 0; i < dataSize + 2; i++) {
    result[pos++] = '*';
}

result[pos++] = '\n';
result[pos++] = '*';

for (int row = maxFreq; row > 0; row--) {
    for (int col = 0; col < dataSize; col++) {
        if (data[col] >= row) {
            result[pos++] = 'X';
        } else {
            result[pos++] = ' ';
        }
    }
    result[pos++] = '*';
    result[pos++] = '\n';
    result[pos++] = '*';
}

for (int i = 0; i < dataSize + 1; i++) {
    result[pos++] = '*';
}
result[pos] = '\0'; 

}

",1
wlin709,1696827299,2,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataSize) {
int maximumFrequency = 0;

// Identify the maximum frequency
for (int i = 0; i < dataSize; i++) {
    if (data[i] > maxFreq) {
        maximumFrequency = data[i];
    }
}

// Identify the the length of the graph
int maximumLength = (dataSize + 2) * (maximumFrequency + 2) + 1; 
    for (int i = 0; i < maximumLength; i++) {
        result[i] = '\0';
    }

// Initialise position in the current string
int position  = 0;

// Create the top border
for (int i = 0; i < dataSize + 2; i++) {
    result[position ++] = '*';
}

result[position ++] = '\n';
result[position ++] = '*';

// Use a nested for loop to create a histogram graph
for (int row = maximumFrequency; row > 0; row--) {
    for (int col = 0; col < dataSize; col++) {
        if (data[col] >= row) {
            result[position ++] = 'X';
        } else {
            result[position ++] = ' ';
        }
    }
    result[position ++] = '*';
    result[position ++] = '\n';
    result[position ++] = '*';
}

// Create the bottom border
for (int i = 0; i < dataSize + 1; i++) {
    result[position ++] = '*';
}
result[position] = '\0'; 

}
",0
wlin709,1696827447,3,"#include <stdio.h>
#include <string.h>

void Histogram(char *result, int *data, int dataSize) {
int maximumFrequency = 0;

// Identify the maximum frequency
for (int i = 0; i < dataSize; i++) {
    if (data[i] > maximumFrequency) {
        maximumFrequency = data[i];
    }
}

// Identify the the length of the graph
int maximumLength = (dataSize + 2) * (maximumFrequency + 2) + 1; 
    for (int i = 0; i < maximumLength; i++) {
        result[i] = '\0';
    }

// Initialise position in the current string
int position  = 0;

// Create the top border
for (int i = 0; i < dataSize + 2; i++) {
    result[position ++] = '*';
}

result[position ++] = '\n';
result[position ++] = '*';

// Use a nested for loop to create a histogram graph
for (int row = maximumFrequency; row > 0; row--) {
    for (int col = 0; col < dataSize; col++) {
        if (data[col] >= row) {
            result[position ++] = 'X';
        } else {
            result[position ++] = ' ';
        }
    }
    result[position ++] = '*';
    result[position ++] = '\n';
    result[position ++] = '*';
}

// Create the bottom border
for (int i = 0; i < dataSize + 1; i++) {
    result[position ++] = '*';
}
result[position] = '\0'; 

}
",1
wmas516,1696234803,1,"int Histogram(char* formatted, int vals[], int length) {
	
	int index=0,height = vals[0], heightindex = 0;
	
	for (int i = 1; i < length;i++) {
		if (vals[i] > height) {
			height = vals[i];
			heightindex = i;
		}
	}
	
	for (int i = 0; i < length+2; i++,index++){
		*(formatted + index) = '*';
	}
	
	for (int i = 0; i < height; i++,index++) {
		*(formatted + index) = '\n';
		*(formatted + index + 1) = '*';
		index += 2;

		for (int j = 0; j < length; j++, index++) {
			if (vals[j] >= (height - i)) {
				*(formatted + index) = 'X';
			}
			else {
				*(formatted + index) = ' ';
			}
		}
		*(formatted + index) = '*';
	}
	
	*(formatted + index) = '\n';
	index++;
	
	for (int i = 0; i < length + 2; i++, index++) {
		*(formatted + index) = '*';
	}

	*(formatted + index) = '\0';

	return 0;
}",0
wmas516,1696235295,2,"int Histogram(char* formatted, int vals[], int length) {

	int index = 0, height = vals[0];

	for (int i = 1; i < length; i++) {
		if (vals[i] > height) {
			height = vals[i];
		}
	}

	for (int i = 0; i < length + 2; i++, index++) {
		*(formatted + index) = '*';
	}

	for (int i = 0; i < height; i++, index++) {
		*(formatted + index) = '\n';
		*(formatted + index + 1) = '*';
		index += 2;

		for (int j = 0; j < length; j++, index++) {
			if (vals[j] >= (height - i)) {
				*(formatted + index) = 'X';
			}
			else {
				*(formatted + index) = ' ';
			}
		}
		*(formatted + index) = '*';
	}

	*(formatted + index) = '\n';
	index++;

	for (int i = 0; i < length + 2; i++, index++) {
		*(formatted + index) = '*';
	}

	*(formatted + index) = '\0';

	return 0;
}",1
wwan296,1696327442,1,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

void Histogram(char* formatted, int values1[], int size)
{
    formatted[0] = '\0';
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (values1[i] > max) {
            max = values1[i];
        }
    }
    max += 2;
    int nsize = size + 2; 

    int** array = (int**)malloc(max * sizeof(int*)); 
    for (int i = 0; i < max; i++) { 
        array[i] = (int*)malloc(nsize * sizeof(int)); 
    }
    
    for (int i = 0; i < max; i++) {
        for (int j = 0; j < nsize; j++) {
            if (i == 0 || i == max - 1) {
                array[i][j] = 1;
            }
            else if (j == 0 || j == nsize - 1) {
                array[i][j] = 1;
            }
            else {
                array[i][j] = 0;
            }
        }
    }
    
    for (int i = 0; i < size; i++) {
        int nums = values1[i];
        for (int j = 0; j < nums; j++) {
            array[max - 2 - j][i + 1] = 2;
        }
    }

    for (int i = 0; i < max; i++) {
        for (int j = 0; j < nsize; j++) {
            if (array[i][j] == 1) {
                strcat(formatted, ""*"");
            }
            else if (array[i][j] == 0) {
                strcat(formatted, "" "");
            }
            else if (array[i][j] == 2) {
                strcat(formatted, ""X"");
            }
        }
        if (i != max - 1) {
            strcat(formatted, ""\n"");
        }
    }

    for (int i = 0; i < max; i++) {
        free(array[i]); 
    }
    free(array); 
}",1
wwon485,1696240186,1,"void Histogram(char *string, int *values, int length)
{
    int largestNumber = values[0];
    // Finds the largest number 
    for (int i = 1; i < length; i++) {
        if (values[i] > largestNumber) {
            largestNumber = values[i];
        }
    }

    int index = 0;

    // Prints the top border
    for (index; index < length + 2; index++) {
        string[index] = '*';
    }
    string[index] = '\n';
    index++;
    int num;

    for (int line = 0; line < largestNumber; line++) {
        // Adds the * start
        string[index] = '*';
        index++;
        // Prints the histogram
        for (int i = 0; i < length; i++) {
            num = values[i];
            // Decides to include the bar or not
            if (line + num >= largestNumber) {
                // Should include it
                string[index] = 'X';
            } else {
                string[index] = ' ';
            }
            index++;
        }
        string[index] = '*';        

        index++;
        string[index] = '\n';
        index++;
    } 

    // Prints the last border
    for (int i = 0; i < length + 2; i++) {
        string[index] = '*';
        index++;
    }
    string[index] = '\0';
}",0
wwon485,1696240251,2,"void Histogram(char *string, int *values, int length)
{
    int largestNumber = values[0];
    // Finds the largest number 
    for (int i = 1; i < length; i++) {
        if (values[i] > largestNumber) {
            largestNumber = values[i];
        }
    }

    int index;

    // Prints the top border
    for (index = 0; index < length + 2; index++) {
        string[index] = '*';
    }
    string[index] = '\n';
    index++;
    int num;

    for (int line = 0; line < largestNumber; line++) {
        // Adds the * start
        string[index] = '*';
        index++;
        // Prints the histogram
        for (int i = 0; i < length; i++) {
            num = values[i];
            // Decides to include the bar or not
            if (line + num >= largestNumber) {
                // Should include it
                string[index] = 'X';
            } else {
                string[index] = ' ';
            }
            index++;
        }
        string[index] = '*';        

        index++;
        string[index] = '\n';
        index++;
    } 

    // Prints the last border
    for (int i = 0; i < length + 2; i++) {
        string[index] = '*';
        index++;
    }
    string[index] = '\0';
}",1
wwu295,1696681546,1,"void Histogram(char* string, int plotArray[], int arrayLength)
{
	int max = plotArray[0];
	for (int i = 0; i < arrayLength; i++) {
		if (plotArray[i] > max) {
			max = plotArray[i];
		}
	}
	for (int i = 0; i < max+2; i++) {
		for (int j = 0; j < arrayLength+3; j++) {
			if (i == 0 || i == max + 1 || j == 0 || j == arrayLength+1) {
				string[i * (arrayLength + 3) + j] = '*';
			}
			else {
				string[i * (arrayLength + 3) + j] = ' ';
			}
			if (j == arrayLength+2) {
				string[i * (arrayLength + 3) + j] = '\n';
			}
			

		}
	}

	for (int i = 1; i < max+1; i++) {
		for (int j = 1; j < arrayLength+1; j++) {
			if (plotArray[j - 1] >= i) {
				string[(max+1-i) * (arrayLength + 3) + j] = 'X';
			}
		}
	}
	string[(max+1)*(arrayLength+3)+arrayLength+2] = '\0';",0
wwu295,1696681581,2,"void Histogram(char* string, int plotArray[], int arrayLength)
{
	int max = plotArray[0];
	for (int i = 0; i < arrayLength; i++) {
		if (plotArray[i] > max) {
			max = plotArray[i];
		}
	}
	for (int i = 0; i < max+2; i++) {
		for (int j = 0; j < arrayLength+3; j++) {
			if (i == 0 || i == max + 1 || j == 0 || j == arrayLength+1) {
				string[i * (arrayLength + 3) + j] = '*';
			}
			else {
				string[i * (arrayLength + 3) + j] = ' ';
			}
			if (j == arrayLength+2) {
				string[i * (arrayLength + 3) + j] = '\n';
			}
			

		}
	}

	for (int i = 1; i < max+1; i++) {
		for (int j = 1; j < arrayLength+1; j++) {
			if (plotArray[j - 1] >= i) {
				string[(max+1-i) * (arrayLength + 3) + j] = 'X';
			}
		}
	}
	string[(max+1)*(arrayLength+3)+arrayLength+2] = '\0';
}",1
xche362,1696836832,1,"void Histogram(char *graph, int *datas, int elements) 
{
   int largest;
   largest= 0;

   for (int i = 0; i < elements; i++) {
       if (data[i] > largest) {
         largest= data[i];
       }
   }
   
   
   char bk[largest+2][elements+2];
   for(int row = 0;row < largest +2; row++){
       for(int col = 0;col < elements +2;col++){
           if (row == 0 || row == largest +1 || col == 0 || col == elements +1){
               bk[row][col]='*';
               else{
                   bk[row][col]=' ';
               }
           }
       }
   }
  ",0
xkan320,1696555862,1,"void Histogram(char *formatted, int val[], int len){
    int i,j,max;
    
    for(i=0; i<1000; i++){
        formatted[i] = '\0';
    }
    
    max = val[0];
    for(i=1; i<len; i++){
        if(val[i] > max){
            max = val[i];
        }
    }

    int formatArray[1000][1000];
    for(j=0; j<len+2; j++){
        for(i=0; i<max+2; i++){
            if((i==0) || (j==0) || (i==max+1) || (j==len+1)){
                formatArray[i][j] = '*';
            }else if(i<=val[j-1]){
                formatArray[max-i+1][j] = 'X';
            }else if(i>val[j-1]){
                formatArray[max-i+1][j] = ' ';
            }
            
        }
    }
    
    int a = 0;
    for(i=0; i<max+2; i++){
        for(j=0; j<len+2; j++){
            //printf(""%d "",formatArray[i][j]);
            formatted[a] = formatArray[i][j];
            a++;
        }
    //printf(""\n"");
    if(i<max+1){
        formatted[a] = '\n';
        a++;
    }
    }

}",1
xli330,1696589944,1,"void Histogram(char *formatted, int *values, int arrLength) {
    // This function assumes all values are greater than or equal to zero.

    int i, j, maxValue, n_strRow, n_strCol;

    // Find the maximum integer value.
    maxValue = values[0];
    for (i = 1; i < arrLength; i++) {
        if (maxValue < values[i]) {
            maxValue = values[i];
        }
    }

    // Assign the end character of the string.
    n_strRow = maxValue + 2;
    n_strCol = arrLength + 3;
    maxValue = n_strRow * n_strCol;
    formatted[maxValue] = '\0';

    // Draw first col of '*'s.
    formatted[n_strCol - 1] = '\n';
    for (i = 0; i < n_strCol - 1; i++) {
        formatted[i] = '*';
    }

    // Draw last col of '*'s.
    for (i = (n_strRow - 1) * n_strCol; i < maxValue - 1; i++) {
        formatted[i] = '*';
    }

    // Loop every 'cell' inside the diagram. Excluding first and last row.
    for (i = 1; i < n_strRow - 1; i++){
        for (j = 0; j < n_strCol; j++){

            // Draw starting and ending '*'s.
            if (j == 0 || j == n_strCol - 2) {
                formatted[i * n_strCol + j] = '*';
            }

            // Draw 'X's.
            if (j > 0 && j < n_strCol - 2){
                // printf(""i:%d j:%d i_:%d <= val:%d?\n"", i, j, (n_strRow - i - 1), values[j - 1]);

                if ( (n_strRow - i - 1) <= values[j - 1] ) {
                    formatted[i * n_strCol + j] = 'X';    
                } else {
                    formatted[i * n_strCol + j] = ' ';
                }
            }

            // Insert newline char at the end of the line.
            if (j == n_strCol - 1) {
                formatted[i * n_strCol + j] = '\n';
            }
        }
    }
}",0
xli330,1696591078,2,"void Histogram(char *formatted, int *values, int arrLength) {
    // This function assumes all values are greater than or equal to zero.

    int i, j, maxValue, n_strRow, n_strCol;

    // Find the maximum integer value.
    maxValue = values[0];
    for (i = 1; i < arrLength; i++) {
        if (maxValue < values[i]) {
            maxValue = values[i];
        }
    }

    // Assign the end character of the string.
    n_strRow = maxValue + 2;
    n_strCol = arrLength + 3;
    maxValue = n_strRow * n_strCol;
    formatted[maxValue - 1] = '\0';

    // Draw first col of '*'s.
    formatted[n_strCol - 1] = '\n';
    for (i = 0; i < n_strCol - 1; i++) {
        formatted[i] = '*';
    }

    // Draw last col of '*'s.
    for (i = (n_strRow - 1) * n_strCol; i < maxValue - 1; i++) {
        formatted[i] = '*';
    }

    // Loop every 'cell' inside the diagram. Excluding first and last row.
    for (i = 1; i < n_strRow - 1; i++){
        for (j = 0; j < n_strCol; j++){

            // Draw starting and ending '*'s.
            if (j == 0 || j == n_strCol - 2) {
                formatted[i * n_strCol + j] = '*';
            }

            // Draw 'X's.
            if (j > 0 && j < n_strCol - 2){
                // printf(""i:%d j:%d i_:%d <= val:%d?\n"", i, j, (n_strRow - i - 1), values[j - 1]);

                if ( (n_strRow - i - 1) <= values[j - 1] ) {
                    formatted[i * n_strCol + j] = 'X';    
                } else {
                    formatted[i * n_strCol + j] = ' ';
                }
            }

            // Insert newline char at the end of the line.
            if (j == n_strCol - 1) {
                formatted[i * n_strCol + j] = '\n';
            }
        }
    }
}",1
xugn489,1696506874,1,"void Histogram(char graph[], int original_array[], int length) 
{
	int max = original_array[0];
	int graph_index = 0;
	
	for ( int i = 0; i < length; i++) {
		if ( original_array[i] > max) {
			max = original_array[i];
		}	
	}

	int array[max][length];
	int point = max - 1;
	for ( int i = 0; i < length; i++) {
		array[max-1][i] = original_array[i];
	}

	for  (int i = 0; i < (max - 1); i++) {
		for ( int j = 0; j < length; j++) {
			array[i][j] = array[max - 1][j] - point;
		}
		point--;
	}	

	for ( int i = 0; i < length + 2; i++) {
	    graph[graph_index] = '*';
	    graph_index++;
	}
	graph[graph_index] = '\n';
	graph_index++;
	
	for ( int i = 0; i < max; i++) {
		for (int j = 0; j < length; j++) {
		    if (j == 0) {
			    graph[graph_index] = '*';
			    graph_index++;
			}
			if (array[i][j] > 0) {
				graph[graph_index] = 'X';
			}
			else {
				graph[graph_index] = ' ';
			}
			if (j == length - 1) {
                graph[graph_index + 1] = '*';
                graph[graph_index + 2] = '\n';
                graph_index += 2;
			}
			graph_index++;
		}
	}
	for ( int i = 0; i < length + 2; i++) {
	    graph[graph_index] = '*';
	    graph_index++;
	}
	graph[graph_index] = '\0';
}",1
ybha528,1696844552,1,"#include <stdio.h>
#include <string.h>
 
void Histogram(char *formatted, int values[], int number)
{
	int maxHeight = 0;
	
	for (int i = 0; i < number; i++) {
		if (values[i] > maxHeight) {
			maxHeight = values[i];
		}
	}
	
	for (int i = 0; i < number + 2; i++) {
		*formatted++ = '*';
	}
	*formatted++ = '\n';

	for (int i = maxHeight; i > 0; i--) {
		*formatted++ = '*';
		for (int j = 0; j < number; j++) 
		{
			if (values[j] >= i) {
				*formatted++ = 'X';
			}
			else {
				*formatted++ = ' ';
			}
		}
		
		*formatted++ = '*';
		*formatted++ = '\n';
	}
	
	
	for (int i = 0; i < number + 2; i++) {
		*formatted++ = '*';
	}
	*formatted = '\0';
	
}",1
ycho749,1696815014,1,"void Histogram(char* histogramStr, int values[], int size)

{
    int max = 0;
    for (int i = 0; i < size; ++i) 
    {
        if (values[i] > max)
            max = values[i];
    }

    char* pointer = histogramStr;
    
    for(int i=0; i<size+2; ++i)
        *pointer++ = '*';
    
    *pointer++ = '\n';

     for (int i = max; i > 0; --i)
     {
         *pointer++ = '*';
         for (int j = 0; j < size; ++j) 
         {
             if (values[j] >= i)
                 *pointer++ = 'X';
             else
                 *pointer++ = ' ';
         }
         *pointer++='*';
         *pointer++='\n';
     }

     for(int i=0;i<size+2;++i)
        *pointer++='*';
        
     *pointer++='\n'; 
     *pointer='\0'; 
}",0
ycho749,1696817051,2,"void Histogram(char* histogramStr, int values[], int size)
{
    int max = 0;
    for (int i = 0; i < size; ++i) {
        if (values[i] > max)
            max = values[i];
    }

    char* pointer = histogramStr;
    
    for(int i=0; i<size+2; ++i)
        *pointer++ = '*';
    
    *pointer++ = '\n';

     for (int i = max; i > 0; --i) {
         *pointer++ = '*';
         for (int j = 0; j < size; ++j) {
             if (values[j] >= i)
                 *pointer++ = 'X';
             else
                 *pointer++ = ' ';
         }
         *pointer++='*';
         *pointer++='\n';
     }

     for(int i=0;i<size+2;++i)
        *pointer++='*';
        
     *pointer='\0'; 
}",1
ydai729,1696844736,1,"def Histogram(result, data, size):
    # Find the maximum value in the data for scaling
    max_value = max(data)

    # Initialize an empty string for the histogram
    histogram = """"

    # Iterate over the rows of the histogram
    for i in range(max_value, 0, -1):
        row = """"
        for value in data:
            if value >= i:
                row += ""X""
            else:
                row += "" ""
        histogram += row + ""\n""

    # Add the border to the top and bottom of the histogram
    border = ""*"" * (len(data) + 2)
    histogram = border + ""\n"" + histogram + border

    # Copy the generated histogram to the result string
    result += histogram

# Example usage:
data = [3, 1, 2, 0, 4, 1]
size = len(data)
result = """"
Histogram(result, data, size)
print(result)
",0
ydai729,1696844767,2,"def Histogram(result, data, size):
    # Find the maximum value in the data for scaling
    max_value = max(data)

    # Initialize an empty string for the histogram
    histogram = """"

    # Iterate over the rows of the histogram
    for i in range(max_value, 0, -1):
        row = """"
        for value in data:
            if value >= i:
                row += ""X""
            else:
                row += "" ""
        histogram += row + ""\n""

    ",0
ydai729,1696844783,3,"def Histogram(result, data, size):
    # Find the maximum value in the data for scaling
    max_value = max(data)

    # Initialize an empty string for the histogram
    histogram = """"

    # Iterate over the rows of the histogram
    for i in range(max_value, 0, -1):
        row = """"
        for value in data:
            if value >= i:
                row += ""X""
            else:
                row += "" ""
        histogram += row + ""\n""
# Copy the generated histogram to the result string
    result += histogram

    ",0
ydai729,1696844818,4,"#include <stdio.h>

void Histogram(char *result, int *data, int size) {
    // Find the maximum value in the data for scaling
    int max_value = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Initialize an empty string for the histogram
    char histogram[1000]; // Adjust the size as needed

    // Initialize the result string
    result[0] = '\0';

    // Iterate over the rows of the histogram
    for (int i = max_value; i > 0; i--) {
        char row[1000] = """"; // Adjust the size as needed
        for (int j = 0; j < size; j++) {
            if (data[j] >= i) {
                strcat(row, ""X"");
            } else {
                strcat(row, "" "");
            }
        }
        strcat(row, ""\n"");
        strcat(histogram, row);
    }

    // Add the border to the top and bottom of the histogram
    char border[1000] = """"; // Adjust the size as needed
    for (int i = 0; i < size + 2; i++) {
        strcat(border, ""*"");
    }
    strcat(histogram, border);
    strcat(histogram, ""\n"");

    // Copy the generated histogram to the result string
    strcpy(result, histogram);
}

int main() {
    int data[] = {3, 1, 2, 0, 4, 1};
    int size = sizeof(data) / sizeof(data[0]);
    char result[1000]; // Adjust the size as needed

    Histogram(result, data, size);
    printf(""%s"", result);

    return 0;
}
",0
ydai729,1696844829,5,"#include <stdio.h>

void Histogram(char *result, int *data, int size) {
    // Find the maximum value in the data for scaling
    int max_value = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > max_value) {
            max_value = data[i];
        }
    }

    // Initialize an empty string for the histogram
    char histogram[1000]; // Adjust the size as needed

    // Initialize the result string
    result[0] = '\0';

    // Iterate over the rows of the histogram
    for (int i = max_value; i > 0; i--) {
        char row[1000] = """"; // Adjust the size as needed
        for (int j = 0; j < size; j++) {
            if (data[j] >= i) {
                strcat(row, ""X"");
            } else {
                strcat(row, "" "");
            }
        }
        strcat(row, ""\n"");
        strcat(histogram, row);
    }

    // Add the border to the top and bottom of the histogram
    char border[1000] = """"; // Adjust the size as needed
    for (int i = 0; i < size + 2; i++) {
        strcat(border, ""*"");
    }
    strcat(histogram, border);
    strcat(histogram, ""\n"");

    // Copy the generated histogram to the result string
    strcpy(result, histogram);
}


",0
yfen481,1696397138,1,"void Histogram(char *result, int *data, int size) {
    
    result[0] = '\0';
    
    for (int i=0; i<size+2;i++){
        strcat(result,""*"");
    }
    strcat(result,""\n"");
    
    int maxVal=0;
    for (int i=0;i<size;i++){
        if (data[i]>maxVal){
            maxVal=data[i];
        }
    }
    
    int row,col;
    for (row=maxVal;row>0;row--){
        strcat(result,""*"");
        for (col=0;col<size;col++){
            if (row<=data[col]){
                strcat(result,""X"");
            }
            else{
                strcat(result,"" "");
            }
        }
        strcat(result,""*\n"");
    }
    for (int i=0; i<size+2;i++){
        strcat(result,""*"");
    }
}",1
yjun129,1696235355,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Histogram(char* result, int data[], int size) {
    // Find the maximum value in the data
    int max = 0;
    for (int i = 0; i < size; i++) {
        if (data[i] > max) {
            max = data[i];
        }
    }

    // Initialize the result string
    strcpy(result, """");

    // Generate the top border of stars
    for (int i = 0; i < size + 2; i++) {
        strcat(result, ""*"");
    }
    strcat(result, ""\n"");

        // Generate the histogram bars and spaces
        for (int j = max; j > 0; j--) {
            strcat(result, ""*"");
            for (int k = 0; k < size; k++) {
                if (data[k] >= j) {
                    strcat(result, ""X"");
                }
                else {
                    strcat(result, "" "");
                }
            }
            strcat(result, ""*\n"");

        }

    // Generate the bottom border of stars
    for (int l = 0; l < size + 2; l++) {
        strcat(result, ""*"");
    }
}",1
ytho155,1696244448,1,"#include <stdio.h>

int findLargest(int values1[], int size);

void Histogram(char formatted[][100], int values1[], int numint) {
    int max = findLargest(values1, numint);
    int row = max + 4; 
    int col = max + 4;  
    
    // Initialize array with spaces
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            formatted[i][j] = ' ';
        }
    }

    //histogram
    for (int j = 2; j < numint + 2; j++) {
        for (int i = row - 3; i >= row - 2 - values1[j - 2]; i--) {
            formatted[i][j] = 'X';
        }
    }

    //top border
    for (int j = 0; j < col; j++) {
        formatted[0][j] = '*';
    }

    // left and right borders s
    for (int i = 1; i < row-1; i++) {
        formatted[i][0] = '*';
        formatted[i][numint+2] = '*';
    }

    //bottom border
    for (int j = 0; j < col; j++) {
        formatted[row - 1][j] = '*';
    }
    //empty spaces at borders
    int i=1;
    formatted[i=1][0]=' ';
    formatted[i=max+2][0]=' ';
    formatted[i=1][numint+2]=' ';
    formatted[i=max+2][numint+2]=' ';
}

int findLargest(int values1[], int size) {
    int max = values1[0];
    for (int i = 0; i < size; i++) {
        if (values1[i] > max) {
            max = values1[i];
        }
    }
    return max;
}",0
ytho155,1696559305,2,"#include <stdio.h>
#include <string.h>

int findLargest(int values1[], int size);

// Function to convert a 2D array into a string
void ArrayToString(char array[][100], int numRows, int numCols, char* result) {
    // Calculate the total length of the string
    int totalLength = 0;
    for (int i = 0; i < numRows; i++) {
        totalLength += strlen(array[i]);
    }

    // Initialize the result string as an empty string
    result[0] = '\0';

    // Concatenate each row of the array into the result string with a newline character
    for (int i = 0; i < numRows; i++) {
        strcat(result, array[i]);
        strcat(result, ""\n""); // Add newline character
    }
}

void Histogram(char formatted[], int values1[], int numint) {
    char temp[100][100]; // Changed from int to char
    int max = findLargest(values1, numint);
    int row = max + 2;
    int col = numint + 2;

    // Initialize array with spaces
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            temp[i][j] = ' ';
        }
    }

    // Histogram
    for (int j = 1; j < numint + 1; j++) {
        for (int i = row - 2; i >= row - 1 - values1[j - 1]; i--) {
            temp[i][j] = 'X';
        }
    }

    // Top border
    for (int j = 0; j < col; j++) {
        temp[0][j] = '*';
    }

    // Left and right borders
    for (int i = 1; i < row - 1; i++) {
        temp[i][0] = '*';
        temp[i][numint + 1] = '*';
    }

    // Bottom border
    for (int j = 0; j < col; j++) {
        temp[row - 1][j] = '*';
    }

    // Call ArrayToString to convert temp to a string
    ArrayToString(temp, row, col, formatted);
}

int findLargest(int values1[], int size) {
    int max = values1[0];
    for (int i = 0; i < size; i++) {
        if (values1[i] > max) {
            max = values1[i];
        }
    }
    return max;
}


",0
ytho155,1696561938,3,"#include <stdio.h>
#include <string.h>

int findLargest(int values1[], int size);

// Function to convert a 2D array into a string
void ArrayToString(char array[][100], int numRows, int numCols, char* result) {
    // Calculate the total length of the string
    int totalLength = 0;
    for (int i = 0; i < numRows; i++) {
        totalLength += strlen(array[i]);
    }

    // Initialize the result string as an empty string
    result[0] = '\0';

    // Concatenate each row of the array into the result string with a newline character
    for (int i = 0; i < numRows; i++) {
        strcat(result, array[i]);
        strcat(result, ""\n""); // Add newline character
    }
}

void Histogram(char formatted[], int values1[], int numint) {
    char temp[100][100] = {' '}; // Changed from int to char
    int max = findLargest(values1, numint);
    int row = max + 2;
    int col = numint + 2;

    // Initialize array with spaces
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            temp[i][j] = ' ';
        }
    }

    // Histogram
    for (int j = 1; j < numint + 1; j++) {
        for (int i = row - 2; i >= row - 1 - values1[j - 1]; i--) {
            temp[i][j] = 'X';
        }
    }

    // Top border
    for (int j = 0; j < col; j++) {
        temp[0][j] = '*';
    }

    // Left and right borders
    for (int i = 1; i < row - 1; i++) {
        temp[i][0] = '*';
        temp[i][numint + 1] = '*';
    }

    // Bottom border
    for (int j = 0; j < col; j++) {
        temp[row - 1][j] = '*';
    }

    // Call ArrayToString to convert temp to a string
    ArrayToString(temp, row, col, formatted);
}

int findLargest(int values1[], int size) {
    int max = values1[0];
    for (int i = 0; i < size; i++) {
        if (values1[i] > max) {
            max = values1[i];
        }
    }
    return max;
}

",0
ytho155,1696562004,4,"#include <stdio.h>
#include <string.h>

int findLargest(int values1[], int size);

// Function to convert a 2D array into a string
void ArrayToString(char array[][100], int numRows, int numCols, char* result) {
    // Calculate the total length of the string
    int totalLength = 0;
    for (int i = 0; i < numRows; i++) {
        totalLength += strlen(array[i]);
    }

    // Initialize the result string as an empty string
    result[0] = '\0';

    // Concatenate each row of the array into the result string with a newline character
    for (int i = 0; i < numRows; i++) {
        strcat(result, array[i]);
        strcat(result, ""\n""); // Add newline character
    }
}

void Histogram(char formatted[], int values1[], int numint) {
    char temp[100][100] = {{' '}}; // Changed from int to char
    int max = findLargest(values1, numint);
    int row = max + 2;
    int col = numint + 2;

    // Initialize array with spaces
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            temp[i][j] = ' ';
        }
    }

    // Histogram
    for (int j = 1; j < numint + 1; j++) {
        for (int i = row - 2; i >= row - 1 - values1[j - 1]; i--) {
            temp[i][j] = 'X';
        }
    }

    // Top border
    for (int j = 0; j < col; j++) {
        temp[0][j] = '*';
    }

    // Left and right borders
    for (int i = 1; i < row - 1; i++) {
        temp[i][0] = '*';
        temp[i][numint + 1] = '*';
    }

    // Bottom border
    for (int j = 0; j < col; j++) {
        temp[row - 1][j] = '*';
    }

    // Call ArrayToString to convert temp to a string
    ArrayToString(temp, row, col, formatted);
}

int findLargest(int values1[], int size) {
    int max = values1[0];
    for (int i = 0; i < size; i++) {
        if (values1[i] > max) {
            max = values1[i];
        }
    }
    return max;
}

",0
ytho155,1696562231,5,"#include <stdio.h>
#include <string.h>

int findLargest(int values1[], int size);

// Function to convert a 2D array into a string
void ArrayToString(char array[][100], int numRows, int numCols, char* result) {
    // Calculate the total length of the string
    int totalLength = 0;
    for (int i = 0; i < numRows; i++) {
        totalLength += strlen(array[i]);
    }

    // Initialize the result string as an empty string
    result[0] = '\0';

    // Concatenate each row of the array into the result string with a newline character
    for (int i = 0; i < numRows; i++) {
        strcat(result, array[i]);
        if (i != numRows-1){
        strcat(result, ""\n""); // Add newline character
 }   }
}

void Histogram(char formatted[], int values1[], int numint) {
    char temp[100][100] = {{' '}}; // Changed from int to char
    int max = findLargest(values1, numint);
    int row = max + 2;
    int col = numint + 2;

    // Initialize array with spaces
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            temp[i][j] = ' ';
        }
    }

    // Histogram
    for (int j = 1; j < numint + 1; j++) {
        for (int i = row - 2; i >= row - 1 - values1[j - 1]; i--) {
            temp[i][j] = 'X';
        }
    }

    // Top border
    for (int j = 0; j < col; j++) {
        temp[0][j] = '*';
    }

    // Left and right borders
    for (int i = 1; i < row - 1; i++) {
        temp[i][0] = '*';
        temp[i][numint + 1] = '*';
    }

    // Bottom border
    for (int j = 0; j < col; j++) {
        temp[row - 1][j] = '*';
    }

    // Call ArrayToString to convert temp to a string
    ArrayToString(temp, row, col, formatted);
}

int findLargest(int values1[], int size) {
    int max = values1[0];
    for (int i = 0; i < size; i++) {
        if (values1[i] > max) {
            max = values1[i];
        }
    }
    return max;
}



",1
ytse120,1696252653,1,"void Histogram(char *formatted, int values[], int maxCol) {
    int i, count=0, row, col, maxRow=0;
    for (i=0;i<maxCol;i++) {
        if (values[i] > maxRow) {
            maxRow = values[i];
        }
    }

    for (row=0;row<maxRow+2;row++) {
        if (row == 0){
            for (col=0;col<=maxCol+2;col++) {
                if (col == maxCol+2) {
                    formatted[count] = '\n';
                } else {
                    formatted[count] = '*';
                }
                count++;
            }
        } else if (row == maxRow+1) {
            for (col=0;col<maxCol+2;col++) {
                formatted[count] = '*';
                count++;
            }
        } else {
            formatted[count] = '*';
            count++;
            for (col=0;col<maxCol;col++) {
                if (maxCol-3-values[col] > row) {
                    formatted[count] = ' ';
                } else {
                    formatted[count] = 'X';
                }
                count++;
            }
            formatted[count] = '*';
            count++;
            formatted[count] = '\n';
            count++;
        }
    }
}",0
ytse120,1696252752,2,"void Histogram(char *formatted, int values[], int maxCol) {
    int i, count=0, row, col, maxRow=0;
    for (i=0;i<maxCol;i++) {
        if (values[i] > maxRow) {
            maxRow = values[i];
        }
    }

    for (row=0;row<maxRow+2;row++) {
        if (row == 0){
            for (col=0;col<=maxCol+2;col++) {
                if (col == maxCol+2) {
                    formatted[count] = '\n';
                } else {
                    formatted[count] = '*';
                }
                count++;
            }
        } else if (row == maxRow+1) {
            for (col=0;col<maxCol+2;col++) {
                formatted[count] = '*';
                count++;
            }
            formatted[count] = '\0';
            count++;
        } else {
            formatted[count] = '*';
            count++;
            for (col=0;col<maxCol;col++) {
                if (maxCol-3-values[col] > row) {
                    formatted[count] = ' ';
                } else {
                    formatted[count] = 'X';
                }
                count++;
            }
            formatted[count] = '*';
            count++;
            formatted[count] = '\n';
            count++;
        }
    }
}",0
ytse120,1696292422,3,"void Histogram(char *formatted, int values[], int maxCol) {
    int i, count=0, row, col, maxRow=0;
    for (i=0;i<maxCol;i++) {
        if (values[i] > maxRow) {
            maxRow = values[i];
        }
    }

    for (row=0;row<maxRow+2;row++) {
        if (row == 0){
            for (col=0;col<=maxCol+2;col++) {
                if (col == maxCol+2) {
                    formatted[count] = '\n';
                } else {
                    formatted[count] = '*';
                }
                count++;
            }
        } else if (row == maxRow+1) {
            for (col=0;col<maxCol+2;col++) {
                formatted[count] = '*';
                count++;
            }
            formatted[count] = '\0';
            count++;
        } else {
            formatted[count] = '*';
            count++;
            for (col=0;col<maxCol;col++) {
                if (maxRow-values[col] >= row) {
                    formatted[count] = ' ';
                } else {
                    formatted[count] = 'X';
                }
                count++;
            }
            formatted[count] = '*';
            count++;
            formatted[count] = '\n';
            count++;
        }
    }
}",1
yxie884,1696812600,1,"/*The Histogram function takes an array of integers representing the data to be plotted, and generates a string 
(representing the histogram) in precisely the format specified*/
//Author: Jessica Xie

#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int element){
/*inputs:
    formatted = large empty character array
    values = data plot values stored in an array
    element = a number representing the number of elements in the values array*/

    //initialising values
    formatted[0] = '\0';
    int a, i, j, max, data;
    char header[1000],line[1000];

    // finding the largest value in the data given
    max = values[0];
    for (a = 0; a < element; a++){
        if (values[a] > max){
            max = values[a];
        }
    }

    //producing a header
    header[0] = '\0';
    for (j = 0; j < element + 2; j++){
        strcat(header, ""*"");
    }

    strcat(formatted, header);
    strcat(formatted, ""\n"");

    line[0] = '\0';

    //by using two for loops and if statements to print the histogram
    for (i = 0; i < max; i++){
        
        strcat(line, ""*"");

        for (j = 0; j < element; j++){
            if (values[j] >= max - i){
                strcat(line, ""X"");
            }
            else{
                strcat(line, "" "");
            }

        }
        
        // concatinating the graph in place
        strcat(line, ""*"");
        strcat(formatted,line);
        strcat(formatted, ""\n"");
        line[0] = '\0';
    }
    
    strcat(formatted, header);

}",0
yxie884,1696812697,2,"/*The Histogram function takes an array of integers representing the data to be plotted, and generates a string 
(representing the histogram) in precisely the format specified*/
//Author: Jessica Xie

#include <stdio.h>
#include <string.h>

void Histogram(char *formatted, int *values, int element){
/*inputs:
    formatted = large empty character array
    values = data plot values stored in an array
    element = a number representing the number of elements in the values array*/

    //initialising values
    formatted[0] = '\0';
    int a, i, j, max;
    char header[1000],line[1000];

    // finding the largest value in the data given
    max = values[0];
    for (a = 0; a < element; a++){
        if (values[a] > max){
            max = values[a];
        }
    }

    //producing a header
    header[0] = '\0';
    for (j = 0; j < element + 2; j++){
        strcat(header, ""*"");
    }

    strcat(formatted, header);
    strcat(formatted, ""\n"");

    line[0] = '\0';

    //by using two for loops and if statements to print the histogram
    for (i = 0; i < max; i++){
        
        strcat(line, ""*"");

        for (j = 0; j < element; j++){
            if (values[j] >= max - i){
                strcat(line, ""X"");
            }
            else{
                strcat(line, "" "");
            }

        }
        
        // concatinating the graph in place
        strcat(line, ""*"");
        strcat(formatted,line);
        strcat(formatted, ""\n"");
        line[0] = '\0';
    }

    strcat(formatted, header);

}",1
yzhe520,1696667959,1,"#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>


void Histogram(char *string, int IntArray[], int n)
{
	int i,j,Li,row,g,l,k,N;
	Li = 0;
	char Newstr;
	//find the index for the largest number in the array
	for (j = 0; j <= n - 1; j++) {		
		if (IntArray[j] > IntArray[Li]) { //if this one is larger than the one stored already
			//replace it with the current index
			Li = j;
		}
	}
	//find the height (number of rows) needed in the final diagram
	row = IntArray[Li];
	
	//first print out the 'nice' first line and the last line on the string
//n is the number of elements in the array
	for (i = 0; i < n+1; i++) {
		string[i] = '*';
	}
	string[n+1] = '*';
	string=strcat(string,""\n"");

	//k = 0; //initialise the number of rows
	for (g = 0; g < row; g++) {//loop through each row in between the nice borders
        string = strcat(string, ""*"");
		for (l = 0; l < n; l++) { //check through each element in the array to decide what is in each position
			
			if (IntArray[l] < (row - 1 * g)) {
				string = strcat(string, "" "");
			}
			else {
				string = strcat(string, ""X"");
			}
		}
		string = strcat(string, ""*"");
		string=strcat(string,""\n"");
	}

	//create the last 'nice' line
	string=strcat(string,""\n"");
	
	//N = (n + 2) * (row + 1);
	for (k = 0; k < n+2; k++) {
		string = strcat(string,""*"");
	}

}",0
yzhe520,1696668929,2,"#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<string.h>


void Histogram(char *string, int IntArray[], int n)
{
	int i,j,Li,row,g,l,k;
	Li = 0;
	//find the index for the largest number in the array
	for (j = 0; j <= n - 1; j++) {		
		if (IntArray[j] > IntArray[Li]) { //if this one is larger than the one stored already
			//replace it with the current index
			Li = j;
		}
	}
	//find the height (number of rows) needed in the final diagram
	row = IntArray[Li];
	
	//first print out the 'nice' first line and the last line on the string
//n is the number of elements in the array
	for (i = 0; i < n+2; i++) {
		string[i] = '*';
	}
	
	string=strcat(string,""\n"");

	//k = 0; //initialise the number of rows
	for (g = 0; g < row; g++) {//loop through each row in between the nice borders
        string = strcat(string, ""*"");
		for (l = 0; l < n; l++) { //check through each element in the array to decide what is in each position
			
			if (IntArray[l] < (row - 1 * g)) {
				string = strcat(string, "" "");
			}
			else {
				string = strcat(string, ""X"");
			}
		}
		string = strcat(string, ""*"");
		string=strcat(string,""\n"");
	}
	
	for (k = 0; k < n+2; k++) {
		string = strcat(string,""*"");
	}

}",0
zche975,1696840143,1,joe biden,0
zcol623,1696418722,1,"//Author:zcol623
void Histogram(char* graph, int* values, int length) {
	
	// Initialize the result string to prevent garabage values when function is called
	graph[0] = '\0';
	
	//Print Top border 
	for (int i = 0; i < length + 2; i++) {
		strcat(graph, ""*"");
	}
	strcat(graph, ""\n"");

	//Find the max value in the input array
	int max = values[0];
	for (int i = 1; i < length; i++) {
		if (values[i] > max) {
			max = values[i];
		}
	}

	//Create the histogram bars with * borders
	for (int row = max; row > 0; row--) {
		strcat(graph, ""*""); //Left border
		for (int col = 0; col < length; col++) {
			if (values[col] >= row) {
				strcat(graph, ""X"");//Add data point
			}
			else {
				strcat(graph, "" "");//Absence of a data point
			}
		}
		strcat(graph, ""*\n""); //Right border and move to next line 
	}

	//Print Bottom Border
	for (int i = 0; i < length + 2; i++) {
		strcat(graph, ""*"");
	}
}",1
zfu276,1696767296,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h> 
#include <string.h>

void Histogram(char *formatted, int value[], int n)
{
    formatted[0] = '\0';

    for (int i = 0; i <= n ; i++){
        strcat(formatted, ""*"");
    }

    strcat(formatted, ""*\n"");  

    int i = 0, max = 0;
    for ( i = 0; i < n; i++) {
        if (value[i] > max) {
            max = value[i];
        }  
    }

    for (int j = max; j > 0; j--) {
        strcat(formatted, ""*"");

        for (int k = 0; k < n; k++) {
            if (value[k] >= j) {
                strcat(formatted, ""X"");
            } else {
                strcat(formatted, "" "");
            }

        }

        strcat(formatted, ""*\n"");  
    }

    for (int p = 0; p <= n + 1; p++) {
        strcat(formatted, ""*"");
    }


}",1
zgin653,1696222147,1,"int largest(int array[], int length){
    int x = 0;
    int p;
    for (int i = 0; i < length; i++) if (array[i] > x) x = array[i];
    return x;
}

void Histogram(char formatted[], int values[], int length){
    int width = length + 2;

    formatted[0] = '*';
    for (int i = 0; i < length; i++){
        formatted[i+1] = '*';
    }
    formatted[width-1] = '*';
    formatted[width] = '\n';


    int max = largest(values, length);
    for (int j = 1; j <= max; j++){
        for (int i = 0; i <= width; i++){
            if (i == 0 || i == width - 1){
                formatted[i + (width + 1)*j] = '*';
            } else if (i == width){
                formatted[i + (width + 1)*j] = '\n';
            } else {
                if ((max - j + 1) <= values[i-1]){
                    formatted[i + (width + 1)*j] = 'X';
                } else {
                    formatted[i + (width + 1)*j] = ' ';
                }
            }
        }
    }

    for (int i = 0; i < length + 2; i++){
        formatted[(width + 1)*(largest(values, length) + 1) + i] = '*';
    }    
}",0
zgin653,1696222180,2,"int largest(int array[], int length){
    int x = 0;
    for (int i = 0; i < length; i++) if (array[i] > x) x = array[i];
    return x;
}

void Histogram(char formatted[], int values[], int length){
    int width = length + 2;

    formatted[0] = '*';
    for (int i = 0; i < length; i++){
        formatted[i+1] = '*';
    }
    formatted[width-1] = '*';
    formatted[width] = '\n';


    int max = largest(values, length);
    for (int j = 1; j <= max; j++){
        for (int i = 0; i <= width; i++){
            if (i == 0 || i == width - 1){
                formatted[i + (width + 1)*j] = '*';
            } else if (i == width){
                formatted[i + (width + 1)*j] = '\n';
            } else {
                if ((max - j + 1) <= values[i-1]){
                    formatted[i + (width + 1)*j] = 'X';
                } else {
                    formatted[i + (width + 1)*j] = ' ';
                }
            }
        }
    }

    for (int i = 0; i < length + 2; i++){
        formatted[(width + 1)*(largest(values, length) + 1) + i] = '*';
    }    
}",0
zgin653,1696222308,3,"void reset(char array[]){
    int i = 0;
    while (array[i] != '\0'){
        array[i] = '\0';
        i++;
    }
}


int largest(int array[], int length){
    int x = 0;
    for (int i = 0; i < length; i++) if (array[i] > x) x = array[i];
    return x;
}

void Histogram(char formatted[], int values[], int length){
    reset(formatted);
    int width = length + 2;

    formatted[0] = '*';
    for (int i = 0; i < length; i++){
        formatted[i+1] = '*';
    }
    formatted[width-1] = '*';
    formatted[width] = '\n';


    int max = largest(values, length);
    for (int j = 1; j <= max; j++){
        for (int i = 0; i <= width; i++){
            if (i == 0 || i == width - 1){
                formatted[i + (width + 1)*j] = '*';
            } else if (i == width){
                formatted[i + (width + 1)*j] = '\n';
            } else {
                if ((max - j + 1) <= values[i-1]){
                    formatted[i + (width + 1)*j] = 'X';
                } else {
                    formatted[i + (width + 1)*j] = ' ';
                }
            }
        }
    }

    for (int i = 0; i < length + 2; i++){
        formatted[(width + 1)*(largest(values, length) + 1) + i] = '*';
    }    
}",0
zgin653,1696222466,4,"void reset(char array[]){
    int i = 0;
    while (array[i] != '\0' || i < 1000){
        array[i] = '\0';
        i++;
    }
}


int largest(int array[], int length){
    int x = 0;
    for (int i = 0; i < length; i++) if (array[i] > x) x = array[i];
    return x;
}

void Histogram(char formatted[], int values[], int length){
    reset(formatted);
    int width = length + 2;

    formatted[0] = '*';
    for (int i = 0; i < length; i++){
        formatted[i+1] = '*';
    }
    formatted[width-1] = '*';
    formatted[width] = '\n';


    int max = largest(values, length);
    for (int j = 1; j <= max; j++){
        for (int i = 0; i <= width; i++){
            if (i == 0 || i == width - 1){
                formatted[i + (width + 1)*j] = '*';
            } else if (i == width){
                formatted[i + (width + 1)*j] = '\n';
            } else {
                if ((max - j + 1) <= values[i-1]){
                    formatted[i + (width + 1)*j] = 'X';
                } else {
                    formatted[i + (width + 1)*j] = ' ';
                }
            }
        }
    }

    for (int i = 0; i < length + 2; i++){
        formatted[(width + 1)*(largest(values, length) + 1) + i] = '*';
    }    
}",1
zhon780,1696316520,1,"int GetMax(int values[], int length)
{
    int max = values[0];
    for (int i = 1; i < length; i++)
    {
        if (max < values[i])
        {
            max = values[i];
        }
    }
    return max;
}

void Histogram(char* formatted, int values[], int width)
{
    int height = GetMax(values, width);
    int i = 0;
    
    // First asterisk line
    for (int j = 0; j < width+2; j++)
    {
        formatted[i++] = '*';
    }
    formatted[i++] = '\n';
    
    // Body lines
    for (int j = height; j > 0; j--)
    {
        formatted[i++] = '*';
        for (int k = 0; k < width; k++)
        {
            if (values[k] >= j)
            {
                formatted[i++] = 'X';
            }
            else
            {
                formatted[i++] = ' ';
            }
        }
        formatted[i++] = '*';
        formatted[i++] = '\n';
    }
    
    
    // Last asterisk line
    for (int j = 0; j < width+2; j++)
    {
        formatted[i++] = '*';
    }
}",0
zhon780,1696316813,2,"int GetMax(int values[], int length)
{
    int max = values[0];
    for (int i = 1; i < length; i++)
    {
        if (max < values[i])
        {
            max = values[i];
        }
    }
    return max;
}

void Histogram(char* formatted, int values[], int width)
{
    int height = GetMax(values, width);
    int i = 0;
    
    // First asterisk line
    for (int j = 0; j < width+2; j++)
    {
        formatted[i++] = '*';
    }
    formatted[i++] = '\n';
    
    // Body lines
    for (int j = height; j > 0; j--)
    {
        formatted[i++] = '*';
        for (int k = 0; k < width; k++)
        {
            if (values[k] >= j)
            {
                formatted[i++] = 'X';
            }
            else
            {
                formatted[i++] = ' ';
            }
        }
        formatted[i++] = '*';
        formatted[i++] = '\n';
    }
    
    
    // Last asterisk line
    for (int j = 0; j < width+2; j++)
    {
        formatted[i++] = '*';
    }
    formatted[i++] = '\0';
}",1
zliu578,1696662286,1,"void Histogram(char* formatted, int* values, int num)
{
	int max = 0;
	for (int i = 0; i < num; i++) {
		if (values[i] > max) {
			max = values[i];
		}
		else {
			max = max;
		}
	}
	for (int i = 0; i < num + 2; i++) {
		formatted[i] = '*';
		if (i == num + 1) {
			formatted[i + 1] = '\0';
		}
	}

	for (int i = 0; i < max; i++) {
		char plot[100];
		plot[num] = '\0';
		for (int j = 0; j < num; j++) {
			if (values[j] + i >= max) {
				plot[j] = 'X';
			}
			else {
				plot[j] = ' ';
			}	
		}
		strcat(formatted, ""\n*"");
		strcat(formatted, plot);
		strcat(formatted, ""*\n"");
	}
	int c = 1;
	while (c <= num + 2) {
		strcat(formatted, ""*"");
		c++;
	}

}",0
zliu578,1696662645,2,"void Histogram(char* formatted, int* values, int num)
{
	int max = 0;
	for (int i = 0; i < num; i++) {
		if (values[i] > max) {
			max = values[i];
		}
		else {
			max = max;
		}
	}
	for (int i = 0; i < num + 2; i++) {
		formatted[i] = '*';
		if (i == num + 1) {
			formatted[i] = '*';
			formatted[i + 1] = '\n';
			formatted[i + 2] = '\0';
		}
	}

	for (int i = 0; i < max; i++) {
		char plot[100];
		plot[num] = '\0';
		for (int j = 0; j < num; j++) {
			if (values[j] + i >= max) {
				plot[j] = 'X';
			}
			else {
				plot[j] = ' ';
			}	
		}
		strcat(formatted, ""*"");
		strcat(formatted, plot);
		strcat(formatted, ""*\n"");
	}
	int c = 1;
	while (c <= num + 2) {
		strcat(formatted, ""*"");
		c++;
	}

}",1
zpen457,1696765201,1,"void Histogram(char *formatted, int *values, int numValues)
{
    int i;
    for(i = 0; i < strlen(formatted); i++){
        formatted[i] = 0;
    }
    
    for (i = 1; i <= numValues + 2; i++){
        strcat(formatted, ""*"");
    }
    strcat(formatted,""\n*"");
    
    int largest = values[0];
    for (i = 0; i < numValues; i++){
        if (values[i] > largest){
            largest = values[i];
        }
    }
    
    int j;
    for (j = largest; j > 0; j--){
        for (i = 0; i < numValues; i++){
            if (values[i] == j){
                strcat(formatted,""X"");
                values[i] = j - 1;
            } else {
                strcat(formatted,"" "");
            }
        }
        strcat(formatted,""*\n*"");
    }
    
    for (i = 1; i <= numValues + 1; i++){
        strcat(formatted, ""*"");
    }
}",1
zshi453,1696813709,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted,int values[],int data_values){
    int i,j,k,store;
    int sorted[data_values];
    int size = data_values;
    
    for (i=0;i<data_values;i++){
        sorted[i] = values[i];
    }
    //strcpy(formatted,"""")
    for (i = 0; i<(data_values+2); i++){
        if (i == (data_values+1)){
            strcat(formatted,""*\n"");
        }
        else{
            strcat(formatted,""*"");
        }
    }
    for (i=0; i<size;i++){
        for (j=i+1;j<size;j++){
            if (sorted[i]==sorted[j]){
                for(k=j;k<size;++k){
                    sorted[k] = sorted[k+1];
                }
                size--;
                j--;
            }
        }
    }
    for (i=0; i<data_values;i++){
        for (j=i+1;j<data_values;j++){
            if (sorted[i]<sorted[j]){
                store = sorted[i];
                sorted[i] = sorted[j];
                sorted[j] = store;
            }
        }
    }


    //printf(""%d\n"",sorted);
    for (i=0; i<sorted[0];i++){
        strcat(formatted,""*"");
        for(j=0;j<data_values;j++){
            if (values[j]>=sorted[i]){
                strcat(formatted,""X"");
            }
            else{
                strcat(formatted,"" "");
            }
        }
        strcat(formatted,""*\n"");
    }
    
        for (i = 0; i<(data_values+2); i++){
            if (i==(data_values+1)){
                strcat(formatted,""*\n"");
            }
            else{
                strcat(formatted,""*"");
            }
        }
    }",0
zshi453,1696814312,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted,int values[],int data_values){
    int i,j,k,store;
    int sorted[data_values];
    int size = data_values;
    formatted[0] = '\0';
    
    for (i=0;i<data_values;i++){
        sorted[i] = values[i];
    }
    //strcpy(formatted,"""")
    for (i = 0; i<(data_values+2); i++){
        if (i == (data_values+1)){
            strcat(formatted,""*\n"");
        }
        else{
            strcat(formatted,""*"");
        }
    }
    for (i=0; i<size;i++){
        for (j=i+1;j<size;j++){
            if (sorted[i]==sorted[j]){
                for(k=j;k<size;++k){
                    sorted[k] = sorted[k+1];
                }
                size--;
                j--;
            }
        }
    }
    for (i=0; i<data_values;i++){
        for (j=i+1;j<data_values;j++){
            if (sorted[i]<sorted[j]){
                store = sorted[i];
                sorted[i] = sorted[j];
                sorted[j] = store;
            }
        }
    }

    for (i=0; i<sorted[0];i++){
        strcat(formatted,""*"");
        for(j=0;j<data_values;j++){
            if (values[j]>=sorted[i]){
                strcat(formatted,""X"");
            }
            else{
                strcat(formatted,"" "");
            }
        }
        strcat(formatted,""*\n"");
    }
    
        for (i = 0; i<(data_values+2); i++){
            if (i==(data_values+1)){
                strcat(formatted,""*\n"");
            }
            else{
                strcat(formatted,""*"");
            }
        }
    }",0
zshi453,1696826919,3,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted,int values[],int data_values){
    int i,j,k,store;
    int size = data_values;
    int max = 0;
    formatted[0] = '\0';
    
    for (i = 0; i<(data_values+2); i++){
        if (i == (data_values+1)){
            strcat(formatted,""*\n"");
        }
        else{
            strcat(formatted,""*"");
        }
    }
    
    for (i=0;i<data_values;i++){
        if (values[i]>max){
            max = values[i];
        }
    }
    for (i=0; i<max;i++){
        strcat(formatted,""*"");
        for(j=0;j<data_values;j++){
            if (values[j]>=(max-i)){
                strcat(formatted,""X"");
            }
            else{
                strcat(formatted,"" "");
            }
        }
        strcat(formatted,""*\n"");
    }
    
        for (i = 0; i<(data_values+2); i++){
            strcat(formatted,""*"");
        }
    }",0
zshi453,1696826954,4,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted,int values[],int data_values){
    int i,j,k;
    int size = data_values;
    int max = 0;
    formatted[0] = '\0';
    
    for (i = 0; i<(data_values+2); i++){
        if (i == (data_values+1)){
            strcat(formatted,""*\n"");
        }
        else{
            strcat(formatted,""*"");
        }
    }
    
    for (i=0;i<data_values;i++){
        if (values[i]>max){
            max = values[i];
        }
    }
    for (i=0; i<max;i++){
        strcat(formatted,""*"");
        for(j=0;j<data_values;j++){
            if (values[j]>=(max-i)){
                strcat(formatted,""X"");
            }
            else{
                strcat(formatted,"" "");
            }
        }
        strcat(formatted,""*\n"");
    }
    
        for (i = 0; i<(data_values+2); i++){
            strcat(formatted,""*"");
        }
    }",0
zshi453,1696826983,5,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted,int values[],int data_values){
    int i,j,k;
    int max = 0;
    formatted[0] = '\0';
    
    for (i = 0; i<(data_values+2); i++){
        if (i == (data_values+1)){
            strcat(formatted,""*\n"");
        }
        else{
            strcat(formatted,""*"");
        }
    }
    
    for (i=0;i<data_values;i++){
        if (values[i]>max){
            max = values[i];
        }
    }
    for (i=0; i<max;i++){
        strcat(formatted,""*"");
        for(j=0;j<data_values;j++){
            if (values[j]>=(max-i)){
                strcat(formatted,""X"");
            }
            else{
                strcat(formatted,"" "");
            }
        }
        strcat(formatted,""*\n"");
    }
    
        for (i = 0; i<(data_values+2); i++){
            strcat(formatted,""*"");
        }
    }",0
zshi453,1696826992,6,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted,int values[],int data_values){
    int i,j;
    int max = 0;
    formatted[0] = '\0';
    
    for (i = 0; i<(data_values+2); i++){
        if (i == (data_values+1)){
            strcat(formatted,""*\n"");
        }
        else{
            strcat(formatted,""*"");
        }
    }
    
    for (i=0;i<data_values;i++){
        if (values[i]>max){
            max = values[i];
        }
    }
    for (i=0; i<max;i++){
        strcat(formatted,""*"");
        for(j=0;j<data_values;j++){
            if (values[j]>=(max-i)){
                strcat(formatted,""X"");
            }
            else{
                strcat(formatted,"" "");
            }
        }
        strcat(formatted,""*\n"");
    }
    
        for (i = 0; i<(data_values+2); i++){
            strcat(formatted,""*"");
        }
    }",1
zwan373,1696727171,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int size) {
    int max_value = 0;
    for (int i = 0; i < size; i++) {
        if (values[i] > max_value) {
            max_value = values[i];
        }
    }
    int idx = 0;
    for (int i = 0; i < max_value + 2; i++) {
        formatted[idx++] = '*';
    }
    formatted[idx++] = '\n';
    
    for (int i = max_value; i > 0; i--) {
        formatted[idx++] = '*';
        for (int j = 0; j < size; j++) {
            formatted[idx++] = (values[j] >= i) ? 'X' : ' ';
        }
        formatted[idx++] = '*';
        formatted[idx++] = '\n';
    }
    
    for (int i = 0; i < max_value + 2; i++) {
        formatted[idx++] = '*';
    }
    formatted[idx++] = '\0';
}",0
zwan373,1696825111,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* formatted, int values[], int size) {
    int max_value = 0;
    for (int i = 0; i < size; i++) {
        if (values[i] > max_value) {
            max_value = values[i];
        }
    }
    
    int idx = 0;
    
    if(size == 1) {
        for (int i = 0; i < 3; i++) {
            formatted[idx++] = '*';
        }
        formatted[idx++] = '\n';
        
        for(int i = 0; i < max_value; i++) {
            formatted[idx++] = '*';
            formatted[idx++] = 'X';
            formatted[idx++] = '*';
            formatted[idx++] = '\n';
        }

        for (int i = 0; i < 3; i++) {
            formatted[idx++] = '*';
        }
        formatted[idx++] = '\0';
        return;
    }
    
    for (int i = 0; i < size + 2; i++) {
        formatted[idx++] = '*';
    }
    formatted[idx++] = '\n';
    
    for (int i = max_value; i > 0; i--) {
        formatted[idx++] = '*';
        for (int j = 0; j < size; j++) {
            formatted[idx++] = (values[j] >= i) ? 'X' : ' ';
        }
        formatted[idx++] = '*';
        formatted[idx++] = '\n';
    }
    
    for (int i = 0; i < size + 2; i++) {
        formatted[idx++] = '*';
    }
    formatted[idx++] = '\0';
}",1
zwon694,1696454686,1,"void Histogram(char *string, int values[], int length)
{
    int i, j, find_max, temp;
    int max = 0;

// find max to use later
    for (find_max = 0; find_max < length; find_max++) {
        temp = values[find_max];
        if (temp > max) {
            max = temp;
        }
    }

    int height = max + 2; // add 2 for the upper and lower border
    int width = length + 3; // add 3 for border and new line character
    int y = height * width; // total length is product of width and height
    int index, row;

    for (i = 0; i <= y; i++) {

        if (((i + 1)%width == 0) && (i != 0) && (i != y) && (i != (y - 1))) {
            // if on the right edge add new line
            string[i] = '\n';
        } else if ((0 <= i) && (i < (width - 1))) {
            // if on top border
            string[i] = '*';
        } else if (((y - (width - 1)) <= i) && (i < (y - 1))) {
            // if on bottom border
            string[i] = '*';
        } else if (string[i - 1] == '\n') {
            // if on left edge
            string[i] = '*';
        } else if (string[i - (width - 1)] == '\n') {
            // if on right edge before the new line
            string[i] = '*';
        } else if (i == (y - 1)) {
            // if at the end of the string
            string[i] = '\0';
        } else {
            string[i] = ' ';
        }
    }

    // iterate through and add X where appropriate
    for (index = 0; index < length; index++) {
        for (row = 1; row <= values[index]; row++) {
            // if value is 3 repeat this 3 times but move one row up each time
            string[(y - (row * width + (width - (index + 2))) - 1)] = 'X';
        }
    }

}",0
zwon694,1696454715,2,"void Histogram(char *string, int values[], int length)
{
    int i, find_max, temp;
    int max = 0;

// find max to use later
    for (find_max = 0; find_max < length; find_max++) {
        temp = values[find_max];
        if (temp > max) {
            max = temp;
        }
    }

    int height = max + 2; // add 2 for the upper and lower border
    int width = length + 3; // add 3 for border and new line character
    int y = height * width; // total length is product of width and height
    int index, row;

    for (i = 0; i <= y; i++) {

        if (((i + 1)%width == 0) && (i != 0) && (i != y) && (i != (y - 1))) {
            // if on the right edge add new line
            string[i] = '\n';
        } else if ((0 <= i) && (i < (width - 1))) {
            // if on top border
            string[i] = '*';
        } else if (((y - (width - 1)) <= i) && (i < (y - 1))) {
            // if on bottom border
            string[i] = '*';
        } else if (string[i - 1] == '\n') {
            // if on left edge
            string[i] = '*';
        } else if (string[i - (width - 1)] == '\n') {
            // if on right edge before the new line
            string[i] = '*';
        } else if (i == (y - 1)) {
            // if at the end of the string
            string[i] = '\0';
        } else {
            string[i] = ' ';
        }
    }

    // iterate through and add X where appropriate
    for (index = 0; index < length; index++) {
        for (row = 1; row <= values[index]; row++) {
            // if value is 3 repeat this 3 times but move one row up each time
            string[(y - (row * width + (width - (index + 2))) - 1)] = 'X';
        }
    }

}",1
zwu591,1696671383,1,"void Histogram(char *histogram, int *array, int len)
{
    int i, data = 0;
    char line_end[1000] = {'*'};
    char line_data[1000] = {'*'};
    
    for (i = 0; i <= len + 1; i++) {
        histogram[i] = '*';
        line_end[i] = '*';
    }

    histogram[len+2] = '\n';
    histogram[len+3] = '\0';

    for (i = 0; i < len; i++) {
        if (array[i] > data) {
            data = array[i];
        }
    }

    while (data != 0) {
        line_data[len+1] = '*';
        line_data[len+2] = '\n';

        for (i = 1; i <= len; i++) {
            if (array[i-1] >= data) {
                line_data[i] = 'X';
            } else {
                line_data[i] = ' '; 
            }
        }

        histogram = strcat(histogram, line_data);
        data--;
    }

    histogram = strcat(histogram, line_end);
}",1
zyao804,1696305493,1,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int* array, int length)
{
    int max = 0;
    for (int i=0;i<length;i++)
    {
        if (max < array[i])
        {
            max = array[i];
        }
    }
    
    int width = length+2;
    int height = max + 2;
    
    for (int i=0;i<width;i++){
        strcat(result,""*"");
    }
    
    strcat(result,""\n"");
    
    
    for (int i=1;i<=max;i++){
        strcat(result,""*"");
        for (int j=0;j<length;j++){
            if (array[j]>=max-i+1){
                strcat(result,""X"");
            }
            else{
                strcat(result,"" "");
            }
       }
       strcat(result,""*\n"");
   }
    for (int i=0;i<width;i++){
        strcat(result,""*"");
    }
}
",0
zyao804,1696305597,2,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int* array, int length)
{
    int max = 0;
    for (int i=0;i<length;i++)
    {
        if (max < array[i])
        {
            max = array[i];
        }
    }
    
    int width = length+2;
    
    for (int i=0;i<width;i++){
        strcat(result,""*"");
    }
    
    strcat(result,""\n"");
    
    
    for (int i=1;i<=max;i++){
        strcat(result,""*"");
        for (int j=0;j<length;j++){
            if (array[j]>=max-i+1){
                strcat(result,""X"");
            }
            else{
                strcat(result,"" "");
            }
       }
       strcat(result,""*\n"");
   }
    for (int i=0;i<width;i++){
        strcat(result,""*"");
    }
}",0
zyao804,1696305755,3,"#include <stdio.h>
#include <string.h>

void Histogram(char* result, int* array, int length)
{
    int max = 0;
    result[0] = '\0';
    for (int i=0;i<length;i++)
    {
        if (max < array[i])
        {
            max = array[i];
        }
    }
    
    int width = length+2;
    
    for (int i=0;i<width;i++){
        strcat(result,""*"");
    }
    
    strcat(result,""\n"");
    
    
    for (int i=1;i<=max;i++){
        strcat(result,""*"");
        for (int j=0;j<length;j++){
            if (array[j]>=max-i+1){
                strcat(result,""X"");
            }
            else{
                strcat(result,"" "");
            }
       }
       strcat(result,""*\n"");
   }
    for (int i=0;i<width;i++){
        strcat(result,""*"");
    }
}",1
zyu100,1696396110,1,"void Histogram(char *formatted, int *values, int length){
    for (int toprow=0;toprow<length+2;toprow++){
        strcat(formatted,""*"");
        
    }
     strcat(formatted,""\n"");
     
int maxVal=0;
for (int i=0;i<length; i++){
    if (values[i]>maxVal){
        maxVal=values[i];
    }
}
for (int jl=maxVal;jl>0;jl--) {
    
        strcat(formatted, ""*"");

        for (int col=0;col<length; col++) {
            if (values[col]>=jl) {
                strcat(formatted,""X"");
            } else {
                strcat(formatted,"" "");
            }
        }
        strcat(formatted, ""*\n"");
    }
for (int botrow=0;botrow<length+2;botrow++){
        strcat(formatted,""*"");
        
    }
   
}",0
zyu100,1696397158,2,"void Histogram(char *formatted, int *values, int length){
    formatted[0]='\0';
    for (int toprow=0;toprow<length+2;toprow++){
        strcat(formatted,""*"");
        
    }
     strcat(formatted,""\n"");
     
int maxVal=0;
for (int i=0;i<length; i++){
    if (values[i]>maxVal){
        maxVal=values[i];
    }
}
for (int jl=maxVal;jl>0;jl--) {
    
        strcat(formatted, ""*"");

        for (int col=0;col<length; col++) {
            if (values[col]>=jl) {
                strcat(formatted,""X"");
            } else {
                strcat(formatted,"" "");
            }
        }
        strcat(formatted, ""*\n"");
    }
for (int botrow=0;botrow<length+2;botrow++){
        strcat(formatted,""*"");
        
    }
}",1
