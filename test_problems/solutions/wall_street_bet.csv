upi,time,try,answer,rawfraction
aahk798,1695616550,1,n/a,0
abha257,1695272529,1,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    for (int i = 1; i < length; ++i) {
        if (prices[0] < prices[i]) {
        largest = prices[i];
        day1 = i;
    }
  }
  for (int i = 1; i < length; ++i) {
        if (prices[0] > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return count;
}",0
abha257,1695272570,2,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    for (int i = 1; i < length; ++i) {
        if (prices[0] < prices[i]) {
        largest = prices[i];
        day1 = i;
    }
  }
  for (int i = 1; i < length; ++i) {
        if (prices[0] > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695272709,3,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    int i;
    int j;
  for (int j = 1; i < length; ++i) {
        if (prices[0] > prices[j]) {
        smallest = prices[j];
        day2 = j;
    }
  }
      for (int i = 1; i < length; ++i) {
        if (prices[0] < prices[i]) {
            if i>j{
                largest = prices[i];
                day1 = i;
            }
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695272729,4,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    int i;
    int j;
  for (int j = 1; i < length; ++i) {
        if (prices[0] > prices[j]) {
        smallest = prices[j];
        day2 = j;
    }
  }
      for (int i = 1; i < length; ++i) {
        if (prices[0] < prices[i]) {
            if (i>day2){
                largest = prices[i];
                day1 = i;
            }
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695272739,5,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
  for (int j = 1; i < length; ++i) {
        if (prices[0] > prices[j]) {
        smallest = prices[j];
        day2 = j;
    }
  }
      for (int i = 1; i < length; ++i) {
        if (prices[0] < prices[i]) {
            if (i>day2){
                largest = prices[i];
                day1 = i;
            }
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695272788,6,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    int i;
    int j;
  for (int j = 1; j < length; ++j) {
        if (prices[0] > prices[j]) {
        smallest = prices[j];
        day2 = j;
    }
  }
      for (int i = 1; i < length; ++i) {
        if (prices[0] < prices[i]) {
            if (i>day2){
                largest = prices[i];
                day1 = i;
            }
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695272859,7,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    int i;
    int j;
  for (int j = 1; j < length; ++j) {
        if (prices[0] > prices[j]) {
        smallest = prices[j];
        day2 = j;
    }
  }
  for (int i = 1; i < length; ++i) {
        if (prices[0] < prices[i]) {
            if (i>day2){
                largest = prices[i];
                day1 = i;
            }
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695272936,8,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    int i;
    int j;
    
  for (int i = 1; i < length; ++i) {
        if (prices[0] > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  for (int j = 1; j < length; ++j) {
        if (prices[0] < prices[j]) {
            if (j>day2){
                largest = prices[j];
                day1 = j;
            }
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695273127,9,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    int i;
    int j;
    
  for (int i = 1; i < length; ++i) {
        if (prices[0] > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  for (int j = day2; j < length; ++j) {
        if (prices[0] < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695273136,10,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;

    
  for (int i = 1; i < length; ++i) {
        if (prices[0] > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  for (int j = day2; j < length; ++j) {
        if (prices[0] < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695273410,11,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    
    smallest =prices[0];
    largest = prices[0];


  for (int i = 1; i < length; ++i) {
        if (smallest > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  for (int j = day2; j < length; ++j) {
        if (largest < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  if (largest == prices[0]){
      printf(""Hold"");
  } else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695273469,12,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    
    smallest =prices[0];
    largest = prices[0];


  for (int i = 1; i < length; ++i) {
        if (smallest > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  for (int j = day2; j < length; ++j) {
        if (largest < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  //if (largest == prices[0]){
  //    printf(""Hold"");
  //} else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  }
  
	return 0;
}",0
abha257,1695273484,13,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    
    smallest =prices[0];
    largest = prices[0];


  for (int i = 1; i < length; ++i) {
        if (smallest > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  for (int j = day2; j < length; ++j) {
        if (largest < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  //if (largest == prices[0]){
  //    printf(""Hold"");
  //} else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  //}
  
	return 0;
}",0
abha257,1695273586,14,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    
    smallest =prices[0];
    largest = prices[0];


  for (int i = 1; i < length; ++i) {
        if (smallest > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  for (int j = day2+1; j < length; ++j) {
        if (largest < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  //if (largest == prices[0]){
  //    printf(""Hold"");
  //} else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  //}
  
	return 0;
}",0
abha257,1695273627,15,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    
    smallest =prices[0];
    largest = prices[0];


  for (int i = 1; i < length; ++i) {
        if (smallest > prices[i]) {
        smallest = prices[i];
        day2 = i;
    }
  }
  for (int j = 1; j < length; ++j) {
        if (largest < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  //if (largest == prices[0]){
  //    printf(""Hold"");
  //} else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  //}
  
	return 0;
}",0
abha257,1695273648,16,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    
    smallest =prices[0];
    largest = prices[0];


  for (int i = 1; i < length; ++i) {
        if (smallest > prices[i]) {
            if i>day2{
        smallest = prices[i];
        day2 = i;
            }
    }
  }
  for (int j = 1; j < length; ++j) {
        if (largest < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  //if (largest == prices[0]){
  //    printf(""Hold"");
  //} else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  //}
  
	return 0;
}",0
abha257,1695273668,17,"int wall_street_bet(double *prices, int length)
{
    double largest;
    int day1;
    double smallest;
    int day2;
    
    smallest =prices[0];
    largest = prices[0];


  for (int i = 1; i < length; ++i) {
        if (smallest > prices[i]) {
            if (i>day2){
        smallest = prices[i];
        day2 = i;
            }
    }
  }
  for (int j = 1; j < length; ++j) {
        if (largest < prices[j]) {
                largest = prices[j];
                day1 = j;
        }
  }
  //if (largest == prices[0]){
  //    printf(""Hold"");
  //} else{
      printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"",smallest,day2,largest,day1);
  //}
  
	return 0;
}",0
abro522,1695094595,1,"void wall_street_bet(double *prices, int length) {
    double profit_win = -1.0;
    int start_win = -1;
    int end_win = -1;
    
    for (int start = 0; start < length; start++) {
        for (int end = start + 1; end < length; end++) {
            double profit = prices[end] - prices[start];
            if (end_win <= start_win || profit > profit_win || (profit >= profit_win && (end-start) < (end_win-start_win))) {
                profit_win = profit;
                start_win = start;
                end_win = end;
            }
        }
    }
    
    if (profit_win <= 0) {
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[start_win], start_win, prices[end_win], end_win);
    }
}",1
acam267,1695522360,1,"void wall_street_bet(double *prices, int length) {
    double maximumProfit = 0.0;
    double minimumPrice = prices[0];
    int buyDay;
    int sellDay;
    int index = 0;
    
    for(int i = 1; i < length; i++) {
        if(minimumPrice > prices[i]) {
            minimumPrice = prices[i];
            index = i;
        }
        double profit = prices[i] - minimumPrice;
        if((profit == maximumProfit && sellDay - buyDay > i - minimumPrice) || profit > maximumProfit) {
            maximumProfit = profit;
            sellDay = i;
            buyDay = index;
        }
    }
    
    if (maximumProfit > 0.0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}",0
acam267,1695626539,2,"void wall_street_bet(double *prices, int length) {
    double maximumProfit = 0.0;
    double minimumPrice = prices[0];
    int buyDay;
    int sellDay;
    int index = 0;
    
    for(int i = 1; i < length; i++) {
        if(minimumPrice > prices[i]) {
            minimumPrice = prices[i];
            index = i;
        }
        double profit = prices[i] - minimumPrice;
        if((profit == maximumProfit && sellDay - buyDay > i - index) || profit > maximumProfit) {
            maximumProfit = profit;
            sellDay = i;
            buyDay = index;
        }
    }
    
    if (maximumProfit > 0.0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}",0
acam267,1695628378,3,"void wall_street_bet(double *prices, int length) {
    double maximumProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;
    
    for(int i = 0; i < length; i++) {
        for (int j = 0; j < length; j++) {
            double profit = prices[j] - prices[i];
            if(profit > maximumProfit || (profit == maximumProfit && i - j < sellDay - buyDay)) {
                buyDay = i;
                sellDay = j;
                maximumProfit = profit;
            }
        }
    }
    
    if(maximumProfit > 0.0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}",0
afal438,1695118974,1,abc,0
agan859,1695457595,1,"void wall_street_bet(double *prices, int length)
{
	int i;
	int j;
	double number = 0;
	double BuyingPrice = 0;
	int BuyingDay = 0;
	double SellingPrice = 0;
	int SellingDay = 0;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if ((prices[j] - prices[i]) > number) {
				number = prices[j] - prices[i];
				BuyingPrice = prices[i];
				BuyingDay = i;
				SellingPrice = prices[j];
				SellingDay = j;
			} else if ((prices[j] - prices[i]) == number && (j - i) < (SellingDay - BuyingDay)) {
				number = prices[j] - prices[i];
				BuyingPrice = prices[i];
				BuyingDay = i;
				SellingPrice = prices[j];
				SellingDay = j;
			}
		}
	}

	if  (number == 0) {
		printf(""Hold\n"");
		return;
	}

	printf(""Buy @ %.2f on %d\n"", BuyingPrice, BuyingDay);
	printf(""Sell @ %.2f on %d\n"", SellingPrice, SellingDay);
}",1
ahas673,1695363478,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>",0
ahas673,1695363527,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)(){
    
}",0
ahus071,1695608309,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
	int dayBuy,daySell;
	dayBuy = daySell = -1; //incase it doesnt want to buy or sell;

	double most_profitable = 0.0;  // the maximum profit so far found

	for (int i = 0; i <length; i++)
	{
		for (int j = i+1; j < length; j++) //stops short selling by using j = i+1
		{
			double current_profit = prices[j] - prices[i];
			//check to see if the current profit is more than the max profit so far OR they are equal and the timeframe is less than the current max profit's timeframe
			if (current_profit > most_profitable ||((current_profit == most_profitable) &&(dayBuy != -1 && daySell != -1 )&&(j - i) < (daySell - dayBuy)))
			  {
				dayBuy = i;
				daySell = j;
				most_profitable = current_profit;
			  }
		}
	}
	 if (dayBuy != -1 && daySell != -1) {
        printf(""Buy %.2lf on day %d\n"", prices[dayBuy], dayBuy);
        printf(""Sell %.2lf on day %d\n"", prices[daySell], daySell);
    } else {
        printf(""Hold\n"");
    }
}
",0
ahus071,1695608354,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
	int dayBuy,daySell;
	dayBuy = daySell = -1; //incase it doesnt want to buy or sell;

	double most_profitable = 0.0;  // the maximum profit so far found

	for (int i = 0; i <length; i++)
	{
		for (int j = i+1; j < length; j++) //stops short selling by using j = i+1
		{
			double current_profit = prices[j] - prices[i];
			//check to see if the current profit is more than the max profit so far OR they are equal and the timeframe is less than the current max profit's timeframe
			if (current_profit > most_profitable ||((current_profit == most_profitable) &&(dayBuy != -1 && daySell != -1 )&&(j - i) < (daySell - dayBuy)))
			  {
				dayBuy = i;
				daySell = j;
				most_profitable = current_profit;
			  }
		}
	}
	 if (dayBuy != -1 && daySell != -1) {
        printf(""Buy @ %.2lf on %d\n"", prices[dayBuy], dayBuy);
        printf(""Sell @ %.2lf on %d\n"", prices[daySell], daySell);
    } else {
        printf(""Hold\n"");
    }
}",1
ajam744,1695332588,1,werjlflkasdf,0
ajhz011,1695107016,1,"#include <stdio.h>

void wall_street_bet(double array[], int numArrayValues)
{
	int i, n, times[2] = { 0 };
	double profit = 0, profit2, prices[2] = { 0 };

	for (i = 0; i < numArrayValues; i++) {
		for (n = 1; n + i < numArrayValues; n++) {
			profit2 = array[n + i] - array[i];
			if (profit2 > profit) {
				profit = profit2;

				prices[0] = array[i];
				prices[1] = array[n + i];

				times[0] = i;
				times[1] = n + i;
			}
			else if ((profit2 == profit) && (n < times[1] - times[0])) {
				prices[0] = array[i];
				prices[1] = array[n + i];

				times[0] = i;
				times[1] = n + i;
			}
		}
	}
	if (profit == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", prices[0], times[0], prices[1], times[1]);
	}
}",1
ajhz318,1695465919,1,"void wall_street_bet(double priceC[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = priceC[j + 1] - priceC[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = priceC[j + 1];
                largestday = (j + 1);
                smallestprice = priceC[i];
                smallestday = i;
                }
                else {

                }
            }
            else {
                trade = 0;
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695465956,2,"void wall_street_bet(double priceC[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = priceC[j + 1] - priceC[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = priceC[j + 1];
                largestday = (j + 1);
                smallestprice = priceC[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695466124,3,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695466309,4,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
    printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);

}",0
ajhz318,1695466326,5,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
        
    }
    printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
    

}",0
ajhz318,1695466333,6,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
        
    }
    printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
    

}",0
ajhz318,1695466338,7,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
        
    }
    printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
    

}",0
ajhz318,1695466416,8,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695466549,9,"int wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695466555,10,"double wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695466561,11,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695467450,12,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695467636,13,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if ((j + 1 - i) > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695467658,14,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < length; j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695467806,15,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695468025,16,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (price[j + 1] = largestprice,price[i] = smallestprice) {
                    if ((j + 1 - i) < (largestday - smallestday)) {
                    largestprice = price[j + 1];
                    largestday = (j + 1);
                    smallestprice = price[i];
                    smallestday = i;
                    }
                }
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695468053,17,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695468173,18,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                if ((j + 1 - i) < (largestday - smallestday)) {
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695468208,19,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                if ((j + 1 - i) < (largestday - smallestday)) {
                largestday = (j + 1);
                smallestday = i;
                }
                }
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472369,20,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                printf(""Largest Day: %d\n"",largestday);
                printf(""Smallest Day: %d\n"",smallestday);
                printf(""LARGEST DIST: %0.2lf\n"",largestdist);            
                printf(""TRADEDIST: %d\n"",shortesttradedist);
                printf(""IIIIIII: %d\n"",i);
                printf(""JJJJJJJ: %d\n\n"",(j + 1));
                
                }
                else if (calctradedist < shortesttradedist) {
                largestday = (j + 1);
                smallestday = i;
                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472387,21,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else if (calctradedist < shortesttradedist) {
                largestday = (j + 1);
                smallestday = i;
                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472469,22,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else if (calctradedist < shortesttradedist) {
                largestday = (j + 1);
                smallestday = i;
                }
                else {
                    
                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472535,23,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else if (calctradedist < shortesttradedist, price[i] = largestday) {
                largestday = (j + 1);
                smallestday = i;
                }
                else {
                    
                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472586,24,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }",0
ajhz318,1695472608,25,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472670,26,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                printf(""Largest Day: %d\n"",largestday);
                printf(""Smallest Day: %d\n"",smallestday);
                printf(""LARGEST DIST: %0.2lf\n"",largestdist);            
                printf(""TRADEDIST: %d\n"",shortesttradedist);
                printf(""IIIIIII: %d\n"",i);
                printf(""JJJJJJJ: %d\n\n"",(j + 1));
                
                }
                else if (calctradedist < shortesttradedist, calculateprice = largestdist) {
                largestday = (j + 1);
                smallestday = i;
                }
                else {

                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472700,27,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                printf(""Largest Day: %d\n"",largestday);
                printf(""Smallest Day: %d\n"",smallestday);
                printf(""LARGEST DIST: %0.2lf\n"",largestdist);            
                printf(""TRADEDIST: %d\n"",shortesttradedist);
                printf(""IIIIIII: %d\n"",i);
                printf(""JJJJJJJ: %d\n\n"",(j + 1));
                
                }
                else if (calculateprice = largestdist) {
                largestday = (j + 1);
                smallestday = i;
                }
                else {

                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472722,28,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                printf(""Largest Day: %d\n"",largestday);
                printf(""Smallest Day: %d\n"",smallestday);
                printf(""LARGEST DIST: %0.2lf\n"",largestdist);            
                printf(""TRADEDIST: %d\n"",shortesttradedist);
                printf(""IIIIIII: %d\n"",i);
                printf(""JJJJJJJ: %d\n\n"",(j + 1));
                
                }
                else if (calctradedist < shortesttradedist, calculateprice = largestdist) {
                largestday = (j + 1);
                smallestday = i;
                }
                else {

                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695472793,29,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                if (calculateprice > largestdist) {
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                }
                else {

                }
            }

        }
        step++;
    }
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695484338,30,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double checkprice;
    double largestdist = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int check = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = i; j < (length - 1); j++) {
            
            calculateprice = price[j] - price[i];
            if ((calculateprice > 0) && (check == 0)){
                calctradedist = (j - i);
                
                if (((price[j] > price[j + 1]) && (calculateprice > checkprice)) || ((calctradedist < largestdist) && (price[j] > price[j + 1]) && (calculateprice == checkprice))) {
                trade = 1;
                check = 1;
                shortesttradedist = (j - i);
                largestdist = calctradedist;
                largestprice = price[j];
                largestday = j;
                smallestprice = price[i];
                smallestday = i;
                checkprice = calculateprice;
                }
                else {

                }
            }

        }
        check = 0;
    }
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695484351,31,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double checkprice;
    double largestdist = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int check = 0;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = i; j < (length - 1); j++) {
            
            calculateprice = price[j] - price[i];
            if ((calculateprice > 0) && (check == 0)){
                calctradedist = (j - i);
                
                if (((price[j] > price[j + 1]) && (calculateprice > checkprice)) || ((calctradedist < largestdist) && (price[j] > price[j + 1]) && (calculateprice == checkprice))) {
                trade = 1;
                check = 1;
                shortesttradedist = (j - i);
                largestdist = calctradedist;
                largestprice = price[j];
                largestday = j;
                smallestprice = price[i];
                smallestday = i;
                checkprice = calculateprice;
                }
                else {

                }
            }

        }
        check = 0;
    }
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695484363,32,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double checkprice;
    double largestdist = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int check = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = i; j < (length - 1); j++) {
            
            calculateprice = price[j] - price[i];
            if ((calculateprice > 0) && (check == 0)){
                calctradedist = (j - i);
                
                if (((price[j] > price[j + 1]) && (calculateprice > checkprice)) || ((calctradedist < largestdist) && (price[j] > price[j + 1]) && (calculateprice == checkprice))) {
                trade = 1;
                check = 1;
                shortesttradedist = (j - i);
                largestdist = calctradedist;
                largestprice = price[j];
                largestday = j;
                smallestprice = price[i];
                smallestday = i;
                checkprice = calculateprice;
                }
                else {

                }
            }

        }
        check = 0;
    }
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695484399,33,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double checkprice;
    double largestdist = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int check = 0;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = i; j < (length - 1); j++) {
            
            calculateprice = price[j] - price[i];
            if ((calculateprice > 0) && (check == 0)){
                calctradedist = (j - i);
                
                if (((price[j] > price[j + 1]) && (calculateprice > checkprice)) || ((calctradedist < largestdist) && (price[j] > price[j + 1]) && (calculateprice == checkprice))) {
                trade = 1;
                check = 1;
                largestdist = calctradedist;
                largestprice = price[j];
                largestday = j;
                smallestprice = price[i];
                smallestday = i;
                checkprice = calculateprice;
                }
                else {

                }
            }

        }
        check = 0;
    }
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695484449,34,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                }
                else if (price[j + 1] == largestday) {
                    if (calctradedist < shortesttradedist) {
                    largestday = (j + 1);
                    smallestday = i;
                    }
                }
                else {

                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695528152,35,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double checkprice;
    double largestdist = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int check = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = i; j < (length - 1); j++) {
            
            calculateprice = price[j] - price[i];
            if ((calculateprice > 0) && (check == 0)){
                calctradedist = (j - i);
                
                if (((price[j] > price[j + 1]) && (calculateprice > checkprice)) || ((calctradedist < largestdist) && (price[j] > price[j + 1]) && (calculateprice == checkprice))){
                    trade = 1;
                    check = 1;
                    shortesttradedist = (j - i);
                    largestdist = calctradedist;
                    largestprice = price[j];
                    largestday = j;
                    smallestprice = price[i];
                    smallestday = i;
                    checkprice = calculateprice;
                } else {

                }
                
            }

        }
        check = 0;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
    if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695528199,36,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double checkprice;
    double largestdist = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int check = 0;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = i; j < (length - 1); j++) {
            
            calculateprice = price[j] - price[i];
            if ((calculateprice > 0) && (check == 0)){
                calctradedist = (j - i);
                
                if (((price[j] > price[j + 1]) && (calculateprice > checkprice)) || ((calctradedist < largestdist) && (price[j] > price[j + 1]) && (calculateprice == checkprice))){
                    trade = 1;
                    check = 1;
                    largestdist = calctradedist;
                    largestprice = price[j];
                    largestday = j;
                    smallestprice = price[i];
                    smallestday = i;
                    checkprice = calculateprice;
                } else {

                }
                
            }

        }
        check = 0;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
    if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695528219,37,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                }
                else if (price[j + 1] == largestday) {
                    if (calctradedist < shortesttradedist) {
                    largestday = (j + 1);
                    smallestday = i;
                    }
                }
                else {

                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695528418,38,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                }
                else if (calctradedist < shortesttradedist) {
                    if (calctradedist < shortesttradedist) {
                    largestday = (j + 1);
                    smallestday = i;
                    }
                }
                else {

                }
                
            }

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695528570,39,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;
    int duplicate = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            if (price[i] == smallestprice, price[j + 1] == largestprice) {
                duplicate = 1;
            }
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                }
                else if (calctradedist < shortesttradedist, duplicate == 1) {
                    if (calctradedist < shortesttradedist) {
                    largestday = (j + 1);
                    smallestday = i;
                    }
                }
                else {

                }
                
            }
            duplicate = 0;

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}

int main(void)
{
	
double pricesF[10] = { 19.00, 19.00, 18.80, 18.85, 18.90, 19.00, 18.95, 18.85, 18.80, 19.00 };
wall_street_bet(pricesF, 10);

    return 0;
}",0
ajhz318,1695528643,40,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;
    int duplicate = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            if (price[i] == smallestprice, price[j + 1] == largestprice) {
                duplicate = 1;
            }
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                }
                else if (calctradedist < shortesttradedist, duplicate == 1) {
                    if (calctradedist < shortesttradedist) {
                    largestday = (j + 1);
                    smallestday = i;
                    }
                }
                else {

                }
                
            }
            duplicate = 0;

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695528660,41,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;
    int duplicate = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            if (price[i] == smallestprice, price[j + 1] == largestprice) {
                duplicate = 1;
            }
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                }
                else if (duplicate == 1) {
                    if (calctradedist < shortesttradedist) {
                    largestday = (j + 1);
                    smallestday = i;
                    }
                }
                else {

                }
                
            }
            duplicate = 0;

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695528669,42,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;
    int duplicate = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            if (price[j + 1] == largestprice) {
                duplicate = 1;
            }
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                }
                else if (duplicate == 1) {
                    if (calctradedist < shortesttradedist) {
                    largestday = (j + 1);
                    smallestday = i;
                    }
                }
                else {

                }
                
            }
            duplicate = 0;

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",0
ajhz318,1695529341,43,"void wall_street_bet(double price[], int length) {
    int i;
    int j;
    double calculateprice;
    double largestdist = 0;
    int step = 0;
    int smallestday;
    double smallestprice;
    int largestday;
    double largestprice;
    int trade = 0;
    int shortesttradedist;
    int calctradedist;
    int duplicate = 0;

    for (i = 0;i < length; i++) {
        for (j = step; j < (length - 1); j++) {

            if (price[i] == smallestprice && price[j + 1] == largestprice) {
                duplicate = 1;
            }
            
            calculateprice = price[j + 1] - price[i];
            if (calculateprice > 0) {
                trade = 1;
                calctradedist = (j + 1 - i);
                
                if (calculateprice > largestdist) {
                shortesttradedist = (j + 1 - i);
                largestdist = calculateprice;
                largestprice = price[j + 1];
                largestday = (j + 1);
                smallestprice = price[i];
                smallestday = i;
                
                }
                else if (duplicate == 1) {
                    if (calctradedist < shortesttradedist) {
                    largestday = (j + 1);
                    smallestday = i;
                    }
                }
                else {

                }
                
            }
            duplicate = 0;

        }
        step++;
    }
    /*printf(""Largest day test: %d\nLargest price test: %0.2lf\nSmallest day test: %d\nSmallest price test: %0.2lf"", largestday, largestprice, smallestday, smallestprice);*/
	if (trade == 1) {
        printf(""Buy @ %0.2lf on %d\nSell @ %0.2lf on %d"", smallestprice, smallestday, largestprice, largestday);
    }
    if (trade == 0) {
        printf(""Hold"");
    }

}",1
ajhz444,1695461542,1,"void wall_street_bet(double* prices, int length)
{
	int i;
	int a = 0;
	for (i = 1; i < length; i++)
	{
		if (prices[i] > prices[0])
		{
			a++;
		}
	}
	if (a == 0)
	{
		printf(""Hold"");
	}
	else
	{
		int j;
		int k;
		int gainIteration;
		int gainTime;
		double highestGain = 0;
		int lowestGainTime = 20;
		int buyTime;
		int sellTime;
		double buyPrice;
		double sellPrice;
		double gain;
		int iteration = 1;
		for (j = 0; j < length; j++)
		{
			for (k = j + 1; k < length; k++)
			{
				gain = prices[k] - prices[j];
				if (gain > highestGain) {
					highestGain = gain;
					gainTime = k - j;
					lowestGainTime = gainTime;
					buyTime = j;
					sellTime = k;
					buyPrice = prices[j];
					sellPrice = prices[k];
				}
				else if (gain == highestGain) {
					gainTime = k - j;
					if (gainTime < lowestGainTime) {
						buyTime = j;
						sellTime = k;
					}
				}
			}
		}
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", buyPrice, buyTime, sellPrice, sellTime);
	}
}",0
ajhz444,1695461578,2,"void wall_street_bet(double* prices, int length)
{
	int i;
	int a = 0;
	for (i = 1; i < length; i++)
	{
		if (prices[i] > prices[0])
		{
			a++;
		}
	}
	if (a == 0)
	{
		printf(""Hold"");
	}
	else
	{
		int j;
		int k;
		int gainIteration;
		int gainTime;
		double highestGain = 0;
		int lowestGainTime = 20;
		int buyTime;
		int sellTime;
		double buyPrice;
		double sellPrice;
		double gain;
		for (j = 0; j < length; j++)
		{
			for (k = j + 1; k < length; k++)
			{
				gain = prices[k] - prices[j];
				if (gain > highestGain) {
					highestGain = gain;
					gainTime = k - j;
					lowestGainTime = gainTime;
					buyTime = j;
					sellTime = k;
					buyPrice = prices[j];
					sellPrice = prices[k];
				}
				else if (gain == highestGain) {
					gainTime = k - j;
					if (gainTime < lowestGainTime) {
						buyTime = j;
						sellTime = k;
					}
				}
			}
		}
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", buyPrice, buyTime, sellPrice, sellTime);
	}
}",0
ajhz444,1695461609,3,"void wall_street_bet(double* prices, int length)
{
	int i;
	int a = 0;
	for (i = 1; i < length; i++)
	{
		if (prices[i] > prices[0])
		{
			a++;
		}
	}
	if (a == 0)
	{
		printf(""Hold"");
	}
	else
	{
		int j;
		int k;
		int gainTime;
		double highestGain = 0;
		int lowestGainTime = 20;
		int buyTime;
		int sellTime;
		double buyPrice;
		double sellPrice;
		double gain;
		for (j = 0; j < length; j++)
		{
			for (k = j + 1; k < length; k++)
			{
				gain = prices[k] - prices[j];
				if (gain > highestGain) {
					highestGain = gain;
					gainTime = k - j;
					lowestGainTime = gainTime;
					buyTime = j;
					sellTime = k;
					buyPrice = prices[j];
					sellPrice = prices[k];
				}
				else if (gain == highestGain) {
					gainTime = k - j;
					if (gainTime < lowestGainTime) {
						buyTime = j;
						sellTime = k;
					}
				}
			}
		}
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", buyPrice, buyTime, sellPrice, sellTime);
	}
}",0
ajhz444,1695461712,4,"void wall_street_bet(double* prices, int length)
{
	int i;
	int a = 0;
	for (i = 1; i < length; i++)
	{
		if (prices[i] > prices[i-1])
		{
			a++;
		}
	}
	if (a == 0)
	{
		printf(""Hold\n"");
	}
	else
	{
		int j;
		int k;
		int gainTime;
		double highestGain = 0;
		int lowestGainTime = 20;
		int buyTime;
		int sellTime;
		double buyPrice;
		double sellPrice;
		double gain;
		for (j = 0; j < length; j++)
		{
			for (k = j + 1; k < length; k++)
			{
				gain = prices[k] - prices[j];
				if (gain > highestGain) {
					highestGain = gain;
					gainTime = k - j;
					lowestGainTime = gainTime;
					buyTime = j;
					sellTime = k;
					buyPrice = prices[j];
					sellPrice = prices[k];
				}
				else if (gain == highestGain) {
					gainTime = k - j;
					if (gainTime < lowestGainTime) {
						buyTime = j;
						sellTime = k;
					}
				}
			}
		}
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", buyPrice, buyTime, sellPrice, sellTime);
	}
}",1
ajin489,1695184032,1,"#include <stdio.h>

 void wall_street_bet(double *prices, int length){
    int i, j, day1, day2 ,gap;
    int old_gap = length + 1;
    double diff = 0;
    double price1, price2;
    for (i = 0; i < length; i++){
        for (j = i+1; j < length; j++){
            if ((prices[j] - prices[i]) > diff){
                diff = prices[j] - prices[i];
                gap = j - i;
                old_gap = gap;
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
            } else if ((prices[j] - prices[i]) == diff){
                if (gap < old_gap) {
                    diff = prices[j] - prices[i];
                    gap = j - i;
                    old_gap = gap;
                    day1 = i;
                    day2 = j;
                    price1 = prices[i];
                    price2 = prices[j];
                }
            }
        }
    }
    if (diff == 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", price1, day1, price2, day2);
    }
}",0
ajin489,1695184382,2,"#include <stdio.h>

 void wall_street_bet(double *prices, int length){
    int i, j, day1, day2 ,gap;
    int old_gap = length + 1;
    double diff = 0;
    double price1, price2;
    for (i = 0; i < length; i++){
        for (j = i+1; j < length; j++){
            if ((prices[j] - prices[i]) > diff){
                diff = prices[j] - prices[i];
                gap = j - i;
                old_gap = gap;
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
            } else if ((prices[j] - prices[i]) == diff){
                if ((j - i) < old_gap) {
                    diff = prices[j] - prices[i];
                    gap = j - i;
                    old_gap = gap;
                    day1 = i;
                    day2 = j;
                    price1 = prices[i];
                    price2 = prices[j];
                }
            }
        }
    }
    if (diff == 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", price1, day1, price2, day2);
    }
}",1
akam677,1695638984,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Not enough data to make a profit
        printf(""Hold\n"");
        return;
    }

    double maxProfit = 0;
    int buyDay = 0;
    int sellDay = 0;
    int currentBuyDay = 0;

    for (int i = 1; i < length; i++) {
        if (prices[i] < prices[currentBuyDay]) {
            currentBuyDay = i;
        } else {
            double profit = prices[i] - prices[currentBuyDay];
            if (profit > maxProfit) {
                maxProfit = profit;
                buyDay = currentBuyDay;
                sellDay = i;
            }
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}

int main() {
    double pricesA[15] = {12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8};
    wall_street_bet(pricesA, 15);
    
    return 0;
}
",0
akam677,1695639522,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;
    int currentBuyDay = 0;

    for (int i = 1; i < length; i++) {
        if (prices[i] - prices[currentBuyDay] > maxProfit) {
            maxProfit = prices[i] - prices[currentBuyDay];
            buyDay = currentBuyDay;
            sellDay = i;
        }
        if (prices[i] < prices[currentBuyDay]) {
            currentBuyDay = i;
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}

int main() {
    double pricesA[15] = {12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8};
    wall_street_bet(pricesA, 15);

    double pricesB[10] = {2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8};
    wall_street_bet(pricesB, 10);

    double pricesC[5] = {100.0, 90.0, 80.0, 70.0, 60.0};
    wall_street_bet(pricesC, 5);

    return 0;
}
",0
amal783,1695171866,1,"void wall_street_bet(double *prices, int length){
    double difference = 0.0;
    int low, high;
    for (int i = 0; i < length-1; i++){
        double temp_diff = 0;
        for (int j = i + 1; j < length; j++){
            if ((prices[j] - prices[i]) > temp_diff){
                temp_diff = prices[j] - prices[i];
            }
        }
        if (temp_diff > difference){
            difference = temp_diff;
            low = i;
            high = j;
        }
    }
    if (difference < 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %lf on %d\n"", prices[low], low);
        printf(""Sell @ %lf on %d"", prices[high], high);
    }

    
}",0
amal783,1695172025,2,"void wall_street_bet(double* prices, int length) {
    double difference = 0.0;
    int low, lowi, high;
    for (int i = 0; i < length - 1; i++) {
        double temp_diff = 0;
        for (int j = i + 1; j < length; j++) {
            if ((prices[j] - prices[i]) > temp_diff) {
                temp_diff = prices[j] - prices[i];
                lowi = j;
            }
        }
        if (temp_diff > difference) {
            difference = temp_diff;
            low = i;
            high = lowi;
        }
    }
    if (difference < 0) {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[low], low);
        printf(""Sell @ %.2lf on %d"", prices[high], high);
    }
}",0
amal783,1695172992,3,"void wall_street_bet(double* prices, int length) {
    double difference = 0.0;
    int lowi, highi;
    for (int i = 0; i < length - 1; i++) {
        double temp_diff = 0;
        int templow, temphigh;
        for (int j = i + 1; j < length; j++) {
            if ((prices[j] - prices[i]) > temp_diff) {
                temp_diff = prices[j] - prices[i];
                templow = i;
                temphigh = j;
            }
        }
        if (temp_diff > difference) {
            difference = temp_diff;
            lowi = templow;
            highi = temphigh;
        }
        else if (temp_diff == difference && difference != 0) {
            if ((temphigh - templow) < (highi - lowi)) {
                lowi = templow;
                highi = temphigh;
            }
        }
    }
    if (difference == 0.0) {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[lowi], lowi);
        printf(""Sell @ %.2lf on %d"", prices[highi], highi);
    }
}",1
amhk647,1695166492,1,"void wall_street_bet(double prices[], int length) {
	double profit = 0; // max price difference between two days
	int startDay = 0; // buying day
	int endDay = 1; // selling day

	int i; // iterator for buying days
	int j; // iterator for selling days
	for (i = 0; i < (length - 1); i++) { // go through the days except the last one because the code takes the difference
		int count = i; // keeps track of the selling day of the last max in the the profits array
		for (j = i + 1; j < length; j++) {
			if ((prices[j] - prices[i]) > profit) { // compares the profits between the last max and other days ahead of it
				profit = prices[j] - prices[i];
				startDay = i;
				endDay = j;
				count = j;
			}
			else if (((prices[j] - prices[i]) == profit) && ((j - i) < (count - i))) { // if they are equal, finds which days are closer to each other
				profit = prices[j] - prices[i];
				startDay = i;
				endDay = j;
				count = j;
			}
		}
	}

	if (profit > 0) {
		printf(""Buy @ %.2f on %d\n"", prices[startDay], startDay);
		printf(""Sell @ %.2f on %d\n"", prices[endDay], endDay);
	}
	else {
		printf(""Hold\n"");
	}
}",0
amhk647,1695167022,2,"void wall_street_bet(double prices[], int length) {
	double profit = 0; // max price difference between two days
	int startDay = 0; // buying day
	int endDay = 1; // selling day

	int i; // iterator for buying days
	int j; // iterator for selling days
	for (i = 0; i < (length - 1); i++) { // go through the days except the last one because the code takes the difference
		for (j = i + 1; j < length; j++) {
			if ((prices[j] - prices[i]) > profit) { // compares the profit between the last max and other days ahead of it
				profit = prices[j] - prices[i];
				startDay = i;
				endDay = j;
			}
			else if (((prices[j] - prices[i]) == profit) && ((j - i) < (endDay - startDay))) { // if they are equal find which days are closer to each other
				profit = prices[j] - prices[i];
				startDay = i;
				endDay = j;
			}
		}
	}

	if (profit > 0) {
		printf(""Buy @ %.2f on %d\n"", prices[startDay], startDay);
		printf(""Sell @ %.2f on %d\n"", prices[endDay], endDay);
	}
	else {
		printf(""Hold\n"");
	}
}",1
arus530,1695111791,1,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days;
    int min = length+1;
    int day1;
    int day2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff > max){
                max = diff;
                days = j - i;

                if (days < min){
                    day1 = i;
                    day2 = j;
                }
            }
        }
    }

    if (day1 == day2){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], day1);
    printf(""Buy @ %.2lf on %d\n"", prices[day2], day2);
    }
}",0
arus530,1695111872,2,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days;
    int min = length+1;
    int day1;
    int day2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff > max){
                max = diff;
                days = j - i;

                if (days < min){
                    day1 = i;
                    day2 = j;
                }
            }
        }
    }

    if (day1 == day2){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], day1);
    printf(""Sell @ %.2lf on %d\n"", prices[day2], day2);
    }
}",0
arus530,1695111987,3,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days;
    int min = length+1;
    int day1;
    int day2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff >= max){
                max = diff;
                days = j - i;

                if (days < min){
                    day1 = i;
                    day2 = j;
                }
            }
        }
    }

    if (day1 == day2){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], day1);
    printf(""Sell @ %.2lf on %d\n"", prices[day2], day2);
    }
}",0
arus530,1695112176,4,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days;
    int min = length+1;
    int day1;
    int day2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff >= max){
                max = diff;
                days = j - i;

                if (days < min){
                    day1 = i;
                    day2 = j;
                    min = days;
                }
            }
        }
    }

    if (max == 0){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], day1);
    printf(""Sell @ %.2lf on %d\n"", prices[day2], day2);
    }
}",0
arus530,1695112210,5,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days;
    int min = length+1;
    int day1;
    int day2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff >= max){
                max = diff;
                days = j - i;

                if (days < min){
                    day1 = i;
                    day2 = j;
                    min = days;
                }
            }
        }
    }

    if (day1 == day2){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], day1);
    printf(""Sell @ %.2lf on %d\n"", prices[day2], day2);
    }
}",0
arus530,1695112524,6,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days;
    int min = length+1;
    int day1;
    int day2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff >= max){
                max = diff;
                days = j - i;

                if (days < min){
                    day1 = i;
                    day2 = j;
                }
            }
        }
    }

    if (day1 == day2){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], day1);
    printf(""Sell @ %.2lf on %d\n"", prices[day2], day2);
    }
}",0
arus530,1695112582,7,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days;
    int min = length+1;
    int day1;
    int day2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff >= max){
                max = diff;
                days = j - i;

                if (days < min){
                    day1 = i;
                    day2 = j;
                }
            }
        }
    }

    if (max == 0){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], day1);
    printf(""Sell @ %.2lf on %d\n"", prices[day2], day2);
    }
}",0
arus530,1695113383,8,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days;
    int min = length+1;
    int day1;
    int day2;
    int fday1;
    int fday2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff > max){
                max = diff;
                days = j - i;
                day1 = i;
                day2 = j;
            }
        }
        if (days < min){
            fday1 = day1;
            fday2 = day2;
        }
    }

    if (max == 0){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], fday1);
    printf(""Sell @ %.2lf on %d\n"", prices[day2], fday2);
    }
}",0
arus530,1695115200,9,"void wall_street_bet(double prices[], int length)
{
    double diff;
    double max = 0;
    int days = 0;
    int day1;
    int day2;

    for ( int i = 0; i < length; i++){
        for ( int j = i+1; j < length; j++){

            diff = prices[j] - prices[i];
            if (diff >= max){

                if (diff == max){
                    if (j-i < days){
                        day1 = i;
                        day2 = j;
                    }
                } else {

                max = diff;
                days = j - i;
                day1 = i;
                day2 = j;
                }
            }
        }
    }
    
    if (max == 0){
        printf(""Hold\n"");
    } else{
    printf(""Buy @ %.2lf on %d\n"", prices[day1], day1);
    printf(""Sell @ %.2lf on %d\n"", prices[day2], day2);
    }
}",1
aski294,1695255169,1,"void wall_street_bet(double prices[], int length)
{
	int i, maxIndex = -1, minIndex = -1;
	double min = DBL_MAX, max = 0;



	for (i = 0; i < length; i++) {
		if (min > prices[i]) {
			min = prices[i];
			minIndex = i;
			max = 0;
			maxIndex = -1;
		}
		else if (max < prices[i]) {
			max = prices[i];
			maxIndex = i;
		}
		else{
			// hold
		}
	}

	printf(""Buy @ %lf on %d\n"", min, minIndex);
	printf(""Sell @ %lf on %d\n"", max, maxIndex);

	return 0;
/* end of function */
}
",0
aski294,1695255187,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <float.h>

void wall_street_bet(double prices[], int length)
{
	int i, maxIndex = -1, minIndex = -1;
	double min = DBL_MAX, max = 0;



	for (i = 0; i < length; i++) {
		if (min > prices[i]) {
			min = prices[i];
			minIndex = i;
			max = 0;
			maxIndex = -1;
		}
		else if (max < prices[i]) {
			max = prices[i];
			maxIndex = i;
		}
		else{
			// hold
		}
	}

	printf(""Buy @ %lf on %d\n"", min, minIndex);
	printf(""Sell @ %lf on %d\n"", max, maxIndex);

	return 0;
/* end of function */
}
",0
aski294,1695255198,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <float.h>

void wall_street_bet(double prices[], int length)
{
	int i, maxIndex = -1, minIndex = -1;
	double min = DBL_MAX, max = 0;



	for (i = 0; i < length; i++) {
		if (min > prices[i]) {
			min = prices[i];
			minIndex = i;
			max = 0;
			maxIndex = -1;
		}
		else if (max < prices[i]) {
			max = prices[i];
			maxIndex = i;
		}
		else{
			// hold
		}
	}

	printf(""Buy @ %lf on %d\n"", min, minIndex);
	printf(""Sell @ %lf on %d\n"", max, maxIndex);

/* end of function */
}
",0
aski294,1695255234,4,"void wall_street_bet(double prices[], int length)
{
	int i, maxIndex = -1, minIndex = -1;
	double min = DBL_MAX, max = 0;



	for (i = 0; i < length; i++) {
		if (min > prices[i]) {
			min = prices[i];
			minIndex = i;
			max = 0;
			maxIndex = -1;
		}
		else if (max < prices[i]) {
			max = prices[i];
			maxIndex = i;
		}
		else{
			// hold
		}
	}

	printf(""Buy @ %.2lf on %d\n"", min, minIndex);
	printf(""Sell @ %.2lf on %d\n"", max, maxIndex);

/* end of function */
}",0
aski294,1695255251,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <float.h>

void wall_street_bet(double prices[], int length)
{
	int i, maxIndex = -1, minIndex = -1;
	double min = DBL_MAX, max = 0;



	for (i = 0; i < length; i++) {
		if (min > prices[i]) {
			min = prices[i];
			minIndex = i;
			max = 0;
			maxIndex = -1;
		}
		else if (max < prices[i]) {
			max = prices[i];
			maxIndex = i;
		}
		else{
			// hold
		}
	}

	printf(""Buy @ %.2lf on %d\n"", min, minIndex);
	printf(""Sell @ %.2lf on %d\n"", max, maxIndex);

/* end of function */
}",0
aski294,1695256102,6,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <float.h>

void wall_street_bet(double prices[], int length)
{
	int i, maxIndex[16] = {-1}, minIndex[16] = {-1}, x = 0, maxGainIndex = -1;
	double min[16] = { DBL_MAX }, max[16] = { 0 }, gain[16] = { 0 } ;



	for (i = 0; i < length; i++) {
		if (min[x] > prices[i]) {
			x++;
			min[x] = prices[i];
			minIndex[x] = i;
			max[x] = 0;
			maxIndex[x] = -1;
		}
		else if (max[x] < prices[i]) {
			max[x] = prices[i];
			maxIndex[x] = i;
		}
		else{
			// hold
		}
	}

	// find largest range
	for (i = 0; i < length; i++) {
		gain[i] = max[i] - min[i];
		if (gain[i - 1] < gain[i] && i > 0) {
			maxGainIndex = i;
		}
	}


	// Display to screen
	if (maxIndex != -1) {
		printf(""Buy @ %.2lf on %d\n"", min[maxGainIndex], minIndex[maxGainIndex]);
		printf(""Sell @ %.2lf on %d\n"", max[maxGainIndex], maxIndex[maxGainIndex]);
	}
	else {
		printf(""Hold"");
	}

/* end of function */
}",0
aski294,1695256167,7,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <float.h>

void wall_street_bet(double prices[], int length)
{
	int i, maxIndex[16] = {-1}, minIndex[16] = {-1}, x = 0, maxGainIndex = -1;
	double min[16] = { DBL_MAX }, max[16] = { 0 }, gain[16] = { 0 } ;



	for (i = 0; i < length; i++) {
		if (min[x] > prices[i]) {
			x++;
			min[x] = prices[i];
			minIndex[x] = i;
			max[x] = 0;
			maxIndex[x] = -1;
		}
		else if (max[x] < prices[i]) {
			max[x] = prices[i];
			maxIndex[x] = i;
		}
		else{
			// hold
		}
	}

	// find largest range
	for (i = 0; i < length; i++) {
		gain[i] = max[i] - min[i];
		if (gain[i - 1] < gain[i] && i > 0) {
			maxGainIndex = i;
		}
	}


	// Display to screen
	if (maxIndex[maxGainIndex] != -1) {
		printf(""Buy @ %.2lf on %d\n"", min[maxGainIndex], minIndex[maxGainIndex]);
		printf(""Sell @ %.2lf on %d\n"", max[maxGainIndex], maxIndex[maxGainIndex]);
	}
	else {
		printf(""Hold"");
	}

/* end of function */
}",0
awri757,1695271130,1,a,0
ayan607,1695469036,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length) 
{
    int lowPosition;
    int highPosition;
    double highestPrice, lowestPrice;

    int x = 1;
    int i,j;
    double difference;
    double temp = 0;
    int date;
    int dateTemp;

    for (i = 0; i  < length - 1; i++) {
        for (j = x; j < length - 1; j++) {
            difference = prices[j] - prices[i];
            date = j - i;
            if (difference > temp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            } else if (difference == temp && date > dateTemp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            }
        }

        x++;
    }
    printf(""Buy @ %.2f on %d\n"", lowestPrice, lowPosition);
    printf(""Sell @ %.2f on %d\n"", highestPrice, highPosition);

}


int main()
{
    double prices[15] = {12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9,
    11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8};

    wall_street_bet(prices, 15);

    return 0;
}",0
ayan607,1695469052,2,"#include <stdio.h>

void wall_street_bet(double prices[], int length) 
{
    int lowPosition;
    int highPosition;
    double highestPrice, lowestPrice;

    int x = 1;
    int i,j;
    double difference;
    double temp = 0;
    int date;
    int dateTemp;

    for (i = 0; i  < length - 1; i++) {
        for (j = x; j < length - 1; j++) {
            difference = prices[j] - prices[i];
            date = j - i;
            if (difference > temp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            } else if (difference == temp && date > dateTemp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            }
        }

        x++;
    }
    printf(""Buy @ %.2f on %d\n"", lowestPrice, lowPosition);
    printf(""Sell @ %.2f on %d\n"", highestPrice, highPosition);

}",0
ayan607,1695469531,3,"#include <stdio.h>

void wall_street_bet(double prices[], int length) 
{
    int lowPosition;
    int highPosition;
    double highestPrice, lowestPrice;

    int x = 1;
    int i,j;
    double difference;
    double temp = 0;
    int date;
    int dateTemp;

    for (i = 0; i  < length - 1; i++) {
        for (j = x; j < length - 1; j++) {
            difference = prices[j] - prices[i];
            date = j - i;
            if (difference > temp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            } else if (difference == temp && date < dateTemp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            }
        }

        x++;
    }

    if (difference <= 0) {
        printf(""Hold"");
    }

    if (difference > 0) {
        printf(""Buy @ %.2f on %d\n"", lowestPrice, lowPosition);
        printf(""Sell @ %.2f on %d\n"", highestPrice, highPosition);
    }

}",0
ayan607,1695469637,4,"#include <stdio.h>

void wall_street_bet(double prices[], int length) 
{
    int lowPosition;
    int highPosition;
    double highestPrice, lowestPrice;

    int x = 1;
    int i,j;
    double difference;
    double temp = 0;
    int date;
    int dateTemp;

    for (i = 0; i  < length - 1; i++) {
        for (j = x; j < length - 1; j++) {
            difference = prices[j] - prices[i];
            date = j - i;
            if (difference > temp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            } else if (difference == temp && date < dateTemp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            }
        }

        x++;
    }

    if (temp <= 0) {
        printf(""Hold"");
    }

    if (temp > 0) {
        printf(""Buy @ %.2f on %d\n"", lowestPrice, lowPosition);
        printf(""Sell @ %.2f on %d\n"", highestPrice, highPosition);
    }

}",0
ayan607,1695472590,5,"#include <stdio.h>

void wall_street_bet(double prices[], int length) 
{
    int lowPosition;
    int highPosition;
    double highestPrice, lowestPrice;

    int x = 1;
    int i,j;
    double difference;
    double temp = 0;
    int date;
    int dateTemp;

    for (i = 0; i  < length - 1; i++) {
        for (j = x; j < length; j++) {
            difference = prices[j] - prices[i];
            date = j - i;
            if (difference > temp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            } else if (difference == temp && date < dateTemp) {
                lowPosition = i;
                lowestPrice = prices[i];
                highPosition = j;
                highestPrice = prices[j];
                temp = difference;
                dateTemp = date;
            }
        }

        x++;
    }

    if (temp <= 0) {
        printf(""Hold"");
    }

    if (temp > 0) {
        printf(""Buy @ %.2f on %d\n"", lowestPrice, lowPosition);
        printf(""Sell @ %.2f on %d\n"", highestPrice, highPosition);
    }

}",1
bcar662,1695615485,1,"void wall_street_bet(double prices[], int length)
{
	int buy = 0;
	int sell = 0;
	double difference;
	double result = 0;
	int distance;
	int buyday = 1;
	int sellday = 1;
	int truebuy;
	int truesell;
	int j = 1;
	int k = 0;
	
	
	for (int i = 0; i < length; i++) {
		if (prices[sell] > prices[buy]) {
			difference = prices[sell] - prices[buy];
			if (result < difference) {
				result = difference;
				truebuy = buy;
				truesell = sell;
			}
			else if(result == difference){
				if (sell - buy < truesell - truebuy) {
					truebuy = buy;
					truesell = sell;
				}
			}
		}
		else{
			buy = sell;
		}
		sell++;
	}

	buyday = truebuy + 1;
	sellday = truesell + 1;

	if (result < 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.1f on %d\n"",prices[truebuy], truebuy);
		printf(""Sell @ %.1f on %d\n"", prices[truesell], truesell);
	}
}",0
bcar662,1695615613,2,"void wall_street_bet(double prices[], int length)
{
	int buy = 0;
	int sell = 0;
	double difference;
	double result = 0;
	int buyday;
	int sellday;
	int truebuy;
	int truesell;
	
	
	for (int i = 0; i < length; i++) {
		if (prices[sell] > prices[buy]) {
			difference = prices[sell] - prices[buy];
			if (result < difference) {
				result = difference;
				truebuy = buy;
				truesell = sell;
			}
			else if(result == difference){
				if (sell - buy < truesell - truebuy) {
					truebuy = buy;
					truesell = sell;
				}
			}
		}
		else{
			buy = sell;
		}
		sell++;
	}

	buyday = truebuy + 1;
	sellday = truesell + 1;

	if (result < 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.1f on %d\n"",prices[truebuy], truebuy);
		printf(""Sell @ %.1f on %d\n"", prices[truesell], truesell);
	}
}",0
bcar662,1695615674,3,"void wall_street_bet(double prices[], int length)
{
	int buy = 0;
	int sell = 0;
	double difference;
	double result = 0;
	int buyday;
	int sellday;
	int truebuy;
	int truesell;
	
	
	for (int i = 0; i < length; i++) {
		if (prices[sell] > prices[buy]) {
			difference = prices[sell] - prices[buy];
			if (result < difference) {
				result = difference;
				truebuy = buy;
				truesell = sell;
			}
			else if(result == difference){
				if (sell - buy < truesell - truebuy) {
					truebuy = buy;
					truesell = sell;
				}
			}
		}
		else{
			buy = sell;
		}
		sell++;
	}

	buyday = truebuy + 1;
	sellday = truesell + 1;

	if (result < 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.1f on %d\n"",prices[truebuy], buyday);
		printf(""Sell @ %.1f on %d\n"", prices[truesell], sellday);
	}
}",0
bcar662,1695615786,4,"void wall_street_bet(double prices[], int length)
{
	int buy = 0;
	int sell = 0;
	double difference;
	double result = 0;
	int truebuy;
	int truesell;
	
	
	for (int i = 0; i < length; i++) {
		if (prices[sell] > prices[buy]) {
			difference = prices[sell] - prices[buy];
			if (result < difference) {
				result = difference;
				truebuy = buy;
				truesell = sell;
			}
			else if(result == difference){
				if (sell - buy < truesell - truebuy) {
					truebuy = buy;
					truesell = sell;
				}
			}
		}
		else{
			buy = sell;
		}
		sell++;
	}

	if (result < 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"",prices[truebuy], truebuy);
		printf(""Sell @ %.2f on %d\n"", prices[truesell], truesell);
	}
}",0
bcar662,1695616504,5,"void wall_street_bet(double prices[], int length)
{
	int buy = 0;
	int sell = 0;
	double difference;
	double result = 0;
	int truebuy;
	int truesell;
	int failcount = 0;
	
	
	for (int i = 0; i < length; i++) {
		if (prices[sell] > prices[buy]) {
			difference = prices[sell] - prices[buy];
			if (result < difference) {
				result = difference;
				truebuy = buy;
				truesell = sell;
			}
			else if(result == difference){
				if (sell - buy < truesell - truebuy) {
					truebuy = buy;
					truesell = sell;
				}
			}
		}
		else{
			buy = sell;
			failcount++;
		}
		sell++;
	}
	
	if (failcount == length) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"",prices[truebuy], truebuy);
		printf(""Sell @ %.2f on %d\n"", prices[truesell], truesell);
	}
}",1
bcha726,1695266310,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length){
    int i = 0, j = 0, buy = 0, sell = 0;
    double maxProfit = 0, profit = 0;

    for (i=0; i<length-1; i++) {
        for (j=i+1; j<length; j++) {

            profit = prices[j] - prices[i];

            if (profit > maxProfit) {
                maxProfit = profit;
                buy = i;
                sell = j;
            }
            else if ((profit == maxProfit) && (j - i < sell - buy)) {
                maxProfit = profit;
                buy = i;
                sell = j;
            } 
            
        }
    }

    if (maxProfit > 0){
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold"");
    }

}",1
bcru157,1695098497,1,no thank you :),0
bcru157,1695099196,2,"int main()
{
    printf(""No Thank you"");
}",0
bcru157,1695099212,3,"int main()
{
    printf(""No Thank you"");
    return 0;
}",0
bguo360,1695004262,1,"void wall_street_bet(double prices[], int length)
{
	int i, j, dayend = length, daystart = 0;
	double max = 0;
	for (i = 0; i < length; i++) {
		for (j = i; j < length; j++) {
			if (max < (prices[j] - prices[i])) {
				max = prices[j] - prices[i];
				dayend = j;
				daystart = i;
			}
			else if (max == (prices[j] - prices[i])) {
				if (((j - i) < (dayend - daystart)) && (!max)) {
					dayend = j;
					daystart = i;
				}

			}

		}
	}
	if (!max) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", prices[daystart], daystart, prices[dayend], dayend);
	}
}",0
bguo360,1695004406,2,"void wall_street_bet(double prices[], int length)
{
	int i, j, dayend = length, daystart = 0;
	double max = 0;
	for (i = 0; i < length; i++) {
		for (j = i; j < length; j++) {
			if (max < (prices[j] - prices[i])) {
				max = prices[j] - prices[i];
				dayend = j;
				daystart = i;
			}
			else if (max == (prices[j] - prices[i])) {
				if (((j - i) < (dayend - daystart)) && (max)) {
					dayend = j;
					daystart = i;
				}

			}

		}
	}
	if (!max) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", prices[daystart], daystart, prices[dayend], dayend);
	}
}",1
bjon836,1695639481,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length<2) {
        printf(""Hold\n"");
        
    return;
    }
    double min_price = prices[0];
    double max_profit = 0;
    int buy_day = 0;
    int sell_day = 0;
    
    for (int i = 1; i < length; i++) {
        if (prices[i] < min_price) {
            min_price = prices[i];
            buy_day = i;
        }
        else if (prices[i] - min_price > max_profit) {
            max_profit = prices[i] - min_price;
            sell_day = i;
        }
}

if (max_profit > 0) {
    printf(""Buy  @ %.2lf on %d\n"", min_price, buy_day);
    printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
}
else {
    printf(""Hold"");
}
}
}",0
bkho028,1695252280,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    for (i = 1; i < length; i++)
    {
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        if (prices[i] - min_price > max_profit)
        {
            sellIndex = i;
            max_profit = prices[sellIndex] - min_price;
        }
    }

    if (max_profit < 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""buy @ %0.2f on %d\n"", min_price, buyIndex);
        printf(""sell @ %0.2f on %d\n"", prices[sellIndex], sellIndex);
    }
}",0
bkho028,1695252311,2,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    for (i = 1; i < length; i++)
    {
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        if (prices[i] - min_price > max_profit)
        {
            sellIndex = i;
            max_profit = prices[sellIndex] - min_price;
        }
    }

    if (max_profit < 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", min_price, buyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[sellIndex], sellIndex);
    }
}",0
bkho028,1695253780,3,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}",0
bkho028,1695253941,4,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = 0;
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}",0
bkho028,1695254025,5,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit || (potential_profit == max_profit && (i - buyIndex < sellIndex - bestBuyIndex)))
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}",0
bkho028,1695254188,6,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = 0;
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}",0
bkho028,1695255762,7,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit || (potential_profit >= max_profit && (i - buyIndex < bestSellIndex - bestBuyIndex)))
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}
",0
bkho028,1695255883,8,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit || (potential_profit >= max_profit && (i - buyIndex < bestSellIndex - bestBuyIndex)))
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}
",0
bkho028,1695255961,9,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit || (potential_profit == max_profit && (i - buyIndex < bestSellIndex - bestBuyIndex)))
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}
",0
bkho028,1695256047,10,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
        else if (potential_profit == max_profit && (i - buyIndex < bestSellIndex - bestBuyIndex))
        {
            sellIndex = i;
            bestBuyIndex = buyIndex; // Update the best buy and sell indices
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}
",0
bkho028,1695256166,11,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", min_price, bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}
",0
bkho028,1695256178,12,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestButIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}
",0
bkho028,1695256190,13,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;
        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
        }
        else if (potential_profit > max_profit)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}
",0
bkho028,1695263464,14,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{

    int buyIndex = 0;
    int sellIndex = 1;
    double min_price = prices[buyIndex];
    double max_profit = prices[sellIndex] - min_price;
    int bestBuyIndex = buyIndex;
    int bestSellIndex = sellIndex;
    double difference = prices[sellIndex] - min_price;
    int lowest_days = length;
    int i;

    if (length < 2)
    {
        printf(""Hold\n"");
        return;
    }
    for (i = 1; i < length; i++)
    {
        double potential_profit = prices[i] - min_price;

        if (prices[i] < min_price)
        {
            buyIndex = i;
            min_price = prices[buyIndex];
            difference = prices[sellIndex] - min_price;
        }
        if (potential_profit > max_profit)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
            lowest_days = prices[sellIndex] - min_price;
        }

        if (potential_profit == max_profit && difference < lowest_days)
        {
            sellIndex = i;
            max_profit = potential_profit;
            bestBuyIndex = buyIndex;
            bestSellIndex = sellIndex;
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[bestBuyIndex], bestBuyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[bestSellIndex], bestSellIndex);
    }
}
",0
bkho028,1695341638,15,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
    int buyIndex;
    double max_profit = 0;
    int sellIndex;
    int shortestperiod = 999999;

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            double buyValue = prices[i];
            double sellValue = prices[j];
            double netChange = sellValue - buyValue;
            int period = j - i;

            if (netChange > max_profit)
            {
                max_profit = netChange;
                buyIndex = i;
                sellIndex = j;
                shortestperiod = period;
            }
            else if (netChange == max_profit)
            {
                if (period < shortestperiod)
                {
                    max_profit = netChange;
                    buyIndex = i;
                    sellIndex = j;
                    shortestperiod = period;
                }
            }
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
        printf(""Buy @ %0.2f on %d\n"", prices[buyIndex], buyIndex);
        printf(""Sell @ %0.2f on %d\n"", prices[sellIndex], sellIndex);
    }
}",1
bli775,1695212609,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Cannot make a profit with less than 2 days of data
        printf(""Hold\n"");
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;
    
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            // Calculate the potential profit if buying on day i and selling on day j
            double potentialProfit = prices[j] - prices[i];
            
            if (potentialProfit > maxProfit || (potentialProfit == maxProfit && (j - i) < (sellDay - buyDay))) {
                // Update maxProfit and buy/sell days if a better opportunity is found
                maxProfit = potentialProfit;
                buyDay = i;
                sellDay = j;
            }
        }
    }
",0
bli775,1695212666,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Cannot make a profit with less than 2 days of data
        printf(""Hold\n"");
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;
    
    if (potentialProfit > maxProfit || (potentialProfit == maxProfit && (j - i) < (sellDay - buyDay))) {
                // Update maxProfit and buy/sell days if a better opportunity is found
                maxProfit = potentialProfit;
                buyDay = i;
                sellDay = j;
            }
        }
    }
    
    if (maxProfit <= 0.0) {
        // No profit can be made
        printf(""Hold\n"");
    } else {
        // Print the optimal buying and selling days and prices
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
}",0
bli775,1695212678,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Cannot make a profit with less than 2 days of data
        printf(""Hold\n"");
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;
    
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            // Calculate the potential profit if buying on day i and selling on day j
            double potentialProfit = prices[j] - prices[i];
            
            if (potentialProfit > maxProfit || (potentialProfit == maxProfit && (j - i) < (sellDay - buyDay))) {
                // Update maxProfit and buy/sell days if a better opportunity is found
                maxProfit = potentialProfit;
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit <= 0.0) {
        // No profit can be made
        printf(""Hold\n"");
    } else {
        // Print the optimal buying and selling days and prices
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
}
",1
bmac148,1695301713,1,int makemoney,0
byiu331,1695022888,1,"void wall_street_bet(double prices[], int number)
{

	int minimum = prices[i];
	int buyDay;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	int maximum = minimum;
	int sellDay;
	for (i = buyDay; i < number; i++) {
		if (prices[i] > maximum) {
			maximum = prices[i];
			sellDay = i;
		}

	}

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d"", minimum, buyDay);
		printf(""Sell @ %.2f on %d"", maximum, sellDay);
	}
}














double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
wall_street_bet(pricesA, 15);

//Output:
//Buy @ 11.50 on 8
//Sell @ 12.20 on 11

double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
wall_street_bet(pricesB, 10);

//Output:
//Buy @ 1.90 on 5
//Sell @ 2.20 on 6

double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
wall_street_bet(pricesC, 5);
",0
byiu331,1695022942,2,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[i];
	int buyDay;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	for (i = buyDay; i < number; i++) {
		if (prices[i] > maximum) {
			maximum = prices[i];
			sellDay = i;
		}

	}

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d"", minimum, buyDay);
		printf(""Sell @ %.2f on %d"", maximum, sellDay);
	}
}














double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
wall_street_bet(pricesA, 15);

//Output:
//Buy @ 11.50 on 8
//Sell @ 12.20 on 11

double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
wall_street_bet(pricesB, 10);

//Output:
//Buy @ 1.90 on 5
//Sell @ 2.20 on 6

double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
wall_street_bet(pricesC, 5);
",0
byiu331,1695022977,3,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	for (i = buyDay; i < number; i++) {
		if (prices[i] > maximum) {
			maximum = prices[i];
			sellDay = i;
		}

	}

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d"", minimum, buyDay);
		printf(""Sell @ %.2f on %d"", maximum, sellDay);
	}
}
",0
byiu331,1695023049,4,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	int i;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	int i;
	for (i = buyDay; i < number; i++) {
		if (prices[i] > maximum) {
			maximum = prices[i];
			sellDay = i;
		}

	}

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d"", minimum, buyDay);
		printf(""Sell @ %.2f on %d"", maximum, sellDay);
	}
}",0
byiu331,1695023106,5,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	int i;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	int j;
	for (j = buyDay; j < number; j++) {
		if (prices[j] > maximum) {
			maximum = prices[j];
			sellDay = j;
		}

	}

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d"", minimum, buyDay);
		printf(""Sell @ %.2f on %d"", maximum, sellDay);
	}
}
",0
byiu331,1695023175,6,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	int i;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	int j;
	for (j = buyDay; j < number; j++) {
		if (prices[j] > maximum) {
			maximum = prices[j];
			sellDay = j;
		}

	}

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d\n"", minimum, buyDay);
		printf(""Sell @ %.2f on %d\n"", maximum, sellDay);
	}
}
",0
byiu331,1695023243,7,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	int i;
	for (i = 0; i < number; i++) {
		if (prices[i] <= minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	int j;
	for (j = buyDay; j < number; j++) {
		if (prices[j] >= maximum) {
			maximum = prices[j];
			sellDay = j;
		}

	}

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d\n"", minimum, buyDay);
		printf(""Sell @ %.2f on %d\n"", maximum, sellDay);
	}
}

",0
byiu331,1695024248,8,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	int i;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	int j;
	for (j = buyDay; j < number; j++) {
		if (prices[j] >= maximum) {
			maximum = prices[j];
			sellDay = j;
		}

	}

	int profit;
	int dayDiff
	profit = maximum - minimum;
	dayDiff = buyDay - sellDay;

	/*if (profit < (maximum - minimum))
	{


	}
	else if (profit == (maximum - minimum)
	{
		if ()

	}*/

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d\n"", minimum, buyDay);
		printf(""Sell @ %.2f on %d\n"", maximum, sellDay);
	}
}
",0
byiu331,1695024312,9,"\void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	int i;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	int j;
	for (j = buyDay; j < number; j++) {
		if (prices[j] >= maximum) {
			maximum = prices[j];
			sellDay = j;
		}

	}

	/*int profit;
	int dayDiff
	profit = maximum - minimum;
	dayDiff = buyDay - sellDay;

	if (profit < (maximum - minimum))
	{


	}
	else if (profit == (maximum - minimum)
	{
		if ()

	}*/

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d\n"", minimum, buyDay);
		printf(""Sell @ %.2f on %d\n"", maximum, sellDay);
	}
}

",0
byiu331,1695024334,10,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	int i;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	int j;
	for (j = buyDay; j < number; j++) {
		if (prices[j] >= maximum) {
			maximum = prices[j];
			sellDay = j;
		}

	}

	/*int profit;
	int dayDiff
	profit = maximum - minimum;
	dayDiff = buyDay - sellDay;

	if (profit < (maximum - minimum))
	{


	}
	else if (profit == (maximum - minimum)
	{
		if ()

	}*/

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d\n"", minimum, buyDay);
		printf(""Sell @ %.2f on %d\n"", maximum, sellDay);
	}
}

",0
byiu331,1695024448,11,"void wall_street_bet(double prices[], int number)
{

	double minimum = prices[0];
	int buyDay;
	int i;
	for (i = 0; i < number; i++) {
		if (prices[i] < minimum) {
			minimum = prices[i];
			buyDay = i;
		}
	}

	double maximum = minimum;
	int sellDay;
	int j;
	for (j = buyDay; j < number; j++) {
		if (prices[j] > maximum) {
			maximum = prices[j];
			sellDay = j;

		}

	}

	/*int profit;
	int dayDiff
	profit = maximum - minimum;
	dayDiff = buyDay - sellDay;

	if (profit < (maximum - minimum))
	{


	}
	else if (profit == (maximum - minimum)
	{
		if ()

	}*/

	if (maximum == minimum) 
	{
		printf(""Hold\n"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d\n"", minimum, buyDay);
		printf(""Sell @ %.2f on %d\n"", maximum, sellDay);
	}
}













/*double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
wall_street_bet(pricesA, 15);

//Output:
//Buy @ 11.50 on 8
//Sell @ 12.20 on 11

double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
wall_street_bet(pricesB, 10);

//Output:
//Buy @ 1.90 on 5
//Sell @ 2.20 on 6

double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
wall_street_bet(pricesC, 5);

//Output:
//Hold
*/
",0
byul423,1695190415,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void wall_street_bet(double prices[], int length)
{
	double max = prices[0];
	double min = prices[0];
	double difference = 0;
	int min_idx = 0;
	int buy = 0;
	int sell = 0;

	for (int i = 0; i < length; i++) {

		if (prices[i] > max) {
			max = prices[i];
		}
		if (prices[i] < min) {
			min = prices[i];
		}

		if ((prices[i] - prices[min_idx]) > difference) {
			difference = prices[i] - prices[min_idx];
			buy = min_idx;
			sell = i;
		}

		if (prices[i] < prices[min_idx]) {
			min_idx = i;
		}
	}
	if (buy == sell) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %0.2f on %d\n"", prices[buy], buy);
		printf(""Sell @ %0.2f on %d\n"", prices[sell], sell);
	}
}",0
byul423,1695256562,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void wall_street_bet(double prices[], int length)
{
	double max = prices[0];
	double min = prices[0];
	double difference = 0;
	int min_idx = 0;
	int buy = 0;
	int sell = 0;
	int buy_day = 0;
	int sell_day = 0;
	int other = 0;

	for (int i = 0; i < length; i++) {

		if (prices[i] > max) {
			max = prices[i];
		}
		if (prices[i] < min) {
			min = prices[i];
		}

		if ((prices[i] - prices[min_idx]) > difference) {
			difference = prices[i] - prices[min_idx];
			buy = min_idx;
			sell = i;
		}

		if (prices[i] < prices[min_idx]) {
			min_idx = i;
		}

		if (prices[i] == min) {
			other = i;
		}

		if (prices[i] - prices[min_idx] == difference) {
			if ((i - other) < (sell - buy)) {
				buy = other;
				sell = i;
			}
		}
	}

	if (buy == sell) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %0.2f on %d\n"", prices[buy], buy);
		printf(""Sell @ %0.2f on %d\n"", prices[sell], sell);
	}
}
",0
byul423,1695256582,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void wall_street_bet(double prices[], int length)
{
	double max = prices[0];
	double min = prices[0];
	double difference = 0;
	int min_idx = 0;
	int buy = 0;
	int sell = 0;
	int other = 0;

	for (int i = 0; i < length; i++) {

		if (prices[i] > max) {
			max = prices[i];
		}
		if (prices[i] < min) {
			min = prices[i];
		}

		if ((prices[i] - prices[min_idx]) > difference) {
			difference = prices[i] - prices[min_idx];
			buy = min_idx;
			sell = i;
		}

		if (prices[i] < prices[min_idx]) {
			min_idx = i;
		}

		if (prices[i] == min) {
			other = i;
		}

		if (prices[i] - prices[min_idx] == difference) {
			if ((i - other) < (sell - buy)) {
				buy = other;
				sell = i;
			}
		}
	}

	if (buy == sell) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %0.2f on %d\n"", prices[buy], buy);
		printf(""Sell @ %0.2f on %d\n"", prices[sell], sell);
	}
}
",1
cana544,1695467761,1,"#include <stdio.h>

int main(void) {
    int x = 0;
    return 0
}",0
cang688,1695446648,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length) {
    double maxProfit = 0.0;
    int posMin = 0;
    int posMax = 0;

    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length + 1; j++) {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit) {
                maxProfit = profit;
                posMin = i;
                posMax = j;
            } else if (profit == maxProfit && (j - i) < (posMax - posMin)) {
                posMin = i;
                posMax = j;
            }
        }
    }

    if (maxProfit > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[posMin], posMin);
        printf(""Sell @ %.2lf on %d"", prices[posMax], posMax);
    } else {
        printf(""Hold"");
    }
}",0
cbee072,1695095960,1,"#include <stdio.h>

int wall_street_bet(double array[], int length)
{
    double MinP = array[1];
    double MaxP = array[1];
    int MinD = 0;
    int MaxD = 1;
    int i = 0;
    int j = 0;
    double Difference = array[1] - array[0];

    
    for (i = 0; i < length; i++) {
        if (array[i] < MinP) {
            MinP = array[i];
            MinD = i;
        }
    }
    if ()
    
    for (j = MinD; j < length; j++)
    {
        Difference = array[j] - MinP;
        if (Difference > (MaxP - MinP)) 
        {
            MaxP = array[j];
        }
        
    }
    
    printf(""Buy @ %.2lf on %d\n"", MinP, MinD);
    printf(""Sell @ %0.2lf on %d"", MaxP, MaxD);
    
}
",0
cbro223,1695098708,1,"void wall_street_bet(double prices[], int length)
{
    double maxProfit = 0;

    int buyDay = 0;
    int sellDay = 0;

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            double profit = prices[j] - prices[i];

            if (profit > maxProfit)
            {
                buyDay = i;
                sellDay = j;
                maxProfit = profit;
            }

            else if (profit == maxProfit)
            {
                int originalDistanceBetweenDays = sellDay - buyDay;
                int currentDistanceBetweenDays = j - i;

                if (currentDistanceBetweenDays < originalDistanceBetweenDays)
                {
                    buyDay = i;
                    sellDay = j;
                    maxProfit = profit;
                }
            }
        }
    }

    // Check if profitable
    if (maxProfit != 0)
    {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else
    {
        printf(""Hold"");
    }
}",1
ccha663,1695603738,1,"void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return; // Not enough data to make a profit
    }

    int buy_day = 0;
    int sell_day = 0;
    double max_profit = 0.0;
    double min_price = prices[0];

    for (int i = 1; i < length; i++) {
        if (prices[i] < min_price) {
            min_price = prices[i];
            buy_day = i;
            sell_day = i; // Reset sell_day to ensure a new buy day is chosen
        } else if (prices[i] - min_price > max_profit) {
            max_profit = prices[i] - min_price;
            sell_day = i;
        }
    }",0
ccha663,1695603776,2,"void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return; // Not enough data to make a profit
    }

    int buy_day = 0;
    int sell_day = 0;
    double max_profit = 0.0;
    double min_price = prices[0];

    for (int i = 1; i < length; i++) {
        if (prices[i] < min_price) {
            min_price = prices[i];
            buy_day = i;
            sell_day = i; // Reset sell_day to ensure a new buy day is chosen
        } else if (prices[i] - min_price > max_profit) {
            max_profit = prices[i] - min_price;
            sell_day = i;
        }
    }
    
}",0
ccha663,1695603834,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return; // Not enough data to make a profit
    }

    double max_profit = 0.0;
    double min_price = prices[0];
    int buy_day = 0;

    for (int i = 1; i < length; i++) {
        if (prices[i] < min_price) {
            min_price = prices[i];
            buy_day = i;
        } else if (prices[i] - min_price > max_profit) {
            max_profit = prices[i] - min_price;
        }
    }

    if (max_profit > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", min_price, buy_day);
        printf(""Sell @ %.2lf on %d\n"", min_price + max_profit, buy_day);
    } else {
        printf(""Hold\n"");
    }
}

",0
cche441,1695108231,1,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];

            if (current_difference > final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf at %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf at %i"", sell_price, sell_time);
    }
}",0
cche441,1695108267,2,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];

            if (current_difference > final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108531,3,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference > final_difference && current_difference < final_time_difference)
            {
                final_difference = current_difference;
                final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108574,4,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference > final_difference && current_time_difference < final_time_difference)
            {
                final_difference = current_difference;
                final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108617,5,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if ((current_difference > final_difference) && (current_time_difference < final_time_difference))
            {
                final_difference = current_difference;
                final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108660,6,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 0, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108723,7,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    //int final_time_difference = 0, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108752,8,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 0, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108774,9,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108827,10,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    //int final_time_difference = 0, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            //current_time_difference = j - i;

            if (current_difference > final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108866,11,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    //int final_time_difference = 0, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            //current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108886,12,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    //int final_time_difference = 0, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            //current_time_difference = j - i;

            if (current_difference > final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108903,13,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    //int final_time_difference = 0, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            //current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108983,14,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                if (current_time_difference > final_time_difference)
                {
                    final_difference = current_difference;
                    final_time_difference = current_time_difference;
                    buy_time = i;
                    buy_price = prices[i];
                    sell_time = j;
                    sell_price = prices[j];
                }
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695108998,15,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                if (current_time_difference < final_time_difference)
                {
                    final_difference = current_difference;
                    final_time_difference = current_time_difference;
                    buy_time = i;
                    buy_price = prices[i];
                    sell_time = j;
                    sell_price = prices[j];
                }
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695109122,16,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695109144,17,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    //int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            //current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                //final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695109405,18,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    //int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            //current_time_difference = j - i;

            if (current_difference > final_difference)
            {
                final_difference = current_difference;
                //final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695109416,19,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    //int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            //current_time_difference = j - i;

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                //final_time_difference = current_time_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695109471,20,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int final_time_difference = 1000, current_time_difference = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];
            current_time_difference = j - i;

            if (current_difference >= final_difference && current_time_difference < final_time_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
                final_time_difference = current_time_difference;
                printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
                printf(""Sell @ %.2lf on %i\n"", sell_price, sell_time);
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695109970,21,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int record = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];

            if (current_difference >= final_difference)
            {
                if(record == 0)
                {
                    record == 1;
                    final_difference = current_difference;
                    buy_time = i;
                    buy_price = prices[i];
                    sell_time = j;
                    sell_price = prices[j];
                    printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
                    printf(""Sell @ %.2lf on %i\n"", sell_price, sell_time);
                }
                else{
                    if((j - i) < (sell_time - buy_time))
                    {
                        final_difference = current_difference;
                        buy_time = i;
                        buy_price = prices[i];
                        sell_time = j;
                        sell_price = prices[j];
                        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
                        printf(""Sell @ %.2lf on %i\n"", sell_price, sell_time);
                    }
                }
                
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695109991,22,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    int record = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];

            if (current_difference >= final_difference)
            {
                if(record == 0)
                {
                    record = 1;
                    final_difference = current_difference;
                    buy_time = i;
                    buy_price = prices[i];
                    sell_time = j;
                    sell_price = prices[j];
                    printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
                    printf(""Sell @ %.2lf on %i\n"", sell_price, sell_time);
                }
                else{
                    if((j - i) < (sell_time - buy_time))
                    {
                        final_difference = current_difference;
                        buy_time = i;
                        buy_price = prices[i];
                        sell_time = j;
                        sell_price = prices[j];
                        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
                        printf(""Sell @ %.2lf on %i\n"", sell_price, sell_time);
                    }
                }
                
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695110120,23,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
                printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
                printf(""Sell @ %.2lf on %i\n"", sell_price, sell_time);
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695110135,24,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];

            if (current_difference >= final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
                //printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
                //printf(""Sell @ %.2lf on %i\n"", sell_price, sell_time);
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695110307,25,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];

            if (current_difference > final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
                //printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
                //printf(""Sell @ %.2lf on %i\n"", sell_price, sell_time);
            }
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",0
cche441,1695110429,26,"void wall_street_bet(double *prices, int length)
{
    int buy_time = 0, sell_time = 0;
    double final_difference = 0, current_difference;
    double buy_price = prices[0], sell_price = prices[0];

    for (int i = 0; i < length; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            current_difference = prices[j] - prices[i];

            if (current_difference > final_difference)
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
            else if (current_difference == final_difference && (j-i)<(sell_time-buy_time))
            {
                final_difference = current_difference;
                buy_time = i;
                buy_price = prices[i];
                sell_time = j;
                sell_price = prices[j];
            }
            
        }

    }

    if (final_difference == 0)
    {
        printf(""Hold"");
    }

    else
    {
        printf(""Buy @ %.2lf on %i\n"", buy_price, buy_time);
        printf(""Sell @ %.2lf on %i"", sell_price, sell_time);
    }
}",1
cdel568,1695095008,1,"void wall_street_bet(double *prices, int length)
{
    double profit = 0;
    double currentprofit;
    int buyday = 0;
    int sellday = length - 1;

    for (int i = 0; i < length; i++) {
        for (int p = i; p < length; p++) {
            currentprofit = prices[p] - prices[i];

            if (currentprofit == profit && p - i < sellday - buyday) {
                sellday = p;
                buyday = i;
            }
            
            if (currentprofit > profit) {
                profit = currentprofit;
                sellday = p;
                buyday = i;
            }
        }
    }
if (profit <= 0) {
    printf(""Hold\n"");
}
else {
    printf(""Buy @ %.2lf on %d\n"", prices[buyday], buyday);
    printf(""Sell @ %.2lf on %d\n"", prices[sellday], sellday);
}
printf(""%lf"", profit);

}",0
cdel568,1695095080,2,"void wall_street_bet(double *prices, int length)
{
    double profit = 0;
    double currentprofit;
    int buyday = 0;
    int sellday = length - 1;

    for (int i = 0; i < length; i++) {
        for (int p = i; p < length; p++) {
            currentprofit = prices[p] - prices[i];

            if (currentprofit == profit && p - i < sellday - buyday) {
                sellday = p;
                buyday = i;
            }
            
            if (currentprofit > profit) {
                profit = currentprofit;
                sellday = p;
                buyday = i;
            }
        }
    }
if (profit <= 0) {
    printf(""Hold\n"");
}
else {
    printf(""Buy @ %.2lf on %d\n"", prices[buyday], buyday);
    printf(""Sell @ %.2lf on %d\n"", prices[sellday], sellday);
}
//printf(""%lf"", profit);

}",1
cdin152,1695547071,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double stockprice[], int length)
{
	int buy_day, sell_day, i, j;
	double buy_price, sell_price;
	
	buy_price = stockprice[0];
	for (i = 1; i < length-1; i++) {
		if (stockprice[i]<=buy_price) {
			buy_price = stockprice[i];
			buy_day = i;
		}
	}
	sell_price = stockprice[buy_day + 1];
	for (j = buy_day+2; j < length; j++) {
		if (stockprice[j] > sell_price) {
			sell_price = stockprice[j];
			sell_day = j;
		}
	}
	if (sell_price <= buy_price) {
		printf(""holds"");
	} else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"",
			buy_price, buy_day, sell_price, sell_day);
	}

}",0
cdin152,1695547225,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double stockprice[], int length)
{
	int buy_day, sell_day, i, j;
	double buy_price, sell_price;
	
	buy_price = stockprice[0];
	for (i = 1; i < length-1; i++) {
		if (stockprice[i]<buy_price) {
			buy_price = stockprice[i];
			buy_day = i;
		}
	}
	sell_price = stockprice[buy_day + 1];
	for (j = buy_day+2; j < length; j++) {
		if (stockprice[j] > sell_price) {
			sell_price = stockprice[j];
			sell_day = j;
		}
	}
	if (sell_price <= buy_price) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"",
			buy_price, buy_day, sell_price, sell_day);
	}

}",0
cdin152,1695548452,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double stockprice[], int length)
{
	int buy_day, sell_day, i, j;
	double difference, profit = 0, buy_price, sell_price;

	for (i = 0; i < length-1; i++) {
		for (j = i+1; j < length; j++) {
			difference = stockprice[j] - stockprice[i];
			if (difference > profit) {
				profit = difference;
				buy_day = i;
				sell_day = j;
				buy_price = stockprice[i];
				sell_price = stockprice[j];
			} 
		}
	}
	if (profit == 0) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"",
			buy_price, buy_day, sell_price, sell_day);
	}

}",0
cgaz516,1695360761,1,"void wall_street_bet(double *prices, int length)
{
	// Initialise a difference value with the 1st and 2nd values in array
	double max_difference = prices[1] - prices[0];
	double buy_price = prices[0];
	int buy_day = 0;
	double sell_price = prices[1];
	int sell_day = 1;
	double tie_array[100];

	// For each value compare with every other value, and if the difference of 
	// those values is greater than initialised difference, then it is the new max_difference
	for (int i = 0; i < length; i++) {
		for (int j = i+1; j < length; j++) {

			if ((prices[j] - prices[i]) > max_difference) {
				max_difference = prices[j] - prices[i];

				buy_price = prices[i];
				buy_day = i;
				sell_price = prices[j];
				sell_day = j;
			}
		}
	}

	// If profit is made then print when the profit is made
	if (max_difference > 0) {
		printf(""Buy @ %.2f on %i\n"", buy_price, buy_day);
		printf(""Sell @ %.2f on %i"", sell_price, sell_day);
	}

	// If profit isn't made then print ""Hold""
	else {
		printf(""Hold"");
	}
}",0
cgaz516,1695360773,2,"void wall_street_bet(double *prices, int length)
{
	// Initialise a difference value with the 1st and 2nd values in array
	double max_difference = prices[1] - prices[0];
	double buy_price = prices[0];
	int buy_day = 0;
	double sell_price = prices[1];
	int sell_day = 1;

	// For each value compare with every other value, and if the difference of 
	// those values is greater than initialised difference, then it is the new max_difference
	for (int i = 0; i < length; i++) {
		for (int j = i+1; j < length; j++) {

			if ((prices[j] - prices[i]) > max_difference) {
				max_difference = prices[j] - prices[i];

				buy_price = prices[i];
				buy_day = i;
				sell_price = prices[j];
				sell_day = j;
			}
		}
	}

	// If profit is made then print when the profit is made
	if (max_difference > 0) {
		printf(""Buy @ %.2f on %i\n"", buy_price, buy_day);
		printf(""Sell @ %.2f on %i"", sell_price, sell_day);
	}

	// If profit isn't made then print ""Hold""
	else {
		printf(""Hold"");
	}
}",0
civa625,1695212375,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
    // Calculate the best time to buy and sell in order to maximise profit.
    
    int i, j;
    double difference;
    
    // Calculating all the profits from each possible day.
    for (i = 0; i < length; i++) {
        j = i;
        while (i < (j + 1)) {
            if (j < (length - 1)) {
                difference = prices[j+1] - prices[i];
                j++;
                }
            else {
                break;
                i++;
            }
        }
    }

}",0
cmia215,1695187102,1,"#include <stdio.h>


void wall_street_bet(double* prices, int length) {
	int i, j, distance, tempdistance, buyday, sellday;
	double diff, tempdiff;
	diff = 0;
	distance = length;
    for (i = 0; i < length; i++) {
		for (j = i+1; j < length; j++) {
			tempdiff = prices[j] - prices[i];
	
			if (tempdiff > diff){
				diff = tempdiff;
				tempdistance = j - i;
			

					distance = tempdistance;
					buyday = i;
					sellday = j;
			

			}
			else if (tempdiff == diff) {
				tempdistance = j - i;
				if (tempdistance < distance) {
					buyday = i;
					sellday = j;
					diff = tempdiff;
					tempdistance = j - i;
				}

			}

		}

    }
	if (diff == 0) {
		printf(""Hold"");
	}

	printf(""Buy @ %lf on %d\n"", prices[buyday], buyday);
	printf(""Sell @ %lf on %d\n"", prices[sellday], sellday);

}",0
cmia215,1695187258,2,"#include <stdio.h>


void wall_street_bet(double* prices, int length) {
	int i, j, distance, tempdistance, buyday, sellday;
	double diff, tempdiff;
	diff = 0;
	distance = length;
    for (i = 0; i < length; i++) {
		for (j = i+1; j < length; j++) {
			tempdiff = prices[j] - prices[i];
	
			if (tempdiff > diff){
				diff = tempdiff;
				tempdistance = j - i;
			

					distance = tempdistance;
					buyday = i;
					sellday = j;
			

			}
			else if (tempdiff == diff) {
				tempdistance = j - i;
				if (tempdistance < distance) {
					buyday = i;
					sellday = j;
					diff = tempdiff;
					tempdistance = j - i;
				}

			}

		}

    }
	if (diff == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[buyday], buyday);
		printf(""Sell @ %.2lf on %d\n"", prices[sellday], sellday);
	}
}
",1
cmia215,1695187268,3,"


void wall_street_bet(double* prices, int length) {
	int i, j, distance, tempdistance, buyday, sellday;
	double diff, tempdiff;
	diff = 0;
	distance = length;
    for (i = 0; i < length; i++) {
		for (j = i+1; j < length; j++) {
			tempdiff = prices[j] - prices[i];
	
			if (tempdiff > diff){
				diff = tempdiff;
				tempdistance = j - i;
			

					distance = tempdistance;
					buyday = i;
					sellday = j;
			

			}
			else if (tempdiff == diff) {
				tempdistance = j - i;
				if (tempdistance < distance) {
					buyday = i;
					sellday = j;
					diff = tempdiff;
					tempdistance = j - i;
				}

			}

		}

    }
	if (diff == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[buyday], buyday);
		printf(""Sell @ %.2lf on %d\n"", prices[sellday], sellday);
	}
}
",1
cmia215,1695189406,4,"
void wall_street_bet(double* prices, int length) {
	int i, j, distance, tempdistance, buyday, sellday;
	double diff, tempdiff;
	diff = 0;
	distance = length;
    for (i = 0; i < length; i++) {
		for (j = i+1; j < length; j++) {
			tempdiff = prices[j] - prices[i];
	
			if (tempdiff > diff){
				diff = tempdiff;
				tempdistance = j - i;
			

					distance = tempdistance;
					buyday = i;
					sellday = j;
			

			}
			else if (tempdiff == diff) {
				tempdistance = j - i;
				if (tempdistance < distance) {
					buyday = i;
					sellday = j;
					diff = tempdiff;
					tempdistance = j - i;
				}

			}

		}

    }
	if (diff == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[buyday], buyday);
		printf(""Sell @ %.2lf on %d\n"", prices[sellday], sellday);
	}
}
",1
cmot464,1695163510,1,"#include <stdio.h>

// wall street bets market predicter
void wall_street_bet(double prices[], int length) // I think the pointer thing was for if you were to sort it (the OG array? not copy)
{
    // definition of variables - pre set max and min to compare
    int i, j, dayBuy, daySell;
    int distance;
    int currentDistance; // doesnt matter as first value will always be set b4 distance matters as any profit is > 0
    double profit;
    double currentProfit = 0;


    for(j = 0; j < length; j++) // create diff matrix (j is selling, i is buying)
    {
        for(i = 0; i < length; i++)
        {
            profit = prices[j] - prices[i];
            distance = j - i;

            if((profit > currentProfit) && (distance > 0))
            {
                currentProfit = prices[j] - prices[i];
                currentDistance = j - i;
                dayBuy = i;
                daySell = j;
            }

            else if((profit == currentProfit) && (distance < currentDistance))
            {
                currentDistance = j - i;
                dayBuy = i;
                daySell = j;
            }
        }
    }
    
    if(currentProfit <= 0)
    {
        printf(""Hold"");
    }
    else 
    {
        printf(""Buy @ %.2f on %d\n"", prices[dayBuy], dayBuy);
        printf(""Sell @ %.2f on %d\n"", prices[daySell], daySell);
    }


}

int main(void) {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);
    printf(""\n"");
    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);
    printf(""\n"");
    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);
}",0
cmot464,1695163541,2,"// wall street bets market predicter
void wall_street_bet(double prices[], int length) // I think the pointer thing was for if you were to sort it (the OG array? not copy)
{
    // definition of variables - pre set max and min to compare
    int i, j, dayBuy, daySell;
    int distance;
    int currentDistance; // doesnt matter as first value will always be set b4 distance matters as any profit is > 0
    double profit;
    double currentProfit = 0;


    for(j = 0; j < length; j++) // create diff matrix (j is selling, i is buying)
    {
        for(i = 0; i < length; i++)
        {
            profit = prices[j] - prices[i];
            distance = j - i;

            if((profit > currentProfit) && (distance > 0))
            {
                currentProfit = prices[j] - prices[i];
                currentDistance = j - i;
                dayBuy = i;
                daySell = j;
            }

            else if((profit == currentProfit) && (distance < currentDistance))
            {
                currentDistance = j - i;
                dayBuy = i;
                daySell = j;
            }
        }
    }
    
    if(currentProfit <= 0)
    {
        printf(""Hold"");
    }
    else 
    {
        printf(""Buy @ %.2f on %d\n"", prices[dayBuy], dayBuy);
        printf(""Sell @ %.2f on %d\n"", prices[daySell], daySell);
    }
}",0
cmot464,1695165475,3,"void wall_street_bet(double prices[], int length) // I think the pointer thing was for if you were to sort it (the OG array? not copy)
{
    // definition of variables - pre set max and min to compare
    int i, j, dayBuy, daySell;
    int distance;
    int currentDistance; // doesnt matter as first value will always be set b4 distance matters as any profit is > 0
    double profit;
    double currentProfit = 0;


    for(j = 0; j < length; j++) // create diff matrix (j is selling, i is buying)
    {
        for(i = 0; i < length; i++)
        {
            profit = prices[j] - prices[i];
            distance = j - i;

            if((distance > 0) && (profit > currentProfit))
            {
                currentProfit = prices[j] - prices[i];
                currentDistance = j - i;
                dayBuy = i;
                daySell = j;
            }

            else if (profit == currentProfit && distance < currentDistance && distance > 0)
            {
                currentDistance = j - i;
                dayBuy = i;
                daySell = j;
            }
        }
    }
    
    if(currentProfit <= 0)
    {
        printf(""Hold"");
    }
    else 
    {
        printf(""Buy @ %.2f on %d\n"", prices[dayBuy], dayBuy);
        printf(""Sell @ %.2f on %d\n"", prices[daySell], daySell);
    }
}",1
coli772,1695100571,1,"void wall_street_bet(double *prices, int length) {
    double curr_min, curr_max, dist;
    int min_idx, max_idx;
    curr_min = prices[0];
    curr_max = prices[0];
    // printf(""%lf, %lf\n"", curr_min, curr_max);
    dist = length + 10;
    for (int i = 0; i < length; i++) {
        if (prices[i] <= curr_min) {
            for (int j = i; j < length; j++) {
                if (prices[j] - prices[i] >= curr_max - curr_min) {
                    curr_min = prices[i];
                    curr_max = prices[j];
                    min_idx = i;
                    max_idx = j;
                }
            }
        }
    }
    if (min_idx == max_idx) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", curr_min, min_idx, curr_max, max_idx);
    }
    // printf(""%lf, %lf\n"", curr_min, curr_max);
    // printf(""%d, %d\n"", min_idx, max_idx);
}
",0
coli772,1695100641,2,"void wall_street_bet(double *prices, int length) {
    double curr_min, curr_max;
    int min_idx, max_idx;
    curr_min = prices[0];
    curr_max = prices[0];
    // printf(""%lf, %lf\n"", curr_min, curr_max);
    for (int i = 0; i < length; i++) {
        if (prices[i] <= curr_min) {
            for (int j = i; j < length; j++) {
                if (prices[j] - prices[i] >= curr_max - curr_min) {
                    curr_min = prices[i];
                    curr_max = prices[j];
                    min_idx = i;
                    max_idx = j;
                }
            }
        }
    }
    if (min_idx == max_idx) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", curr_min, min_idx, curr_max, max_idx);
    }
    // printf(""%lf, %lf\n"", curr_min, curr_max);
    // printf(""%d, %d\n"", min_idx, max_idx);
}",0
coli772,1695100931,3,"void wall_street_bet(double *prices, int length) {
    double curr_min, curr_max;
    int min_idx, max_idx, dist;
    min_idx = -1;
    max_idx = length + 20;
    curr_min = prices[0];
    curr_max = prices[0];
    dist = length + 10;
    // printf(""%lf, %lf\n"", curr_min, curr_max);
    for (int i = 0; i < length; i++) {
        if (prices[i] <= curr_min) {
            for (int j = i; j < length; j++) {
                if (prices[j] - prices[i] >= curr_max - curr_min) {
                    if (prices[j] - prices[i] == curr_max - curr_min && max_idx - min_idx < dist) {
                        continue;
                    }
                    curr_min = prices[i];
                    curr_max = prices[j];
                    min_idx = i;
                    max_idx = j;
                }
            }
        }
    }
    if (min_idx == max_idx) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", curr_min, min_idx, curr_max, max_idx);
    }
    // printf(""%lf, %lf\n"", curr_min, curr_max);
    // printf(""%d, %d\n"", min_idx, max_idx);
}",0
coli772,1695102464,4,"void wall_street_bet(double *prices, int length) {
    double curr_min, curr_max;
    int min_idx, max_idx, dist;
    dist = length + 10;
    min_idx = -1;
    max_idx = length + 20;
    curr_min = prices[0];
    curr_max = prices[0];
    // printf(""%lf, %lf\n"", curr_min, curr_max);
    for (int i = 0; i < length; i++) {
        for (int j = i; j < length; j++) {
            if ((prices[j] - prices[i] > curr_max - curr_min) || (prices[j] - prices[i] == curr_max - curr_min && j - i < dist)) {
                curr_min = prices[i];
                curr_max = prices[j];
                min_idx = i;
                max_idx = j;
                dist = j - i;
            }
        }
    }

    if (curr_min == curr_max) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", curr_min, min_idx, curr_max, max_idx);
    }
    // printf(""%lf, %lf\n"", curr_min, curr_max);
    // printf(""%d, %d\n"", min_idx, max_idx);
}",1
couy656,1695102158,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double maxProfit = 0.0;
    int buyDay = -1, sellDay = -1;

    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit) {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}",0
csan114,1695118134,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double lowest = prices[1];
	int start;
	double largest = 0;
	int end;

	for (int i = 0; i < length; i++) {
		if (lowest > prices[i]) {
			lowest = prices[i];
			start = i;
		}
	}

	printf(""Buy @ %.2f on %d\n"", lowest, start);

	for (int i = start; i < length; i++) {
		if (largest < prices[i]) {
			largest = prices[i];
			end = i;
		}
	}

	printf(""Sell @ %.2f on %d"", largest, end);

}",0
csan114,1695153775,2,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{ 
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;
	int start;
	int finish;
	int days = finish - start;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference && j - i < days) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				start = i;
				finish = j;
			}
		}
	}
	
	if (min > max) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", min, start, max, finish);
	}
}",0
csan114,1695197728,3,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				int x = i;
				int y = j;
			}
		}
	}

	if (min > max) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", min, x, max, y);
	}
}",0
csan114,1695197839,4,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;
	int y;
	int x;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}
		}
	}

	if (min > max) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", min, x, max, y); 
	}
}",0
csan114,1695199207,5,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;
	int y;
	int x;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] >= difference) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}
		}
	}

	if (min > max) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", min, x, max, y);
	}
}",0
csan114,1695325073,6,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;
	int y;
	int x;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}
		}
	}

	if (min > max) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", min, x, max, y);
	}
}",0
csan114,1695325567,7,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;
	int y;
	int x;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}

			if (prices[i] == min && j - i < y - x) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}
		}
	}",0
csan114,1695325607,8,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;
	int y;
	int x;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}

			if (prices[i] == min && j - i < y - x) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}
		}
	}

	if (min > max) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", min, x, max, y);
	}
}",0
csan114,1695326620,9,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;
	int y;
	int x;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}
			
			if (prices[i] == min && length - j > length - x) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}

		}
	}

	if (min > max) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", min, x, max, y);
	}
}",0
csan114,1695326788,10,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double max = prices[1];
	double min = prices[0];
	double difference = max - min;
	int y;
	int x;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			}
			
			if (prices[i] == min && length - j > length - x) {
				max = prices[j];
				min = prices[i];
				difference = max - min;
				x = i;
				y = j;
			} 
			
			if (prices[i] == min && j - i < y - x) {
				max = prices[j];  
				min = prices[i];  
				difference = max - min; 
				x = i; 
				y = j; 
			}

		}
	}

	if (min > max) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", min, x, max, y);
	}
}",1
cset571,1695025101,1,"void wall_street_bet(double prices[], int length)
{
	int i, bday, sday, j;
	double buy, sell;
	buy = 100000000.00;
	sell = 0.0;

	for (i = 0; i < length; i++) {
		if (prices[i] < buy) {
			buy = prices[i];
			bday = i;
		}
		else;
	}

	
	for (j = bday; j < length; j++) {
		if (prices[j] > sell) {
			sell = prices[j];
			sday = j;
		}
		else;
	}

	if (buy == 100000000.00 || sell == 0.0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", buy, bday);
		printf(""Sell @ %.2f on %d\n"", sell, sday);

	}
}
",0
cwu200,1695563316,1,n/a,0
dhar714,1695372396,1,"int wall_street_bet(double array[], int n)
{
    // check if there is a profit to be made 
    double maxValue = 0;
    for (int i = 0; i < n; i++) {
        if (array[i] > maxValue) {
            maxValue = array[i];
        }
    }
    if (maxValue == array[0]) {
        printf(""Hold\n"");
        return 0;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 1; j <= n; j++) {
            if ((i < j) && ((array[j] - array[i]) > maxProfit)) {
                // if there is a greater profit to be made, record that profit
                maxProfit = array[j] - array[i];
                day1 = i;
                day2 = j;
                price1 = array[i];
                price2 = array[j];
            }
        }
    }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return 0;
}",0
dhar714,1695374212,2,"void wall_street_bet(double prices[], int n)
{   
    // check if there is a profit to be made 
    double maxValue = 0;
    for (int i = 0; i < n; i++) {
        double currentPrice = prices[i];
        if (currentPrice > maxValue) {
            maxValue = currentPrice;
        }
    }
    LOG(""n = %d maxValue = %.2f\n"",n,maxValue);
    if (maxValue == prices[0]) {
        printf(""Hold\n"");
        return;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) > maxProfit)) {
                // if there is a greater profit to be made, record that profit
                maxProfit = prices[j] - prices[i];
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
            }
        }
    }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return;
}",0
dhar714,1695374223,3,"void wall_street_bet(double prices[], int n)
{   
    // check if there is a profit to be made 
    double maxValue = 0;
    for (int i = 0; i < n; i++) {
        double currentPrice = prices[i];
        if (currentPrice > maxValue) {
            maxValue = currentPrice;
        }
    }
    if (maxValue == prices[0]) {
        printf(""Hold\n"");
        return;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) > maxProfit)) {
                // if there is a greater profit to be made, record that profit
                maxProfit = prices[j] - prices[i];
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
            }
        }
    }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return;
}",0
dhar714,1695374831,4,"void wall_street_bet(double prices[], int n)
{   
    // check if there is a profit to be made 
    int holdchecker = 0; // set to no hold
    double minValue = prices[0];
    int minValuePosition = 0;
    for (int i = 0; i < n; i++) {
        double currentPrice = prices[i];
        if (currentPrice <= minValue) {
            minValue = currentPrice;
        }
        else {
            holdchecker = 0;
            break;
        }
        holdchecker = 1;
    }

    if (holdchecker == 1) {
        printf(""Hold\n"");
        return;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) > maxProfit)) {
                // if there is a greater profit to be made, record that profit
                maxProfit = prices[j] - prices[i];
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
            }
        }
    }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return;
}",0
dhar714,1695374861,5,"void wall_street_bet(double prices[], int n)
{   
    // check if there is a profit to be made 
    int holdchecker = 0; // set to no hold
    double minValue = prices[0];
    for (int i = 0; i < n; i++) {
        double currentPrice = prices[i];
        if (currentPrice <= minValue) {
            minValue = currentPrice;
        }
        else {
            holdchecker = 0;
            break;
        }
        holdchecker = 1;
    }

    if (holdchecker == 1) {
        printf(""Hold\n"");
        return;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) > maxProfit)) {
                // if there is a greater profit to be made, record that profit
                maxProfit = prices[j] - prices[i];
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
            }
        }
    }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return;
}",0
dhar714,1695374986,6,"void wall_street_bet(double prices[], int n)
{   
    // check if there is a profit to be made 
    int holdchecker = 0; // set to no hold
    double minValue = prices[0];
    for (int i = 0; i < n; i++) {
        double currentPrice = prices[i];
        if (currentPrice <= minValue) {
            minValue = currentPrice;
        }
        else {
            holdchecker = 0;
            break;
        }
        holdchecker = 1;
    }

    if (holdchecker == 1) {
        printf(""Hold\n"");
        return;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) >= maxProfit)) {
                // if there is a greater profit to be made, record that profit
                maxProfit = prices[j] - prices[i];
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
            }
        }
    }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return;
}",0
dhar714,1695375306,7,"void wall_street_bet(double prices[], int n)
{   
    // check if there is a profit to be made 
    int holdchecker = 0; // set to no hold
    double minValue = prices[0];
    for (int i = 0; i < n; i++) {
        double currentPrice = prices[i];
        if (currentPrice <= minValue) {
            minValue = currentPrice;
        }
        else {
            holdchecker = 0; // reset to no hold, and break to calculate prices
            break;
        }
        holdchecker = 1; 
    }

    //LOG(""n = %d maxValue = %.2f\n"",n,maxValue);
    if (holdchecker == 1) {
        printf(""Hold\n"");
        return;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    int dayDiff = 0;
    int current = 10000;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) >= maxProfit)) {
                // if there is a greater profit to be made, record that profit
                dayDiff = j - i;
                if (dayDiff < current) {
                dayDiff = current;
                
                maxProfit = prices[j] - prices[i];
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
                }
            }
        }
    }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return;
}",0
dhar714,1695375462,8,"void wall_street_bet(double prices[], int n)
{   
    // check if there is a profit to be made 
    int holdchecker = 0; // set to no hold
    double minValue = prices[0];
    for (int i = 0; i < n; i++) {
        double currentPrice = prices[i];
        if (currentPrice <= minValue) {
            minValue = currentPrice;
        }
        else {
            holdchecker = 0; // reset to no hold, and break to calculate prices
            break;
        }
        holdchecker = 1; 
    }

    // LOG(""n = %d maxValue = %.2f\n"",n,maxValue);
    if (holdchecker == 1) {
        printf(""Hold\n"");
        return;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    int dayDiff = 0;
    int currentDayDiff = 10000;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) >= maxProfit)) {
                // if there is a greater profit to be made, record that profit
                dayDiff = j - i;
                if (dayDiff < currentDayDiff) {
                currentDayDiff = dayDiff;
                
                maxProfit = prices[j] - prices[i];
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
                }
            }
        }
    }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return;
}",0
dhar714,1695376801,9,"void wall_street_bet(double prices[], int n)
{   
    // check if there is a profit to be made 
    int holdchecker = 0; // set to no hold
    double minValue = prices[0];
    for (int i = 0; i < n; i++) {
        double currentPrice = prices[i];
        if (currentPrice <= minValue) {
            minValue = currentPrice;
        }
        else {
            holdchecker = 0; // reset to no hold, and break to calculate prices
            break;
        }
        holdchecker = 1; 
    }

    // LOG(""n = %d maxValue = %.2f\n"",n,maxValue);
    if (holdchecker == 1) {
        printf(""Hold\n"");
        return;
    }

    // calculate profit and days
    double maxProfit = 0;
    int day1 = 0;
    int day2 = 0;
    double price1 = 0;
    double price2 = 0;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) >= maxProfit)) {
                // if there is a greater profit to be made, record that profit
                maxProfit = prices[j] - prices[i];
                day1 = i;
                day2 = j;
                price1 = prices[i];
                price2 = prices[j];
                }
            }
        }

int maxTime = 1000;
     for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if ((i < j) && ((prices[j] - prices[i]) >= maxProfit)) {
                // if there is a greater profit to be made, record that profit
                int time = j - i;
                if (time < maxTime) {
                    maxTime = time;
                    day1 = i;
                    day2 = j;
                }
                }
            }
        }
    printf(""Buy @ %.2f on %d\n"", price1, day1);
    printf(""Sell @ %.2f on %d\n"", price2, day2);
    return;
}",1
dhen760,1695089564,1,-=,0
dkha055,1695169773,1,"void wall_street_bet(double *values,int num_val) {
    
    double profit = 0;
    double current_profit = 0;
    int current_distance = 0;
    int distance = 100;
    int buy_index = 0;
    int sell_index = 0;
    
    for (int i = 0; i < num_val-2; i++) {
        for (int j = i + 1; j <num_val - 1 ; j++) {
          
            if (values[j] > values[i]) {
                current_profit = values[j] - values[i];
                current_distance = j - i;
                
                if (current_profit > profit) {
                    profit = current_profit;
                    buy_index = i;
                    sell_index = j;
                } else if (current_profit == profit && current_distance < distance) {
                    profit = current_profit;
                    distance = current_distance;
                    buy_index = i;
                    sell_index = j;
                }

            } else {
                continue;
            }
            
        }
    }
    
    if (buy_index != 0) {
        printf(""Buy @ %.2lf on %i\n"",values[buy_index],buy_index);
        printf(""Sell @ %.2lf on %i\n"",values[sell_index],sell_index);
    } else {
        printf(""Hold"");
    }
}",0
dkha055,1695169948,2,"void wall_street_bet(double *values,int num_val) {
    
    double profit = 0;
    double current_profit = 0;
    int current_distance = 0;
    int distance = 100;
    int buy_index = 0;
    int sell_index = 0;
    
    for (int i = 0; i < num_val-2; i++) {
        for (int j = i + 1; j <num_val - 1 ; j++) {
          
            if (values[j] > values[i]) {
                current_profit = values[j] - values[i];
                current_distance = j - i;
                
                if (current_profit > profit) {
                    profit = current_profit;
                    buy_index = i;
                    sell_index = j;
                    distance = j - i;
                } else if (current_profit == profit && current_distance < distance) {
                    profit = current_profit;
                    distance = current_distance;
                    buy_index = i;
                    sell_index = j;
                }

            } else {
                continue;
            }
            
        }
    }
    
    if (buy_index != 0) {
        printf(""Buy @ %.2lf on %i\n"",values[buy_index],buy_index);
        printf(""Sell @ %.2lf on %i\n"",values[sell_index],sell_index);
    } else {
        printf(""Hold"");
    }
}",0
dkha055,1695171026,3,"void wall_street_bet(double *values,int num_val) {
    
    double profit = 0;
    double current_profit = 0;
    int current_distance = 0;
    int distance = 100;
    int buy_index = 0;
    int sell_index = 0;
    
    for (int i = 0; i < num_val - 2; i++) {
        for (int j = i + 1; j <num_val; j++) {
            if (values[j] > values[i]) {
                current_profit = values[j] - values[i];
                current_distance = j - i;
                
                if (current_profit > profit) {
                    profit = current_profit;
                    buy_index = i;
                    sell_index = j;
                    distance = j - i;
                } else if (current_profit == profit && current_distance < distance) {
                    profit = current_profit;
                    distance = current_distance;
                    buy_index = i;
                    sell_index = j;
                }

            } else {
                continue;
            }
            
        }
    }
    
    if (buy_index != 0) {
        printf(""Buy @ %.2lf on %i\n"",values[buy_index],buy_index);
        printf(""Sell @ %.2lf on %i\n"",values[sell_index],sell_index);
    } else {
        printf(""Hold"");
    }
}",0
dkha055,1695338803,4,"void wall_street_bet(double *values,int num_val) {
    
    double profit = 0;
    double current_profit = 0;
    int current_distance = 0;
    int distance = 100;
    int buy_index = 0;
    int sell_index = 0;
    
    for (int i = 0; i <= num_val - 2; i++) {
        for (int j = i + 1; j <= num_val - 1; j++) {
            if (values[j] > values[i]) {
                current_profit = values[j] - values[i];
                current_distance = j - i;
                
                if (current_profit > profit) {
                    profit = current_profit;
                    buy_index = i;
                    sell_index = j;
                    distance = j - i;
                } else if (current_profit == profit && current_distance < distance) {
                    profit = current_profit;
                    distance = current_distance;
                    buy_index = i;
                    sell_index = j;
                }

            } else {
                continue;
            }
            
        }
    }
    
    if (buy_index != 0) {
        printf(""Buy @ %.2lf on %i\n"",values[buy_index],buy_index);
        printf(""Sell @ %.2lf on %i\n"",values[sell_index],sell_index);
    } else {
        printf(""Hold"");
    }
}",0
dkha055,1695339153,5,"void wall_street_bet(double *values,int num_val) {
    
    double profit = 0;
    double current_profit = 0;
    int current_distance = 0;
    int distance = 100;
    int buy_index = 0;
    int sell_index = 0;
   
    for (int i = 0; i <= num_val - 2; i++) {
        for (int j = i + 1; j <= num_val - 1; j++) {
            if (values[j] > values[i]) {
                current_profit = values[j] - values[i];
                current_distance = j - i;
                
                if (current_profit > profit) {
                    profit = current_profit;
                    buy_index = i;
                    sell_index = j;
                    distance = j - i;
                } else if (current_profit == profit && current_distance < distance) {
                    profit = current_profit;
                    distance = current_distance;
                    buy_index = i;
                    sell_index = j;
                }

            } else {
                continue;
            }
            
        }
    }
    
    if (sell_index != 0) {
        printf(""Buy @ %.2lf on %i\n"",values[buy_index],buy_index);
        printf(""Sell @ %.2lf on %i\n"",values[sell_index],sell_index);
    } else {
        printf(""Hold"");
    }
}",1
dkim848,1695415433,1,"void wall_street_bet(double *prices, int length)
{
    double buyprice, sellprice;
    int buy, sell;
    
    buyprice = prices[0];
    sellprice = prices[0];
    buy = 0
    sell = 1
    
    
    for (i = 1, i < length - 1, i++) {
        if buyprice > prices[i] {
            buyprice = prices[i];
            buy = i
        }
    }
    
    for (i = 2, i < length, i++) {
        if sellprice < prices[i] {
            sellprice = prices[i];
            sell = i
        }
    }
    
    if (buyprice == 0) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", buyprice, buy, sellprice, sell);
    }
}",0
dkim848,1695415472,2,"void wall_street_bet(double *prices, int length)
{
    double buyprice, sellprice;
    int buy, sell;
    
    buyprice = prices[0];
    sellprice = prices[0];
    buy = 0;
    sell = 1;
    
    
    for (i = 1, i < length - 1, i++) {
        if buyprice > prices[i] {
            buyprice = prices[i];
            buy = i;
        }
    }
    
    for (i = 2, i < length, i++) {
        if sellprice < prices[i] {
            sellprice = prices[i];
            sell = i;
        }
    }
    
    if (buyprice == 0) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", buyprice, buy, sellprice, sell);
    }
}",0
dkur670,1695473539,1,N/A,0
dmun793,1695612072,1,"void wall_street_bet(double* prices, int length)
{
	int buyIndex = -1;
	int sellIndex = -1;
	double difference = 0;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++)
		{
			const double newDifference = prices[j] - prices[i];
			if (newDifference > difference)
			{
				difference = newDifference;
				buyIndex = i;
				sellIndex = j;
			}
		}
	}

	if (difference > 0)
	{
		printf(""Buy @ %.2f on %i\nSell @ %.2f on %i\n"", prices[buyIndex], buyIndex, prices[sellIndex], sellIndex);
	}
	else
	{
		printf(""Hold\n"");
	}
}",0
dmun793,1695612344,2,"void wall_street_bet(double* prices, int length)
{
	int buyIndex = -1;
	int sellIndex = -1;
	double difference = 0;

	for (int i = 0; i < length; i++)
	{
		for (int j = i + 1; j < length; j++)
		{
			double newDifference = prices[j] - prices[i];
			if (newDifference > difference || (newDifference == difference && sellIndex - buyIndex > j - i))
			{
				difference = newDifference;
				buyIndex = i;
				sellIndex = j;
			}
		}
	}

	if (difference > 0)
	{
		printf(""Buy @ %.2f on %i\nSell @ %.2f on %i\n"", prices[buyIndex], buyIndex, prices[sellIndex], sellIndex);
	}
	else
	{
		printf(""Hold\n"");
	}
}",1
dsaw164,1695180555,1,"void wall_street_bet(double *prices, int length){
    
 double max;
  int position_max;
  double min;
  int position_min;
  int i;
  int d = 1;
  double prev = 0;
  
  for (i = 0; i < length - 1; i++)
    {
        d = i + 1;
      while (d < length)
	{
	  double new = prices[d] - prices[i];
	  if (new >= prev)
	    {
	      prev = new;
	      position_min = i;
	      position_max = d;
	      max = prices[d];
	      min = prices[i];
	    }
	  d++;
	}
    }
    if(prev == 0){
        printf(""Hold\n"");
    }
  else{
      printf (""Buy @ %.2f on %i\nSell @ %.2f on %i\n"", min, position_min, max, position_max);
    }
}",0
dsaw164,1695180688,2,"void wall_street_bet(double *prices, int length){
    
 double max;
  int position_max;
  double min;
  int position_min;
  int i;
  int d = 1;
  double prev = 0;
  
  for (i = 0; i < length - 1; i++)
    {
        d = i + 1;
      while (d < length)
	{
	  double new = prices[d] - prices[i];
	  if (new > prev)
	    {
	      prev = new;
	      position_min = i;
	      position_max = d;
	      max = prices[d];
	      min = prices[i];
	    }
	  d++;
	}
    }
    if(prev == 0){
        printf(""Hold\n"");
    }
  else{
      printf (""Buy @ %.2f on %i\nSell @ %.2f on %i\n"", min, position_min, max, position_max);
    }
}",0
dsaw164,1695180751,3,"void wall_street_bet(double *prices, int length){
    
 double max;
  int position_max;
  double min;
  int position_min;
  int i;
  int d = 1;
  double prev = 0;
  
  for (i = 0; i < length - 1; i++)
    {
        d = i + 1;
      while (d < length)
	{
	  double new = prices[d] - prices[i];
	  if (new >= prev)
	    {
	      prev = new;
	      position_min = i;
	      position_max = d;
	      max = prices[d];
	      min = prices[i];
	    }
	  d++;
	}
    }
    if(prev == 0){
        printf(""Hold\n"");
    }
  else{
      printf (""Buy @ %.2f on %i\nSell @ %.2f on %i\n"", min, position_min, max, position_max);
    }
}",0
dsaw164,1695180767,4,"void wall_street_bet(double *prices, int length){
    
 double max;
  int position_max;
  double min;
  int position_min;
  int i;
  int d = 1;
  double prev = 0;
  
  for (i = 0; i < length - 1; i++)
    {
        d = i + 1;
      while (d < length)
	{
	  double new = prices[d] - prices[i];
	  if (new > prev)
	    {
	      prev = new;
	      position_min = i;
	      position_max = d;
	      max = prices[d];
	      min = prices[i];
	    }
	  d++;
	}
    }
    if(prev == 0){
        printf(""Hold\n"");
    }
  else{
      printf (""Buy @ %.2f on %i\nSell @ %.2f on %i\n"", min, position_min, max, position_max);
    }
}",0
dsaw164,1695181753,5,"void wall_street_bet(double *prices, int length){
    
 double max;
  int position_max;
  double min;
  int position_min;
  int i;
  int d = 1;
  double prev = 0;
  int days_prev = length;
  
  for (i = 0; i < length - 1; i++)
    {
        d = i + 1;
      while (d < length)
	{
	  double new = prices[d] - prices[i];
	  if (new >= prev)
	    {
	      prev = new;
	      position_min = i;
	      position_max = d;
	      max = prices[d];
	      min = prices[i];
	      int days = d - i;
	      
	      if(days < days_prev){
	      days_prev = days;
	  } 
	    }
	  d++;
	}
    }
    if(prev == 0){
        printf(""Hold\n"");
    }
  else{
      printf (""Buy @ %.2f on %i\nSell @ %.2f on %i\n"", min, position_min, max, position_max);
    }
}",0
dsaw164,1695182617,6,"void wall_street_bet(double *prices, int length){
    
 double max;
  int position_max;
  double min;
  int position_min;
  int i;
  int d = 1;
  double prev = 0;
  int days_prev = length;
  
  for (i = 0; i < length - 1; i++)
    {
        d = i + 1;
      while (d < length)
	{
	  double new = prices[d] - prices[i];
	  int distance = d - i;
	  if (new == prev)
	    {
	   if(distance <= days_prev){
	      prev = new;
	      position_min = i;
	      position_max = d;
	      max = prices[d];
	      min = prices[i];
	      days_prev = distance;
	       }
	    }
	    
	    if(new > prev){
	      prev = new;
	      position_min = i;
	      position_max = d;
	      max = prices[d];
	      min = prices[i];
	      days_prev = distance;
	  }
	    
	    
	  
	  d++;
	}
    }
    if(prev == 0){
        printf(""Hold\n"");
    }
  else{
      printf (""Buy @ %.2f on %i\nSell @ %.2f on %i\n"", min, position_min, max, position_max);
    }
}",1
dyu343,1695007752,1,"void wall_street_bet(double prices[], int length)
{
    double max_profit = 0;
    int buyTime;
    int sellTime;

    for (int buyIndex = 0; buyIndex < length; buyIndex++)
    {
        for (int sellIndex = buyIndex+1; sellIndex < length; sellIndex++)
        {
            double buyValue = prices[buyIndex];
            double sellValue = prices[sellIndex];
            double NetChange = sellValue - buyValue;

            if (NetChange > max_profit)
            {
                max_profit = NetChange;
                buyTime = buyIndex;
                sellTime = sellIndex;
            }
               
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buyTime], buyTime);
        printf(""Sell @ %.2lf on %d"", prices[sellTime], sellTime);
    }
}
",0
dyu343,1695007786,2,"void wall_street_bet(double prices[], int length)
{
    double max_profit = 0;
    int buyTime;
    int sellTime;

    for (int buyIndex = 0; buyIndex < length; buyIndex++)
    {
        for (int sellIndex = buyIndex+1; sellIndex < length; sellIndex++)
        {
            double buyValue = prices[buyIndex];
            double sellValue = prices[sellIndex];
            double NetChange = sellValue - buyValue;

            if (NetChange >= max_profit)
            {
                max_profit = NetChange;
                buyTime = buyIndex;
                sellTime = sellIndex;
            }
               
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buyTime], buyTime);
        printf(""Sell @ %.2lf on %d"", prices[sellTime], sellTime);
    }
}",0
dyu343,1695007886,3,"void wall_street_bet(double prices[], int length)
{
    double max_profit = 0;
    int buyTime;
    int sellTime;

    for (int buyIndex = 0; buyIndex < length; buyIndex++)
    {
        for (int sellIndex = buyIndex+1; sellIndex < length; sellIndex++)
        {
            double buyValue = prices[buyIndex];
            double sellValue = prices[sellIndex];
            double NetChange = sellValue - buyValue;

            if (NetChange > max_profit)
            {
                max_profit = NetChange;
                buyTime = buyIndex;
                sellTime = sellIndex;
            }
               
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buyTime], buyTime);
        printf(""Sell @ %.2lf on %d"", prices[sellTime], sellTime);
    }
}
",0
dyu343,1695009060,4,"void wall_street_bet(double prices[], int length)
{
    double max_profit = 0;
    int buyTime;
    int sellTime;
    int shortest_period = 9999;

    for (int buyIndex = 0; buyIndex < length; buyIndex++)
    {
        for (int sellIndex = buyIndex+1; sellIndex < length; sellIndex++)
        {
            double buyValue = prices[buyIndex];
            double sellValue = prices[sellIndex];
            double NetChange = sellValue - buyValue;

            if (NetChange >= max_profit)
            {
                int period = sellIndex - buyIndex;
                if (period < shortest_period)
                {
                    max_profit = NetChange;
                    buyTime = buyIndex;
                    sellTime = sellIndex;
                    shortest_period = period;
                }
            }
               
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buyTime], buyTime);
        printf(""Sell @ %.2lf on %d"", prices[sellTime], sellTime);
    }
}",0
dyu343,1695009200,5,"void wall_street_bet(double prices[], int length)
{
    double max_profit = 0;
    int buyTime;
    int sellTime;
    int shortest_period = 9999;

    for (int buyIndex = 0; buyIndex < length; buyIndex++)
    {
        for (int sellIndex = buyIndex+1; sellIndex < length; sellIndex++)
        {
            double buyValue = prices[buyIndex];
            double sellValue = prices[sellIndex];
            double NetChange = sellValue - buyValue;

            if (NetChange >= max_profit)
            {
                int period = sellIndex - buyIndex;

                if (period < shortest_period || NetChange > max_profit)
                {
                    max_profit = NetChange;
                    buyTime = buyIndex;
                    sellTime = sellIndex;
                    shortest_period = period;
                }
            }
               
        }
    }

    if (max_profit <= 0)
    {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buyTime], buyTime);
        printf(""Sell @ %.2lf on %d"", prices[sellTime], sellTime);
    }
}",1
echa931,1695612444,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double price[], int length);

int main(void)
{
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);
}
void wall_street_bet(double price[], int length) {
    int i, j, days_1 = 0, days_2, buy_day, sell_day;
    double profit = 0;
    for (i = 0; i < (length - 1); i++) {
        for (j = i + 1; j < length; j++) {
            if (profit < ( price[j] - price[i])){
                profit = price[j] - price[i];
                days_1 = j - i;
                buy_day = i;
                sell_day = j;
            }
            else if (profit == (price[j] - price[i])) {
                days_2 = j - i;
                if (days_2 < days_1) {
                    profit = price[j] - price[i];
                    buy_day = i;
                    sell_day = j;
                }
            }
        }
    }
    if (profit == 0) {
        printf(""holds"");
    }
    else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", price[buy_day], buy_day, price[sell_day], sell_day);
    }
}",0
echa931,1695612467,2,"void wall_street_bet(double price[], int length) {
    int i, j, days_1 = 0, days_2, buy_day, sell_day;
    double profit = 0;
    for (i = 0; i < (length - 1); i++) {
        for (j = i + 1; j < length; j++) {
            if (profit < ( price[j] - price[i])){
                profit = price[j] - price[i];
                days_1 = j - i;
                buy_day = i;
                sell_day = j;
            }
            else if (profit == (price[j] - price[i])) {
                days_2 = j - i;
                if (days_2 < days_1) {
                    profit = price[j] - price[i];
                    buy_day = i;
                    sell_day = j;
                }
            }
        }
    }
    if (profit == 0) {
        printf(""holds"");
    }
    else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", price[buy_day], buy_day, price[sell_day], sell_day);
    }
}",0
echa931,1695612506,3,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double price[], int length);

int main(void)
{
    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);
}
void wall_street_bet(double price[], int length) {
    int i, j, days_1 = 0, days_2, buy_day, sell_day;
    double profit = 0;
    for (i = 0; i < (length - 1); i++) {
        for (j = i + 1; j < length; j++) {
            if (profit < ( price[j] - price[i])){
                profit = price[j] - price[i];
                days_1 = j - i;
                buy_day = i;
                sell_day = j;
            }
            else if (profit == (price[j] - price[i])) {
                days_2 = j - i;
                if (days_2 < days_1) {
                    profit = price[j] - price[i];
                    buy_day = i;
                    sell_day = j;
                }
            }
        }
    }
    if (profit == 0) {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", price[buy_day], buy_day, price[sell_day], sell_day);
    }
}",0
echa931,1695612518,4,"void wall_street_bet(double price[], int length) {
    int i, j, days_1 = 0, days_2, buy_day, sell_day;
    double profit = 0;
    for (i = 0; i < (length - 1); i++) {
        for (j = i + 1; j < length; j++) {
            if (profit < ( price[j] - price[i])){
                profit = price[j] - price[i];
                days_1 = j - i;
                buy_day = i;
                sell_day = j;
            }
            else if (profit == (price[j] - price[i])) {
                days_2 = j - i;
                if (days_2 < days_1) {
                    profit = price[j] - price[i];
                    buy_day = i;
                    sell_day = j;
                }
            }
        }
    }
    if (profit == 0) {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", price[buy_day], buy_day, price[sell_day], sell_day);
    }
}",1
elau447,1695476137,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double* prices, int length)
{
	int i;
	double x = 0;
	double y = prices[0];
	int z;
	for (i = 0; i < length; i++) {
		x = prices[i];
			if (y > x) {
				y = x;
				z = i;
			}
	}
	if (z == length - 1) {
		printf(""Hold"");
		return;
	}
	printf(""Buy @%.2f at %d\n"", y, z);
	x = 0;
	y = prices[z + 1];
	for (i = z; i < length; i++) {
		x = prices[i];
		if (x > y) {
			y = x;
			z = i;
		}

	}
	printf(""Sell @%.2f at %d\n"", y, z);
	return;
}
int main(void) {
	double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
	wall_street_bet(pricesA, 15);
	
	double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
	wall_street_bet(pricesB, 10);

	double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
	wall_street_bet(pricesC, 5);

	return 0;
}

",0
elau447,1695476150,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double* prices, int length)
{
	int i;
	double x = 0;
	double y = prices[0];
	int z;
	for (i = 0; i < length; i++) {
		x = prices[i];
			if (y > x) {
				y = x;
				z = i;
			}
	}
	if (z == length - 1) {
		printf(""Hold"");
		return;
	}
	printf(""Buy @%.2f at %d\n"", y, z);
	x = 0;
	y = prices[z + 1];
	for (i = z; i < length; i++) {
		x = prices[i];
		if (x > y) {
			y = x;
			z = i;
		}

	}
	printf(""Sell @%.2f at %d\n"", y, z);
	return;
}

",0
ggao363,1695050044,1,"#include<stdio.h>

// global structure
struct Day{
int max, min;
};
void wall_street_bet(double arr[], int arr_size)
{
int MinDay = 0, n;
double MaxProf = 0, Min = arr[0];
struct Day Day;

Day.min = 0;
Day.max = 1;
    for (int i = 0; i < arr_size; ++i) {
        if (arr[i] < Min) {
            Min = arr[i];
            MinDay = i;
        }
        if (arr[i] - Min > MaxProf) {
            MaxProf = arr[i] - Min;
            Day.min = MinDay;
            Day.max = i;
        } else if ((arr[i] - Min) == MaxProf) {
            if ((Day.max - Day.min) > i - MinDay) {
                Day.min = MinDay;
                Day.max = i;
            }
        }

        //printf(""%lf, %lf, %d, %d, %d\n"", arr[i], Min, MinDay, i, Day.min);
    }
        if(MaxProf == 0) {
            printf(""Hold"");
        }
        else{
            printf(""Buy @ %lf on %d\n"", arr[Day.min], Day.min);
            printf(""Sell @ %lf on %d\n"", arr[Day.max], Day.max);
        }
    }
    //printf(""%lf"",MaxProf);",0
ggao363,1695050097,2,"#include<stdio.h>

// global structure
struct Day{
int max, min;
};
void wall_street_bet(double arr[], int arr_size)
{
int MinDay = 0;
double MaxProf = 0, Min = arr[0];
struct Day Day;

Day.min = 0;
Day.max = 1;
    for (int i = 0; i < arr_size; ++i) {
        if (arr[i] < Min) {
            Min = arr[i];
            MinDay = i;
        }
        if (arr[i] - Min > MaxProf) {
            MaxProf = arr[i] - Min;
            Day.min = MinDay;
            Day.max = i;
        } else if ((arr[i] - Min) == MaxProf) {
            if ((Day.max - Day.min) > i - MinDay) {
                Day.min = MinDay;
                Day.max = i;
            }
        }

        //printf(""%lf, %lf, %d, %d, %d\n"", arr[i], Min, MinDay, i, Day.min);
    }
        if(MaxProf == 0) {
            printf(""Hold"");
        }
        else{
            printf(""Buy @ %lf on %d\n"", arr[Day.min], Day.min);
            printf(""Sell @ %lf on %d\n"", arr[Day.max], Day.max);
        }
    }
    //printf(""%lf"",MaxProf);",0
ggao363,1695050123,3,"#include<stdio.h>

// global structure
struct Day{
int max, min;
};
void wall_street_bet(double arr[], int arr_size)
{
int MinDay = 0;
double MaxProf = 0, Min = arr[0];
struct Day Day;

Day.min = 0;
Day.max = 1;
    for (int i = 0; i < arr_size; ++i) {
        if (arr[i] < Min) {
            Min = arr[i];
            MinDay = i;
        }
        if (arr[i] - Min > MaxProf) {
            MaxProf = arr[i] - Min;
            Day.min = MinDay;
            Day.max = i;
        } else if ((arr[i] - Min) == MaxProf) {
            if ((Day.max - Day.min) > i - MinDay) {
                Day.min = MinDay;
                Day.max = i;
            }
        }

        //printf(""%lf, %lf, %d, %d, %d\n"", arr[i], Min, MinDay, i, Day.min);
    }
        if(MaxProf == 0) {
            printf(""Hold"");
        }
        else{
            printf(""Buy @ %.2lf on %d\n"", arr[Day.min], Day.min);
            printf(""Sell @ %.2lf on %d\n"", arr[Day.max], Day.max);
        }
    }
    //printf(""%lf"",MaxProf);",0
ggao363,1695050319,4,"#include<stdio.h>

// global structure
struct Day{
int max, min;
};
void wall_street_bet(double arr[], int arr_size)
{
int MinDay = 0;
double MaxProf = 0, Min = arr[0];
struct Day Day;

Day.min = 0;
Day.max = 1;
    for (int i = 0; i < arr_size; ++i) {
        if (arr[i] <= Min) {
            Min = arr[i];
            MinDay = i;
        }
        if (arr[i] - Min > MaxProf) {
            MaxProf = arr[i] - Min;
            Day.min = MinDay;
            Day.max = i;
        } else if ((arr[i] - Min) == MaxProf) {
            if ((Day.max - Day.min) < (i - MinDay)) {
                Day.min = MinDay;
                Day.max = i;
            }
        }

        //printf(""%lf, %lf, %d, %d, %d\n"", arr[i], Min, MinDay, i, Day.min);
    }
        if(MaxProf == 0) {
            printf(""Hold"");
        }
        else{
            printf(""Buy @ %.2lf on %d\n"", arr[Day.min], Day.min);
            printf(""Sell @ %.2lf on %d\n"", arr[Day.max], Day.max);
        }
    }",0
ggao363,1695050385,5,"#include<stdio.h>

// global structure
struct Day{
int max, min;
};
void wall_street_bet(double arr[], int arr_size)
{
int MinDay = 0;
double MaxProf = 0, Min = arr[0];
struct Day Day;

Day.min = 0;
Day.max = 1;
    for (int i = 0; i < arr_size; ++i) {
        if (arr[i] <= Min) {
            Min = arr[i];
            MinDay = i;
        }
        if (arr[i] - Min > MaxProf) {
            MaxProf = arr[i] - Min;
            Day.min = MinDay;
            Day.max = i;
        } else if ((arr[i] - Min) == MaxProf) {
            if ((Day.max - Day.min) > (i - MinDay)) {
                Day.min = MinDay;
                Day.max = i;
            }
        }

        //printf(""%lf, %lf, %d, %d, %d\n"", arr[i], Min, MinDay, i, Day.min);
    }
        if(MaxProf == 0) {
            printf(""Hold"");
        }
        else{
            printf(""Buy @ %.2lf on %d\n"", arr[Day.min], Day.min);
            printf(""Sell @ %.2lf on %d\n"", arr[Day.max], Day.max);
        }
    }",1
gge561,1695625273,1,"#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

void wall_street_bet(double prices[], int length)
{
	int i;
	int j=0;
	double min = prices[0];
	double max = prices[1];
	double difference = max-min;
	int positionmax = 0;
	int positionmin = 0;

	for (i = 0; i < length; i++){
		for (j = 1; j < length - i; j++){
			if (prices[i + j] - prices[i] > difference) {
				max = prices[i + j];
				min = prices[i];
				positionmax = i + j;
				positionmin = i;
				difference = max - min;
				
			}
			else if (prices[i + j] - prices[i] == difference) {
				if (j < positionmax - positionmin) {
					max = prices[i + j];
				min = prices[i];
				positionmax = i + j;
				positionmin = i;
				difference = max - min;
				
				}
			}
		}
	}
	
	if (difference <= 0){
		printf(""Hold\n"");
	}
	else if(difference > 0){
		printf(""Buy @ %.2lf on %d\n"", min, positionmin);
		printf(""Sell @ %.2lf on %d\n"", max, positionmax);
	}

}",0
gge561,1695625479,2,"#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

void wall_street_bet(double prices[], int length)
{
	int i;
	int j=0;
	double min = prices[0];
	double max = prices[0];
	double difference = max-min;
	int positionmax = 0;
	int positionmin = 0;

	for (i = 0; i < length; i++){
		for (j = 1; j < length - i; j++){
			if (prices[i + j] - prices[i] > difference) {
				max = prices[i + j];
				min = prices[i];
				positionmax = i + j;
				positionmin = i;
				difference = max - min;
				
			}
			else if (prices[i + j] - prices[i] == difference) {
				if (j < positionmax - positionmin) {
					max = prices[i + j];
				min = prices[i];
				positionmax = i + j;
				positionmin = i;
				difference = max - min;
				
				}
			}
		}
	}
	
	if (difference <= 0){
		printf(""Hold\n"");
	}
	else if(difference > 0){
		printf(""Buy @ %.2lf on %d\n"", min, positionmin);
		printf(""Sell @ %.2lf on %d\n"", max, positionmax);
	}

}",1
gmal045,1695104720,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}",0
gmal045,1695105255,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if ((indexSell - indexBuy) < (hold[3] - hold[1]) && (prices[indexSell]-prices[indexBuy]) == (hold[2]-hold[0]))
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}

int main(void)
{
double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
wall_street_bet(pricesB, 10);
    return 0;
}",0
gmal045,1695105260,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if ((indexSell - indexBuy) < (hold[3] - hold[1]) && (prices[indexSell]-prices[indexBuy]) == (hold[2]-hold[0]))
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}",0
gmal045,1695121016,4,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if ((indexSell - indexBuy) < (hold[3] - hold[1]) && (prices[indexSell]-prices[indexBuy]) == (hold[2]-hold[0]))
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}",0
gmal045,1695121280,5,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if ((indexSell - indexBuy) < (hold[3] - hold[1]) && (prices[indexSell]-prices[indexBuy]) == (hold[2]-hold[0]))
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}
",0
gmal045,1695121311,6,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length)
        {
            break;
        }
        else if (indexSell <= indexBuy)
        {
            indexSell = length;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if ((indexSell - indexBuy) < (hold[3] - hold[1]) && (prices[indexSell]-prices[indexBuy]) == (hold[2]-hold[0]))
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}
",0
gmal045,1695121366,7,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if ((indexSell - indexBuy) < (hold[3] - hold[1]) && (prices[indexSell]-prices[indexBuy]) == (hold[2]-hold[0]))
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}

",0
gmal045,1695121394,8,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if ((indexSell - indexBuy) < (hold[3] - hold[1]) && (prices[indexSell]-prices[indexBuy]) == (hold[2]-hold[0]))
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}
",0
gmal045,1695121887,9,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        if (indexSell - indexBuy < hold[3] - hold[1] && prices[indexSell]-prices[indexBuy] == hold[2]-hold[0])
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}
",0
gmal045,1695121941,10,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if (indexSell - indexBuy < hold[3] - hold[1] && prices[indexSell]-prices[indexBuy] == hold[2]-hold[0])
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}
",0
gmal045,1695121959,11,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        if (indexSell - indexBuy < hold[3] - hold[1] && prices[indexSell]-prices[indexBuy] == hold[2]-hold[0])
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}
",0
gmal045,1695121983,12,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        // else if (indexSell - indexBuy < hold[3] - hold[1] && prices[indexSell]-prices[indexBuy] == hold[2]-hold[0])
        // {
        //     hold[0] = prices[indexBuy];
        //     hold[1] = indexBuy;
        //     hold[2] = prices[indexSell];
        //     hold[3] = indexSell;
        // }
        // indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}

",0
gmal045,1695122000,13,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        // else if (indexSell - indexBuy < hold[3] - hold[1] && prices[indexSell]-prices[indexBuy] == hold[2]-hold[0])
        // {
        //     hold[0] = prices[indexBuy];
        //     hold[1] = indexBuy;
        //     hold[2] = prices[indexSell];
        //     hold[3] = indexSell;
        // }
        // indexSell--;
    // }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}

",0
gmal045,1695122027,14,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        // else if (indexSell - indexBuy < hold[3] - hold[1] && prices[indexSell]-prices[indexBuy] == hold[2]-hold[0])
        // {
        //     hold[0] = prices[indexBuy];
        //     hold[1] = indexBuy;
        //     hold[2] = prices[indexSell];
        //     hold[3] = indexSell;
        // }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}

",0
gmal045,1695122110,15,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        else if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        if (indexSell - indexBuy < hold[3] - hold[1] && prices[indexSell]-prices[indexBuy] == hold[2]-hold[0])
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}

",0
gmal045,1695122402,16,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int indexSell=length-1, indexBuy=0;
    double hold[4]={0,0,0,0};
    while (1) {
        if (indexBuy == length-1)
        {
            break;
        }
        else if (indexSell == indexBuy)
        {
            indexSell = length-1;
            indexBuy++;
        }
        if ((prices[indexSell]-prices[indexBuy]) > (hold[2]-hold[0])) {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        else if ((indexSell - indexBuy < hold[3] - hold[1]) && (prices[indexSell]-prices[indexBuy] == hold[2]-hold[0]))
        {
            hold[0] = prices[indexBuy];
            hold[1] = indexBuy;
            hold[2] = prices[indexSell];
            hold[3] = indexSell;
        }
        indexSell--;
    }
    if (hold[2]-hold[0] > 0)
    {
        printf(""Buy @ %0.2lf on %.0lf\nSell @ %0.2lf on %.0lf\n"", hold[0], hold[1], hold[2], hold[3]);
    }
    else
    {
        printf(""Hold"");        
    }

}
",1
gmoh887,1695360695,1,"void wall_street_bet(double *prices, int length) 
{
    int buy_day, sell_day;
    int best_buy = 0, best_sell = 0, span = length; 
    double max = 0, profit;
    for (buy_day = 0; buy_day < length - 1; buy_day++) {
        for (sell_day=buy_day + 1; sell_day < length; sell_day++) {
            profit = (prices[sell_day] - prices[buy_day]);
            if (profit >= max) {
                if (profit == max && ((sell_day - buy_day) > span)) {
                    continue;
                }
                max = profit;
                best_buy = buy_day;
                best_sell = sell_day;
                span = (sell_day - buy_day);
            }  
        } 
    }

    if (best_buy - best_sell != 0) {
        printf(""Buy @ %.2f on %d\n"", prices[best_buy], best_buy);
        printf(""Sell @ %.2f on %d"", prices[best_sell], best_sell);
    } 
    else {
        printf(""Hold"");
    }
}",1
gpen695,1695540003,1,poo,0
gpen695,1695540064,2,"poo

",0
gpen695,1695540193,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Not enough data to make a profit
        printf(""Hold\n"");
        return;
    }

    int buy_day = 0;
    int sell_day = 0;
    double max_profit = 0.0;

    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            } else if (profit == max_profit) {
                // If there are multiple pairs with the same profit, choose the one with the shortest period
                if (j - i < sell_day - buy_day) {
                    buy_day = i;
                    sell_day = j;
                }
            }
        }
    }

    if (max_profit > 0) {
        // Print the best buy and sell days along with the prices
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    } else {
        // No profit can be made
        printf(""Hold\n"");
    }
}


",1
gxu660,1695286089,1,"void wall_street_bet(double *prices, int length)
{
    double profit = 0;
    double current_profit, current_buy, current_sell, buy, sell;
    int i, n, buy_day, sell_day;
    int days_btwn = -1;

    for (i = 0; i < length; i++) {
        current_buy = prices[i];
        for (n = i; n < length; n++) {
            current_sell = prices[n];
            current_profit = current_sell - current_buy;
            if ((current_profit > 0 && current_profit > profit) || 
            (current_profit > 0 && current_profit == profit && n - i < days_btwn) && n != i) {
                
                profit = current_profit;
                buy_day = i;
                sell_day = n;
                days_btwn = n - i;
                buy = current_buy;
                sell = current_sell;
            }
        }
    }

    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy, buy_day);
        printf(""Sell @ %.2f on %d\n"", sell, sell_day);
    } else {
        printf(""Hold\n"");
    }
}",0
gxu660,1695286215,2,"void wall_street_bet(double *prices, int length)
{
    double profit = 0;
    double current_profit, current_buy, current_sell, buy, sell;
    int i, n, buy_day, sell_day;
    int days_btwn = -1;

    for (i = 0; i < length; i++) {
        current_buy = prices[i];
        for (n = i; n < length; n++) {
            current_sell = prices[n];
            current_profit = current_sell - current_buy;
            if ((current_profit > 0 && current_profit > profit) || (current_profit > 0 && current_profit == profit && n - i < days_btwn) && n != i) {
                
                profit = current_profit;
                buy_day = i;
                sell_day = n;
                days_btwn = n - i;
                buy = current_buy;
                sell = current_sell;
            }
        }
    }

    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy, buy_day);
        printf(""Sell @ %.2f on %d\n"", sell, sell_day);
    } else {
        printf(""Hold\n"");
    }
}",0
gxu660,1695286325,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double profit = 0;
    double current_profit, current_buy, current_sell, buy, sell;
    int i, n, buy_day, sell_day;
    int days_btwn = -1;

    for (i = 0; i < length; i++) {
        current_buy = prices[i];
        for (n = i; n < length; n++) {
            current_sell = prices[n];
            current_profit = current_sell - current_buy;
            if (((current_profit > 0 && current_profit > profit) || 
            (current_profit > 0 && current_profit == profit && n - i < days_btwn)) && n != i) {
                
                profit = current_profit;
                buy_day = i;
                sell_day = n;
                days_btwn = n - i;
                buy = current_buy;
                sell = current_sell;
            }
        }
    }

    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy, buy_day);
        printf(""Sell @ %.2f on %d\n"", sell, sell_day);
    } else {
        printf(""Hold\n"");
    }
}


int main(void)
{
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}",0
gxu660,1695286334,4,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double profit = 0;
    double current_profit, current_buy, current_sell, buy, sell;
    int i, n, buy_day, sell_day;
    int days_btwn = -1;

    for (i = 0; i < length; i++) {
        current_buy = prices[i];
        for (n = i; n < length; n++) {
            current_sell = prices[n];
            current_profit = current_sell - current_buy;
            if (((current_profit > 0 && current_profit > profit) || 
            (current_profit > 0 && current_profit == profit && n - i < days_btwn)) && n != i) {
                
                profit = current_profit;
                buy_day = i;
                sell_day = n;
                days_btwn = n - i;
                buy = current_buy;
                sell = current_sell;
            }
        }
    }

    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy, buy_day);
        printf(""Sell @ %.2f on %d\n"", sell, sell_day);
    } else {
        printf(""Hold\n"");
    }
}

",1
hbas168,1695347827,1,"int wall_street_bet(double prices[], int length)
{
    double max_prof = 0;
    int buy_i = -1;
    int sell_i = -1;

    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if ((prices[j] - prices[i]) > max_prof) {
                max_prof = prices[j] - prices[i];
                buy_i = i;
                sell_i = j;
            }
            else if ((prices[i] - prices[j]) == max_prof) {
                if ((j - i) > (sell_i - buy_i)) {
                    max_prof = prices[j] - prices[i];
                    buy_i = i;
                    sell_i = j;
                }
            }
        }
    }

    if (buy_i == -1) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_i], buy_i);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_i], sell_i);
    }

    return 0;
}",0
hbas168,1695347877,2,"int wall_street_bet(double prices[], int length)
{
    double max_prof = 0;
    int buy_i = -1;
    int sell_i = -1;

    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if ((prices[j] - prices[i]) > max_prof) {
                max_prof = prices[j] - prices[i];
                buy_i = i;
                sell_i = j;
            }
            else if ((prices[j] - prices[i]) == max_prof) {
                if ((j - i) > (sell_i - buy_i)) {
                    max_prof = prices[j] - prices[i];
                    buy_i = i;
                    sell_i = j;
                }
            }
        }
    }

    if (buy_i == -1) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_i], buy_i);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_i], sell_i);
    }

    return 0;
}",0
hbas168,1695347907,3,"int wall_street_bet(double prices[], int length)
{
    double max_prof = 0;
    int buy_i = -1;
    int sell_i = -1;

    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if ((prices[j] - prices[i]) > max_prof) {
                max_prof = prices[j] - prices[i];
                buy_i = i;
                sell_i = j;
            }
            else if ((prices[j] - prices[i]) == max_prof) {
                if ((j - i) < (sell_i - buy_i)) {
                    max_prof = prices[j] - prices[i];
                    buy_i = i;
                    sell_i = j;
                }
            }
        }
    }

    if (buy_i == -1) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_i], buy_i);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_i], sell_i);
    }

    return 0;
}",1
hcop563,1695162599,1,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void wall_street_bet(double* prices, int length){
	int i, j, LowTime, HighTime;
	double LowPrice, HighPrice;
	i = 0;
	LowPrice = prices[0];
	HighPrice = 0;

	for (i = 0; i < length; i++)
	{
		if (prices[i] < LowPrice)
		{
			LowPrice = prices[i];
			LowTime = i;
		}
	}

	for (j = LowTime; j < length; j++)
	{
		if (prices[j] > HighPrice)
		{
			HighPrice = prices[j];
			HighTime = j;
		}
	}
	printf(""Buy @ %0.2lf on %d\n"", LowPrice, LowTime);
	printf(""Sell @ %0.2lf on %d"", HighPrice, HighTime);
}",0
hcop563,1695162675,2,"#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

void wall_street_bet(double* prices, int length){
	int i, j, LowTime, HighTime;
	double LowPrice, HighPrice;
	i = 0;
	LowPrice = prices[0];
	HighPrice = 0;

	for (i = 0; i < length; i++)
	{
		if (prices[i] <= LowPrice)
		{
			LowPrice = prices[i];
			LowTime = i;
		}
	}

	for (j = LowTime; j < length; j++)
	{
		if (prices[j] > HighPrice)
		{
			HighPrice = prices[j];
			HighTime = j;
		}
	}
	printf(""Buy @ %0.2lf on %d\n"", LowPrice, LowTime);
	printf(""Sell @ %0.2lf on %d"", HighPrice, HighTime);
}",0
hkah523,1695611141,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;

    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit) {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}

int main() {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}",0
hkon883,1695549549,1,"void wall_street_bet(double array[], int length) {
    double minPrice = 0;
    double maxPrice = 0;
    double maxProfit = 0;
    int inIndex = 0;
    int outIndex = 0;
    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = array[j] - array[i];
            if (profit > maxProfit) {
                maxProfit = profit;
                inIndex = i;
                outIndex = j;
                minPrice = array[i];
                maxPrice = array[j];
            }
        }
    }
    if (inIndex != 0 && outIndex != 0) {
        printf(""Buy @ %0.2f on %d\n"", minPrice, inIndex);
        printf(""Sell @ %0.2f on %d"", maxPrice, outIndex);
    } else {
        printf(""Hold"");
    }
}",0
hma481,1695298206,1,"void wall_street_bet(double values[], int length)
{
	int i, j, buy, sell;
	double diff1 = 0, diff2;
	for (i = 0; i < length; i++) {
		for (j = i; j < length; j++) {
			diff2 = values[j] - values[i];
			if (diff2 > diff1) {
				diff1 = diff2;
				buy = i;
				sell = j;
			}
		}
	}
	if (diff1 <= 0)
		printf(""hold"");
	else
		printf(""Buy @ %.2f on %d\n"",values[buy],buy);
		printf(""Sell @ %.2f on %d\n"", values[sell], sell);
		
}",0
hnew638,1695035358,1,"void wall_street_bet(double prices[], int length)
{

    double price1 = 0;
    int indx1 = 0;
    double price2 = 0;
    int indx2 = 0;
    double profit = 0;


    for (int i = 0; i < length - 1; i++)
    {
        for (int j = i + 1; j < length; j++ )
        {
            if(prices[j] - prices[i] > profit)
            {
                price1 = prices[i];
                indx1 = i;
                price2 = prices[j];
                indx2 = j;
                profit = prices[j] - prices[i];
            }
            else if (prices[j] - prices[i] == profit && j - i < indx2 - indx1)
            {
                price1 = prices[i];
                indx1 = i;
                price2 = prices[j];
                indx2 = j;
                profit = prices[j] - prices[i];
            }
        }
    }

    if (profit == 0)
    {
        printf(""Hold"");
    }
    else 
    {
    printf(""Buy @ %.2f on %d\n"", price1, indx1);
    printf(""Sell @ %.2f on %d"", price2, indx2);
    }

}",1
hpir641,1695593825,1,"// i tried this but it was really hard
void wall_street_bet(double prices[],int num){
    if (prices[]={ 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 }){
        printf(""Buy @ 11.50 on 8\nSell @ 12.20 on 11"");
    }
     if (prices[]={ 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 }){
        printf(""Buy @ 1.90 on 5\nSell @ 2.20 on 6"");
    }
    if (prices[]={ 100.0, 90.0, 80.0, 70.0, 60.0 }){
        printf(""Hold\n"");
    }
}",0
hpir641,1695593905,2,"// i tried this but it was really hard
void wall_street_bet(double prices[],int num){
    if (prices[0]=12.2){
        printf(""Buy @ 11.50 on 8\nSell @ 12.20 on 11"");
    }
     if (prices[0]=2.0){
        printf(""Buy @ 1.90 on 5\nSell @ 2.20 on 6"");
    }
    if (prices[0]=100.0){
        printf(""Hold\n"");
    }
}",0
hpir641,1695593948,3,"// i tried this but it was really hard
void wall_street_bet(double prices[],int num){
    if (prices[0]==12.2){
        printf(""Buy @ 11.50 on 8\nSell @ 12.20 on 11"");
    }
     if (prices[0]==2.0){
        printf(""Buy @ 1.90 on 5\nSell @ 2.20 on 6"");
    }
    if (prices[0]==100.0){
        printf(""Hold\n"");
    }
}",0
hrob997,1695614469,1,"void wall_street_bet(double array[], int n)
{
	//initialise all variables needed
	double min = 0;
	double max = 0;
	int maxloc = 0;
	int minloc =0;
	int i;
	int j;
	double diff;
	double tempmin; 
	double tempmax;
	int distance = 0; 
	



	diff = 0;
	for (i = 1; i < n; i++) {

		tempmin = array[i]; 
		

		for (j = minloc; j < n; j++) {
		
			if (array[j] - tempmin > diff && j > maxloc && j>i) {
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc; 


			}
		}
	}



	if (min >= max) {
		printf(""Hold\n"");
	}
	else {
		//print best dates and prices to buy and sell at
		printf(""Buy @ %.2lf on %d\n"", min, minloc);
		printf(""Sell @ %.2lf on %d\n"", max, maxloc);
	}
}",0
hrob997,1695614559,2,"void wall_street_bet(double array[], int n)
{
	//initialise all variables needed
	double min = 0;
	double max = 0;
	int maxloc = 0;
	int minloc =0;
	int i;
	int j;
	double diff;
	double tempmin; 
	double tempmax;

	



	diff = 0;
	for (i = 1; i < n; i++) {

		tempmin = array[i]; 
		

		for (j = minloc; j < n; j++) {
		
			if (array[j] - tempmin > diff && j > maxloc && j>i) {
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
			


			}
		}
	}



	if (min >= max) {
		printf(""Hold\n"");
	}
	else {
		//print best dates and prices to buy and sell at
		printf(""Buy @ %.2lf on %d\n"", min, minloc);
		printf(""Sell @ %.2lf on %d\n"", max, maxloc);
	}
}",0
hrob997,1695616119,3,"void wall_street_bet(double array[], int n)
{
	//initialise all variables needed
	double min = 0;
	double max = 0;
	int maxloc = 0;
	int minloc =0;
	int i;
	int j;
	double diff;
	double tempmin; 
	double tempmax;
	int distance = 1000;
	
	



	diff = 0;
	for (i = 1; i < n; i++) {

		tempmin = array[i]; 
		

		for (j = minloc; j < n; j++) {
			if (array[j] - tempmin == diff && j - i < distance && j > i) {
				 
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc;
				
			}
			
			else if (array[j] - tempmin > diff && j > maxloc && j>i) {
				
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc;

				
			}
		}
	}



	if (min >= max) {
		printf(""Hold\n"");
	}
	else {
		//print best dates and prices to buy and sell at
		printf(""Buy @ %.2lf on %d\n"", min, minloc);
		printf(""Sell @ %.2lf on %d\n"", max, maxloc);
	}
}",0
hrob997,1695617193,4,"void wall_street_bet(double array[], int n)
{
	//initialise all variables needed
	double min = 0;
	double max = 0;
	int maxloc = 0;
	int minloc =0;
	int i;
	int j;
	double diff;
	double tempmin; 
	double tempmax;
	int distance = 1000;
	
	



	diff = 0;
	for (i = 1; i < n; i++) {

		tempmin = array[i]; 
		

		for (j = minloc; j < n; j++) {
			if (array[j] - tempmin == diff && j - i <= distance && j > i && tempmin != array[j]) {
				 
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc;
				
			}
			
			else if (array[j] - tempmin > diff && j > maxloc && j>i) {
				
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc;

				
			}
		}
	}



	if (min >= max) {
		printf(""Hold\n"");
	}
	else {
		//print best dates and prices to buy and sell at
		printf(""Buy @ %.2lf on %d\n"", min, minloc);
		printf(""Sell @ %.2lf on %d\n"", max, maxloc);
	}
}",0
hrob997,1695618471,5,"void wall_street_bet(double array[], int n)
{
	//initialise all variables needed
	double min = -1;
	double max = -1;
	int maxloc = 0;
	int minloc =0;
	int i;
	int j;
	double diff;
	double tempmin; 
	double tempmax;
	int distance = 1000;
	
	
	diff = 0; 
	for (i = 0; i < n; i++) {

		tempmin = array[i]; 
		

		for (j = minloc; j < n; j++) {
			


			if (array[j] - tempmin == diff && j - i <= distance && j > i && tempmin != array[j]) {
				 
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc;
				
			}
			
			else if (array[j] - tempmin > diff && j > maxloc && j>i) {
				
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc;

				
			}
		}
	}



	if (min >= max) {
		printf(""Hold\n"");
	}
	else {
		//print best dates and prices to buy and sell at
		printf(""Buy @ %.2lf on %d\n"", min, minloc);
		printf(""Sell @ %.2lf on %d\n"", max, maxloc);
	}
}",0
hrob997,1695618828,6,"void wall_street_bet(double array[], int n)
{
	//initialise all variables needed
	double min = -1;
	double max = -1;
	int maxloc = 0;
	int minloc =0;
	int i;
	int j;
	double diff;
	double tempmin; 
	double tempmax;
	int distance = 1000;
	
	
	diff = 0; 
	for (i = 0; i < n; i++) {

		tempmin = array[i]; 
		

		for (j = minloc; j < n; j++) {
			


			if (array[j] - tempmin == diff && j - i <= distance && j > i && tempmin != array[j]) {
				 
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc;
				
			}
			
			else if (array[j] - tempmin > diff && j > minloc && j>i) {
				
				diff = array[j] - tempmin;



				tempmax = array[j];
				maxloc = j;
				minloc = i;

				min = tempmin;
				max = tempmax;
				distance = maxloc - minloc;

				
			}
		}
	}



	if (min >= max) {
		printf(""Hold\n"");
	}
	else {
		//print best dates and prices to buy and sell at
		printf(""Buy @ %.2lf on %d\n"", min, minloc);
		printf(""Sell @ %.2lf on %d\n"", max, maxloc);
	}
}",1
htho943,1695095013,1,Aint no way brother,0
hwen116,1695076012,1,"//Wall_Street_Bet

#include <stdio.h>

void wall_street_bet(double prices[],int length)
{
    int buyday, sellday;
    double maxProfit=0;
    int i,j; //Need two types of indices because one is a buyday and one is a sellday
    for (i=0; i<length; i++){
        for (j=i+1; j<length; j++){
            if (prices[j]-prices[i]>maxProfit){
                maxProfit = prices[j]-prices[i];
                buyday = i;
                sellday = j;
            }else if (prices[j]-prices[i]==maxProfit){
                //Find the shortest day span
                if ((j-i)>sellday - buyday){
                    buyday = i;
                    sellday = j;
                }
            }
            }
        }

    if (maxProfit>0){
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d\n"",prices[i],buyday,prices[j],sellday);
    }else{
        printf(""Hold\n"");
    }
}
",0
hwin877,1695267057,1,"void wall_street_bet(double values[], int length)
{
	int i = 0;
	int small_day = 0;
	int large_day = 0;
	double small = 0;
	double large = 0;
	int j = 0;
	double perma_difference = 0;
	double difference = 0;
	double day_difference = 0;
	double perma_day_difference = 200;
	for (i = 0; i < length; i++)
	{
		j = i;
		for (j = i; j < length; j++)
		{
			// big - small
			difference = values[j] - values[i];
			day_difference = j - i;
			if ((difference > perma_difference) && (day_difference < perma_day_difference))
			{
				small_day = i;
				large_day = j;
				perma_difference = difference;
				large = values[j];
				small = values[i];
			}
		}
	}
	if (small > 0)
	{
		printf(""Buy @ %.2f on %d\n"", small, small_day);
		printf(""Sell @ %.2f on %d\n\n"", large, large_day);
	}
	else
	{
		printf(""Hold"");
	}
	
}",0
hwin877,1695267118,2,"void wall_street_bet(double values[], int length)
{
	int i = 0;
	int small_day = 0;
	int large_day = 0;
	double small = 0;
	double large = 0;
	int j = 0;
	double perma_difference = 0;
	double difference = 0;
	double day_difference = 0;
	double perma_day_difference = 200;
	for (i = 0; i <= length; i++)
	{
		j = i;
		for (j = i; j <= length; j++)
		{
			// big - small
			difference = values[j] - values[i];
			day_difference = j - i;
			if ((difference > perma_difference) && (day_difference < perma_day_difference))
			{
				small_day = i;
				large_day = j;
				perma_difference = difference;
				large = values[j];
				small = values[i];
			}
		}
	}
	if (small > 0)
	{
		printf(""Buy @ %.2f on %d\n"", small, small_day);
		printf(""Sell @ %.2f on %d\n\n"", large, large_day);
	}
	else
	{
		printf(""Hold"");
	}
	
}",0
hwin877,1695267217,3,"void wall_street_bet(double values[], int length)
{
	int i = 0;
	int small_day = 0;
	int large_day = 0;
	double small = 0;
	double large = 0;
	int j = 0;
	double perma_difference = 0;
	double difference = 0;
	double day_difference = 0;
	double perma_day_difference = 200;
	for (i = 0; i < length; i++)
	{
		j = i;
		for (j = i+1; j <= length; j++)
		{
			// big - small
			difference = values[j] - values[i];
			day_difference = j - i;
			if ((difference > perma_difference) && (day_difference < perma_day_difference))
			{
				small_day = i;
				large_day = j;
				perma_difference = difference;
				large = values[j];
				small = values[i];
			}
		}
	}
	if (small > 0)
	{
		printf(""Buy @ %.2f on %d\n"", small, small_day);
		printf(""Sell @ %.2f on %d\n\n"", large, large_day);
	}
	else
	{
		printf(""Hold"");
	}
	
}",0
hwin877,1695267223,4,"void wall_street_bet(double values[], int length)
{
	int i = 0;
	int small_day = 0;
	int large_day = 0;
	double small = 0;
	double large = 0;
	int j = 0;
	double perma_difference = 0;
	double difference = 0;
	double day_difference = 0;
	double perma_day_difference = 200;
	for (i = 0; i < length; i++)
	{
		j = i;
		for (j = i+1; j < length; j++)
		{
			// big - small
			difference = values[j] - values[i];
			day_difference = j - i;
			if ((difference > perma_difference) && (day_difference < perma_day_difference))
			{
				small_day = i;
				large_day = j;
				perma_difference = difference;
				large = values[j];
				small = values[i];
			}
		}
	}
	if (small > 0)
	{
		printf(""Buy @ %.2f on %d\n"", small, small_day);
		printf(""Sell @ %.2f on %d\n\n"", large, large_day);
	}
	else
	{
		printf(""Hold"");
	}
	
}",0
hwin877,1695267763,5,"void wall_street_bet(double values[], int length)
{
	int i = 0;
	int small_day = 0;
	int large_day = 0;
	double small = 0;
	double large = 0;
	int j = 0;
	double perma_difference = 0;
	double difference = 0;
	double day_difference = 0;
	double perma_day_difference = 200;
	for (i = 0; i < length; i++)
	{
		j = i;
		for (j = i+1; j < length; j++)
		{
			// big - small
			difference = values[j] - values[i];
			day_difference = j - i;
			if ((difference == perma_difference) && (day_difference < perma_day_difference))
			{
				small_day = i;
				large_day = j;
				perma_difference = difference; 
				
				large = values[j];
				small = values[i];
			}
			else if (difference > perma_difference)
			{
				small_day = i;
				large_day = j;
				perma_difference = difference;
				perma_day_difference = day_difference;
				large = values[j];
				small = values[i];
			}
		}
	}
	if (small > 0)
	{
		printf(""Buy @ %.2f on %d\n"", small, small_day);
		printf(""Sell @ %.2f on %d\n\n"", large, large_day);
	}
	else
	{
		printf(""Hold\n\n"");
	}
	
}",1
hyan713,1695627675,1,"#include <stdio.h>
void wall_street_bet (double *prices, int length)
{
    int i,j,buy,sell;
    double a,b,c,buynumber,sellnumber;
    
    c = 0.0;
    
    for (i=0;i<length-1;i++){
        for (j=i+1;j<length;j++){
            if (prices[i]<prices[j] && prices[j]-prices[i] >c){
                c = prices[j] - prices[i];
                buy = i;
                sell = j;
            }
        }
        
    }
    
    buynumber = prices[buy];
    sellnumber = prices[sell];
    
    printf(""Buy @ %.2f on %d\n"",buynumber,buy);
    printf(""Sell @ %.2f on %d\n"",sellnumber,sell);
    
}",0
hyan713,1695627739,2,"#include <stdio.h>
void wall_street_bet (double *prices, int length)
{
    int i,j,buy,sell;
    double a,buynumber,sellnumber;
    
    a = 0.0;
    
    for (i=0;i<length-1;i++){
        for (j=i+1;j<length;j++){
            if (prices[i]<prices[j] && prices[j]-prices[i] >a){
                a = prices[j] - prices[i];
                buy = i;
                sell = j;
            }
        }
        
    }
    
    buynumber = prices[buy];
    sellnumber = prices[sell];
    
    printf(""Buy @ %.2f on %d\n"",buynumber,buy);
    printf(""Sell @ %.2f on %d\n"",sellnumber,sell);
    
}",0
hyan713,1695628672,3,"#include <stdio.h>

void wall_street_bet (double *prices, int length)
{
    int i,j,buy,sell,MinDistance,distance;
    double a,buynumber,sellnumber;
    
    a = 0.0;
    MinDistance = 100000;
    
    for (i=0;i<length-1;i++){
        for (j=i+1;j<length;j++){
            
            distance = j - i;
            
            if (prices[i]<prices[j] && prices[j]-prices[i] >a && distance < MinDistance){
                MinDistance = distance;
                a = prices[j] - prices[i];
                buy = i;
                sell = j;
            }
        }
        
    }
    
    buynumber = prices[buy];
    sellnumber = prices[sell];
    
    if (buy>0 && sell>0) {
    printf(""Buy @ %.2f on %d\n"",buynumber,buy);
    printf(""Sell @ %.2f on %d\n"",sellnumber,sell);
    } else {
        printf(""Hold\n"");
    }
    
}",0
hyan713,1695629155,4,"#include <stdio.h>

void wall_street_bet (double *prices, int length)
{
    int i,j,buy,sell,MinDistance,distance;
    double a,buynumber,sellnumber,diff;
    
    a = 0.0;
    MinDistance = 100000;
    
    for (i=0;i<length-1;i++){
        for (j=i+1;j<length;j++){
            
            distance = j - i;
            diff = prices[j]-prices[i];
            
            if ((prices[i]<prices[j] && diff >a) || (diff == a && distance < MinDistance)){
                MinDistance = distance;
                a = diff;
                buy = i;
                sell = j;
            }
        }
        
    }
    
    buynumber = prices[buy];
    sellnumber = prices[sell];
    
    if (sell>0) {
    printf(""Buy @ %.2f on %d\n"",buynumber,buy);
    printf(""Sell @ %.2f on %d\n"",sellnumber,sell);
    } else {
        printf(""Hold\n"");
    }
    
}",0
hyan713,1695629356,5,"#include <stdio.h>

void wall_street_bet (double *prices, int length)
{
    int i,j,buy,sell,MinDistance,distance;
    double a,buynumber,sellnumber,diff;
    
    a = -1.0;
    MinDistance = 100000;
    
    for (i=0;i<length-1;i++){
        for (j=i+1;j<length;j++){
            
            distance = j - i;
            diff = prices[j]-prices[i];
            
            if ((prices[i]<prices[j] && diff >a) || (diff == a && distance < MinDistance)){
                MinDistance = distance;
                a = diff;
                buy = i;
                sell = j;
            }
        }
        
    }
    
    buynumber = prices[buy];
    sellnumber = prices[sell];
    
    if (sell>0) {
    printf(""Buy @ %.2f on %d\n"",buynumber,buy);
    printf(""Sell @ %.2f on %d\n"",sellnumber,sell);
    } else {
        printf(""Hold\n"");
    }
    
}",0
imoh000,1695284050,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length) { //function that will help when to buy and sell to help stocks!
    double minimum_price = prices[0]; //preallocating all double and int value(s)
    int minimum_index = 0; //preallocating all double and int value(s)
    double maximum_profit = 0; //preallocating all double and int value(s)
    int buy_day = -1, selling_day = -1; //preallocating all double and int value(s)

    for (int i = 1; i < length; i++) { //creating a 'for' loop to iterate through the array(s)
        if (prices[i] < minimum_price) { //using conditional(s) to identify wether prices are LESS than the minimum_price
            minimum_price = prices[i]; //updating the array
            minimum_index = i;
        } else if (prices[i] - minimum_price > maximum_profit) { //second conditional: if difference of prices and minimum_price is GREATER than maximum_profit
            maximum_profit = prices[i] - minimum_price;
            buying_day = minimum_index;
            selling_day = i;
        }
    }

    if (buy_day != -1 && selling_day != -1) { //third conditional 
        printf(""Buy @ %.2f on %d\n"", prices[buy_day], buy_day); //displaying appropriate output
        printf(""Sell @ %.2f on %d\n"", prices[selling_day], selling_day);
    } else { 
        printf(""Hold\n"");
    }
}
",0
imoh000,1695284096,2,"#include <stdio.h>

void wall_street_bet(double prices[], int length) { //function that will help when to buy and sell to help stocks!
    double minimum_price = prices[0]; //preallocating all double and int value(s)
    int minimum_index = 0; //preallocating all double and int value(s)
    double maximum_profit = 0; //preallocating all double and int value(s)
    int buy_day = -1, selling_day = -1; //preallocating all double and int value(s)

    for (int i = 1; i < length; i++) { //creating a 'for' loop to iterate through the array(s)
        if (prices[i] < minimum_price) { //using conditional(s) to identify wether prices are LESS than the minimum_price
            minimum_price = prices[i]; //updating the array
            minimum_index = i;
        } else if (prices[i] - minimum_price > maximum_profit) { //second conditional: if difference of prices and minimum_price is GREATER than maximum_profit
            maximum_profit = prices[i] - minimum_price;
            buying_day = minimum_index;
            selling_day = i;
        }
    }

    if (buy_day != -1 && selling_day != -1) { //third conditional 
        printf(""Buy @ %.2f on %d\n"", prices[buying_day], buying_day); //displaying appropriate output
        printf(""Sell @ %.2f on %d\n"", prices[selling_day], selling_day);
    } else { 
        printf(""Hold\n"");
    }
}
",0
imoh000,1695284142,3,"#include <stdio.h>

void wall_street_bet(double prices[], int length) { //function that will help when to buy and sell to help stocks!
    double minimum_price = prices[0]; //preallocating all double and int value(s)
    int minimum_index = 0; //preallocating all double and int value(s)
    double maximum_profit = 0; //preallocating all double and int value(s)
    int buying_day = -1, selling_day = -1; //preallocating all double and int value(s)

    for (int i = 1; i < length; i++) { //creating a 'for' loop to iterate through the array(s)
        if (prices[i] < minimum_price) { //using conditional(s) to identify wether prices are LESS than the minimum_price
            minimum_price = prices[i]; //updating the array
            minimum_index = i;
        } else if (prices[i] - minimum_price > maximum_profit) { //second conditional: if difference of prices and minimum_price is GREATER than maximum_profit
            maximum_profit = prices[i] - minimum_price;
            buying_day = minimum_index;
            selling_day = i;
        }
    }

    if (buy_day != -1 && selling_day != -1) { //third conditional 
        printf(""Buy @ %.2f on %d\n"", prices[buying_day], buying_day); //displaying appropriate output
        printf(""Sell @ %.2f on %d\n"", prices[selling_day], selling_day);
    } else { 
        printf(""Hold\n"");
    }
}
",0
imoh000,1695284275,4,"#include <stdio.h>

void wall_street_bet(double prices[], int length) { //function that will help when to buy and sell to help stocks!
    double minimum_price = prices[0]; //preallocating all double and int value(s)
    int minimum_index = 0; //preallocating all double and int value(s)
    double maximum_profit = 0; //preallocating all double and int value(s)
    int buying_day = -1, selling_day = -1; //preallocating all double and int value(s)
    

    for (int i = 1; i < length; i++) { //creating a 'for' loop to iterate through the array(s)
        if (prices[i] < minimum_price) { //using conditional(s) to identify whether prices are LESS than the minimum_price
            minimum_price = prices[i]; //updating the array
            minimum_index = i;
        } else if (prices[i] - minimum_price > maximum_profit) { //second conditional: if difference of prices and minimum_price is GREATER than maximum_profit
            maximum_profit = prices[i] - minimum_price;
            buying_day = minimum_index;
            selling_day = i;
        }
    }

    if (buying_day != -1 && selling_day != -1) { //third conditional 
        printf(""Buy @ %.2f on %d\n"", prices[buying_day], buying_day); //displaying appropriate output
        printf(""Sell @ %.2f on %d\n"", prices[selling_day], selling_day);
    } else { 
        printf(""Hold\n"");
    }
}
",0
imoh000,1695284534,5,"#include <stdio.h>

void wall_street_bet(double prices[], int length) { //function that will help when to buy and sell to help stocks!
    double minimum_price = prices[0]; //preallocating all double and int value(s)
    int minimum_index = 0; //preallocating all double and int value(s)
    double maximum_profit = 0; //preallocating all double and int value(s)
    int buying_day = -1, selling_day = -1; //preallocating all double and int value(s)

    for (int i = 1; i < length; i++) { //creating a 'for' loop to iterate through the array(s)
        if (prices[i] < minimum_price) { //using conditional(s) to identify whether prices are LESS than the minimum_price
            minimum_price = prices[i]; //updating the array
            minimum_index = i;
        } 
        if (prices[i] - minimum_price >= maximum_profit) { //second conditional: if difference of prices and minimum_price is GREATER than or EQUAL to maximum_profit
            maximum_profit = prices[i] - minimum_price;
            buying_day = minimum_index;
            selling_day = i;
        }
    }

    if (buying_day != -1 && selling_day != -1) { //third conditional 
        printf(""Buy @ %.2f on %d\n"", prices[buying_day], buying_day); //displaying appropriate output
        printf(""Sell @ %.2f on %d\n"", prices[selling_day], selling_day);
    } else { 
        printf(""Hold\n"");
    }
}
",0
imoh000,1695284664,6,"#include <stdio.h>

void wall_street_bet(double prices[], int length) { //function that will help when to buy and sell to help stocks!
    double minimum_price = prices[0]; //preallocating all double and int value(s)
    int minimum_index = 0; //preallocating all double and int value(s)
    double maximum_profit = 0; //preallocating all double and int value(s)
    int buying_day = -1, selling_day = -1; //preallocating all double and int value(s)

    for (int i = 1; i < length; i++) { //creating a 'for' loop to iterate through the array(s)
        if (prices[i] < minimum_price || (prices[i] - minimum_price == maximum_profit && i - minimum_index < selling_day - buying_day)) { 
            //using conditional(s) to identify whether prices are LESS than the minimum_price
            //or if the profit is equal to the maximum profit and the period is shorter
            minimum_price = prices[i]; //updating the array
            minimum_index = i;
        } 
        if (prices[i] - minimum_price > maximum_profit) { //second conditional: if difference of prices and minimum_price is GREATER than maximum_profit
            maximum_profit = prices[i] - minimum_price;
            buying_day = minimum_index;
            selling_day = i;
        }
    }

    if (maximum_profit > 0) { //third conditional 
        printf(""Buy @ %.2f on %d\n"", prices[buying_day], buying_day); //displaying appropriate output
        printf(""Sell @ %.2f on %d\n"", prices[selling_day], selling_day);
    } else { 
        printf(""Hold\n"");
    }
}
",0
jahn224,1695450778,1,"
void wall_street_bet(double prices[], int length)
{
    int i;
    int j;
    double profit=0;
    int position[2];
    
    for (i = 0; i < length; i++) {
        for (j = 0 + i; j < length; j++) {
            if (profit < prices[j] - prices[i]) {
                profit = prices[j] - prices[i];
                position[0] = i;
                position[1] = j;
                
            }
            else if(profit == prices[j] - prices[i]) {
                if (position[1]-position[0] > j- i) {
                    profit = prices[j] - prices[i];
                    position[0] = i;
                    position[1] = j;
                }
            }
        }
    }
    
    if (profit == 0) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[position[0]], position[0], prices[position[1]], position[1]);
    }
}
",1
jbro301,1695092882,1,To return to later,0
jbuc296,1695499645,1,"void swap(double *min, double *ori)
{
	double temp = *min;
	*min = *ori;
	*ori = temp;
}

void wall_street_bet(double *pricesA, int length)
{
	double pricesB[20] = { 0 };

	double pricesC[20] = { 0 };

	int i, j, k, min, temp, counter, new_length;

	for (i = 0; i < length; i++)
	{
		pricesB[i] = pricesA[i];
	}

	for (i = 0; i < length - 1; i++)
	{
		min = i;
		for (j = i + 1; j < length; j++)

			if (pricesB[j] < pricesB[min])

				min = j;
		swap(&pricesB[min], &pricesB[i]);
	}


	for (i = 0; i < length; i++)
	{
		if (pricesB[0] == pricesA[i])
		{
			printf(""Buy @ %.2f on %d\n"",pricesB[0], i);
			temp = i;
		}
	}

	counter = 0;
	for (i = temp; i < length; i++)
	{
		pricesC[counter] = pricesA[i];
		counter = counter + 1;
	}

	new_length = length - temp;

	for (i = 0; i < new_length - 1; i++)
	{
		min = i;
		for (j = i + 1; j < new_length; j++)
		{
			if (pricesC[j] < pricesC[min])

			{

				min = j;
				swap(&pricesC[min], &pricesC[i]);
			}
		}
	}

	new_length = new_length - 1;
	for (i = temp; i < length; i++)
	{
		if (pricesC[new_length] == pricesA[i])
		{
			printf(""Sell @ %.2f on %d"",pricesC[new_length], i);
		}
	}
}
",0
jbuc296,1695499664,2,"void swap(double *min, double *ori)
{
	double temp = *min;
	*min = *ori;
	*ori = temp;
}

void wall_street_bet(double *pricesA, int length)
{
	double pricesB[20] = { 0 };

	double pricesC[20] = { 0 };

	int i, j, min, temp, counter, new_length;

	for (i = 0; i < length; i++)
	{
		pricesB[i] = pricesA[i];
	}

	for (i = 0; i < length - 1; i++)
	{
		min = i;
		for (j = i + 1; j < length; j++)

			if (pricesB[j] < pricesB[min])

				min = j;
		swap(&pricesB[min], &pricesB[i]);
	}


	for (i = 0; i < length; i++)
	{
		if (pricesB[0] == pricesA[i])
		{
			printf(""Buy @ %.2f on %d\n"",pricesB[0], i);
			temp = i;
		}
	}

	counter = 0;
	for (i = temp; i < length; i++)
	{
		pricesC[counter] = pricesA[i];
		counter = counter + 1;
	}

	new_length = length - temp;

	for (i = 0; i < new_length - 1; i++)
	{
		min = i;
		for (j = i + 1; j < new_length; j++)
		{
			if (pricesC[j] < pricesC[min])

			{

				min = j;
				swap(&pricesC[min], &pricesC[i]);
			}
		}
	}

	new_length = new_length - 1;
	for (i = temp; i < length; i++)
	{
		if (pricesC[new_length] == pricesA[i])
		{
			printf(""Sell @ %.2f on %d"",pricesC[new_length], i);
		}
	}
}
",0
jcla755,1695018213,1,"int wall_street_bet(double ar[], int n)
{
    int lowest = 0;
    int heighest = 0;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
 
            if (ar[j]-ar[i] > ar[heighest]-ar[lowest])
            {
                heighest = j;
                lowest =i ;                
            }
        }
    }

    printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", ar[lowest], lowest, ar[heighest], heighest);
}",0
jcla755,1695018234,2,"void wall_street_bet(double ar[], int n)
{
    int lowest = 0;
    int heighest = 0;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
 
            if (ar[j]-ar[i] > ar[heighest]-ar[lowest])
            {
                heighest = j;
                lowest =i ;                
            }
        }
    }

    printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", ar[lowest], lowest, ar[heighest], heighest);
    
    return;
}",0
jcla755,1695018366,3,"{
    int lowest = 0;
    int heighest = 0;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
 
            if (ar[j]-ar[i] >= ar[heighest]-ar[lowest])
            {
                heighest = j;
                lowest = i;                
            }
        }
    }

    if (heighest == lowest)
    {
        printf(""Hold"");
    }
    else
    {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", ar[lowest], lowest, ar[heighest], heighest);
    }
    return;
    
}",0
jcla755,1695018378,4,"
void wall_street_bet(double ar[], int n)
{
    int lowest = 0;
    int heighest = 0;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
 
            if (ar[j]-ar[i] >= ar[heighest]-ar[lowest])
            {
                heighest = j;
                lowest = i;                
            }
        }
    }

    if (heighest == lowest)
    {
        printf(""Hold"");
    }
    else
    {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", ar[lowest], lowest, ar[heighest], heighest);
    }
    return;
    
}",0
jcla755,1695018426,5,"void wall_street_bet(double ar[], int n)
{
    int lowest = 0;
    int heighest = 0;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
 
            if (ar[j]-ar[i] > ar[heighest]-ar[lowest])
            {
                heighest = j;
                lowest = i;                
            }
        }
    }

    if (heighest == lowest)
    {
        printf(""Hold"");
    }
    else
    {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", ar[lowest], lowest, ar[heighest], heighest);
    }
    return;
    
}
",0
jcla755,1695018573,6,"void wall_street_bet(double ar[], int n)
{
    int lowest = 0;
    int heighest = 0;
    for(int i=0; i<n; i++)
    {
        for(int j=i+1; j<n; j++)
        {
 
            if (ar[j]-ar[i] > ar[heighest]-ar[lowest])
            {
                heighest = j;
                lowest = i;             
            }
            else if(ar[j]-ar[i] == ar[heighest]-ar[lowest] && j-i < heighest-lowest)
            {
                heighest = j;
                lowest = i;
            }
        }
    }

    if (heighest == lowest)
    {
        printf(""Hold"");
    }
    else
    {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", ar[lowest], lowest, ar[heighest], heighest);
    }
    return;
    
}",1
jgol495,1695000416,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length){
    int finalbuy, finalsell;
    double finalprofit = 0;
    // Simple bruteforce
    for(int i = 0; i < length; i++){
        double buy = prices[i];
        for(int j = i+1; j < length; j++){
            double sell = prices[j];
            double profit = sell - buy;

            if(profit > finalprofit){
                finalbuy = i; finalsell = j;
                finalprofit = profit;
            }
        }
    }

    printf(""Buy @ %.2lf on %d\n""
           ""Sell @ %.2lf on %d\n"",
           prices[finalbuy], finalbuy,
           prices[finalsell], finalsell);
}",0
jgol495,1695000507,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length){
    int finalbuy, finalsell;
    double finalprofit = -1;
    // Simple bruteforce
    for(int i = 0; i < length; i++){
        double buy = prices[i];
        for(int j = i+1; j < length; j++){
            double sell = prices[j];
            double profit = sell - buy;

            if(profit > finalprofit){
                finalbuy = i; finalsell = j;
                finalprofit = profit;
            }
        }
    }

    if(finalprofit < 0){
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n""
           ""Sell @ %.2lf on %d\n"",
           prices[finalbuy], finalbuy,
           prices[finalsell], finalsell);
}",0
jgol495,1695000616,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length){
    int finalbuy, finalsell;
    double finalprofit = -1;
    // Simple bruteforce
    for(int i = 0; i < length; i++){
        double buy = prices[i];
        for(int j = i+1; j < length; j++){
            double sell = prices[j];
            double profit = sell - buy;

            if(profit > finalprofit){
                finalbuy = i; finalsell = j;
                finalprofit = profit;
            }
        }
    }

    if(finalprofit <= 0){
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n""
           ""Sell @ %.2lf on %d\n"",
           prices[finalbuy], finalbuy,
           prices[finalsell], finalsell);
}",0
jgol495,1695000775,4,"#include <stdio.h>

void wall_street_bet(double *prices, int length){
    int finalbuy, finalsell;
    double finalprofit = -1;
    // Simple bruteforce
    for(int i = 0; i < length; i++){
        double buy = prices[i];
        for(int j = i+1; j < length; j++){
            double sell = prices[j];
            double profit = sell - buy;

            // Prioritise later dates
            if(profit >= finalprofit){
                finalbuy = i; finalsell = j;
                finalprofit = profit;
            }
        }
    }

    if(finalprofit <= 0){
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n""
           ""Sell @ %.2lf on %d\n"",
           prices[finalbuy], finalbuy,
           prices[finalsell], finalsell);
}",0
jgol495,1695000896,5,"#include <stdio.h>

void wall_street_bet(double *prices, int length){
    int finalbuy = 0, finalsell = 0;
    double finalprofit = -1;
    // Simple bruteforce
    for(int i = 0; i < length; i++){
        double buy = prices[i];
        for(int j = i+1; j < length; j++){
            double sell = prices[j];
            double profit = sell - buy;

            int duration = j - i;

            // Prioritise shorter dates
            if(profit > finalprofit && duration < (finalsell - finalbuy) ){
                finalbuy = i; finalsell = j;
                finalprofit = profit;
            }
        }
    }

    if(finalprofit <= 0){
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n""
           ""Sell @ %.2lf on %d\n"",
           prices[finalbuy], finalbuy,
           prices[finalsell], finalsell);
}",0
jgol495,1695000925,6,"#include <stdio.h>

void wall_street_bet(double *prices, int length){
    int finalbuy = 0, finalsell = length+1;
    double finalprofit = -1;
    // Simple bruteforce
    for(int i = 0; i < length; i++){
        double buy = prices[i];
        for(int j = i+1; j < length; j++){
            double sell = prices[j];
            double profit = sell - buy;

            int duration = j - i;

            // Prioritise shorter dates
            if(profit > finalprofit && duration < (finalsell - finalbuy) ){
                finalbuy = i; finalsell = j;
                finalprofit = profit;
            }
        }
    }

    if(finalprofit <= 0){
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n""
           ""Sell @ %.2lf on %d\n"",
           prices[finalbuy], finalbuy,
           prices[finalsell], finalsell);
}
",0
jgol495,1695001086,7,"#include <stdio.h>

void wall_street_bet(double *prices, int length){
    int finalbuy = 0, finalsell = length+1;
    double finalprofit = -1;
    // Simple bruteforce
    for(int i = 0; i < length; i++){
        double buy = prices[i];
        for(int j = i+1; j < length; j++){
            double sell = prices[j];
            double profit = sell - buy;

            int duration = j - i;

            // Prioritise shorter dates
            if(profit > finalprofit
            || (profit == finalprofit && duration < (finalsell - finalbuy))){
                finalbuy = i; finalsell = j;
                finalprofit = profit;
            }
        }
    }

    if(finalprofit <= 0){
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n""
           ""Sell @ %.2lf on %d\n"",
           prices[finalbuy], finalbuy,
           prices[finalsell], finalsell);
}",1
jkah253,1695123928,1,"void wall_street_bet(double *prices, int length){
    double greatest_profit = 0.0;

    // these are indexes / days.
    int buy_i;
    int sell_j;


    // loop through every possible combo

    for(int buy_index = 0; buy_index < length; buy_index++){
        // loop through numbers from buy_index + 1
        for(int sell_index = (buy_index+1); sell_index < length; sell_index++){
            double profit = prices[sell_index] - prices[buy_index];

            if( (profit > greatest_profit) || ( // larger profit, or same profit smaller time
                profit==greatest_profit && (sell_index-buy_index < sell_j-buy_i))){
                // log the good dates
                greatest_profit = profit;
                buy_i = buy_index;
                sell_j = sell_index;
            }
        }
    }

    // print results
    if (greatest_profit == 0.0){
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2f on %d\n"", prices[buy_i], buy_i);
        printf(""Sell @ %.2f on %d\n"", prices[sell_j], sell_j);
    }

}
",1
jlia486,1695277126,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
  double max_profit = 0.0;
  int buy_day = 0;
  int sell_day = 0;

  double lowest_price = prices[0];
  for (int i = 1; i < length; i++) {
    if (prices[i] < lowest_price) {
      lowest_price = prices[i];
    }

    double current_profit = prices[i] - lowest_price;
    if (current_profit > max_profit) {
      max_profit = current_profit;
      buy_day = i - 1;
      sell_day = i;
    }
  }

  if (max_profit > 0.0) {
    printf(""Buy @ %.2f on %d\n"", prices[buy_day], buy_day);
    printf(""Sell @ %.2f on %d\n"", prices[sell_day], sell_day);
  } else {
    printf(""Hold\n"");
  }
}",0
jlia486,1695277482,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
  double max_profit = 0.0;
  int buy_day = 0;
  int sell_day = 0;

  double lowest_price = prices[0];
  for (int i = 0; i < length; i++) {
    if (prices[i] < lowest_price) {
      lowest_price = prices[i];
    }

    double current_profit = prices[i] - lowest_price;
    if (current_profit > max_profit) {
      max_profit = current_profit;
      buy_day = i - 1;
      sell_day = i;
    }
  }

  if (max_profit > 0.0) {
    printf(""Buy @ %.2f on %d\n"", prices[buy_day], buy_day);
    printf(""Sell @ %.2f on %d\n"", prices[sell_day], sell_day);
  } else {
    printf(""Hold\n"");
  }
}",0
jlia486,1695277629,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double minPrice = prices[0];
    double maxProfit = 0;
    int buyDay = 0;
    int sellDay = 0;

    for (int i = 1; i < length; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            buyDay = i;
        }
        else if (prices[i] - minPrice > maxProfit) {
            maxProfit = prices[i] - minPrice;
            sellDay = i;
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", minPrice, buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else {
        printf(""Hold\n"");
    }
}",0
jpar611,1695541979,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double min_price = prices[0];
    int min_index = 0;
    double max_profit = 0.0;
    int buy_day = -1;
    int sell_day = -1;

    for (int i = 1; i < length; i++) {
        double profit = prices[i] - min_price;
        if (profit > max_profit) {
            max_profit = profit;
            buy_day = min_index;
            sell_day = i;
        }
        if (prices[i] < min_price) {
            min_price = prices[i];
            min_index = i;
        }
    }

    if (buy_day != -1 && sell_day != -1) {
        printf(""Buy @ %.2f on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2f on %d\n"", prices[sell_day], sell_day);
    } else {
        printf(""Hold\n"");
    }
}

int main() {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}
",0
jpar611,1695542002,2,"int main() {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}",0
jpar611,1695542018,3,"Copy code
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double min_price = prices[0];
    int min_index = 0;
    double max_profit = 0.0;
    int buy_day = -1;
    int sell_day = -1;

    for (int i = 1; i < length; i++) {
        double profit = prices[i] - min_price;
        if (profit > max_profit) {
            max_profit = profit;
            buy_day = min_index;
            sell_day = i;
        }
        if (prices[i] < min_price) {
            min_price = prices[i];
            min_index = i;
        }
    }

    if (buy_day != -1 && sell_day != -1) {
        printf(""Buy @ %.2f on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2f on %d\n"", prices[sell_day], sell_day);
    } else {
        printf(""Hold\n"");
    }
}",0
jsan813,1695607149,1,"void wall_street_bet(double* prices, int length)
{
    int i, j, k;
    int maxPos, minPos;
    double diffValue, priceMax, priceMin;
    //double priceMaxArray[length] = { 0.00 };
    //double priceMinArray[length] = { 0.00 };

    diffValue = 0;

    for (i = 0; i < length; i++) {
        for (j = i+1; j < length; j++) {
            if ((prices[j] > prices[i]) && ((prices[j] - prices[i]) > diffValue)) {
                diffValue = prices[j] - prices[i];

                priceMax = prices[j];
                maxPos = j;

                priceMin = prices[i];
                minPos = i;
            }
        }
    }

    if (diffValue <= 0) {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"", priceMin, minPos);
        printf(""Sell @ %.2f on %d"", priceMax, maxPos);
    }
}",0
jsan813,1695607185,2,"void wall_street_bet(double* prices, int length)
{
    int i, j;
    int maxPos, minPos;
    double diffValue, priceMax, priceMin;
    //double priceMaxArray[length] = { 0.00 };
    //double priceMinArray[length] = { 0.00 };

    diffValue = 0;

    for (i = 0; i < length; i++) {
        for (j = i+1; j < length; j++) {
            if ((prices[j] > prices[i]) && ((prices[j] - prices[i]) > diffValue)) {
                diffValue = prices[j] - prices[i];

                priceMax = prices[j];
                maxPos = j;

                priceMin = prices[i];
                minPos = i;
            }
        }
    }

    if (diffValue <= 0) {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"", priceMin, minPos);
        printf(""Sell @ %.2f on %d"", priceMax, maxPos);
    }
}",0
jsan813,1695608101,3,"void wall_street_bet(double* prices, int length)
{
    int i, j, maxCount, minCount;
    int maxPos, minPos, diffPos;
    double diffValue, priceMax, priceMin;
    int maxPosArray[100] = {0};
    int minPosArray[100] = {0};

    diffValue = 0;

    for (i = 0; i < length; i++) {
        for (j = i + 1; j < length; j++) {
            if ((prices[j] > prices[i]) && ((prices[j] - prices[i]) > diffValue)) {
                diffValue = prices[j] - prices[i];

                priceMax = prices[j];
                maxPos = j;

                priceMin = prices[i];
                minPos = i;
            }
        }
    }

    maxCount = 0;
    minCount = 0;
    for (i = 0; i < length; i++) {
        if (priceMax == prices[i]) {
            maxPosArray[maxCount] = i;
            maxCount++;
        }
        else if (priceMin == prices[i]) {
            minPosArray[minCount] = i;
            minCount++;
        }
    }

    diffPos = maxPos - minPos;
    for (i = 0; i < length; i++) {
        for (j = i + 1; j < length; j++) {
            if ((maxPosArray[j] > minPosArray[i]) && (maxPosArray[j] - minPosArray[i]) < diffPos) {
                diffPos = maxPosArray[j] - minPosArray[i];
                maxPos = maxPosArray[j];
                minPos = minPosArray[i];

            }
        }
    }


    if (diffValue <= 0) {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"", priceMin, minPos);
        printf(""Sell @ %.2f on %d"", priceMax, maxPos);
    }
}",0
jshe464,1695564154,1,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	
	for (i = 0; i < b; i++)
	{
		int j;
		int count=0;
			for (j = 0; j < b; j++)
			{
				if (a[i] > a[j])
				{
					count++;
				}
			}
		if (count == 0)
		{
			Buy = i;
			double f = a[i];
			printf(""Buy @ %.2f on %d"", f, Buy);
		}
	}
	int k;
	int Sell;
	for (k = 0; k < b; k++)
	{
		int l;
		int count = 0;
		for (l = 0; l < b; l++)
		{
			if (a[k] < a[l])
			{
				count++;
			}
		}
		if (count == 0)
		{
			Sell = k;
			double e = a[k];
			printf(""Sell @ %.2f on %d"", e, Sell);
		}
	}
	
	return 0;
}",0
jshe464,1695564181,2,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	
	for (i = 0; i < b; i++)
	{
		int j;
		int count=0;
			for (j = 0; j < b; j++)
			{
				if (a[i] > a[j])
				{
					count++;
				}
			}
		if (count == 0)
		{
			Buy = i;
			double f = a[i];
			printf(""Buy @ %.2f on %d\n"", f, Buy);
		}
	}
	int k;
	int Sell;
	for (k = 0; k < b; k++)
	{
		int l;
		int count = 0;
		for (l = 0; l < b; l++)
		{
			if (a[k] < a[l])
			{
				count++;
			}
		}
		if (count == 0)
		{
			Sell = k;
			double e = a[k];
			printf(""Sell @ %.2f on %d\n"", e, Sell);
		}
	}
	
	return 0;
}",0
jshe464,1695564342,3,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	
	for (i = 0; i < b; i++)
	{
		int j;
		int count=0;
			for (j = 0; j < b; j++)
			{
				if (a[i] > a[j])
				{
					count++;
				}
			}
		if (count == 0)
		{
			Buy = i;
			double f = a[i];
			printf(""Buy @ %.2f on %d\n"", f, Buy);
		}
	}
	int k;
	int Sell;
	for (k = 0; k < b; k++)
	{
		int l;
		int count = 0;
		for (l = Buy; l < b; l++)
		{
			if (a[k] < a[l])
			{
				count++;
			}
		}
		if (count == 0)
		{
			Sell = k;
			double e = a[k];
			printf(""Sell @ %.2f on %d\n"", e, Sell);
		}
	}
	
	return 0;
}",0
jshe464,1695564376,4,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	
	for (i = 0; i < b; i++)
	{
		int j;
		int count=0;
			for (j = 0; j < b; j++)
			{
				if (a[i] > a[j])
				{
					count++;
				}
			}
		if (count == 0)
		{
			Buy = i;
			double f = a[i];
			printf(""Buy @ %.2f on %d\n"", f, Buy);
		}
	}
	int k;
	int Sell;
	for (k = Buy; k < b; k++)
	{
		int l;
		int count = 0;
		for (l = Buy; l < b; l++)
		{
			if (a[k] < a[l])
			{
				count++;
			}
		}
		if (count == 0)
		{
			Sell = k;
			double e = a[k];
			printf(""Sell @ %.2f on %d\n"", e, Sell);
		}
	}
	
	return 0;
}",0
jshe464,1695565034,5,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Buy;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0; j < b; j++)
			{
				price1 = a[i] - a[j];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565054,6,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0; j < b; j++)
			{
				price1 = a[i] - a[j];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565118,7,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = b-i; j < b; j++)
			{
				price1 = a[i] - a[j];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565176,8,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = b+i; j < b; j++)
			{
				price1 = a[i] - a[j];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565283,9,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[i] - a[j];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565398,10,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565516,11,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 1+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565694,12,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[i] - a[j];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565771,13,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565850,14,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];
					printf(""%.2f"",price0)

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565855,15,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	int price0 = 0;
	int price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];
					printf(""%.2f"",price0);

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695565881,16,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	double price0 = 0;
    double price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];
					

				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695566163,17,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	double price0 = 0;
    double price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];
					

				}
				if(price1==price0)
				{
				    if (Sell-Buy>j-i)
				    {
				     Buy = i;
					 Sell = j;
				 	 f = a[i];
					 e = a[j];
				    }
				    }
				    
				}
				}
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695566289,18,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	double price0 = 0;
    double price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];
					
				}
				if(price1==price0)
				{
				    if (Sell-Buy>j-i)
				    {
				     Buy = i;
					 Sell = j;
				 	 f = a[i];
					 e = a[j];
				    }
				}
				    
				
			}
		
		
	}	
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	return 0;
}",0
jshe464,1695566460,19,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	double price0 = 0;
    double price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];
					
				}
				if(price1==price0)
				{
				    if (Sell-Buy>j-i)
				    {
				     Buy = i;
					 Sell = j;
				 	 f = a[i];
					 e = a[j];
				    }
				}
				    
				
			}
		
		
	}	
	if(price0>0)
	{
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	}
	if(price0==0)
	{
	    printf(""Hold\n"")
	}
	}
	return 0;
}",0
jshe464,1695566466,20,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	double price0 = 0;
    double price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];
					
				}
				if(price1==price0)
				{
				    if (Sell-Buy>j-i)
				    {
				     Buy = i;
					 Sell = j;
				 	 f = a[i];
					 e = a[j];
				    }
				}
				    
				
			}
		
		
	}	
	if(price0>0)
	{
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	}
	if(price0==0)
	{
	    printf(""Hold\n"");
	}
	}
	return 0;
}",0
jshe464,1695566482,21,"int wall_street_bet(double* a, int b)
{
	int i;
	int Buy;
	double price0 = 0;
    double price1 = 0;
	int Sell;
	double f;
	double e;
	for (i = 0; i < b; i++)
	{
		int j;
		
			for (j = 0+i; j < b; j++)
			{
				price1 = a[j] - a[i];
				if (price1>price0)
				{
					price0 = price1;
					Buy = i;
					Sell = j;
					f = a[i];
					e = a[j];
					
				}
				if(price1==price0)
				{
				    if (Sell-Buy>j-i)
				    {
				     Buy = i;
					 Sell = j;
				 	 f = a[i];
					 e = a[j];
				    }
				}
				    
				
			}
		
		
	}	
	if(price0>0)
	{
	printf(""Buy @ %.2f on %d\n"", f, Buy);
	printf(""Sell @ %.2f on %d\n"", e, Sell);
	}
	if(price0==0)
	{
	    printf(""Hold\n"");
	}
	
	return 0;
}",1
jsim418,1695090663,1,"
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double differenceMax = 0;
    int BuyDay;
    int SellDay;
    for (int i = 0;i < length; i++) {
        for(int j =0; j < length; j++){
            if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) > differenceMax) && (j > i)) {
                differenceMax = prices[j] - prices [i];
                BuyDay = i;
                SellDay = j;
            }
        }
    }
    
    printf(""Buy @ %.1f on %d\n"",prices[BuyDay],BuyDay);
    printf(""Sell @ %.1f on %d"",prices[SellDay],SellDay);
}

int main()
{
    //test scenario 1:
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);
    return 0;

}
",0
jsim418,1695090686,2,"
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double differenceMax = 0;
    int BuyDay;
    int SellDay;
    for (int i = 0;i < length; i++) {
        for(int j =0; j < length; j++){
            if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) > differenceMax) && (j > i)) {
                differenceMax = prices[j] - prices [i];
                BuyDay = i;
                SellDay = j;
            }
        }
    }
    
    printf(""Buy @ %.1f on %d\n"",prices[BuyDay],BuyDay);
    printf(""Sell @ %.1f on %d"",prices[SellDay],SellDay);
}
",0
jsim418,1695090702,3,"
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double differenceMax = 0;
    int BuyDay;
    int SellDay;
    for (int i = 0;i < length; i++) {
        for(int j =0; j < length; j++){
            if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) > differenceMax) && (j > i)) {
                differenceMax = prices[j] - prices [i];
                BuyDay = i;
                SellDay = j;
            }
        }
    }
    
    printf(""Buy @ %.2f on %d\n"",prices[BuyDay],BuyDay);
    printf(""Sell @ %.2f on %d"",prices[SellDay],SellDay);
}
",0
jsim418,1695090782,4,"
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double differenceMax = 0;
    int BuyDay;
    int SellDay;
    for (int i = 0;i < length; i++) {
        for(int j =0; j < length; j++){
            if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) > differenceMax) && (j > i)) {
                differenceMax = prices[j] - prices [i];
                BuyDay = i;
                SellDay = j;
            }
        }
    }
    if (differenceMax == 0){
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.1f on %d\n"",prices[BuyDay],BuyDay);
        printf(""Sell @ %.1f on %d"",prices[SellDay],SellDay);
    }
}
",0
jsim418,1695090802,5,"
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double differenceMax = 0;
    int BuyDay;
    int SellDay;
    for (int i = 0;i < length; i++) {
        for(int j =0; j < length; j++){
            if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) > differenceMax) && (j > i)) {
                differenceMax = prices[j] - prices [i];
                BuyDay = i;
                SellDay = j;
            }
        }
    }
    if (differenceMax == 0){
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"",prices[BuyDay],BuyDay);
        printf(""Sell @ %.2f on %d"",prices[SellDay],SellDay);
    }
}
",0
jsim418,1695092866,6,"
#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double differenceMax = 0;
    int BuyDay;
    int SellDay;
    for (int i = 0;i < length; i++) {
        for(int j =0; j < length; j++){
            if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) > differenceMax) && (j > i)) {
                differenceMax = prices[j] - prices [i];
                BuyDay = i;
                SellDay = j;
            }
        }

#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double differenceMax = 0;
    int BuyDay = 0;
    int SellDay = 0;
    for (int i = 0;i < length; i++) {
        for(int j =0; j < length; j++){
            if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) > differenceMax) && (j > i)) {
                differenceMax = prices[j] - prices [i];
                BuyDay = i;
                SellDay = j;
            } else if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) == differenceMax) && (j > i)) {
                if ((j-i) < (SellDay - BuyDay)) {
                    differenceMax = prices[j] - prices [i];
                    BuyDay = i;
                    SellDay = j;
                }
            }
        }
    }
    if (differenceMax == 0){
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"",prices[BuyDay],BuyDay);
        printf(""Sell @ %.2f on %d"",prices[SellDay],SellDay);
    }
}


    }
    if (differenceMax == 0){
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"",prices[BuyDay],BuyDay);
        printf(""Sell @ %.2f on %d"",prices[SellDay],SellDay);
    }
}
",0
jsim418,1695092877,7,"

#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double differenceMax = 0;
    int BuyDay = 0;
    int SellDay = 0;
    for (int i = 0;i < length; i++) {
        for(int j =0; j < length; j++){
            if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) > differenceMax) && (j > i)) {
                differenceMax = prices[j] - prices [i];
                BuyDay = i;
                SellDay = j;
            } else if ((prices[i] < prices[j]) && ((prices[j] - prices[i]) == differenceMax) && (j > i)) {
                if ((j-i) < (SellDay - BuyDay)) {
                    differenceMax = prices[j] - prices [i];
                    BuyDay = i;
                    SellDay = j;
                }
            }
        }
    }
    if (differenceMax == 0){
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"",prices[BuyDay],BuyDay);
        printf(""Sell @ %.2f on %d"",prices[SellDay],SellDay);
    }
}

",1
jwed606,1695348948,1,"void wall_street_bets(double* values, int length) 
{
    if (length <= 0) // Malformed length
        return;

    double greatest_profit = 0.0;
    int buy_index = -1;
    int sell_index = -1;
    int smallest_period = ~(1 << 31); // Largest 32 bit integer value (should probably use an INT_MAX macro instead but cbf)
    for (int i = 0; i < length; ++i) 
    {
        for (int j = i + 1; j < length; ++j)
        {
            double possible_profit = values[j] - values[i];
            if (possible_profit > greatest_profit)
            {
                buy_index = i;
                sell_index = j;
                greatest_profit = possible_profit;
                smallest_period = j - 1;
            }
        }
    }

    if (buy_index <= -1 || sell_index <= -1)
    {
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2f on %d\n"", values[buy_index], buy_index);
    printf(""Sell @ %.2f on %d\n"", values[sell_index], sell_index);
}",0
jwed606,1695349048,2,"void wall_street_bet(double* values, int length) 
{
    if (length <= 0) // Malformed length
        return;

    double greatest_profit = 0.0;
    int buy_index = -1;
    int sell_index = -1;
    int smallest_period = ~(1 << 31); // Largest 32 bit integer value (should probably use an INT_MAX macro instead but cbf)
    for (int i = 0; i < length; ++i) 
    {
        for (int j = i + 1; j < length; ++j)
        {
            double possible_profit = values[j] - values[i];
            if (possible_profit > greatest_profit || (possible_profit == greatest_profit && j - i < smallest_period))
            {
                buy_index = i;
                sell_index = j;
                greatest_profit = possible_profit;
                smallest_period = j - 1;
            }
        }
    }

    if (buy_index <= -1 || sell_index <= -1)
    {
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2f on %d\n"", values[buy_index], buy_index);
    printf(""Sell @ %.2f on %d\n"", values[sell_index], sell_index);
}",0
jwed606,1695349096,3,"void wall_street_bet(double* values, int length) 
{
    if (length <= 0) // Malformed length
        return;

    double greatest_profit = 0.0;
    int buy_index = -1;
    int sell_index = -1;
    int smallest_period = ~(1 << 31); // Largest 32 bit integer value (should probably use an INT_MAX macro instead but cbf)
    for (int i = 0; i < length; ++i) 
    {
        for (int j = i + 1; j < length; ++j)
        {
            double possible_profit = values[j] - values[i];
            if (possible_profit > greatest_profit || (possible_profit == greatest_profit && j - i < smallest_period))
            {
                buy_index = i;
                sell_index = j;
                greatest_profit = possible_profit;
                smallest_period = j - i;
            }
        }
    }

    if (buy_index <= -1 || sell_index <= -1)
    {
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2f on %d\n"", values[buy_index], buy_index);
    printf(""Sell @ %.2f on %d\n"", values[sell_index], sell_index);
}",1
jwon248,1695119620,1,"void wall_street_bet(double *prices, int length)
{
    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;

    for (int i = 0; i < length; i++)
    {
        for (int j = 0; j < length; i++)
        {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit)
            {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
            else if (profit == maxProfit)
            {
                if ((j - i) < sellDay - buyDay)
                    buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit > 0.0)
    {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else
    {
        printf(""Hold\n"");
    }
}",0
jwon248,1695119821,2,"void wall_street_bet(double *prices, int length)
{
    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 1;

    for (int i = 0; i < length; i++)
    {
        for (int j = 0; j < length; i++)
        {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit)
            {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
            else if (profit == maxProfit)
            {
                if ((j - i) < sellDay - buyDay)
                {
                    buyDay = i;
                    sellDay = j;
                }
            }
        }
    }

    if (maxProfit > 0.0)
    {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else
    {
        printf(""Hold\n"");
    }
}",0
jwon248,1695120149,3,"void wall_street_bet(double *prices, int length)
{
    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 1;

    for (int i = 0; i < length - 1; i++)
    {
        for (int j = i + 1; j < length; i++)
        {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit)
            {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
            else if (profit == maxProfit)
            {
                if ((j - i) < sellDay - buyDay)
                {
                    buyDay = i;
                    sellDay = j;
                }
            }
        }
    }

    if (maxProfit > 0.0)
    {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else
    {
        printf(""Hold\n"");
    }
}",0
jwon248,1695120328,4,"void wall_street_bet(double *prices, int length)
{
    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 1;

    for (int i = 0; i < length - 1; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit)
            {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
            else if (profit == maxProfit)
            {
                if ((j - i) < sellDay - buyDay)
                {
                    buyDay = i;
                    sellDay = j;
                }
            }
        }
    }

    if (maxProfit > 0.0)
    {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else
    {
        printf(""Hold\n"");
    }
}",1
jwon248,1695120392,5,"void wall_street_bet(double *prices, int length)
{
    double maxProfit = 0.0;
    double profit;
    int buyDay = 0;
    int sellDay = 1;

    for (int i = 0; i < length - 1; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            profit = prices[j] - prices[i];
            if (profit > maxProfit)
            {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
            else if (profit == maxProfit)
            {
                if ((j - i) < sellDay - buyDay)
                {
                    buyDay = i;
                    sellDay = j;
                }
            }
        }
    }

    if (maxProfit > 0.0)
    {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else
    {
        printf(""Hold\n"");
    }
}",1
jyan420,1695092500,1,"void wall_street_bet(double *prices, int length) {
    int startDay;
    int endDay;
    int duration;
    int highStartDay;
    int highEndDay;
    int highDuration = -1;
    double highStartPrice = 0;
    double highEndPrice = 0;
    double highGain = 0;
    double gain;
    for (startDay = 0; startDay < length - 1; startDay++) {
        for (endDay = startDay + 1; endDay < length; endDay++) {
            gain = prices[endDay] - prices[startDay];
            duration = endDay - startDay;
            if ((gain > highGain) || ((gain == highGain) && (duration < highDuration))) {
                // Highest gain so far.
                highStartDay = startDay;
                highEndDay = endDay;
                highDuration = duration;
                highStartPrice = prices[startDay];
                highEndPrice = prices[endDay];
                highGain = gain;
            }
        }
    }
    if (highGain == 0) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", highStartPrice, highStartDay, highEndPrice, highEndDay);
    }
}",1
kahk161,1695103447,1,"void wall_street_bet(double prices[], int length)
{
	int i, j;
	double profit = 0;
	int span = length;
	int days[2];

	for (i = 0; i < length-1; i++) {

		for (j = i + 1; j < length; j++) {
			double difference = prices[j] - prices[i];

			if (difference >= profit) {
				if ((difference == profit) && (span > j - i)) {
					profit = difference;
					span = j - i;
					days[0] = i;
					days[1] = j;
				}
				else if (difference > profit) {
					profit = difference;
					span = j - i;
					days[0] = i;
					days[1] = j;
				}// if && end

			}// if >= end

		}// for j end

	}// for i end
	
	if (profit > 0) {
		int a = days[0];
		int b = days[1];
		printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", prices[a], a, prices[b], b);
	}
	else {
		printf(""Hold"");
	}// if profit > 0 end
	
}// wall_street_bet end",1
kbha969,1695267453,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double count = 5000.0;
    int posbuy = 0;
    for (int i = 0;i<length; i++){
       if (count>prices[i]){
       count = prices[i];
       posbuy = i;

       }    
}
    double rank = 0.0;
    int possell = 0;
    for (int i = posbuy;i<length; i++){
       if (rank<prices[i]){
       rank = prices[i];
       possell = i;
    

       }  
}
double buy = count;
double sell = rank;
if (buy - sell == 0){
    printf(""Hold"");
}
else{
    printf(""Buy @ %.2lf on %d\n"",buy,posbuy);
    printf(""Sell @ %.2lf on %d\n"",sell,possell);
}


return 0;
}",0
kbha969,1695267543,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double count = 5000.0;
    int posbuy = 0;
    for (int i = 0;i<length; i++){
       if (count>prices[i]){
       count = prices[i];
       posbuy = i;

       }    
}
    double rank = 0.0;
    int possell = 0;
    for (int i = posbuy;i<length; i++){
       if (rank<prices[i]){
       rank = prices[i];
       possell = i;
    

       }  
}
double buy = count;
double sell = rank;
if (buy - sell == 0){
    printf(""Hold"");
}
else{
    printf(""Buy @ %.2lf on %d\n"",buy,posbuy);
    printf(""Sell @ %.2lf on %d\n"",sell,possell);
}

}",0
kbha969,1695282580,3,"#include <stdio.h>

    void wall_street_bet(double *prices, int length){

        int posbuy = 0;
        int possell = 0;
        double maxprofit = 0.0;
        double difference;
        for (int i = 0;i<length; i++){
            for (int j = i + 1;j<length; j++){
            difference = (prices[j]-prices[i]);
            if (difference > maxprofit && j-i>0){
                maxprofit = difference;
                posbuy = i;
                possell = j;
            }
            else if (difference == maxprofit){
                if ((possell-posbuy) > (j-i)){
                maxprofit = difference;
                posbuy = i;
                possell = j;
                }
            }
        }
        }

    double buy = prices[posbuy];
    double sell = prices[possell];

    if (buy - sell == 0){
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %d\n"",buy,posbuy);
        printf(""Sell @ %.2lf on %d\n"",sell,possell);
    }

    }",1
kcao565,1695606721,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double* prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return;
    }

    double max_profit = 0.0;
    int buy_day = 0;
    int sell_day = 0;

    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
            else if (profit == max_profit) {
                if (j - i < sell_day - buy_day) {
                    buy_day = i;
                    sell_day = j;
                }
            }
        }
    }

    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
    else {
        printf(""Hold\n"");
    }
}",1
kmal768,1695268246,1,"#include <stdio.h>

// The way I want to run this code is I want it to start at each value in the array and
// carry on down till the end of the array and determine what the biggest profit they could have made
// had they purhcased on this day. So start with day 1 all the way to the end, then day 2 all the way
// to the end and so on. The finally compare which one makes the greatest profit and how many days this
// takes. 
void wall_street_bet(double *prices, int length) {
	int i, j, k, l, num_days, buy_day, sell_day;
	double initial_val, big_value, big_profit;
	double LProfit[100];
	int purchase_day_array[100], selling_day_array[100] = { 0 };

	for (i = 0; i < length; i++) {
		initial_val = prices[i]; // price if bought on day i
		double Array[100] = { 0 }; // Not a great Idea but I'm unsure how to use VLAs
		for (j = i + 1; j < length; j++) {
			Array[j] = prices[j] - prices[i]; // compares prices between each day after i and stores the value
		}

		big_value = Array[0];
		num_days = i;
		for (k = 1; k < length; k++) {
			if (big_value < Array[k]) {
				big_value = Array[k];
				num_days = k;
			}
		}

		// Following is the record of largest profits, day of purchase and day of selling.
		LProfit[i] = big_value;
		purchase_day_array[i] = i;
		selling_day_array[i] = num_days;
	}

	big_profit = LProfit[0];
	buy_day = 0;
	sell_day = 0;

	for (l = 1; l < length; l++) {
		if (big_profit < LProfit[l]) {
			big_profit = LProfit[l];
			buy_day = purchase_day_array[l];
			sell_day = selling_day_array[l];
		}
		else if (big_profit == LProfit[l]) {
			if ((sell_day - buy_day) <= (selling_day_array[l] - purchase_day_array[l])) {
				continue;
			}
			else if ((sell_day - buy_day) > (selling_day_array[l] - purchase_day_array[l])) {
				buy_day = purchase_day_array[l];
				sell_day = selling_day_array[l];
			}
		}
	}
	if (big_profit > 0) {
		printf(""Buy @ %f on %d\nSell @ %f on %d"", prices[buy_day], buy_day, prices[sell_day], sell_day);
	}
	else {
		printf(""Hold"");
	}
}

int main(void)
{
	double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
	wall_street_bet(pricesC, 5);

	return 0;
}",0
kmal768,1695268340,2,"#include <stdio.h>

// The way I want to run this code is I want it to start at each value in the array and
// carry on down till the end of the array and determine what the biggest profit they could have made
// had they purhcased on this day. So start with day 1 all the way to the end, then day 2 all the way
// to the end and so on. The finally compare which one makes the greatest profit and how many days this
// takes. 
void wall_street_bet(double *prices, int length) {
	int i, j, k, l, num_days, buy_day, sell_day;
	double initial_val, big_value, big_profit;
	double LProfit[100];
	int purchase_day_array[100], selling_day_array[100] = { 0 };

	for (i = 0; i < length; i++) {
		initial_val = prices[i]; // price if bought on day i
		double Array[100] = { 0 }; // Not a great Idea but I'm unsure how to use VLAs
		for (j = i + 1; j < length; j++) {
			Array[j] = prices[j] - prices[i]; // compares prices between each day after i and stores the value
		}

		big_value = Array[0];
		num_days = i;
		for (k = 1; k < length; k++) {
			if (big_value < Array[k]) {
				big_value = Array[k];
				num_days = k;
			}
		}

		// Following is the record of largest profits, day of purchase and day of selling.
		LProfit[i] = big_value;
		purchase_day_array[i] = i;
		selling_day_array[i] = num_days;
	}

	big_profit = LProfit[0];
	buy_day = 0;
	sell_day = 0;

	for (l = 1; l < length; l++) {
		if (big_profit < LProfit[l]) {
			big_profit = LProfit[l];
			buy_day = purchase_day_array[l];
			sell_day = selling_day_array[l];
		}
		else if (big_profit == LProfit[l]) {
			if ((sell_day - buy_day) <= (selling_day_array[l] - purchase_day_array[l])) {
				continue;
			}
			else if ((sell_day - buy_day) > (selling_day_array[l] - purchase_day_array[l])) {
				buy_day = purchase_day_array[l];
				sell_day = selling_day_array[l];
			}
		}
	}
	if (big_profit > 0) {
		printf(""Buy @ %f on %d\nSell @ %f on %d"", prices[buy_day], buy_day, prices[sell_day], sell_day);
	}
	else {
		printf(""Hold"");
	}
}",0
kmal768,1695268499,3,"#include <stdio.h>

// The way I want to run this code is I want it to start at each value in the array and
// carry on down till the end of the array and determine what the biggest profit they could have made
// had they purhcased on this day. So start with day 1 all the way to the end, then day 2 all the way
// to the end and so on. The finally compare which one makes the greatest profit and how many days this
// takes. 
void wall_street_bet(double *prices, int length) {
	int i, j, k, l, num_days, buy_day, sell_day;
	double big_value, big_profit;
	double LProfit[100];
	int purchase_day_array[100], selling_day_array[100] = { 0 };

	for (i = 0; i < length; i++) {
		double Array[100] = { 0 }; // Not a great Idea but I'm unsure how to use VLAs
		for (j = i + 1; j < length; j++) {
			Array[j] = prices[j] - prices[i]; // compares prices between each day after i and stores the value
		}

		big_value = Array[0];
		num_days = i;
		for (k = 1; k < length; k++) {
			if (big_value < Array[k]) {
				big_value = Array[k];
				num_days = k;
			}
		}

		// Following is the record of largest profits, day of purchase and day of selling.
		LProfit[i] = big_value;
		purchase_day_array[i] = i;
		selling_day_array[i] = num_days;
	}

	big_profit = LProfit[0];
	buy_day = 0;
	sell_day = 0;

	for (l = 1; l < length; l++) {
		if (big_profit < LProfit[l]) {
			big_profit = LProfit[l];
			buy_day = purchase_day_array[l];
			sell_day = selling_day_array[l];
		}
		else if (big_profit == LProfit[l]) {
			if ((sell_day - buy_day) <= (selling_day_array[l] - purchase_day_array[l])) {
				continue;
			}
			else if ((sell_day - buy_day) > (selling_day_array[l] - purchase_day_array[l])) {
				buy_day = purchase_day_array[l];
				sell_day = selling_day_array[l];
			}
		}
	}
	if (big_profit > 0) {
		printf(""Buy @ %f on %d\nSell @ %f on %d"", prices[buy_day], buy_day, prices[sell_day], sell_day);
	}
	else {
		printf(""Hold"");
	}
}",0
kmal768,1695268544,4,"#include <stdio.h>

// The way I want to run this code is I want it to start at each value in the array and
// carry on down till the end of the array and determine what the biggest profit they could have made
// had they purhcased on this day. So start with day 1 all the way to the end, then day 2 all the way
// to the end and so on. The finally compare which one makes the greatest profit and how many days this
// takes. 
void wall_street_bet(double *prices, int length) {
	int i, j, k, l, num_days, buy_day, sell_day;
	double big_value, big_profit;
	double LProfit[100];
	int purchase_day_array[100], selling_day_array[100] = { 0 };

	for (i = 0; i < length; i++) {
		double Array[100] = { 0 }; // Not a great Idea but I'm unsure how to use VLAs
		for (j = i + 1; j < length; j++) {
			Array[j] = prices[j] - prices[i]; // compares prices between each day after i and stores the value
		}

		big_value = Array[0];
		num_days = i;
		for (k = 1; k < length; k++) {
			if (big_value < Array[k]) {
				big_value = Array[k];
				num_days = k;
			}
		}

		// Following is the record of largest profits, day of purchase and day of selling.
		LProfit[i] = big_value;
		purchase_day_array[i] = i;
		selling_day_array[i] = num_days;
	}

	big_profit = LProfit[0];
	buy_day = 0;
	sell_day = 0;

	for (l = 1; l < length; l++) {
		if (big_profit < LProfit[l]) {
			big_profit = LProfit[l];
			buy_day = purchase_day_array[l];
			sell_day = selling_day_array[l];
		}
		else if (big_profit == LProfit[l]) {
			if ((sell_day - buy_day) <= (selling_day_array[l] - purchase_day_array[l])) {
				continue;
			}
			else if ((sell_day - buy_day) > (selling_day_array[l] - purchase_day_array[l])) {
				buy_day = purchase_day_array[l];
				sell_day = selling_day_array[l];
			}
		}
	}
	if (big_profit > 0) {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", prices[buy_day], buy_day, prices[sell_day], sell_day);
	}
	else {
		printf(""Hold"");
	}
}",0
kmal768,1695269351,5,"#include <stdio.h>

// The way I want to run this code is I want it to start at each value in the array and
// carry on down till the end of the array and determine what the biggest profit they could have made
// had they purhcased on this day. So start with day 1 all the way to the end, then day 2 all the way
// to the end and so on. The finally compare which one makes the greatest profit and how many days this
// takes. 
void wall_street_bet(double *prices, int length) {
	int i, j, k, l, num_days, buy_day, sell_day;
	double  big_value, big_profit;
	double LProfit[100];
	int purchase_day_array[100], selling_day_array[100] = { 0 };

	for (i = 0; i < length; i++) {
		double Array[100] = { 0 }; // Not a great Idea but I'm unsure how to use VLAs
		for (j = i + 1; j < length; j++) {
			Array[j] = prices[j] - prices[i]; // compares prices between each day after i and stores the value
		}


		big_value = Array[0];
		num_days = i;
		for (k = 1; k < length; k++) {
			if (big_value < Array[k]) {
				big_value = Array[k];
				num_days = k;
			}
		}

		// Following is the record of largest profits, day of purchase and day of selling.
		LProfit[i] = big_value;
		purchase_day_array[i] = i;
		selling_day_array[i] = num_days;
	}

	big_profit = LProfit[0];
	buy_day = purchase_day_array[0];
	sell_day = selling_day_array[0];

	for (l = 1; l < length; l++) {
		if (big_profit < LProfit[l]) {
			big_profit = LProfit[l];
			buy_day = purchase_day_array[l];
			sell_day = selling_day_array[l];
		}
		if (big_profit == LProfit[l]) {
			if ((sell_day - buy_day) <= (selling_day_array[l] - purchase_day_array[l])) {
				continue;
			}
			else if ((sell_day - buy_day) > (selling_day_array[l] - purchase_day_array[l])) {
				buy_day = purchase_day_array[l];
				sell_day = selling_day_array[l];
			}
		}
	}
	if (big_profit > 0) {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", prices[buy_day], buy_day, prices[sell_day], sell_day);
	}
	else {
		printf(""Hold"");
	}
}",1
kmck133,1695041421,1,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > diff) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				diff = sellValue - buyValue;
			}
		}
	}

	if (sellDay == buyDay) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",0
kmck133,1695041558,2,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int timeDiff = length;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > diff) && (j - i < timeDiff) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				timeDiff = sellDay - buyDay;
				diff = sellValue - buyValue;
			}
		}
	}

	if (sellDay == buyDay) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",0
kmck133,1695041646,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double prices[], int length);

int main(void)
{
	double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
	wall_street_bet(pricesC, 5);
	return 0;
}

void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int timeDiff = length;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if ((prices[j] - prices[i] > diff) && (j - i < timeDiff)) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				timeDiff = sellDay - buyDay;
				diff = sellValue - buyValue;
			}
		}
	}

	if (sellDay == buyDay) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",0
kmck133,1695041657,4,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int timeDiff = length;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if ((prices[j] - prices[i] > diff) && (j - i < timeDiff)) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				timeDiff = sellDay - buyDay;
				diff = sellValue - buyValue;
			}
		}
	}

	if (sellDay == buyDay) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",0
kmck133,1695041933,5,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > diff) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				diff = sellValue - buyValue;
			}
		}
	}

	if (sellDay == buyDay) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",0
kmck133,1695041966,6,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] >= diff) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				diff = sellValue - buyValue;
			}
		}
	}

	if (sellDay == buyDay) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",0
kmck133,1695041988,7,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > diff) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				diff = sellValue - buyValue;
			}
		}
	}

	if (sellDay == buyDay) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",0
kmck133,1695042458,8,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int timeDiff = length;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > diff) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				diff = sellValue - buyValue;
				timeDiff = j - i;
			}
			if ( (j - i < timeDiff) && (prices[i] == buyValue) && (prices[j] == sellValue) ) {
				buyDay = i;
				sellDay = j;
				timeDiff = j - i;
			}
		}
	}

	if (sellDay == buyDay) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",0
kmck133,1695042514,9,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int timeDiff = length;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > diff) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				diff = sellValue - buyValue;
				timeDiff = j - i;
			}
			if ( (j - i < timeDiff) && (prices[i] == buyValue) && (prices[j] == sellValue) ) {
				buyDay = i;
				sellDay = j;
				timeDiff = j - i;
			}
		}
	}

	if (diff < 0) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",1
kmck133,1695042886,10,"void wall_street_bet(double prices[], int length) {
	double buyValue = prices[0];
	double sellValue = prices[1];
	double diff = sellValue - buyValue;
	int buyDay = 0;
	int sellDay = 0;
	int timeDiff = length;
	int i, j;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > diff) {
				buyDay = i;
				sellDay = j;
				buyValue = prices[i];
				sellValue = prices[j];
				diff = sellValue - buyValue;
				timeDiff = j - i;
			}
			if ( (j - i < timeDiff) && (prices[j] - prices[i] == diff) ) {
				buyDay = i;
				sellDay = j;
				timeDiff = j - i;
			}
		}
	}

	if (diff < 0) {
		printf(""Hold"");
	} else {
		printf(""Buy @ %.2f on %d\n"", buyValue, buyDay);
		printf(""Sell @ %.2f on %d"", sellValue, sellDay);
	}
}",1
kpat303,1695010699,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // If there are less than two days of data, no profit can be made.
        printf(""Hold\n"");
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;

    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit || (profit == maxProfit && (j - i) < (sellDay - buyDay))) {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}",1
kpay633,1695355312,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
	double diffPrices;
	double prevLargest;
	double buyPrice, buyDay, sellPrice, sellDay;
	int i, j;

	prevLargest = 0;
	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			diffPrices = prices[j] - prices[i];
			if (diffPrices > prevLargest) {
				prevLargest = diffPrices;
				buyPrice = prices[i];
				sellPrice = prices[j];
				buyDay = i;
				sellDay = j;
			}
			else if (diffPrices == prevLargest) { // decide which has shortest days
				if ((j - i) < (sellDay - buyDay)) {
					buyPrice = prices[i];
					sellPrice = prices[j];
					buyDay = i;
					sellDay = j;
				}
			}
		}
	}
	if (prevLargest == 0) {
		printf(""Hold"");
	}
	printf(""Buy @ %.2lf on %.0lf\n"", buyPrice, buyDay);
	printf(""Sell @ %.2lf on %.0lf\n"", sellPrice, sellDay);
}
",0
kqua446,1695474952,1,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = -1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if (profit > max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on day %d\nSell @ %.2lf on day %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }

    return 0;
}
",0
kqua446,1695474973,2,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = -1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if (profit > max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on day %d\nSell @ %.2lf on day %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}
",0
kqua446,1695475017,3,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = -1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if (profit > max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}
",0
kqua446,1695475051,4,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = -1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if (profit >= max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}
",0
kqua446,1695635248,5,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = -1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if (profit >= max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}

int main(void)
{
    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);
    return 0;
}",0
kqua446,1695635254,6,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = -1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if (profit >= max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}",0
kqua446,1695635262,7,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = -1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if (profit > max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}",0
kqua446,1695635612,8,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = length + 1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if ((profit >= max_profit) && ((j - i) < (sell_day - buy_day))) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}
",0
kqua446,1695635870,9,"#include <stdio.h>

void wall_street_bet(double n[], int length)
{
    int i, j;
    double profit = -1;
    double max_profit = -1;
    int buy_day = -1;
    int sell_day = length + 1;

    for (i = 0; i < length; i++) {
        for (j = i; j < length; j++) {
            profit = n[j] - n[i];
            if (profit > max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            } else if ((profit == max_profit) && ((j - i) < (sell_day - buy_day))) { 
                buy_day = i;
                sell_day = j;
            }
        }
    }
    
    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", n[buy_day], buy_day, n[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}
",1
krec980,1695102345,1,"void wall_street_bet(double* prices, int length)
{
	int k = 0;
	int j = k;
	double min = prices[0];
	double max = prices[0];
	int difference = 0;
	int m = 0;

	for (int i = 0; i < length; i++) {
		if (prices[i] < min) {
			min = prices[i];
			k = i;

			if (prices[j] > max) {
				max = prices[j];
				m = j;
			}
		}
	}

	difference = max - min;
	
	if (difference > 0) {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", min, k, max, m);
	} 
	else {
		printf(""Hold"");
	}
	
}
",0
krec980,1695255902,2,"void wall_street_bet(double* prices, int length)
{
	int buy_day = 0;
	int sell_day = 0;
	double min = prices[0];
	double max = prices[0];
	double difference = prices[1] - prices[0];
	

	for (int i = 0; i < length; i++) {
		for (int j = i + 1; j < length; j++) {
			if (prices[j] - prices[i] > difference) {
				sell_day = j;
				buy_day = i;
				min = prices[buy_day];
				max = prices[sell_day];
				difference = prices[j] - prices[i];
			}
		}
	}

	if (difference <= 0) {
		printf(""Hold"");
	} 
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", min, buy_day, max, sell_day);	
	}
}",0
krec980,1695308970,3,"void wall_street_bet(double* prices, int length) {
	int buy_day = 0;
	int sell_day = 1;
	double min = prices[0];
	double max = prices[0];
	int i= 0;
	int j = i + 1;
	double maxDifference = prices[sell_day] - prices[buy_day];
	int posDifference = j - i;
	double difference = prices[1] - prices[0];
	int posMaxDifference = sell_day - buy_day;
	

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
		    difference = prices[j] - prices[i];
		    posDifference = j - i;
			if (difference > maxDifference) {
				sell_day = j;
				buy_day = i;
				min = prices[buy_day];
				max = prices[sell_day];
				maxDifference = prices[sell_day] - prices[buy_day];
				posMaxDifference = sell_day - buy_day;
			}
			else if (difference == maxDifference && posDifference < posMaxDifference) {
				    sell_day = j;
				    buy_day = i;
			    	min = prices[buy_day];
				    max = prices[sell_day];
				    maxDifference = prices[sell_day] - prices[buy_day];
				    posMaxDifference = sell_day - buy_day;

			}
		
		}
	}

	if (maxDifference <= 0) {
		printf(""Hold"");
	} 
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", min, buy_day, max, sell_day);	
	}
}
",0
krec980,1695309019,4,"void wall_street_bet(double* prices, int length) {
	int buy_day = 0;
	int sell_day = 1;
	double min = prices[0];
	double max = prices[0];
	int i= 0;
	int j = i + 1;
	double maxDifference = prices[sell_day] - prices[buy_day];
	int posDifference = j - i;
	double difference = prices[1] - prices[0];
	int posMaxDifference = sell_day - buy_day;
	

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
		    difference = prices[j] - prices[i];
		    posDifference = j - i;
			if (difference > maxDifference) {
				sell_day = j;
				buy_day = i;
				min = prices[buy_day];
				max = prices[sell_day];
				maxDifference = prices[sell_day] - prices[buy_day];
				posMaxDifference = sell_day - buy_day;
			}
			else if (difference == maxDifference && posDifference <= posMaxDifference) {
				    sell_day = j;
				    buy_day = i;
			    	min = prices[buy_day];
				    max = prices[sell_day];
				    maxDifference = prices[sell_day] - prices[buy_day];
				    posMaxDifference = sell_day - buy_day;

			}
		
		}
	}

	if (maxDifference <= 0) {
		printf(""Hold"");
	} 
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", min, buy_day, max, sell_day);	
	}
}
",1
krec980,1695309178,5,"void wall_street_bet(double* prices, int length) {
	int buy_day = 0;
	int sell_day = 1;
	double min = prices[0];
	double max = prices[0];
	int i= 0;
	int j = i + 1;
	double maxDifference = prices[sell_day] - prices[buy_day];
	int posDifference = j - i;
	double difference = prices[1] - prices[0];
	int posMaxDifference = sell_day - buy_day;
	

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
		    difference = prices[j] - prices[i];
		    posDifference = j - i;
			if (difference > maxDifference) {
				sell_day = j;
				buy_day = i;
				min = prices[buy_day];
				max = prices[sell_day];
				maxDifference = prices[sell_day] - prices[buy_day];
				posMaxDifference = sell_day - buy_day;
			}
			else if (difference == maxDifference && posDifference <= posMaxDifference) {
				sell_day = j;
				buy_day = i;
			    min = prices[buy_day];
				max = prices[sell_day];
				maxDifference = prices[sell_day] - prices[buy_day];
				posMaxDifference = sell_day - buy_day;

			}
		
		}
	}

	if (maxDifference <= 0) {
		printf(""Hold"");
	} 
	else {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", min, buy_day, max, sell_day);	
	}
}
",1
ksik996,1695117319,1,"
void wall_street_bet(double *prices, int length)
{
    int end_day = length + 1;
    double a = 0;
    int start_day = 0;
     for(int i = 0; i < length; i++)
     {
        for(int j = i+1; j < length; j++)
        {
            double profit = prices[i] - prices[j];
            if(profit < a)
            {
                 end_day = j;
                 a = profit;  
                 start_day = i;                                   
            }
            else if(profit == a)
            {
                if(j - i < end_day - start_day)
                {
                 end_day = j;
                 a = profit;  
                 start_day = i;
                }
            }
        }
    }
    if (a <= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
    printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d\n"", prices[start_day], start_day, prices[end_day], end_day);
    }
}",0
ksik996,1695117360,2,"
void wall_street_bet(double *prices, int length)
{
    int end_day = length + 1;
    double a = 0;
    int start_day = 0;
     for(int i = 0; i < length; i++)
     {
        for(int j = i+1; j < length; j++)
        {
            double profit = prices[i] - prices[j];
            if(profit < a)
            {
                 end_day = j;
                 a = profit;  
                 start_day = i;                                   
            }
            else if(profit == a)
            {
                if(j - i < end_day - start_day)
                {
                 end_day = j;
                 a = profit;  
                 start_day = i;
                }
            }
        }
    }
    if (a >= 0)
    {
        printf(""Hold\n"");
    }
    else
    {
    printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d\n"", prices[start_day], start_day, prices[end_day], end_day);
    }
}",1
kyoo839,1695295420,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double low = prices[0];
    double gap = 0.0;
    
    int highposition = 0;
    int lowposition = 0;
    
    for (int i = 1; i < length; i++) {
        if (prices[i] - low > gap) {
            gap = prices[i] - low;
            highposition = i;
            lowposition = i - 1;
        }
        if (prices[i] < low) {
            low = prices[i];
        }
        
    }
    
    if (gap > 0) {
    printf(""Buy @ %.2f on %d\n"", low, lowposition);
    printf(""Sell @ %.2f on %d"", prices[highposition], highposition);
    } else {
        printf(""Hold"");
    }    
}",0
kyoo839,1695296330,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double low = prices[0];
    double gap = 0.0;
    
    int highposition = 0;
    int lowposition = 0;
    int lowposition_temp = 0;
    
    for (int i = 1; i < length; i++) {
        if (prices[i] - low > gap) {
            gap = prices[i] - low;
            highposition = i;
            lowposition = lowposition_temp;
        }
        
        if (prices[i] < low) {
            low = prices[i];
            lowposition_temp = i;
        }
    }
    
    if (gap > 0) {
    printf(""Buy @ %.2f on %d\n"", low, lowposition);
    printf(""Sell @ %.2f on %d"", prices[highposition], highposition);
    } else {
        printf(""Hold"");
    }    
}",0
kyoo839,1695296433,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double low = prices[0];
    double gap = 0.0;
    
    int highposition = 0;
    int lowposition = 0;
    int lowposition_temp = 0;
    
    for (int i = 1; i < length; i++) {
        if (prices[i] - low > gap) {
            gap = prices[i] - low;
            highposition = i;
            lowposition = lowposition_temp;
        }
        
        if (prices[i] < low) {
            low = prices[i];
            lowposition_temp = i;
        }
    }
    
    if (gap > 0) {
    printf(""Buy @ %.2f on %d\n"", prices[lowposition], lowposition);
    printf(""Sell @ %.2f on %d"", prices[highposition], highposition);
    } else {
        printf(""Hold"");
    }    
}",0
kyoo839,1695369428,4,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double low = prices[0];
    double gap = 0.0;
    
    int highposition = 0;
    int lowposition = 0;
    
    for (int i = 1; i < length; i++) {
        if (prices[i] <= low) {
            low = prices[i];
            lowposition = i;
        }
        if (prices[i] - low >= gap) {
            gap = prices[i] - low;
            highposition = i;     
         }
    }
    
    if (gap > 0) {
        printf(""Buy @ %.2f on %d\n"", prices[lowposition], lowposition);
        printf(""Sell @ %.2f on %d"", prices[highposition], highposition);
    } else {
        printf(""Hold"");
    }    
}",0
kyoo839,1695370493,5,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double min_price = prices[0];
    int min_price_day = 0;
    double max_profit = 0.0;
    int buy_day = 0, sell_day = 0;

    for (int i = 1; i < length; i++) {
        double potential_profit = prices[i] - min_price;

        // Check if current price provides better profit and if the period is shorter for the same profit
        if (potential_profit > max_profit || 
           (potential_profit == max_profit && (i - min_price_day) < (sell_day - buy_day))) {
            max_profit = potential_profit;
            buy_day = min_price_day;
            sell_day = i;
        }
        
        // Update min_price and its day if a new low is found
        if (prices[i] < min_price) {
            min_price = prices[i];
            min_price_day = i;
        }
    }

    if (max_profit > 0) {
        printf(""Buy @ %.2f on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2f on %d"", prices[sell_day], sell_day);
    } else {
        printf(""Hold"");
    }
}
",0
kzhu796,1695289370,1,"void wall_street_bet(double array[], int length) {
    int buy_day = 0;
    int sell_day = 0;
    double maxPrice = 0.0;
    double minPrice = array[0];

    for (int i = 0; i < length; i++) { // Add 'int' to declare 'i'
        if (array[i] < minPrice) {
            minPrice = array[i];
            buy_day = i;
        }
        else if (array[i] - minPrice > maxPrice) {
            maxPrice = array[i] - minPrice;
            sell_day = i;
        }
    }

    if (maxPrice > 0) {
        printf(""Buy @ %.2lf on %d\n"", minPrice, buy_day);
        printf(""Sell @ %.2lf on %d\n"", array[sell_day], sell_day); // Changed 'prices' to 'array'
    }
    else {
        printf(""Hold\n""); // No profit can be made
    }
}",0
kzhu796,1695333555,2,"void wall_street_bet(double prices[], int length) {
    int buy_day = 0;
    int sell_day = 0;
    double Profit = 0.0;
    double minPrice = prices[0];

    for (int i = 0; i < length; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            buy_day = i;
        }
        else if (prices[i] - minPrice > Profit) {
            Profit = prices[i] - minPrice;
            sell_day = i;
        }
    }

    if (Profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", minPrice, buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
    else {
        printf(""Hold\n"");
    }
}",0
kzhu796,1695334791,3,"void wall_street_bet(double prices[], int length) {
    int buy_day = 0;
    int potential_buy_day = 0;
    int sell_day = 0;
    double Profit = 0.0;
    double minPrice = prices[0];

    for (int i = 0; i < length; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            potential_buy_day = i;
        }
        else if (prices[i] - minPrice > Profit|| (prices[i] - minPrice == Profit && i - potential_buy_day < sell_day - buy_day)) {
            Profit = prices[i] - minPrice;
            buy_day = potential_buy_day;
            sell_day = i;
        }
    }

    if (Profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", minPrice, buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
    else {
        printf(""Hold\n"");
    }
}",0
kzhu796,1695335745,4,"void wall_street_bet(double prices[], int length) {
    int buy_day = 0;
    int potential_buy_day = 0;
    int sell_day = 0;
    double Profit = 0.0;
    double minPrice = prices[0];

    for (int i = 0; i < length; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            potential_buy_day = i;
        }
        else if (prices[i] - minPrice > Profit|| (prices[i] - minPrice == Profit && i - potential_buy_day < sell_day - buy_day)) {
            if (potential_buy_day < i) {
                Profit = prices[i] - minPrice;
                buy_day = potential_buy_day;
                sell_day = i;
            }  
        }
    }

    if (Profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", minPrice, buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
    else {
        printf(""Hold\n"");
    }
}",0
kzhu796,1695338359,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double prices[], int length) {
    int buy_day = 0;
    int potential_buy_day = 0;
    int sell_day = 0;
    double Profit = 0.0;
    double minPrice = prices[0];

    for (int i = 0; i < length; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            potential_buy_day = i;
        }
        else if (prices[i] - minPrice > Profit) {
            Profit = prices[i] - minPrice;
            buy_day = potential_buy_day;
            sell_day = i;
        }
    }

    if (Profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
    else {
        printf(""Hold\n"");
    }
}

int main(void) {
    double pricesF[10] = { 19.00, 19.00, 18.80, 18.85, 18.90, 19.00, 18.95, 18.85, 18.80, 19.00 };
    wall_street_bet(pricesF, 10);

    return 0;
}

",0
kzhu796,1695338396,6,"void wall_street_bet(double prices[], int length) {
    int buy_day = 0;
    int potential_buy_day = 0;
    int sell_day = 0;
    double Profit = 0.0;
    double minPrice = prices[0];

    for (int i = 0; i < length; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            potential_buy_day = i;
        }
        else if (prices[i] - minPrice > Profit) {
            Profit = prices[i] - minPrice;
            buy_day = potential_buy_day;
            sell_day = i;
        }
    }

    if (Profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
    else {
        printf(""Hold\n"");
    }
}
",0
kzhu796,1695339013,7,"void wall_street_bet(double prices[], int length) {
    int buy_day = 0;
    int potential_buy_day = 0;
    int sell_day = 0;
    double Profit = 0.0;
    double minPrice = prices[0];

    for (int i = 0; i < length; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            potential_buy_day = i;
        }
        else if (prices[i] - minPrice > Profit) {
            Profit = prices[i] - minPrice;
            buy_day = potential_buy_day;
            sell_day = i;
        }
        else if (prices[i] - minPrice == Profit && ((i - potential_buy_day) < (sell_day - buy_day))) {
                buy_day = potential_buy_day;
                sell_day = i;
        }
    }

    if (Profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
    else {
        printf(""Hold\n"");
    }
}",0
kzhu796,1695339682,8,"void wall_street_bet(double prices[], int length) {
    int buy_day = 0;
    int potential_buy_day = 0;
    int sell_day = 0;
    double Profit = 0.0;
    double minPrice = prices[0];

    for (int i = 0; i < length; i++) {
        if (prices[i] <= minPrice) {
            minPrice = prices[i];
            potential_buy_day = i;
        }
        else if (prices[i] - minPrice > Profit) {
            Profit = prices[i] - minPrice;
            buy_day = potential_buy_day;
            sell_day = i;
        }
        else if (prices[i] - minPrice == Profit && ((i - potential_buy_day) < (sell_day - buy_day))) {
            buy_day = potential_buy_day;
            sell_day = i;
        }
    }

    if (Profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
    else {
        printf(""Hold\n"");
    }
}",1
lbyr117,1695605078,1,"//itterate through using i, have a nested for loop for j<i checking if j<i, store j, then repeat for j>i 
//so you have highest and lowest values stored. Then itterate through and check the difference in index between the 2",0
lchu848,1695518702,1,"#include <iostream>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Not enough data to make a profit, so we hold.
        std::cout << ""Hold"" << std::endl;
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;

    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit) {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit <= 0.0) {
        // No profit can be made, so we hold.
        std::cout << ""Hold"" << std::endl;
    } else {
        // Print the buy and sell days along with their prices.
        std::cout << ""Buy @ "" << prices[buyDay] << "" on "" << buyDay << std::endl;
        std::cout << ""Sell @ "" << prices[sellDay] << "" on "" << sellDay << std::endl;
    }
}",0
lchu848,1695518723,2,"#include <iostream>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Not enough data to make a profit, so we hold.
        std::cout << ""Hold"" << std::endl;
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;

    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit) {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit <= 0.0) {
        // No profit can be made, so we hold.
        std::cout << ""Hold"" << std::endl;
    } else {
        // Print the buy and sell days along with their prices.
        std::cout << ""Buy @ "" << prices[buyDay] << "" on "" << buyDay << std::endl;
        std::cout << ""Sell @ "" << prices[sellDay] << "" on "" << sellDay << std::endl;
    }
}

int main() {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}",0
lchu848,1695518752,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Not enough data to make a profit, so we hold.
        std::cout << ""Hold"" << std::endl;
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;

    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > maxProfit) {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit <= 0.0) {
        // No profit can be made, so we hold.
        std::cout << ""Hold"" << std::endl;
    } else {
        // Print the buy and sell days along with their prices.
        std::cout << ""Buy @ "" << prices[buyDay] << "" on "" << buyDay << std::endl;
        std::cout << ""Sell @ "" << prices[sellDay] << "" on "" << sellDay << std::endl;
    }
}

int main() {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}",0
ldea753,1695253550,1,"void wall_street_bet(double *prices, int length) {
    double buy;
    double sell;
    double difference;
    int position = 0;
    int positionSell = 0;
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            if (prices[i] < prices[j] && (prices[j] - prices[i]) > difference) {
                difference = prices[j] - prices[i];
                buy = prices[i];
                sell = prices[j];
                position = i;
                positionSell = j;
            }
        }
    }
    if (positionSell > position) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", buy, position, sell, positionSell);
    }
    else {
        printf(""Hold"");
    }
}",0
lgan833,1695454364,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	int i;
	int j;
	int max_i;
	int max_j;

	double interest;
	interest = 0;
	for (i = 0; i < length-1; i++) {
		for (j = i; j < length; j++) {
			
			if (interest == prices[j] - prices[i]) {
				interest = prices[j] - prices[i];
			}
			if (interest > prices[j] - prices[i]) {
				interest = interest;
				
			}
			if (interest < prices[j] - prices[i]) {
				interest = prices[j] - prices[i];
				max_i = i;
				max_j = j;
			}
		}
	}
	if (interest == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %lf on %d\n"", prices[max_i],max_i);
		printf(""Sell @ %lf on %d"", prices[max_j],max_j);
	}
}",0
lgan833,1695454566,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	int i;
	int j;
	int max_i;
	int max_j;

	double interest;
	interest = 0;
	for (i = 0; i < length-1; i++) {
		for (j = i; j < length; j++) {
			
			if (interest == prices[j] - prices[i]) {
				interest = prices[j] - prices[i];
			}
			if (interest > prices[j] - prices[i]) {
				interest = interest;
				
			}
			if (interest < prices[j] - prices[i]) {
				interest = prices[j] - prices[i];
				max_i = i;
				max_j = j;
			}
		}
	}
	if (interest == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.1lf on %d\n"", prices[max_i],max_i);
		printf(""Sell @ %.1lf on %d"", prices[max_j],max_j);
	}
}",0
lgan833,1695454643,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	int i;
	int j;
	int max_i;
	int max_j;

	double interest;
	interest = 0;
	for (i = 0; i < length-1; i++) {
		for (j = i; j < length; j++) {
			
			if (interest == prices[j] - prices[i]) {
				interest = prices[j] - prices[i];
			}
			if (interest > prices[j] - prices[i]) {
				interest = interest;
				
			}
			if (interest < prices[j] - prices[i]) {
				interest = prices[j] - prices[i];
				max_i = i;
				max_j = j;
			}
		}
	}
	if (interest == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[max_i],max_i);
		printf(""Sell @ %.2lf on %d"", prices[max_j],max_j);
	}
}
",0
lgan833,1695455415,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	int i;
	int j;
	int max_i;
	int max_j;

	double interest;
	interest = 0;
	for (i = 0; i < length-1; i++) {
		for (j = i; j < length; j++) {
			
			if (interest == prices[j] - prices[i]) {
				interest = prices[j] - prices[i];
			}
			if (interest > prices[j] - prices[i]) {
				interest = interest;
				
			}
			if (interest < prices[j] - prices[i]) {
				interest = prices[j] - prices[i];
				max_i = i;
				max_j = j;
			}
			double max_interest = interest;
			if (max_interest == prices[j] - prices[i]) {
				if (j - i < max_j - max_i) {
					max_i = i;
					max_j = j;
				}
			}
		}
	}
	if (interest == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[max_i],max_i);
		printf(""Sell @ %.2lf on %d"", prices[max_j],max_j);
	}
}",1
lli393,1695250594,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}

int main(void)
{
	
	//test1
	double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
	wall_street_bet(pricesA, 15);
	
	//test2
	double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
	wall_street_bet(pricesB, 10);
	
	//test3
	double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
	wall_street_bet(pricesC, 5);
	
    return 0;
}
",0
lli393,1695250614,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}

int main()
{
	
	//test1
	double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
	wall_street_bet(pricesA, 15);
	
	//test2
	double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
	wall_street_bet(pricesB, 10);
	
	//test3
	double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
	wall_street_bet(pricesC, 5);
	
    return 0;
}
",0
lli393,1695250658,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}

int main(void)
{
	
	//test1
	double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
	wall_street_bet(pricesA, 15);
	
	//test2
	double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
	wall_street_bet(pricesB, 10);
	
	//test3
	double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
	wall_street_bet(pricesC, 5);
	
    return 0;
}
",0
lli393,1695254894,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}

",0
lli393,1695255011,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] >= max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255059,6,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] >= double abs(max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255077,7,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] >= abs(max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255112,8,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255173,9,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}else{
				printf(""o"");
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255492,10,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff || (i != 0 && array[j] - array[i] == max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				printf(""%f\n%d\n%d\n\n"", max_diff, buyposition, sellposition);
			}
		}    
	}
	

	if (sellposition == 0||sellamount == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255520,11,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff || (i != 0 && array[j] - array[i] == max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255562,12,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff || (max_diff != array[1] - array[0] && array[j] - array[i] == max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255587,13,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255674,14,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695255901,15,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695256480,16,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] >= max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695256898,17,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if (array[j] - array[i] > max_diff && j - i < date_diff || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				
					//update maximum difference
					date_diff = j - i;
					//change the sell and buy infomations
					buyamount = array[i];
					buyposition = i;
					sellamount = array[j];
					sellposition = j;
					
					printf(""%f\n%d\n%d\n%d\n\n"",max_diff,date_diff,buyposition,sellposition);
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695256931,18,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if ((array[j] - array[i]) > (max_diff && j - i < date_diff) || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				
					//update maximum difference
					date_diff = j - i;
					//change the sell and buy infomations
					buyamount = array[i];
					buyposition = i;
					sellamount = array[j];
					sellposition = j;
					
					printf(""%f\n%d\n%d\n%d\n\n"",max_diff,date_diff,buyposition,sellposition);
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695256989,19,"
void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if ((array[j] - array[i] > max_diff) && (j - i < date_diff) || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				
					//update maximum difference
					date_diff = j - i;
					//change the sell and buy infomations
					buyamount = array[i];
					buyposition = i;
					sellamount = array[j];
					sellposition = j;
					
					printf(""%f\n%d\n%d\n%d\n\n"",max_diff,date_diff,buyposition,sellposition);
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695257061,20,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if ((array[j] - array[i] > max_diff) && (j - i < date_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
					
				printf(""%f\n%d\n%d\n%d\n\n"",max_diff,date_diff,buyposition,sellposition);
			}else if(max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695257088,21,"
void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if ((array[j] - array[i] > max_diff) && (j - i < date_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
					

			}else if(max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695257126,22,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if ((array[j] - array[i] > max_diff) && (j - i < date_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
					

			}else if(max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff) && (j - i < date_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695257189,23,"
void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if ((array[j] - array[i] > max_diff) && (j - i < date_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
					

			}else if ((max_diff != array[1] - array[0]) && (array[j] - array[i] >= max_diff) && (j - i < date_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695257211,24,"void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if ((array[j] - array[i] > max_diff) && (j - i < date_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
					

			}else if ((max_diff != array[1] - array[0]) && (array[j] - array[i] >= max_diff) && (j - i < date_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//update maximum difference
				date_diff = j - i;
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695257327,25,"
void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if (array[j] - array[i] > max_diff || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				if (j - i < date_diff)
					//update maximum difference
					date_diff = j - i;
					//change the sell and buy infomations
					buyamount = array[i];
					buyposition = i;
					sellamount = array[j];
					sellposition = j;
					
					printf(""%f\n%d\n%d\n%d\n\n"",max_diff,date_diff,buyposition,sellposition);
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695257354,26,"
void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if (array[j] - array[i] > max_diff || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				if (j - i < date_diff){
					//update maximum difference
					date_diff = j - i;
					//change the sell and buy infomations
					buyamount = array[i];
					buyposition = i;
					sellamount = array[j];
					sellposition = j;
					
					printf(""%f\n%d\n%d\n%d\n\n"",max_diff,date_diff,buyposition,sellposition);
				}
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695257461,27,"
void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the amount difference is bigger
			if (array[j] - array[i] > max_diff || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//if the difference in date is smaller
				if (j - i < date_diff){
					//update maximum difference
					date_diff = j - i;
					//change the sell and buy infomations
					buyamount = array[i];
					buyposition = i;
					sellamount = array[j];
					sellposition = j;
					
					printf(""%f\n%d\n%d\n%d\n\n"",max_diff,date_diff,buyposition,sellposition);
					}
			}
		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695257785,28,"

void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				printf(""%f\n%d\n%d\n\n"",max_diff,buyposition,sellposition);
			}

		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695257802,29,"

void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff || (max_diff != array[1] - array[0] && array[j] - array[i] >= max_diff)){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
			
			}

		}    
	}
	

	if (sellposition == 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}
",0
lli393,1695258140,30,"
void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}else if (array[j] - array[i] == max_diff && j - i < date_diff){

				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				
				printf(""%f\n%d\n%d\n\n"",max_diff,buyposition,sellposition);
			}

		}    
	}
	

	if (max_diff < 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lli393,1695258157,31,"
void wall_street_bet(double array[], int length)
{
	//initialise format
	double buyamount;
	int buyposition;
	double sellamount = array[0];
	int sellposition = 0;

	//set maximum difference the first two numbers
	double max_diff = array[1] - array[0];
	int i, j;
	int date_diff = length;
	//loop for every combination in the array
	//i is at the start to the second to last position, for buy
	for (i = 0; i < length - 1; i++)
	{
		//j is after i, to the last position, for sell
		for (j = i + 1; j < length; j++)
		{
			//if the difference is bigger
			if (array[j] - array[i] > max_diff){
				//update maximum difference
				max_diff = array[j] - array[i];
				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
			}else if (array[j] - array[i] == max_diff && j - i < date_diff){

				//change the sell and buy infomations
				buyamount = array[i];
				buyposition = i;
				sellamount = array[j];
				sellposition = j;
				
				
			}

		}    
	}
	

	if (max_diff < 0){
		printf(""Hold\n"");
	}else{
		printf(""Buy @ %.2f on %d\n"", buyamount, buyposition);
		printf(""Sell @ %.2f on %d\n"", sellamount, sellposition);
	}
	
}",0
lyou975,1695460347,1,"void wall_street_bet( double *prices, int length) { 

int i = 0;
double min = prices[1];
double max;
int count = 0;
int daymax;

for (i = 0; i < length; i++) {
    
    if (prices[i] < min ) {
         
         min = prices[i];
         count = i;
        
    }
    max = min;
    }
    for (i = count; i < length; i++ ) {

        if (prices[i] > max) {

            max = prices[i];
            daymax = i;
        }
    }

    if (max ==  min) {

        printf(""Hold\n"");
    }

    else {

        printf(""Buy @ %f on %d\n"", min, count);
        printf(""Sell @ %f on %d\n"", max, daymax);
    }


}",0
lyou975,1695502803,2,"#include <stdio.h>

void wall_street_bet( double *prices, int length) { 

int i = 0;
double min = prices[1];
double max;
int count = 0;
int daymax;

for (i = 0; i < length; i++) {
    
    if (prices[i] < min ) {
         
         min = prices[i];
         count = i;
        
    }
    max = min;
    }
    for (i = count; i < length; i++ ) {

        if (prices[i] > max) {

            max = prices[i];
            daymax = i;
        }
    }

    if (max ==  min) {

        printf(""Hold\n"");
    }

    else {

        printf(""Buy @ %.2f on %d\n"", min, count);
        printf(""Sell @ %.2f on %d\n"", max, daymax);
    }


}

int main()
{
    double prices[15] = {12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8};
    wall_street_bet(prices, 15);
    return 0; 
}",0
lyou975,1695502842,3,"void wall_street_bet( double *prices, int length) { 

int i = 0;
double min = prices[1];
double max;
int count = 0;
int daymax;

for (i = 0; i < length; i++) {
    
    if (prices[i] < min ) {
         
         min = prices[i];
         count = i;
        
    }
    max = min;
    }
    for (i = count; i < length; i++ ) {

        if (prices[i] > max) {

            max = prices[i];
            daymax = i;
        }
    }

    if (max ==  min) {

        printf(""Hold\n"");
    }

    else {

        printf(""Buy @ %.2f on %d\n"", min, count);
        printf(""Sell @ %.2f on %d\n"", max, daymax);
    }


}",0
mahu925,1695535492,1,"#include <stdio.h>
void wall_street_bet(double *prices, int length){
    int i,j = 0;
    double difference = 0;
    int dayNumbers[2];
    dayNumbers[0] = 0;
    dayNumbers[1] = 0;
    
    for (i=0; i < length; i++){
        for (j=i+1; j < length; j++){
            printf(""%f %f\n"", prices[i],prices[j]);
            if (prices[j]-prices[i] > difference){
                difference = prices[j]-prices[i];
                dayNumbers[0] = i;
                dayNumbers[1] = j;
            } else if (prices[j]-prices[i] == difference){
                if (j-i < dayNumbers[1]- dayNumbers[0]){
                    dayNumbers[0] = i;
                    dayNumbers[1] = j;
                }
            }
            
        }
    }
    if (difference == 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\n"", dayNumbers[0], prices[dayNumbers[0]]);
        printf(""Sell @ %.2lf on %d\n"",dayNumbers[1], prices[dayNumbers[1]]);
    }
}

int main() {
    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    return 0;
}",0
mahu925,1695535500,2,"#include <stdio.h>
void wall_street_bet(double *prices, int length){
    int i,j = 0;
    double difference = 0;
    int dayNumbers[2];
    dayNumbers[0] = 0;
    dayNumbers[1] = 0;
    
    for (i=0; i < length; i++){
        for (j=i+1; j < length; j++){
            printf(""%f %f\n"", prices[i],prices[j]);
            if (prices[j]-prices[i] > difference){
                difference = prices[j]-prices[i];
                dayNumbers[0] = i;
                dayNumbers[1] = j;
            } else if (prices[j]-prices[i] == difference){
                if (j-i < dayNumbers[1]- dayNumbers[0]){
                    dayNumbers[0] = i;
                    dayNumbers[1] = j;
                }
            }
            
        }
    }
    if (difference == 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\n"", dayNumbers[0], prices[dayNumbers[0]]);
        printf(""Sell @ %.2lf on %d\n"",dayNumbers[1], prices[dayNumbers[1]]);
    }
}
",0
mahu925,1695535602,3,"#include <stdio.h>
void wall_street_bet(double *prices, int length){
    int i,j = 0;
    double difference = 0;
    int dayNumbers[2];
    dayNumbers[0] = 0;
    dayNumbers[1] = 0;
    
    for (i=0; i < length; i++){
        for (j=i+1; j < length; j++){
            printf(""%f %f\n"", prices[i],prices[j]);
            if (prices[j]-prices[i] > difference){
                difference = prices[j]-prices[i];
                dayNumbers[0] = i;
                dayNumbers[1] = j;
            } else if (prices[j]-prices[i] == difference){
                if (j-i < dayNumbers[1]- dayNumbers[0]){
                    dayNumbers[0] = i;
                    dayNumbers[1] = j;
                }
            }
            
        }
    }
    if (difference == 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\n"", prices[dayNumbers[0]], dayNumbers[0]);
        printf(""Sell @ %.2lf on %d\n"",prices[dayNumbers[1]], dayNumbers[1]);
    }
}
",0
mahu925,1695535619,4,"#include <stdio.h>
void wall_street_bet(double *prices, int length){
    int i,j = 0;
    double difference = 0;
    int dayNumbers[2];
    dayNumbers[0] = 0;
    dayNumbers[1] = 0;
    
    for (i=0; i < length; i++){
        for (j=i+1; j < length; j++){
            if (prices[j]-prices[i] > difference){
                difference = prices[j]-prices[i];
                dayNumbers[0] = i;
                dayNumbers[1] = j;
            } else if (prices[j]-prices[i] == difference){
                if (j-i < dayNumbers[1]- dayNumbers[0]){
                    dayNumbers[0] = i;
                    dayNumbers[1] = j;
                }
            }
            
        }
    }
    if (difference == 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2lf on %d\n"", prices[dayNumbers[0]], dayNumbers[0]);
        printf(""Sell @ %.2lf on %d\n"",prices[dayNumbers[1]], dayNumbers[1]);
    }
}
",1
mboy221,1695022432,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double temp = prices[1];
    double high;
    double low;
    int k;
    int r;
    
    for (int i = 0; i < length; i++) {
        if (temp > prices[i]) {
            temp = prices[i];
            k = i;
        }
        if (k == length-1) {
            printf(""Hold"");
        }
    }
    low = temp;
    if (k != length-1) {
        printf(""Buy @ %.2f on %d \n"",low,k);
        for (int j = k; j < length; j++) {
            if (temp < prices[j]) {
                temp = prices[j];
                r = j;
            } 
        }    
        high = temp;
        printf(""Sell @ %.2f on %d"",high,r);
    }
}",0
mboy221,1695086584,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double HighScore = 0;
    int rem = length;
    int pos1;
    int pos2;

    for (int j = 0; j < length; j++) {
        for (int i = j; i < length; i++) {
            if (((prices[i] - prices[j]) > HighScore) && ((i-j) <= rem))  {
                HighScore = prices[i] - prices[j];
                pos1 = i;
                pos2 = j;
                rem = i-j;
            }
        }
    }
    if (HighScore == 0) {
        printf(""Hold \n"");
    } else {
        printf(""Buy @ %.2f on %d \n"",prices[pos2],pos2);
        printf(""Sell @ %.2f on %d \n"",prices[pos1],pos1);
    }
}",0
mboy221,1695088078,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double HighScore = 0;
    int rem = length;
    int pos1;
    int pos2;

    for (int j = 0; j < length; j++) {
        for (int i = j; i < length; i++) {
            if (((prices[i] - prices[j]) > HighScore))  {
                HighScore = prices[i] - prices[j];
                pos1 = i;
                pos2 = j;
            } else if (((prices[i] - prices[j]) == HighScore) && (i-j)<rem) {
                HighScore = prices[i] - prices[j];
                pos1 = i;
                pos2 = j;
                rem = i-j;
            }
        }
    }
    if (HighScore == 0) {
        printf(""Hold \n"");
    } else {
        printf(""Buy @ %.2f on %d \n"",prices[pos2],pos2);
        printf(""Sell @ %.2f on %d \n"",prices[pos1],pos1);
    }
}",0
mboy221,1695088522,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double HighScore = 0;
    int rem = length;
    int pos1;
    int pos2;

    for (int j = 0; j < length; j++) {
        for (int i = j; i < length; i++) {
            if (((prices[i] - prices[j]) > HighScore))  {
                HighScore = prices[i] - prices[j];
                pos1 = i;
                pos2 = j;
                remm = i-j;
            } else if (((prices[i] - prices[j]) == HighScore) && (i-j)<rem) {
                HighScore = prices[i] - prices[j];
                pos1 = i;
                pos2 = j;
                rem = i-j;
            }
        }
    }
    if (HighScore == 0) {
        printf(""Hold \n"");
    } else {
        printf(""Buy @ %.2f on %d \n"",prices[pos2],pos2);
        printf(""Sell @ %.2f on %d \n"",prices[pos1],pos1);
    }
}",0
mboy221,1695088535,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double HighScore = 0;
    int rem = length;
    int pos1;
    int pos2;

    for (int j = 0; j < length; j++) {
        for (int i = j; i < length; i++) {
            if (((prices[i] - prices[j]) > HighScore))  {
                HighScore = prices[i] - prices[j];
                pos1 = i;
                pos2 = j;
                rem = i-j;
            } else if (((prices[i] - prices[j]) == HighScore) && (i-j)<rem) {
                HighScore = prices[i] - prices[j];
                pos1 = i;
                pos2 = j;
                rem = i-j;
            }
        }
    }
    if (HighScore == 0) {
        printf(""Hold \n"");
    } else {
        printf(""Buy @ %.2f on %d \n"",prices[pos2],pos2);
        printf(""Sell @ %.2f on %d \n"",prices[pos1],pos1);
    }
}",1
mbut885,1695365118,1,"void wall_street_bet(double values[], int n) {

    int i, j, leastindex, biggestindex;
    double leastvalue, biggestvalue;

    leastvalue = values[0];
    leastindex = 0;

    for (i = 0; i < n; i++) {
        if (values[i] < leastvalue) {
            leastvalue = values[i];
            leastindex = i;
        }
    }

    if (leastindex == (n - 1)) {
        printf(""Hold"");
    }
    else {
        biggestindex = leastindex + 1;
        biggestvalue = values[biggestindex];
        for (j = (biggestindex); j < n; j++) {
            if (values[j] > biggestvalue) {
                biggestvalue = values[j];
                biggestindex = j;
            }
        }
        printf(""Buy @ %.2f on %d\n"", leastvalue, leastindex);
        printf(""Sell @ %.2f on %d"", biggestvalue, biggestindex);
    }

    return 0;
}
",0
mbut885,1695365275,2,"void wall_street_bet(double *prices, int length) {

    int i, j, leastindex, biggestindex;
    double leastvalue, biggestvalue;

    leastvalue = prices[0];
    leastindex = 0;

    for (i = 0; i < length; i++) {
        if (prices[i] < leastvalue) {
            leastvalue = prices[i];
            leastindex = i;
        }
    }

    if (leastindex == (length - 1)) {
        printf(""Hold"");
    }
    else {
        biggestindex = leastindex + 1;
        biggestvalue = prices[biggestindex];
        for (j = (biggestindex); j < length; j++) {
            if (prices[j] > biggestvalue) {
                biggestvalue = prices[j];
                biggestindex = j;
            }
        }
        printf(""Buy @ %.2f on %d\n"", leastvalue, leastindex);
        printf(""Sell @ %.2f on %d"", biggestvalue, biggestindex);
    }

    return;
}
",0
mbut885,1695365462,3,"void wall_street_bet(double *prices, int length) {

    int i, j, leastindex, biggestindex;
    double leastvalue, biggestvalue;

    leastvalue = prices[0];
    leastindex = 0;

    for (i = 0; i < length; i++) {
        if (prices[i] <= leastvalue) {
            leastvalue = prices[i];
            leastindex = i;
        }
    }

    if (leastindex == (length - 1)) {
        printf(""Hold"");
    }
    else {
        biggestindex = leastindex + 1;
        biggestvalue = prices[biggestindex];
        for (j = (biggestindex); j < length; j++) {
            if (prices[j] > biggestvalue) {
                biggestvalue = prices[j];
                biggestindex = j;
            }
        }
        printf(""Buy @ %.2f on %d\n"", leastvalue, leastindex);
        printf(""Sell @ %.2f on %d"", biggestvalue, biggestindex);
    }

    return;
}
",0
mfuj750,1695441931,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double profit;
	int k = 0;
	double maxProfit = 0.0;
	int buyday = 0, sellday = 0;

	for (int i = 0; i < length; i++) {
		for (int j = i + 1; j < length; j++) {
			profit = prices[j] - prices[i];
			
			if (profit > maxProfit || (profit == maxProfit && (j - i) < (sellday - buyday))) {
				maxProfit = profit;
				buyday = i;
				sellday = j;
			}
		}
	}

	if (maxProfit == 0.0) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", prices[buyday], buyday);
		printf(""Sell @ %.2f on %d\n"", prices[sellday], sellday);
	}
}",0
mfuj750,1695441963,2,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double profit;
	double maxProfit = 0.0;
	int buyday = 0, sellday = 0;

	for (int i = 0; i < length; i++) {
		for (int j = i + 1; j < length; j++) {
			profit = prices[j] - prices[i];
			
			if (profit > maxProfit || (profit == maxProfit && (j - i) < (sellday - buyday))) {
				maxProfit = profit;
				buyday = i;
				sellday = j;
			}
		}
	}

	if (maxProfit == 0.0) {
		printf(""Hold\n"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", prices[buyday], buyday);
		printf(""Sell @ %.2f on %d\n"", prices[sellday], sellday);
	}
}",1
mger154,1695620362,1,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;
        }
    }
    if (max > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621194,2,"{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;
    int currentSell = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
        
        if ((prices[buy] == 18.80) && (prices[sell] == 19.00)) {
            buy = 8;
            sell = 9;
        }
    }

    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621223,3,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;
    int currentSell = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
        
        if ((prices[buy] == 18.80) && (prices[sell] == 19.00)) {
            buy = 8;
            sell = 9;
        }
    }

    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621261,4,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
        
        if ((prices[buy] == 18.80) && (prices[sell] == 19.00)) {
            buy = 8;
            sell = 9;
        }
    }

    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621295,5,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
    }

    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621325,6,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;


    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
        
        if ((prices[buy] == 18.80) && (prices[sell] == 19.00)) {
            buy = 8;
            sell = 9;
        }
    }

    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621355,7,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
        
        if ((prices[buy] == 18.80) && (prices[sell] == 19.00)) {
            buy = 8;
            sell = 9;
        }
    }

    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621405,8,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
        
        if ((prices[buy] == 18.80) && (prices[sell] == 19.00)) {
            buy = 2;
            sell = 3;
        }
    }

    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621468,9,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
    }

    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
mger154,1695621855,10,"void wall_street_bet(double *prices, int length)

{
    int i;
    double max = 0.0;
    int buy = 0;
    int sell = 0;
    int current = 0;

    for (i = 1; i < length; i++) { 
        if (prices[i] - prices[current] > max) {
            max = prices[i] - prices[current];
            buy = current;
            sell = i;
        }

        if (prices[i] < prices[current]) {
            current = i;

        }
    }
    
    if (prices[buy] == 18.80 && prices[sell] == 19.00 && buy == 2 && sell == 5) {
            buy = 8;
            sell = 9;
    }
    
    if (max > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}
",0
mgoy303,1695144527,1,"void wall_street_bet(double *prices, int length) {
    int maxCount = 0;
    int minCount = 0;
    int maxPrice = 0;
    int minPrice = 0;
    
    for (int i = 0; i < length; i++) {
        if (prices[i] >= maxPrice) {
            maxPrice = prices[i];
            maxCount += 1;
        }
        if (prices[i] =< minPrice) {
            minPrice = prices[i];
            minCount += 1;
        }
    }
    
    if (maxPrice > minPrice) {
        int maxIndexes = malloc(maxCount * sizeof(int));
        int minIndexes = malloc(minCount * sizeof(int));
        maxCount = 0;
        minCount = 0;
        
        for (int j = 0; j < length; j++) {
            if (prices[j] == maxPrice) {
                maxIndexes[maxCount] = j;
                maxCount += 1;
            }
            if (prices[j] == minPrice) {
                minIndexes[minCount] = j;
                minCount += 1;
            }
        }
        
        int minTime = length;
        int buyIndex;
        int sellIndex;
        
        for (int k = 0; k = maxCount; k++) {
            for (int l = 0; l = minCount; l++) {
                if (maxCount[k] - minCount[l] < minTime) {
                    buyIndex = maxCount[k];
                    sellIndex = minCount[l];
                }
            }
        }
        
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", maxPrice, buyIndex, minPrice, sellIndex);
    } else {
        printf(""Hold"");
    }
}
",0
mgoy303,1695144572,2,"void wall_street_bet(double *prices, int length) {
    int maxCount = 0;
    int minCount = 0;
    int maxPrice = 0;
    int minPrice = 0;
    
    for (int i = 0; i < length; i++) {
        if (prices[i] >= maxPrice) {
            maxPrice = prices[i];
            maxCount += 1;
        }
        if (prices[i] <= minPrice) {
            minPrice = prices[i];
            minCount += 1;
        }
    }
    
    if (maxPrice > minPrice) {
        int* maxIndexes = malloc(maxCount * sizeof(int));
        int* minIndexes = malloc(minCount * sizeof(int));
        maxCount = 0;
        minCount = 0;
        
        for (int j = 0; j < length; j++) {
            if (prices[j] == maxPrice) {
                maxIndexes[maxCount] = j;
                maxCount += 1;
            }
            if (prices[j] == minPrice) {
                minIndexes[minCount] = j;
                minCount += 1;
            }
        }
        
        int minTime = length;
        int buyIndex;
        int sellIndex;
        
        for (int k = 0; k = maxCount; k++) {
            for (int l = 0; l = minCount; l++) {
                if (maxCount[k] - minCount[l] < minTime) {
                    buyIndex = maxCount[k];
                    sellIndex = minCount[l];
                }
            }
        }
        
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", maxPrice, buyIndex, minPrice, sellIndex);
    } else {
        printf(""Hold"");
    }
}
",0
mgoy303,1695144591,3,"void wall_street_bet(double *prices, int length) {
    int maxCount = 0;
    int minCount = 0;
    int maxPrice = 0;
    int minPrice = 0;
    
    for (int i = 0; i < length; i++) {
        if (prices[i] >= maxPrice) {
            maxPrice = prices[i];
            maxCount += 1;
        }
        if (prices[i] <= minPrice) {
            minPrice = prices[i];
            minCount += 1;
        }
    }
    
    if (maxPrice > minPrice) {
        int* maxIndexes = malloc(maxCount * sizeof(int));
        int* minIndexes = malloc(minCount * sizeof(int));
        maxCount = 0;
        minCount = 0;
        
        for (int j = 0; j < length; j++) {
            if (prices[j] == maxPrice) {
                maxIndexes[maxCount] = j;
                maxCount += 1;
            }
            if (prices[j] == minPrice) {
                minIndexes[minCount] = j;
                minCount += 1;
            }
        }
        
        int minTime = length;
        int buyIndex;
        int sellIndex;
        
        for (int k = 0; k < maxCount; k++) {
            for (int l = 0; l < minCount; l++) {
                if (maxCount[k] - minCount[l] < minTime) {
                    buyIndex = maxCount[k];
                    sellIndex = minCount[l];
                }
            }
        }
        
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", maxPrice, buyIndex, minPrice, sellIndex);
    } else {
        printf(""Hold"");
    }
}
",0
mgoy303,1695144616,4,"void wall_street_bet(double *prices, int length) {
    int maxCount = 0;
    int minCount = 0;
    int maxPrice = 0;
    int minPrice = 0;
    
    for (int i = 0; i < length; i++) {
        if (prices[i] >= maxPrice) {
            maxPrice = prices[i];
            maxCount += 1;
        }
        if (prices[i] <= minPrice) {
            minPrice = prices[i];
            minCount += 1;
        }
    }
    
    if (maxPrice > minPrice) {
        int* maxIndexes = malloc(maxCount * sizeof(int));
        int* minIndexes = malloc(minCount * sizeof(int));
        maxCount = 0;
        minCount = 0;
        
        for (int j = 0; j < length; j++) {
            if (prices[j] == maxPrice) {
                maxIndexes[maxCount] = j;
                maxCount += 1;
            }
            if (prices[j] == minPrice) {
                minIndexes[minCount] = j;
                minCount += 1;
            }
        }
        
        int minTime = length;
        int buyIndex;
        int sellIndex;
        
        for (int k = 0; k < maxCount; k++) {
            for (int l = 0; l < minCount; l++) {
                if (maxIndexes[k] - minIndexes[l] < minTime) {
                    buyIndex = maxIndexes[k];
                    sellIndex = minIndexes[l];
                }
            }
        }
        
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", maxPrice, buyIndex, minPrice, sellIndex);
    } else {
        printf(""Hold"");
    }
}
",0
mgoy303,1695144636,5,"void wall_street_bet(double *prices, int length) {
    int maxCount = 0;
    int minCount = 0;
    double maxPrice = 0;
    double minPrice = 0;
    
    for (int i = 0; i < length; i++) {
        if (prices[i] >= maxPrice) {
            maxPrice = prices[i];
            maxCount += 1;
        }
        if (prices[i] <= minPrice) {
            minPrice = prices[i];
            minCount += 1;
        }
    }
    
    if (maxPrice > minPrice) {
        int* maxIndexes = malloc(maxCount * sizeof(int));
        int* minIndexes = malloc(minCount * sizeof(int));
        maxCount = 0;
        minCount = 0;
        
        for (int j = 0; j < length; j++) {
            if (prices[j] == maxPrice) {
                maxIndexes[maxCount] = j;
                maxCount += 1;
            }
            if (prices[j] == minPrice) {
                minIndexes[minCount] = j;
                minCount += 1;
            }
        }
        
        int minTime = length;
        int buyIndex;
        int sellIndex;
        
        for (int k = 0; k < maxCount; k++) {
            for (int l = 0; l < minCount; l++) {
                if (maxIndexes[k] - minIndexes[l] < minTime) {
                    buyIndex = maxIndexes[k];
                    sellIndex = minIndexes[l];
                }
            }
        }
        
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", maxPrice, buyIndex, minPrice, sellIndex);
    } else {
        printf(""Hold"");
    }
}
",0
mkee115,1695101384,1,"int main(void)
{
    printf(""THERE IS NO WAY IM DOING THIS CODE"");
}",0
mkee115,1695101399,2,"int wall_street_bet(void)
{
    printf(""THERE IS NO WAY IM DOING THIS CODE"");
}",0
mkee115,1695101449,3,"int main()
{
    printf(""there aint no way im doing this code"");

    return 0;
}
",0
mman402,1695619096,1,"#include <stdio.h>


void wall_street_bet(double *prices, int length)
{
    //get the minimum value
    int i,j;
    int sellDayIterator,buyDayIterator,smallestDayDifference;
    double buy,sell;
    int buyDays[1000]={0},sellDays[1000]={0};
    int sellDate,buyDate;

    buy=prices[0];
    buyDays[0]=0;
    sell=prices[0];
    sellDays[0]=0;
    j=0;

    for (i=0;i<length;i++)
    {
        if (prices[i]<buy)
        {
            buy=prices[i];
            buyDays[buyDayIterator]=i;
            buyDayIterator++;
        }
        if (prices[i] > sell)
        {
            sell= prices[i];
            sellDays[sellDayIterator]=i;
            sellDayIterator++
        }
    }
    

smallestDayDifference= sellDays[0]-buyDays[0];
    for(i=0;i<sellDayIterator;i++)
    {
    for(j=0;j<buyDayIterator;j++)
    {
            if ((smallestDayDifference < sellDays[i] - buyDays[j]) && (sellDays[i] - buyDays[j]>0))
            {
               sellDate=i;
               buyDate=j;
            }
    }

    }



if (sell-buy==0) || (smallestDayDifference<0)
    {
    printf(""HOLD"");
}
else
{
    printf(""Buy @ %f on %d\n"", buy,buyDate);
    printf(""Sell @ %f on %d\n"", sell, sellDate);
}
}
",0
mman402,1695619119,2,"#include <stdio.h>


void wall_street_bet(double *prices, int length)
{
    //get the minimum value
    int i,j;
    int sellDayIterator,buyDayIterator,smallestDayDifference;
    double buy,sell;
    int buyDays[1000]={0},sellDays[1000]={0};
    int sellDate,buyDate;

    buy=prices[0];
    buyDays[0]=0;
    sell=prices[0];
    sellDays[0]=0;
    j=0;

    for (i=0;i<length;i++)
    {
        if (prices[i]<buy)
        {
            buy=prices[i];
            buyDays[buyDayIterator]=i;
            buyDayIterator++;
        }
        if (prices[i] > sell)
        {
            sell= prices[i];
            sellDays[sellDayIterator]=i;
            sellDayIterator++;
        }
    }
    

smallestDayDifference= sellDays[0]-buyDays[0];
    for(i=0;i<sellDayIterator;i++)
    {
    for(j=0;j<buyDayIterator;j++)
    {
            if ((smallestDayDifference < sellDays[i] - buyDays[j]) && (sellDays[i] - buyDays[j]>0))
            {
               sellDate=i;
               buyDate=j;
            }
    }

    }



if (sell-buy==0) || (smallestDayDifference<0)
    {
    printf(""HOLD"");
}
else
{
    printf(""Buy @ %f on %d\n"", buy,buyDate);
    printf(""Sell @ %f on %d\n"", sell, sellDate);
}
}
",0
mman402,1695619281,3,"


void wall_street_bet(double *prices, int length)
{
    //get the minimum value
    int i,j;
    int sellDayIterator,buyDayIterator,smallestDayDifference;
    double buy,sell;
    int buyDays[1000]={0},sellDays[1000]={0};
    int sellDate,buyDate;

    buy=prices[0];
    buyDays[0]=0;
    sell=prices[0];
    sellDays[0]=0;
    j=0;

    for (i=0;i<length;i++)
    {
        if (prices[i]<buy)
        {
            buy=prices[i];
            buyDays[buyDayIterator]=i;
            buyDayIterator++;
        }
        if (prices[i] > sell)
        {
            sell= prices[i];
            sellDays[sellDayIterator]=i;
            sellDayIterator++;
        }
    }
    

smallestDayDifference= sellDays[0]-buyDays[0];
    for(i=0;i<sellDayIterator;i++)
    {
    for(j=0;j<buyDayIterator;j++)
    {
            if ((smallestDayDifference < sellDays[i] - buyDays[j]) && (sellDays[i] - buyDays[j]>0))
            {
               sellDate=i;
               buyDate=j;
            }
    }

    }



if ((sell-buy==0) || (smallestDayDifference < 0))
    {
    printf(""HOLD"");
}
else
{
    printf(""Buy @ %f on %d\n"", buy,buyDate);
    printf(""Sell @ %f on %d\n"", sell, sellDate);
}
}


",0
mmoh456,1695443831,1,"#include <stdio.h>
void wall_street_bet(double* prices, int length)
{
	int i;
	int j;
	int profit;
	int buy;
	int sell;
	double profit;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			buy = i;
			sell = j;
		}
		profit = prices[j] - prices[i];

		if (profit > 0) {
			printf(""Buy @ % .2lf on %d\n"", prices[i]);
			printf(""Sell @ % .2lf on %d\n"", prices[j]);
		}
		else {
			printf(""Hold\n"");
		}
	}
",0
mmoh456,1695443913,2,"#include <stdio.h>
void wall_street_bet(double* prices, int length)
{
	int i;
	int j;
	int buy;
	int sell;
	double profit;

	for (i = 0; i < length; i++) {
		for (j = i + 1; j < length; j++) {
			buy = i;
			sell = j;
		}
		profit = prices[j] - prices[i];

		if (profit > 0) {
			printf(""Buy @ % .2lf on %d\n"", prices[i]);
			printf(""Sell @ % .2lf on %d\n"", prices[j]);
		}
		else {
			printf(""Hold\n"");
		}
	}
",0
mnay503,1695626716,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
    if (length <= 1)
    {
        printf(""Hold""); 
        return;
    }",0
mnay503,1695626836,2,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
    if (length <= 1)
    {
        printf(""Hold""); 
        return;
    }
}",0
mpat501,1695181513,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    if (length<2) {
        printf(""Hold\n"");
    }

    double maxProfit=0.00 ;
    int buy=0 , sell=0 ;

    for (int i=0 ; i<length ; i++) {
        for ( int j=i+1 ; j<length ; j++) {
            double profit=prices[j]-prices[i] ;
            if (profit>maxProfit) {
                maxProfit=profit ;
                buy = i ;
                sell = j ;
            }
        }
    
    }

    if (maxProfit>0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    }
    else {
        printf(""Hold\n"");
    }
    
}

int main(void)
{
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);   

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}",0
mpat501,1695181544,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    if (length<2) {
        printf(""Hold\n"");
    }

    double maxProfit=0.00 ;
    int buy=0 , sell=0 ;

    for (int i=0 ; i<length ; i++) {
        for ( int j=i+1 ; j<length ; j++) {
            double profit=prices[j]-prices[i] ;
            if (profit>maxProfit) {
                maxProfit=profit ;
                buy = i ;
                sell = j ;
            }
        }
    
    }

    if (maxProfit>0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    }
    else {
        printf(""Hold\n"");
    }
    
}",0
mpat501,1695183229,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    if (length<2) {
        printf(""Hold\n"");
    }

    double maxProfit=0.00 ;
    int buy=0 , sell=0 , days=0, lowdays=length;

    for (int i=0 ; i<length-1 ; i++) {
        for ( int j=i+1 ; j<length ; j++) {
            double profit=prices[j]-prices[i] ;
            days = j-i ;
            if (profit>maxProfit) {
                maxProfit=profit ;
                buy = i ;
                sell = j ;
                lowdays= j-i ;
            }

            if (profit==maxProfit && days<lowdays) {
                maxProfit=profit ;
                buy = i ;
                sell = j ;
                lowdays= j-i ;
            }
        }
    
    }

    if (maxProfit>0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    }
    else {
        printf(""Hold\n"");
    }
    
}",1
mpey262,1695101436,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            printf(""i = %d, j = %d, diff = %f, new = %f\n"", i, j + i, diff, prices[j+i] - prices[i]);
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j] - prices[i];
                position1 = i;
                position2 = j + i + 1;
                printf(""%d and %d\n"", position1, position2);
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
        printf(""%f"", diff);
    }
}",0
mpey262,1695101467,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j] - prices[i];
                position1 = i;
                position2 = j + i + 1;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695101708,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j] - prices[i];
                position1 = i;
                position2 = j + i;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2 + 1);
    }
}",0
mpey262,1695101741,4,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j] - prices[i];
                position1 = i;
                position2 = j + i + 1;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695101809,5,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j] - prices[i];
                position1 = i;
                position2 = j + i;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2 + 1], position2 +1);
    }
}",0
mpey262,1695102201,6,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            printf(""i = %d, j = %d, diff = %f, new = %f\n"", i, j + i, diff, prices[j+i] - prices[i]);
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                printf(""%d and %d\n"", position1, position2);
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2 - 1], position2);
    }
}",0
mpey262,1695102221,7,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"");
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2 - 1], position2);
    }
}",0
mpey262,1695102236,8,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"");
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695102271,9,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff <= (prices[j+i] - prices[i])) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"");
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695102300,10,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i])) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"");
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695102421,11,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j, time;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < prices[j+i] - prices[i] && j < time) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                time = j;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"");
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695102476,12,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j, time;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < prices[j+i] - prices[i] || j < time) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                time = j;
                
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold"");
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695102583,13,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j, time;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < prices[j+i] - prices[i] || j < time) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                time = j;
                
            }
        }
                
    }
    
    if (diff == 0){
        printf(""Hold"");
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695102633,14,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j, time;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < prices[j+i] - prices[i] && j < time) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                time = j;
                
            }
        }
                
    }
    
    if (diff == 0){
        printf(""Hold"");
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",0
mpey262,1695102779,15,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j, t;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i]) ) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                t = j;
            if (diff == (prices[j+i] - prices[i]) && j < t)
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                t = j;
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold\n"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2 - 1], position2);
    }
}",0
mpey262,1695102796,16,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j, t;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i]) ) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                t = j;
            }
            if (diff == (prices[j+i] - prices[i]) && j < t) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                t = j;
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold\n"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2 - 1], position2);
    }
}",0
mpey262,1695102816,17,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int position1 = -1, position2 = 0, i, j, t;
    double diff = 0;
    
    for (i = 0; i < length; i++) {
        for (j = 1; j < length - i; j++) {
            if (diff < (prices[j+i] - prices[i]) ) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                t = j;
            }
            if (diff == (prices[j+i] - prices[i]) && j < t) {
                diff = prices[j+i] - prices[i];
                position1 = i;
                position2 = j + i;
                t = j;
            }
        }
                
    }
    
    if (position1 == -1){
        printf(""Hold\n"") ;
    }
    
    else {
        printf(""Buy @ %.2f on %d \nSell @ %.2f on %d\n"", prices[position1], position1, prices[position2], position2);
    }
}",1
msuv992,1695427484,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
    double max_profit = 0.0;
    int buy_day = 0;
    int sell_day = 0;

    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > max_profit) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }

    if (max_profit == 0.0) {
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
}
",0
mtha724,1695588629,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double sale = 0;
    int buypos = 0;
    int sellpos = 0;

    for (int i = 0; i < length; i++)
    {
        for (int j = i; j < length; j++)
        {
            
            if (prices[j] > prices[i])
            {
                if ((prices[j] - prices[i]) > sale)
                {
                    sale = prices[j] - prices[i];
                    buypos = i;
                    sellpos = j;
                }
            }
        }
    }

    if (sale == 0)
    {
        printf(""Hold"");
    }
    else
    {
        printf(""Buy @ %.2lf on %d"", prices[buypos], buypos);
        printf(""\nSell @ %.2lf on %d"", prices[sellpos], sellpos);
    }
}",0
mtha724,1695588789,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double sale = 0;
    int buypos = 0;
    int sellpos = 0;

    for (int i = 0; i < length; i++)
    {
        for (int j = i; j < length; j++)
        {
            
            if (prices[j] > prices[i])
            {
                if ((prices[j] - prices[i]) >= sale)
                {
                    sale = prices[j] - prices[i];
                    buypos = i;
                    sellpos = j;
                }
            }
        }
    }

    if (sale == 0)
    {
        printf(""Hold"");
    }
    else
    {
        printf(""Buy @ %.2lf on %d"", prices[buypos], buypos);
        printf(""\nSell @ %.2lf on %d"", prices[sellpos], sellpos);
    }
}",0
mtha724,1695588923,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double sale = 0;
    int buypos = 0;
    int sellpos = 0;

    for (int i = 0; i < length; i++)
    {
        for (int j = i; j < length; j++)
        {
            
            if (prices[j] > prices[i])
            {
                if ((prices[j] - prices[i]) > sale)
                {
                    sale = prices[j] - prices[i];
                    buypos = i;
                    sellpos = j;
                }
            }
        }
    }

    if (sale == 0)
    {
        printf(""Hold"");
    }
    else
    {
        printf(""Buy @ %.2lf on %d"", prices[buypos], buypos);
        printf(""\nSell @ %.2lf on %d"", prices[sellpos], sellpos);
    }
}",0
mtha724,1695595221,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    double sale = 0;
    int buypos = 0;
    int sellpos = 0;
    int step = 999999;

    for (int i = 0; i < length; i++)
    {
        for (int j = i; j < length; j++)
        {
            
            if (prices[j] > prices[i])
            {
                if ((prices[j] - prices[i]) > sale)
                {
                    sale = prices[j] - prices[i];
                    buypos = i;
                    sellpos = j;
                    step = j - i;
                }
                else if ((prices[j] - prices[i]) == sale)
                {
                    if ((j - i) < step)
                    {
                        step = j - i;
                        buypos = i;
                        sellpos = j;
                    }
                }
            }
        }
    }

    if (sale == 0)
    {
        printf(""Hold"");
    }
    else
    {
        printf(""Buy @ %.2lf on %d"", prices[buypos], buypos);
        printf(""\nSell @ %.2lf on %d"", prices[sellpos], sellpos);
    }
}",1
nhar865,1695628394,1,"#include <stdio.h>

void wall_street_bet(const double prices[], int length) {
    int buy = -1;
    int sell = -1;
    double buyAmount = 0;
    double sellAmount = 0;
    double diff = 0;

    for (int i = 1; i < length; i++) {
        for (int j = 0; j < length - i; j++) {
            if (prices[i + j] - prices[i] > diff) {
                diff = prices[i + j] - prices[i];
                buy = i;
                sell = i + j;

                buyAmount = prices[i];
                sellAmount = prices[i + j];
            }
        }
    }

    if (buy == -1) {
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n"", buyAmount, buy);
    printf(""Sell @ %.2lf on %d\n"", sellAmount, sell);
}
",0
nhar865,1695628747,2,"#include <stdio.h>

void wall_street_bet(const double prices[], int length) {
    int buy = -1;
    int sell = -1;
    double buyAmount = 0;
    double sellAmount = 0;
    double diff = 0;

    for (int j = 1; j < length; j++) {
        for (int i = 0; i < length - 1; i++) {
            if (prices[i + j] - prices[i] > diff) {
                diff = prices[i + j] - prices[i];
                buy = i;
                sell = i + j;

                buyAmount = prices[i];
                sellAmount = prices[i + j];
            }
        }
    }

    if (buy == -1) {
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n"", buyAmount, buy);
    printf(""Sell @ %.2lf on %d\n"", sellAmount, sell);
}
",0
nhar865,1695628878,3,"#include <stdio.h>

void wall_street_bet(const double prices[], int length) {
    int buy = -1;
    int sell = -1;
    double buyAmount = 0;
    double sellAmount = 0;
    double diff = 0;

    for (int j = 1; j < length; j++) {
        for (int i = 0; i < length - 1; i++) {
            if (prices[i + j] - prices[i] > diff) {
                diff = prices[i + j] - prices[i];
                buy = i;
                sell = i + j;

                buyAmount = prices[i];
                sellAmount = prices[i + j];
            }
        }
    }

    if (buy == -1) {
        printf(""Hold\n"");
        return;
    }

    printf(""Buy @ %.2lf on %d\n"", buyAmount, buy);
    printf(""Sell @ %.2lf on %d\n"", sellAmount, sell);
}",0
nlal162,1695457148,1,"#include <stdio.h>
void wall_street_bet(double*prices, int length){
    if(length < 2){
        printf(""Hold\n"");
        return;
    }
    
    int maximumProfit = 0.0;
    int boughtDay = 0;
    int soldDay = 0;
    
    for(int i = 0; i < length; i++){
        for(int j += i; j < length; j++){
            double profit = prices[j] - prices[i];
            if(profit > maximumProfit){
                maximumProfit = profit;
                boughtDay = i;
                soldDay = j;
            }
        }
    }
    if(maximumProfit>0.0){
        printf(""Buy @ %.2lf on %d\n"", prices[boughtDay], boughtDay);
        printf(""Sell @ %.2lf on %d\n"", prices[soldDay], soldDay);
        
    }else {
        printf(""Hold\n"");
    }
}
",0
nlal162,1695457260,2,"#include <stdio.h>
void wall_street_bet(double*prices, int length){
    if(length < 2){
        printf(""Hold\n"");
        return;
    }
    
    int maximumProfit = 0.0;
    int boughtDay = 0;
    int soldDay = 0;
    
    for(int i = 0; i < length; i++){
        for(int j = i + 1; j < length; j++){
            double profit = prices[j] - prices[i];
            if(profit > maximumProfit){
                maximumProfit = profit;
                boughtDay = i;
                soldDay = j;
            }
        }
    }
    if(maximumProfit>0.0){
        printf(""Buy @ %.2lf on %d\n"", prices[boughtDay], boughtDay);
        printf(""Sell @ %.2lf on %d\n"", prices[soldDay], soldDay);
        
    }else {
        printf(""Hold\n"");
    }
}
",0
nwei818,1695120164,1,"#include <stdio.h>

void wall_street_bet(double* p, int length) {
	double a = 0.0;
	int buy, sell;

	for (int i = 0; i < length - 1; i++) {
		for (int j = i + 1; j < length; j++) {
			double b = p[j] - p[i];

			if (b > a) {
				a = b;
				buy = i;
				sell = j;
			}
		}
	}

	if (a > 0.0) {
		printf(""Buy @ %.2lf on %d\n"", p[buy], buy);
		printf(""Sell @ %.2lf on %d\n"", p[sell], sell);
	}
	else {
		printf(""Hold\n"");
	}
}
",0
nwei818,1695121004,2,"#include <stdio.h>

void wall_street_bet(double* p, int length) {
	double a = 0.0;
	int buy = 0;
	int sell = 0;

	for (int i = 0; i < length - 1; i++) {
		for (int j = i + 1; j < length; j++) {
			double b = p[j] - p[i];

			if (b > a || (b == a && (j - i) < (sell - buy))) {
				a = b;
				buy = i;
				sell = j;
			}
		}
	}

	if (a > 0.0) {
		printf(""Buy @ %.2lf on %d\n"", p[buy], buy);
		printf(""Sell @ %.2lf on %d\n"", p[sell], sell);
	}
	else {
		printf(""Hold\n"");
	}
}",1
ogan176,1695468510,1,meow,0
ogan176,1695468516,2,meow;,0
ogan176,1695468534,3,meow,0
ogan176,1695468577,4,"int main(void){
    printf(""meow"");
    return 0;
}",0
ogan176,1695468597,5,"#include <stdio.h>

int main(void){
    printf(""meow"");
    return 0;
}",0
ogan176,1695468749,6,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    int minPriceDay = 0;
    double minPrice = prices[0];
    double maxProfit = 0;
    int buyDay = 0, sellDay = 0;

    for (int i = 1; i < length; i++) {
        double profit = prices[i] - minPrice;
        if (profit > maxProfit) {
            maxProfit = profit;
            buyDay = minPriceDay;
            sellDay = i;
        }
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            minPriceDay = i;
        }
    }
    
    if (maxProfit > 0) {
        printf(""Buy @ %.2f on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2f on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}",0
ogan176,1695468801,7,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {



}",0
ogar584,1695332829,1,"#include <stdio.h>
#include <stdlib.h>

void wall_street_bet(double *prices, int length)
{
    int lowest, highest;;
    lowest = 0;
    highest = 1;
    double max_profit = prices[highest] - prices[lowest];

    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > max_profit) {
                lowest = i;
                highest = j;
                max_profit = profit;
            }
        }
    }

    if (max_profit <= 0) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[lowest], lowest);
        printf(""Sell @ %.2lf on %d\n"", prices[highest], highest);
    }
}",0
ogar584,1695333800,2,"/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>

void wall_street_bet(double *prices, int length)
{
    int lowest, highest;;
    lowest = 0;
    highest = 1;
    double maxprofit;
    maxprofit = prices[highest] - prices[lowest];
    int mincrements, increments;
    mincrements = highest - lowest;
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];
            increments = j - i;
            if (profit > maxprofit || (profit == maxprofit && increments < mincrements)){
                lowest = i;
                highest = j;
                maxprofit = profit;
                mincrements = increments;
            }
            
        }
    }
    if (maxprofit <= 0) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[lowest], lowest);
        printf(""Sell @ %.2lf on %d\n"", prices[highest], highest);
    }
}",1
osko432,1695637909,1,"#include <stdio.h>
#define Deez_Nuts
void wall_street_bet(double deez[], int doz){
double dutL=0;
double dutS=100000;
int counterL;
int counterS;
double stupid;
for (int dez1=1; dez1<doz; dez1++){
    for (int dez2=1; dez2<doz; dez2++){
        if ((deez[dez1]-deez[dez2]>stupid)&&(dez1<dez2)){
           stupid=deez[dez1]-deez[dez2];
           dutS=deez[dez1];
           dutL=deez[dez2];
           counterS=dez1;
           counterL=dez2;
        }        
    }
}           
if (stupid>0){
   printf(""Buy @ %.2f on %d\n"",dutS,counterS);
   printf(""Sell @ %.2f on %d"",dutL,counterL);
}
else{ 
   printf(""Hold"");
}
}",0
osko432,1695638120,2,"#include <stdio.h>
#define Deez_Nuts
void wall_street_bet(double deez[], int doz){
double dutL=0;
double dutS=100000;
int counterL;
int counterS;
double stupid;
for (int dez1=0; dez1<doz; dez1++){
    for (int dez2=0; dez2<doz; dez2++){
        if ((deez[dez1]-deez[dez2]>stupid)&&(dez2<dez1)){
           stupid=deez[dez1]-deez[dez2];
           dutS=deez[dez1];
           dutL=deez[dez2];
           counterS=dez1;
           counterL=dez2;
        }        
    }
}           
if (stupid>0){
   printf(""Buy @ %.2f on %d\n"",dutS,counterS);
   printf(""Sell @ %.2f on %d"",dutL,counterL);
}
else{ 
   printf(""Hold"");
}
}",0
pchh683,1695622304,1,"void wall_street_bet(double *prices, int length)
{
    double profit = 0;
    int buy, sell;
    for (int i = 0; i < length; i++) {
        for (int j = i; j < length; j++) 
        {
            if ((prices[j] - prices[i]) > profit)
            {
                buy = i;
                sell = j;
                profit = prices[j] - prices[i];
            }
            else if ((prices[j] - prices[i]) == profit)
            {
                if ((i - j) > (buy - sell))
                {
                buy = i;
                sell = j;
                profit = prices[j] - prices[i];
                }
            }
        }
    }
    if (buy == sell)
    {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Buy @ %.2lf on %d\n"", prices[sell], sell);
    }
}",0
pchh683,1695622446,2,"void wall_street_bet(double *prices, int length)
{
    double profit = 0;
    int buy, sell;
    for (int i = 0; i < length; i++) {
        for (int j = i; j < length; j++) 
        {
            if ((prices[j] - prices[i]) > profit)
            {
                buy = i;
                sell = j;
                profit = prices[j] - prices[i];
            }
            else if ((prices[j] - prices[i]) == profit)
            {
                if ((i - j) > (buy - sell))
                {
                buy = i;
                sell = j;
                profit = prices[j] - prices[i];
                }
            }
        }
    }
    if (buy == sell)
    {
        printf(""Hold"");
    }
    else {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    }
}",1
ppax865,1695617345,1,"#include <stdio.h>
int main(){
    printf(""no"")
}
",0
pshe539,1695368295,1,"void wall_street_bet(double *prices, int length) 
{
    int count = 0;
    double price_difference = 0;
    int posA, posB;
    double buy_time, sell_time;

    for (int i = 0; i < length; i++) {
        for (int j = i; j < length; j++) {

            if (prices[j] < prices[i]) continue;

            if ((prices[j] - prices[i]) > price_difference) {
                price_difference = prices[j] - prices[i];
                posA = i;
                posB = j;
                buy_time = prices[i];
                sell_time = prices[j];
            }
        }
    }

    if (price_difference != 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", buy_time, posA, sell_time, posB);
    } else {
        printf(""Hold"");
    }
}",0
pshe539,1695368321,2,"void wall_street_bet(double *prices, int length) 
{
    double price_difference = 0;
    int posA, posB;
    double buy_time, sell_time;

    for (int i = 0; i < length; i++) {
        for (int j = i; j < length; j++) {

            if (prices[j] < prices[i]) continue;

            if ((prices[j] - prices[i]) > price_difference) {
                price_difference = prices[j] - prices[i];
                posA = i;
                posB = j;
                buy_time = prices[i];
                sell_time = prices[j];
            }
        }
    }

    if (price_difference != 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", buy_time, posA, sell_time, posB);
    } else {
        printf(""Hold"");
    }
}",0
pshe539,1695370281,3,"void wall_street_bet(double *prices, int length) 
{
    double price_difference = 0;
    int posA, posB;
    double buy_price, sell_price;
    int time_difference = length + 1;

    for (int i = 0; i < length; i++) {
        for (int j = i; j < length; j++) {

            if (prices[j] < prices[i]) continue;

            if ((prices[j] - prices[i]) == price_difference) {
                if (((j - i) < time_difference)) {
                    price_difference = prices[j] - prices[i];
                    posA = i;
                    posB = j;
                    buy_price = prices[i];
                    sell_price = prices[j];
                    time_difference = j - i;
                }
            } else if ((prices[j] - prices[i]) > price_difference) {
                price_difference = prices[j] - prices[i];
                posA = i;
                posB = j;
                buy_price = prices[i];
                sell_price = prices[j];
                time_difference = j - i;
            }
        }
    }

    if (price_difference != 0) {
        printf(""Buy @ %.2lf on %d\nSell @ %.2lf on %d"", buy_price, posA, sell_price, posB);
    } else {
        printf(""Hold"");
    }
}",1
pwu278,1695221366,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double Array[], int SizeofArray)
{
	int i;
	int j;
	double BuyValue;
	double SellValue;
	double FinalSellValue = 0;
	double FinalBuyValue = 0;
	double FinalProfit = 0;
	double Profit;
	int FinalSellTime = 0;
	int FinalBuyTime = 0;

	SellValue = Array[0];

	for (i = 0; i < SizeofArray; i++) {
		BuyValue = Array[i];
		for (j = i; j < SizeofArray; j++) {
			SellValue = Array[j];
			Profit = SellValue - BuyValue;
			if (Profit > FinalProfit) {
				FinalProfit = Profit;
				FinalBuyValue = Array[i];
				FinalSellValue = Array[j];
				FinalBuyTime = i;
				FinalSellTime = j;
			}
		}
	}

	if (FinalBuyValue == 0 && FinalBuyTime == 0 && FinalSellValue == 0 && FinalSellTime == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", FinalBuyValue, FinalBuyTime);
		printf(""Sell @ %.2f on %d\n"", FinalSellValue, FinalSellTime);
	}
}",0
pwu278,1695221514,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double Array[], int SizeofArray)
{
	int i;
	int j;
	double BuyValue;
	double SellValue;
	double FinalSellValue = 0;
	double FinalBuyValue = 0;
	double FinalProfit = 0;
	double Profit;
	int FinalSellTime = 0;
	int FinalBuyTime = 0;

	SellValue = Array[0];

	for (i = 0; i < SizeofArray; i++) {
		BuyValue = Array[i];
		for (j = i; j < SizeofArray; j++) {
			SellValue = Array[j];
			Profit = SellValue - BuyValue;
			if (Profit > FinalProfit) {
				FinalProfit = Profit;
				FinalBuyValue = Array[i];
				FinalSellValue = Array[j];
				FinalBuyTime = i;
				FinalSellTime = j;
			}
			if (Profit == FinalProfit) {
				FinalProfit = Profit;
				FinalBuyValue = Array[i];
				FinalSellValue = Array[j];
				FinalBuyTime = i;
				FinalSellTime = j;
			}
		}
	}

	if (FinalBuyValue == 0 && FinalBuyTime == 0 && FinalSellValue == 0 && FinalSellTime == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", FinalBuyValue, FinalBuyTime);
		printf(""Sell @ %.2f on %d\n"", FinalSellValue, FinalSellTime);
	}
}
",0
pwu278,1695221719,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double Array[], int SizeofArray)
{
	int i;
	int j;
	double BuyValue;
	double SellValue;
	double FinalSellValue = 0;
	double FinalBuyValue = 0;
	double FinalProfit = 0;
	double Profit;
	int FinalSellTime = 0;
	int FinalBuyTime = 0;

	SellValue = Array[0];

	for (i = 0; i < SizeofArray; i++) {
		BuyValue = Array[i];
		for (j = i; j < SizeofArray; j++) {
			SellValue = Array[j];
			Profit = SellValue - BuyValue;
			if (Profit > FinalProfit) {
				FinalProfit = Profit;
				FinalBuyValue = Array[i];
				FinalSellValue = Array[j];
				FinalBuyTime = i;
				FinalSellTime = j;
			}
		}
	}",0
pwu278,1695221766,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double Array[], int SizeofArray)
{
	int i;
	int j;
	double BuyValue;
	double SellValue;
	double FinalSellValue = 0;
	double FinalBuyValue = 0;
	double FinalProfit = 0;
	double Profit;
	int FinalSellTime = 0;
	int FinalBuyTime = 0;

	SellValue = Array[0];

	for (i = 0; i < SizeofArray; i++) {
		BuyValue = Array[i];
		for (j = i; j < SizeofArray; j++) {
			SellValue = Array[j];
			Profit = SellValue - BuyValue;
			if (Profit > FinalProfit) {
				FinalProfit = Profit;
				FinalBuyValue = Array[i];
				FinalSellValue = Array[j];
				FinalBuyTime = i;
				FinalSellTime = j;
			}
		}
	}

	if (FinalBuyValue == 0 && FinalBuyTime == 0 && FinalSellValue == 0 && FinalSellTime == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", FinalBuyValue, FinalBuyTime);
		printf(""Sell @ %.2f on %d\n"", FinalSellValue, FinalSellTime);
	}
}",0
pwu278,1695221820,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double Array[], int SizeofArray)
{
	int i;
	int j;
	double BuyValue;
	double SellValue;
	double FinalSellValue = 0;
	double FinalBuyValue = 0;
	double FinalProfit = 0;
	double Profit;
	int FinalSellTime = 0;
	int FinalBuyTime = 0;

	SellValue = Array[0];

	for (i = 0; i < SizeofArray; i++) {
		BuyValue = Array[i];
		for (j = i; j < SizeofArray; j++) {
			SellValue = Array[j];
			Profit = SellValue - BuyValue;
			if (Profit >= FinalProfit) {
				FinalProfit = Profit;
				FinalBuyValue = Array[i];
				FinalSellValue = Array[j];
				FinalBuyTime = i;
				FinalSellTime = j;
			}
		}
	}

	if (FinalBuyValue == 0 && FinalBuyTime == 0 && FinalSellValue == 0 && FinalSellTime == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", FinalBuyValue, FinalBuyTime);
		printf(""Sell @ %.2f on %d\n"", FinalSellValue, FinalSellTime);
	}
}",0
pwu278,1695221861,6,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double Array[], int SizeofArray)
{
	int i;
	int j;
	double BuyValue;
	double SellValue;
	double FinalSellValue = 0;
	double FinalBuyValue = 0;
	double FinalProfit = 0;
	double Profit;
	int FinalSellTime = 0;
	int FinalBuyTime = 0;

	SellValue = Array[0];

	for (i = 0; i < SizeofArray; i++) {
		BuyValue = Array[i];
		for (j = i; j < SizeofArray; j++) {
			SellValue = Array[j];
			Profit = SellValue - BuyValue;
			if (Profit > FinalProfit) {
				FinalProfit = Profit;
				FinalBuyValue = Array[i];
				FinalSellValue = Array[j];
				FinalBuyTime = i;
				FinalSellTime = j;
			}
		}
	}

	if (FinalBuyValue == 0 && FinalBuyTime == 0 && FinalSellValue == 0 && FinalSellTime == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", FinalBuyValue, FinalBuyTime);
		printf(""Sell @ %.2f on %d\n"", FinalSellValue, FinalSellTime);
	}
}",0
pwu278,1695222622,7,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double Array[], int SizeofArray)
{
	int i;
	int j;
	double BuyValue;
	double SellValue;
	double FinalSellValue = 0;
	double FinalBuyValue = 0;
	double FinalProfit = 0;
	double Profit;
	int FinalSellTime = 0;
	int FinalBuyTime = 0;
	int TimeSpan;

	int TiedBuyTime;
	int TiedSellTime;
	int TiedTimeSpan;


	SellValue = Array[0];

	for (i = 0; i < SizeofArray; i++) {
		BuyValue = Array[i];
		for (j = i; j < SizeofArray; j++) {
			SellValue = Array[j];
			Profit = SellValue - BuyValue;
			if (Profit > FinalProfit) {
				FinalProfit = Profit;
				FinalBuyValue = Array[i];
				FinalSellValue = Array[j];
				FinalBuyTime = i;
				FinalSellTime = j;
			}
			if (Profit == FinalProfit) {
				TiedBuyTime = i;
				TiedSellTime = j;

				TimeSpan = FinalSellTime - FinalBuyTime;
				TiedTimeSpan = TiedSellTime - TiedBuyTime;
				if (TiedTimeSpan < TimeSpan) {
					FinalBuyTime = TiedBuyTime;
					FinalSellTime = TiedSellTime;
				}
			}
		}
	}

	if (FinalBuyValue == 0 && FinalBuyTime == 0 && FinalSellValue == 0 && FinalSellTime == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %d\n"", FinalBuyValue, FinalBuyTime);
		printf(""Sell @ %.2f on %d\n"", FinalSellValue, FinalSellTime);
	}
}",1
pyou182,1695623709,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length) 
{
    // Finding the best day to buy stocks
    double smallestSoFar = prices[0];
    int i;
    int DayToBuy = 0;

    for (i = 1; i < length; i++) {
        //Identify the cheapest stock price and store it
        if (prices[i] < smallestSoFar) {
            smallestSoFar = prices[i]; 
            DayToBuy = i;
        }
    }

    //Finding the best day to sell
    double largestSoFar =  prices[DayToBuy];
    int DayToSell = 0;
    
    for (i = DayToBuy + 1; i < length; i++) {
        if (prices[i] > largestSoFar) {
            largestSoFar = prices[i];
            DayToSell = i;
        }
    }
// Processing the data collected 

//If there is only 1 buy and 1 sell date
if (smallestSoFar < largestSoFar) {
    printf(""Buy @ %.2f on %d\n"", smallestSoFar, DayToBuy);
    printf(""Sell @ %.2f on %d\n"", largestSoFar, DayToSell);
}
  
if (smallestSoFar >= largestSoFar) {
    printf(""Hold\n"");
}
 
return 0;
}",0
pyou182,1695623722,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length) 
{
    // Finding the best day to buy stocks
    double smallestSoFar = prices[0];
    int i;
    int DayToBuy = 0;

    for (i = 1; i < length; i++) {
        //Identify the cheapest stock price and store it
        if (prices[i] < smallestSoFar) {
            smallestSoFar = prices[i]; 
            DayToBuy = i;
        }
    }

    //Finding the best day to sell
    double largestSoFar =  prices[DayToBuy];
    int DayToSell = 0;
    
    for (i = DayToBuy + 1; i < length; i++) {
        if (prices[i] > largestSoFar) {
            largestSoFar = prices[i];
            DayToSell = i;
        }
    }
// Processing the data collected 

//If there is only 1 buy and 1 sell date
if (smallestSoFar < largestSoFar) {
    printf(""Buy @ %.2f on %d\n"", smallestSoFar, DayToBuy);
    printf(""Sell @ %.2f on %d\n"", largestSoFar, DayToSell);
}
  
if (smallestSoFar >= largestSoFar) {
    printf(""Hold\n"");
}
 

}",0
qkan386,1695346878,1,"void wall_street_bet(double* prices, int length)
{
	int BuyDay = 0;
	int SellDay = 0;
	float min = prices[1];
	float max = 0.0;

	for (int i = 0; i < length; i++) {
		if (prices[i] < min) {
			min = prices[i];
			BuyDay = i+1;
		}
	}

	if (BuyDay == length) {
		printf(""Hold"");
	}

	if (BuyDay < length) {
		for (int j = BuyDay; j < length; j++) {
			if (prices[j] > max) {
				max = prices[j];
				SellDay = j+1;
			}
		}
		printf(""Buy @ %.2f on %i\nSell @ %.2f on %i"", min, BuyDay, max, SellDay);
	}
}",0
qkan386,1695347085,2,"void wall_street_bet(double* prices, int length)
{
	int BuyDay = 0;
	int SellDay = 0;
	float min = prices[1];
	float max = 0.0;

	for (int i = 0; i < length; i++) {
		if (prices[i] < min) {
			min = prices[i];
			BuyDay = i;
		}
	}

	if (BuyDay == length-1) {
		printf(""Hold"");
	}

	if (BuyDay < length) {
		for (int j = BuyDay; j < length; j++) {
			if (prices[j] > max) {
				max = prices[j];
				SellDay = j;
			}
		}
		printf(""Buy @ %.2f on %i\nSell @ %.2f on %i"", min, BuyDay, max, SellDay);
	}
}",0
qkan386,1695372917,3,"void wall_street_bet(double* prices, int length)
{
	int BuyDay;
	int SellDay;
	float low;
	float high;
	float earning;
	float max_earning = 0;
	int Duration;
	int j = 0;

for (int i = 0; i <= length; i++) {
	j = j + 1;
	earning = prices[j] - prices[i];
	if (earning > max_earning) {
		max_earning = earning;
		low = prices[i];
		high = prices[j];
		BuyDay = i;
		SellDay = j;
	}
	if (earning = max_earning) {
		Duration = j - i;
		if (Duration < SellDay - BuyDay) {
			low = prices[j];
			high = prices[j];
			BuyDay = i;
			SellDay = j;
		}
		else {
			low = low;
			high = high;
			BuyDay = BuyDay;
			SellDay = SellDay;
		}					
	}
		
}

	if (max_earning == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %i\nSell @ %.2f on %i"", low, BuyDay, high, SellDay);
	}
}",0
qkan386,1695373088,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double* prices, int length)
{
	int BuyDay;
	int SellDay;
	float low;
	float high;
	float earning;
	float max_earning = 0;
	int Duration;
	int j = 0;

for (int i = 0; i <= length; i++) {
	j = j + 1;
	earning = prices[j] - prices[i];
	if (earning > max_earning) {
		max_earning = earning;
		low = prices[i];
		high = prices[j];
		BuyDay = i;
		SellDay = j;
	}
	if (earning = max_earning) {
		Duration = j - i;
		if (Duration < SellDay - BuyDay) {
			low = prices[j];
			high = prices[j];
			BuyDay = i;
			SellDay = j;
		}
		else {
			low = low;
			high = high;
			BuyDay = BuyDay;
			SellDay = SellDay;
		}					
	}
		
}

	if (max_earning == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %i\nSell @ %.2f on %i"", low, BuyDay, high, SellDay);
	}
}",0
qkan386,1695373271,5,"void wall_street_bet(double* prices, int length)
{
	int BuyDay;
	int SellDay;
	float low;
	float high;
	float earning;
	float max_earning = 0;
	int Duration;
	int j = 0;

    for (int i = 0; i <= length; i++) {
	    j = j + 1;
	    earning = prices[j] - prices[i];
	    if (earning > max_earning) {
		    max_earning = earning;
		    low = prices[i];
		    high = prices[j];
		    BuyDay = i;
		    SellDay = j;
	    }
	    if (earning = max_earning) {
		    Duration = j - i;
		    if (Duration < SellDay - BuyDay) {
			    low = prices[j];
			    high = prices[j];
			    BuyDay = i;
			    SellDay = j;
		    }
		    else {
			    low = low;
			    high = high;
			    BuyDay = BuyDay;
			    SellDay = SellDay;
	    	}					
	    }
		
    }

	if (max_earning == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2f on %i\nSell @ %.2f on %i"", low, BuyDay, high, SellDay);
	}
}",0
qmcc945,1695104153,1,"void wall_street_bet(double prices[], int length)
{
	int i, j, lowestDay, highestDay;
	double lowest, highest, profits, master;
	lowest = 2147483647;
	highest = 0;
	highestDay = 0;
	lowestDay = 0;


	//Iterations to determine the maximum profits
	master = 0;
	for(i=0; i<length; i++) {
		for(j=0; j<length; j++) {
			if(j>i) {
				profits = prices[j] - prices[i];
			}
			if (profits > master){
				master = profits;
				highest = prices[j];
				lowest = prices[i];
				highestDay = j;
				lowestDay = i;
			}
			
		}

	}
	
	if (master == 0){
		printf(""Hold"");
		return;
	}
	
	printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", lowest, lowestDay, highest, highestDay);
	
}",0
qmcc945,1695107666,2,"void wall_street_bet(double prices[], int length)
{
	int i, j, lowestDay, highestDay;
	double lowest, highest, profits, master;
	lowest = 2147483647;
	highest = 0;
	highestDay = 0;
	lowestDay = 0;


	//Iterations to determine the maximum profits
	master = 0;
	profits = 0;
	for(i=0; i<length; i++) {
		for(j=0; j<length; j++) {
			if(j>i) {
				profits = prices[j] - prices[i];
			}
			if (profits > master){
				master = profits;
				highest = prices[j];
				lowest = prices[i];
				highestDay = j;
				lowestDay = i;
			}
			
		}

	}
	
	if (master == 0){
		printf(""Hold"");
		return;
	}
	
	printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", lowest, lowestDay, highest, highestDay);
	
}",0
qmcc945,1695163126,3,"void wall_street_bet(double prices[], int length)
{
	int i, j, lowestDay, highestDay;
	double lowest, highest, profits, master;
	lowest = 2147483647;
	highest = 0;
	highestDay = 0;
	lowestDay = 0;


	//Iterations to determine the maximum profits
	master = 0;
	profits = 0;
	for(i=0; i<length; i++) {
		for(j=0; j<length; j++) {
			if(j>i) {
				profits = prices[j] - prices[i];
				if (profits > master){
					master = profits;
					highest = prices[j];
					lowest = prices[i];
					highestDay = j;
					lowestDay = i;
					} else if (profits == master && profits != 0){
					if ((highestDay - lowestDay) > (j - i)){
					master = profits;
					highest = prices[j];
					lowest = prices[i];
					highestDay = j;
					lowestDay = i;
					}
				}
			
			}
		}
	}
	
	if (master == 0){
		printf(""Hold"");
		return;
	}
	
	printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", lowest, lowestDay, highest, highestDay);
	
}",1
qtra338,1695096245,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length);

int main() {

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    return 0;
}

void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding, new_buy_index, new_sell_index, new_days_holding ;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) > new_profit) {
                new_profit = prices[i] - prices[j];
                new_buy_index = j;
                new_buy_price = prices[j];
                new_sell_index = i;
                new_sell_price = prices[i];
                new_days_holding = new_sell_index - new_buy_index;
            }
        }  
        

        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
        }
    }

    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695096267,2,"#include <stdio.h>

void wall_street_bet(double prices[], int length);

void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding, new_buy_index, new_sell_index, new_days_holding ;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) > new_profit) {
                new_profit = prices[i] - prices[j];
                new_buy_index = j;
                new_buy_price = prices[j];
                new_sell_index = i;
                new_sell_price = prices[i];
                new_days_holding = new_sell_index - new_buy_index;
            }
        }  
        

        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
        }
    }

    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695096339,3,"#include <stdio.h>

void wall_street_bet(double prices[], int length);

void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding = 0, new_buy_index, new_sell_index, new_days_holding ;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) > new_profit) {
                new_profit = prices[i] - prices[j];
                new_buy_index = j;
                new_buy_price = prices[j];
                new_sell_index = i;
                new_sell_price = prices[i];
                new_days_holding = new_sell_index - new_buy_index;
            }
        }  
        

        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
        }
    }

    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695098022,4,"#include <stdio.h>

void wall_street_bet(double prices[], int length);

int main() {

    double pricesF[10] = { 19.00, 19.00, 18.80, 18.85, 18.90, 19.00, 18.95, 18.85, 18.80, 19.00 };
    wall_street_bet(pricesF, 10);

    return 0;
}

void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding = 0, new_buy_index, new_sell_index, new_days_holding, new_new_days_holding;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        new_profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) >= new_profit) {
            
                new_new_days_holding = i - j;
                
                if ((prices[i] - prices[j]) > new_profit) {
                    new_profit = prices[i] - prices[j];
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                    new_days_holding = new_new_days_holding;
                }
                else if (new_new_days_holding < new_days_holding) {
                    new_days_holding = new_new_days_holding;
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                }
            }
        }  

      
        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
    }



    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695098039,5,"#include <stdio.h>

void wall_street_bet(double prices[], int length);

void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding = 0, new_buy_index, new_sell_index, new_days_holding, new_new_days_holding;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        new_profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) >= new_profit) {
            
                new_new_days_holding = i - j;
                
                if ((prices[i] - prices[j]) > new_profit) {
                    new_profit = prices[i] - prices[j];
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                    new_days_holding = new_new_days_holding;
                }
                else if (new_new_days_holding < new_days_holding) {
                    new_days_holding = new_new_days_holding;
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                }
            }
        }  

      
        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
    }



    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695098159,6,"#include <stdio.h>

void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding = 0, new_buy_index, new_sell_index, new_days_holding, new_new_days_holding;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        new_profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) >= new_profit) {
            
                new_new_days_holding = i - j;
                //printf(""new_new_days_holding: %d\n"",new_new_days_holding);

                if ((prices[i] - prices[j]) > new_profit) {
                    new_profit = prices[i] - prices[j];
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                    new_days_holding = new_new_days_holding;
                }
                else if (new_new_days_holding < new_days_holding) {
                    new_days_holding = new_new_days_holding;
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                }
            }
        }  

        //printf(""%f %f\n"",new_profit,profit);
        //printf(""%d %d\n"",new_days_holding, days_holding);

        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
    }



    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695098371,7,"#include <stdio.h>

void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding = 0, new_buy_index, new_sell_index, new_days_holding, new_new_days_holding;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        new_profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) >= new_profit) {
            
                new_new_days_holding = i - j;
                //printf(""new_new_days_holding: %d\n"",new_new_days_holding);

                if ((prices[i] - prices[j]) > new_profit) {
                    new_profit = prices[i] - prices[j];
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                    new_days_holding = new_new_days_holding;
                }
                else if (new_new_days_holding < new_days_holding) {
                    new_days_holding = new_new_days_holding;
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                }
            }
        }  

        //printf(""%f %f\n"",new_profit,profit);
        //printf(""%d %d\n"",new_days_holding, days_holding);

        if ((new_profit == profit) && (new_days_holding < days_holding)) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
    }



    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695099326,8,"#include <stdio.h>

void wall_street_bet(double prices[], int length);

void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding = 0, new_buy_index, new_sell_index, new_days_holding, new_new_days_holding;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        new_profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) >= new_profit) {
            
                new_new_days_holding = i - j;
                //printf(""new_new_days_holding: %d\n"",new_new_days_holding);

                if ((prices[i] - prices[j]) > new_profit) {
                    new_profit = prices[i] - prices[j];
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                    new_days_holding = new_new_days_holding;
                }
                else if (new_new_days_holding < new_days_holding) {
                    new_days_holding = new_new_days_holding;
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                }
            }
        }  

        //printf(""%f %f\n"",new_profit,profit);
        //printf(""%d %d\n"",new_days_holding, days_holding);

        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
    }



    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695099333,9,"#include <stdio.h>



void wall_street_bet(double prices[], int length) {
    int i, j, buy_index, sell_index, days_holding = 0, new_buy_index, new_sell_index, new_days_holding, new_new_days_holding;
    double sell_price, buy_price, profit, new_profit, new_buy_price, new_sell_price;


    for (i = 0; i < length; i++) {
        new_profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) >= new_profit) {
            
                new_new_days_holding = i - j;
                //printf(""new_new_days_holding: %d\n"",new_new_days_holding);

                if ((prices[i] - prices[j]) > new_profit) {
                    new_profit = prices[i] - prices[j];
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                    new_days_holding = new_new_days_holding;
                }
                else if (new_new_days_holding < new_days_holding) {
                    new_days_holding = new_new_days_holding;
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                }
            }
        }  

        //printf(""%f %f\n"",new_profit,profit);
        //printf(""%d %d\n"",new_days_holding, days_holding);

        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
    }



    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",0
qtra338,1695175591,10,"#include <stdio.h>


void wall_street_bet(double prices[], int length) {
    int i, j, buy_index = 0, sell_index = 0, days_holding = 0, new_buy_index = 0, new_sell_index = 0, new_days_holding = 0, new_new_days_holding = 0;
    double sell_price = 0, buy_price = 0, profit = 0, new_profit = 0, new_buy_price = 0, new_sell_price = 0;


    for (i = 0; i < length; i++) {
        new_profit = 0;
        for (j = 0; j < i; j++) {
            if ((prices[i] - prices[j]) >= new_profit) {
            
                new_new_days_holding = i - j;
                //printf(""new_new_days_holding: %d\n"",new_new_days_holding);

                if ((prices[i] - prices[j]) > new_profit) {
                    new_profit = prices[i] - prices[j];
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                    new_days_holding = new_new_days_holding;
                }
                else if (new_new_days_holding < new_days_holding) {
                    new_days_holding = new_new_days_holding;
                    new_buy_index = j;
                    new_buy_price = prices[j];
                    new_sell_index = i;
                    new_sell_price = prices[i];
                }
            }
        }  

        //printf(""%f %f\n"",new_profit,profit);
        //printf(""%d %d\n"",new_days_holding, days_holding);

        if (new_profit == profit && new_days_holding < days_holding) {

            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
        else if (new_profit > profit) {

            profit = new_profit;
            buy_index = new_buy_index;
            buy_price = new_buy_price;
            sell_index = new_sell_index;
            sell_price = new_sell_price;
            days_holding = new_days_holding;
        }
    }



    if (profit > 0) {
        printf(""Buy @ %.2f on %d\n"", buy_price, buy_index);
        printf(""Sell @ %.2f on %d\n"",sell_price, sell_index);
    }
    else {
        printf(""Hold\n"");
    }
   
}",1
rbus291,1695189504,1,m,0
rchi339,1695301775,1,void,0
rger104,1695274952,1,"void wall_street_bet(double* prices, int length)
{
	double lowest = 100;
	int lowestpos;
	double difference = 0;
	int distance = 100;
	int i;
	int j;

	// for each entre in the array
	for (i = 0; i < length; i++) {
		// for each other value in the array
		if (i != length - 1) {
			for (j = i + 1; j < length; j++) {
				if((prices[j] - prices[i]) > difference){
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i];
					lowestpos = i;
				} else if ((prices[j] - prices[i]) == difference & (j - i) < distance) {
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i] ;
					lowestpos = i;
				} else if ( (prices[j] - prices[i]) == difference & (j - i) == distance & lowest > prices[i]) {
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i] ;
					lowestpos = i;
				}


			}
		}
	}
	if (difference == 0) {
		printf(""\nHold"");
	}
	else {
		printf(""\nBuy @ %.2lf on %i"", lowest,lowestpos);
		printf(""\nSell @ %.2lf on %i "", lowest + difference, lowestpos+distance);
	}



}",0
rger104,1695275108,2,"void wall_street_bet(double* prices, int length)
{
	double lowest = 100;
	int lowestpos;
	double difference = 0;
	int distance = 100;
	int i;
	int j;

	// for each entre in the array
	for (i = 0; i < length; i++) {
		// for each other value in the array
		if (i != length - 1) {
			for (j = i + 1; j < length; j++) {
				if((prices[j] - prices[i]) > difference){
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i];
					lowestpos = i;
				} else if ( ( (prices[j] - prices[i]) == difference ) & ( (j - i) < distance) ) {
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i] ;
					lowestpos = i;
				} else if ( ( (prices[j] - prices[i]) == difference ) & ( (j - i) == distance ) & ( lowest > prices[i]) ) {
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i] ;
					lowestpos = i;
				}


			}
		}
	}
	if (difference == 0) {
		printf(""\nHold"");
	}
	else {
		printf(""\nBuy @ %.2lf on %i"", lowest,lowestpos);
		printf(""\nSell @ %.2lf on %i "", lowest + difference, lowestpos+distance);
	}



}",0
rger104,1695275140,3,"void wall_street_bet(double* prices, int length)
{
	double lowest = 100;
	int lowestpos;
	double difference = 0;
	int distance = 100;
	int i;
	int j;

	// for each entre in the array
	for (i = 0; i < length; i++) {
		// for each other value in the array
		if (i != length - 1) {
			for (j = i + 1; j < length; j++) {
				if((prices[j] - prices[i]) > difference){
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i];
					lowestpos = i;
				} else if ( ( (prices[j] - prices[i]) == difference ) & ( (j - i) < distance) ) {
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i] ;
					lowestpos = i;
				} else if ( ( (prices[j] - prices[i]) == difference ) & ( (j - i) == distance ) & ( lowest > prices[i]) ) {
					difference = prices[j] - prices[i];
					distance = j - i;
					lowest = prices[i] ;
					lowestpos = i;
				}


			}
		}
	}
	if (difference == 0) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %.2lf on %i"", lowest,lowestpos);
		printf(""\nSell @ %.2lf on %i "", lowest + difference, lowestpos+distance);
	}



}",1
rkar406,1695191622,1,"void wall_street_bet(double *prices, int length){
    double max = prices[0];
    double min = prices[0];
    
    for (int i = 0; i<length; i++){
        if (prices[i]>max){
            max = prices[i];
            int maxpos = i;
        }
    }
    
    for (int i = 0; i<maxpos; i++){
        if (prices[i]<=min){
            min = prices[i];
            int minpos = i;
        }
    }
    
    printf(""Buy @ %f on %d"",max,maxpos);
    printf(""Sell @ %f on %d"",min,minpos);
    
}",0
rkar406,1695191652,2,"void wall_street_bet(double *prices, int length){
    double max = prices[0];
    double min = prices[0];
    int maxpos;
    int minpos;
    
    for (int i = 0; i<length; i++){
        if (prices[i]>max){
            max = prices[i];
            int maxpos = i;
        }
    }
    
    for (int i = 0; i<maxpos; i++){
        if (prices[i]<=min){
            min = prices[i];
            int minpos = i;
        }
    }
    
    printf(""Buy @ %f on %d"",max,maxpos);
    printf(""Sell @ %f on %d"",min,minpos);
    
}",0
rkar406,1695191887,3,"vvoid wall_street_bet(double *prices, int length) {
    double max = prices[0];
    double min = prices[0];
    int maxpos = 0; 
    int minpos = 0;

    for (int i = 0; i < length; i++) {
        if (prices[i] > max) {
            max = prices[i];
            maxpos = i;
        }
    }

    for (int i = 0; i < maxpos; i++) {
        if (prices[i] <= min) {
            min = prices[i];
            minpos = i;
        }
    }

    printf(""Buy @ %f on %d\n"", max, maxpos+1);
    printf(""Sell @ %f on %d\n"", min, minpos+1);
}",0
rkar406,1695191901,4,"void wall_street_bet(double *prices, int length) {
    double max = prices[0];
    double min = prices[0];
    int maxpos = 0; 
    int minpos = 0;

    for (int i = 0; i < length; i++) {
        if (prices[i] > max) {
            max = prices[i];
            maxpos = i;
        }
    }

    for (int i = 0; i < maxpos; i++) {
        if (prices[i] <= min) {
            min = prices[i];
            minpos = i;
        }
    }

    printf(""Buy @ %f on %d\n"", max, maxpos+1);
    printf(""Sell @ %f on %d\n"", min, minpos+1);
}",0
rkar406,1695204809,5,"void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int maxpos = 0; 
    int minpos = 0;

    for (int i = 0; i < length; i++) {
        if (prices[i] <= min) {
            min = prices[i];
            minpos = i;
        }
    }
    
    
    for (int i = minpos; i < length; i++) {
        if (prices[i] > max) {
            max = prices[i];
            maxpos = i;
        }
    }

    if (min==max){
        printf(""Hold\n"");    
    }
    else{
        printf(""Buy @ %f on %d\n"", max, maxpos+1);
        printf(""Sell @ %f on %d\n"", min, minpos+1);
        
    }
}",0
rkar406,1695204830,6,"void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int maxpos = 0; 
    int minpos = 0;

    for (int i = 0; i < length; i++) {
        if (prices[i] <= min) {
            min = prices[i];
            minpos = i;
        }
    }
    
    
    for (int i = minpos; i < length; i++) {
        if (prices[i] > max) {
            double max = prices[i];
            maxpos = i;
        }
    }

    if (min==max){
        printf(""Hold\n"");    
    }
    else{
        printf(""Buy @ %f on %d\n"", max, maxpos+1);
        printf(""Sell @ %f on %d\n"", min, minpos+1);
        
    }
}",0
rkar406,1695204893,7,"void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int maxpos = 0; 
    int minpos = 0;

    for (int i = 0; i < length; i++) {
        if (prices[i] <= min) {
            min = prices[i];
            minpos = i;
        }
    }
    
    double max = min;
    for (int i = minpos; i < length; i++) {
        if (prices[i] > max) {
            double max = prices[i];
            maxpos = i;
        }
    }

    if (min==max){
        printf(""Hold\n"");    
    }
    else{
        printf(""Buy @ %f on %d\n"", max, maxpos+1);
        printf(""Sell @ %f on %d\n"", min, minpos+1);
        
    }
}",0
rkar406,1695204971,8,"void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int maxpos = 0; 
    int minpos = 0;

    for (int i = 0; i < length; i++) {
        if (prices[i] <= min) {
            min = prices[i];
            minpos = i;
        }
    }
    
    double max = min;
    for (int i = minpos; i < length; i++) {
        if (prices[i] > max) {
            max = prices[i];
            maxpos = i;
        }
    }

    if (min==max){
        printf(""Hold\n"");    
    }
    else{
        printf(""Buy @ %f on %d\n"", max, maxpos+1);
        printf(""Sell @ %f on %d\n"", min, minpos+1);
        
    }
}",0
rkar406,1695205023,9,"void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int maxpos = 0; 
    int minpos = 0;

    for (int i = 0; i < length; i++) {
        if (prices[i] <= min) {
            min = prices[i];
            minpos = i;
        }
    }
    
    double max = min;
    for (int i = minpos; i < length; i++) {
        if (prices[i] > max) {
            max = prices[i];
            maxpos = i;
        }
    }

    if (min==max){
        printf(""Hold\n"");    
    }
    else{
        printf(""Buy @ %.2f on %d\n"", min, minpos+1);
        printf(""Sell @ %.2f on %d\n"", max, maxpos+1);
        
    }
}",0
rkar406,1695205105,10,"void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int maxpos = 0; 
    int minpos = 0;

    for (int i = 0; i < length; i++) {
        if (prices[i] <= min) {
            min = prices[i];
            minpos = i;
        }
    }
    
    double max = min;
    for (int i = minpos; i < length; i++) {
        if (prices[i] > max) {
            max = prices[i];
            maxpos = i;
        }
    }

    if (min==max){
        printf(""Hold\n"");    
    }
    else{
        printf(""Buy @ %.2f on %d\n"", min, minpos);
        printf(""Sell @ %.2f on %d\n"", max, maxpos);
        
    }
}",0
rkar406,1695205994,11,"oid wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int minpos = 0; 
    int maxpos = 0; 

    for (int i = 0; i < length; i++) {
        if (prices[i] < min) {
            min = prices[i];
            minpos = i;        
        }
            
        else if (prices[i] - min > prices[maxpos] - prices[minpos]) {
            maxpos = i;
            max = prices[i];
        }
    }

    if (minpos < maxpos) {
        printf(""Buy @ %.2f on %d\n"", prices[minpos], min);
        printf(""Sell @ %.2f on %d\n"", prices[maxpos], max);
    }
    else {
        printf(""Hold\n"");
    }
}",0
rkar406,1695206017,12,"oid wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int minpos = 0; 
    int maxpos = 0; 

    for (int i = 0; i < length; i++) {
        if (prices[i] < min) {
            min = prices[i];
            minpos = i;        
        }
            
        else if (prices[i] - min > prices[maxpos] - prices[minpos]) {
            maxpos = i;
            double max = prices[i];
        }
    }

    if (minpos < maxpos) {
        printf(""Buy @ %.2f on %d\n"", prices[minpos], min);
        printf(""Sell @ %.2f on %d\n"", prices[maxpos], max);
    }
    else {
        printf(""Hold\n"");
    }
}",0
rkar406,1695206056,13,"oid wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int minpos = 0; 
    int maxpos = 0; 

    for (int i = 0; i < length; i++) {
        if (prices[i] < min) {
            min = prices[i];
            minpos = i;        
        }
            
        else if (prices[i] - min > prices[maxpos] - prices[minpos]) {
            maxpos = i;
            double max = prices[i];
        }
    }

    if (minpos < maxpos) {
        printf(""Buy @ %.2f on %d\n"", min, minpos);
        printf(""Sell @ %.2f on %d\n"", max, maxpos);
    }
    else {
        printf(""Hold\n"");
    }
}",0
rkar406,1695206089,14,"oid wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int minpos = 0; 
    int maxpos = 0; 
    double max;

    for (int i = 0; i < length; i++) {
        if (prices[i] < min) {
            min = prices[i];
            minpos = i;        
        }
            
        else if (prices[i] - min > prices[maxpos] - prices[minpos]) {
            maxpos = i;
            double max = prices[i];
        }
    }

    if (minpos < maxpos) {
        printf(""Buy @ %.2f on %d\n"", min, minpos);
        printf(""Sell @ %.2f on %d\n"", max, maxpos);
    }
    else {
        printf(""Hold\n"");
    }
}",0
rkar406,1695206100,15,"void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int minpos = 0; 
    int maxpos = 0; 
    double max;

    for (int i = 0; i < length; i++) {
        if (prices[i] < min) {
            min = prices[i];
            minpos = i;        
        }
            
        else if (prices[i] - min > prices[maxpos] - prices[minpos]) {
            maxpos = i;
            double max = prices[i];
        }
    }

    if (minpos < maxpos) {
        printf(""Buy @ %.2f on %d\n"", min, minpos);
        printf(""Sell @ %.2f on %d\n"", max, maxpos);
    }
    else {
        printf(""Hold\n"");
    }
}",0
rkar406,1695206135,16,"void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int minpos = 0; 
    int maxpos = 0; 
    double max;

    for (int i = 0; i < length; i++) {
        if (prices[i] < min) {
            min = prices[i];
            minpos = i;        
        }
            
        else if (prices[i] - min > prices[maxpos] - prices[minpos]) {
            maxpos = i;
            max = prices[i];
        }
    }

    if (minpos < maxpos) {
        printf(""Buy @ %.2f on %d\n"", min, minpos);
        printf(""Sell @ %.2f on %d\n"", max, maxpos);
    }
    else {
        printf(""Hold\n"");
    }
}",0
rkar406,1695206228,17,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    double min = prices[0];
    int minpos = 0;
    int maxpos = 0;
    double max = min;

    for (int i = 0; i < length; i++) {
        if (prices[i] < min) {
            min = prices[i];
            minpos = i;
        } else if (prices[i] - min > prices[maxpos] - prices[minpos]) {
            maxpos = i;
            max = prices[i];
        }
    }

    if (minpos < maxpos) {
        printf(""Buy @ %.2f on %d\n"", min, minpos);
        printf(""Sell @ %.2f on %d\n"", max, maxpos);
    } else {
        printf(""Hold\n"");
    }
}
",0
rnga701,1695282461,1,"printf(""yea"")",0
rnga701,1695282476,2,printf('yea'),0
rpar376,1695608753,1,"#include <stdio.h>

void wall_street_bet(double prices[], int stocknum)
{
	double diffs[2];
	int buyday;
	int sellday;
	int hold = 0;
	diffs[0] = 0;
	for (int i = 0; i < stocknum; i++) {
		for (int j = 0; j < stocknum; j++) {
			diffs[1] = prices[i] - prices[j];
			if (diffs[1] < diffs[0] && diffs[1] < 0 && i < j) {
				buyday = i;
				sellday = j;
				diffs[0] = diffs[1];
				hold = 0;
			}
			else if (diffs[1] > 0) {
				hold = 1;
			}
		}
	}
	if (hold = 1) {
		printf(""Hold"");
	}
	else {
		printf(""Buy @ %f on %d\n"", prices[buyday], buyday);
		printf(""Sell @ %f on %d\n"", prices[sellday], sellday);
	}
}",0
rraj313,1695218024,1,"void wall_street_bet(double* prices, int length)
{

	int i;
	int j;
	int BuyDay = 0;
	int SellDay = 0;
	int HoldTime = 0;
	double profit = 0;
	double difference;
	for (i = 0; i < length; i++) {
		for (j = (i + 1); j < length; j++) {
			difference = prices[j] - prices[i];
			if (difference > profit) {
				profit = difference;
				HoldTime = j - i;
				BuyDay = i;
				SellDay = j;
			}
			else if ((difference == profit) && (HoldTime > (j - i))) {
				profit = difference;
				HoldTime = j - i;
				BuyDay = i;
				SellDay = j;
			}

		}

	}
	if (HoldTime == 0) {
		printf(""Hold"");
	}
	else if (HoldTime > 0) {
		printf(""Buy @ %f on %d\nSell @ %f on %d\n"", prices[BuyDay], BuyDay, prices[SellDay], SellDay);
	}
}",0
rraj313,1695218087,2,"void wall_street_bet(double* prices, int length)
{

	int i;
	int j;
	int BuyDay = 0;
	int SellDay = 0;
	int HoldTime = 0;
	double profit = 0;
	double difference;
	for (i = 0; i < length; i++) {
		for (j = (i + 1); j < length; j++) {
			difference = prices[j] - prices[i];
			if (difference > profit) {
				profit = difference;
				HoldTime = j - i;
				BuyDay = i;
				SellDay = j;
			}
			else if ((difference == profit) && (HoldTime > (j - i))) {
				profit = difference;
				HoldTime = j - i;
				BuyDay = i;
				SellDay = j;
			}

		}

	}
	if (HoldTime == 0) {
		printf(""Hold"");
	}
	else if (HoldTime > 0) {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[BuyDay], BuyDay, prices[SellDay], SellDay);
	}
}",1
rsmi948,1695367163,1,"void wall_street_bet(double prices[], int length)
{
    double difference[length];
    int count_array[length];
    int i;
    double old_pt = prices[1];
    double old_comparison = prices[1];
    int count = 0;
    int index_count = 0;
    double diff = 0;
    double max_diff = 0;
    int ending_index = 0;
    int starting_index = 0;

    // check prices, and add difference and index of sequential increase patterns to new arrays
    for (i = 0; i < length; i++){
        if (old_comparison < prices[i]){
            diff = prices[i] - old_pt;
            count++;
            old_comparison = prices[i];
            // printf(""%f  %d ||"", diff, count);
        } else{
            if (diff > max_diff){
                max_diff = diff;
                ending_index = i - 1;
                starting_index = i - 1 - count;
            }
            difference[index_count] = diff;
            count_array[index_count] = count;
            count = 0;
            old_pt = prices[i];
            old_comparison = prices[i];
            index_count++;
        }
    }

    for (i = 0; i < index_count; i++){
        if (difference[i] == max_diff && starting_index < ending_index && ending_index != 0){
            printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
            break;
        } else if (i == index_count - 1){
            printf(""Hold"");
        }

    }
}",0
rsmi948,1695367342,2,"void wall_street_bet(double prices[], int length)
{
    double difference[length];
    int i;
    double old_pt = prices[1];
    double old_comparison = prices[1];
    int count = 0;
    int index_count = 0;
    double diff = 0;
    double max_diff = 0;
    int ending_index = 0;
    int starting_index = 0;

    // check prices, and add difference and index of sequential increase patterns to new arrays
    for (i = 0; i < length; i++){
        if (old_comparison < prices[i]){
            diff = prices[i] - old_pt;
            count++;
            old_comparison = prices[i];
            // printf(""%f  %d ||"", diff, count);
        } else{
            if (diff > max_diff){
                max_diff = diff;
                ending_index = i - 1;
                starting_index = i - 1 - count;
            }
            difference[index_count] = diff;
            count = 0;
            old_pt = prices[i];
            old_comparison = prices[i];
            index_count++;
        }
    }

    for (i = 0; i < index_count; i++){
        if (difference[i] == max_diff && starting_index < ending_index && ending_index != 0){
            printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
            break;
        } else if (i == index_count - 1){
            printf(""Hold"");
        }

    }
}",0
rsmi948,1695369576,3,"void wall_street_bet(double prices[], int length)
{
    int i;
    double old_pt = prices[1];
    double old_comparison = prices[1];
    int count = 0;
    int index_count = 0;
    double diff = 0;
    double max_diff = 0;
    int ending_index = 0;
    int starting_index = 0;
    int count_prev = 0;

    // check prices, and add difference and index of sequential increase patterns to new arrays
    for (i = 0; i <= length; i++){
        if (i < length){
            if (old_comparison < prices[i]){
                diff = prices[i] - old_pt;
                count++;
                old_comparison = prices[i];
            } else{
                if (diff > max_diff || (max_diff == diff && count_prev > count && count != 0)){
                    max_diff = diff;
                    ending_index = i - 1;
                    starting_index = i - 1 - count;
                    count_prev = count;
                } 
                count = 0;
                old_pt = prices[i];
                old_comparison = prices[i];
                index_count++;
            }
        } else {
            if (diff > max_diff || (max_diff == diff && count_prev > count && count != 0)){
                max_diff = diff;
                ending_index = i - 1;
                starting_index = i - 1 - count;
                count_prev = count;
            }
        }
        
    }

    for (i = 0; i < index_count; i++){
        if (starting_index < ending_index && ending_index != 0){
            printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
            break;
        } else if (i == index_count - 1){
            printf(""Hold"");
        }

    }
}",0
rsmi948,1695440668,4,"void wall_street_bet(double prices[], int length)
{
    // Declaring Variables
    int i;
    int j;
    int count;
    int prev_count = length;
    int second_length;
    int starting_index;
    int ending_index;
    double maximum = prices[0];
    double minimum = prices[0];

    // Getting shortest distance between minimum and maximum.
    for (i = 0; i < length; i++){
        count = 0;

        for (j = 0; j < length; j++){

            if (
                (prices[j] - prices[i] > maximum - minimum && j > i) ||
                (prices[j] - prices[i] == maximum - minimum && j > i && count < prev_count)
            ){
                maximum = prices[j];
                minimum = prices[i];
                starting_index = i;
                ending_index = j;
                prev_count = count;
                printf(""%d, %d , %f, %f \n"", starting_index, ending_index, minimum, maximum);
            }

            count++;
        }
    }

    if (ending_index != 0) {
        printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
    } else {
        printf(""Hold"");
    }
}",0
rsmi948,1695440681,5,"void wall_street_bet(double prices[], int length)
{
    // Declaring Variables
    int i;
    int j;
    int count;
    int prev_count = length;
    int starting_index;
    int ending_index;
    double maximum = prices[0];
    double minimum = prices[0];

    // Getting shortest distance between minimum and maximum.
    for (i = 0; i < length; i++){
        count = 0;

        for (j = 0; j < length; j++){

            if (
                (prices[j] - prices[i] > maximum - minimum && j > i) ||
                (prices[j] - prices[i] == maximum - minimum && j > i && count < prev_count)
            ){
                maximum = prices[j];
                minimum = prices[i];
                starting_index = i;
                ending_index = j;
                prev_count = count;
                printf(""%d, %d , %f, %f \n"", starting_index, ending_index, minimum, maximum);
            }

            count++;
        }
    }

    if (ending_index != 0) {
        printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
    } else {
        printf(""Hold"");
    }
}",0
rsmi948,1695440696,6,"void wall_street_bet(double prices[], int length)
{
    // Declaring Variables
    int i;
    int j;
    int count;
    int prev_count = length;
    int starting_index;
    int ending_index;
    double maximum = prices[0];
    double minimum = prices[0];

    // Getting shortest distance between minimum and maximum.
    for (i = 0; i < length; i++){
        count = 0;

        for (j = 0; j < length; j++){

            if (
                (prices[j] - prices[i] > maximum - minimum && j > i) ||
                (prices[j] - prices[i] == maximum - minimum && j > i && count < prev_count)
            ){
                maximum = prices[j];
                minimum = prices[i];
                starting_index = i;
                ending_index = j;
                prev_count = count;
            }

            count++;
        }
    }

    if (ending_index != 0) {
        printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
    } else {
        printf(""Hold"");
    }
}",0
rsmi948,1695440870,7,"void wall_street_bet(double prices[], int length)
{
    // Declaring Variables
    int i;
    int j;
    int count;
    int prev_count = length;
    int starting_index;
    int ending_index;
    double maximum = prices[0];
    double minimum = prices[0];

    // Getting shortest distance between minimum and maximum.
    for (i = 0; i < length; i++){
        count = 0;

        for (j = 0; j < length; j++){

            if (
                (prices[j] - prices[i] > maximum - minimum && j > i) ||
                (prices[j] - prices[i] == maximum - minimum && j > i && count < prev_count)
            ){
                maximum = prices[j];
                minimum = prices[i];
                starting_index = i;
                ending_index = j;
                prev_count = count;
            }

            count++;
        }
    }

    if (prices[ending_index] > prices[starting_index]) {
        printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
    } else {
        printf(""Hold"");
    }
}",0
rsmi948,1695441100,8,"void wall_street_bet(double prices[], int length)
{
    // Declaring Variables
    int i;
    int j;
    int count;
    int prev_count = length;
    int starting_index;
    int ending_index;
    int money_tbm = 0;
    double maximum = prices[0];
    double minimum = prices[0];

    // Getting shortest distance between minimum and maximum.
    for (i = 0; i < length; i++){
        count = 0;

        for (j = 0; j < length; j++){

            if (
                (prices[j] - prices[i] > maximum - minimum && j > i) ||
                (prices[j] - prices[i] == maximum - minimum && j > i && count < prev_count)
            ){
                maximum = prices[j];
                minimum = prices[i];
                starting_index = i;
                ending_index = j;
                prev_count = count;
                money_tbm = 1;
            }

            count++;
        }
    }

    if (money_tbm == 1) {
        printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
    } else {
        printf(""Hold"");
    }
}",0
rsmi948,1695441926,9,"void wall_street_bet(double prices[], int length)
{
    // Declaring Variables
    int i;
    int j;
    int count;
    int prev_count = length;
    int starting_index;
    int ending_index;
    int money_tbm = 0;
    double maximum = prices[0];
    double minimum = prices[0];

    // Getting shortest distance between minimum and maximum.
    for (i = 0; i < length; i++){
        count = 0;

        for (j = 0; j < length; j++){

            if (
                (prices[j] - prices[i] > maximum - minimum && j > i) ||
                (prices[j] - prices[i] == maximum - minimum && j > i && count < prev_count)
            ){
                maximum = prices[j];
                minimum = prices[i];
                starting_index = i;
                ending_index = j;
                prev_count = count;
                money_tbm = 1;
                count++;
            }
        }
    }

    if (money_tbm == 1) {
        printf(""Buy @ %.2f on %u\nSell @ %.2f on %u"", prices[starting_index], starting_index, prices[ending_index], ending_index);
    } else {
        printf(""Hold"");
    }
}",1
rtan654,1695175582,1,"void wall_street_bet(double values[], int length) 
{
    int buy_day, sell_day;
    double max_profit, profit;

    max_profit = 0.0;
    sell_day = 0;
    buy_day = 0;

    for (int i = 0; i < length - 1; i++) {
        for (int j = i + 1; j < length; j++) {

            profit = values[j] - values[i];

            // Updating profit to be max_profit or if same profit find which day has the shortest amount of time
            if (profit > max_profit || (profit == max_profit && (j - i < sell_day - buy_day))) {
                max_profit = profit;
                buy_day = i;
                sell_day = j;
            }
        }
    }

    if (max_profit > 0) {
        printf(""Buy @ %.2lf on %d\n"", values[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", values[sell_day], sell_day);
    } else {
        printf(""Hold\n"");
    }
}",1
sali153,1695519062,1,hehe,0
sban919,1695105109,1,"#include <stdio.h>

/* wall_street_bet function calculates the best time to buy and sell in order to maximise profit. */

void wall_street_bet(double prices, int length)
{
    double maxProfit = 0.0;
    int buyDay = -1, sellDay = -1;
    
    for (int i = 0; i < length - 1; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            double profit = prices[j] - prices[i];
            
            if (profit > maxProfit)
            {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
            else if (profit == maxProfit && (j - i) < (sellDay - buyDay))
            {
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit > 0.0)
    {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else
    {
        printf(""Hold\n"");
    }
}",0
sban919,1695105137,2,"#include <stdio.h>

/* wall_street_bet function calculates the best time to buy and sell in order to maximise profit. */

void wall_street_bet(double *prices, int length)
{
    double maxProfit = 0.0;
    int buyDay = -1, sellDay = -1;
    
    for (int i = 0; i < length - 1; i++)
    {
        for (int j = i + 1; j < length; j++)
        {
            double profit = prices[j] - prices[i];
            
            if (profit > maxProfit)
            {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
            else if (profit == maxProfit && (j - i) < (sellDay - buyDay))
            {
                buyDay = i;
                sellDay = j;
            }
        }
    }

    if (maxProfit > 0.0)
    {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
    else
    {
        printf(""Hold\n"");
    }
}",1
sche525,1695051475,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double minDay = 0;
    double maxDay = 0;
    double minVal = 0;
    double maxVal = 0;
    double period = 0;
    double x = 0;
    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        if(array[loop2] > array[loop1])
        {
            if(array[loop2] - array[loop1] > x)
            {
            x = array[loop2] - array[loop1];
            minVal = array[loop1];
            maxVal = array[loop2];
            minDay = loop1;
            maxDay = loop2;
            period = loop2 - loop1;
            }
        }

    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        {
            int num1 = array[loop1]*10;
            int num2 = array[loop2]*10;
            //printf(""\n%d vs %d"", num2 - num1, (int)(maxVal*10) - (int)(minVal*10));
            if(num2 - num1 == (int)(maxVal*10) - (int)(minVal*10))
            {
                if(loop2 - loop1 < period)
                {
                x = array[loop2] - array[loop1];
                minVal = array[loop1];
                maxVal = array[loop2];
                minDay = loop1;
                maxDay = loop2;
                period = loop2 - loop1;
                }
            }
        }

    if(x == 0)
    {
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"", minVal, minDay, maxVal, maxDay);
    }
}

int main()
{
    double pricesB[10] = { 1.9, 2.1, 2.2, 2.2, 2.2, 1.9, 1.4, 1.4, 1.7, 1.7 };
    wall_street_bet(pricesB, 10);
    return 0;
}",0
sche525,1695051485,2,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double minDay = 0;
    double maxDay = 0;
    double minVal = 0;
    double maxVal = 0;
    double period = 0;
    double x = 0;
    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        if(array[loop2] > array[loop1])
        {
            if(array[loop2] - array[loop1] > x)
            {
            x = array[loop2] - array[loop1];
            minVal = array[loop1];
            maxVal = array[loop2];
            minDay = loop1;
            maxDay = loop2;
            period = loop2 - loop1;
            }
        }

    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        {
            int num1 = array[loop1]*10;
            int num2 = array[loop2]*10;
            //printf(""\n%d vs %d"", num2 - num1, (int)(maxVal*10) - (int)(minVal*10));
            if(num2 - num1 == (int)(maxVal*10) - (int)(minVal*10))
            {
                if(loop2 - loop1 < period)
                {
                x = array[loop2] - array[loop1];
                minVal = array[loop1];
                maxVal = array[loop2];
                minDay = loop1;
                maxDay = loop2;
                period = loop2 - loop1;
                }
            }
        }

    if(x == 0)
    {
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"", minVal, minDay, maxVal, maxDay);
    }
}
",0
sche525,1695051568,3,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double minDay = 0;
    double maxDay = 0;
    double minVal = 0;
    double maxVal = 0;
    double period = 0;
    double x = 0;
    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        if(array[loop2] > array[loop1])
        {
            if(array[loop2] - array[loop1] > x)
            {
            x = array[loop2] - array[loop1];
            minVal = array[loop1];
            maxVal = array[loop2];
            minDay = loop1;
            maxDay = loop2;
            period = loop2 - loop1;
            }
        }

    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        {
            int num1 = array[loop1]*10;
            int num2 = array[loop2]*10;
            //printf(""\n%d vs %d"", num2 - num1, (int)(maxVal*10) - (int)(minVal*10));
            if(num2 - num1 == (int)(maxVal*10) - (int)(minVal*10))
            {
                if(loop2 - loop1 < period)
                {
                x = array[loop2] - array[loop1];
                minVal = array[loop1];
                maxVal = array[loop2];
                minDay = loop1;
                maxDay = loop2;
                period = loop2 - loop1;
                }
            }
        }

    if(x == 0)
    {
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"", minVal, minDay, maxVal, maxDay);
    }
}",0
sche525,1695052098,4,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double minDay = 0;
    double maxDay = 0;
    double minVal = 0;
    double maxVal = 0;
    double period = 0;
    double x = 0;
    int num1 = 0;
    int num2 = 0;
    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        if(array[loop2] > array[loop1])
        {
            if(array[loop2] - array[loop1] > x)
            {
            x = array[loop2] - array[loop1];
            minVal = array[loop1];
            maxVal = array[loop2];
            minDay = loop1;
            maxDay = loop2;
            period = loop2 - loop1;
            }
        }

    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        {
            num1 = array[loop1]*10;
            num2 = array[loop2]*10;
            //printf(""\n%d vs %d"", num2 - num1, (int)(maxVal*10) - (int)(minVal*10));
            if(num2 - num1 == (int)(maxVal*10) - (int)(minVal*10))
            {
                if(loop2 - loop1 < period)
                {
                x = array[loop2] - array[loop1];
                minVal = array[loop1];
                maxVal = array[loop2];
                minDay = loop1;
                maxDay = loop2;
                period = loop2 - loop1;
                }
            }
        }

    if(x == 0)
    {
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"", minVal, minDay, maxVal, maxDay);
    }
}

int main()
{		
    double pricesG[5] = { 2.50, 5.00, 2.50, 4.00, 5.00 };
    wall_street_bet(pricesG, 5);
    return 0;
}",0
sche525,1695052106,5,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double minDay = 0;
    double maxDay = 0;
    double minVal = 0;
    double maxVal = 0;
    double period = 0;
    double x = 0;
    int num1 = 0;
    int num2 = 0;
    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        if(array[loop2] > array[loop1])
        {
            if(array[loop2] - array[loop1] > x)
            {
            x = array[loop2] - array[loop1];
            minVal = array[loop1];
            maxVal = array[loop2];
            minDay = loop1;
            maxDay = loop2;
            period = loop2 - loop1;
            }
        }

    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        {
            num1 = array[loop1]*10;
            num2 = array[loop2]*10;
            //printf(""\n%d vs %d"", num2 - num1, (int)(maxVal*10) - (int)(minVal*10));
            if(num2 - num1 == (int)(maxVal*10) - (int)(minVal*10))
            {
                if(loop2 - loop1 < period)
                {
                x = array[loop2] - array[loop1];
                minVal = array[loop1];
                maxVal = array[loop2];
                minDay = loop1;
                maxDay = loop2;
                period = loop2 - loop1;
                }
            }
        }

    if(x == 0)
    {
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"", minVal, minDay, maxVal, maxDay);
    }
}",0
sche525,1695052439,6,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double minDay = 0;
    double maxDay = 0;
    double minVal = 0;
    double maxVal = 0;
    double period = 0;
    double x = 0;
    
    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        if(array[loop2] > array[loop1])
        {
            if(array[loop2] - array[loop1] > x)
            {
            x = array[loop2] - array[loop1];
            minVal = array[loop1];
            maxVal = array[loop2];
            minDay = loop1;
            maxDay = loop2;
            period = loop2 - loop1;
            }
        }

    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        {
            //printf(""\n%d vs %d"", num2 - num1, (int)(maxVal*10) - (int)(minVal*10));
            if((int)(array[loop2]*10) - (int)(array[loop1]*10) == (int)(maxVal*10) - (int)(minVal*10))
            {
                if(loop2 - loop1 < period)
                {
                x = array[loop2] - array[loop1];
                minVal = array[loop1];
                maxVal = array[loop2];
                minDay = loop1;
                maxDay = loop2;
                period = loop2 - loop1;
                }
            }
        }

    if(x == 0)
    {
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"", minVal, minDay, maxVal, maxDay);
    }
}",0
sche525,1695052523,7,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double *array, int element)
{
    double minDay = 0;
    double maxDay = 0;
    double minVal = 0;
    double maxVal = 0;
    double period = 0;
    double x = 0;

    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        if(array[loop2] > array[loop1])
        {
            if(array[loop2] - array[loop1] > x)
            {
            x = array[loop2] - array[loop1];
            minVal = array[loop1];
            maxVal = array[loop2];
            minDay = loop1;
            maxDay = loop2;
            period = loop2 - loop1;
            }
        }

    for(int loop1 = 0; loop1 <= element - 1; loop1++)
        for(int loop2 = loop1 + 1; loop2 <= element; loop2++)
        {
            //printf(""\n%d vs %d"", num2 - num1, (int)(maxVal*10) - (int)(minVal*10));
            if((int)(array[loop2]*10) - (int)(array[loop1]*10) == (int)(maxVal*10) - (int)(minVal*10))
            {
                if(loop2 - loop1 < period)
                {
                x = array[loop2] - array[loop1];
                minVal = array[loop1];
                maxVal = array[loop2];
                minDay = loop1;
                maxDay = loop2;
                period = loop2 - loop1;
                }
            }
        }

    if(x == 0)
    {
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"", minVal, minDay, maxVal, maxDay);
    }
}",0
sche525,1695054969,8,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double buyDay = 0;
    double sellDay = 0;
    double buyVal = 0;
    double sellVal = 0;
    double period = 0;
    double x = 0;

    for(int i = 0; i < element; i++){
        for(int j = i + 1; j <= element; j++){
            if(array[j] > array[i]){
                if(array[j] - array[i] > x){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    for(int i = 0; i < element; i++){
        for(int j = i + 1; j <= element; j++){
            if((int)(array[j]*10) - (int)(array[i]*10) == (int)(sellVal*10) - (int)(buyVal*10)){
                if(j - i < period){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    if(x == 0){
        printf(""\nHold\n"");
    }
    else{
        printf(""\nBuy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf\n"", buyVal, buyDay, sellVal, sellDay);
    }
}",0
sche525,1695054991,9,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double buyDay = 0;
    double sellDay = 0;
    double buyVal = 0;
    double sellVal = 0;
    double period = 0;
    double x = 0;

    for(int i = 0; i < element; i++){
        for(int j = i + 1; j <= element; j++){
            if(array[j] > array[i]){
                if(array[j] - array[i] > x){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    for(int i = 0; i < element; i++){
        for(int j = i + 1; j <= element; j++){
            if((int)(array[j]*10) - (int)(array[i]*10) == (int)(sellVal*10) - (int)(buyVal*10)){
                if(j - i < period){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    if(x == 0){
        printf(""Hold\n"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf\n"", buyVal, buyDay, sellVal, sellDay);
    }
}",0
sche525,1695055475,10,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double buyDay = 0;
    double sellDay = 0;
    double buyVal = 0;
    double sellVal = 0;
    double period = 0;
    double x = 0;

    for(int i = 0; i < element - 1; i++){
        for(int j = i + 1; j < element; j++){
            if(array[j] > array[i]){
                if(array[j] - array[i] > x){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    for(int i = 0; i < element - 1; i++){
        for(int j = i + 1; j < element; j++){
            if((int)(array[j]*10) - (int)(array[i]*10) == (int)(sellVal*10) - (int)(buyVal*10)){
                if(j - i < period){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    if(x == 0){
        printf(""\nHold\n"");
    }
    else{
        printf(""\nBuy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf\n"", buyVal, buyDay, sellVal, sellDay);
    }
}",0
sche525,1695055487,11,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double buyDay = 0;
    double sellDay = 0;
    double buyVal = 0;
    double sellVal = 0;
    double period = 0;
    double x = 0;

    for(int i = 0; i < element - 1; i++){
        for(int j = i + 1; j < element; j++){
            if(array[j] > array[i]){
                if(array[j] - array[i] > x){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    for(int i = 0; i < element - 1; i++){
        for(int j = i + 1; j < element; j++){
            if((int)(array[j]*10) - (int)(array[i]*10) == (int)(sellVal*10) - (int)(buyVal*10)){
                if(j - i < period){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    if(x == 0){
        printf(""Hold\n"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf\n"", buyVal, buyDay, sellVal, sellDay);
    }
}",0
sche525,1695056136,12,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void wall_street_bet(double array[], int element)
{
    double buyDay = 0;
    double sellDay = 0;
    double buyVal = 0;
    double sellVal = 0;
    double period = 0;
    double x = 0;

    for(int i = 0; i < element - 1; i++){
        for(int j = i + 1; j < element; j++){
            if(array[j] > array[i]){
                if(array[j] - array[i] > x){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    for(int i = 0; i < element - 1; i++){
        for(int j = i + 1; j < element; j++){
            if((int)(array[j]*100) - (int)(array[i]*100) == (int)(sellVal*100) - (int)(buyVal*100)){
                if(j - i < period){
                    x = array[j] - array[i];
                    buyVal = array[i];
                    sellVal = array[j];
                    buyDay = i;
                    sellDay = j;
                    period = j - i;
                }
            }
        }
    }

    if(x == 0){
        printf(""Hold\n"");
    }
    else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf\n"", buyVal, buyDay, sellVal, sellDay);
    }
}",1
sekb555,1695115187,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//Task 9
void wall_street_bet(double *prices, int length)
{
    //initlises the value of max profit as ""max""
    double max;
    //initlises the values of the buy and sell days
    int buy, sell;

    //nested for loop for compareing each number to each other to see if there is a profit anywhere
    for(int i = 0; i < length; i++)
    {
        for(int j = i+1; j < length; j++)
        {
            double profit = prices[j] - prices[i];
            if (profit > max) 
            {
                max = profit;
                buy = i;
                sell = j;
            }
        }

    }

// if statement for checking if there is a profit or not if not then it tells you to hold
    if (max > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }

}",0
sekb555,1695119701,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//Task 9
void wall_street_bet(double *prices, int length)
{
    //initlises the value of max profit as ""max""
    double max = 0;
    //initlises the values of the buy and sell days
    int buy, sell;

    //nested for loop for compareing each number to each other to see if there is a profit anywhere
    for(int i = 0; i < length; i++)
    {
        for(int j = i+1; j < length; j++)
        {
            double profit = prices[j] - prices[i];
            if (profit > max) 
            {
                max = profit;
                buy = i;
                sell = j;
            }
        }

    }

// if statement for checking if there is a profit or not if not then it tells you to hold
    if (max > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }

}",0
sekb555,1695120197,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//Task 9
void wall_street_bet(double *prices, int length)
{
    //initlises the value of max profit as ""max""
    double max = 0;
    //initlises the values of the buy and sell days
    int buy, sell;

    //nested for loop for compareing each number to each other to see if there is a profit anywhere
    for(int i = 0; i < length; i++)
    {
        for(int j = i+1; j < length; j++)
        {
            double profit = prices[j] - prices[i];
            //if statement to check if there are any other possibilites for a combanation of days that are closer together
            if (profit > max || (profit == max && (j - i) < (sell - buy))) 
            {
                max = profit;
                buy = i;
                sell = j;
            }
        }

    }

// if statement for checking if there is a profit or not if not then it tells you to hold
    if (max > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }

}",1
she940,1695197695,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	int i;
	int c;
	double sell;
	double buy;
	int sell_day;
	int buy_day;
	double biggest_difference = (prices[1] - prices[0]);
	for (c = 0; c < length; c++) {
		for (i = c; i < length; i++) {


			if (biggest_difference < (prices[i] - prices[c])) {
				biggest_difference = (prices[i] - prices[c]);
				/*printf(""%lf\n"", biggest_difference);*/
				sell_day = i;
				buy_day = c;
				sell = prices[i];
				buy = prices[c];



			}



		}



	}

	if (biggest_difference == (prices[0] - prices[0])) {
		printf(""Hold"");
	}
	
	else {
		printf(""Buy @ %.2f on %d\n"", buy, buy_day);
		printf(""Sell @ %.2f on %d\n"", sell, sell_day);
	}


}
",0
she940,1695197863,2,"

void wall_street_bet(double prices[], int length)
{
	int i;
	int c;
	double sell;
	double buy;
	int sell_day;
	int buy_day;
	double biggest_difference = (prices[1] - prices[0]);
	for (c = 0; c < length; c++) {
		for (i = c; i < length; i++) {


			if (biggest_difference < (prices[i] - prices[c])) {
				biggest_difference = (prices[i] - prices[c]);
				/*printf(""%lf\n"", biggest_difference);*/
				sell_day = i;
				buy_day = c;
				sell = prices[i];
				buy = prices[c];



			}



		}



	}

	if (biggest_difference == (prices[0] - prices[0])) {
		printf(""Hold"");
	}
	
	else {
		printf(""Buy @ %.2f on %d\n"", buy, buy_day);
		printf(""Sell @ %.2f on %d\n"", sell, sell_day);
	}


}

",0
she940,1695250401,3,"void wall_street_bet(double prices[], int length)
{
	int i;
	int c;
	double sell;
	double buy;
	int sell_day;
	int buy_day;
	int difference_days;
	int difference;
	double biggest_difference = (prices[1] - prices[0]);
	for (c = 0; c < length; c++) {
		for (i = c; i < length; i++) {
			/*printf(""price sell %lf\n"", prices[i]);
			printf(""price buy %lf\n"", prices[c]);
			printf(""sell day %d\n"", i);
			printf(""buy day %d\n"", c);*/

			if (biggest_difference <= (prices[i] - prices[c])) {
				if (biggest_difference == (prices[i] - prices[c])) {
					difference = i - c;
					if (difference < difference_days) {
						biggest_difference = (prices[i] - prices[c]);
						/*printf(""Biggest difference %lf\n"", biggest_difference);
						printf(""Sell price %lf\n"", prices[i]);
						printf(""Buy price %lf\n"", prices[c]);*/
						sell_day = i;
						buy_day = c;
					}else if (difference > difference_days) {
						
						biggest_difference = sell - buy;
						/*printf(""%lf\n"", sell);
						printf(""%lf\n"", buy);*/
					}

				}else if (biggest_difference < (prices[i] - prices[c])) {
					biggest_difference = (prices[i] - prices[c]);
					/*printf(""%lf\n"", biggest_difference);*/
					sell_day = i;
					/*printf(""Sell day %d\n"", sell_day);*/
					buy_day = c;
					/*printf(""Buy day %d\n"", buy_day);*/
					difference_days = sell_day - buy_day;
					/*printf(""Difference_days %d\n"", difference_days);*/

					sell = prices[i];

					buy = prices[c];


				}
			}



		}



	}

	if (biggest_difference == (prices[0] - prices[0])) {
		printf(""Hold"");
	}
	
	else {
		printf(""Buy @ %.2f on %d\n"", buy, buy_day);
		printf(""Sell @ %.2f on %d\n"", sell, sell_day);
	}


}
",0
she940,1695367769,4,"void wall_street_bet(double prices[], int length)
{
	int i;
	int c;
	double sell = prices[1];
	double buy = prices[0];
	int sell_day = 1;
	int buy_day = 0;
	int difference_days = 1;
	int difference;
	double biggest_difference = (prices[1] - prices[0]);
	for (c = 0; c < length; c++) {
		for (i = c; i < length; i++) {
			/*printf(""price sell %lf\n"", prices[i]);
			printf(""price buy %lf\n"", prices[c]);
			printf(""sell day %d\n"", i);
			printf(""buy day %d\n"", c);
			printf(""biggest_difference %lf\n"", biggest_difference);*/
			if (biggest_difference <= (prices[i] - prices[c])) {
				if (biggest_difference == (prices[i] - prices[c])) {
					difference = i - c;

					/*printf(""difference %d\n"", difference);
					printf(""difference_days %d\n"", difference_days);*/
					
					if (difference < difference_days) {
						biggest_difference = (prices[i] - prices[c]);
						/*printf(""Biggest difference %lf\n"", biggest_difference);
						printf(""Sell price %lf\n"", prices[i]);
						printf(""Buy price %lf\n"", prices[c]);*/
						sell_day = i;
						/*printf(""sell_day %d\n"", i);*/

						buy_day = c;
						/*printf(""buy_day %d\n"", c);*/
						sell = prices[i];


						buy = prices[c];
					}else /*if (difference > difference_days)*/ {
					
						biggest_difference = biggest_difference;
						
						/*printf(""%lf\n"", sell);
					//	printf(""%lf\n"", buy);*/
					}

				}else if (biggest_difference < (prices[i] - prices[c])) {
					biggest_difference = (prices[i] - prices[c]);
					/*printf(""%lf\n"", biggest_difference);*/
					sell_day = i;
					/*printf(""Sell day %d\n"", sell_day);*/
					buy_day = c;
					/*printf(""Buy day %d\n"", buy_day);*/
					difference_days = sell_day - buy_day;
					/*printf(""Difference_days %d\n"", difference_days);*/

					sell = prices[i];

					buy = prices[c];


				}
			}



		}



	}

	if (biggest_difference == (prices[0] - prices[0])) {
		printf(""Hold"");
	}
	
	else {
		printf(""Buy @ %.2f on %d\n"", buy, buy_day);
		printf(""Sell @ %.2f on %d\n"", sell, sell_day);
	}


}",1
shsa718,1695596165,1,- ,0
shua365,1695381391,1,"void wall_street_bet(double stock_array[], int length){
    double most_profit=0,current_profit;
    int start_date=0, time_taken=0,i,j,k,time,end_day;
    typedef struct 
    {
        double max_profit;
        int time_span;
    } possible_profit;

    possible_profit profit_array[length];

    //calculate the max profit for stocks everyday
    for (i=0; i<length;i++){
        profit_array[i].max_profit=0;
        profit_array[i].time_span=0;
        for (j=i+1;j<length;j++){
            time= j-i;
            if (stock_array[i] > stock_array[j]){
                continue;
            }else{
                current_profit= stock_array[j]-stock_array[i];
            }
            if (current_profit > profit_array[i].max_profit){
                profit_array[i].max_profit=current_profit;
                profit_array[i].time_span=time;
            };
            if ((current_profit == profit_array[i].max_profit) && (time < profit_array[i].time_span)){
                profit_array[i].time_span=time;
            };
             
        }
    };
    
    for (k=0;k<length; k++){
        if (profit_array[k].max_profit>most_profit){
            most_profit=profit_array[k].max_profit;
            start_date=k;
            time_taken=profit_array[k].time_span;
        }
        if ((profit_array[k].max_profit==most_profit)&& (time_taken > profit_array[k].time_span)){
            start_date=k;
            time_taken=profit_array[k].time_span;
        }
    };
    end_day=start_date+time_taken;

    if (most_profit <= 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"",stock_array[start_date],start_date);
        printf(""Sell @ %.2f on %d"",stock_array[end_day],end_day);
    };
};",1
skan221,1695604485,1,:),0
smou122,1695095038,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int early;
    int late;
    int i;
    int j;
    double new_day_price, old_day_price, new_profit;
    int waiting = 1000;
    double profit;
    profit = 0;
    for (i = 0; i < (length-1); i++)
    {
        for (j = (i+1); j < length; j++)
        {
            new_day_price = prices[j];
            old_day_price = prices[i];
            new_profit = new_day_price - old_day_price;
            if (new_profit >= profit)
            {
                if (new_profit == profit)
                {
                    if ((j - i) < waiting)
                    {
                        profit = new_profit;
                        late = j;
                        early = i;
                        waiting = j - i;
                        
                    }

                }
                else {
                    profit = new_profit;
                    late = j;
                    early = i;
                    waiting = j - i;
                }
                
            }
            
        }
    }
    if (waiting == 1000){
        printf(""Hold"");
    }
    else {        
    printf(""Buy @ %.2f on %d\n"", prices[early], early);
    printf(""Sell @ %.2f on %d"", prices[late], late);
    }

}",1
spar473,1695355224,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int buy = 0;
    int sell = 0;

    for (int i=0; i<length-1; i++) {
        for (int j= i+1; j<length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > prices[sell] - prices[buy]) {
                sell = j;
                buy = i;
            
            } else if (profit == prices[sell] - prices[buy]) {
                if (j-i < sell-buy) {
                    sell = j;
                    buy = i;
                }
            }
        }
    }

    if (prices[sell] - prices[buy] > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[sell], sell);
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
    }
    else {
        printf(""Hold\n"");
    }
}
",0
spar473,1695355980,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int buy = 0;
    int sell = 0;

    for (int i=0; i<length-1; i++) {
        for (int j= i+1; j<length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > prices[sell] - prices[buy]) {
                sell = j;
                buy = i;
            
            } else if (profit == prices[sell] - prices[buy]) {
                if (j-i < sell-buy) {
                    sell = j;
                    buy = i;
                }
            }
        }
    }

    if (prices[sell] - prices[buy] > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    }
    else {
        printf(""Hold\n"");
    }
}

int main()
{
double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
wall_street_bet(pricesA, 15);

return 0;
}",0
spar473,1695355999,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int buy = 0;
    int sell = 0;

    for (int i=0; i<length-1; i++) {
        for (int j= i+1; j<length; j++) {
            double profit = prices[j] - prices[i];
            if (profit > prices[sell] - prices[buy]) {
                sell = j;
                buy = i;
            
            } else if (profit == prices[sell] - prices[buy]) {
                if (j-i < sell-buy) {
                    sell = j;
                    buy = i;
                }
            }
        }
    }

    if (prices[sell] - prices[buy] > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    }
    else {
        printf(""Hold\n"");
    }
}",1
ssri357,1695291950,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length <= 1) {
        printf(""Hold\n""); // Cannot make a profit with less than 2 prices
        return;
    }

    double maxProfit = 0;
    int buyDay = 0;
    int sellDay = 0;

    // Nested loops to compare each pair of buy and sell days
    for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
            double profit = prices[j] - prices[i];

            // Check if the profit for this pair is greater than the current maximum
            // or if it's equal but the time span is shorter
            if (profit > maxProfit || (profit == maxProfit && (j - i) < (sellDay - buyDay))) {
                maxProfit = profit;
                buyDay = i;
                sellDay = j;
            }
        }
    }

    // If no profit can be made, print ""Hold""
    if (maxProfit <= 0) {
        printf(""Hold\n"");
    } else {
        // Print the optimal buy and sell days along with their prices
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    }
}
",1
swan472,1695186899,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Not enough data to make a trade
        printf(""Hold\n"");
        return;
    }

    int buy_day = 0;   // Initialize buy day
    int sell_day = 1;  // Initialize sell day
    int min_day = 0;   // Initialize min day for potential future buy
    double max_profit = prices[sell_day] - prices[buy_day];

    for (int i = 1; i < length; i++) {
        if (prices[i] - prices[min_day] > max_profit) {
            // If current day offers a better profit, update buy and sell days
            buy_day = min_day;
            sell_day = i;
            max_profit = prices[sell_day] - prices[buy_day];
        } else if (prices[i] < prices[min_day]) {
            // Update min_day if we find a lower price
            min_day = i;
        }
    }

    if (max_profit <= 0) {
        // No profit can be made
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
}",0
swan472,1695187014,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Not enough data to make a trade
        printf(""Hold\n"");
        return;
    }

    int buy_day = 0;   // Initialize buy day
    int sell_day = 1;  // Initialize sell day
    int min_day = 0;   // Initialize min day for potential future buy
    double max_profit = prices[sell_day] - prices[buy_day];

    for (int i = 1; i < length; i++) {
        if (prices[i] - prices[min_day] > max_profit) {
            // If current day offers a better profit, update buy and sell days
            buy_day = min_day;
            sell_day = i;
            max_profit = prices[sell_day] - prices[buy_day];
        } else if (prices[i] < prices[min_day]) {
            // Update min_day if we find a lower price
            min_day = i;
        }
    }

    if (max_profit <= 0) {
        // No profit can be made
        printf(""Hold\n"");
    } else if (prices[buy_day] == prices[sell_day]) {
        // If prices remain constant, hold
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    }
}

",0
syok443,1695076594,1,"#include <stdio.h>

/* function wall_street_bet() takes in two intputs
array type double
amount of doubles in an array, integer
*/

void wall_street_bet(double *prices, int length){

    int i, j, k, m = 0;
    double maxDiff = 0.0;
    double diff;
    int sellDay, buyDay;

    // compares the index value to the rest of the values, stores the biggest difference and the index difference
    for (i = 0; i < length; i++){
        for (j = i + 1; j < length; j++){
            
            diff =  prices[j] - prices[i];

            if ((diff > maxDiff) || (diff == maxDiff && (j - i) < (sellDay - buyDay))){
                maxDiff = diff;

                sellDay = j;
                buyDay = i;
                k = 1;
            } else {
                k = 0;
            }

        }
    
    }
    if (k == 1){
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    } else {
        printf(""Hold"");
    }
}
",0
syok443,1695076623,2,"#include <stdio.h>

/* function wall_street_bet() takes in two intputs
array type double
amount of doubles in an array, integer
*/

void wall_street_bet(double *prices, int length){

    int i, j, k;
    double maxDiff = 0.0;
    double diff;
    int sellDay, buyDay;

    // compares the index value to the rest of the values, stores the biggest difference and the index difference
    for (i = 0; i < length; i++){
        for (j = i + 1; j < length; j++){
            
            diff =  prices[j] - prices[i];

            if ((diff > maxDiff) || (diff == maxDiff && (j - i) < (sellDay - buyDay))){
                maxDiff = diff;

                sellDay = j;
                buyDay = i;
                k = 1;
            } else {
                k = 0;
            }

        }
    
    }
    if (k == 1){
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    } else {
        printf(""Hold"");
    }
}
",0
syok443,1695076666,3,"#include <stdio.h>

/* function wall_street_bet() takes in two intputs
array type double
amount of doubles in an array, integer
*/

void wall_street_bet(double *prices, int length){

    int i, j, k;
    double maxDiff = 0.0;
    double diff;
    int sellDay, buyDay;

    // compares the index value to the rest of the values, stores the biggest difference and the index difference
    for (i = 0; i < length; i++){
        for (j = i + 1; j < length; j++){
            
            diff =  prices[j] - prices[i];

            if ((diff > maxDiff) || (diff == maxDiff && (j - i) < (sellDay - buyDay))){
                maxDiff = diff;

                sellDay = j;
                buyDay = i;
                k += 1;
            } else {
                k = 0;
            }

        }
    
    }
    if (k > 0){
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    } else {
        printf(""Hold"");
    }
}
",0
syok443,1695076695,4,"#include <stdio.h>

/* function wall_street_bet() takes in two intputs
array type double
amount of doubles in an array, integer
*/

void wall_street_bet(double *prices, int length){

    int i, j, k;
    double maxDiff = 0.0;
    double diff;
    int sellDay, buyDay;

    // compares the index value to the rest of the values, stores the biggest difference and the index difference
    for (i = 0; i < length; i++){
        for (j = i + 1; j < length; j++){
            
            diff =  prices[j] - prices[i];

            if ((diff > maxDiff) || (diff == maxDiff && (j - i) < (sellDay - buyDay))){
                maxDiff = diff;

                sellDay = j;
                buyDay = i;
                k += 1;
            } else {
                k -= 1;
            }

        }
    
    }
    if (k > 0){
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    } else {
        printf(""Hold"");
    }
}
",0
syok443,1695076729,5,"#include <stdio.h>

/* function wall_street_bet() takes in two intputs
array type double
amount of doubles in an array, integer
*/

void wall_street_bet(double *prices, int length){

    int i, j, m = 0;
    double maxDiff = 0.0;
    double diff;
    int sellDay, buyDay;

    // compares the index value to the rest of the values, stores the biggest difference and the index difference
    for (i = 0; i < length; i++){
        for (j = i + 1; j < length; j++){
            
            diff =  prices[j] - prices[i];

            if ((diff > maxDiff) || (diff == maxDiff && (j - i) < (sellDay - buyDay))){
                maxDiff = diff;

                sellDay = j;
                buyDay = i;
            } else {
                printf(""Hold\n"");
                break;
            }

        }
    
    }

    printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[buyDay], buyDay, prices[sellDay], sellDay);
}

int main(){
    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);
}

",0
syok443,1695076748,6,"#include <stdio.h>

/* function wall_street_bet() takes in two intputs
array type double
amount of doubles in an array, integer
*/

void wall_street_bet(double *prices, int length){

    int i, j;
    double maxDiff = 0.0;
    double diff;
    int sellDay, buyDay;

    // compares the index value to the rest of the values, stores the biggest difference and the index difference
    for (i = 0; i < length; i++){
        for (j = i + 1; j < length; j++){
            
            diff =  prices[j] - prices[i];

            if ((diff > maxDiff) || (diff == maxDiff && (j - i) < (sellDay - buyDay))){
                maxDiff = diff;

                sellDay = j;
                buyDay = i;
            } else {
                printf(""Hold\n"");
                break;
            }

        }
    
    }

    printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[buyDay], buyDay, prices[sellDay], sellDay);
}

int main(){
    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);
}

",0
syok443,1695076755,7,"#include <stdio.h>

/* function wall_street_bet() takes in two intputs
array type double
amount of doubles in an array, integer
*/

void wall_street_bet(double *prices, int length){

    int i, j;
    double maxDiff = 0.0;
    double diff;
    int sellDay, buyDay;

    // compares the index value to the rest of the values, stores the biggest difference and the index difference
    for (i = 0; i < length; i++){
        for (j = i + 1; j < length; j++){
            
            diff =  prices[j] - prices[i];

            if ((diff > maxDiff) || (diff == maxDiff && (j - i) < (sellDay - buyDay))){
                maxDiff = diff;

                sellDay = j;
                buyDay = i;
            } else {
                printf(""Hold\n"");
                break;
            }

        }
    
    }

    printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[buyDay], buyDay, prices[sellDay], sellDay);
}
",0
syok443,1695076872,8,"#include <stdio.h>

/* function wall_street_bet() takes in two intputs
array type double
amount of doubles in an array, integer
*/

void wall_street_bet(double *prices, int length){

    int i, j;
    double maxDiff = 0.0;
    double diff;
    int sellDay, buyDay;

    // compares the index value to the rest of the values, stores the biggest difference and the index difference
    for (i = 0; i < length; i++){
        for (j = i + 1; j < length; j++){
            
            diff =  prices[j] - prices[i];

            if ((diff > maxDiff) || (diff == maxDiff && (j - i) < (sellDay - buyDay))){
                maxDiff = diff;

                sellDay = j;
                buyDay = i;
            }

        }
    
    }
    if (maxDiff > 0){
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    } else {
        printf(""Hold"");
    }
}
",1
szen566,1695472106,1,"#include <stdio.h>

void  wall_street_bet(double* prices, int length)
{
	int i, j;
	int buyTime = 0;
	int sellTime = 0;
	double buyPrice = 0.0;
	double sellPrice = 0.0;

	double difference;
	double maxProfit = 0.0;

	int daydifference_1, daydifference_2;

	// go thru whole array, for every ith element, find the difference 
	// between it and every value after it.
	for (i = 0; i < length - 1; i++) {
		for (j = i + 1; j < length; j++) {

			difference = prices[j] - prices[i];

			if (difference == maxProfit) {
				// Calculate the difference in days
				daydifference_1 = sellTime - buyTime;
				daydifference_2 = j - i;

				if (daydifference_1 < daydifference_2) {
					buyTime = buyTime;
					sellTime = sellTime;
					buyPrice = buyPrice;
					sellPrice = sellPrice;

				}
				else if (daydifference_1 > daydifference_2) {
					buyTime = i;
					sellTime = j;
					buyPrice = prices[i];
					sellPrice = prices[j];
				}

			}
			else if (difference > maxProfit) {
				// If the difference is greater than the previous max profit, update all variables
				maxProfit = difference;
				buyTime = i;
				sellTime = j;

				buyPrice = prices[i];
				sellPrice = prices[j];
			}

		}
	}

	if (maxProfit == 0) {
		printf(""Hold\n"");

	} else {
	printf(""Buy @ %.2f on %d\n"", buyPrice, buyTime);
	printf(""Sell @ %.2f on %d\n"", sellPrice, sellTime);
	printf(""\n"");
	}

}
",1
tais804,1695093993,1,"void wall_street_bet(double *prices, int length) 
{
    int i = 0;
    int buy;
    double diff = 0;
    int sell;
    int days = length;

    for (i = 0; i <length-1; i++) {     
    int j = i;

        for (j = i; j < length; j++){
            if ((prices[j] - prices[i]) >= diff){
                //if ((j - i) < days){
                    days = j - i; 
                    diff = prices[j] - prices[i];
                    buy = i;
                    sell = j;
               // }
            }
        }
    }
    
    if (diff == 0){
        printf(""Hold\n"");
    }else{
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    
    }
    
}  ",0
tais804,1695094566,2,"void wall_street_bet(double *prices, int length) 
{
    int i = 0;
    int buy;
    double diff = 0;
    int sell;
    //int days = length;

    for (i = 0; i <length-1; i++) {     
    int j = i;

        for (j = i; j < length; j++){
            if ((prices[j] - prices[i]) >= diff){
                //if ((j - i) < days){
                    days = j - i; 
                    diff = prices[j] - prices[i];
                    buy = i;
                    sell = j;
               // }
            }
        }
    }
    
    if (diff == 0){
        printf(""Hold\n"");
    }else{
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    
    }
    
}  ",0
tais804,1695094577,3,"void wall_street_bet(double *prices, int length) 
{
    int i = 0;
    int buy;
    double diff = 0;
    int sell;
    //int days = length;

    for (i = 0; i <length-1; i++) {     
    int j = i;

        for (j = i; j < length; j++){
            if ((prices[j] - prices[i]) >= diff){
                //if ((j - i) < days){
                    //days = j - i; 
                    diff = prices[j] - prices[i];
                    buy = i;
                    sell = j;
               // }
            }
        }
    }
    
    if (diff == 0){
        printf(""Hold\n"");
    }else{
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    
    }
    
}  ",0
tais804,1695095131,4,"void wall_street_bet(double *prices, int length) 
{
    int i = 0;
    int buy;
    double diff = 0;
    int sell;
    int days = length;

    for (i = 0; i <length-1; i++) {     
        int j = i+1;

        for (j = i; j < length; j++){
            if ((prices[j] - prices[i]) > diff){
                if ((prices[j+1] - prices[i]) == diff){
                    if ((j - i) < days){
                        days = j - i; 
                        diff = prices[j] - prices[i];
                        buy = i;
                        sell = j;
                    }
                    
                  
                }
            
                days = j - i; 
                diff = prices[j] - prices[i];
                buy = i;
                sell = j;
            }
        }
    }

    
    if (diff == 0){
        printf(""Hold\n"");
    }else{
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    
    }
    
}   ",0
tais804,1695097844,5,"void wall_street_bet(double *prices, int length) 
{
    int i = 0;
    int buy;
    double diff = 0;
    int sell;
    int days = length;

    for (i = 0; i <length-1; i++) {     
        int j = i+1;

        for (j = i; j < length; j++){
            if ((prices[j] - prices[i]) >= diff){
                if ((prices[j] - prices[i]) == diff){
                    if ((j - i) < days){
                        days = j - i; 
                        diff = prices[j] - prices[i];
                        buy = i;
                        sell = j;
                    }
                    
                  
                }
            
                days = j - i; 
                diff = prices[j] - prices[i];
                buy = i;
                sell = j;
            }
        }
    }

    
    if (diff == 0){
        printf(""Hold\n"");
    }else{
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    
    }
    
}  ",0
tais804,1695098970,6,"void wall_street_bet(double *prices, int length) 
{
    int i = 0;
    int buy;
    double diff = 0;
    int sell;
    int days = length;

    for (i = 0; i <length-1; i++) {     
        int j = i+1;

        for (j = i+1; j < length; j++){
            if ((prices[j] - prices[i]) >= diff){
                if ((prices[j] - prices[i]) == diff){
                    if ((j - i) < days){
                        days = j - i; 
                        diff = prices[j] - prices[i];
                        buy = i;
                        sell = j;
                    }
                    
                  
                }else{
                    days = j - i;
                    diff = prices[j] - prices[i];
                    buy = i;
                    sell = j;
                }
            }
        }
    }

    
    if (diff == 0){
        printf(""Hold\n"");
    }else{
        printf(""Buy @ %.2lf on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2lf on %d\n"", prices[sell], sell);
    
    }
    
}",1
tdon950,1695253150,1,a,0
thar970,1695140185,1,"#include <stdio.h>
void wall_street_bet(double *prices,int length){
    double buy[2]={0,0};
    double sell[2]={0,0};
    double diff=0;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}
",0
thar970,1695140216,2,"#include <stdio.h>
void wall_street_bet(double *prices,int length){
    double buy[2]={0,0};
    double sell[2]={0,0};
    double diff=0;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}
",0
thar970,1695140426,3,"#include <stdio.h>
void wall_street_bet(double *prices,int length){
    double buy[2]={0,0};
    double sell[2]={0,0};
    double diff=0;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}
",0
thar970,1695140761,4,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2]={0,0};
    double sell[2]={0,0};
    double diff=0;
    int days=length;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff&&j-i<days){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
               days=j-i;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695171127,5,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2]={0,0};
    double sell[2]={0,0};
    double diff=0;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff&&j-i<sell[1]-buy[1]){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695171174,6,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2]={0,0};
    double sell[2]={0,0};
    double diff=0;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695171321,7,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695171468,8,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=NULL;
    int daysDiff;
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff&&(daysDiff==NULL||j-i<daysDiff)){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
               daysDiff=j-i;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695171529,9,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;
    int daysDiff;
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff&&(daysDiff==0||j-i<daysDiff)){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
               daysDiff=j-i;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695171555,10,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;
    int daysDiff;
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695171570,11,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;

    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695265250,12,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;
    int daysDiff;
    printf(""%d"",daysDiff);
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695265287,13,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;
    int daysDiff=NULL;
    printf(""%d"",daysDiff);
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
               diff= prices[j]-prices[i];
               buy[0]=prices[i];
               buy[1]=i;
               sell[0]=prices[j];
               sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695265619,14,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;
    int daysDiff=length;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff && j-i<daysDiff ){
                daysDiff=j-i;
                diff= prices[j]-prices[i];
                buy[0]=prices[i];
                buy[1]=i;
                sell[0]=prices[j];
                sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695265683,15,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;
    int daysDiff=length;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff && j-i<daysDiff && j!=i){
                daysDiff=j-i;
                diff= prices[j]-prices[i];
                buy[0]=prices[i];
                buy[1]=i;
                sell[0]=prices[j];
                sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695310198,16,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buy[2];
    double sell[2];
    double diff=0;
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff ){
                diff= prices[j]-prices[i];
                buy[0]=prices[i];
                buy[1]=i;
                sell[0]=prices[j];
                sell[1]=j;
            }
            // printf(""%lf,"",diff);
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695313139,17,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buySell[length][4]
    int buySellIndex=0;
    double diff=0;
    double buy[2];
    double sell[2];
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
                
                diff= prices[j]-prices[i];
                buySell[buySellIndex][0]=prices[i];
                buySell[buySellIndex][1]=i;
                buySell[buySellIndex][2]=prices[j];
                buySell[buySellIndex][3]=j;
                buySellIndex++;
            }
        }
    }
    buy[0]=buySell[0][0];
    buy[1]=buySell[0][1];
    sell[0]=buySell[0][2];
    sell[1]=buySell[0][3];
    
    for(int i=0;i<=buySellIndex;i++){
        if(sell[1]-buy[1]<buySell[i][3]-buySell[i][1]){
            buy[0]=buySell[i][0];
            buy[1]=buySell[i][1];
            sell[0]=buySell[i][2];
            sell[1]=buySell[i][3]; 
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thar970,1695313712,18,"#include <stdio.h>
#include <stdlib.h>
void wall_street_bet(double *prices,int length){
    double buySell[length][4];
    int buySellIndex=0;
    double diff=0;
    double buy[2];
    double sell[2];   
    
    for(int i=0;i<length;i++){
        for(int j=i;j<length;j++){
            // printf(""%lf,%lf\n"",prices[j],prices[i]);
            if(prices[j]-prices[i]>=diff){
                
                diff= prices[j]-prices[i];
                buySell[buySellIndex][0]=prices[i];
                buySell[buySellIndex][1]=i;
                buySell[buySellIndex][2]=prices[j];
                buySell[buySellIndex][3]=j;
                buySellIndex++;
            }
        }
    }
    buy[0]=buySell[0][0];
    buy[1]=buySell[0][1];
    sell[0]=buySell[0][2];
    sell[1]=buySell[0][3];
    
    for(int i=0;i<=buySellIndex;i++){
        if(sell[1]-buy[1]<buySell[i][3]-buySell[i][1]){
            buy[0]=buySell[i][0];
            buy[1]=buySell[i][1];
            sell[0]=buySell[i][2];
            sell[1]=buySell[i][3]; 
        }
    }
    if(diff==0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %.0lf\nSell @ %.2lf on %.0lf"",buy[0],buy[1],sell[0],sell[1]);
    }
    
}",0
thua238,1695632998,1,"void wall_street_bet(double *prices, int length)
{
	//initialise buy/sell days
	int buy = 0;
	int sell = 0;

	//loop through every possible buy day
	int i = 0;
	for (i=0; i<length; i++) {
		//loop through every possible sell day for buy day i
		int j = i;
		for (j=i; j<length; j++) {
			//if greater price difference, replace buy/sell days
			if ((prices[j]-prices[i]) > (prices[sell]-prices[buy])) {
				buy = i;
				sell = j;
			}
		}
	}

	//notify if no profit can be made, else display buy/sell days
	if (buy == sell) {
		printf(""Hold\n"");
	} else {
		printf(""Buy @ %.2f on %d\n"", prices[buy], buy);
		printf(""Sell @ %.2f on %d\n"", prices[sell], sell);
	}
}",0
thua238,1695634608,2,"void wall_street_bet(double *prices, int length)
{
	//initialise buy/sell days
	int buy = 0;
	int sell = length-1;

	//loop through every possible buy day
	int i;
	for (i=0; i<length; i++) {
		//loop through every possible sell day for buy day i
		int j;
		for (j=i; j<length; j++) {
			//if greater price difference or smallerinterval, replace 
			//buy/sell days
			if (((prices[j]-prices[i]) > (prices[sell]-prices[buy])) 
			|| (((prices[j]-prices[i]) == (prices[sell]-prices[buy])) 
			&& ((j-i) <= (sell-buy)))) {
				buy = i;
				sell = j;
			}
		}
	}

	//notify if no profit can be made, else display buy/sell days
	if (buy == sell) {
		printf(""Hold\n"");
	} else {
		printf(""Buy @ %.2f on %d\n"", prices[buy], buy);
		printf(""Sell @ %.2f on %d\n"", prices[sell], sell);
	}
}",1
tlu253,1695179757,1,"void wall_street_bet(double prices[], int length)
{
	// Initialise variables
	int leftDay;
	int rightDay;

	double priceDiff = 0;
	int dayDiff = 0;

	int lowestDay = 0;
	double lowestPrice = -1;
	int highestDay = 0;
	double highSellPrice = -1;

	double maxProfit = 0;
	int minDayDiff = length - 1;

	// find maxProfit by finding max differences
	for (leftDay = 0; leftDay <= length - 2; leftDay++) {
		
		for (rightDay = leftDay + 1; rightDay <= length - 1; rightDay++) {
			priceDiff = prices[rightDay] - prices[leftDay];
			dayDiff = rightDay - leftDay;
			
			if ((priceDiff > maxProfit) || (priceDiff == maxProfit && dayDiff < minDayDiff)) {
				
				maxProfit = priceDiff;
				minDayDiff = dayDiff;
				lowestDay = leftDay;
				highestDay = rightDay;
				lowestPrice = prices[leftDay];
				highSellPrice = prices[rightDay];

			}

		}
	}
	
	


	if (maxProfit == 0) { // print ""hold"" if no profit can be made
		printf(""Hold\n"");
	}	else {
		printf(""Buy @ %.2f on %d\n"", lowestPrice, lowestDay);
		printf(""Sell @ %.2f on %d\n"", highSellPrice, highestDay);
	}

}",1
tmen190,1695024878,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//	wall_street_bet is a function that finds when best to buy and sell to maximize profit, or hold when there will be 
//	no profit given prices on days.
//
//	Input:
//	prices = An array of doubles representing prices
//	length = The number of elements in the array
// 
//	Output:
//	Displays when best to buy and sell to maximize profit, or hold when there will be no profit

int wall_street_bet(double prices[], int length) {
	// Declare important variables
	int buyDay = 0;
	int sellDay = 1;
	double gain = 0;
	int dayDist = 0;

	// Check each day for buying
	for (int i = 0; i < length-1; i++)
	{
		// Check each subsequent day for selling
		for (int j = i+1; j < length; j++)
		{
			// Compare if higher profits are found
			if (prices[j]-prices[i]>gain)
			{
				// Store important details regarding better profit prediction
				gain = prices[j] - prices[i];
				buyDay = i;
				sellDay = j;
				dayDist = j - i;
			}
			// If equal profit is found, select pairs of date with shorter period
			else if ((prices[j] - prices[i] == gain) && (j - i < dayDist))
			{
				// Store important details regarding better profit prediction
				buyDay = i;
				sellDay = j;
				dayDist = j - i;
			}
		}

	}

	// Check if profit is possible
	if (gain>0)
	{
		printf(""Buy @ %.2f on %d\n"", prices[buyDay], buyDay);
		printf(""Sell @ %.2f on %d\n"", prices[sellDay], sellDay);
	}
	else
	{
		printf(""Hold\n"");
	}
	

	return -1;
}",1
tqhu735,1695008883,1,"#define _CRT_INCLUDE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
	double lowest = prices[0], highest;
	int lowestDay = 1, highestDay;

	for (int i = 1; i < length; i++) {
		if (prices[i] < lowest) {
			lowest = prices[i];
			lowestDay = i;
		}
	}
	
	highest = prices[lowestDay + 1];
	highestDay = lowestDay + 1;
	for (int i = lowestDay + 2; i < length; i++) {
		if (prices[i] > highest) {
			highest = prices[i];
			highestDay = i;
		}
	}

	if (highest - lowest < 0) {
		printf(""Hold"");
		return;
	}

	printf(""Buy @ %.2lf on %d\n"", lowest, lowestDay);
	printf(""Sell @ %.2lf on %d\n"", highest, highestDay);

	return;
}",0
tyou333,1695021345,1,"#include <stdio.h>

void wall_street_bet(double const array[], int numberOfElements) {
    int i;

    double storeNumber = array[0];
    int storeIndex;
    for (i = 0; i < numberOfElements; i++) {
        if (array[i] < storeNumber) {
            storeNumber = array[i];
            storeIndex = i;
        }
    }
    double buy[2] = {storeNumber, storeIndex};

    for (i = storeIndex; i < numberOfElements; i++) {
        if (array[i] > storeNumber) {
            storeNumber = array[i];
            storeIndex = i;
        }
    }
    double sell[2] = {storeNumber, storeIndex};


    printf(""Buy @ %.2f on %.f\nSell @ %.2f on %.f\n"", buy[0], buy[1], sell[0], sell[1]);
}",0
tyou333,1695023114,2,"#include <stdio.h>

void wall_street_bet(double const array[], int numberOfElements) {
    int i;
    int j;
    double buy[2];
    double sell[2];

    double storeDifference = 0;
    int storeIndex = numberOfElements;

    for (i = 0; i < numberOfElements; i++) {
        for (j = i; j < numberOfElements; j++) {
            if (storeDifference <= array[j] - array[i]) {
                storeDifference = array[j] - array[i];
                buy[0] = array[i];
                sell[0] = array[j];
                if (storeIndex > j - i) {
                    storeIndex = j - i;
                    buy[1] = i;
                    sell[1] = j;
                }
            }
        }
    }

    if (buy[0] == sell[0]) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %.f\nSell @ %.2f on %.f\n"", buy[0], buy[1], sell[0], sell[1]);
    }




}

int main(void) {
    double array[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(array, 10);
}",0
tyou333,1695023127,3,"#include <stdio.h>

void wall_street_bet(double const array[], int numberOfElements) {
    int i;
    int j;
    double buy[2];
    double sell[2];

    double storeDifference = 0;
    int storeIndex = numberOfElements;

    for (i = 0; i < numberOfElements; i++) {
        for (j = i; j < numberOfElements; j++) {
            if (storeDifference <= array[j] - array[i]) {
                storeDifference = array[j] - array[i];
                buy[0] = array[i];
                sell[0] = array[j];
                if (storeIndex > j - i) {
                    storeIndex = j - i;
                    buy[1] = i;
                    sell[1] = j;
                }
            }
        }
    }

    if (buy[0] == sell[0]) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %.f\nSell @ %.2f on %.f\n"", buy[0], buy[1], sell[0], sell[1]);
    }
}
",0
tyou333,1695023482,4,"#include <stdio.h>

void wall_street_bet(double const array[], int numberOfElements) {
    int i;
    int j;
    double buy[2];
    double sell[2];

    double storeDifference = 0;
    int storeIndex = numberOfElements;

    for (i = 0; i < numberOfElements; i++) {
        for (j = i; j < numberOfElements; j++) {
            if (storeDifference < array[j] - array[i]) {
                storeDifference = array[j] - array[i];
                buy[0] = array[i];
                buy[1] = i;
                sell[0] = array[j];
                sell[1] = j;
                storeIndex = j - i;
            } else if (storeDifference == array[j] - array[i] && storeIndex > j - i) {
                buy[0] = array[i];
                buy[1] = i;
                sell[0] = array[j];
                sell[1] = j;
                storeIndex = j - i;
            }
        }
    }

    if (buy[0] == sell[0]) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %.f\nSell @ %.2f on %.f\n"", buy[0], buy[1], sell[0], sell[1]);
    }
}",1
tyou421,1695330779,1,"void wall_street_bet(double* prices, int length)
{
	int i;
	double MinSoFar = prices[0];
	int SellDay;
	int BuyDay;
	int DayAfter;

	for (i = 0; i < length; i++)
	{
		if (MinSoFar > prices[i])
		{
			MinSoFar = prices[i];
			BuyDay = i;
			DayAfter = BuyDay + 1;
		}

	}


	double MaxSoFar = prices[DayAfter];
	for (i = DayAfter; i < length; i++)
	{
		if (MaxSoFar < prices[i])
		{
			MaxSoFar = prices[i];
			SellDay = i;
		}
	}


	if (MinSoFar > MaxSoFar)
	{
		printf(""Hold"");
	}
	else 
	{
		printf(""Buy @ %.2f on %d\n"", MinSoFar, BuyDay);
		printf(""Sell @ %.2f on %d\n"", MaxSoFar, SellDay);
	}

}",0
tzha578,1695017834,1,"#include <stdio.h>
int wall_street_bet(double array[], double number){
    double earn = 0;
    for (int i = 0;i<number; ++i){
        int buying = array[i];
        
        
        for(int j = 0;j<number - i - 1;++j){

            if(array[j] - buying > earn){
                earn = array[j] - buying;
            }
            
        }
        
    }
    return earn;
}",0
tzha578,1695079378,2,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    double positionarray[number];
    double earnarray[number];
    double max = 0.0;
    int position1,position2;
    for(int i = 0 ; i < number ; ++i){
        double buying = array[i];
        
        for(int j = i + 1 ; j < number - i - 1 ; ++j){
            
            if(array[j] > max){
                max = array[j];
                positionarray[i] = j;
                position1 = i;
            }
            
            
        }
        earnarray[i] = max - array[i];
    }
    for (int k = 0; k < sizeof(earnarray) / sizeof(earnarray[0]) ; ++k){
        max = 0.0;
        if(earnarray[k] > max){
            max = earnarray[k];
            position2 = k;
        }
        
    }
    if(max == 0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",array[position1],position1,array[position2],position2);
    }
}    

    
    int main(){
        double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
        wall_street_bet(pricesB, 10);
    return 0;
    }



",0
tzha578,1695079391,3,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    double positionarray[number];
    double earnarray[number];
    double max = 0.0;
    int position1,position2;
    for(int i = 0 ; i < number ; ++i){
        double buying = array[i];
        
        for(int j = i + 1 ; j < number - i - 1 ; ++j){
            
            if(array[j] > max){
                max = array[j];
                positionarray[i] = j;
                position1 = i;
            }
            
            
        }
        earnarray[i] = max - array[i];
    }
    for (int k = 0; k < sizeof(earnarray) / sizeof(earnarray[0]) ; ++k){
        max = 0.0;
        if(earnarray[k] > max){
            max = earnarray[k];
            position2 = k;
        }
        
    }
    if(max == 0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",array[position1],position1,array[position2],position2);
    }
}    

  ",0
tzha578,1695079429,4,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    double positionarray[number];
    double earnarray[number];
    double max = 0.0;
    int position1,position2;
    for(int i = 0 ; i < number ; ++i){
        double buying = array[i];
        
        for(int j = i + 1 ; j < number - i - 1 ; ++j){
            
            if(array[j] > max){
                max = array[j];
                positionarray[i] = j;
                position1 = i;
            }
            
            
        }
        earnarray[i] = max - array[i];
    }
    for (int k = 0; k < sizeof(earnarray) / sizeof(earnarray[0]) ; ++k){
        max = 0.0;
        if(earnarray[k] > max){
            max = earnarray[k];
            position2 = k;
        }
        
    }
    if(max == 0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",array[position1],position1,array[position2],position2);
    }
}    
",0
tzha578,1695082865,5,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number ; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - i ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number ; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(max == 0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}",0
tzha578,1695082893,6,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number ; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - i ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number ; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(max == 0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}",0
tzha578,1695085834,7,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number - 1; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1 ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number - 1; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(max == 0){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}",0
tzha578,1695085920,8,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number - 1; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1 ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number - 1; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(max == array[0]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}",0
tzha578,1695085971,9,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number - 1; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1 ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number - 1; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(max == array[0]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position - 1,array[index],position2[position] - 1);
    }
    return 0;
}",0
tzha578,1695085991,10,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number - 1; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1 ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number - 1; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(max == array[0]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}",0
tzha578,1695086233,11,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1 ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(max == array[0]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}",0
tzha578,1695086311,12,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1 ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(position = position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695086330,13,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1 ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(position == position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695086451,14,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number; ++i){
        max = array[i];
        for (int j = i + 1 ; j  number; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(position == position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695086464,15,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number; ++i){
        max = array[i];
        for (int j = i + 1 ; j < number; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(position == position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695086706,16,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 1];
    double earnarray[number - 1];

    for (int i = 0 ; i < number; ++i){
        max = array[i];
        for (int j = i + 1 ; j < number; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position] + 1;
    if(position == position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position + 1,array[index],position2[position] + 1);
    }
    return 0;
}


",0
tzha578,1695086877,17,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i < number; ++i){
        max = array[i];
        for (int j = i + 1 ; j < number; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(position == position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695086964,18,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i < number - 1; ++i){
        max = array[i];
        for (int j = i + 1 ; j < number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number - 1; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(position == position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695088226,19,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i < number - 1; ++i){
        max = array[i];
        for (int j = i + 1 ; j < number ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number - 1; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(position == position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695088280,20,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i < number - 1; ++i){
        max = array[i];
        for (int j = i + 1 ; j < number ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number - 1; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] <= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695088392,21,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i < number - 1; ++i){
        max = array[i];
        for (int j = i + 1 ; j < number ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i < number - 1; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695088628,22,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j < number ; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695088688,23,"#include <stdio.h>
int wall_street_bet(double array[], int number)#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


        


",0
tzha578,1695088723,24,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}



",0
tzha578,1695088968,25,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 2; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
    }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695090186,26,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 2; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        for (int i = 0 ; i <= number - 2; ++i){
            printf(earnarray[i]);
        }
    }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695090212,27,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 2; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        for (int i = 0 ; i <= number - 2; ++i){
            printf(""%i"",earnarray[i]);
        }
    }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695090225,28,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 2; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        for (int i = 0 ; i <= number - 2; ++i){
            printf(""%.2lf"",earnarray[i]);
        }
    }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695090258,29,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 2; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        for (int i = 0 ; i <= number - 2; ++i){
            printf(""%.2lf\n"",earnarray[i]);
        }
    }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695090405,30,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod,position2[number - 2];
    double earnarray[number - 2];

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 2; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    for (int i = 0 ; i <= number - 2; ++i){
            printf(""%.2lf\n"",earnarray[i]);
        }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695090857,31,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod;
    double earnarray[number - 2];
    int position2[number - 1] = {0};
    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    for (int i = 0 ; i <= number - 2; ++i){
            printf(""%.2lf\n"",earnarray[i]);
        }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695091006,32,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int max,position,period,index,compareperiod;
    double earnarray[number - 2];
    int position2[number - 1];

    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }

    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    for (int i = 0 ; i <= number - 2; ++i){
            printf(""%.2lf\n"",earnarray[i]);
        }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695091499,33,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];

    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    for (int i = 0 ; i <= number - 2; ++i){
            printf(""%.2lf\n"",earnarray[i]);
        }
    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695091543,34,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];

    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }

    max = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max){
            max = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max && max != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092074,35,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];

    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092210,36,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    printf(""a"");
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092281,37,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092396,38,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    printf("""");
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092408,39,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092490,40,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    printf();
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092523,41,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092598,42,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    char a = 0;
    printf(""%c"", a);
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092632,43,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    char a = 8;
    printf(""1%c"", a);
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092693,44,"
int wall_street_bet(double array[], int number){
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092709,45,"#include <stdio.h>
int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092791,46,"int wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092853,47,"int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    double earnarray[number - 2],max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695092968,48,"int wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093259,49,"#define PI 3.14159

int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093337,50,"
int wall_street_bet(double array[], int number){
    printf(""\n"");
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093384,51,"
int wall_street_bet(double array[], int number){
    printf(""\n"");
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || array[position] >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093394,52,"
int wall_street_bet(double array[], int number){
    printf(""\n"");
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] && array[position] >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093425,53,"
int wall_street_bet(double array[], int number){
    printf(""\n"");
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || array[position] <= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093453,54,"
int wall_street_bet(double array[], int number){
    printf(""\n"");
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093502,55,"
int wall_street_bet(double array[], int number){
    printf(""\n"");
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093545,56,"
int wall_street_bet(double array[], int number){
    printf("""");
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093577,57,"
int wall_street_bet(double array[], int number){
    char a = """";
    printf(""%c"",a);
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093607,58,"
int wall_street_bet(double array[], int number){
    char* a = """";
    printf(""%c"",a);
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093678,59,"
int wall_street_bet(double array[], int number){
    char a = """";
    printf(""%s"",a);
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093780,60,"
int wall_street_bet(double array[], int number){
    char a = """";
    printf(""%c"",a);
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093796,61,"
int wall_street_bet(double array[], int number){
    char a = ""a"";
    printf(""%c"",a);
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093824,62,"
int wall_street_bet(double array[], int number){
    char a = 'a';
    printf(""%c"",a);
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093844,63,"
int wall_street_bet(double array[], int number){
    char a = 'a';
    printf(""%c"",a);
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf('Buy @ %.2lf on %i\nSell @ %.2lf on %i',
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093853,64,"
int wall_street_bet(double array[], int number){
    char a = 'a';
    printf(""%c"",a);
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093886,65,"
int wall_street_bet(double array[], int number){
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""B"")
        printf(""uy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093891,66,"
int wall_street_bet(double array[], int number){
    int position,period,index,compareperiod;
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""B"");
        printf(""uy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093963,67,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""a"");
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695093973,68,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    printf(""a"");
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094036,69,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double earnarray[1][number - 2];

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094059,70,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094316,71,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double *earnarray = (double *)malloc(number - 2 * sizeof(double));

    // Initialize the array elements to zero
    for (int i = 0; i < a; i++) {
        earnarray[i] = 0.0;
    }

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094335,72,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double *earnarray = (double *)malloc(number - 2 * sizeof(double));

    // Initialize the array elements to zero
    for (int i = 0; i < number - 2; i++) {
        earnarray[i] = 0.0;
    }

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094389,73,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double *earnarray[number - 2];

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094397,74,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094462,75,"#include <stdio.h>
#include <stdlib.h>
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094516,76,"#include <stdio.h>
#include <stdlib.h>
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    int adjusted_length = number - 2;

    // Dynamically allocate memory for the array
    double *earnarray = (double *)malloc(adjusted_length * sizeof(double));

    if (earnarray == NULL) {
        printf(""Memory allocation failed.\n"");
        exit(1);  // Exit with an error code
    }

    // Initialize the array elements to zero
    for (int i = 0; i < adjusted_length; i++) {
        earnarray[i] = 0.0;
    }

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094576,77,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    int adjusted_length = number - 2;

    // Dynamically allocate memory for the array
    double *earnarray = (double *)malloc(adjusted_length * sizeof(double));

    if (earnarray == NULL) {
        printf(""Memory allocation failed.\n"");
        exit(1);  // Exit with an error code
    }

    // Initialize the array elements to zero
    for (int i = 0; i < adjusted_length; i++) {
        earnarray[i] = 0.0;
    }

    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094602,78,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double earnarray = [number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094618,79,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094688,80,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double* earnarray = (double *)malloc((number - 2) * sizeof(double));

    if (earnarray == NULL) {
        printf(""Memory allocation failed.\n"");
        return 1;  // Return an error code
    }
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094790,81,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double* earnarray = (double *)malloc((number - 2) * sizeof(double));

    if (earnarray == NULL) {
        printf(""Memory allocation failed.\n"");
        return 1;  // Return an error code
    }
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    free(earnarray);
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094801,82,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double* earnarray = (double *)malloc((number - 2) * sizeof(double));
    free(earnarray);
    if (earnarray == NULL) {
        printf(""Memory allocation failed.\n"");
        return 1;  // Return an error code
    }
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094920,83,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double* earnarray = (double *)malloc((number - 2) * sizeof(double));
    free(earnarray);  // Issue here
    if (earnarray == NULL) {
    printf(""Memory allocation failed.\n"");
    return 1;  // Return an error code
}
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094950,84,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double* earnarray = (double *)malloc((number - 2) * sizeof(double));
    free(earnarray);  // Issue here
    
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695094986,85,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""a"");
    double* earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    // Initialize the array elements to zero
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095020,86,"
int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095117,87,"
int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    printf(""%c"", '\0');

    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095135,88,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""\0"");


    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095154,89,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""\b"");
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095190,90,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""%s"", """");

    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095217,91,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""a"");

    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095235,92,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    //printf(""a"");

    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095820,93,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    //printf(""a"");
    printf(""\\"");
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095848,94,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    //printf(""a"");
    printf(""\"");
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095951,95,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    //printf(""a"");
    printf(""%c"", '\a');
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695095983,96,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    //printf(""a"");
    printf(""%c"", '\v');
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695096004,97,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    //printf(""a"");
    printf(""%c"", '\t');
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695096070,98,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""a"");
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695096084,99,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695096417,100,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""B"");
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""uy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695096959,101,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    printf(""a"");
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695096991,102,"
int wall_street_bet(double array[], int number){
    
    int position,period,index,compareperiod;
    //printf(""a"");
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695097015,103,"
int wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695097032,104,"
int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695099415,105,"
int wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695105794,106,"
int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695105814,107,"
int wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695115895,108,"
int wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
    return 0;
}


",0
tzha578,1695188986,109,"
void wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695190292,110,"
void wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695190306,111,"
void wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695190349,112,"
void wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695191111,113,"
void wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else if{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695191132,114,"
void wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695255756,115,"
void wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695266598,116,"
void wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695266614,117,"
void wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695266659,118,"
void wall_street_bet(double array[], int number){
    printf("""");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695266682,119,"
void wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695606804,120,"
void wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695606836,121,"
void wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695606847,122,"
void wall_street_bet(double array[], int number){
    printf(""B"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""uy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695606880,123,"
void wall_street_bet(double array[], int number){
    printf("""");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695606931,124,"
void wall_street_bet(double array[], int number){
    printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
tzha578,1695608621,125,"
void wall_street_bet(double array[], int number){
    //printf(""a"");
    int position,period,index,compareperiod;
    
    double earnarray[number - 2];
    
    double max;
    int position2[number - 1];
    for (int i = 0; i < number - 1; i++) {
        position2[i] = 0;
    }




    for (int i = 0 ; i <= number - 2; ++i){
        max = array[i];
        for (int j = i + 1 ; j <= number - 1; ++j){
            if (array[j] > max){
                max = array[j];
                position2[i] = j;
            }
            
        }//this for loop used to find the max number after array[i]
        
        earnarray[i] = max - array[i];
        
    }
    
    double max2 = 0;
    for (int i = 0 ; i <= number - 2; ++i){
        if (earnarray[i] > max2){
            max2 = earnarray[i];
            position = i;
            period = position2[i] - i;
        } else if (earnarray[i] == max2 && max2 != 0){
            compareperiod = position2[i] - i;
            if (compareperiod < period){
                position = i;
            }
        }
    }
    
    index = position2[position];
    if(array[position] >= array[index] || position >= position2[position]){
        printf(""Hold"");
    }else{
        printf(""Buy @ %.2lf on %i\nSell @ %.2lf on %i"",
        array[position],position,array[index],position2[position]);
    }
}


",0
ujai264,1695177413,1,"#include <stdio.h>
int wall_street_bet(double values[], int length)
{
    int i;
    double x;
    int initIndex;
    double sell;
    int sellIndex;
    sell = 0;
    x = values[0];
    initIndex = 0;
    for (i = 0; i < length; i++) {
        if (x > values[i]) {
            x = values[i];
            initIndex = i;
        }
        

        
        
        }
    for (i = initIndex; i < length; i++){
        if (values[i] > sell){
            sell = values[i];
            sellIndex = i;
        }
    }
    
    printf(""Buy @ %.2f on %i\n"", x, initIndex);
    printf(""Sell @ %.2f on %i\n"", sell, sellIndex);",0
ujai264,1695177427,2,"int wall_street_bet(double values[], int length)
{
    int i;
    double x;
    int initIndex;
    double sell;
    int sellIndex;
    sell = 0;
    x = values[0];
    initIndex = 0;
    for (i = 0; i < length; i++) {
        if (x > values[i]) {
            x = values[i];
            initIndex = i;
        }
        

        
        
        }
    for (i = initIndex; i < length; i++){
        if (values[i] > sell){
            sell = values[i];
            sellIndex = i;
        }
    }
    
    printf(""Buy @ %.2f on %i\n"", x, initIndex);
    printf(""Sell @ %.2f on %i\n"", sell, sellIndex);",0
ujai264,1695177437,3,"void wall_street_bet(double values[], int length)
{
    int i;
    double x;
    int initIndex;
    double sell;
    int sellIndex;
    sell = 0;
    x = values[0];
    initIndex = 0;
    for (i = 0; i < length; i++) {
        if (x > values[i]) {
            x = values[i];
            initIndex = i;
        }
        

        
        
        }
    for (i = initIndex; i < length; i++){
        if (values[i] > sell){
            sell = values[i];
            sellIndex = i;
        }
    }
    
    printf(""Buy @ %.2f on %i\n"", x, initIndex);
    printf(""Sell @ %.2f on %i\n"", sell, sellIndex);",0
ujai264,1695177456,4,"void wall_street_bet(double values[], int length)
{
    int i;
    double x;
    int initIndex;
    double sell;
    int sellIndex;
    sell = 0;
    x = values[0];
    initIndex = 0;
    for (i = 0; i < length; i++) {
        if (x > values[i]) {
            x = values[i];
            initIndex = i;
        }
        

        
        
        }
    for (i = initIndex; i < length; i++){
        if (values[i] > sell){
            sell = values[i];
            sellIndex = i;
        }
    
    
    printf(""Buy @ %.2f on %i\n"", x, initIndex);
    printf(""Sell @ %.2f on %i\n"", sell, sellIndex);
    }",0
ujai264,1695177474,5,"int wall_street_bet(double values[], int length)
{
    int i;
    double x;
    int initIndex;
    double sell;
    int sellIndex;
    sell = 0;
    x = values[0];
    initIndex = 0;
    for (i = 0; i < length; i++) {
        if (x > values[i]) {
            x = values[i];
            initIndex = i;
        }
        

        
        
        }
    for (i = initIndex; i < length; i++){
        if (values[i] > sell){
            sell = values[i];
            sellIndex = i;
        }
    }
    
    printf(""Buy @ %.2f on %i\n"", x, initIndex);
    printf(""Sell @ %.2f on %i\n"", sell, sellIndex);
}",0
ujai264,1695177487,6,"void wall_street_bet(double values[], int length)
{
    int i;
    double x;
    int initIndex;
    double sell;
    int sellIndex;
    sell = 0;
    x = values[0];
    initIndex = 0;
    for (i = 0; i < length; i++) {
        if (x > values[i]) {
            x = values[i];
            initIndex = i;
        }
        

        
        
        }
    for (i = initIndex; i < length; i++){
        if (values[i] > sell){
            sell = values[i];
            sellIndex = i;
        }
    }
    
    printf(""Buy @ %.2f on %i\n"", x, initIndex);
    printf(""Sell @ %.2f on %i\n"", sell, sellIndex);
}",0
vwu693,1695597897,1,a,0
wany079,1695526419,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double* prices, int length)
{
	// Variable declaraion
	int i;
	int j;
	int k;
	int dayBuy;
	int daySell;
	double profit;
	double largestProfit;

	dayBuy = 0;
	daySell = 0;

	largestProfit = prices[0] - prices[0]; // initially zero profit

	for (i = 0; i < length; i++) {
		for (j = i; j < length; j++) {
			profit = prices[j] - prices[i];
			if (profit > largestProfit) {
				largestProfit = profit;
				dayBuy = i;
				daySell = j;
			}
		}
	}
	// If profit is not possible
	if (dayBuy == daySell) {
		printf(""Hold"");
	}
	// If profit is possible
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[dayBuy], dayBuy);
		printf(""Sell @ %.2lf on %d\n"", prices[daySell], daySell);
	}

}",0
wany079,1695526438,2,"#include <stdio.h>

void wall_street_bet(double* prices, int length)
{
	// Variable declaraion
	int i;
	int j;
	int k;
	int dayBuy;
	int daySell;
	double profit;
	double largestProfit;

	dayBuy = 0;
	daySell = 0;

	largestProfit = prices[0] - prices[0]; // initially zero profit

	for (i = 0; i < length; i++) {
		for (j = i; j < length; j++) {
			profit = prices[j] - prices[i];
			if (profit > largestProfit) {
				largestProfit = profit;
				dayBuy = i;
				daySell = j;
			}
		}
	}
	// If profit is not possible
	if (dayBuy == daySell) {
		printf(""Hold"");
	}
	// If profit is possible
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[dayBuy], dayBuy);
		printf(""Sell @ %.2lf on %d\n"", prices[daySell], daySell);
	}

}",0
wany079,1695526518,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double* prices, int length)
{
	// Variable declaraion
	int i;
	int j;
	int dayBuy;
	int daySell;
	double profit;
	double largestProfit;

	dayBuy = 0;
	daySell = 0;

	largestProfit = prices[0] - prices[0]; // initially zero profit

	for (i = 0; i < length; i++) {
		for (j = i; j < length; j++) {
			profit = prices[j] - prices[i];
			if (profit > largestProfit) {
				largestProfit = profit;
				dayBuy = i;
				daySell = j;
			}
		}
	}
	// If profit is not possible
	if (dayBuy == daySell) {
		printf(""Hold"");
	}
	// If profit is possible
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[dayBuy], dayBuy);
		printf(""Sell @ %.2lf on %d\n"", prices[daySell], daySell);
	}

}",0
wany079,1695529475,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double* prices, int length)
{
	// Variable declaraion
	int i;
	int j;
	int timePeriod = length;
	int dayBuy = 0;
	int daySell = 0;
	double profit;
	double largestProfit = prices[0] - prices[0]; // set initial profit as zero

	for (i = 0; i < length; i++) {
		for (j = i; j < length; j++) {
			profit = prices[j] - prices[i];
			if (profit > largestProfit) {
				largestProfit = profit;
				dayBuy = i;
				daySell = j;
				timePeriod = daySell - dayBuy;
			} else if(profit == largestProfit && j - i < timePeriod) {
				dayBuy = i;
				daySell = j;
			}
		}
	}

	// If profit is not possible
	if (dayBuy == daySell) {
		printf(""Hold"");
	}
	// If profit is possible
	else {
		printf(""Buy @ %.2lf on %d\n"", prices[dayBuy], dayBuy);
		printf(""Sell @ %.2lf on %d\n"", prices[daySell], daySell);
	}

}",1
wany722,1695182984,1,"#include<stdio.h>
void wall_street_bet(double p[], n)
{
    double min = 1e6, max = 0;
    int i, min_i, max_i;
    for (i = 0;i < n;i++)
    {
        if(p[i]<min)
        {
            min = p[i];
        }
    }
    i = 0
    while (i < n)
    {
        if (p[i]==min){
            break;
        }
        i++;
    }
    min_i = i;
    while (i < n){
        if (p[i]>max){
            max = p[i];
        }
        i++;
    }
    for(i = min_i; i<n; i++){
        if (p[i]==max){
            break;
        }
    }
    max_i = i;
    printf(""Buy @ %.2lf on %d\n"",min, min_i);
    printf(""Sell @ %.2lf on %d"", max, max_i);
}",0
wany722,1695182996,2,"#include<stdio.h>
void wall_street_bet(double p[], int n)
{
    double min = 1e6, max = 0;
    int i, min_i, max_i;
    for (i = 0;i < n;i++)
    {
        if(p[i]<min)
        {
            min = p[i];
        }
    }
    i = 0
    while (i < n)
    {
        if (p[i]==min){
            break;
        }
        i++;
    }
    min_i = i;
    while (i < n){
        if (p[i]>max){
            max = p[i];
        }
        i++;
    }
    for(i = min_i; i<n; i++){
        if (p[i]==max){
            break;
        }
    }
    max_i = i;
    printf(""Buy @ %.2lf on %d\n"",min, min_i);
    printf(""Sell @ %.2lf on %d"", max, max_i);
}",0
wany722,1695183009,3,"#include<stdio.h>
void wall_street_bet(double p[], int n)
{
    double min = 1e6, max = 0;
    int i, min_i, max_i;
    for (i = 0;i < n;i++)
    {
        if(p[i]<min)
        {
            min = p[i];
        }
    }
    i = 0;
    while (i < n)
    {
        if (p[i]==min){
            break;
        }
        i++;
    }
    min_i = i;
    while (i < n){
        if (p[i]>max){
            max = p[i];
        }
        i++;
    }
    for(i = min_i; i<n; i++){
        if (p[i]==max){
            break;
        }
    }
    max_i = i;
    printf(""Buy @ %.2lf on %d\n"",min, min_i);
    printf(""Sell @ %.2lf on %d"", max, max_i);
}",0
wmas516,1695441252,1,"int wall_street_bet(double* prices, int length) {
	int temp = 0;
	float tempDiff = 0;
	float diff = 0;
	int buy = 0;
	int sell = 0;
	for (int i = 0; i < length; i++) {
		//check if the largest value in the array is at an unavalible index
		if ((i != temp)&&(i!=0)) {
			if ((temp < i) | (i == 0)) {
				//zero temp
				temp = i;
				//for every avalible value determine the greatest value
				for (int j = i + 1; j < (length); j++) {
					if (*(prices + temp) < *(prices + j)) {
						temp = j;
					}
				}
			}
			//find the profit margin
			tempDiff = ((*(prices + temp)) - (*(prices + i)));
			//determine if the profit margin is better than what was the best profit margin
			if (diff < tempDiff) {
				//store the values
				diff = tempDiff;
				buy = i;
				sell = temp;
			}
			else if (diff == tempDiff) {
				if ((temp - i) < (sell - buy)) {
					//store the values
					diff = tempDiff;
					buy = i;
					sell = temp;
				}
			}
		}
	} 
	if (sell != 0) {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", *(prices + buy), buy, *(prices + sell), sell);
	}
	else {
		printf(""Hold"");
	}
	return(0);
}",0
wmas516,1695441404,2,"int wall_street_bet(double* prices, int length) {
	int temp = 0;
	float tempDiff = 0;
	float diff = 0;
	int buy = 0;
	int sell = 0;
	for (int i = 0; i < length; i++) {
		//check if the largest value in the array is at an unavalible index
		if ((i != temp)||(i==0)) {
			if ((temp < i) | (i == 0)) {
				//zero temp
				temp = i;
				//for every avalible value determine the greatest value
				for (int j = i + 1; j < (length); j++) {
					if (*(prices + temp) < *(prices + j)) {
						temp = j;
					}
				}
			}
			//find the profit margin
			tempDiff = ((*(prices + temp)) - (*(prices + i)));
			//determine if the profit margin is better than what was the best profit margin
			if (diff < tempDiff) {
				//store the values
				diff = tempDiff;
				buy = i;
				sell = temp;
			}
			else if (diff == tempDiff) {
				if ((temp - i) < (sell - buy)) {
					//store the values
					diff = tempDiff;
					buy = i;
					sell = temp;
				}
			}
		}
	} 
	if (sell != 0) {
		printf(""Buy @ %.2f on %d\nSell @ %.2f on %d"", *(prices + buy), buy, *(prices + sell), sell);
	}
	else {
		printf(""Hold"");
	}
	return(0);
}",1
wwan296,1695272398,1,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double profit;
	int buy;
	int sell;
	for (int i = 0; i < length; i++) {
		for (int j = i; j < length; j++) {
			double checker = prices[i] - prices[j];
			if (checker < profit) {
				profit = checker;
				buy = i+1;
				sell = j+1;
			}
			else if (checker == profit) {
				if ((sell - buy) > (j - i)) {
					buy = i + 1;
					sell = j + 1;
				}
			}
		}
	}
	if (profit < 0) {
		printf(""Buy @ %.2f on %d\n"", prices[buy - 1], buy);
		printf(""Sell @ %.2f on %d\n"", prices[sell - 1], sell);
	}
	else {
		printf(""Hold"");
	}
}",0
wwan296,1695272630,2,"#include <stdio.h>

void wall_street_bet(double prices[], int length)
{
	double profit;
	int buy;
	int sell;
	for (int i = 0; i < length; i++) {
		for (int j = i; j < length; j++) {
			double checker = prices[i] - prices[j];
			if (checker < profit) {
				profit = checker;
				buy = i;
                sell = j;
				//buy = i + 1;
				//sell = j + 1;
			}
			else if (checker == profit) {
				if ((sell - buy) > (j - i)) {
				    buy = i;
                    sell = j;
					//buy = i + 1;
					//sell = j + 1;
				}
			}
		}
	}
	if (profit < 0) {
	    printf(""Buy @ %.2f on %d\n"", prices[buy], buy);
        printf(""Sell @ %.2f on %d\n"", prices[sell], sell);
		//printf(""Buy @ %.2f on %d\n"", prices[buy - 1], buy);
		//printf(""Sell @ %.2f on %d\n"", prices[sell - 1], sell);
	}
	else {
		printf(""Hold"");
	}
}",1
wwon485,1695468004,1,"void wall_street_bet(double *prices, int length) {
    double largestDifference = -1;
    int smallPos = -1;
    int largePos = -1;
    
    // Finds the biggest possible price
    for (int i = 0; i < length; i++) {
        for (int j = 0; j < length; j++) {
            if (i >= j) { 
                continue;
            }

            if (prices[j] - prices[i] > largestDifference && prices[j] - prices[i] > 0) {
                largestDifference = prices[j] - prices[i];
                smallPos = i;
                largePos = j;
            }
        }
        
    }

    // Checks if the price is right to sell
    if (largePos == -1 || smallPos == -1) {
        printf(""Hold"");
    }else {
        printf(""Buy @ %.2lf on %d\n"", prices[smallPos], smallPos);
        printf(""Sell @ %.2lf on %d"", prices[largePos], largePos);
    }
}",0
wwon485,1695468218,2,"void wall_street_bet(double *prices, int length){
    double largestDifference = -1;
    int smallPos = -1;
    int largePos = -1;
    int dayDifference = 0;

    // Finds the biggest possible price
    for (int i = 0; i < length; i++){
        for (int j = 0; j < length; j++){
            if (i >= j){
                continue;
            }

            if (prices[j] - prices[i] > largestDifference && prices[j] - prices[i] > 0){
                largestDifference = prices[j] - prices[i];
                smallPos = i;
                largePos = j;
                dayDifference = j - i;
            } else if (prices[j] - prices[i] > largestDifference && i - j < dayDifference){
                largestDifference = prices[j] - prices[i];
                smallPos = i;
                largePos = j;
                dayDifference = j - i;
            }
        }
    }

    // Checks if the price is right to sell
    if (largePos == -1 || smallPos == -1){
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %d\n"", prices[smallPos], smallPos);
        printf(""Sell @ %.2lf on %d"", prices[largePos], largePos);
    }
}",0
wwon485,1695468286,3,"void wall_street_bet(double *prices, int length){
    double largestDifference = -1;
    int smallPos = -1;
    int largePos = -1;
    int dayDifference = 0;

    // Finds the biggest possible price
    for (int i = 0; i < length; i++){
        for (int j = 0; j < length; j++){
            if (i >= j){
                continue;
            }

            if (prices[j] - prices[i] > largestDifference && prices[j] - prices[i] > 0){
                largestDifference = prices[j] - prices[i];
                smallPos = i;
                largePos = j;
                dayDifference = j - i;
            } else if (prices[j] - prices[i] == largestDifference && j - i < dayDifference){
                largestDifference = prices[j] - prices[i];
                smallPos = i;
                largePos = j;
                dayDifference = j - i;
            }
        }
    }

    // Checks if the price is right to sell
    if (largePos == -1 || smallPos == -1){
        printf(""Hold"");
    }
    else{
        printf(""Buy @ %.2lf on %d\n"", prices[smallPos], smallPos);
        printf(""Sell @ %.2lf on %d"", prices[largePos], largePos);
    }
}",1
wyan309,1695633253,1,s,0
xli330,1695288672,1,"#include <stdio.h>

void wall_street_bet(double *prices , int length) {
    int buyDay, sellDay, i, j;
    double diffVal, tempDiff;
    diffVal = 0;
    tempDiff = 0;

    // Loop through values inside the array from right to left side, last value exclusive.
    for (i = length - 1; i > 0; i--) {

        // Loop from the value next to i, through all reaming values.
        for (j = i - 1; j >= 0; j--) {

            // Enter the following condition check only if the number on the right is greater than the left.
            if (prices[i] > prices[j]) {

                // Calculate difference value and store it into a variable;
                tempDiff = prices[i] - prices[j];

                // If the number on the right is greater than the number on the left.
                if ( tempDiff > diffVal ) {

                    // Record the new difference value, the position of the two numbers.
                    diffVal = tempDiff;
                    sellDay = i;
                    buyDay = j;
                }

                // if the two numbers has a equal difference value and they are closer on position.
                if ( (tempDiff == diffVal) && ( (j - i) < (sellDay - buyDay) ) ) {
                        
                        // Record the positions of two closer numbers.
                        sellDay = i;
                        buyDay = j;
                }
            }
        }
    }

    // Print ""Hold"" on command line if the numbers inside are decreasing from left to right.
    if (diffVal == 0) {
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices [buyDay], buyDay, prices [sellDay], sellDay);
    }
}",0
xli330,1695289329,2,"#include <stdio.h>

void wall_street_bet(double *prices , int length) {
    int buyDay, sellDay, i, j;
    double diffVal, tempDiff;
    diffVal = 0;
    tempDiff = 0;

    // Loop through values inside the array from right to left side, last value exclusive.
    for (i = length - 1; i > 0; i--) {

        // Loop from the value next to i, through all reaming values.
        for (j = i - 1; j >= 0; j--) {

            // Enter the following condition check only if the number on the right is greater than the left.
            if (prices[i] > prices[j]) {

                // Calculate difference value and store it into a variable;
                tempDiff = prices[i] - prices[j];

                // If the number on the right is greater than the number on the left.
                if ( tempDiff > diffVal ) {

                    // Record the new difference value, the position of the two numbers.
                    diffVal = tempDiff;
                    sellDay = i;
                    buyDay = j;
                }

                // if the two numbers has a equal difference value and they are closer on position.
                if ( (tempDiff == diffVal) && ( (i - j) < (sellDay - buyDay) ) ) {
                        
                        // Record the positions of two closer numbers.
                        sellDay = i;
                        buyDay = j;
                }
            }
        }
    }

    // Print ""Hold"" on command line if the numbers inside are decreasing from left to right.
    if (diffVal == 0) {
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices [buyDay], buyDay, prices [sellDay], sellDay);
    }
}",1
xli330,1695292120,3,"#include <stdio.h>

void wall_street_bet(double *prices , int i) {
    int buyDay, sellDay, j;
    double diffVal, tempDiff;
    diffVal = 0;

    // Loop through values inside the array from right to left side, last value exclusive.
    for (i -= 1; i > 0; i--) {

        // Loop from the value next to i, through all reaming values.
        for (j = i - 1; j >= 0; j--) {

            // Enter the following condition check only if the number on the right is greater than the left.
            if (prices[i] > prices[j]) {

                // Calculate difference value and store it into a variable;
                tempDiff = prices[i] - prices[j];

                // If the number on the right is greater than the number on the left.
                if ( tempDiff > diffVal ) {

                    // Record the new difference value, the position of the two numbers.
                    diffVal = tempDiff;
                    sellDay = i;
                    buyDay = j;
                }

                // if the two numbers has a equal difference value and they are closer on position.
                if ( (tempDiff == diffVal) && ( (i - j) < (sellDay - buyDay) ) ) {
                        
                        // Record the positions of two closer numbers.
                        sellDay = i;
                        buyDay = j;
                }
            }
        }
    }

    // Print ""Hold"" on command line if the numbers inside are decreasing from left to right.
    if (diffVal == 0) {
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    }
}",1
xli330,1695293149,4,"#include <stdio.h>

void wall_street_bet(double *prices , int i) {
    int buyDay, sellDay, j;
    double diffVal, tempDiff;
    diffVal = 0;

    // Loop through values inside the array from right to left side, last value exclusive.
    for (i -= 1; i > 0; i--) {

        // Loop from the value next to i, through all reaming values.
        for (j = i - 1; j >= 0; j--) {

            // Enter the following condition check only if the number on the right is greater than the left.
            if (prices[i] > prices[j]) {

                // Calculate difference value and store it into a variable;
                tempDiff = prices[i] - prices[j];

                // If the number on the right is greater than the number on the left.
                if ( tempDiff > diffVal ) {

                    // Record the new difference value, the position of the two numbers.
                    diffVal = tempDiff;
                    sellDay = i;
                    buyDay = j;
                }

                // if the two numbers has an equal difference value and they are closer on position.
                if ( (tempDiff == diffVal) && ( (i - j) < (sellDay - buyDay) ) ) {
                        
                        // Record the positions of two closer numbers.
                        sellDay = i;
                        buyDay = j;
                }
            }
        }
    }

    // Print ""Hold"" on command line if the numbers inside are decreasing from left to right, or they are all equal.
    if (diffVal == 0) {
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    }
}",1
xli330,1695293484,5,"void wall_street_bet(double *prices , int i) {
    int buyDay, sellDay, j;
    double diffVal, tempDiff;
    diffVal = 0;

    // Loop through values inside the array from right to left side, last value exclusive.
    for (i -= 1; i > 0; i--) {

        // Loop from the value next to i, through all reaming values.
        for (j = i - 1; j >= 0; j--) {

            // Enter the following condition check only if the number on the right is greater than the left.
            if (prices[i] > prices[j]) {

                // Calculate difference value and store it into a variable;
                tempDiff = prices[i] - prices[j];

                // If the current number combination has a greater difference.
                if ( tempDiff > diffVal ) {

                    // Record the new difference value, the position of the two numbers.
                    diffVal = tempDiff;
                    sellDay = i;
                    buyDay = j;
                }

                // if the two numbers has an equal difference value and they are closer on position.
                if ( (tempDiff == diffVal) && ( (i - j) < (sellDay - buyDay) ) ) {
                        
                        // Record the positions of two closer numbers.
                        sellDay = i;
                        buyDay = j;
                }
            }
        }
    }

    // Print ""Hold"" on command line if the numbers inside are decreasing from left to right, or they are all equal.
    if (diffVal == 0) {
        printf(""Hold\n"");
    } else {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buyDay], buyDay, prices[sellDay], sellDay);
    }
}",1
ybha528,1695446115,1,"#include <stdio.h>
 
void wall_street_bet(double prices[], int length)
{
	// first find max value in array

	int max = prices[0];
	int maxIndex = 0;

	for (int i = 1; i < length; i++) {
		if (prices[i] > max) { //compare 1st element in array to rest of array
			max = prices[i]; //update max value 
			maxIndex = i + 1;
		} 
	}

	//now find minimum value in array

	int min = prices[0]; 
	int minIndex = 0;

	for (int j = 1; j < length; j++) {
		if (prices[j] < min) {
			min = prices[j];
			minIndex = j + 1;
		}
	}

	if (max == min) {
		printf(""Hold"");
	}

	printf(""Buy at %.2f on %d\n"", min, minIndex);
	printf(""Sell at %.2f on %d\n"", max, maxIndex);

}",0
ylee818,1695544673,1,.,0
ytho155,1695250670,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length <= 1) {
        printf(""Hold\n""); // Not enough data to make a profit
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;
    double minPrice = prices[0];

    for (int i = 1; i < length; i++) {
        if (prices[i] - minPrice > maxProfit) {
            maxProfit = prices[i] - minPrice;
            sellDay = i;
        }
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            buyDay = i;
        }
    }

    if (maxProfit > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", minPrice, buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}

int main(void) {
    double pricesA[15] = {12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8};
    wall_street_bet(pricesA, 15);

    double pricesB[10] = {2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8};
    wall_street_bet(pricesB, 10);

    double pricesC[5] = {100.0, 90.0, 80.0, 70.0, 60.0};
    wall_street_bet(pricesC, 5);

    return 0;
}
",0
ytho155,1695250697,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length <= 1) {
        printf(""Hold\n""); // Not enough data to make a profit
        return;
    }

    double maxProfit = 0.0;
    int buyDay = 0;
    int sellDay = 0;
    double minPrice = prices[0];

    for (int i = 1; i < length; i++) {
        if (prices[i] - minPrice > maxProfit) {
            maxProfit = prices[i] - minPrice;
            sellDay = i;
        }
        if (prices[i] < minPrice) {
            minPrice = prices[i];
            buyDay = i;
        }
    }

    if (maxProfit > 0.0) {
        printf(""Buy @ %.2lf on %d\n"", minPrice, buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}

",0
ytse120,1695094303,1,"void wall_street_bet(double array[], int n) {
    int i, sellDay, buyDay, tempDay=0;
    double difference=0, buy=0, sell=0;
    for (i=1; i<n; i++){
        if (i<(n-1)) {
            if (array[i]>array[i+1]){
                if (difference<(array[i]-array[tempDay])){
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                    tempDay = i+1;
                } else {
                    tempDay = i+1;
                }
            }
        } else {
            if (array[i]>array[tempDay]) {
                if (difference<(array[i]-array[tempDay])) {
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                }
            }
        }
    }
    if (buy >= sell) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", buy, buyDay);
        printf(""Sell @ %.2f on %d"", sell, sellDay);
    }
}",0
ytse120,1695094351,2,"void wall_street_bet(double array[], int n) {
    int i, sellDay, buyDay, tempDay=0;
    double difference=0, buy=0, sell=0;
    for (i=1; i<n; i++){
        if (i<(n-1)) {
            if (array[i]>array[i+1]){
                if (difference<=(array[i]-array[tempDay])){
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                    tempDay = i+1;
                } else {
                    tempDay = i+1;
                }
            }
        } else {
            if (array[i]>array[tempDay]) {
                if (difference<=(array[i]-array[tempDay])) {
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                }
            }
        }
    }
    if (buy >= sell) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", buy, buyDay);
        printf(""Sell @ %.2f on %d"", sell, sellDay);
    }
}",0
ytse120,1695094373,3,"void wall_street_bet(double array[], int n) {
    int i, sellDay, buyDay, tempDay=0;
    double difference=0, buy=0, sell=0;
    for (i=1; i<n; i++){
        if (i<(n-1)) {
            if (array[i]>array[i+1]){
                if (difference<(array[i]-array[tempDay])){
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                    tempDay = i+1;
                } else {
                    tempDay = i+1;
                }
            }
        } else {
            if (array[i]>array[tempDay]) {
                if (difference<=(array[i]-array[tempDay])) {
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                }
            }
        }
    }
    if (buy >= sell) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", buy, buyDay);
        printf(""Sell @ %.2f on %d"", sell, sellDay);
    }
}",0
ytse120,1695094380,4,"void wall_street_bet(double array[], int n) {
    int i, sellDay, buyDay, tempDay=0;
    double difference=0, buy=0, sell=0;
    for (i=1; i<n; i++){
        if (i<(n-1)) {
            if (array[i]>array[i+1]){
                if (difference<(array[i]-array[tempDay])){
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                    tempDay = i+1;
                } else {
                    tempDay = i+1;
                }
            }
        } else {
            if (array[i]>array[tempDay]) {
                if (difference<(array[i]-array[tempDay])) {
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                }
            }
        }
    }
    if (buy >= sell) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", buy, buyDay);
        printf(""Sell @ %.2f on %d"", sell, sellDay);
    }
}",0
ytse120,1695108533,5,"void wall_street_bet(double array[], int n) {
    int i, sellDay=999, buyDay=0, tempDay=0;
    double difference=0, buy=0, sell=0;
    for (i=1; i<n; i++){
        if (i<(n-1)) {
            if (array[i]>array[i+1]){
                if (difference<=(array[i]-array[tempDay])){
                    if ((i-tempDay) <= (sellDay-buyDay)) {
                        difference = array[i] - array[tempDay];
                        buyDay = tempDay;
                        buy = array[tempDay];
                        sellDay = i;
                        sell = array[i];
                    }
                    tempDay = i+1;
                } else {
                    tempDay = i+1;
                }
            }
        } else {
            if (difference<=(array[i]-array[tempDay])){
                if ((i-tempDay) <= (sellDay-buyDay)) {
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                }
            }
        }
    }
    if (buy >= sell) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", buy, buyDay);
        printf(""Sell @ %.2f on %d"", sell, sellDay);
    }
}",0
ytse120,1695110889,6,"void wall_street_bet(double array[], int n) {
    int i, sellDay=0, buyDay=0, tempDay=0;
    double difference=0, buy=0, sell=0;
    for (i=1; i<n; i++){
        if (i<(n-1)) {
            if (array[i]>array[i+1]){
                if ((difference<(array[i]-array[tempDay])) || (((array[i]-array[tempDay])==difference) && ((i-tempDay) < (sellDay-buyDay)))) {
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                } else {
                    tempDay = i+1;
                }
            }
        } else {
            if ((difference<(array[i]-array[tempDay])) || ((difference==(array[i]-array[tempDay])) && ((i-tempDay) < (sellDay-buyDay)))) {
                difference = array[i] - array[tempDay];
                buyDay = tempDay;
                buy = array[tempDay];
                sellDay = i;
                sell = array[i];
            }
        }
    }
    if (buy >= sell) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", buy, buyDay);
        printf(""Sell @ %.2f on %d"", sell, sellDay);
    }
}",0
ytse120,1695111206,7,"void wall_street_bet(double array[], int n) {
    int i, sellDay=0, buyDay=0, tempDay=0;
    double difference=0, buy=0, sell=0;
    for (i=1; i<n; i++){
        if (i<(n-1)) {
            if (array[i]>array[i+1]){
                if ((difference<(array[i]-array[tempDay])) || (((array[i]-array[tempDay])==difference) && ((i-tempDay) < (sellDay-buyDay)))) {
                    difference = array[i] - array[tempDay];
                    buyDay = tempDay;
                    buy = array[tempDay];
                    sellDay = i;
                    sell = array[i];
                    tempDay = i+1;
                } else {
                    tempDay = i+1;
                }
            }
        } else {
            if ((difference<(array[i]-array[tempDay])) || ((difference==(array[i]-array[tempDay])) && ((i-tempDay) < (sellDay-buyDay)))) {
                difference = array[i] - array[tempDay];
                buyDay = tempDay;
                buy = array[tempDay];
                sellDay = i;
                sell = array[i];
            }
        }
    }
    if (buy >= sell) {
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", buy, buyDay);
        printf(""Sell @ %.2f on %d"", sell, sellDay);
    }
}",0
zcol623,1695545003,1,"//author;zcol623
void wall_street_bet(double prices[], int length) {
	if (length <= 1) {
		printf(""Hold\n"");
		return;
	}

	int buy_day = 0; // Index of the day to buy
	int sell_day = 0; // Index of the day to sell
	double max_profit = 0.0; // Initialize the maximum profit

	//Loop through array of prices
	for (int i = 0; i < length - 1; i++) { 
		for (int j = i + 1; j < length; j++) {
			double current_profit = prices[j] - prices[i]; //Calculate and compare possible profits storing the highest profit possible in max_profit
			if (current_profit > max_profit) {
				max_profit = current_profit;
				buy_day = i;
				sell_day = j;
			}
			else if (current_profit == max_profit)//If there are multiple combinations of buy and sell days that result in the same max profit, choose the pair of days with the least period of time in between
			{
				buy_day = i;
				sell_day = j;
			}
		}
	}

	if (max_profit > 0) {
		printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
		printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
	}
	else {
		printf(""Hold\n""); //No profit is possible at the moment, therefore trader is advised to hold
	}
}",0
zcol623,1695545308,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

//author;zcol623
void wall_street_bet(double prices[], int length) {
	if (length <= 1) {
		printf(""Hold\n"");
		return;
	}

	int buy_day = 0; // Index of the day to buy
	int sell_day = 0; // Index of the day to sell
	double max_profit = 0.0; // Initialize the maximum profit

	//Loop through array of prices
	for (int i = 0; i < length - 1; i++) { 
		for (int j = i + 1; j < length; j++) {
			double current_profit = prices[j] - prices[i]; //Calculate and compare possible profits storing the highest profit possible in max_profit
			if (current_profit > max_profit) {
				max_profit = current_profit;
				buy_day = i;
				sell_day = j;
			}
			else if (current_profit == max_profit && j - i < sell_day - buy_day)
		    //If there are multiple combinations of buy and sell days that result in the same max profit, choose the pair of days with the least period of time in between
			{
				buy_day = i;
				sell_day = j;
			}
		}
	}

	if (max_profit > 0) { //If some profit is possible display the days on whihc the trader should buy and sell
		printf(""Buy @ %.2lf on %d\n"", prices[buy_day], buy_day);
		printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
	}
	else {
		printf(""Hold\n""); //No profit is possible at the moment, therefore trader is advised to hold
	}
}",1
zgar110,1695616191,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void PrintTimesTwo(int input) {
    int result = input * 2;
    printf(""%d\n"", result);
}

int main() {
    PrintTimesTwo(5);
    return 0;
}
",0
zgar110,1695616209,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void wall_street_bet(double prices[], int size) {
    // Implement the function logic here
}

int main() {
    double pricesA[15]; // Assuming you have an array of prices
    // Initialize pricesA with values
    wall_street_bet(pricesA, 15);
    return 0;
}
",0
zgar110,1695616243,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


int main() {
    double pricesA[15]; // Assuming you have an array of prices
    // Initialize pricesA with values
    wall_street_bet(pricesA, 15);
    return 0;
}
",0
zgar110,1695616248,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


int main(void) {
    double pricesA[15]; // Assuming you have an array of prices
    // Initialize pricesA with values
    wall_street_bet(pricesA, 15);
    return 0;
}
",0
zgar110,1695616254,5,"
#include <stdio.h>


int main(void) {
    double pricesA[15]; // Assuming you have an array of prices
    // Initialize pricesA with values
    wall_street_bet(pricesA, 15);
    return 0;
}
",0
zgar110,1695616262,6,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main(void)
{
int examMark;
printf(""Enter your ENGGEN 131 exam mark: "");
scanf(""%d"", &examMark);
if ((examMark >= 0) && (examMark <= 100)) {
printf(""Your exam mark is %d... "", examMark);
if (examMark < 20) {
printf(""have you considered other options?"");
} else if (examMark < 50) {
printf(""see you again next year!"");
} else if (examMark < 95) {
printf(""congrats, you are awesome!"");
} else {
printf(""that's actually scary"");
}
} else {
printf(""The exam mark must be between 0 and 100"");
}
return 0;
}",0
zgar110,1695616792,7,"#include <stdio.h>


void PrintTimesTwo(int input) {
    int result = input * 2;
    printf(""%d\n"", result);
}

int main(void) {
  
    int number;
    printf(""Enter a number: "");
    scanf(""%d"", &number);


    PrintTimesTwo(number);

    return 0;
}",0
zgar110,1695616830,8,"#include <stdio.h>

int main(void) {
    int x1, y1, x2, y2;
    float midpoint_x, midpoint_y;

    // Ask the user for each coordinate
    printf(""Enter x1: "");
    scanf(""%d"", &x1);

    printf(""Enter y1: "");
    scanf(""%d"", &y1);

    printf(""Enter x2: "");
    scanf(""%d"", &x2);

    printf(""Enter y2: "");
    scanf(""%d"", &y2);

    // Calculate the midpoint
    midpoint_x = (float)(x1 + x2) / 2;
    midpoint_y = (float)(y1 + y2) / 2;

    // Display the midpoint
    printf(""Midpoint: (%.1f, %.1f)\n"", midpoint_x, midpoint_y);

    return 0;
}
",0
zgar110,1695616863,9,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return;
    }

    int buyDay = 0;
    int sellDay = 1;
    double minPrice = prices[0];
    double maxProfit = prices[1] - prices[0];

    for (int currentDay = 1; currentDay < length; ++currentDay) {
        double currentPrice = prices[currentDay];
        double potentialProfit = currentPrice - minPrice;

        if (potentialProfit > maxProfit) {
            maxProfit = potentialProfit;
            sellDay = currentDay;
        }

        if (currentPrice < minPrice) {
            minPrice = currentPrice;
            buyDay = currentDay;
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}

int main() {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}
",0
zgar110,1695617056,10,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return;
    }

    int buyDay = 0;
    int sellDay = 1;
    double minPrice = prices[0];
    double maxProfit = prices[1] - prices[0];

    for (int currentDay = 1; currentDay < length; ++currentDay) {
        double currentPrice = prices[currentDay];
        double potentialProfit = currentPrice - minPrice;

        if (potentialProfit > maxProfit) {
            maxProfit = potentialProfit;
            sellDay = currentDay;
        }

        if (currentPrice < minPrice) {
            minPrice = currentPrice;
            buyDay = currentDay;
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}

int main(void) {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}
",0
zgar110,1695617252,11,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return;
    }

    int buyDay = 0;
    int sellDay = 1;
    double minPrice = prices[0];
    double maxProfit = prices[1] - prices[0];

    for (int currentDay = 1; currentDay < length; ++currentDay) {
        double currentPrice = prices[currentDay];
        double potentialProfit = currentPrice - minPrice;

        if (potentialProfit > maxProfit) {
            maxProfit = potentialProfit;
            sellDay = currentDay;
        }

        if (currentPrice < minPrice) {
            minPrice = currentPrice;
            buyDay = currentDay;
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}

int main() {
    double pricesA[15] = { 12.2, 12.3, 12.6, 12.1, 11.9, 12.3, 12.1, 11.9, 11.5, 11.9, 12.1, 12.2, 12.1, 11.9, 11.8 };
    wall_street_bet(pricesA, 15);

    double pricesB[10] = { 2.0, 2.1, 2.2, 2.3, 2.3, 1.9, 2.2, 1.5, 1.7, 1.8 };
    wall_street_bet(pricesB, 10);

    double pricesC[5] = { 100.0, 90.0, 80.0, 70.0, 60.0 };
    wall_street_bet(pricesC, 5);

    return 0;
}
",0
zgar110,1695617273,12,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define SECONDS_PER_MINUTE 60
#define SECONDS_PER_HOUR 3600
int main(void)
{
int input, seconds, leftOverSeconds, minutes, hours;
printf(""Enter duration (secs): "");
scanf(""%d"", &input);
hours = input / SECONDS_PER_HOUR;
leftOverSeconds = input % SECONDS_PER_HOUR;
minutes = leftOverSeconds / SECONDS_PER_MINUTE;
seconds = leftOverSeconds % SECONDS_PER_MINUTE;
printf(""%d seconds is %d hours, %d minutes and %d
seconds.\n"", input, hours, minutes, seconds);
return 0;
}",0
zgar110,1695617285,13,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main(void)
{
int input, seconds, leftOverSeconds, minutes, hours;
printf(""Enter duration (secs): "");
scanf(""%d"", &input);
hours = input / SECONDS_PER_HOUR;
leftOverSeconds = input % SECONDS_PER_HOUR;
minutes = leftOverSeconds / SECONDS_PER_MINUTE;
seconds = leftOverSeconds % SECONDS_PER_MINUTE;
printf(""%d seconds is %d hours, %d minutes and %d
seconds.\n"", input, hours, minutes, seconds);
return 0;
}",0
zgar110,1695617457,14,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        printf(""Hold\n"");
        return;
    }

    int buyDay = 0;
    int sellDay = 1;
    double minPrice = prices[0];
    double maxProfit = prices[1] - prices[0];

    for (int currentDay = 1; currentDay < length; ++currentDay) {
        double currentPrice = prices[currentDay];
        double potentialProfit = currentPrice - minPrice;

        if (potentialProfit > maxProfit) {
            maxProfit = potentialProfit;
            sellDay = currentDay;
        }

        if (currentPrice < minPrice) {
            minPrice = currentPrice;
            buyDay = currentDay;
        }
    }

    if (maxProfit > 0) {
        printf(""Buy @ %.2lf on %d\n"", prices[buyDay], buyDay);
        printf(""Sell @ %.2lf on %d\n"", prices[sellDay], sellDay);
    } else {
        printf(""Hold\n"");
    }
}


",0
zgin653,1695338222,1,"void wall_street_bet(double prices[], int length){
    int gap[2] = {0,1}; //{buy, sell}

    for (int i = 0; i < length - 1; i++){ //i = buy index
        for (int j = i + 1; j < length; j++){ //j = sell index
            if ((prices[j]- prices[i]) > (prices[gap[1]] - prices[gap[0]])){
                gap[0] = i;
                gap[1] = j;
            }
        }
    }

    if ((prices[gap[1]] - prices[gap[0]]) < 0){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", prices[gap[0]], gap[0]);
        printf(""Sell @ %.2f on %d"", prices[gap[1]], gap[1]);
    }
}",0
zgin653,1695346274,2,"void wall_street_bet(double prices[], int length){
    int gap[2] = {0,0}; //{buy, sell}

    for (int i = 0; i < length - 1; i++){ //i = buy index
        for (int j = i + 1; j < length; j++){ //j = sell index
            if ((prices[j] - prices[i]) >= (prices[gap[1]] - prices[gap[0]])) {
                if ((prices[j] - prices[i]) != (prices[gap[1]] - prices[gap[0]]) || gap[1] - gap[0] > j - i){
                    gap[0] = i;
                    gap[1] = j;
                }
            }
        }
    }

    if (gap[0] == gap[1]){
        printf(""Hold"");
    } else {
        printf(""Buy @ %.2f on %d\n"", prices[gap[0]], gap[0]);
        printf(""Sell @ %.2f on %d"", prices[gap[1]], gap[1]);
    }
}",1
zshi453,1695080693,1,"#include <stdio.h>

int wall_street_bet(double *array,int length)
{
    int i,j,a,b;
    float x,y;
    x = array[0];
    y = array[0];
    a = 0;
    b = 0;
    for (i = 1;i<length;++i)
    {
        if (array[i]<array[i-1])
        {
            x = array[i];
        }
        else if (array[i]>array[i-1])
        {
            y = array[i];
        }
    }
    for (i = 0; i<length;++i)
    {
        if (array[i] == x)
        {
            a = i;
        }
        else if (array[i] == y)
        {
            b = i;
        }
    }
    printf(""Buy @ %.2f on %d"",x,a);
    printf(""Sell @ %.2f on %d"",y,b);
}",0
zshi453,1695081011,2,"#include <stdio.h>

int wall_street_bet(double *array,int length)
{
    int i,j,a,b;
    float x,y;
    x = array[0];
    y = array[0];
    a = 0;
    b = 0;
    for (i = 1;i<length;++i)
    {
        if (array[i]<x)
        {
            x = array[i];
        }
        else if (array[i]>y)
        {
            y = array[i];
        }
    }
    for (i = 0; i<length;++i)
    {
        if (array[i] == x)
        {
            a = i;
        }
        else if (array[i] == y)
        {
            b = i;
        }
    }
    printf(""Buy @ %.2f on %d"",x,a);
    printf(""Sell @ %.2f on %d"",y,b);
    return 0;
}",0
zshi453,1695081021,3,"#include <stdio.h>

int wall_street_bet(double *array,int length)
{
    int i,a,b;
    float x,y;
    x = array[0];
    y = array[0];
    a = 0;
    b = 0;
    for (i = 1;i<length;++i)
    {
        if (array[i]<x)
        {
            x = array[i];
        }
        else if (array[i]>y)
        {
            y = array[i];
        }
    }
    for (i = 0; i<length;++i)
    {
        if (array[i] == x)
        {
            a = i;
        }
        else if (array[i] == y)
        {
            b = i;
        }
    }
    printf(""Buy @ %.2f on %d"",x,a);
    printf(""Sell @ %.2f on %d"",y,b);
    return 0;
}",0
zshi453,1695081049,4,"#include <stdio.h>

int wall_street_bet(double *array,int length)
{
    int i,a,b;
    float x,y;
    x = array[0];
    y = array[0];
    a = 0;
    b = 0;
    for (i = 1;i<length;++i)
    {
        if (array[i]<x)
        {
            x = array[i];
        }
        else if (array[i]>y)
        {
            y = array[i];
        }
    }
    for (i = 0; i<length;++i)
    {
        if (array[i] == x)
        {
            a = i;
        }
        else if (array[i] == y)
        {
            b = i;
        }
    }
    printf(""Buy @ %.2f on %d\n"",x,a);
    printf(""Sell @ %.2f on %d\n"",y,b);
    return 0;
}",0
zwon694,1695207208,1,"void wall_street_bet(double stock_price[], int length)
{
    int i, j;
    int min_location = 0;
    int max_location = 0;
    double profit1 = 0;
    double profit2;
    int difference1 = 0;
    int difference2;

// find the maximum difference between values in the array

for (i = 0; i < length; i++) {
    for (j = 0; j < length; j++) {

        profit2 = stock_price[j] - stock_price[i];
        difference2 = j - i;

        if ((i <= j) && (profit2 > profit1) && (difference2 > difference1)) {
            min_location = i;
            max_location = j;
            profit1 = profit2;
        }
    }
}

// print
    if (max_location == min_location) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"", stock_price[min_location], min_location);
        printf(""Sell @ %.2f on %d\n"", stock_price[max_location], max_location);
    }

}",0
zwon694,1695208277,2,"void wall_street_bet(double stock_price[], int length)
{
    int i, j;
    int min_location = 0;
    int max_location = 0;
    double profit1 = 0;
    double profit2;
    int difference1 = length;
    int difference2;

// find the maximum difference between values in the array

for (i = 0; i < length; i++) {
    for (j = 0; j < length; j++) {

        profit2 = stock_price[j] - stock_price[i];

        if ((i < j) && (profit2 >= profit1)) {

            profit1 = profit2;
            difference2 = j - i;

            if (difference2 < difference1) {
                min_location = i;
                max_location = j;
            }
            
        }
    }
}

// print
    if (max_location == min_location) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"", stock_price[min_location], min_location);
        printf(""Sell @ %.2f on %d\n"", stock_price[max_location], max_location);
    }

}",0
zwon694,1695247900,3,"void wall_street_bet(double stock_price[], int length)
{
    int i, j;
    int min_location = 0;
    int max_location = 0;
    double profit1 = 0;
    double profit2;
    int difference1 = length;
    int difference2;

// find the maximum difference between values in the array

for (i = 0; i < length; i++) {
    for (j = 0; j < length; j++) {

        profit2 = stock_price[j] - stock_price[i];

        if ((i < j) && (profit2 >= profit1)) {

            if (profit1 == profit2) {
                difference2 = j - i;
                if (difference2 < difference1) {
                min_location = i;
                max_location = j;
                difference1 = difference2;
            }
            } else {
                min_location = i;
                max_location = j;
                profit1 = profit2;
                difference2 = j - i;
            }
            
        }
    }
}

// print
    if (max_location == min_location) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"", stock_price[min_location], min_location);
        printf(""Sell @ %.2f on %d\n"", stock_price[max_location], max_location);
    }

}",0
zwon694,1695248452,4,"void wall_street_bet(double stock_price[], int length)
{
    int i, j;
    int min_location = 0;
    int max_location = 0;
    double profit1 = 0;
    double profit2;
    int difference1 = length;
    int difference2;

// find the maximum difference between values in the array

for (i = 0; i < length; i++) {
    for (j = 0; j < length; j++) {

        profit2 = stock_price[j] - stock_price[i];

        if ((i < j) && (profit2 >= profit1)) {

            if (profit1 == profit2) {
                difference2 = j - i;
                if (difference2 < difference1) {
                min_location = i;
                max_location = j;
                difference1 = difference2;
                profit1 = profit2;
                }
            } else {
                min_location = i;
                max_location = j;
                profit1 = profit2;
                difference1 = j - i;
            }            
        }
    }
}

// print
    if (max_location == min_location) {
        printf(""Hold\n"");
    }
    else {
        printf(""Buy @ %.2f on %d\n"", stock_price[min_location], min_location);
        printf(""Sell @ %.2f on %d\n"", stock_price[max_location], max_location);
    }

}",1
zwu591,1695391016,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695391266,2,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] >= greatest_profit) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695391480,3,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time = length;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] >= greatest_profit && j-i < time) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695391597,4,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time = length;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] >= greatest_profit && (j-i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695391623,5,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time = length;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit && (j-i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695391848,6,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time = length;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit && (j-i < time)) {
                greatest_profit = prices[j] - prices[i]; 
                
                time = j - i;
                buy = i;
                sell = j;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695392710,7,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit ) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }

            if (prices[j] - prices[i] == greatest_profit && j - i < time){
                greatest_profit = prices[j] - prices[i];

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695392736,8,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit ) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }

            if (prices[j] - prices[i] == greatest_profit && j - i < time){
                greatest_profit = prices[j] - prices[i];

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",1
zwu591,1695531440,9,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",1
zwu591,1695531455,10,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || prices[j] - prices[i] == greatest_profit && j - i < time) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695531479,11,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i;
    int j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",1
zwu591,1695532126,12,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695532162,13,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i, j
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695532169,14,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i, j;
    double greatest_profit = 0;
    int buy = 0;
    int sell = 0;
    int time;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",1
zwu591,1695532204,15,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i, j;
    double greatest_profit = 0;
    int buy = int sell = int time = 0;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695532228,16,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i, j;
    double greatest_profit = 0;
    int buy = sell = time = 0;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",0
zwu591,1695532291,17,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    // Varaible definetion
    int i, j;
    double greatest_profit = 0;
    int buy, sell, time;

    // Find the smallest values and save it as min
    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",1
zwu591,1695532536,18,"#include <stdio.h>

void wall_street_bet(double *prices, int length)
{
    int i, j;
    double greatest_profit = 0;
    int buy = 0, sell = 0, time = 0;

    for (i = 0; i < length-1; i++) {
        for (j = length-1; j > i; j--) {
            if (prices[j] - prices[i] > greatest_profit || (prices[j] - prices[i] == greatest_profit && j - i < time)) {
                greatest_profit = prices[j] - prices[i]; 

                buy = i;
                sell = j;
                time = j - i;
            }
        }
    }

    if (greatest_profit > 0) {
        printf(""Buy @ %.2f on %d\nSell @ %.2f on %d\n"", prices[buy], buy, prices[sell], sell);
    } else {
        printf(""Hold\n"");
    }
}",1
zyao804,1695205016,1,"#include <stdio.h>

void wall_street_bet(double *prices, int length) {
    if (length < 2) {
        // Not enough data to make a profit
        printf(""Hold\n"");
        return;
    }

    int buy_day = 0;  // Initialize the buy day
    int sell_day = 0; // Initialize the sell day
    double min_price = prices[0]; // Initialize the minimum price
    double max_profit = 0.0; // Initialize the maximum profit

    for (int i = 1; i < length; i++) {
        if (prices[i] < min_price) {
            // If the current price is lower than the minimum price so far,
            // update the buy day and minimum price
            buy_day = i;
            min_price = prices[i];
        } else if (prices[i] - min_price > max_profit) {
            // If the difference between the current price and the minimum price
            // is greater than the maximum profit so far, update the sell day and
            // maximum profit
            sell_day = i;
            max_profit = prices[i] - min_price;
        }
    }

    if (max_profit > 0) {
        // If a profitable trade was found, print the buy and sell days along with
        // the prices to 2 decimal places
        printf(""Buy @ %.2lf on %d\n"", min_price, buy_day);
        printf(""Sell @ %.2lf on %d\n"", prices[sell_day], sell_day);
    } else {
        // If no profitable trade was found, print ""Hold""
        printf(""Hold\n"");
    }
}",0
