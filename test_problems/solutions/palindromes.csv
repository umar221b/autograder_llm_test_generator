upi,time,try,answer,rawfraction
aahk798,1696298675,1,"int IsPalindrome(char *word)
{
      int lengthofinput;  
    lengthofinput= strlen(word);

	int i; 
	for (i=0; i<lengthofinput; i++) { 
        if (word[i]== word[lengthofinput-i-1]) { 
            i++; 
        }
        else {
            return 0 ;
        }
    }

            return 1;
}
",1
aakm278,1696830557,1,"int IsPalindrome(char *word)
{
    int Len = strlen(word);
printf(""string length is %d\n"", Len);

if (Len == 1) // single letters are palindromes
{
	return 1;
}
else
{
	int HalfLen = Len / 2;
	int i = 0;

	while (i < HalfLen)
	{
		if (word[0+i] != word[Len-i-1])
		{
			return 0; // false return
			
		}
		i++;
	}
	return 1; // true return
}
return -1; // reports errors
}
",0
aakm278,1696830603,2,"int IsPalindrome(char *word)
{
    int Len = strlen(word);
//printf(""string length is %d\n"", Len); // error detection

if (Len == 1) // single letters are palindromes
{
	return 1;
}
else
{
	int HalfLen = Len / 2;
	int i = 0;

	while (i < HalfLen)
	{
		if (word[0+i] != word[Len-i-1])
		{
			return 0; // false return
			
		}
		i++;
	}
	return 1; // true return
}
return -1; // reports errors
}
",1
aana675,1696720036,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *str) {
    int length = strlen(str);

   
    int left = 0;
    int right = length - 1;

    while (left < right) {
        
        if (str[left] != str[right]) {
            return 0; 
        }
        left++;
        right--;
    }

    return 1; 
}",1
aaza463,1696206818,1,"int IsPalindrome(char *word)
{
    int i, length;

    length = strlen(word);

    for(i = 0; i < length/2; i++) {
        if (word[i] != word[length-i-1]){
            return 0;
        }
    }
    return 1;
}
",1
aazh582,1696834424,1," #include <string.h>

int IsPalindrome(char word[]) {
    int length = strlen(word);
    int start = 0;
    int end = length - 1;

    while (start < end) {
        if (word[start] != word[end]) {
            return 0;  // Not a palindrome
        }
        start++;
        end--;
    }
    return 1;  // Is a palindrome
}

",1
abha257,1696231506,1,"int IsPalindrome(char* word)
{
	int result = 0;
	int i;
	int counter = 0;
	int length = 0;

	length = strlen(word);
	for (i = 0; i < length; i++) {
		if (word[i] == word[length - i - 1]) {
			counter = counter + 1;
		}

	}
	if (counter == length) {
		result = 1;
	}
	return result;
}
",1
abro522,1696222159,1,"int IsPalindrome(char *word) {
    int len = strlen(word);
    for (int i = 0; i < len / 2; i++) {
        if (word[i] != word[len - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
acam267,1696666037,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int palindrome = 0;
    for(int i = 0; i < length; i++) {
        if(word[i] == word[length - i-1]) {
            palindrome = 1;
        }
    }
    return palindrome;
}",0
acam267,1696667739,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int palindrome = 1;
    for(int i = 0; i < length; i++) {
        if(word[i] != word[length - i-1]) {
            palindrome = 0;
            break;
        }
    }
    return palindrome;
}
",1
ache725,1696674018,1,"int IsPalindrome(char *word)
{
   int start;
    int end;
    int length = strlen(word);
    int true = 1;

    start = 0;
    end = length - 1;

    while (start < length/2) {
        if (word[start] != word[end]){
            true = 0;
        }
        start ++;
        end --;
    }
    return true; 
}
",0
ache725,1696674408,2,"int IsPalindrome(char *word)
{
    int start = 0;
    int end;
    int length = strlen(word);
    int true = 1;

    end = length - 1;

    while (start < length/2) {
        if (word[start] != word[end]){
            true = 0;
        }
        start++;
        end--;
    }
    return true; 
}
",0
ache725,1696674458,3,"int IsPalindrome(char *word)
{
    int start = 0;
    int end;
    int length = strlen(word);
    int yes = 1;

    end = length - 1;

    while (start < length/2) {
        if (word[start] != word[end]){
            yes = 0;
        }
        start++;
        end--;
    }
    return yes; 
}
",1
achi359,1696668785,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for(int i = 0; i<length; i++){
        if(word[i] != word[length - i-1]){
            return 0;
        }
    return 1;
    }
}
",0
achi359,1696669359,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for(int i = 0; i<length; i++){
        if(word[i] != word[length - i-1]){
            return 0;
        }
    }
    return 1;
    
}",1
acoc261,1696288965,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i = 0;
    int j = length - 1;
    for (i = 0; i < length; i++){
        if (word[j] != word[i]) {
            return 0;
        }
        j = j - 1;
    }
    return 1;
}
",1
adav221,1696412805,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
adey750,1696665418,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int lastWordPos = strlen(word) - 1; 
    int numWords = strlen(word);
    
    while(i < lastWordPos)
    {
        
        if (word[i] != word[lastWordPos]) {
            
            return 0;
        }
          
    
        i++;
        lastWordPos--;
    }
    
        return 1;
}
",0
adey750,1696665484,2,"int IsPalindrome(char *word)
{
    int i = 0;
    int lastWordPos = strlen(word) - 1; 
    
    while(i < lastWordPos)
    {
        
        if (word[i] != word[lastWordPos]) {
            
            return 0;
        }
          
    
        i++;
        lastWordPos--;
    }
    
        return 1;
}
",1
afal438,1696229526,1,"int IsPalindrome(char *word)
{
  /* STORING THE POSITION OF THE INDEX OF NULL */
int P = 0;
while (word[P] != '\0')
{
	P++;
}

int i;
int Z = P - 1;
int final;
for (i = 0; i < P; i++)
{
	if (word[i] == word[Z])
	{
		final = 1;
	}
	else
	{
		final = 0;
	}

	Z--;

}

return final;
  
}
",0
afal438,1696230196,2,"int IsPalindrome(char *word)
{
  /* STORING THE POSITION OF THE INDEX OF NULL */
int P = 0;
while (word[P] != '\0')
{
	P++;
}

int i;
int Z = P - 1;
int final;
for (i = 0; i < P; i++)
{
	if (word[i] == word[Z])
	{
		final = 1;
		Z--;
	}
	else
	{
		final = 0;
	}

}

return final;

}
",0
afal438,1696296956,3,"int IsPalindrome(char *word)
{
 	/* STORING THE POSITION OF THE INDEX OF NULL */
	int P = 0;
	while (word[P] != '\0')
	{
		P++;
	}
	
	int i;

	int Z = P - 1;

	int final;

	/* P is NOT touched*/
	for (i = 0; i < P; i++)
	{
		if (word[i] == word[Z] && P > 2)
		{
			final = 1;
			Z--;
			
		}
		else
		{
			final = 0;
			break;
		}
	}

	/* if its 2 letters*/
	if (P == 2 && word[0] == word[1])
	{
		final = 1;
	}

	/* if its 1 letter */
	if (P == 1)
	{
		final = 1;
	}
	
	return final;

}
",1
afit324,1696831440,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i;
    int imax = 0;
    int j = 0;
    
    imax = strlen(word);
    
    for (i = 0; i < imax/2; i++) {
        if (word[i] == word[imax-i-1]) {
            j++;
        }
    }
    
    if (j == imax/2 || imax == 1 ) {
        return 1;
    } else {
        return 0;
    }
}
",1
agan859,1696481695,1,"int IsPalindrome(char *word)
{
	char reverse_word[100];
	int length = strlen(word);
	int i;

	for (i = 0; i < length; i++) {
		reverse_word[i] = word[(length - i - 1)];

	}

	reverse_word[length] = '\0';
	

	if (strcmp(reverse_word, word) == 0) {
		return 1;
	} else {
		return 0;
	}
}

",1
agay279,1696477056,1,"int IsPalindrome(char *word)
{
    int length =strlen(word);
    int i=0;
    int g=length-1;


    // i++ g--,
    while (word[i]!='\0'){
        if (word[i]!=word[g]){
            return 0;
        }
        i++;
        g--;


    }
    return 1;
}",1
agou682,1696842285,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);

    
    int start =0;
    int end =length-1;

    while (start < end) {
        
        if (word[start] != word[end]) {// if words first element does not equal 'end'
            return 0; 
        }
        start++;
        end--;
    }

    return 1;
}
",1
ahac139,1696291357,1,"int IsPalindrome(char *word)
{

    int i,j;
    j = strlen(word)-1;

    for (i = 0; i < strlen(word); i++)
    {
        if (word[i]!=word[j]){
            return 0;       
        }

        j--;
    }
    
    return 1;
}
",1
ahac223,1696804975,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) - 1;
    int i = 0;
    int j = length;
    
    while(i < j){
        if(word[i] != word[j]){
            return 0;
        }
        i++;
        j--;
    }
    return 1;
}",1
ahac223,1696805199,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i = 0;
    int j = length - 1;
    
    while(i < j){
        if(word[i] != word[j]){
            return 0;
        }
        i++;
        j--;
    }
    return 1;
}",1
ahai431,1696720307,1,"int IsPalindrome(char *word) {

	char flipstring[100];
	int length = strlen(word) - 2;
	int j = 0;

	for (int i = 0; i<(length+1) ; i++) {
		flipstring[i] = word[length - i];
	}
	flipstring[length + 1] = '\0';

	int result;

	for (int k = 0; k < length; k++) {
		if (word[k] != flipstring[k]) {
			return 0;
		}
	}

	return 1;
}",0
ahai431,1696720329,2,"int IsPalindrome(char *word) {

	char flipstring[100];
	int length = strlen(word) - 2;

	for (int i = 0; i<(length+1) ; i++) {
		flipstring[i] = word[length - i];
	}
	flipstring[length + 1] = '\0';

	for (int k = 0; k < length; k++) {
		if (word[k] != flipstring[k]) {
			return 0;
		}
	}

	return 1;
}",0
ahas673,1696220691,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    for (i = 0; i < length/2 ; i++)
    {
        if (word[i] != word[length-1-i]){
            return 0;
        }
    }
    return 1;
}",1
ahij206,1696833982,1,"int IsPalindrome(char *word)
{
    int len = strlen(str);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0;
        }
    }

    return 1;
}
}
",0
ahij206,1696834019,2,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0;
        }
    }

    return 1;
}
}
",0
ahij206,1696834112,3,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}
",1
ahua579,1696493580,1,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	for (int i = 0; i < length / 2; i++)
	{
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	
	return 1;
}",1
ahus071,1696815912,1,"#include <stdio.h>

int IsPalindrome(char *word)
{
	int length = strlen(word);

	for (int i = 0, j = length - 1; i < j; i++, j--)
	{
		if (i < j && (word[i]) != (word[j])) 
		{
			return 0;
		}
	}
	return 1;
}",1
ajam744,1696392728,1,"int IsPalindrome(char *word)
{
    int i,j;
    
    for (i = 0, j = strlen(word) - 1; i < strlen(word); i++, j--)
    {
        if (word[i] != word[j])
        {
           return 0; 
        }
    }
    
    return 1;
}
",1
ajeo563,1696656052,1,"int IsPalindrome(char *word)
{
    	int length;


	length = strlen(word);

	for (int i = 0; i < length; i++) {

		if (word[length - i] == word[i]) {

			return 0;
		}
	}
	
	return 1;
}
",0
ajeo563,1696656773,2,"int IsPalindrome(char *word)
{
    	int length = strlen(word);

	for (int i = 0; i < length; i++) {

		if (word[i] != word[length-i-1]) {

			return 0;
		}
	}
	
	return 1;
}
",1
ajhz010,1696305366,1,"int IsPalindrome(char *word)
{
    int length, i, j, result;
    length = strlen(word);
    char wordCopy[1000] = {};
    
    printf(""%d\n"", length);
    i = 0;
    while (word[i] != '\0') {
        wordCopy[i] = word[i];
        i++;
    }
    
    printf(""%s\n"", wordCopy);
    j = 0;
    for (i = (length-1); i > -1; i--) {
        word[j] = wordCopy[i];
        j++;
    }
    
    printf(""%s\n"", word);
    result = strcmp(word, wordCopy);
    if (result == 0) {
        return 1;
    }
    else { 
        return 0;
    }
}
",0
ajhz010,1696305416,2,"int IsPalindrome(char *word)
{
    int length, i, j, result;
    length = strlen(word);
    char wordCopy[1000] = {};
    

    i = 0;
    while (word[i] != '\0') {
        wordCopy[i] = word[i];
        i++;
    }
    

    j = 0;
    for (i = (length-1); i > -1; i--) {
        word[j] = wordCopy[i];
        j++;
    }
    

    result = strcmp(word, wordCopy);
    if (result == 0) {
        return 1;
    }
    else { 
        return 0;
    }
}
",1
ajhz011,1696219978,1,"#include <stdio.h>

void IsPalindrome(char *str)
{
	int strLength = strlen(str), i;
	char reversedStr[100] = { 0 };

	for (i = 0; i < strlen(str); i++) {
		reversedStr[i] = str[strLength - 1];
		strLength--;
	}

	reversedStr[strlen(str)] = '\0';

	if (strcmp(reversedStr, str) == 0) {
		return 1;
	}
	else {
		return 0;
	}
}",0
ajhz011,1696220051,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *str)
{
	int strLength = strlen(str), i;
	char reversedStr[100] = { 0 };

	for (i = 0; i < strlen(str); i++) {
		reversedStr[i] = str[strLength - 1];
		strLength--;
	}

	reversedStr[strlen(str)] = '\0';

	if (strcmp(reversedStr, str) == 0) {
		return 1;
	}
	else {
		return 0;
	}
}",1
ajhz216,1696648740,1,"int IsPalindrome(char *word)
{
    	int i = 0;
	int x = 1;
	int y = strlen(word);

	for (i = 0; i < y; i++) {
		if (word[i] != word[(y-1)]) {
			x = 0;
		}
		y--;
	}

	return x;
}
",1
ajhz318,1696671559,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i;
    int j;
    int a = 1;

    j = (length - 1);
    i = 0;

    while (i < length/2) {
        if (word[i] != word[j]) {
            a = 0;
        }
        i += 1;
        j -= 1;
    }
    return a;
}
",1
ajhz444,1696382419,1,"int IsPalindrome(char *word)
{
	int length = strlen(word);
	for (int i = 0; i < length; i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	return 1;    
}
",1
ajhz488,1696723618,1,"int IsPalindrome(char *word)
{
    int i, len;
    len = strlen(word);
    len = len - 1;
    for (i=0;i<len;i++) {
        if (string[i] != string[len-i]) {
            return 0;
        }
    }
    return 1;
}
",0
ajhz488,1696723638,2,"int IsPalindrome(char *word)
{
    int i, len;
    len = strlen(word);
    len = len - 1;
    for (i=0;i<len;i++) {
        if (word[i] != word[len-i]) {
            return 0;
        }
    }
    return 1;
}
",1
ajin489,1696302687,1,"#include <stdio.h>
#include <string.h>
int IsPalindrome(char word[]){
    int i = 0;
    int L = strlen(word);
    while (i <= L / 2){
        if (word[i] != word[L - 1 - i]){
            return 0;
        }
        i++;
    }
    return 1;
}",1
ajoh511,1696355972,1,"int IsPalindrome (char *word)
{
    int start = 0;
    int end = strlen(word) -1;

    while (start < end) {
        if (word[start] != word[end]) {
            return 0;
        } else {
            start++;
            end--;
        }
    }

    return 1;
}
",1
akam256,1696829938,1,"int IsPalindrome(char *word)
{
int length = strlen(str);
for (int i = 0; i < length / 2; i++) {
if (str[i] != str[length - i - 1]) {
return 0;
}
}
return 1; 
}
",0
akam256,1696829981,2,"int IsPalindrome(char *str)
{
int length = strlen(str);
for (int i = 0; i < length / 2; i++) {
if (str[i] != str[length - i - 1]) {
return 0;
}
}
return 1; 
}
",1
akam677,1696738517,1,"void strrev(char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        char temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
}

int IsPalindrome(char *word) {
    // Make a copy of the original string
    char original[100];
    strcpy(original, word);

    // Reverse the copied string using strrev
    strrev(original);

    // Compare the original string with the reversed string using strcmp
    if (strcmp(word, original) == 0) {
        return 1; // It's a palindrome
    } else {
        return 0; // It's not a palindrome
    }
}
",1
akam677,1696738534,2,"void strrev(char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        char temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
}

int IsPalindrome(char *word) {
    char original[100];
    strcpy(original, word);

    strrev(original);

    if (strcmp(word, original) == 0) {
        return 1;
    } else {
        return 0; 
    }
}
",1
akam677,1696738621,3,"void strrev(char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        char temp = str[i];
        str[i] = str[j];
        str[j] = temp;
    }
}

int IsPalindrome(char *word) {
    char copy_word[100];
    strcpy(copy_word, word);

    strrev(copy_word);

    if (strcmp(word, copy_word) == 0) {
        return 1;
    } else {
        return 0; 
    }
}
",1
aker238,1696216542,1,"int IsPalindrome(char *word)
{
   int p = 1;
    int l,i;
    l = strlen(word);
    int j = (l-1);
    for(i=0;i<l;i++){
        if (word[i] != word[j]){
            p = 0;
        }
        j--;
    }
    
    return p; 
}
",1
akin699,1696600974,1,"int IsPalindrome(char *word)
{
    int string_length;
	string_length = strlen(word);

	int i;
	i = 0;
	char front_word[string_length];
	char back_word[string_length];
	
    while (i <= string_length) {
		front_word[i] = word[i];
		i ++;
	}
	
	int j;
	j = string_length - 1;
	int k;
	k = 0;
	
	while (k < string_length) {
		back_word[k] = word[j];
		j --;
		k ++;
	}
	back_word[k] = '\0';

	int str_result;
	str_result = strcmp(front_word, back_word);
	int result;
	if (str_result == 0) {
		result = 1;
	}
	else {
		result = 0;
	}
	return result;
}
",1
akmu146,1696663986,1,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    if (len == 1){
        return 1; // Palindrome due to being a single character word
    }
    for (int i = 0; i < len/2; i++) {
        if (word[i] != word[len-i-1]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}",1
akod059,1696326005,1,"int IsPalindrome(char *word)
{
	int ispal = 0;
	for (int i = 0; i <= strlen(word) / 2; i++) {
		if (word[i] == word[strlen(word) - 1 - i]) {
			ispal = 1;
		}
		else {
			return 0;
		}
	}

	return ispal;
}",1
akri368,1696771791,1,"int IsPalindrome(char *word)
{
    int length;
    
    length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
akwo440,1696826515,1,"int IsPalindrome(char *word){
    int length;
    length = 0;
    while (word[length] != '\0'){ 
        length++;
    }
    length -= 1;
    printf(""%d"",length);

    int pos;
    int palindrome = 1;

    for (pos = 0; pos<length ; pos++){
        if (word[pos] != word[length-pos]){
            palindrome = 0;
        }
    }


    return palindrome;

}",0
akwo440,1696826680,2,"}
int IsPalindrome(char *word){
    int length;
    length = 0;
    while (word[length] != '\0'){ 
        length++;
    }
    length -= 1;
    int pos;
    int palindrome = 1;
    for (pos = 0; pos<length ; pos++){
        if (word[pos] != word[length-pos]){
            palindrome = 0;
        }
    }
    return palindrome;
}",0
akwo440,1696826698,3,"int IsPalindrome(char *word){
    int length;
    length = 0;
    while (word[length] != '\0'){ 
        length++;
    }
    length -= 1;
    int pos;
    int palindrome = 1;
    for (pos = 0; pos<length ; pos++){
        if (word[pos] != word[length-pos]){
            palindrome = 0;
        }
    }
    return palindrome;
}
",1
ali867,1696801909,1,"int IsPalindrome(char *word)
{
   int len = strlen(word);
    for (int i = 0; i < len / 2; i++) 
    {
        if (word[i] != word[len - 1 - i]) 
        {
            return 0; 
        }
    }
    return 1;
}
",1
alum086,1696306901,1,"#include <stdio.h>
#include <string.h>

// Function to check if a string is a palindrome
int IsPalindrome(const char* str) {
    int length = strlen(str);

    // Initialize left and right pointers for comparison
    int left = 0;
    int right = length - 1;

    // Compare characters from the ends towards the middle
    while (left < right) {
        if (str[left] != str[right]) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }

    return 1; // It's a palindrome
}

int main() {
    const char* word1 = ""noon"";
    const char* word2 = ""hello"";
    const char* word3 = ""racecar"";

    if (IsPalindrome(word1)) {
        printf(""%s is a palindrome\n"", word1);
    } else {
        printf(""%s is not a palindrome\n"", word1);
    }

    if (IsPalindrome(word2)) {
        printf(""%s is a palindrome\n"", word2);
    } else {
        printf(""%s is not a palindrome\n"", word2);
    }

    if (IsPalindrome(word3)) {
        printf(""%s is a palindrome\n"", word3);
    } else {
        printf(""%s is not a palindrome\n"", word3);
    }

    return 0;
}
",0
alum086,1696306985,2,"#include <string.h>

// Function to check if a string is a palindrome
int IsPalindrome(const char* str) {
    int length = strlen(str);

    // Initialize left and right pointers for comparison
    int left = 0;
    int right = length - 1;

    // Compare characters from the ends towards the middle
    while (left < right) {
        if (str[left] != str[right]) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }

    return 1; // It's a palindrome
}

int main() {
    const char* word1 = ""noon"";
    const char* word2 = ""hello"";
    const char* word3 = ""racecar"";

    if (IsPalindrome(word1)) {
        printf(""%s is a palindrome\n"", word1);
    } else {
        printf(""%s is not a palindrome\n"", word1);
    }

    if (IsPalindrome(word2)) {
        printf(""%s is a palindrome\n"", word2);
    } else {
        printf(""%s is not a palindrome\n"", word2);
    }

    if (IsPalindrome(word3)) {
        printf(""%s is a palindrome\n"", word3);
    } else {
        printf(""%s is not a palindrome\n"", word3);
    }

    return 0;
}
",0
alum086,1696801246,3,"#include <string.h>

// Function to check if a string is a palindrome
int IsPalindrome(const char* str) {
    int length = strlen(str);

    // Initialize left and right pointers for comparison
    int left = 0;
    int right = length - 1;

    // Compare characters from the ends towards the middle
    while (left < right) {
        if (str[left] != str[right]) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }

    return 1; // It's a palindrome
}
",1
amac853,1696557149,1,"int IsPalindrome(char *word)
{
    int strLength = strlen(word);
    int sI = 0;
    int eI = strLength -1;
    while (sI < (strLength/2 -1))
    {
        if (word[sI] != word[eI])
        {
           return 0; 
        }
        sI++;
        eI--;
    }
    return 1;
}",0
amac853,1696557335,2,"int IsPalindrome(char *word)
{
    int strLength = strlen(word);
    int sI = 0;
    int eI = strLength -1;
    while (sI < (strLength/2 ))
    {
        
        if (word[sI] != word[eI])
        {
           return 0; 
        }
        sI++;
        eI--;
    }
    return 1;
}",1
amag544,1696739540,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i;
    int j = length - 1;

    for (i = 0; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1;
    
}
",1
amah664,1696839686,1,"int IsPalindrome(char *word)
{
    int length = strlen(word); 

    for(int i = 0;i < length/2; i++){
        if(word[i] != word[length - 1 - i]){
            return 0; 
        }
    }
    return 1; 
}
",1
amal783,1696246056,1,"int IsPalindrome(char* word) {
	int len = strlen(word);
	for (int i = 0, j = len - 1; i < j; i++, j--) {
		if (word[i] != word[j]) {
			return 0;
		}
	}
	return 1;
}",1
amar516,1696821984,1,"#include <stdio.h>

int IsPalindrome(char *word)
{
int x;
int y = 0;

while (word[i] != \0) {
	i++;
	}

y = i;

for (x = 0; x <= y; x++){
	if (word[x] == word[y]){
		y--;
		}
	else{
		return 0;
		}
}
return 1;
}",0
amar516,1696822113,2,"#include <stdio.h>

int IsPalindrome(char *word)
{
int x;
int y;
int i = 0;

while (word[i] != '\0') {
	i++;
	}

y = i;

for (x = 0; x <= y; x++){
	if (word[x] == word[y]){
		y--;
		}
	else{
		return 0;
		}
}
return 1;
}",0
amar516,1696822349,3,"#include <stdio.h>

int IsPalindrome(char *word)
{
int x;
int y;
int i = 0;

while (word[i] != '\0') {
	i++;
	}

y = i;

for (x = 0; x < y; x++){
	if (word[x] == word[y - 1]){
		y--;
		}
	else{
		return 0;
		}
}
return 1;
}",1
amar704,1696230660,1,"int IsPalindrome(char *word)
{
    int Palindrome = 1;
    int length = 0;
    
    while (word[length] != '\0') {
        length++;
        
    }
    
    for (int i = 0; i < (length/2); i++) {
        if (word[i] != word[length - i - 1]) {
            Palindrome = 0;
        }
        
    }
    return Palindrome;
}
",1
amar768,1696650232,1,"int IsPalindrome(char *word)
{
    int strLength = strlen(word);

    int start = 0;
    int end = strLength - 1;

    while (start <= end) {
        if (word[start] != word[end]) {
            return 0;
        }
        start++;
        end--;
    }
    return 1;
}",1
amat407,1696668161,1,"int IsPalindrome(char *word)
{
 int length;
 length=strlen(word);
 int i=0;
 int a=length-1;
 while (word[i] != '\0') {
     if (word[i] != word[a]) {
        return 0;
     } 
     a--;
     i++;
 }
 return 1;
}
",1
amcm539,1696646731,1,"int IsPalindrome(char *word)
{
 /*IsPalindrome receives a string as input, and returns a 1 (true) if the
string is a palindrome, and a 0 (false) if it is not.*/

/*Input: A character string*/
/*Output: A logical true or false ( integer 1 or 0)*/

/*Author: Adam McMann*/

/*First step is to determine the length of the string, which can 
be achieved by searching for the null operator using a while loop*/
int length =0;
while (string[length] != '\0'){
    length++;
}
// i is the length of the string

/*Now we must use this length to compare the first element to the 
last element, and work inwards towards the centre of the array, one by one*/


int i=0;
char k;
k = string[length];
for (i = 0; i <= length/2; i++){
    if (string[i] != string[length -i-1]){
        return 0;
    }
}
return 1;   
}
",0
amcm539,1696647062,2,"int IsPalindrome(char *word)
{
/*IsPalindrome receives a string as input, and returns a 1 (true) if the
string is a palindrome, and a 0 (false) if it is not.*/

/*Input: A character string*/
/*Output: A logical true or false ( integer 1 or 0)*/

/*Author: Adam McMann*/

/*First step is to determine the length of the string, which can 
be achieved by searching for the null operator using a while loop*/
int length =0;
while (word[length] != '\0'){
    length++;
}
// length is the length of the string

/*Now we must use this length to compare the first element to the 
last element, and work inwards towards the centre of the array, one by one*/


int i=0;
for (i = 0; i <= length/2; i++){
    if (word[i] != word[length -i-1]){
        return 0;
    }
}
return 1;    
}
",1
amhk647,1696372335,1,"int IsPalindrome(char *word)
{
    int length = strlen(word); // length of word
    int count = 0; // counter for how many letters are mirrored
    for (int i = 0; i < length; i++) { // iterate through all letters of word
    	if (word[i] == word[length - 1 - i]) { // compare letters starting from first and last going inwards
    		count++; // if they are the same add to counter
    	}
    }
    if (count == length) { // return 1 if palindrome
    	return 1;
    }
    else { // return 0 if not
    	return 0;
    }
}
",1
amok249,1696207241,1,"int IsPalindrome(char *word)
{
    int i; 
    int j;
    int length = strlen(word);
    char reversed[length];
    
    for (i = 0; i < length; i++) {
        reversed[i] = word[length-1-i];
    }
   
    int count = 0;
    for (j = 0; j < length; j++) {
        if (reversed[j] == word[j]) {
            count++;
        }        
    }
    if (count == length) {
        return 1;
    } else {
        return 0;
    }
   
    
}",1
amur986,1696757038,1,"int IsPalindrome(char* word)
{
    int length;
    length = strlen(word);
    int i;
    char word2[100];
 
    for (i = 0;i < length; i++) {
        int x; int y;
        x = word[i];
        y = word[length - 1 - i];
        word2[i] = y;
        word2[length - 1 - i] = x;
    }
    word2[length] = '\0';
    if (strcmp(word, word2) == 0) {
        return 1;
    }
    else {
        return 0;
    }
}
",1
anig922,1696731565,1,"int IsPalindrome(char *word){
int a;
int b = 0;
char array[strlen(word)];

for (a=strlen(word)-1; a> -1 ; a= a -1){

array[b] = word[a];
  b= b + 1;
}
array[b] = '\0';

if (strcmp(array, word) == 0){

return 1;
}else{
 
   return 0; }
   }",1
aosm976,1696819558,1,"int IsPalindrome(char *word)
{
    char firstLetter[1] = """";
    char lastLetter[1]= """";
    int i = 0;
    int palindrome = 1;
    int stringLength = strlen(word);

    for (i = 0; i < stringLength; i++)
    {
        firstLetter[0] = word[i];
        lastLetter[0] = word[stringLength - 1 - i];

        if (firstLetter[0] != lastLetter[0])
        {
            palindrome = 0;
            return palindrome;
        }
        
    }
    return palindrome;
    
}
",1
apan786,1696813305,1,"int IsPalindrome(char *word)
{
    char reverse_word[100];
    int length = strlen(word);
    for (int i = length-1, j=0; i >= 0; i--, j++) {
        reverse_word[j] = word[i];
    }
    reverse_word[length] ='\0' ;
    if (strcmp(word, reverse_word) == 0) {
        return 1; 
    } else {
        return 0; 
    }
}",1
apat750,1696408466,1,"#include <stdio.h>
#include <string.h>
int IsPalindrome(char *word)
{ int i=0; 
int length= strlen(word);

for (i=0; i < length ; i++) {
    if (word[i] != word[length-i -1])
    return 0;
    else{
        return 1;
    }
}
    
}",0
apat750,1696408579,2,"
int IsPalindrome(char *word)
{ int i=0; 
int length= strlen(word);

for (i=0; i < length ; i++) {
    if (word[i] != word[length-i -1])
    return 0;
    }
return 1;
    
}",1
apat824,1696833716,1,"int IsPalindrome(char *word)
{
  for ( int i = 0; i < (strlen(word))/2; i++) {
        if (word[i] != word[strlen(word) - 1 - i]) {
           return 0;
    
        }
          
    }
    
    return 1;  
}
",1
apen181,1696586210,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int x = 0;
    int y = strlen(word)-1;
    
    while(x<y){
        
        if(word[x] != word[y]){
            return 0;
        }
        x += 1;
        y -= 1;
        
    }
    return 1;
   
}
",1
apre444,1696834563,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
/*IsPalindrome is a function that takes an inputted character string, 'word', of lowercase characters
and returns true/1 if the string is a palindrome or not (returns 0). 
Author: Amy Prebble*/
{
    int wordlen= strlen(word);
    int i;
    int j;
    for (i=0, j<wordlen-1; i<j; i++, j--) {
        if (word[i] != word [j]) {
        return 0;
        }
    }
    return 1;
}",0
apre444,1696834918,2,"#include <stdio.h>
#include <string.h>

/*IsPalindrome is a function that takes an inputted character string, 'word', of lowercase characters
and returns true/1 if the string is a palindrome or not (returns 0). 
Author: Amy Prebble*/
int IsPalindrome(char *word) {
    int wordlen= strlen(word);
    int i;
    int j=wordlen-1;
    
    for (i=0; i<j; i++, j--) {
        if (word[i] != word [j]) {
        return 0;
        }
    }
    return 1;
}",1
apur448,1696765664,1,"#include <stdio.h>
#include <string.h> 

//Function returns 1, true, if word is a pallindrome and returns 0, false, if it isn't.
int IsPalindrome(char *word)
{
    int length, i, j, result;
    
    length = strlen(word);

    i = 0;
    j = length - 1;
    while ((i <= j) && (j >=i)) {
        if (word[i] == word[j]) {
            i++;
            j--;
            result = 1;
        }
        else {
            return 0;
        }
    }
    return result;
}
",1
aqu284,1696824810,1,"int IsPalindrome(char* word)
{
    // Finding length of word
    int length = strlen(word);
    // Flitting through the first and last letter and comparing them specifically.
    int i = 0;
    while (i < length / 2) {
        if (word[i] != word[length - i - 1]) {
            return 0; 
        }
        i++;
    }
    return 1; 
}
",1
arah160,1696841918,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        if (word[i] != word[length - i -1]) { return 0; }
    }
    return 1;
}

",1
arus530,1696299182,1,"int IsPalindrome(char a[])
{
    int length = strlen(a);
    int out = 1;
    int count = length-1;

    for (int i = 0; i<length; i++) {
        if (a[i] != a[count]){
            out = 0;
        }
        count--;
    }
    return out;
}
",1
aryu462,1696805633,1,"#include <stdio.h>
#include < string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
      int i, j;
      
      for (i = 0, j = length -1: i < j; i++, j--) {
          if (word[i] != word[j]) {
              return 0; 
          }
      }
    
    return 1;
    
}
",0
aryu462,1696805648,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
      int i, j;
      
      for (i = 0, j = length -1: i < j; i++, j--) {
          if (word[i] != word[j]) {
              return 0; 
          }
      }
    
    return 1;
    
}
",0
aryu462,1696805684,3,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
      int i, j;
      
      for (i = 0, j = length -1; i < j; i++, j--) {
          if (word[i] != word[j]) {
              return 0; 
          }
      }
    
    return 1;
    
}
",1
asaa285,1696796859,1,"int IsPalindrome(char *word)
{
    char stringReverse[strlen(word)];
    int outcome = 1;
    for (int i;i<strlen(word);i++)
    {
        stringReverse[i] = word[strlen(word)-i-1];
        printf(""%c"",word[strlen(word)-i-1]);
    }
    for (int i = 0; i< strlen(word); i++)
    {
        if (word[i] != stringReverse[i])
        {
            outcome = 0;
            // printf(""%c%c"", word[i], stringReverse[i]);
            return outcome;
        }
    }
    return outcome;
}
",0
asaa285,1696796927,2,"int IsPalindrome(char *word)
{
    char stringReverse[strlen(word)];
    int outcome = 1;
    for (int i;i<strlen(word);i++)
    {
        stringReverse[i] = word[strlen(word)-i-1];
        // printf(""%c"",word[strlen(word)-i-1]);
    }
    for (int i = 0; i< strlen(word); i++)
    {
        if (word[i] != stringReverse[i])
        {
            outcome = 0;
            // printf(""%c%c"", word[i], stringReverse[i]);
            return outcome;
        }
    }
    return outcome;
}
}
",0
asaa285,1696796982,3,"int IsPalindrome(char *word)
{
    char stringReverse[strlen(word)];
    int outcome = 1;
    for (int i;i<strlen(word);i++)
    {
        stringReverse[i] = word[strlen(word)-i-1];
        // printf(""%c"",word[strlen(word)-i-1]);
    }
    for (int i = 0; i< strlen(word); i++)
    {
        if (word[i] != stringReverse[i])
        {
            outcome = 0;
            // printf(""%c%c"", word[i], stringReverse[i]);
            return outcome;
        }
    }
    return outcome;
}
",0
asaa285,1696797726,4,"int IsPalindrome(char *word) 
{
    int stringLength = strlen(word);
    
    for (int i = 0; i < stringLength / 2; i++) 
    {
        if (word[i] != word[stringLength - 1 - i]) 
        {
            return 0;
        }
    }
    return 1;
}",1
asah845,1696360398,1,"int IsPalindrome(char *wurd)
{
  int lenth, i, j, logic;
char reverse[100];

lenth = 0;

while (wurd[lenth] != '\0') {
	lenth++ ;
}

for (i = 0; i < lenth; i++) {
		wurd[i] = reverse[lenth -1 - i];
}

j = 0;
logic = 0;
while (wurd[j] != '\0') {
	logic = (wurd[i] == reverse[i]);
if (!logic) {
	break;

}

j++;

}
return logic;
  
}
",0
asah845,1696707153,2,"int IsPalindrome(char *word)
{
 int true = 1;
int false = 0;
int i;
int j;
int counter;
int anser;

j = strlen(wurd);

for (i = 0; i < j; i++) {
	counter = j - i;
	anser = (wurd[i] == wurd[counter]);

}

if (anser == false) {
	return false;
} else if (anser == true) {
	return true;
}

   
}
",0
asah845,1696707213,3,"int IsPalindrome(char *word)
{
   
int true = 1;
int false = 0;
int i;
int j;
int counter;
int anser;

j = strlen(*word);

for (i = 0; i < j; i++) {
	counter = j - i;
	anser = (*word[i] == *word[counter]);

}

if (anser == false) {
	return false;
} else if (anser == true) {
	return true;
}
 
}
",0
asah845,1696708862,4,"int IsPalindrome(char *word)
{
   
int true = 1;
int false = 0;
int i;
int j;
int counter;
int anser;

j = 0;
while (word[j] != '\0') {
	j++;
}

for (i = 0; i < j; i++) {
	counter = j - i;
	if (word[i] == word[counter]) {
		anser = true;
	} else if (word[i] != word[counter]) {
		anser = false;
		break;
	}
}

return anser;
 
}
",0
asah845,1696708957,5,"int IsPalindrome(char *word)
{
   

int i;
int j;
int counter;
int anser;

j = 0;
while (word[j] != '\0') {
	j++;
}

for (i = 0; i < j; i++) {
	counter = j - i;
	if (word[i] == word[counter]) {
		anser = true;
	} else if (word[i] != word[counter]) {
		anser = false;
		break;
	}
}

return anser;
 
}
",0
asah845,1696708975,6,"int IsPalindrome(char *word)
{
   
int true = 1;
int false = 0;
int i;
int j;
int counter;
int anser;

j = 0;
while (word[j] != '\0') {
	j++;
}

for (i = 0; i < j; i++) {
	counter = j - i;
	if (word[i] == word[counter]) {
		anser = true;
	} else if (word[i] != word[counter]) {
		anser = false;
		break;
	}
}

return anser;
 
}
",0
asah845,1696709080,7,"int IsPalindrome(char *word)
{
   
int true = 1;
int false = 0;
int i;
int j;
int counter;
int anser = 1;

j = 0;
while (word[j] != '\0') {
	j++;
}

for (i = 0; i < j; i++) {
	counter = j - i;
	if (word[i] == word[counter]) {
		anser = true;
	} else if (word[i] != word[counter]) {
		anser = false;
		break;
	}
}

return anser;
 
}
",0
asah845,1696709151,8,"int IsPalindrome(char *word)
{
   
int i;
int j;
int counter;
int anser = 1;

j = 0;
while (word[j] != '\0') {
	j++;
}

for (i = 0; i < j; i++) {
	counter = j - i;
	if (word[i] == word[counter]) {
		anser = 1;
	} else if (word[i] != word[counter]) {
		anser = 0;
		break;
	}
}

return anser;
 
}
",0
asah845,1696709171,9,"int IsPalindrome(char *word)
{
   
int i;
int j;
int counter;
int anser = 1;

j = 0;
while (word[j] != '\0') {
	j++;
}

for (i = 0; i < j; i++) {
	counter = j -1 - i;
	if (word[i] == word[counter]) {
		anser = 1;
	} else if (word[i] != word[counter]) {
		anser = 0;
		break;
	}
}

return anser;
 
}
",1
ashe298,1696824722,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length - 1; 
    
    while(start<end){
        if (word[start] != word[end]) {
            return 0;
        }
        start++;
        end--;
        
    }
    return 1;
}

",1
ashi565,1696241714,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *str) {
    int left = 0;
    int right = strlen(str) - 1;
    
    while (left < right) {
        if (str[left] != str[right]) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }
    
    return 1; // It's a palindrome
}


",1
asim819,1696643680,1,"int IsPalindrome(char *word) {

	int length = strlen(word);
	int lower = 0;
	int upper = length - 1;
	int temp;

	char* copy = _strdup(word);


	while (lower < upper) {

		//Swap lower val and upper val
		temp = copy[upper];
		copy[upper] = copy[lower];
		copy[lower] = temp;

		//Increment lower and upper towards center of array
		lower++;
		upper--;

	}

	for (int i = 0; i < length; i++) {
		if (word[i] != copy[i]) {
			return 0;
		}
	}
	return 1;
}",0
asim819,1696643761,2,"int IsPalindrome(char *word) {

	int length = strlen(word);
	int lower = 0;
	int upper = length - 1;
	int temp;

	char* copy = strdup(word);


	while (lower < upper) {

		//Swap lower val and upper val
		temp = copy[upper];
		copy[upper] = copy[lower];
		copy[lower] = temp;

		//Increment lower and upper towards center of array
		lower++;
		upper--;

	}

	for (int i = 0; i < length; i++) {
		if (word[i] != copy[i]) {
			return 0;
		}
	}
	return 1;
}",0
asim819,1696644935,3,"int IsPalindrome(char* word) {

	int length = strlen(word);
	int lower = 0;
	int upper = length - 1;

	while (lower < upper) {

		if (word[lower] != word[upper]) {
			return 0;
		}

		lower++;
		upper--;

	}
	
	return 1;
}",1
aski294,1696642181,1,"#define CRT_SECURE_NO_WARNINGS_
#include <stdio.h>
#include <stdlib.h>

int IsPalindrome(char* word)
{
	int isPal = 1;
	int i1 = 0;
	int i2 = 0;

	while (word[i2] != '\0') {
		i2++;
	}

	i2--;

	while (i1 <= i2) {
		if (word[i1] != word[i2]) {
		isPal = 0;
		}

		i1++;
		i2--;
	}

	return isPal;
}
",1
asmi629,1696817267,1,"int IsPalindrome(char *word)
{   int first = 0;
    int last = strlen(word) - 1;

    while (first < last) {
        if (word[left] != word[right]) {
            return 0;
        }
        left++;
        right--;
    }

    return 1; 
} 
}
",0
asmi629,1696817326,2,"int IsPalindrome(char *word)
{   int first = 0;
    int last = strlen(word) - 1;

    while (first < last) {
        if (word[first] != word[last]) {
            return 0;
        }
        first++;
        last--;
    }

    return 1; 
} 

",1
atay777,1696649690,1,"int IsPalindrome(char *word)
{
    int i;
    int length=strlen(word);
    for (i = 0; i < length-1; i++)
    {
        if (word[i] != word[length-1-i])
        {
            return 0;
        }
        
    }
    return 1;
    
}
",1
atee059,1696209479,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    char temp[100] = {0};
    
    int i,j;
    for (i=length-1;i>=(length-length/2); i--){
        temp[j] = word[i];
        j++;
    }
    
    if (strncmp(word, temp, length/2) == 0 || length == 1){
        return 1;
    }
    else{
        return 0;
    }
}",1
atho643,1696327521,1,"int IsPalindrome(char *word)
{
   int i = 0;
   int j = strlen(word)-1;
   
   while (i<j) {
       if (str[i++] != str[j--]) {
           return 0;
       }
   }
   
   return 1; 
    
}
",0
atho643,1696327553,2,"int IsPalindrome(char *word)
{
   int i = 0;
   int j = strlen(word)-1;
   
   while (i<j) {
       if (word[i++] != word[j--]) {
           return 0;
       }
   }
   
   return 1; 
    
}
",1
athu157,1696323526,1,"int IsPalindrome(char *word)
{
	int i, max;
	max = strlen(word);
	for (i = 0; i < strlen(word); i++) {
		if (word[i] != word[max - 1 - i]) {
				return 0;
		}
	}
	return 1;    
}
",1
atup175,1696846520,1,"int IsPalindrome(char *word)
{
    char *start = word;
    char *end = word + strlen(word) - 1;
    
    while (end > start){
        if (*start != *end){
            return0;
        }
        start++;
        end--;
    }
    return 1;
}
",0
atup175,1696846528,2,"int IsPalindrome(char *word)
{
    char *start = word;
    char *end = word + strlen(word) - 1;
    
    while (end > start){
        if (*start != *end){
            return 0;
        }
        start++;
        end--;
    }
    return 1;
}
",1
avan381,1696739176,1,"int IsPalindrome(char *text)
{
    //INITIALISE VAIRABLES n COUNTERS
    int SpaceCounter = 0;
    
    //FIND LENGTH OF STRING
    int Length = strlen(text);
    
    
    
    // COUNT HOW MANY SPACES PRESENT
    for (int i = 0; i < Length; i ++){
        
        if (text[i] == 32){
        SpaceCounter = SpaceCounter + 1;
        }
        
    }
    
    //MAKE TWO DUPLICATE ARRAYS WITHOUT SPACES
    char Copytxt[100];
    int k = 0;
    
    for (int i = 0; i < Length; i++){
        if (text[i] != 32){
            Copytxt[k] = text[i];
            k++;
        }
    }
    
    int NewLength = strlen(Copytxt);
    char Revtxt[100];

    
    //REVERSE ONE DUPLICATE ARRAY
 int count = 0;
    for (int i = NewLength - 1; i >= 0; i--){
        Revtxt[count] = Copytxt[i];
        count++;
    }
    
            printf(""SPACES %i LENGTH %i NEWL %i \n%s \n%s\n"", SpaceCounter, Length, NewLength, Copytxt, Revtxt);
            
    //COMPARE THE TWO ARRAYS:
    for (int i = 0; i < NewLength; i++){
        if (Revtxt[i] != Copytxt[i]){
            return 0;
        }
    }

    return 1;
}
",0
avan381,1696741104,2,"int IsPalindrome(char *text)
{
    //INITIALISE VAIRABLES n COUNTERS
    int SpaceCounter = 0;
   
    //FIND LENGTH OF STRING
    int Length = strlen(text);
   
   
   
    // COUNT HOW MANY SPACES PRESENT
    for (int i = 0; i < Length; i ++){
       
        if (text[i] == 32){
        SpaceCounter = SpaceCounter + 1;
        }
       
    }
   
    //MAKE TWO DUPLICATE ARRAYS WITHOUT SPACES
    char Copytxt[10000];
    int k = 0;
   
    for (int i = 0; i < Length; i++){
        if (text[i] != 32){
            Copytxt[k] = text[i];
            k++;
        }
    }
    
   Copytxt[k] = '\0';
   
    char Revtxt[10000];

   
    //REVERSE ONE DUPLICATE ARRAY
     int NewLength = strlen(Copytxt);
 int count = 0;
    for (int i = NewLength - 1; i >= 0; i--){
        Revtxt[count] = Copytxt[i];
        count++;
    }
    Revtxt[count] = '\0';
           
    //COMPARE THE TWO ARRAYS:
    for (int i = 0; i < NewLength; i++){
        if (Revtxt[i] != Copytxt[i]){
            return 0;
        }
    }

    return 1;
}",1
awal599,1696470105,1,"int IsPalindrome(char *word)
{
    int i=0;
    int length;
    length = strlen(word);
    while (word[i] != '\0') 
    {
        if (word[i] != word[length-1-i])
        {
        return 0;
        }
        i++;
    }
    
    return 1;
    
}
",1
awan603,1696832978,1,"int IsPalindrome(char *word)
{
    cleaned_word = word.replace ("" "",""""). lower()
    return int (cleaned_word == cleaned_word[::-1]) 
    word = input(""Enter a word:"")
    result = is_palindrome(word)
    print (result)
}
",0
awar747,1696839737,1,"int IsPalindrome(const char *str) {
    int len = strlen(str);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0; // Not a palindrome
        }
    }
    
    return 1; // Palindrome
}
",1
awil907,1696283525,1,"int IsPalindrome(char *word)
{
    int i;
    int j;
    int wordLength;

    wordLength = strlen(word);

    for (i = 0, j = wordLength - 1; i < wordLength; i++, j--){
        if (word[i] != word[j]){
            return 0;
        }
    }

    return 1;
}",1
awri757,1696292506,1,"int IsPalindrome(char* word)
{
    int check = 1;
    int length;
    int i;
    length = strlen(word);

    for (i = 0; i < length; i++) {
        if (word[i] != word[length - 1 - i]) {
            return check = 0;
        }
    }

    return check;

}",1
ayan607,1696673353,1,"int IsPalindrome(char* word)
{
    int length = strlen(word);
    int i;
    int pos = length;
    for (i = 0;i < (length - 1) / 2;i++){
        if (word[i] == ' '){
            continue;
        }
        pos--;
        if (word[i] == word[pos]){
            continue;
        }else{
            return 0;
        }
    }
    return 1;
}
",0
ayan607,1696674868,2,"int IsPalindrome(char* word)
{
    int length = strlen(word);
    int i,pos;
    pos = length - 1;

    length = strlen(word);

    for (i = 0;i < (length - 1) / 2;i++){
        if (word[i] == ' '){
            continue;
        }else if (word[pos] == ' '){
            pos--;
        }
        
        if (word[i] == word[pos]){
            pos--;
            continue;
        }else{
            return 0;
        }
    }
    return 1;
}",0
ayan607,1696675168,3,"int IsPalindrome(char* word)
{
    int length = strlen(word);
    int i,pos;
    pos = length - 1;

    length = strlen(word);

    if ((length - 1) / 2 <= 1){
        length = 3;
    }

    for (i = 0;i < (length - 1) / 2;i++){
        if (word[i] == ' '){
            continue;
        }else if (word[pos] == ' '){
            pos--;
        }
        
        if (word[i] == word[pos]){
            pos--;
            continue;
        }else{
            return 0;
        }
    }
    return 1;
}",1
ayou303,1696479047,1,"

#include <stdio.h>
#include <string.h>
int IsPalindrome(char* word)
{
	int n = strlen(word);
	int j = 0;
	for (int i = n-1; i >= 0; i--) {
		if (word[i] == word[j]) {
			j++;
		}
		else {
			return 0;
		}


	}
	return 1;
}

",1
ayou533,1696390003,1,"int IsPalindrome(char *word)
{
      int length = strlen(str);
    for (int i = 0; i < length / 2; i++) {
        if (str[i] != str[length - 1 - i]) {
            return 0;  
        }
    }
    return 1;  
}
",0
ayou533,1696390072,2,"int IsPalindrome(char *word)
{
      int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (str[i] != str[length - 1 - i]) {
            return 0;  
        }
    }
    return 1;  
}
",0
ayou533,1696390420,3,"int IsPalindrome(char *word)
{
      int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;  
        }
    }
    return 1;  
}
",1
ayua214,1696813595,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *str) {
    int len = strlen(str);
    int i, j;

    // Traverse the string from both ends towards the center
    for (i = 0, j = len - 1; i < j; i++, j--) {
        // If characters don't match, it's not a palindrome
        if (str[i] != str[j])
            return 0;  // Not a palindrome
    }

    return 1;  // It's a palindrome
}",1
bate521,1696828019,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *word) {
    int length = strlen(word);
    for (int i = 0; i < length/2; i++) {
        if (word[i] != word[length-(i+1)]) {
            return 0;
        }
    }
    return 1;
}",1
bate521,1696828293,2,"int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length/2; i++) {
        if (word[i] != word[length-(i+1)]) {
            return 0;
        }
    }
    return 1;
}",1
bcar662,1696771825,1,"int IsPalindrome(char *word)
{
    int length;
    length = (int)strlen(word);
    int i = 0;
    int j = length;
    
    while (i <= j) {
    	i++;
    	j--;
    
    	if (word[i] =! word[j])
    		return 0;
    }
    return 1;
}
",0
bcar662,1696771957,2,"int IsPalindrome(char *word)
{
    int length;
    length = (int)strlen(word);
    int i = 0;
    int j = length;
    
    while (i <= j) {
    	i++;
    	j--;
    
    	if (word[i] = !word[j]) {
	        return 0;
        }
    }
    return 1;
}
",0
bcar662,1696817695,3,"int IsPalindrome(char *word)
{
    int length;
    length = (int)strlen(word);
    int i = 0;
    int j = length-1;

    while (i < j) {
        i++;
        j--;

        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}
",0
bcar662,1696817958,4,"int IsPalindrome(char *word)
{
    int length;
    length = (int)strlen(word);
    int i = 0;
    int j = length-1;

    while (i < j) {

        if (word[i] != word[j]) {
            return 0;
        }
        i++;
        j--;
    }
    return 1;
}
",1
bcha389,1696297203,1,"int IsPalindrome(char* word)
{

	for (int i = 0; i < strlen(word); i++) {
		if (word[i] == ' ') {
			int j = i;
			while (j < strlen(word)) {
				word[j] = word[j + 1];
				j++;
			}
		}
	}

	printf(""%s\n"", word);

	for (int i = 0; i < strlen(word); i++) {
		if (word[i] != word[strlen(word) - 1 - i]) {
			return 0;
		}
	}

	return 1; //This is only reached if you went through the whole for statement and the word is a palindrome.
}
",0
bcha389,1696297235,2,"int IsPalindrome(char* word)
{

	for (int i = 0; i < strlen(word); i++) {
		if (word[i] == ' ') {
			int j = i;
			while (j < strlen(word)) {
				word[j] = word[j + 1];
				j++;
			}
		}
	}

	for (int i = 0; i < strlen(word); i++) {
		if (word[i] != word[strlen(word) - 1 - i]) {
			return 0;
		}
	}

	return 1; //This is only reached if you went through the whole for statement and the word is a palindrome.
}",1
bcha726,1696450639,1,"int IsPalindrome(char *word) {
    
    int i;
    int length = strlen(word);

    for (i = 0; i < length/2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }

    return 1;
}
",1
bcos422,1696298471,1,"int IsPalindrome(char* word)
{
	int i, length;
	for (i = 0; i < 100; i++) {
		if (word[i] == 0) {
			length = i;
			break;
		}
	}

	for (i = 0; i < 0.5 * length; i++) {
		if (word[i] != word[length-1-i]) {
			return 0;
			break;
		}
	}
		
	return 1;
}",1
bcru157,1696300526,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int IsPalindrome(char *word)
{
	int i = 0;
	int string_length;
	while (word[i] != '\0') {
		i++;
		string_length = i;
	}

	for (i = 0; i <= string_length - 1; i++) {
		if (word[i] == word[string_length - 1 - i]) {
			return 1;
		} else {
			return 0;
		}
	}
}",0
bcru157,1696300948,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

int IsPalindrome(char *word)
{
	int i = 0;
	int string_length;
	while (word[i] != '\0') {
		i++;
		string_length = i;
	}

	for (i = 0; i <= string_length - 1; i++) {
		if (word[i] != word[string_length - 1 - i]) {
			return 0;
		}
	}
	return 1;
}",1
besk864,1696418792,1,"int IsPalindrome(char *word)
{

char drow[100];
       strcpy(drow, word);
        int i;
        int number;
        
        i = (strlen(word));
        
        for (int w = 0; w <= i+1; w++){
            
        
            
            drow[w] = word[i-1];
            
            i = i - 1;
            
        }
       
        
        
        if (strcmp(word, drow) == 0){
            
            
            number = 1;
        } else{
            number = 0;
        }
          
            
        
        
        
        
        return number;
    
}
",1
bfis965,1696373326,1,"int IsPalindrome(char *word)
{
    char word[10];
	char wordNew[10];
	int i, j, length;
	int notPalindrome = -1;
	scanf(""%s"", word);
	length = 0;
	while (word[length] != '\0') {
		length++;
	}

	j = 0;
	for (i = length-1; i >= 0; i--) {
		wordNew[i] = word[j];
		j++;
	}
	wordNew[length] = '\0';

	for (i = 0; i < length; i++) { 
		if (word[i] != wordNew[i]) {
			notPalindrome = 1;
		}
	}
	if (notPalindrome == 1) {
		return 0;
	}
	else
		return 1;
}
",0
bfis965,1696373604,2,"int IsPalindrome(char *word)
{
    char wordNew[10];
	int i, j, length;
	int notPalindrome = -1;
	
	length = 0;
	while (word[length] != '\0') {
		length++;
	}

	j = 0;
	for (i = length-1; i >= 0; i--) {
		wordNew[i] = word[j];
		j++;
	}
	wordNew[length] = '\0';

	for (i = 0; i < length; i++) { 
		if (word[i] != wordNew[i]) {
			notPalindrome = 1;
		}
	}
	if (notPalindrome == 1) {
		return 0;
	}
	else
		return 1;
}
",0
bfis965,1696382271,3,"int IsPalindrome(char *word)
{
    char wordNew[100];
    char wordNoSpace[100];
	int i, j, length;
	int notPalindrome = -1;
	
	length = 0;
	while (word[length] != '\0') {
		length++;
	}
	j = 0;
        for (int i = 0; i < length; i++) {
            if (word[i] != ' ') {
                wordNoSpace[j] = word[i];
                j++;
            }
        }
        length = j;
        
	j = 0;
	for (i = length-1; i >= 0; i--) {
		wordNew[i] = wordNoSpace[j];
		j++;
	}
	wordNew[length] = '\0';

	for (i = 0; i < length; i++) { 
		if (wordNoSpace[i] != wordNew[i]) {
			notPalindrome = 1;
		}
	}
	if (notPalindrome == 1) {
		return 0;
	}
	else
		return 1;
}
",1
bfla774,1696816988,1,"int IsPalindrome(char *word)
{
int i;
int length;
length = strlen(word);
for (i = 0; i < length / 2; i++) {
	if (word[i] != word[length -1-i]) {
		return 0;
	}
	  
}
return 1;    
}
",1
bgib630,1696207628,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    char newWord;
    
    int length = strlen(*word);
    
    newWord = strrev(*word);
    
    if (newWord == *word)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0
bgib630,1696292571,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int n = length/2;
    
    for (i = 0; i < n; i++)
    {
        if (word[i] != word[length - i - 1])
        {
            return 0;
        }
    }
    
    return 1;
}
",0
bgib630,1696292599,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int n = length/2;
    
    for (int i = 0; i < n; i++)
    {
        if (word[i] != word[length - i - 1])
        {
            return 0;
        }
    }
    
    return 1;
}
",1
bgru726,1696658087,1,"int IsPalindrome(char* word) 
{
	char origWord[100];
	strcpy_s(origWord, 100, word);
	int temp;
	int length = strlen(word);
	for (int i = 0; i < length/2; i++) {
		temp = word[i];
		word[i] = word[length - i - 1];
		word[length - i - 1] = temp;
	}

	printf(""%s -> %s\n"", origWord, word);
	if (strcmp(origWord, word)) {
		return 0;
	}
	else {
		return 1;
	}
}",0
bgru726,1696658107,2,"int IsPalindrome(char* word) 
{
	char origWord[100];
	strcpy(origWord, word);
	int temp;
	int length = strlen(word);
	for (int i = 0; i < length/2; i++) {
		temp = word[i];
		word[i] = word[length - i - 1];
		word[length - i - 1] = temp;
	}

	printf(""%s -> %s\n"", origWord, word);
	if (strcmp(origWord, word)) {
		return 0;
	}
	else {
		return 1;
	}
}",0
bgru726,1696658122,3,"int IsPalindrome(char* word) 
{
	char origWord[100];
	strcpy(origWord, word);
	int temp;
	int length = strlen(word);
	for (int i = 0; i < length/2; i++) {
		temp = word[i];
		word[i] = word[length - i - 1];
		word[length - i - 1] = temp;
	}

	if (strcmp(origWord, word)) {
		return 0;
	}
	else {
		return 1;
	}
}",1
bguo360,1696205412,1,"int IsPalindrome(char* word) {
	for (int i = 0; i < strlen(word) / 2; i++) {
		if (word[i] != word[strlen(word) - 1 - i]) {
			return 0;
		}
	}
	return 1;
}",1
bhua898,1696207195,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length - 1;
    int palindrome = 1;

    while (start < (length / 2)) {
        if (word[start] != word[end]) {
            palindrome = 0;
        }
        start++;
        end--;
    }
    return palindrome;
}",1
bjin223,1696813753,1,"int IsPalindrome(char *word)
{
    int i,b;
    
    i=0;
    b=0;
    while (word[b] != '\0'){
        b++;
    }
    
    i=0;
    while (word[i] != '\0'){
        if (word[i] != word[b-1-i]){
            return 0;
        }
        i++;
    }
    return 1;
}
",1
bjon836,1696208638,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length - 1;

    while (start < end) {
        if (word[start] != word[end]) {
            return 0;
        }
        start++;
        end--;
    }
    return 1;
}
",1
bkho028,1696218650,1,"int IsPalindrome(char *word)
{
 for (int i = 0; i < strlen(word); i++)
    {
        char leftToRight = word[i];
        for (int j = strlen(word) - 1; j >= 0; j--)
        {
            char rightToLeft = word[j];
            if (leftToRight != rightToLeft)
            {
                return 0;
            }
        }
    }
    return 1;
    
}
",0
bkho028,1696218835,2,"int IsPalindrome(char *word)
{
  for (int i = 0; i < strlen(word); i++)
    {
        char leftToRight = word[i];
        char rightToLeft = word[strlen(word) - i - 1];
        if (leftToRight != rightToLeft)
        {
            return 0;
        }
    }
    return 1;
}
",1
blar030,1696796129,1,"#include <stdio.h>
#include <string.h>
int IsPalindrome(char word[])
{
    int length = strlen(word);
    int temparray [100];
    int i=0;

    while (i<length) 
        {
            temparray[i] = word[length-i-1];
            i++;
        }
        
    i=0;
    while(i<length)
    {
        if (temparray[i] != word[i])
        {
            return 0;
        }
        i++;
    }
    return 1;
}
",1
bli482,1696301945,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
	int i, j, k, m;
	
	j = strlen(word);
	m = j - 1;
	k = j / 2 - 1;

	for (i = 0; i < k; i++) {
		if (word[i] == word[(m - i)]) {
			return 1;
		}
		else {
			return 0;
		}
	}
}",0
bli482,1696303424,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
	int i, j;
	j = strlen(word) - 1;
	for (i = 0; i < j; i++)
	{
		if (word[i] != word[j]) {
			return 0;
		}
		j--;
	}
	return 1;

}
",1
bli775,1696247807,1,"//

#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;  // Not a palindrome
        }
    }
    return 1;  // Palindrome
}


int main() {
    char word1[100] = ""a"";
    printf(""%d\n"", IsPalindrome(word1)); 

    char word2[100] = ""abbc"";
    printf(""%d\n"", IsPalindrome(word2)); 

    return 0;
}
",0
bli775,1696247824,2,"//

#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
        }
    }
    return 1; 
}

",1
bli775,1696247893,3,"// Author: bei

#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
        }
    }
    return 1; 
}

",1
blin888,1696724195,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int len;
    len = strlen(word);

    int i = 0;
    int j = len - 1;

    while (i < j) {
        i++;
        j--;
        if word[i] == word[j] {
            return 0;

        }
    }
}
",0
blin888,1696724311,2,"int IsPalindrome(char *word)
{
    int len;
    len = strlen(word);

    int i = 0;
    int j = len - 1;

    while (i < j) {
        if word[i] == word[j] {
            return 1;

        }
        i++;
        j--;
    }
    return 0;
}
",0
blin888,1696724629,3,"int IsPalindrome(char *word)
{
    int len;
    len = strlen(word);

    int i = 0;
    int j = len - 1;

    while (i < j) {
        if (word[i] == word[j]) {
            return 1;

        }
        i++;
        j--;
    }
    return 0;
}
",0
blin888,1696724763,4,"int IsPalindrome(char *word)
{
    int len;
    len = strlen(word);

    int i = 0;
    int j = len - 1;

    while (i < j) {
        if (word[i] != word[j]) {
            return 0;

        }
        i++;
        j--;
    }
    return 1;
}
",1
bmac148,1696299226,1,"int IsPalindrome(char *word){
    int len = strlen(word);
    int j = len - 1;
    for (int i = 0; i < len; i++){
        if (word[i] != word[j]){
            return 0;
        }
        j--;
    }  
    return 1;
}",1
bora417,1696403756,1,"int IsPalindrome(char *word)
{
    int i;
    int length = strlen(word);

    //Loop to determine palindrome
    for (i = 0; i < length; i++) {
        if (word[i] == word[strlen(word) - (i+1)]) {
            return 1;
        } else {
            return 0;
        }
    }
    return 0;
}    

",0
bora417,1696404055,2,"int IsPalindrome(char *word)
{
    int i;
    int length = strlen(word);
    int palindrome = 0; 

    //Loop to determine palindrome
    for (i = 0; i < length; i++) {
        if (word[i] == word[strlen(word) - (i+1)]) {
            palindrome = 1;
        } else {
            return 0;
        }
    }
    return palindrome;
}    ",1
bpak212,1696801624,1,"#include <stdio.h>
int IsPalindrome(char *word)
{
int len = strlen(str);
    for (int i = 0; i < (len / 2); i++) 
    {
        if (str[i] != str[len - 1 - i])
        {
            // if returns with 0, output wont be Palindrome
            return 0;
        }
    }
    // if returns with 1, ouput will be Palindrome
    return 1; 
}
    
}
",0
bpak212,1696801635,2,"#include <stdio.h>
int IsPalindrome(char *word)
{
int len = strlen(str);
    for (int i = 0; i < len / 2; i++) 
    {
        if (str[i] != str[len - 1 - i])
        {
            // if returns with 0, output wont be Palindrome
            return 0;
        }
    }
    // if returns with 1, ouput will be Palindrome
    return 1; 
}
    
}
",0
bpak212,1696801656,3,"#include <stdio.h>
int IsPalindrome(const char *str)
{
int len = strlen(str);
    for (int i = 0; i < len / 2; i++) 
    {
        if (str[i] != str[len - 1 - i])
        {
            // if returns with 0, output wont be Palindrome
            return 0;
        }
    }
    // if returns with 1, ouput will be Palindrome
    return 1; 
}
    
}
",0
bpak212,1696801727,4,"#include <stdio.h>
int IsPalindrome(const char *str)
{
int len = strlen(str);
    for (int i = 0; i < len / 2; i++) 
    {
        if (str[i] != str[len - 1 - i])
        {
            // if returns with 0, output wont be Palindrome
            return 0;
        }
    }
    // if returns with 1, ouput will be Palindrome
    return 1; 
}
    

",1
bpat907,1696556160,1,"int IsPalindrome(char *word)
{
    int l, i;
l = strlen(word);
for (i = 0; i < l; i++)
	if (word[i] != word[l- 1 - i]) {
		return 0;
	}
return 1;
}
",1
bril841,1696819893,1,"int IsPalindrome(char *word)
{
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) 
    {
        if (str[i] != str[j]) 
        {
            return 0;
        }
    }
    return 1;
}
",0
bril841,1696819992,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) 
    {
        if (word[i] != word[j]) 
        {
            return 0;
        }
    }
    return 1;
}
",1
bsil719,1696375221,1,"int IsPalindrome(char *word)
{
    
    int j = strlen(word) - 1;
    
    for (int i  = 0; i < strlen (word); i++)
    {
        if (word[i] != word[j])
        {
        return 0;
        }
    j--;
    }
    return 1;
}",1
bvau704,1696380067,1,"int IsPalindrome(char *word)
{
    int len;
    len = strlen(word)/2;
    int j = len*2;
    
    for(int i = 0; i<len; i++) {
        
        if (word[i] != word[j]){
            return 0;
        }
        
        j--;
        
    }
    return 1;
}",0
bvau704,1696380273,2,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int j = len - 1;
    
    for (int i = 0; i < len / 2; i++) {
        if (word[i] != word[j]) {
            return 0;
        }
        j--;
    }
    
    return 1;
}",1
bwil199,1696815557,1,"int IsPalindrome(char *word)
{
    int i, length, j;
    
    length = strlen(word);
    
    for (i = 0; i < length/2; i++) {
        if (word(i) == word(length - i -1)) {
            j = j + 1;
        }
    }
    
    if (2 * j == length) {
        return 1;
    }

return 0;
}
",0
bwil199,1696815746,2,"int IsPalindrome(char *word)
{
    int i, length, j;
    
    length = strlen(word);
    
    for (i = 0; i < length/2; i++) {
        if (word[i] == word[length - i -1]) {
            j = j + 1;
        }
    }
    
    if (2 * j == length) {
        return 1;
    }

return 0;
}
",0
bwil199,1696815900,3,"int IsPalindrome(char *word)
{
    int i, length, j;
    
    length = strlen(word);
    
    for (i = 0; i < length/2; i++) {
        if (word[i] == word[length - i -1]) {
            j = j + 1;
        }
        else if (word[i] != word[length - i -1]) {
            return 0;
        }
    }
    
return 1;
}
",1
bwis161,1696319117,1,"
int IsPalindrome(char phrase[]) {
	int i, j;
	int length = strlen(phrase);

	for (i = 0, j = length - 1 ; i < j; i++, j--) {
		if (phrase[i] != phrase[j]) {
			return 0;
		}
	}
	return 1;
}",1
bwoo348,1696840421,1,"int IsPalindrome(char *word){
    int el = strlen(word);
    char spare[el];
    for (int a = 0; a < el; a++) { 
        spare[a] = word[a];
    }
    int count = el/2 +1;
    for (int i = 1; i < count; i++) { 
        word[i-1] = spare[el-i];
        word[el-i] = spare[i-1];
    }
    int C;
    for (int j = 0; j < el; j++) {
        if (spare[j] == word[j]){
            C = C + 1;
        }
    }
    if (C == el) {
        return 1;
    } else {
        return 0;
    }
}
",0
bwoo348,1696847993,2,"int IsPalindrome(char *word){
    int el = strlen(word);
    char spare[el];
    for (int a = 0; a < el; a++) { 
        spare[a] = word[a];
    }
    int count = el/2 +1;
    char fir[count/2], sec[count/2];
    for (int i = 1; i < count; i++) { 
        word[i-1] = spare[el-i];
        word[el-i] = spare[i-1];
        fir[i-1] = word[i-1];
        sec[i-1] = word[el-i];
    }
    for (int j=0;j<strlen(fir);j++){
        if (fir[j] != sec[j]){
            return 0;
        } 
    }
    return 1;
}
",0
bwoo348,1696848509,3,"int IsPalindrome(char *word) {
    
    int el = strlen(word);
    char spare[el];
    int c = 0;
    for (int i = 0; i < el; i++) {
        spare[i] = word[el-i-1];
        if (spare[i] == word[i]){
            c++;
        }
    }

    if (c == el){
        return 1;
    } else {
        return 0;
    }
}",1
byiu331,1696233613,1,"int IsPalindrome(char* word)
{
	int i=0;
	int output = 1;
	while (word[i] != '\0') {
		if (word[i] != word[strlen(word) - 1 - i])
			output = 0;
		i++;
	}
	return output;
}",1
byul423,1696238589,1,"int IsPalindrome(char* word) {
	int length = strlen(word);
	char back[100] = { 0 };
	char current;

	for (int i = 0; i < length; i++) {
		current = word[i];
		back[i] = word[length - 1 - i];
		back[length - 1 - i] = current;
	}
	back[length] = '\0';
	if (strcmp(back, word) == 0) {
		return 1;
	}
	else {
		return 0;
	}
}
",1
cada577,1696307764,1,"
#include <stdio.h>
#include <string.h>
int IsPalindrome(char* word)
{
    int length, i, j;

    length = strlen(word);

    for (i = 0, j = length - 1; i< length, j>-1; i++, j--) {

        if (word[i] != word[j]) {
            return 0;
        }

        else {
            return 1;
        }
    }




}",0
cada577,1696308200,2," #include <stdio.h>
 #include <string.h>
 int IsPalindrome(char* word)
 {
     int length, i, j;

     length = strlen(word);

     for (i = 0, j = length - 1; i< length && j>-1; i++, j--) {

         if (word[i] != word[j]) {
             return 0;
         }


     }

     return 1;


 }",1
cana544,1696374951,1,"int IsPalindrome(char *word) {
	// Initilising variables
	int i;
	char revStr[100];
	
	// Copying string to revStr (reverse string)
	for (i = 0; i < strlen(word); i++) {
		revStr[i] = word[strlen(word) - i - 1];
		if (i == strlen(word) - 1) {
			revStr[strlen(word)] = '\0';
		}
	}

	// Comparing the two strings 
	int res = strcmp(word, revStr);
	if (res == 0) {
		return 1;
	}
	else {
		return 0;
	}

}
",1
cang688,1696806784,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) - 1;
    int x = 0; 
    while (x <= length) {
        if (word[x] != word[length]) {
            return 0; 
        } else {
            x++;
            length--;
        }
    }
    return 1; 
}
",1
cbee072,1696297136,1,"int IsPalindrome(char *word)
{
    int StrLength;
    int Max, Min;
    int Answer;
    
    StrLength = strlen(word);
    
    // Create variables
    Max = StrLength - 1;
    Min = 0;
    
    //while x ~= y, continue
    while (Max > Min) {
        
        if (word[Min] == word[Max]) {
            Answer = 1;
            Max = Max - 1;
            Min = Min + 1;
        }
        
        else {
            Answer = 0;
            Min = Min + 1;
            
        }
        
    }
    
    if (StrLength == 1) {
        Answer = 1;
    }

   return Answer; 
}
",0
cbee072,1696297361,2,"int IsPalindrome(char *word)
{
    int StrLength;
    int Max, Min;
    int Answer;
    
    StrLength = strlen(word);
    
    // Create variables
    Max = StrLength - 1;
    Min = 0;
    
    //while x ~= y, continue
    while (Max > Min) {
        
        if (word[Min] == word[Max]) {
            Answer = 1;
            Max = Max - 1;
            Min = Min + 1;
        }
        
        else {
            Answer = 0;
            Min = Min + 1;
            return 0;
            
        }
        
    }
    
    if (StrLength == 1) {
        Answer = 1;
    }

   return Answer; 
}
",1
cben375,1696477843,1,"int IsPalindrome(char *word)
{
   int length = 0;
while (word[length] != '\0') {
    length++;
}

int i, j;

for (i = 0, j = length - 1; i < j; i++, j--) {
    if (word[i] != word[j]) {
        return 0;
    }
}
return 1; 
}
",1
cbro223,1696211293,1,"int IsPalindrome(char *word) {
    int length = strlen(word);

    for(int i = 0; i < length; i++) {
        if(word[i] != word[length-1-i]) 
            return 0;

    }
    return 1;
}",1
cbro435,1696662222,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

int IsPalindrome(char *word)
{
 for(int i; i<strlen(word)/2; i++){
    if(word[i]!=word[strlen(word)-1-i]){
        return false;
    }
  }
    return true;
}
",0
cbro435,1696662411,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
  for(int i; i<strlen(word)/2; i++){
    if(word[i]!=word[strlen(word)-1-i]){
        return 0;
    }
  }
    return 1;
    
}
",0
cbro435,1696662622,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdbool.h>

int IsPalindrome(char *word)
{
  for(int i =0; i<strlen(word)/2; i++){
    if(word[i]!=word[strlen(word)-1-i]){
        return false;
    }
  }
    return true;
    
}",1
cbro989,1696285142,1,"int IsPalindrome(char *word)
{
    #include <stdio.h>
int IsPalindrome(char *word)
{
    int length = 0;
for (int i = 0; word[i] != '\0'; i++) {
        length++;}
        
    int Ascii[length];
    int i = 0;
while (word[i] != '\0');{
    Ascii[i] = (int)word[i];
    i++;}

    int start = 0;
    int end = length - 1;
while(start<end){
    if (Ascii[start] == Ascii[end]){
        return 1;
        }else{
        return 0;
    }
    start++;
    end--;
    }
}

}
",0
cbro989,1696285715,2,"int IsPalindrome(char *word)
{
int length;
length = strlen(word);

int start = 0;
int end = length - 1;

while (start < end) {
    if (word[start] == word[end]) {
        return 1;
    }
    start++;
    end--;
}
return 0;
}

",0
cbro989,1696285952,3,"int IsPalindrome(char *word) {
int length;
length = strlen(word);

int start = 0;
int end = length - 1;

while (start < end) {
    if (word[start] != word[end]) {
        return 0;
    }
    start++;
    end--;
}
return 1;
}
",1
cbur703,1696468825,1,"int IsPalindrome(char *word)
{
      int i, leng;
    leng = strlen(word);
    
    for (i=0; i < leng; i++) {
        if (word[i] == word[leng - i- 1]) {
            return 1;
        }
            return 0;
    }  
}
",0
cbur703,1696470079,2,"int IsPalindrome(char *word)
{
        int i, leng;
    leng = strlen(word);
    
    for (i=0; i < leng; i++) {
        if (word[i] != word[leng - i- 1]) {
            return 0;
        }
    } 
    return 1;
}
",1
ccha663,1696223496,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) -1;
    int i = 0;
    
    
    while (i < length) {
        
        
        if (word[i]  != word[length] ) {
            return 0;
        }
        
        
        i++; 
        length--;
    }
    return 1;
}
",1
ccha854,1696646814,1,"int IsPalindrome(char *word) {
    
    int i;
    i = 0;
    while (word[i] != '\0') {
        i++;
    }
    
    int len = i;
    
    int j;
    int x = 1;
    for (j=0; j < len/2; j++) {
        if (word[j] != word[len-j-1]) {
            return x = 0;
        }
    }
    
    return x;
}",1
cche441,1696210629,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length/2; i++)
    {
        if (word[i] != word[length-1-i])
        {
            return 0;
        }
    }
    return 1;
}
",1
cche873,1696591367,1,"#include <stdio.h>

int IsPalindrome(char *word) {
    int wordLen = strlen(word);
    
    for(int i=0; i < wordLen/2; i++) {
        if (word[i] != word[wordLen - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",1
cdel568,1696213915,1,"int IsPalindrome(char *word)
{
    int i = 0;
    char copyarray[strlen(word) + 1];
    int length = strlen(word);

    copyarray[strlen(word) + 1] = '\0';

    for (i = 0; i <= length; i++) {
        copyarray[i] = word[length - i - 1];
    }

    for (i = 0; i <= length; i++) {
        if (copyarray[i] != word[i]) {
            return 0;
        }
    }

    return 1; 
}
",1
cdin152,1696661823,1,"int IsPalindrome(char* word)
{
	int i = 0;
	int j = 0;
	int k = 1;

	while (word[i] != '\0') {
		i++;
	}

	for (j = 0; j <= (i-1); j++, i--) {
		if (word[j] != word[i-1]) {
			k = 0;
			break;
		}
	}
	return k;
}",1
cdin268,1696236670,1,"int IsPalindrome(char *word)
{
    int i;
    int count = 0;
    int result = 0;
    
    for (i = strlen(word)-1; i >= count; i--) {
        if (word[i] == word[count]) {
            result = 1;
            count +=1;
        } else {
            result = 0;
            return result;
        }
    }
    return result;
}
",1
cdsi208,1696664777,1,"int IsPalindrome(char *word)
{int length = strlen(word);
    char arr[length];
    
    for (int i = 0; i < length; i++)
    {
        arr[i] = word[length - i - 1];
    }
    int pal = 1;
    int notpal = 0;
    if (strcmp(arr, word) == 0) {
        
        return pal;
    }  else {
        return notpal;
    }
    
}
",0
cdsi208,1696665224,2,"int IsPalindrome(char *word)
{
    
    int length = strlen(word);
    char arr[length + 1];
    
    for (int i = 0; i < length; i++)
    {
        arr[i] = word[length - i - 1];
    }
    arr[length] = '\0';
    int pal = 1;
    int notpal = 0;
    if (strcmp(arr, word) == 0) {
        
        return pal;
    }  else {
        return notpal;
    }
    
}
",1
cgal160,1696652006,1,"int IsPalindrome(char *word)
{
    int i, a;
    a = strlen(word);
    for (i = 0; i < (a - 1) / 2; i++) {
	    if (word[i] == word[a - i]) {
    	}
    	else {
	    	return 0;
    	}
    }
return 1;
}
",0
cgal160,1696652238,2,"int IsPalindrome(char *word)
{
    int i, a;
    a = strlen(word);
    for (i = 0; i < (a - 1) / 2; i++) {
	    if (word[i] == word[a - (i + 1)]) {
    	}
    	else {
	    	return 0;
    	}
    }
return 1;
}
",0
cgal160,1696653039,3,"int IsPalindrome(char *word)
{
    int i, a;
    a = strlen(word);
    for (i = 0; i < (a - 1) / 2; i++) {
	    if (word[i] == word[a - (i + 1)]) {
    	}
    	else if (word[i] != word[a - (i + 1)] {
	    	return 0;
    	}
    	else {
    	    return 0;
    	}
    }
return 1;
}
",0
cgal160,1696653164,4,"int IsPalindrome(char *word)
{
    int i, a;
    a = strlen(word);
    for (i = 0; i < (a - 1) / 2; i++) {
	    if (word[i] == word[a - (i + 1)]) {
    	}
    	else if (word[i] != word[a - (i + 1)]) {
	    	return 0;
    	}
    	else {
    	    return 0;
    	}
    }
return 1;
}
",0
cgal160,1696653562,5,"int IsPalindrome(char *word)
{
    int i, a;
    a = strlen(word);
    for (i = 0; i <= (a - 1) / 2; i++) {
        if (word[i] == word[a - (i + 1)]) {
        }
        else {
            return 0;
        }
    }
    return 1;
}
",1
cgaz516,1696656850,1,"int IsPalindrome(char *word)
{
    	int result = -1;
	int i = 0;

	// Find the length of the word
	int length = strlen(word);

	// Edge case where there is only 1 character
	if (length == 1) {
		result = 1;
	}

	// For more than 1 character, if it is not a palindrome 
	// return false, if it is, return true
	else {
		for (i = 0; i < length / 2; i++) {
			if (word[i] != word[length - i - 1]) {
				result = 0;
			}
			else {
				result = 1;
			}
		}
	}
	return result;
}
",0
cgaz516,1696657172,2,"int IsPalindrome(char *word)
{
	int result = -1;
	int i = 0;

	// Find the length of the word
	int length = strlen(word);

	// Edge case where there is only 1 character
	if (length == 1) {
		result = 1;
	}

	// For more than 1 character, if it is not a paliondrome 
	// return false, if it is, return true
	else {
		for (i = 0; i < length / 2; i++) {
			if (word[i] != word[length - i - 1]) {
				result = 0;
				break;
			}
			else {
				result = 1;
			}
		}
	}
	return result;
}
",1
chua804,1696825406,1,"int IsPalindrome(char *str){
    int len = strlen(str);
    
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return 0; 
        }
    }
    
    return 1; 
}",1
civa625,1696296559,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    
    while (word[i] != '\0') {
        if (word[i] == word[length-i-1]) {
            i++;
            return 1;
        } else {
            return 0;
        }
    }
}",0
civa625,1696304114,2,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    
    for (i = 0; i < length; i++) {
        if (word[i] != word[length-i-1]) {
            return 0;
        }
    }
    return 1;
}",1
cjun818,1696838622,1,"int IsPalindrome(char *word) 
{
    int length;
    int start;
    int finish;

    length = strlen(word);
    start = 0;
    finish = length - 1;

    while (start < finish) 
    {
        if (word[start] != word[finish]) 
        {
            return 0;
        }
        start++;
        finish--;
    }

    return 1;
}
",1
clee482,1696772244,1,"int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    int dlength;
    dlength = length/2;
    int i = 0;

    length = length-1;
    for (i; i<dlength; i++)
    {
        if (word[i] != word[length])
        {
            return 0;
        }
        i++;
        length--;
    }
    return 1;
}
",0
clee482,1696772922,2,"int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    int dlength;
    dlength = length/2;

    length = length-1;
    for (int i = 0; i<dlength; i++)
    {
        if (word[i] != word[length])
        {
            return 0;
        }
        length--;
    }
    return 1;
}

",1
cleu746,1696649730,1,"int IsPalindrome(char *word)
{
    int i;
    int result = 1;
    
    int size = 0;
    while (word[size] != '\0') {
        size++;
    }
    
    
    for (i = 0; i < size/2; i++) {
        if (word[i] != word[size - (i + 1)]) {
            result = 0;
            return result;
        }
        
    }
    return result;
}",1
cli942,1696843088,1,"int IsPalindrome(char *word)
{
    int len=strlen(word);
    int i=0;
    int j=len-1;
    int a=0;
    
    while i<j{
        
        if word[i]!=word[j]
        return a;
        else i++;
        j--;
    }
}
return a+1;
",0
cli942,1696844796,2,"int IsPalindrome(char *word)
{
    int len=strlen(word);
    int i=0;
    int j=len-1;
  
    
    while i<j{
        
        if word[i]!=word[j]
        return 0;
        else i++;
        j--;
    }
}
return 1;
",0
clob269,1696300156,1,"int IsPalindrome(char* c) {

    int len = 0;

    while (c[len] != '\0') {
        len++;
    }
    int j = len - 1;
    int current = 0;
    char oppo[100] = """";

    for (j; j >= 0; j--) {
        oppo[current] = c[j];
        current++;
    }

    int k = 0;
    int count = 0;

    for (k; k <= len - 1; k++) {
        if (oppo[k] == c[k]) {
            count++;
        }

    }

    if (count == len) {
        return 1;

    }
    else {
        return 0;
    }


}",0
clob269,1696300332,2,"int IsPalindrome(char* c) {

    int len = 0;

    while (c[len] != '\0') {
        len++;
    }
    int current = 0;
    char oppo[100] = """";

    for (int j = len - 1; j >= 0; j--) {
        oppo[current] = c[j];
        current++;
    }

    
    int count = 0;

    for (int k = 0; k <= len - 1; k++) {
        if (oppo[k] == c[k]) {
            count++;
        }

    }

    if (count == len) {
        return 1;

    }
    else {
        return 0;
    }


}",1
cmac377,1696840012,1,"int IsPalindrome(char *word)
{
    int wordlength = strlen(word);
    int halflength = wordlength/2;
    int backward = wordlength-1;
    int pallendrome = 0;
    int tally = 0;
    
    
    
    for(int i = 0; i < halflength; i++){
        if(word[i] == word[backward]){
            tally = tally + 1;
        }else{
            tally = tally;
        }
        
        backward--;
    }
    
    if(tally == halflength){
        pallendrome = 1;
    }else{
        pallendrome = 0;
    }
    
    return pallendrome;
}
",1
cmad989,1696372943,1,"int IsPalindrome(char *word)
{
    int i = 0;
    while (word[i] != '\0') {
        i++;
    }
    int length = i;

    int result = 1;
    for (i= 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            result = 0;
            }
    }
    return result;
}
",1
cmas527,1696750807,1,"int IsPalindrome(char *word)
{
int i;
int f;
int length= strlen(word);
for (i=0,f=length-1;i<=f;i++,f--)
{
if (word[i]!=word[f])
{return 0;}
}
return 1;
}",1
cmcm317,1696734159,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word) {
    
    int length = strlen(word);
    int i = 0;
    int j = length - 1;
    int output = 0;

    for (i = 0; i < length; i++) {
        if (word[i] == word[j]) {
            output = 1;
            j--;
        }
        else {
            output = 0;
            return output;
        }
    }
    return output;
}",1
cmia215,1696586586,1,"#include <string.h>

int IsPalindrome(char* word) {
	word[100];
	int stringlength;
	stringlength = strlen(word);
	for (int j = 0; j < stringlength; j++)
	{
		if (word[j] != word[stringlength - j - 1])
		return 0;
	}
	return 1;
}",0
cmia215,1696586626,2,"#include <string.h>

int IsPalindrome(char* word) {
	int stringlength;
	stringlength = strlen(word);
	for (int j = 0; j < stringlength; j++)
	{
		if (word[j] != word[stringlength - j - 1])
		return 0;
	}
	return 1;
}",1
cmot464,1696207573,1,"int IsPalindrome(char *word)
{
    
    int startPos = (strlen(word) / 2) - 1;
    int i;
    int mirrorPos = startPos + 1;

    // if odd number then skip the middle letter
    if((strlen(word) % 2) == 1){
        mirrorPos += 1;
    }

    //middle does not matter (int division is always rounddown) go to left of middle
    for(i = startPos; i > -1; i--){
        if(word[i] == word[mirrorPos]){
            mirrorPos += 1;
        }
        else{
            return 0;
        }
    }
    return 1;
}",1
cnai408,1696827274,1,"int IsPalindrome(char * word) {
    int i;
    int length;
    char temp[100]; 
    int value;
    
    word = word;
    
    length = strlen(word);
    
    for (i = 0; i < length; i++) {
        temp[length - 1 - i] = word[i];
    } 
    
    value = strcmp(word, temp);  
    if (value == 0) {
        return 1;
    }
    else {
        return 0;
    }

}
",0
cnai408,1696827683,2,"int IsPalindrome(char * word) {
    int i;
    int length;
    char temp[100]; 
    int value;
    
    length = strlen(word);
    
    for (i = 0; i < length; i++) {
        temp[length - 1 - i] = word[i];
    } 
    
    value = strcmp(word, temp);  
    if (value == 0) {
        return 1;
    }
    else {
        return 0;
    }

}",0
cnai408,1696831580,3,"int IsPalindrome(char * word) {
    int i;
    int length;
    char temp[100]; 
    int value;
    
    length = strlen(word);
    
    for (i = 0; i < length; i++) {
        temp[length - 1 - i] = word[i];
    } 
    
    temp[length] = '\0';
    
    value = strcmp(word, temp);  
    if (value == 0) {
        return 1;
    }
    else {
        return 0;
    }",0
cnai408,1696831642,4,"int IsPalindrome(char * word) {
    int i;
    int length;
    char temp[100]; 
    int value;
    
    length = strlen(word);
    
    for (i = 0; i < length; i++) {
        temp[length - 1 - i] = word[i];
    } 
    
    temp[length] = '\0';
    
    value = strcmp(word, temp);  
    if (value == 0) {
        return 1;
    }
    else {
        return 0;
    }
}",1
cnie825,1696803455,1,"int IsPalindrome(char *word)
{ int length = strlen(word);
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        if (word[start] != word[end]) {
            return 0;  // Not a palindrome
        }
        start++;
        end--;
    }
    
    return 1;  
}
    
",1
coli772,1696302615,1,"int IsPalindrome(char *word) {
    int counter = 0;
    while (word[counter] != '\0') {
        counter++;
    }
    int halfway = counter / 2;
    for (int i = 0; i < halfway; i++) {
        if (word[i] != word[counter - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",1
couy656,1696322921,1,"int IsPalindrome(char *word)
{
    int start, end;
    int length = strlen(word);
    start = 0;
    end = length - 1;

    while (start < end ) {
        if (word[start] != word[end])
            return 0;

            start ++;
            end --;
    }
    return 1;
}
",0
couy656,1696323085,2,"int IsPalindrome(char *word)
{
 int start, end;
    int length = strlen(word);
    start = 0;
    end = length - 1;

    while (start < end ) {
        if (word[start] != word[end]){
            return 0;
        }
            start ++;
            end --;
    }
    return 1;
}
",1
csan114,1696227837,1,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	int i = 0;
	int j = length-1;
	int palindrome = 0;


	if (i < length && j > -1 && word[i] == word[j]) {
		palindrome = 1;
		i++;
		j--;
	}
	else if (word[i] != word[j]){
		palindrome = 0;
	}

	return palindrome;
}
",0
csan114,1696228799,2,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	int i = 0;
	int j = length-1;
	int palindrome = 1;


	while (palindrome == 1 && i<length-1 && j>-1) {
		if (word[i] == word[j]) {
			palindrome = 1;
		}
		else {
			palindrome = 0;
		}
		i++;
		j--;
	}

	return palindrome;
}
",1
cset571,1696227825,1,"int IsPalindrome(char *word)
{

	// Inisalizing the index, the compare output, the length of the string, and a temperary array.
	int i = 0, compare;
	int length = strlen(word);
	char temp[1000] = ""a"";
	
	// Making the temperary array equal to the word.
	for (i = 0; i < length; i++) {
		temp[i] = word[i];
	}

	// Reversing the word.
	for (i = 0; i < length; i++) {
		word[i] = word[length - 1 - i];

	}
	
	//String comparing the word with the reversed word.
	compare = strcmp(temp, word);


	// Returning true or false.
	if (compare == 0) {
		return 1;
	}
	else {
		return 0;
	}
}
",1
csin574,1696454780,1,"int IsPalindrome(char *word)
{
int i;
int length = strlen(word);
for (i = 0; i <= (length/2); i++) {
	if (word[i] != word[(length-1)-i]) {
		return 0;
	}
}
return 1;
}
",1
cste189,1696289573,1,"int IsPalindrome(char* word)
{
	int i;
	int count = 0;
	int length = strlen(word);

	for (i = 0; i < length; i++) {
		if (word[i] == word[length - i - 1]) {
			count += 1;
		}
	}

	if (count == length) {
		return 1;
	}
	else {
		return 0;
	}
}",1
ctof106,1696846365,1,"
#include <stdio.h>

int IsPalindrome(char *word)
{
    
    int length;
    while(str[length] != '\0'){
        length++;
    }
    
    int wordCopy[length];
    int i, filler;
    for(i = 0; i < length/2; i++)
    {
        filler = word[i];
        wordCopy[i] = word[length-i-1];
        wordCopy[length-i-1] = filler;
        
    }
    
    for(i = 0; i < length; i++;)
    {
        if(wordCopy[i] != word[i])
        {
            return 0;
        }
    }
    return 1
    
    
}
",0
ctof106,1696846451,2,"
#include <stdio.h>

int IsPalindrome(char *word)
{
    
    int length = 0;
    while(word[length] != '\0'){
        length++;
    }
    
    int wordCopy[length];
    int i, filler;
    for(i = 0; i < length/2; i++)
    {
        filler = word[i];
        wordCopy[i] = word[length-i-1];
        wordCopy[length-i-1] = filler;
        
    }
    
    for(i = 0; i < length; i++)
    {
        if(wordCopy[i] != word[i])
        {
            return 0;
        }
    }
    return 1;
    
    
}
",0
ctof106,1696846734,3,"
#include <stdio.h>

int IsPalindrome(char *word)
{
    
    int length = 0;
    while(word[length] != NULL){
        length++;
    }
    
    int i;
    for(i = 0; i < length/2; i++){
        
       if( word[i] != word[length-i-1]){
           return 0;
       }
        
    }
    return 1;
    
    
}
",0
ctof106,1696846962,4,"
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    
    int length = strlen(word);
    
    int i;
    for(i = 0; i < length/2; i++){
        
       if( word[i] != word[length-i-1]){
           return 0;
       }
        
    }
    return 1;
    
    
}
",1
ctub889,1696814181,1,"int IsPalindrome(char str[]) {
    int len = strlen(str);
    int i, j;
    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0; 
        }
    }
    
    return 1;
}
",1
cugn667,1696336795,1,"int IsPalindrome(char *word)
{
      int wordLength = strlen(word);
    int lastWord = wordLength - 1;
    int midleWord = wordLength * 0.5;
    int a = 0;
   
   
   for ( int i = 0; i < midleWord; i++ ){
       if ( str[i] == str[lastWord - i] ){
           
           a = 1;
           return a;
           
       }
       
       
   }
    return a;
  
    
}
",0
cugn667,1696336837,2,"int IsPalindrome(char *word)
{
    int wordLength = strlen(word);
    int lastWord = wordLength - 1;
    int midleWord = wordLength * 0.5;
    int a = 0;
   
   
   for ( int i = 0; i < midleWord; i++ ){
       if ( word[i] == word[lastWord - i] ){
           
           a = 1;
           return a;
           
       }
       
       
   }
    return a;
    
}
",0
cugn667,1696382216,3,"int IsPalindrome(char *word)
{
    int wordLength = strlen(word);
    int lastWord = wordLength - 1;
    int midleWord = wordLength * 0.5;
    int a = 1;
   
   
   for ( int i = 0; i < midleWord; i++ ){
       if ( word[i] != word[lastWord - i] ){
           
           a = 0;
           return a;
           
       }
       
       
   }
    return a;
}

",1
cwei506,1696658334,1,"int IsPalindrome(char* word)
{
	int i;
	int j = 0;
	int a = 0;
	while (word[j] != '\0') {
		j++;
	}

	for (i = 0; i < j; i++) {
		if (word[i] != word[(j - 1) - i]) {
			a++;
		}
	}

	if (a > 0) {
		return 0;
	}

	return 1;

}",1
cwu200,1696732136,1,"#include <stdio.h>

int IsPalindrome(char *word) {
  int length = 0;
  while (word[length] != '\0'){
    length++;
  }
  int i = 0, j = length - 1;
  while (i < j){
      if (word[i] != word[j]){
        return 0;
      }
      i++;
      j--;
  }
  return 1;
}
",1
cyan312,1696332452,1,"int IsPalindrome(char* word) {
	int length = strlen(word);
	int start = 0;
	int end = length - 1;

	while (start < end) {
		if (word[start] != word[end])
			return 0;
		start++;
		end--;
	}
	return 1;
}

",1
cyiu210,1696372914,1,"int IsPalindrome(char *word)
{
    int i;
    int length;
    length = strlen(word);
    char storearray[length];
        
    for (i = 0; i < length; i++)  {
    storearray[i] = word[((length-1)-i)];
    }
    
    strlen(word) >= 1;
    if (strcmp(word, storearray) != 0)  {
        return 0;
    } else  {
        return 1;
    }
}
",0
cyiu210,1696373034,2,"int IsPalindrome(char *word)
{
    int i;
    int length;
    length = strlen(word);
    char storearray[length];
        
    for (i = 0; i < length; i++)  {
    storearray[i] = word[((length-1)-i)];
    }
    
    if (strcmp(word, storearray) != 0)  {
        return 0;
    } else  {
        return 1;
    }
}
",0
cyiu210,1696389885,3,"int IsPalindrome(char *word)
{
    int a = 0;
    int b = 0;
    int length;
    length = strlen(word);
    b = strlen(word) - 1;
    
    for (a = 0; a < length; a++)  {
        if (word[a] == word [b])  {
            b--;
    } else
        return 0;
    }
    return 1;
}",1
dbar153,1696278995,1,"int IsPalindrome(char *word)
{
int length = strlen(word);
int i;
int count;
int last = length-1;
for (i = 0; i < (length+1) / 2; i++) {
	if (word[i] == word[last]) {
		count = 1;
		last--;
	}
	else {
		count = 0;
	}
}
return count; 
}
",0
dbar153,1696280561,2,"int IsPalindrome(char *word)
{
int length = strlen(word);
int i;
int count;
count = 1;
int last = length-1;
for (i = 0; i < (length / 2); i++) {
	if (word[i] == word[last]) {
		count = 1;
		last--;
	}
	else {
		count = 0;
		return count;
	}

}
return count;
}
",1
dcha468,1696804807,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0; // 
        }
    }
    
    return 1; 
}",1
dche306,1696384946,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word)-1;
    int x = 0;
    for (i=0 ; i < strlen(word)/2; i++){
        if (word[i]==word[j]){
            j--;
        }

        else
            return x;
    }
    x = 1;
    return x;
}",1
deri361,1696226153,1,"#include <stdio.h>
#include < string.h >

int IsPalindrome(char* word)
{
	int palindrome = 1,i;
	for (i = 0; i < (strlen(word) / 2); i++)
	{
		if (word[i] != word[strlen(word) - i-1]) {
			palindrome = 0;
		}
	}
	return palindrome;
}
",0
deri361,1696226172,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word)
{
	int palindrome = 1,i;
	for (i = 0; i < (strlen(word) / 2); i++)
	{
		if (word[i] != word[strlen(word) - i-1]) {
			palindrome = 0;
		}
	}
	return palindrome;
}
",1
dfor626,1696227502,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word) - 1;
    char word2[strlen(word)];
    
    while(i != strlen(word)) { 
        word2[i] = word[j];
        i++;
        j--;
    }
    
    if (strcmp(word, word2) == 0) {
        return 1;
    }
    else {
        return 0;
    }
}",0
dfor626,1696284246,2,"int IsPalindrome(char *word)
{
    int k = 0;
    int logic = 1;
    int i = 0;
    int j = strlen(word) - 1;
    char word2[strlen(word)];
    
    while(i < strlen(word)) { 
        word2[i] = word[j];
        i++;
        j--;
    }
    while (k < strlen(word)) {
        while (logic == 1){
        if (word[k] == word2[k]) {
            logic = 1;
            k++;
        }
        else {
            logic = 0;
        }
        }
    }
    return logic;
}",0
dfor626,1696289055,3,"int IsPalindrome(char *word)
{
    int logic;
    int i = 0;
    int j = strlen(word) - 1;
    char word2[strlen(word)];
    
    while (i < strlen(word)) {
        if (word[i] == word [j]) {
            return 1;
        }
        else {
            return 0;
        }
        i++;
        j--;
    }
}",0
dfor626,1696289172,4,"int IsPalindrome(char *word)
{
    int logic;
    int i = 0;
    int j = strlen(word) - 1;
    
    while (i < strlen(word)) {
        if (word[i] == word [j]) {
            logic = 1;
        }
        else {
            logic = 0;
        }
        i++;
        j--;
    }
    return logic;
}",0
dfor626,1696289315,5,"int IsPalindrome(char *word)
{
    int logic = 1;
    int i = 0;
    int j = strlen(word) - 1;
    
    while ((i < strlen(word)) && (logic == 1)) {
        if (word[i] == word [j]) {
            logic = 1;
        }
        else {
            logic = 0;
        }
        i++;
        j--;
    }
    return logic;
}",1
dgal735,1696236478,1,"int IsPalindrome(char* word) {
    int length = strlen(word);
    int i, j;

    for (i = 0, j = (length - 1); i < j; i++, j--) {
        if (word[i] != word[j]) { // if the first and last letters are not equal...second and second last and so on..
            return 0; // Not a palindrome
        }
    }

    return 1; // A palindrome 
}
",1
dha524,1696584202,1,"int IsPalindrome(char* word)
{
	int length;

	length = strlen(word);

	if (length == 1) {

		return 1;
	}

	else {
		int i = 0, j = length - 1;

		while (i < length, j >= 0) {
			if (word[i] != word[j]) {
				return 0;
			}
			else {
				i++;
				j--;
			}
		}
		return 1;

	}
}",0
dha524,1696584322,2,"int IsPalindrome(char* word)
{
	int length;

	length = strlen(word);

	if (length == 1) {

		return 1;
	}

	else {
		int i = 0, j = length - 1;

		while (i < length && j >= 0) {
			if (word[i] != word[j]) {
				return 0;
			}
			else {
				i++;
				j--;
			}
		}
		return 1;

	}
}",1
dhah941,1696726211,1,"int IsPalindrome(char *word)
{
    	int length = strlen(word);

	int i, j;
	i = 0;
	j = length - 1;

	while (i < j)
	{
		if (word[i] != word[j])
			return 0;
		i++;
		j--;
	}
	return 1;
}
",1
dhar714,1696385358,1,"int IsPalindrome(char *word)
{
    int j = 0;
    int length = 0;
    while (word[j] != '\0') {
        j++;
        length++;
    }

    for (int i = 0; i < length; i++) {
        if (word[i] != word[(length - 1) - i]) {
            return 0;
        }
    }
    return 1;
}
",1
dhen760,1696212163,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    int i = 0;
    while (word[i] != '\0') {
        i++;
        length = i;
    }
    
    int a;
    char otherWord[1000] = {};
    for (i=0; i<=length; i++) {
        otherWord[i] = word[(length-i-1)];
    }
        a = strcmp(otherWord, word);
        if (a == 0){
            a = 1;
        } else {
            a = 0;
        }
        
    return a;
}",1
dhua391,1696309648,1,"int IsPalindrome(char *word)
{
  int Palidrome = 1;
int a = strlen(word);
for (int i=0; i<(a-1)/2;i++)
{
if (word[i]=!word[a-i])
{Palidrome=0;}
return Palidrome;
}
}",0
dhua391,1696670160,2,"
int IsPalindrome(char *word)
{
    int Palindrome = 1;
    int a = strlen(word);

    for (int i = 0; i < a / 2; i++)
    {
        if (word[i] != word[a - 1 - i])
        {
            Palindrome = 0;
        }
    }

    return Palindrome;
}",1
dhul688,1696298257,1,"int IsPalindrome(char *word)
{
    int i, j;
    int length = strlen(word);
    
    for (i = 0; i < length - 1; i++){
        j = length - 1 - i;
        if (word[i] != word[j]){
            return 0;
        }
    }
    
    return 1;
}
",1
dkha055,1696220390,1,"int IsPalindrome(char *word) {
    int j = 0;
    int returnval = 1;
    for (int i = strlen(word) - 1; i > -1; i--)
    {
        if (word[i] != word[j]) {
            returnval = 0;
            break;
        }
        j++;
    }
    return returnval;
}
",1
dkim848,1696296578,1,"int IsPalindrome(char *word)
{
    int i, j, result;
    
    i = strlen(word);
    
    for (j = 0; j < (i - 1)/2; j++) {
        if (word[j] == word[i - 1 - j]) {
            result = 1;
        } else {
            return 0;
        }
    }
    
    return result;
}",0
dkim848,1696297111,2,"int IsPalindrome(char *word)
{
    int i, j, result;
    
    i = strlen(word);
    
    if (i == 1) {
        return 1;
    } else if (i == 2) {
        if (word[0] == word[1]) {
            return 1;
        } else {
            return 0;
        }
    } else {
        for (j = 0; j < (i - 1)/2; j++) {
            if (word[j] == word[i - 1 - j]) {
                result = 1;
            } else {
                return 0;
            }
        }
    }
    
    return result;
}",1
dkur670,1696813039,1,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    
    int start_letter = 0;
	int end_letter = len;
	int i;
	
	for (i = 0; i < len / 2; i++){
		if (word[i] != word[len - i -1]) {
			return 0;
		}
	}
	
	return 1;
}
",0
dkur670,1696813194,2,"int IsPalindrome(char *word)
{
    int len = strlen(word);
	int i;
	
	for (i = 0; i < len / 2; i++){
		if (word[i] != word[len - i -1]) {
			return 0;
		}
	}
	return 1;
}
",1
dli630,1696804632,1,"int IsPalindrome (char *word) {
    
    int i = 0;
    int output;

    while (word[i] != '\0') {
        if ( word[i] == word[strlen(word) - i - 1]) {
            return 1;
        } else {
            return 0;
        }
    }
}
",0
dli630,1696804717,2,"int IsPalindrome (char *word) {
    
    int i = 0;

    while (word[i] != '\0') {
        if ( word[i] == word[strlen(word) - i - 1]) {
            return 1;
        } else {
            return 0;
        }
    }
}
",0
dli630,1696805457,3,"int IsPalindrome (char *word) {
    
    int i = 0;
    int Output;

    while (word[i] != '\0') {
        if ( word[i] == word[strlen(word) - i - 1]) {
            Output = 1;
        } else {
            Output = 0;
        }
        i++;
    }
    return Output;
}
",0
dli630,1696808243,4,"int IsPalindrome (char *word) {
    
    int inital = 0;
    int final = strlen(word) - 1;

    while (word[inital] != '\0') {
        if ( word[inital] != word[final]) {
            return 0;
        }
        inital++;
        final--;
    }
    return 1;
}
",1
dlob194,1696368522,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen (word);
    
    while (i < length/2) {
        if (word[length-1-i] != word[i]) {
            return 0;
        }
        i++;
    }
    return 1;
}
",1
dmar494,1696242548,1,"int length(char *word)
{
    int i = 0;
    while (word[i] != '\0') {
        i++;
    }
    return i;
}

int IsPalindrome(char *word) {
    int i = 0;
    int len = length(word);
    
    while (i < len) {
    if (word[i] != word [length(word) - 1 - i]) {
        return 0;
    }
    i++;
    }
    return 1;
}",1
dmcn107,1696824724,1,"int IsPalindrome(char *word)
{
    
    int l = strlen(word);
    for (int i = 0, j = l - 1; i<j; i++, j--){
        if (word[i] != word[j]){
            retrun o;
        }
    }
    return 1;
}
",0
dmcn107,1696824798,2,"int IsPalindrome(char *word)
{
    
    int l = strlen(word);
    for (int i = 0, j = l - 1; i<j; i++, j--){
        if (word[i] != word[j]){
            return 0;
        }
    }
    return 1;
}
",1
dmun793,1696785781,1,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	for (int i = 0; i < length / 2; i++)
	{
		if (word[i] != word[length - 1 - i])
			return 0;
	}
	return 1;
}",1
dosb979,1696223244,1,"int IsPalindrome(char *word){
    
    //Initialises length and stores the length of the word array in the variable
    int length;
    length = strlen(word);
    
    //Initialises the character array to be length + 1 long
    char reverse[length + 1];

    //Uses a for loop to reverse the word and store it in a new
    for (int i=0; i<length; i++){
        reverse[i] = word[length - (i+1)];
    }
    
    //Terminates the reverse array by adding a null aspect at the end
    reverse[length] = NULL;
   
    //Initialises the result as an integer 
    int result;
    
    //Compares the 2 variables using string compare and stores the value in the variable ""result""
    result = strcmp(reverse, word);
    
    //Uses an if statement to return the correct 1 or 0 depending on the result from strcmp
    if (result == 0){
        return(1);
    }
    else{
        return(0);
    }
}",0
dosb979,1696223391,2,"int IsPalindrome(char *word){
    
    //Initialises length and stores the length of the word array in the variable
    int length;
    length = strlen(word);
    
    //Initialises the character array to be length + 1 long
    char reverse[length + 1];

    //Uses a for loop to reverse the word and store it in a new
    for (int i=0; i<length; i++){
        reverse[i] = word[length - (i+1)];
    }
    
    //Terminates the reverse array by adding a null aspect at the end
    reverse[length] = '\0';
   
    //Initialises the result as an integer 
    int result;
    
    //Compares the 2 variables using string compare and stores the value in the variable ""result""
    result = strcmp(reverse, word);
    
    //Uses an if statement to return the correct 1 or 0 depending on the result from strcmp
    if (result == 0){
        return(1);
    }
    else{
        return(0);
    }
}",1
dpar783,1696767581,1,"int IsPalindrome(char *string) {
	int i, end = strlen(string) - 1;

	for (i = 0; i < end+1; i++) {
		if (string[i] != string[end-i]) {
			return 0;
		}
	}
	return 1;
}",1
dpat391,1696466018,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for( int i =0,  j = length -1; i < j ; i++, j--){
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}",1
dpat674,1696399349,1,"int IsPalindrome(char *word)
{
int start=0;
int finish=0;
while (word[start] != '\0'){
start=start+1;
}
for (finish = 0; finish < start / 2; finish++) {
if (string[finish] != string[start - 1 - finish]) {
return 0;
}
}
return 1;
}
",0
dpat674,1696399428,2,"int IsPalindrome(char *word)
{
int start=0;
int finish=0;
while (word[start] != '\0'){
start=start+1;
}
for (finish = 0; finish < start / 2; finish++) {
if (word[finish] != word[start - 1 - finish]) {
return 0;
}
}
return 1;
}",1
dpat674,1696399887,3,"int IsPalindrome(char *word)
{
int start=0;
int finish=0;
while (word[finish] != '\0'){
finish=finish+1;
}
for (start = 0; start < finish / 2; start++) {
if (word[start] != word[finish - 1 - start]) {
return 0;
}
}
return 1;
}",1
dpat674,1696587239,4,"int IsPalindrome(char *word)
{
int start=0;
int finish=0;
while (word[start] != '\0'){
start=start+1;
}
while (finsih<start/2) {
if (word[finish] != word[start - 1 - finish]) {
return 0;
}
finish=finish+1
}
return 1;
}
",0
dpat674,1696587256,5,"int IsPalindrome(char *word)
{
int start=0;
int finish=0;
while (word[start] != '\0'){
start=start+1;
}
while (finsih<start/2) {
if (word[finish] != word[start - 1 - finish]) {
return 0;
}
finish=finish+1;
}
return 1;
}
",0
dpat674,1696587272,6,"int IsPalindrome(char *word)
{
int start=0;
int finish=0;
while (word[start] != '\0'){
start=start+1;
}
while (finish<start/2) {
if (word[finish] != word[start - 1 - finish]) {
return 0;
}
finish=finish+1;
}
return 1;
}
",1
dpet289,1696454570,1,"int IsPalindrome(char* word)
{
	int i = 0;
	int length = strlen(word);
	while (word[i] != '\0')
	{
		if (word[i] == word[length - 1 - i])
		{
			i++;
		}
		else
		{
			return 0;
		}
		return 1;
	}
}",0
dpet289,1696455154,2,"int IsPalindrome(char* word)
{
	int i = 0;
	int length = strlen(word);
	while (word[i] != '\0')
	{
		if (word[i] == word[length - 1 - i])
		{
			i++;
		}
		else
		{
			return 0;
		}
	}
	return 1;
}",1
dric234,1696292717,1,"int IsPalindrome(char* word) {
	int length = strlen(word);
	for (int i = 0; i < length/2; i++) {
		if (word[i] != word[length - 1 - i]) {
			return false;
		}
	}
	return true;
}
",1
drob588,1696836628,1,"int IsPalindrome(char* word)
{
	int i = 0;
	int length = 0;
	while (word[i] != '\0') {
		i++;
	}
	length = i;

	for (i = 0; i < length / 2; i++) {
		if (word[i] != word[length - i - 1]) {
			return 0;
		}
	}

	return 1;
}",1
droj056,1696749778,1,"int IsPalindrome(char *word)
{
	char *start = word;
	char *end = word + strlen(word) - 1;
	while (start < end) {
		if (*start != *end) {
			return 0;
		}
		start++;
		end--;
	}
	return 1;
}

",1
dryu303,1696802293,1,"
int length(char *word)
{
int i=0;
while (word[i] != '\0')
{
i++;
}
return i;
}

int IsPalindrome(char *word)
{
    int i, a=0, l=length(word);
    char tempvalues[100];
    for (i=l-1; i>-1; i--)  
    {
        tempvalues[a]=word[i];
        a++;
    }
if (*tempvalues==*word)
{
    return 1;
}
return 0;
}",0
dryu303,1696804628,2,"
int length(char *word)
{
int i=0;
while (word[i] != '\0')
{
i++;
}
return i;
}

int IsPalindrome(char *word)
{
    int i, a=0, l=length(word);
    char tempvalues[100];
    for (i=l-1; i>-1; i--)  
    {
        tempvalues[a]=word[i];
        a++;
    }
    for (i=0; i<=l; i++)
    {
        if (tempvalues[i]==word[i])
        {
            if (i>=l)
            {
               return 1;
            }
        }
        else
        {
        return 0;
        }
    }
    return 0;
}",0
dryu303,1696805789,3,"int length(char *word)
{
int i=0;
while (word[i] != '\0')
{
i++;
}
return i;
}

int IsPalindrome(char *word) {
    int i, a = 0;
    int l = length(word);

    for (i = l - 1; i > -1; i--) {
        if (word[a] != word[i]) {
            return 0;
        }
        a++;
    }
    return 1;
}
",1
dsan845,1696842613,1,"#include <stdio.h>
#include <string.h> 

int IsPalindrome(char *word)
{
   int length = strlen(word) ; 
   
    int i ; 
   
   
   for (i=0 ;i < length; i++) {
    
    if (word[i] != word[length - i-1]) {
    
    return 0 ; }
    return 1 ; }
}",0
dsan845,1696842962,2,"int IsPalindrome(char *word)
{
   int length = strlen(word) ; 
   
    int i ; 
   
   
   for (i=0 ;i < length/2 ; i++) {
    
    if (word[i] != word[length - i-1]) {
    
    return 0 ; 
   }
      }
    
    return 1; }
",1
dsaw164,1696219616,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word) - 1;


    while(i <= j){
        if(word[i] == word[j]){
            return 1;
        }

        else{
            return 0;
            break;
        }

        i++;
        j--;
    }
}
",0
dsaw164,1696220967,2,"int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word) - 1;
    int result;

     while(i <= j){
        if(word[i] == word[j]){
            result = 1;
        }

        else if(word[i] != word[j]){
            result = 0;
            break;
        }

        i++;
        j--;
    }

return result;
}
",1
dsin316,1696671581,1,"int IsPalindrome(char *word)
{
    int i;
    int j;
    int length;
    int true = 0;
    int true2 = 1;
    i = 0;
    
    while (true == 0){
        if (word[i] == '\0'){
            true = 1;
            length = i;
        }
        else
        {
            i++;
        }
    }

    j = length-1;

    for (i = 0; i < length; i++, j--){
        if (word[i] == word[j]) {
                true2 = 1;
        }
        else {
                true2 = 0;
        }
    }

    return true2;
}
",0
dsin316,1696671803,2,"int IsPalindrome(char *word)
{
    int i;
    int j;
    int length;
    int tru = 0;
    int true2 = 1;
    i = 0;
    
    while (tru == 0){
        if (word[i] == '\0'){
            tru = 1;
            length = i;
        }
        else
        {
            i++;
        }
    }

    j = length-1;

    for (i = 0; i < length; i++, j--){
        if (word[i] == word[j]) {
                true2 = 1;
        }
        else {
                true2 = 0;
        }
    }

    return true2;
}
",0
dsin316,1696672124,3,"int IsPalindrome(char *word)
{
    int i;
    int j;
    int length;
    int tru = 0;
    int true2 = 1;
    i = 0;
    
    while (tru == 0){
        if (word[i] == '\0'){
            tru = 1;
            length = i;
        }
        else
        {
            i++;
        }
    }

    j = length-1;

    for (i = 0; i < length; i++){
        if (word[i] == word[j]) {
            true2 = 1;
            j -= 1;
        }
        else {
            true2 = 0;
        }
    }

    return true2;
}
",0
dsin316,1696672452,4,"int IsPalindrome(char *word)
{
    int i;
    int j;
    int length;
    int tru = 0;
    int true2 = 1;
    i = 0;
    
    while (tru == 0){
        if (word[i] == '\0'){
            tru = 1;
            length = i;
        }
        else
        {
            i++;
        }
    }

    j = length-1;

    for (i = 0; i < length; i++){
        if (word[i] != word[j]) {
            true2 = 0;
        }
        j -= 1;
    }

    return true2;
}
",1
dstr542,1696641552,1,"int IsPalindrome(char *word) {
	int j = strlen(word);
	int i = 0;
	int checker = 0;
	//printf(""first letter is: %c, second is: %c"",word[i],word[j]);

	while (word[i] == word[j - i - 1]) {
		checker++;
		i++;
	}
	if (checker != 0) {
		checker = 1;
	}
	return checker;
    
}
",0
dstr542,1696641720,2,"int IsPalindrome(char *word) {
	int j = strlen(word);
	int i = 0;
	int checker = 0;
	//printf(""first letter is: %c, second is: %c"",word[i],word[j]);

	while (word[i] == word[j - i - 1]) {
		checker++;
		i++;
	}
	if (checker == j) {
		checker = 1;
	}
	else {
		checker = 0;
	}
	return checker;
}",0
dstr542,1696641795,3,"int IsPalindrome(char *word)
{
    int j = strlen(word);
	int i = 0;
	int checker = 0;
	//printf(""first letter is: %c, second is: %c"",word[i],word[j]);

	while (word[i] == word[j - i - 1]) {
		checker++;
		i++;
	}
	if (checker == j) {
		checker = 1;
	}
	else {
		checker = 0;
	}
	return checker;
}
",0
dstr542,1696642275,4,"int IsPalindrome(char *word) {
	int j = strlen(word);
	int i = 0;
	int checker = 0;

	while (word[i] == word[j - i - 1]) {
		checker++;
		i++;
	}

	//printf(""checker %d\n"", checker);
	if (checker == j) {
		checker = 1;
	}
	else {
		checker = 0;
	}
	return checker;
}",0
dstr542,1696643583,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
	int j = strlen(word);
	int i = 0;
	int checker = 0;

	while (word[i] == word[j - i - 1]) {
		checker++;
		i++;
	}

	//printf(""checker %d\n"", checker);
	if (checker == j) {
		checker = 1;
	}
	else {
		checker = 0;
	}
	return checker;
}
",0
dstr542,1696660232,6,"#include <string.h>
#include <stdio.h>


int IsPalindrome(char *word) {
	int j = strlen(word);
	int i = 0;
	int checker = 0;

	while (word[i] == word[j - i - 1]) {
		checker++;
		i++;
	}

	printf(""checker %d, vs j_value %d\n"", checker, j);
	if (checker >= j) {
		checker = 1;
	}
	else {
		checker = 0;
	}
	return checker;
}",0
dstr542,1696660242,7,"#include <string.h>
#include <stdio.h>


int IsPalindrome(char *word) {
	int j = strlen(word);
	int i = 0;
	int checker = 0;

	while (word[i] == word[j - i - 1]) {
		checker++;
		i++;
	}

	//printf(""checker %d, vs j_value %d\n"", checker, j);
	if (checker >= j) {
		checker = 1;
	}
	else {
		checker = 0;
	}
	return checker;
}",1
dsut709,1696730899,1,"int IsPalindrome(char *word)
{
	char new_word[100];
	int n;
	n = strlen(word);
	new_word[n] = '\0';
	for (int i = 0; i < n; i++) {
		new_word[i] = word[n - 1 - i];
	}
	int pd;
	pd = strcmp(word, new_word);
	if (pd == 0) {
		pd = 1;
	}
	else
	{
		pd = 0;
	}
	return pd;
}",1
dtem664,1696814299,1,"int IsPalindrome(const char* string) {
	int length_of_word = strlen(string);
	int i;
	int j = length_of_word - 1;
	for (i = 0; i < length_of_word; i++) {
		if (string[i] != string[j]) {
			return 0;
		}
		j--;
	}
	return 1;
}
",1
dten781,1696805648,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int standard = 0;
    int reversed = strlen(word) - 1;
    while (standard < reversed) {
        if (word[standard] != word[reversed]) {
            return 0;
        }
        standard++;
        reversed--;
    }
    return 1;
",0
dten781,1696805685,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int standard = 0;
    int reversed = strlen(word) - 1;
    while (standard < reversed) {
        if (word[standard] != word[reversed]) {
            return 0;
        }
        standard++;
        reversed--;
    }
    return 1;
}",1
dtie151,1696401104,1,"int IsPalindrome(char *c)
{
	int length;

	length = strlen(c);
	for (int i = 0; i < length; i++) {
		if (c[i] != c[length - 1]) {
			return 0;
		}
		length--;
			
	}
	return 1;
}",1
dtol781,1696379527,1,"int IsPalindrome(char *word)
{
    int i;
    int length;
    char l1,l2;
    i = 0;
    while (word[i] != '\0'){
        length = i;
        i++;
    }
    for (i = 0; i <= length; i++) {
        l1 = word[i];
        l2 = word[length];
        if (l1 != l2) {
            return 0;
        }
        length--;
    }
    return 1;
}",1
dtua408,1696751097,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int answer = 0;
    
    for (int i=0; i < length/2; i++) 
    {
        if (word[i] != word[length-1-i]) 
        {
            return 0;
        } 
        else 
        {
            answer = 1;
        }
    }
    
    return answer;
}
",0
dtua408,1696751284,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int answer = 1;
    
    for (int i=0; i < length/2; i++) 
    {
        if (word[i] != word[length-1-i]) 
        {
            return 0;
        } else 
        {
            answer = 1;
        }
    }
    
    return answer;
}
",1
dver839,1696796420,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word)-1;
    int result = 1; 
    
    while (i<j) {
        if (word[i] != word[j]) {
            result = 0;
            
        }
        i++;
        j--;
        
    }
    return result;
}
",1
dvu878,1696377984,1,"int IsPalindrome(char *word)
{
    
}
",0
dvu878,1696647299,2,"#include <stdio.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS

int IsPalindrome(char* word)
{
	int x = 1;

	int j = strlen(word) - 1;

	for (int i = 0; i < strlen(word) / 2; i++) {

		if (word[i] != word[j]) {
			x = 0;
		}

		j = j - 1;
	}

	return x;
}",1
dwar594,1696812745,1,"int IsPalindrome(char *word)
{
 int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0; 
        }
    }
    return 1; 
}
   

",1
dwu617,1696650426,1,"int IsPalindrome(char *word)
{
	int length, i, result;

	length = strlen(word);

	for (i = 0; i < (length / 2); i++) {
		if (word[i] == word[length - i - 1]) {
			result = 1;
		}
	}

	for (i = 0; i < (length / 2); i++) {
		if (word[i] != word[length - i - 1]) {
			result = 0;
		}
	}

	if (length == 1) {
		result = 1;
	}

	return result;
}
",1
dyad002,1696835931,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i,j;
    for (i = 0, j = length - 1; i<j; i+=1, j-=1) {
        if(word[i] != word[j]) {
            return 0;
        }
    }  
    
    
}
",0
dyad002,1696835967,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i,j;
    for (i = 0, j = length - 1; i<j; i+=1, j-=1) {
        if(word[i] != word[j]) {
            return 0;
        }
    }  
    
    return 1;
}
",1
dyu343,1696205897,1,"int IsPalindrome(char* word)
{
	int isPalindrome = 1;
	int len = strlen(word);

	char container[100];

	// get reverse
	for (int i = len - 1; i >= 0; i--)
	{
		container[len - 1 - i] = word[i];
	}
	container[len] = '\0';

	if (strcmp(word, container) == 0)
	{
		return 1;
	}

	return 0;
}
",0
dyu343,1696205927,2,"int IsPalindrome(char* word)
{
	int len = strlen(word);

	char container[100];

	// get reverse
	for (int i = len - 1; i >= 0; i--)
	{
		container[len - 1 - i] = word[i];
	}
	container[len] = '\0';

	if (strcmp(word, container) == 0)
	{
		return 1;
	}

	return 0;
}",1
dzha497,1696735842,1," int IsPalindrome(char *word)
 {
     int i = 0;
     int temp[strlen(word)];
     int result;
     
    for (i = 0; i < strlen(word); i++) {
        temp[i] = word[i];
     }
    
    for (i = 0; i < strlen(word); i++) {
        word[i] = temp[strlen(word) - i - 1];
        }
     
    for (i = 0; i < strlen(word); i++) {
        if (word[i] != temp[i]) {
            result = 0;
        }
            else {
            result = 1;
        }
    }
    return result;
 }
 ",0
dzha497,1696756252,2," int IsPalindrome(char *word)
 {
    int a = 0;
    int result;
    int length = strlen(word);
    
    for (int i = 0; i < length/2; i++) {
        if (word[i] == word[length - i - 1]) {
         a++;
        }
    }  
    if(a == length/2){
        result = 1;
    }else {
        result = 0;
}
return result;
}",1
ealg928,1696836992,1,"int IsPalindrome(char *word)
{
    int length = strlen(string);
    for (int i = 0; i < length / 2; i++) 
    {
        if (strign[i] = str[length - 1 - i]) 
        {
            return 1;
        }
    }
    return 0;
}",0
ealg928,1696836998,2,"int IsPalindrome(char *word)
{
    int length = strlen(string);
    for (int i = 0; i < length / 2; i++) 
    {
        if (string[i] = str[length - 1 - i]) 
        {
            return 1;
        }
    }
    return 0;
}",0
ealg928,1696837009,3,"int IsPalindrome(char *word)
{
    int length = strlen(string);
    for (int i = 0; i < length / 2; i++) 
    {
        if (string[i] = string[length - 1 - i]) 
        {
            return 1;
        }
    }
    return 0;
}",0
ealg928,1696837061,4,"int IsPalindrome(char *word)
{
    int length = strlen(string);
    for (int i = 0; i < length / 2; i++) 
    {
        if (string[i] == string[length - 1 - i]) 
        {
            return 1;
        }
    }
    return 0;
}",0
ealg928,1696837143,5,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) 
    {
        if (word[i] != word[length - 1 - i]) 
        {
            return 0;
        }
    }
    return 1;
}",1
eara128,1696365969,1,"int isPalindrome(char *word){
    int length = strlen(word);
    // iterate through the word and compare the letter at index i to the corresponding 
    for(int i = 0; i < length; i++){
        if (word[i] == word[length -1 -i]){
            return 1;
        } else {
            return 0; 
        }

    }
}
",0
eara128,1696366047,2,"int IsPalindrome(char *word){
    int length = strlen(word);
    // iterate through the word and compare the letter at index i to the corresponding 
    for(int i = 0; i < length; i++){
        if (word[i] == word[length -1 -i]){
            return 1;
        } else {
            return 0; 
        }

    }
}
",0
eara128,1696366136,3,"int IsPalindrome(char *word){
    int length = strlen(word);
    // iterate through the word and compare the letter at index i to the corresponding 
    for(int i = 0; i < length; i++){
        if (word[i] == word[length -1 -i]){
            return 1;
        } else {
            return 0; 
        }

    }
    return 1;
}
",0
eara128,1696367094,4,"int IsPalindrome(char *word){
    int length = strlen(word);
    // iterate through the word and compare the letter at index i to the corresponding 
    for(int i = 0; i < length; i++){
        if (word[i] == word[length -1 -i]){
            continue;
            return 1;
        } else {
            return 0; 
        }

    }
    return 1;
}
",1
earn712,1696743634,1,"int IsPalindrome(char *word) {
    
    int i; 
    int length = strlen(word);
    
    for(i=0; i<length; i++) {
        if word[i] != word[length-i-1] {
            return 0;
        }
    }
    return 1;
} ",0
earn712,1696743714,2,"int IsPalindrome(char *word) {
    
    int i; 
    int length = strlen(word);
    
    for(i=0; i<length; i++) {
        if (word[i] != word[length-i-1]) {
            return 0;
        }
    }
    return 1;
} ",1
ebar824,1696328524,1,"int IsPalindrome(char *word)
{
     int wordlength = strlen(word);
    for (int i = 0; i < wordlength; i++)
    {
        if (word[i]!=word[wordlength-i-1])
        {
            return 0;
        }
        
    }
    
    
    return 1;
}
",1
echa931,1696814924,1,"int IsPalindrome(char *word)
{

int length = strlen(word), i, j = length-1, result = 1;

for (i = 0; i < length; i++) {
	if (word[i] == word[j]) {
		j--;
	}
	else {
		result = 0;
		return result;
	}
}
return result;
    
}
",1
eche101,1696673475,1,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    for (int i = 0; i < len/2; i++) {
        if (word[i] != word[ len -1 -i]) {
            return 0;
        }
    }
    return 1;
}
",1
edha780,1696846833,1,"int IsPalindrome(char *word)
{
    int length = strlen(str);
    for (int i = 0; i < length / 2; i++) {
        if (str[i] != str[length - i - 1]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // It's a palindrome
}",0
edha780,1696846857,2,"int IsPalindrome(char *word)
{
int length = strlen(str);
for (int i = 0; i < length / 2; i++) 
{
if (str[i] != str[length - i - 1]) 
{
return 0; // Not a palindrome
        }
    }
    return 1; // It's a palindrome
}",0
eejl688,1696833497,1,"int IsPalindrome(char *word) 
{
    int wordlength = strlen(word);
    int end = wordlength - 1;
    int start = 0;

    for (; start < end; start++, end--) 
    {
        if (word[start] != word[end]) 
        {
            return 0; 
        }
    }
    return 1;
}

",1
eejl932,1696810496,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}",1
efra318,1696310183,1,"int IsPalindrome(char *word)
{
    size_t length = 0;
	int i = 0;
	int letter1 = 0;
	int letter2 = 0;
	int palindrome = 1;

	length = strlen(word);

	for (i = 0; i < (length / 2); i++) {
		letter1 = word[i];
		letter2 = word[(length - 1) - i];

		if (letter1 != letter2) {
			palindrome = 0;
			return palindrome;
		}
	}

	return palindrome;
}
    
}
",0
efra318,1696310221,2,"int IsPalindrome(char *word)
{
    size_t length = 0;
	int i = 0;
	int letter1 = 0;
	int letter2 = 0;
	int palindrome = 1;

	length = strlen(word);

	for (i = 0; i < (length / 2); i++) {
		letter1 = word[i];
		letter2 = word[(length - 1) - i];

		if (letter1 != letter2) {
			palindrome = 0;
			return palindrome;
		}
	}

	return palindrome;
    
}
",1
egho902,1696719231,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++)
    {
        if (str[i] != str[length - 1 - i])
        {
            return 0;
        }
    }
    return 1:
}

",0
egho902,1696719256,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] != word[length - 1 - i])
        {
            return 0;
        }
    }
    return 1:
}

",0
egho902,1696719395,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] != word[length - 1 - i])
        {
            return 0;
        }
    }
    return 1;
}

",1
ehan360,1696846609,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int counter = 0;

    
    if (length == 1) {
        return 1;
    }
    
        for (int i = length-1; i >= 0; i--)
            {
            if (word[counter] != word[i]) 
            { return 0; }
            counter++;
            } 
    return 1;
}
",1
ehua682,1696397984,1,"int IsPalindrome(char *word){
    
    // Assuming the left pointer to the start of the string
    int left = 0;                
    
    // Assuming the right pointer to the end of the string
    int right = strlen(word) - 1; 


    // Continue the loop as long as the left pointer is positioned before the right pointer.
    while (left < right) {
        
        
        // Ignore non-alphanumeric characters from the left
        while (!isalnum(word[left]) && left < right) {
            left++;
        }


        // Ignoring the right non-alphanumeric characters 
        while (!isalnum(word[right]) && left < right) {
            right--;
        }


        // Comparing the lest and pright pointer characters 
        if (tolower(word[left]) != tolower(word[right])) {
            return 0; 
        }


        // Moving the pointers to each other
        left++;
        right--;
    }

    return 1; 
}",1
ejeo051,1696297365,1,"int IsPalindrome(char *word)
{
    int length;
    int upper;
    int check;
    
    length = strlen(word);
    upper = length - 1;
    
    if (length == 1) {
        check = 1;
        return check;
    }
    
    else {
        for (int i = 0; i < length/2; i++) {
            if (word[i] == word[upper]) {
                check = 1;
                upper--;
            
            } else {
                check = 0;
                upper--;
            }
        
        return check;
        }     
    }
}",0
ejeo051,1696297847,2,"int IsPalindrome(char *word)
{
    int length;
    int upper;
    int check;
    
    length = strlen(word);
    upper = length - 1;
    
    if (length == 1) {
        check = 1;
    }
    
    else {
        for (int i = 0; i < length/2; i++) {
            if (word[i] == word[upper]) {
                check = 1;
                upper--;
            
            } else {
                check = 0;
                upper--;
            }
        
        }     
    }
    
    return check;
}",0
ejeo051,1696299066,3,"int IsPalindrome(char *word)
{
    int length;
    int upper;
    int check;
    
    length = strlen(word);
    upper = length - 1;
    check = 1;

    
 
    for (int i = 0; i <= length/2; i++) {
        if (word[i] != word[upper]) {
            check = 0;
            upper--;
            break;
        } else if (word[i] == word[upper]) {
            check = 1;
            upper--;
        }
        
    } 
        
    return check;    
    
}",1
ekmu195,1696220376,1,"int IsPalindrome(char *word) {

    char reversed[100];
    int i;
    int length = strlen(word) - 1;
    int j;
    char letter;
    strcpy(reversed, word);
// Reverse the word
    for (i = 0; i < (length + 1); i++) {
        for (j = (length); j > -1; j--) {
            reversed[i] = word[(length - i)];
        }

    }
    printf(""%s\n"", reversed);

// If reversed word is the same as the original word return 1, else 0
    if (strcmp(reversed, word) == 0) {
        return 1;
    
    }  else {
        return 0;
    }

}
",0
ekmu195,1696220518,2,"int IsPalindrome(char *word) {

    char reversed[100];
    int i;
    int length = strlen(word) - 1;
    int j;
    strcpy(reversed, word);
// Reverse the word
    for (i = 0; i < (length + 1); i++) {
        for (j = (length); j > -1; j--) {
            reversed[i] = word[(length - i)];
        }

    }
    printf(""%s\n"", reversed);

// If reversed word is the same as the original word return 1, else 0
    if (strcmp(reversed, word) == 0) {
        return 1;
    
    }  else {
        return 0;
    }

}
",0
ekmu195,1696220532,3,"int IsPalindrome(char *word) {

    char reversed[100];
    int i;
    int length = strlen(word) - 1;
    int j;
    strcpy(reversed, word);
// Reverse the word
    for (i = 0; i < (length + 1); i++) {
        for (j = (length); j > -1; j--) {
            reversed[i] = word[(length - i)];
        }

    }

// If reversed word is the same as the original word return 1, else 0
    if (strcmp(reversed, word) == 0) {
        return 1;
    
    }  else {
        return 0;
    }

}
",1
elau447,1696668946,1,"int IsPalindrome(char* word)
{
	int i = 0;
	int j = strlen(word) - 1;
	int k=0;
	while (word[i] != '\0') {
		if (word[i] != word[j]) {
			k++;
		}

		i++;
		j--;
	}
	int palindrome = 1;
	if (k > 0) {
		palindrome = 0;
	}
	return palindrome;
}
",1
eles952,1696806816,1,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int IsPalindrome(char *word)
{
int length = strlen(word);
int beginning = 0;
char *originalword = word;
int end = length - 1;  

    while (beginning < end) {
        int temp = word[beginning];
        word[beginning] = word[end];
        word[end] = temp;

      beginning++;
        end--;
    }
    if (originalword = word) {
        return 1;
    }
    else {
        return 0;
    }
    }
    
    
}
",0
eles952,1696806854,2,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

int IsPalindrome(char *word)
{
int length = strlen(word);
int beginning = 0;
char *originalword = word;
int end = length - 1;  

    while (beginning < end) {
        int temp = word[beginning];
        word[beginning] = word[end];
        word[end] = temp;

      beginning++;
        end--;
    }
    if (originalword == word) {
        return 1;
    }
    else {
        return 0;
    }
    }
    
    

",0
eles952,1696807451,3,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


int IsPalindrome(char *word)
{
int length = strlen(word);
int beginning = 0;
char *originalword = word;
int end = length - 1;  
int logic = 1;
    while (beginning < end) {
        int temp = word[beginning];
        word[beginning] = word[end];
        word[end] = temp;
        if (word[beginning] != word[end]){
        logic = 0;
        }
      beginning++;
        end--;
    }
    return logic;
    }
    
    ",0
eles952,1696807488,4,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


int IsPalindrome(char *word)
{
int length = strlen(word);
int beginning = 0;
int end = length - 1;  
int logic = 1;
    while (beginning < end) {
        int temp = word[beginning];
        word[beginning] = word[end];
        word[end] = temp;
        if (word[beginning] != word[end]){
        logic = 0;
        }
      beginning++;
        end--;
    }
    return logic;
    }
    
    ",1
elia955,1696843894,1,"int IsPalindrome(char* word) {
    int length = strlen(word);

    int left = 0;
    int right = length - 1;

    while (left < right) {
        if (word[left] != word[right]) {
            return 0;
        }
        left++;
        right--;
    }

    return 1;
}",1
else264,1696720261,1,"int IsPalindrome(char *word){
    int length=strlen(word);
    
    int i,j;
    for (i=0, j=length-1;i<length,j>-1;i++,j--){
        if (word[i]==word[j]){
            return 0;
        }
        else{
        return 1;
        }
    }
}",0
else264,1696724879,2,"int IsPalindrome(char *word){
    int length=strlen(word);
    
    int i,j;
    for (i=0, j=length-1;i<length && j>-1;i++,j--){
        if (word[i]==word[j]){
            return 0;
        }
        return 1;
    }
}",0
else264,1696726371,3,"int IsPalindrome(char *word){
    int length=strlen(word);
    
    int i,j;
    for (i=0, j=length-1;i<j;i++,j--){
        if (word[i]!=word[j]){
            return 1;
        }
    }
    return 0;
}
",0
else264,1696726443,4,"int IsPalindrome(char *word){
    int length=strlen(word);
    
    int i,j;
    for (i=0, j=length-1;i<j;i++,j--){
        if (word[i]!=word[j]){
            return 0;
        }
    }
    return 1;
}",1
ely207,1696325409,1,"int IsPalindrome(char *word)
{
	// First get rid of all 'space characters'
	int length = strlen(word);
	for (int j = 0; j < length - 1; j++)
	{
		if (word[j] == ' ')
		{
			for (int k = j; k < length; k++)
			{
				word[k] = word[k + 1];
			}
		}
	}

	// Then check if palindrome
	length = strlen(word);

	for (int i = 0; i < length / 2; i++)
	{
		if (word[i] != word[length - 1 - i])
		{
			return 0;
		}
	}
	return 1;
}",1
ema340,1696665376,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);

    int startIndex = 0;
	int endIndex = length -1;

    int isPanlindrome = 1;

	while (startIndex < endIndex) {
		if (word[startIndex] != word[endIndex]) {
            isPanlindrome = 0;
        }

		startIndex++;
		endIndex--;
	}

    return isPanlindrome;
}
",1
emah834,1696665932,1,"int IsPalindrome(char *word)
{
    int stringLength = strlen(word);
    char leftLetter;
    char rightLetter;

    for (int i = 0, j = stringLength - 1; i < j; i++, j--) {
        leftLetter = word[i];
        rightLetter = word[j];
        if (leftLetter != rightLetter) {
            return 0;
        }
    }

    return 1;
}
",1
emah921,1696819691,1,"int IsPalindrome(char *word)
{
    int length = 0;
    while (word[length] != '\0') {
        length++;
    }
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;  
        }
    }
    return 1;  
}
    

",1
emar179,1696847581,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);

    int s = 0;
    int e = length - 1;

    while (s < e) {
        if (word[start] != word[end]) {
            return 0;
        }
        s++;
        e--;
    }

    return 1;
}
",0
emar179,1696847599,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);

    int s = 0;
    int e = length - 1;

    while (s < e) {
        if (word[s] != word[e]) {
            return 0;
        }
        s++;
        e--;
    }

    return 1;
}
",1
emar189,1696803759,1,"int IsPalindrome(char *word)
{
    int LengthOfString=strlen(word);

    char ReversedString[100];
    ReversedString[LengthOfString]='\0';

    for(int i = 0; i < LengthOfString; i++) {
        ReversedString[i] = word[LengthOfString-1-i];
    }

    if(strcmp(word,ReversedString) == 0) {
        return 1;
    } else {
        return 0;
    }
}
",1
eqiu349,1696742817,1,"int IsPalindrome(char* word)
{
	int i;
	int length;
	int result;  {};
	length = strlen(word);
	if (length == 1)
		result = 1;
	else
		for (i = 0; i < length/2; i++) {
			if (word[i] == word[length - i - 1])
				result = 1;
			else
				result = 0;
			break;
	}

		return result;
}
",0
eqiu349,1696743503,2,"int IsPalindrome(char* word)
{
	int i;
	int length;
	int result;  {};
	length = strlen(word);

	if (length == 1)
		result = 1;
	else

		for (i = 0; i < length/2; i++) {
			if (word[i] == word[length - i - 1])
				result = 1;
			else
				result = 0;

			if (result == 0) {
				break;
			}

			
	}

		return result;
}",1
esia821,1696843976,1,"int IsPalindrome(char* word)
{
    int length = strlen(word);
    for (int i = 0; i < strlen(word) / 2; i++) {
        if (length == 1) {
            return 1;
        }
        else {
            if (word[i] != word[strlen(word) - 1]) {
                return 0;
            }
            else {
                return 1;
            }
        }
    }
}
",0
esia821,1696844881,2,"int IsPalindrome(char* word)
{
    int length = strlen(word);
    if (length == 1) {
            return 1;
    }
    else {
        for (int i = 0; i < length / 2; i++) {
            if (word[i] != word[length - i]) {
                return 0;
            }
        }
        return 1;
    }
}
",0
esia821,1696845131,3,"int IsPalindrome(char* word)
{
    int length = strlen(word);
    if (length == 1) {
            return 1;
    }
    else {
        for (int i = 0; i < length / 2; i++) {
            if (word[i] != word[length - i - 1]) {
                return 0;
            }
        }
        return 1;
    }
}
",1
eteo952,1696540169,1,"int IsPalindrome(char *word)
{
    int i;
    char newarray[strlen(word)];
    int result;

    for (i = 0; i < strlen(word); i++) {
        newarray[strlen(word) - 1 - i] = word[i];
    }

    newarray[i] = '\0';

    result = strcmp(word, newarray);

    if (result == 0){
        return 1;
    }
    else {
        return 0;
    }   
}
",1
etri556,1696481929,1,"int IsPalindrome(char* input){
    // Part of program meant to find the length of the array being inputted.
    int array_length = strlen(input);
    
    // Part of the program that compares the first element to the last element and second element to the second to last element
    // and so on.
    for(int i = 1; i < array_length; i++){
        if(input[i - 1] != input[array_length - i]){
            return 0;
        }
    }    

    return 1;
}
",1
evic904,1696747213,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word)
{
	// find length of word
	int length = strlen(word);
	// iterate through half of the word
	for (int i = 0; i < length / 2; i++)
	{
		// Compare the leftmost letter to the rightmost letter after each time i goes up
		if (word[i] != word[length - i - 1])
		{
			return 0;
		}
	}
	return 1;
}

",1
ewil853,1696364087,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);

    while (word[i] != '\0')
    {
        if (word[i] != word[length - 1 - i])
        {
            
            return 0;
        }
        return 1;
    }
        return 1; 
}
",0
ewil853,1696365261,2,"int IsPalindrome(char *word)
{
     int i = 0;
    int length = strlen(word);

    while (word[i] != '\0')
    {
        if (word[i] != word[length - 1 - i])
        { 
            return 0;
        }
        i++;
    }
    return 1;
}
",1
exu922,1696770650,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char word[]) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
        }
    }
    return 1;
}",1
eyeo346,1696738086,1,"int IsPalindrome(char *word)
{
    char copy[100];
    char compare[100];
    
    // find length of word
    int length = strlen(word);
    
    // copies characters into array
    strcpy(copy, word);
    
    // reverse the copied array
    for (int i = 0; i < length; i++) {
        
        compare[i] = copy[length - i - 1];
     
    }
    
    // compare word with reversed array
    if (strcmp(word, compare) == 0) {
        return 1;
    } 
    else {
        return 0;
    }   
}
",0
eyeo346,1696803875,2,"int IsPalindrome(char *word)
{
    // find length of word
  int length = strlen(word);
  
  // compare the word to its reverse
  int i;
  int j = length - 1;
  int a = 1;
  
  for (i = 0; i < length; i++) {
      if (word[i] != word[j]) {
          a = 0;
      }
     j--;
  }
  
  if (a == 1) {
      return 1;
  }
  return 0;
}
",1
fcoo305,1696812725,1,"int IsPalindrome(char *word)
{
    int palindrome = 1;
    int len = 0;
	while (word[len] != ""\0"") 
	{
	    len++
	}

    
    int i = 0;
  
    while (word[i] != ""\0"") 
    {
        if (word[i] != word[len - 1 - i])
        {
            palindrome = 0;
        }
    }
    
    return palindrome;
}
",0
fcoo305,1696813487,2,"int IsPalindrome(char* word)
{
	int palindrome = 1;
	int len = 0;

	while (word[len] != '\0')
	{
		len++;
	}

	int i = 0;

	while (word[i] != '\0')
	{
		if (word[i] != word[len - 1 - i])
		{
			palindrome = 0;
		}
		i++;
	}

	return palindrome;
}
",1
fesp714,1696378042,1,"int IsPalindrome(char str[]) {
    
    int i, j;
    int len = strlen(str);
    
    // Checking through each element to see if they match; therefore return 1 = palindrome
    // if not the same = not palindrome so return 0. 
    for(i = 0; j = len - 1; i < j; i++; j--) {
        if ( str[i] != len[j]) {
            return 0;
            }
        }
    return 1; 
}",0
fesp714,1696378585,2,"int IsPalindrome(char *word) {
    
    int i;
    int len = strlen(word);
    
    // Checking through each element to see if they match; therefore return 1 = palindrome
    // if not the same = not palindrome so return 0. 
    for(i = 0; i < len / 2; i++) {
       if(word[i] != word[len -1 - i]) {
           return 0;
       }
    }
    return 1;
}",1
fgor787,1696816386,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) 
    {
        if (word[i] != word[length - 1 - i]) 
        {
            return 0;
        }
    }
    return 1;   
}
",1
fkee774,1696299948,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int forward;
    int backward = length - 1;
    
    for (forward = 0; forward < end; forward++, backward--) {
        if (word[forward] != word[backward]) {
            return 0; 
        }
    }

    return 1; 
}    

",0
fkee774,1696299962,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int forward;
    int backward = length - 1;
    
    for (forward = 0; forward < backward; forward++, backward--) {
        if (word[forward] != word[backward]) {
            return 0; 
        }
    }

    return 1; 
}    

",1
fobr691,1696812606,1,"#include <string.h>

int IsPalindrome(char *word) {
    int len = strlen(word);
    int i, j;

    i = 0;
    j = len - 1;

    while (i < j) {
        if (word[i] != word[j]) {
            return 0;
        }
        i++;
        j--;
    }

    return 1;
}
",1
fwij709,1696219654,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int halfLength = (length/2);
    int i = 0;
    while (i < halfLength) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
        i++;
    }
    return 1;
}
",1
fwil727,1696667681,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int i;

    // Check each character from the start and end of the string
    // If any characters don't match, return 0 (false)
    for (i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }

    // If all characters match, return 1 (true)
    return 1;
}",1
fyan180,1696838156,1,"int IsPalindrome(char *word) {
    int i = 0;
    int j = 0;
    int length = strlen(word);
    for (i = 0, j = length - 1; i < length / 2; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}",1
gcha636,1696658802,1,"int IsPalindrome(char *word)
{
    
int IsPalindrome(const char *array){

    int i;
    int length;

    length = strlen( array);

    for (i=0; i<length - 1; i++){
        if (array[i] != array[(length - i - 1)]){
            return 0;
        }

    }
    return 1;
}

}
",0
gcha636,1696658957,2,"int IsPalindrome(char *word)
{
      int i;
    int length;

    length = strlen( array);

    for (i=0; i<length - 1; i++){
        if (array[i] != array[(length - i - 1)]){
            return 0;
        }

    }
    return 1;
}
",0
gcha636,1696659066,3,"int IsPalindrome(char *word)
{
    int i;
    int length;

    length = strlen(word);

    for (i=0; i<length - 1; i++){
        if (word[i] != word[(length - i - 1)]){
            return 0;
        }

    }
    return 1;
}
",1
ggao363,1696758270,1,"int IsPalindrome(char word[100]){
    int length = (int) strlen(word), l2 = length - 1;
    for(int i = 0; i < length; i++){
        if(word[i] != word[l2- i]){
            return 0;
        }
    }
    return 1;
}",1
gge561,1696322303,1,"int IsPalindrome(char *word)
{
    int l = strlen(word);
    int i;
    int k = 1;
    for (i = 0; i < l / 2; i++) {
	    if (word[i] != word[l - i - 1]) {
	    k = 0;
        }
    }
    return k;

}
",1
gjom886,1696716798,1,"int IsPalindrome(char *word)
{
    int start = 0;
  int string = strlen(word);
int half = string/2;
int length = string- 1;
 
    
    for(start; half > start; start= start + 1) {
        if (word[start] != word[length - start]) {
            return 0;
            
        }
    }
 
   
 
    return 1;
    
}
",0
gjom886,1696717004,2,"int IsPalindrome(char *word)
{
  int start = 0;
  int string = strlen(word);
int half = string/2;
int length = string- 1;
 
    
    for(start; start < half; start= start + 1) {
        if (word[start] != word[length - start]) {
            return 0;
            
        }
    }
 
   
 
    return 1;
    
}
",0
gjom886,1696717116,3,"int IsPalindrome(char *word)
{
 int start;
  int string = strlen(word);
int half = string/2;
int length = string- 1;
 
    
    for (start = 0; start < half; start= start + 1) {
        if (word[start] != word[length - start]) {
            return 0;
            
        }
    }
 
   
 
    return 1;
    
}
",1
gmal045,1696232437,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int j=0;
    char drow[100];
    for (int i=strlen(word)-1;i>=0;i--) {
        drow[j] = word[i];
        j++;
    }
    if (!strcmp(drow,word)) {
        return 1;
    }
    else {
        return 0;
    }
}",0
gmal045,1696232848,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int j=0;
    char drow[strlen(word)];
    for (int i=strlen(word)-1;i>-1;i--) {
        drow[j] = word[i];
        j++;
    }
    if (!strcmp(drow,word)) {
        return 1;
    }
    else {
        return 0;
    }
}",0
gmal045,1696233165,3,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int j=0;
    char drow[strlen(word)];
    for (int i=strlen(word)-1;i>-1;i--) {
        if (word[i] != word[j]) {
        return 0;
        }
        j++;
    }
    return 1;
}",0
gmal045,1696233185,4,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int j=0;
    for (int i=strlen(word)-1;i>-1;i--) {
        if (word[i] != word[j]) {
        return 0;
        }
        j++;
    }
    return 1;
}",1
gmoh887,1696296262,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length/ 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",1
gpen695,1696810751,1,"int IsPalindrome(char *word)
{
    int length = 0;
    char *end = word;
    
    while (*end != '\0') 
    {
        length++;
        end++;
    }

    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] != word[length - 1 - i]) 
        {
            return 0; 
        }
    }
    
}
",0
gpen695,1696810914,2,"#include <stdio.h>

int CalculateLength(const char *str) 
{
    int length = 0;
    while (str[length] != '\0') 
    {
        length++;
    }
    return length;
}

int IsPalindrome(const char *str) 
{
    int length = CalculateLength(str);
    
    for (int i = 0; i < length / 2; i++) 
    {
        if (str[i] != str[length - 1 - i]) 
        {
            return 0; 
        }
    }
    
    return 1; 
}


",1
gren419,1696827857,1,"int IsPalindrome(char *word)
{
    int i = 0;
    while(word[i]!='\0'){
        i++;
    }
    i--;
    int j = 0;
    while(j<i){
        if(word[j]!=word[i]){
            return 0;
        }
    }
    return 1;
}
",0
gren419,1696827971,2,"int IsPalindrome(char *word)
{
    int i = 0;
    while(word[i]!='\0'){
        i++;
    }
    i--;
    int j = 0;
    while(j<i){
        if(word[j]!=word[i]){
            return 0;
        }
        i--;
        j++;
    }
    return 1;
}",1
gvan573,1696801828,1,"int IsPalindrome(char *word)
{
	int a, b, c, i;

	a = (int)strlen(word);
	b = a - 1;

	i = 0;
	c = 0;

	while (i < b) {
		if (word[i] == word[b]) {
			c = 1;

			i = i + 1;
			b = b - 1;
		} 
		else if (word[i] != word[b]) {
			c = 0;
			break; //if any part is nto equal, it is not a palindrome and exit out of the loop
		}
	}	

	return c;
}
",0
gvan573,1696802045,2,"int IsPalindrome(char *word)
{
	int a, b, c, i;

	a = (int)strlen(word);
	b = a - 1;

	i = 0;
	c = 0;

	while (i <= b) {
		if (word[i] == word[b]) {
			c = 1;

			i = i + 1;
			b = b - 1;
		} 
		else if (word[i] != word[b]) {
			c = 0;
			break; //if any part is nto equal, it is not a palindrome and exit out of the loop
		}
	}	

	return c;
}
",1
gxu660,1696316153,1,"int IsPalindrome(char *word) {
    int length;
    length = strlen(text);
    for (int i = 0; i < length; i++) {
        if (text[i] != text[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",0
gxu660,1696316178,2,"int IsPalindrome(char *word) {
    int length;
    length = strlen(word);
    for (int i = 0; i < length; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",1
gzho986,1696659371,1,"int IsPalindrome(char word[]){
    int len = strlen(word);

    int i = 0 ;
    int j = len - 1; 

    while (i<j){
        if (word [i]!= word [j]){
             return 0;
        }
       i++;
       j--;
    }
    return 1;
}",1
hama210,1696298561,1,"int IsPalindrome(char* word)
{ 
	int i = 0; 
	int length;
	int size; 

	length = strlen(word); 
	size = length - 1; 
	

	if (word[0] != word[length - 1]) {
		return 0; 
	}

	for (i = 0; i < length; i++) {
		if (word[i] != word[size - i]) {
			return 0;
		}
		else {
			return 1;
		}
	}
}",0
hama210,1696298608,2,"int IsPalindrome(char* word)
{ 
	int i = 0; 
	int length;
	int size; 

	length = strlen(word); 
	size = length - 1; 
	

	if (word[0] != word[length - 1]) {
		return 0; 
	}

	for (i = 0; i < length; i++) {
		if (word[i] != word[size - i]) {
			return 0;
		}
		else {
			return 1;
		}
	}
	return 0; 
}",0
hama210,1696299105,3,"int IsPalindrome(char* word)
{ 
	int i; 
	int length;
	int size; 

	length = strlen(word); 
	size = length - 1; 
	

	if (word[0] != word[size]) {
		return 0; 
	}

	for (i = 0; i < length; i++) {
		if (word[i] != word[size - i]) {
			return 0;
		}
	}
	return 1; 
}",1
haus879,1696372376,1,"int IsPalindrome(char *word)
// IsPalindrome tells us if a sentence (all lowercase and no spaces) is a palindrome or not.
{
	word[100];
	scanf(""%s"", word);

	int i;
	int length = strlen(word);
	int true = 1;
	int false = 0;
	int HalfLength;
	HalfLength = length * 0.5; // HalfLength stops the loop when half of the array has been run through


	for (i = 0; i < HalfLength; i++) {
		if (word[i] != word[length - 1 - i]) {
			return false;
		}
	}
	return true;

}
",0
haus879,1696377725,2,"int IsPalindrome(char *word)
{
    word[100];
scanf(""%s"", word);

int i;
int length = strlen(word);
int HalfLength;
HalfLength = length / 2;


for (i = 0; i < HalfLength; i++) {
	if (word[i] != word[length - 1 - i]) {
		return 0;
	}
}
return 1;
}
",0
haus879,1696377864,3,"int IsPalindrome(char *word)
{

	int i;
	int length = strlen(word);
	int HalfLength;
	HalfLength = length / 2;


	for (i = 0; i < HalfLength; i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	return 1;

}
",1
hbas168,1696290221,1,"int IsPalindrome(char *word)
{
    for (int i = 0; i < strlen(word)/2; i++) {
        if (word[i] == word[strlen(word) - 1 -i]) {
            continue;
        } else {
            return 0;
        }
    }
    return 1;
}
",1
hber510,1696306627,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = 0;
    int isPalindrome = 1;
    
    while (word[i] != '\0') {
        char letter = word[i];
        i++;
        length++;
    }
    
    for (i = 0; i <= (length/2 - 1); i++) {
        if (word[i] != word[length - 1 - i]) {
            isPalindrome = 0;
            return isPalindrome;
        }
    }
    
    return isPalindrome;
}
",0
hber510,1696306663,2,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = 0;
    int isPalindrome = 1;
    
    while (word[i] != '\0') {
        i++;
        length++;
    }
    
    for (i = 0; i <= (length/2 - 1); i++) {
        if (word[i] != word[length - 1 - i]) {
            isPalindrome = 0;
            return isPalindrome;
        }
    }
    
    return isPalindrome;
}
",1
hbhe454,1696844097,1,"int IsPalindrome(char *word)
{
    int length=strlen(word);
    char a [100];
    int i=length-1,j=0;
    while (i>=0){
        while(j<=length){
            a[j]=word[i];
            j++;
            i++;
        }
    }
    int x=strcmp(word,a);
    if (a==0){
        return 1;
    }
    return 0
    }
    
}
",0
hbhe454,1696844174,2,"int IsPalindrome(char *word)
{
    int length=strlen(word);
    char a [100];
    int i=length-1,j=0;
    while (i>=0){
        while(j<=length){
            a[j]=word[i];
            j++;
            i++;
        }
    }
    int x=strcmp(word,a);
    if (a==0){
        return 1;
    }
    return 0;
    
}
",0
hbhe454,1696844207,3,"int IsPalindrome(char *word)
{
    int length=strlen(word);
    char a [100];
    int i=length-1,j=0;
    while (i>=0){
        while(j<=length){
            a[j]=word[i];
            j++;
            i++;
        }
    }
    int a=strcmp(word,a);
    if (a==0){
        return 1;
    }
    return 0;
    
}
",0
hbhe454,1696844298,4,"int IsPalindrome(char *word)
{
    int length=strlen(word);
    char gap [100];
    int i=length-1,j=0;
    while (i>=0){
        while(j<=length){
            gap[j]=word[i];
            j++;
            i++;
        }
    }
    int a=strcmp(word,gap);
    if (a==0){
        return 1;
    }
    return 0;
    
}
",0
hbhe454,1696844361,5,"int IsPalindrome(char *word)
{
    int length=strlen(word);
    char gap [100];
    int i=length-1,j=0;
    while (i>=0){
        while(j<=length){
            gap[j]=word[i];
            j++;
            i++;
        }
    }
    int a=strcmp(word,gap);
    if (a==0){
        return 1;
    }
    return 0;
    
}

",0
hbou314,1696408175,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i;
    int palindrome = 0;
    int stop = length / 2;

    for (i = 0; i < stop; i++) {
	    if (word[i] == word[length-1-i]) {
	    	palindrome = 1;
	    } else {
	    	return 0;
	    }
    }
    return palindrome;
}
",0
hbou314,1696408912,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i;
    int palindrome = 0;
    int stop;
    
    if (length == 1) {
	    stop = length;
    } else {
	    stop = length / 2;
    }

    for (i = 0; i < stop; i++) {
	    if (word[i] == word[length-1-i]) {
		    palindrome = 1;
	    } else {
		    return 0;
	    }
    }
    return palindrome;
}
",1
hcha410,1696514449,1,"#include <stdio.h>
#include <string.h>


int IsPalindrome(char* word) {
    int len = strlen(word);
    char reversedString[len + 1];
    
    for (int i = len - 1; i >= 0; i--) {
        reversedString[len - i - 1] = word[i];
    }
    reversedString[len] = '\0';
    
    if (strcmp(reversedString, word) == 0) {
        return 1;
    } else {
        return 0;
            
    }
    
}

",1
hche864,1696300022,1,"int IsPalindrome(char *word)
{
    	int i;
	int l = strlen(word);
	int length = ceil(l/2);




	for (i = 0; i < length; i++) {
		if (word[i] != word[length - i - 1]) {
			return 0;
		
		}
		
	
	}
	return 1;
}
",0
hche864,1696301701,2,"int IsPalindrome(char *word)
{
    
		int i;
		int l1 = strlen(word);


		for (i = 0; i < l1; i++) {
			if (word[i] != word[l1 - i - 1]) {
				

				return 0;

			}


		}
		return 1;
}
",1
hcop563,1696306105,1,"int IsPalindrome(char *word)
{
    	int i;
	int length;

	length = strlen(word);

	for (i = 0; i < length; i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}

	return 1;
}
",1
hcro730,1696394094,1,"int IsPalindrome(char* word)
{
	int len, i;

	len = strlen(word);

	for (i = 0; i < len / 2; i++) {
		if (word[i] != word[len - (i + 1)]) {
			return 0;

		}
	}
	return 1;
}",1
hdeg917,1696462628,1,"int IsPalindrome(char *word)
{
    int i;
    int j;
    while (word[i] != ('\0')){
        i++;
    }
    for (j=0; (j<=(i/2)-1); j++){
        if (word[j]!= (word[i-j-1])){
            return 0;
        }
    }
    
    return 1;
}
",0
hdeg917,1696462843,2,"int IsPalindrome(char *word)
{
    int i=0;
    int j;
    while (word[i] != ('\0')){
        i++;
    }
    for (j=0; (j<=(i/2)-1); j++){
        if (word[j]!= (word[i-j-1])){
            return 0;
        }
    }
    
    return 1;
}
",1
hgao080,1696219225,1,"int IsPalindrome(char* word) 
{
	int flag = 1;

	for (int i = 0; i < strlen(word) / 2; i++) {
		if (word[i] != word[strlen(word) - 1 - i]) {
			flag = 0;
		}
	}

	return flag;
}",1
hgou636,1696412953,1,"int IsPalindrome(char *word) {
    
    int length = strlen(word);
    char originalword[length]; 
    strcpy(originalword, word);

    for (int leftside = 0; leftside < length / 2; leftside++) {
        char NewCharacter = word[leftside];
        int rightside = length - leftside - 1;
        word[leftside] = word[rightside];
        word[rightside] = NewCharacter;
    }

    for (int j = 0; j < length; j++) {
        if (word[j] != originalword[j]) {
            return 0;
        }
    }
    return 1; 
}",1
hhil451,1696833305,1,"#include <stdio.h>
#include <string.h> 
#define _CRT_SECURE_NO_WARNINGS

int IsPalindrome(char* word)
{
    int length = strlen(word); 

    int i, j;
    char temp[100]; 

   
    for (i = 0, j = length - 1; i < length; i++, j--)
    {
        temp[i] = word[j];
    }

    temp[i] = '\0';

   
    if (strcmp(temp, word) == 0)
    {
        return 1;
    }
    else
    {
        return 0; 
    }
}",1
hjoo911,1696847327,1,"int IsPalindrome(char *word)
{
    int i, j;
    int length;
    int temporary[length];
    
    for (i = 0 ; i < length ; i++) {
    temporary[i] = word[i];
    }
    
    for (j = length ; j >= 0 ; j--) {
        word[j] = temporary[length - j - 1];
        }
        
        if (word[i] == word[j]) {
        return 1;
        }
        
        else 
        {
        return 0;
        }
}
",0
hjoo911,1696847655,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i, j, x;
    int length;

    length = strlen(word);
    char temporary[length];


    for (i = 0 ; i < length ; i++) {
    temporary[i] = word[i];
    }

    for (j = length ; j >= 0 ; j--) {
        word[j] = temporary[length - j];
    }

    for (x = 0 ; x < length ; x++) {
        if (temporary[x] != word[x]) {
        return 0;
        }
    }
    return 1;
}",0
hkah523,1696748493,1,"#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cstring>
/*author: Harshdeep Kahlon*/

// Function to check if a string is a palindrome
int IsPalindrome(const char* str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}",0
hkah523,1696750971,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
/*author: Harshdeep Kahlon*/

// Function to check if a string is a palindrome
int IsPalindrome(const char* word) {
    int len = strlen(word);
    for (int i = 0; i < len / 2; i++) {
        if (word[i] != word[len - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}",1
hkee941,1696838260,1,"int IsPalindrome(char *word)
{
  
   int IsPalindrome(char word);
   char word[100];
   int i;
   i=0;
   int L=strlen(word);
   
   while (i<=L) {
   if (word[i]==word[L-1-i]){
   i++;
   return 1;
   }
   else{
   return 0;}
   }  
}
",0
hkee941,1696838859,2,"int IsPalindrome(char *word)
{
   int i;
   i=0;
   int L=strlen(word);
   
   while (i<=L) {
   if (word[i]==word[L-1-i]){
   i++;
   return 1;
   }
   else{
   return 0;}
   }  
}
",0
hkee941,1696839229,3,"int IsPalindrome(char *word)
{
   int i;
   i=0;
   int L=strlen(word);
   
   while (i<=L) {
   if (word[i]==word[L-1-i]){
   i++;
   return 1;
   }
   else{
   return 0;}
   } 
   return 0;
}
",0
hkee941,1696839264,4,"int IsPalindrome(char *word)
{
   int i;
   i=0;
   int L=strlen(word);
   
   while (i<=L) {
   if (word[i]==word[L-1-i]){
   i++;
   return 1;
   }
   else{
   return 0;}
   } 
   return;
}
",0
hkee941,1696843668,5,"int IsPalindrome(char *word)
{
   int i;
   i=0;
   int L=strlen(word);
   
   while (i<L-1) {
   if (word[i]==word[L-1-i]){
   i++;
   return 1;
   }
   else{
   return 0;}
   } 
   return 0;
}
",0
hkim807,1696733413,1,"int IsPalindrome(char *word)
{
int start = 0;
int end = strlen(word) - 1;

for (start = 0; start <= strlen(word); start++){
    if (word[start] != word[end]){
        end = end - 1;
        return 0;
    } else {
        return 1;
    }
}
}",0
hkim807,1696733608,2,"int IsPalindrome(char *word)
{
int start = 0;
int end = strlen(word) - 1;
int torf;

for (start = 0; start <= strlen(word); start++){
    if (word[start] == word[end]){
        end = end - 1;
        torf = 1;
    } else {
        torf = 0;
    }

}

return torf;

}",1
hkon883,1696563316,1,"int IsPalindrome(char array[100]) {
    int i;
    for (i = 0; i < strlen(array); i++) {
        if (array[i] != array[strlen(array) - 1 - i]) {
            return 0;
        } else {
            return 1;
        }
    }
    return 0;
}",0
hkon883,1696563373,2,"int IsPalindrome(char array[100]) {
    int i;
    for (i = 0; i < strlen(array); i++) {
        if (array[i] != array[strlen(array) - 1 - i]) {
            return 0;
        }
    }
    return 0;
}",0
hkon883,1696563423,3,"int IsPalindrome(char array[100]) {
    int i;
    for (i = 0; i < strlen(array); i++) {
        if (array[i] != array[strlen(array) - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",1
hlee999,1696305790,1,"int IsPalindrome(char *word)
{
	int i;
	int length = strlen(word);
	for (i = 0; i < length / 2; i++) {
		if (word[i] == word[length - 1 - i]) {
			continue;
		} else if(word[i] != word[length - 1 - i]) {
			return 0;
		} 
	}
	return 1;
}",1
hleu459,1696762670,1,"int IsPalindrome(char *word)
{
    int i;
    int length = strlen(word);
    
    for (i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",1
hliu836,1696596092,1,"int IsPalindrome(char *word)
{
    int length;
    int i = 0;
    int j;
    while (word[i] != '\0') {
        i++;
    }
    i=i-1;
    for (j=0; j<=i ; j++) {
    
         if (word[j]!=word[i]) {
             return 0;
         } else {
             return 1;
         }
             
            
    }
    
}",0
hliu836,1696600022,2,"int IsPalindrome(char *word)
{
    int a;
    int length;
    int n;
    int i = 0;
    int j;
    while (word[i] != '\0') {
        i++;
    }
    length = i;
    n=i-1;
    a=1;
    for (j=0; j<length ; j++) {
        printf(""%d %d\n"",j,n);
    
         if (word[j]!=word[n]) {
             
             a = 0;
             
         } 
         n--;
            
    }
    return a;
    
}
",0
hliu836,1696600034,3,"int IsPalindrome(char *word)
{
    int a;
    int length;
    int n;
    int i = 0;
    int j;
    while (word[i] != '\0') {
        i++;
    }
    length = i;
    n=i-1;
    a=1;
    for (j=0; j<length ; j++) {
        
    
         if (word[j]!=word[n]) {
             
             a = 0;
             
         } 
         n--;
            
    }
    return a;
    
}
",1
hly852,1696730400,1,"int IsPalindrome(char *word)
{
    int word_length = 0;
    int i = 0;
    
    while (word[word_length] != '\0') {
        word_length++;
    }
    
    for (i = 0; i < word_length/2 ; i++ )
    {
        if (word[i] != word[word_length-i-1]) {
            return 0;
        }
    }
    return 1;
}
",1
hma481,1696654651,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
	    if (word[i] != word[length - 1 - i]) {
		    return 0;
	    }   
    }
    return 1;
}
",1
hmcm582,1696214048,1,"int IsPalindrome(char* word) {
    int j;
    int l = strlen(word);
    for (j = 0; j < length / 2; j++) {
        if (word[j] != word[l - 1 - j]) {
            return 0;
        }
    }
    return 1;
}",0
hmcm582,1696214074,2,"int IsPalindrome(char* word) {
    int j;
    int l = strlen(word);
    for (j = 0; j < l / 2; j++) {
        if (word[j] != word[l - 1 - j]) {
            return 0;
        }
    }
    return 1;
}",1
hmel649,1696663786,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
hmof971,1696455457,1,"int IsPalindrome(char* c) {
	int length;
	length = strlen(c);
	int i;
	for (i = 0; i < length; i++) {
		if (c[i] != c[length - i]) {
			return 0;
}
}
	return 1;
}",0
hmof971,1696455643,2,"int IsPalindrome(char *word)
{
 	int length;
	length = strlen(word);
	int i;
	for (i = 0; i < length; i++) {
		if (word[i] != word[(length-1) - i]) {
			return 0;
}
}
	return 1;   
}
",1
hnew638,1696240030,1,"int IsPalindrome(char *word)
{
    int c =0;

    for (int i = 0; i < strlen(word)/2; i++)
    {
        if(word[i] == word[strlen(word)-(i+1)])
        c++;
    }
    
    return c == strlen(word)/2;
}
",1
hpan363,1696756082,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i = 0;
    for(i; i < length/2; i++){
        if (word[i] != word[length - i - 1]) {
    return 0;
        }
    }
    return 1;
}
",0
hpan363,1696756526,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for(int i = 0; i < length/2; i++){
        if (word[i] != word[length - i - 1]) {
    return 0;
        }
    }
    return 1;
}
",1
hpat916,1696235379,1,"int IsPalindrome(char *word)
{
    char ReverseWord[100];
    int length = strlen(word);
    int i;
    for (i = 0; i < length; i++) {
    	ReverseWord[i] = word[length - 1 - i];
    }
    ReverseWord[length] = '\0';


    int comparison;
    comparison = strcmp(word, ReverseWord);
    if (comparison == 0) {
    	return 1;
    }
    return 0;
}
",1
hpir641,1696470040,1,"int IsPalindrome(char *word)
{
    	int length_of_string;
	int i;
	length_of_string = strlen(word);
	for (i=0; i < length_of_string; i++) {
		if (word[i] != word[length_of_string - 1 - i]){
			return 0;
			}
	}
	return 1;
}
",1
hrob997,1696746496,1,"int IsPalindrome(char* word)
{
	//finds position of null character
	int pos = 0;
	while (word[pos+1] != '\0') {
		pos++;
	}

	// Checks if a character at i is not equal to its corresponding character at the end of the string.
	// If these two characters are not the same, IsPalindrome returns 0. Otherwise IsPalindrome returns 1. 
	int i = 0;
	while (i < pos) {
		if (word[i] != word[pos-i]) {
			return 0; 
		}
		i++;
	}
	return 1; 

}
",1
hsan267,1696385308,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <math.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int i = 0;
    int halflength;
    int count = 0;
    
    halflength = floor(((double)length)/2);
    
    if (length == 1) {
        return 1;
    }
    
    for (i=0; i<halflength;i++) {
        if (word[i] == word[length-(1+i)]) {
            count = count + 1;
        }
    }
    
    if (count == halflength) {
        return 1;
    }
    else {
        return 0;
    }
}",1
hson435,1696839035,1,"int IsPalindrome(char *word)
{
    int charLength = strlen(word);
    int startPos = 0;
    int endPos = charLength - 1;
    
    while (startPos < endPos) {
        if (word[startPos] != word[endPos]) {
            return 0;
        }
        startPos++;
        endPos--;
    }
    return 1;
}",1
htew916,1696816269,1,"#include<stdio.h>
#include <string.h>

// The function, IsPalindrome takes a string as input, and returns 1 (i.e. true) if that string is a palindrome and 0 (i.e. false) otherwise.

// Define the function, IsPalindrome.
int IsPalindrome(char *word)
{
int size = strlen(word);
    for (int i = 0; i < size / 2; i++) {
        if (word[i] != word[size - 1 - i]) {
            return 0;  
        }
    }
    return 1;    
}


    
",1
htho943,1696324581,1,"#include <stdio.h>
#include <string.h>
// author hamish thompson, intent of this function is to find out whether a string is a palindrome 
// ie is same front to backwards
int IsPalindrome(char *word)
{
    // initialising variables
    int i;
    int length=strlen(word)-1;
    int logical=0;

    // for loop to run over the length of the array
    for (i=0;i<=length;i++, length--)
    {
        // if loop to determine whether the 
        if (word[i]==word[length])
        {
            logical=1;
        }
        else{
            return 0;
        }
    }
    return logical;
}
",1
htyl682,1696838708,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *words)
{
    int len = strlen(words);
    for(int i=0; i<len; i++){
        if (words[i]!=words[len-i-1]){
            return(0);
        }
    }
    return(1);
}",1
hugn924,1696763148,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);

    for (int i = 0; i < length/2 ; i++) {
        int tempvalue = word[i];
    
        if (word[length - i - 1] != tempvalue) {

            return 0;
    
        }

    }
    return 1;
}
",1
hwen116,1696210079,1,"//IsPalindrome takes a string as input and returns 1 if the string is a palindrone and 0 if otherwise. 
//All the characters in the string will be in lower case and the input string will contain at least one character.

#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word){
    //Obtain the length of the string 
    int length = strlen(word);
    int i;
    char temp[length+1]; // Need to include the null character
    for (i=0; i<length; i++){
        //Use strncmp somewhere
        temp[i] = word[length-i-1];
    }

    if (strcmp(word,temp)==0){
        return 1;
    }else{
        return 0;
    }
    //See if the temp string and the actual string are the same
}
",0
hwen116,1696220877,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word){
    //Obtain the length of the string 
    int length = strlen(word);
    int i;
    for (i=0; i<length; i++){
        if (word[i]!=word[length-i-1]){
            return 0;
        }
    }
    return 1;
}
       ",1
hwin877,1696468217,1,"int IsPalindrome(char* word)
{
    size_t length = strlen(word);
    int j = length - 1;
    int i = 0;
    while (i <= j)
    {
        if (word[i] != word[j])
            return 0;
        i++;
        j--;
    }
    return 1;
}",1
hyan713,1696373654,1,"#include <string.h>

int IsPalindrome(char *word)
{
    int i,j,last;
    last = strlen(word);
    j = last-1;
    for (i=0; i<strlen(word);i++){
        if (word[i] != word[j]){
            return 0;
        }
        j--;
    }
    return 1;
}",1
hye071,1696686350,1,"int IsPalindrome(char *word)
{
    int length=strlen(word);
    int IsPalindrome=1;
    
    for (int i=0; i<length/2; i=i+1) {
        if (word[i] !=word[length-1-i]) {
            IsPalindrome=0;
        }
    }
    return IsPalindrome;
    
}
",1
ibha186,1696486793,1,"int IsPalindrome(char word[]) {
    int temp = 0;
    for (int i = 0; i < strlen(word); i++) {
        if (word[i] == word[(strlen(word)-i-1)]) {
            temp = 1;
        } else {
            return 0;
        }
    }
    return temp;
}",1
ibur427,1696739544,1,"int IsPalindrome(char *word)
{
	int i = strlen(word);

	char *drow = calloc(i+1, sizeof *drow);

	for (int j = 0; j < i; j++) {
		drow[j] = word[(i-j-1)];
	}

	if (strcmp(word, drow) == 0) {
	return 1;
	}
	else { 
	return 0;
	}
}",1
iche428,1696357526,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    char reverse[length];
    
    int k = 0;
    for (int i=length-1; i>=0; i--) {
        reverse[k] = word[i];
        k++;
    } reverse[k] = '\0';
    
   if (strcmp(reverse, word) == 0) {
       return 1;
    } else return 0;
   
}",1
ihoo440,1696239709,1,"int IsPalindrome(char *word)
{
    int L = strlen(word);

    for (int i = 0; i < L/2; i++)
    {
		if (word[i] != word[L - 1 - i])
        {
                return 0;
        }
	}
    return 1;
}

",1
ikis164,1696394267,1,"#include <stdio.h>
#include <math.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);

    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }

    return 1;
}",1
iko203,1696287997,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
int left = 0;
int right = length - 1;

for (left, right; left < right; left++, right--) {
    if (word[left] != word[right]) {
        return 0;

    }
}

return 1;
    
}
",0
iko203,1696288016,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word)
{
    int length = strlen(word);
    int left = 0;
    int right = length - 1;

    for (left, right; left < right; left++, right--) {
        if (word[left] != word[right]) {
            return 0;

        }
    }

    return 1;
}
",0
iko203,1696289790,3,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word)
{
    int length = strlen(word);
    int right = length - 1;
    int left = 0;
    
    for (; left < right; left++, right--) {
        if (word[left] != word[right]) {
            return 0;

        }
    }

    return 1;
}
",1
ilee973,1696679921,1,"#include <stdio.h>

int IsPalindrome(char *word)
{
    int l = strlen(word);
    
    for(int i=0; i<l/2; i++){
        if (word[i] != word[l-1-i]) {
            return 0;
        }
    }
    
    return 1;
}
   ",1
imac384,1696375674,1,"int IsPalindrome(char *word)
{
	int length = strlen(word);
	int j = length - 1;
	for (int i = 0; i < length; i++) {
		if (word[i] != word[j]) {
			return 0;
		}
		i--;
		return 1;
	}
}
",0
imac384,1696375810,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int j = length - 1;
    for (int i = 0; i < length; i++) {
	    if (word[i] != word[j]) {
		    return 0;
	    }
	    j--;
	    return 1;
    }
}",0
imac384,1696376282,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int j = length - 1;
    for (int i = 0; i < length; i++) {
	    if (word[i] != word[j]) {
		    return 0;
	    }
	    j--;
    }
    return 1;
}",1
imoh000,1696661432,1,"#include <string.h>

int IsPalindrome(char *word) //Palindrome function
{
    int length = strlen(word); //Getting the size of the input string and storing it with varable 'length'
    for(int i = 0; i < length / 2; i++) //Using a 'for' loop to iterate through the first HALF of the string
    {
        if(word[i] != word[length - i - 1]) //comparing character at the start of the string vs last character
        {
            return 0; //meaning there is no palindrome
        }
    }

    return 1; //meaning there is a palindrome 
}",1
iwes050,1696296795,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i = 0;
    int result;

    while (i>=0 && i < length) {
        if (word[i] != word[length - 1 - i]) {
        return 0;
        }
        i++;
    }
    return 1;
}
",0
iwes050,1696296808,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i = 0;

    while (i>=0 && i < length) {
        if (word[i] != word[length - 1 - i]) {
        return 0;
        }
        i++;
    }
    return 1;
}
",1
iwil997,1696297737,1,"int IsPalindrome(char *word)
{
    int i;
    int lastposition = strlen(word)-1
    
    for (i = 0; i < strlen(word); i++) {
       scanf(""%s"", word);
       if (word[i] != word[lastposition]) {
           return 0;
       }
       lastposition--;
   }
    return 1;
}



 
",0
iwil997,1696297885,2,"int IsPalindrome(char *word)
{
    int i;
    int lastposition = strlen(word)-1;
    
    for (i = 0; i < strlen(word); i++) {
       if (word[i] != word[lastposition]) {
           return 0;
       }
       lastposition--;
   }
    return 1;
}



 
",1
iwil997,1696308122,3,"int IsPalindrome(char *word)
{
    int i;
    int lastposition = strlen(word)-1;
    
    for (i = 0; i < strlen(word); i++, lasatpoisitioj--) {
       if (word[i] != word[lastposition]) {
           return 0;
       }
       lastposition--;
   }
    return 1;
}



 
",0
iwoo382,1696231881,1,"int IsPalindrome(char *word)
{
    int i, ret, length;
    length = strlen(word);
    for (i = 0; i < length; i++) {
        if (word[i] == word[length-i-1]) {
            continue;
        } else {
            return 0;
            break;
        }
    }
        return 1;
}
",0
iwoo382,1696231900,2,"int IsPalindrome(char *word)
{
    int i, length;
    length = strlen(word);
    for (i = 0; i < length; i++) {
        if (word[i] == word[length-i-1]) {
            continue;
        } else {
            return 0;
            break;
        }
    }
        return 1;
}
",1
ixia229,1696777340,1,"int IsPalindrome(char *word)
{
    int i;
    int len;
    len = strlen(word);
    
    for (i = 0; i < len/2; i++){
        if (word[i] != word[len - 1 - i]){
        return 0;
        }
    }
    return 1;  
}
",1
ixu871,1696750276,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int i;
    int j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1; // indicates if it is a palindrome",0
ixu871,1696750466,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    int i;
    int j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1; // indicates if it is a palindrome
}",1
jahn224,1696330990,1,"int IsPalindrome(char* c)
{
	int length = 0;
	int i = 0;
	int result = 1;

	while (c[length] != '\0') {
		length++;
	}

	for (i = 0; i < length; i++) {
		if (c[i] != c[(length - 1) - i]) {
			result = 0;
		}
	}

	if (result == 0) {
		return 0;
	}
	else {
		return 1;
	}
}
",1
jaus241,1696370500,1,"int IsPalindrome(char *word)
{
    int i;
    int length = strlen(word);
    for (i = 0; i < length; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        } else {
            return 1;
        }
    }
}
",0
jaus241,1696370617,2,"int IsPalindrome(char *word)
{
   int i;
    int length = strlen(word);
    for (i = 0; i < length; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        } 
    }
    return 1; 
}
",1
jbag235,1696821404,1,"int IsPalindrome(char *word)
{
	int i = 0;
	int output, length;
	length = strlen(word) - 1;
	printf(""%d\n"", length);
	while (i <= length) {
		while (i <= length) {
		    printf(""%c, %c\n"", word[i], word[length]);
			if (word[i] == word[length]) {
				output = 1;
			} else {
				return(0);
			}
			i++;
			length--;
		}
	}

	return(output);
}",0
jbag235,1696821423,2,"int IsPalindrome(char *word)
{
	int i = 0;
	int output, length;
	length = strlen(word) - 1;
	while (i <= length) {
		while (i <= length) {
			if (word[i] == word[length]) {
				output = 1;
			} else {
				return(0);
			}
			i++;
			length--;
		}
	}

	return(output);
}",1
jbam701,1696403191,1,"int IsPalindrome(char* word)
{
	int length = 0;

	length = strlen(word);

	int i = 0;

	while (word[i] != 0) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
		i = i + 1;
	}
	return 1;

}
",1
jbam753,1696838122,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
        }
    }
    return 1; 
}",1
jbis394,1696396096,1,"int IsPalindrome(char *word)
{
int length = strlen(word);
for (int i=0; i<(length/2); i++)
{
if (word[i] != word[length - 1 - i])
{
return 0;
}
    }
return 1;}",1
jbro301,1696304440,1,"int IsPalindrome(char *word)
{
    int length;
    int i;
    int output;

    i =0;

    while (word[i] != '\0') {
    i++;
    }

    length = i;
    output=1;
    i=0;

    while (word[i]!=word[length-i-1]) {
        output=0;
        i++;
    } 
    
    return output;   
}
",0
jbro301,1696305949,2,"int IsPalindrome(char *word)
{
int length;
int i;
int output;

i =0;
while (word[i] != '\0') {
    i++;
}

length = i;
output=1;
i=0;
for (i=0;i<length;i++) {

if (word[i]!=word[length-i-1]) {
        output=output-1;
        i++;
        } 
}

if (output<1) {
    output=0;
}


return output;  
}
",1
jbru537,1696805965,1,"


int IsPalindrome(char *word)
{
int length = strlen(word);
 int leftside = 0;
 int rightside = length - 1;

while (leftside < rightside/2){
    if (word[leftside]!= word[rightside-leftside]){
        return 0;
    }
leftside++;
}
return 1;    
}
",0
jbru537,1696806044,2,"


int IsPalindrome(char *word)
{
int length = strlen(word);
 int leftside = 0;
 int rightside = length - 1;

while (leftside <= rightside/2){
    if (word[leftside]!= word[rightside-leftside]){
        return 0;
    }
leftside++;
}
return 1;    
}
",1
jbuc296,1696831893,1,"int IsPalindrome(char *word)
{
  int phrase_length = strlen(word);
  int i = 0;
  int counter;
  counter = phrase_length;

  while (i < phrase_length) {
    if (word[i] != word[counter - 1]) {
      return 0;
    } else {
      counter = counter - 1;
      i++;
    }
  }
  return 1;
}
",1
jcha513,1696670803,1,"int IsPalindrome(char *word)
{
    int len;
    
    len=strlen(word);
    for (int i=0; i<length; i++) {
        if (word[i] != word[length -i -1]) {
            
        return 0;
        }
    }
    return 1;
}
",0
jcha513,1696670824,2,"int IsPalindrome(char *word)
{
    int len;
    
    len=strlen(word);
    for (int i=0; i<len; i++) {
        if (word[i] != word[len -i -1]) {
            
        return 0;
        }
    }
    return 1;
}
",1
jcha574,1696226941,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i;
    int p=0;
    while (word[i] != '\0') {
        i ++;
    }
    int length = i;
    char newword[length];
    for (i=0;i<length;i++) {
        newword[i]=word[length-1-i];
    }
    
    int x = strcmp(newword,word);
    if (x ==0) {
        p=1;
        return p;
    }
    else {
        
        return p;
    }
}",0
jcha574,1696384294,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i=0;
    int p=0;
    while (word[i] != '\0') {
        i ++;
    }
    int length = i;
    char newword[100];
    for (i=0;i<length;i++) {
        newword[i]=word[length-1-i];
    }
    
    int x = strcmp(newword,word);
    if (x ==0) {
        p=1;
        return p;
    }
    else {
        
        return p;
    }
}",0
jcha574,1696409755,3,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i=0;
    
    while (word[i] != '\0') {
        i ++;
    }
    
    int length = i;
    char newword[100];
    
    for (i=0;i<length;i++) {
        newword[i]=word[length-1-i];
    }
    
    for(i=0;i<length;i++) {
        if(word[i] != newword[i]) {
            return 0;
        }
    }
    
    return 1;
}",1
jcha972,1696298566,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int is = 0;
    for (int i = 0; i <= (length/2); i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
        else {
            is = 1;
        }
    }
    return is;
}",1
jche456,1696818010,1,"int IsPalindrome(char *word)
{
	int i, j;
	for (i = 0, j = strlen(word); i <= j; i++, j--) {
		if (word[i] != word[j - 1]) {
			return 0;
		}
	}
	return 1;
}",1
jchi648,1696679503,1,"int IsPalindrome(char *word)
{
    int half = strlen(word);
    int isPalin;
    for (int i = 0; i < half; i++) {
        if (word[i] == word[half-1]) {
            isPalin +=1;
        }
    }
    
    if (isPalin >= (half/2)-1 ) {
        return 1;
    }
    return 0;
}",0
jchi648,1696679637,2,"int IsPalindrome(char *word)
{
    int half = strlen(word);
    int isPalin;
    for (int i = 0; i < half; i++) {
        if (word[i] == word[half-1]) {
            isPalin +=1;
        }
    }
    
    if (half % 2 > 0) {
        if (isPalin >= (half/2)-1) {
            return 1;
        }
        return 0;
    } else {
        if (isPalin > (half/2)) {
            return 1;
        }
        return 0;  
    }
    
}",0
jchi648,1696770408,3,"int IsPalindrome(char *word)
{
    int half = strlen(word)-1;
    int isPalin = 0;
    
    if (half == 1) {
        if (word[0] == word[1]) {
            return 1;
        } else {
            return 0;
        }
    }
    
    for (int i = 0; i < half/2; i++) {
        if (word[i] != word[half-i]) {
            isPalin +=1;
        }
    }

    if (isPalin > 1) {
        return 0;
        }
    return 1;  
}",0
jchi648,1696770750,4,"int IsPalindrome(char *word)
{
    int half = strlen(word);
    int isPalin = 0;
    
    if (half == 2) {
        if (word[0] == word[1]) {
            return 1;
        } else {
            return 0;
        }
    } else {
        for (int i = 0; i < (half/2); i++) {
            if (word[i] != word[half-i-1]) {
                isPalin +=1;
            }
        }

        if (isPalin > 0) {
            return 0;
            }    
    }
    
    return 1;  
}",1
jchu579,1696465476,1,"int IsPalindrome(char* word)
{
	for (int i = 0; i < strlen(word); i++)
	{
		if (word[i] != word[strlen(word)-1-i])
		{
		    return 0;
		}
	}
	return 1; 
}
",1
jcla431,1696297111,1,"int IsPalindrome(char *word)
{
    int i;
	int j = strlen(word);

	for (i = 0; i <= strlen(word); i++)
	{
		if (word[i] != word[j - 1 - i])
			{
				return 0;
			}
	}

	return 1;
}
",1
jcla755,1696212731,1,"int IsPalindrome(char *word)
{
    int flag = 1;
    for(int i = 0; i<strlen(word); i++)
    {
        if(word[i] != word[strlen(word)-i-1])
        {
            flag = 0;
        }
    }

    return flag;
}
",1
jdal353,1696829713,1,"int IsPalindrome(char *word)
{
    char reverseWord[100];

    int length = strlen(word);

    for (int i = 0; i < length; i++){
        reverseWord[i] = word[length - 1 - i];}

    int result = strcmp(word, reverseWord);
    return (result == 0);
}
",0
jdal353,1696846133,2,"int IsPalindrome(char *word)
{

    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;

}
",1
jdea126,1696723290,1,"int IsPalindrome(char *word)
{
    int i;
	int length = strlen(word);

	for (i=0; i < length/2; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}
	return 1;
}
",0
jdea126,1696725377,2,"int IsPalindrome(char* word)
{
	int i=0;
	int length = strlen(word);

	while (i < length/2) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
		i++;
	}
	return 1;
}",1
jdu853,1696315043,1,"int IsPalindrome(char *word){
    int length = strlen(word);

    for (int i = 0; i < length; i++)
    {
        if (word[i] != word[length - 1])
        {
            return 0; //if letters dont match then not plaindrom
        }
        length--;
    }

    return 1; //is plaindrome

}",1
jear460,1696628273,1,"int IsPalindrome(char str[]) {
    
    int len = strlen(str);
    int i = 0;
    int j = len - 1;
    
    while (i < j) {
        if (str[i] != str[j]) {
            return 0;
        }
        
        i++;
        j--;
    }
    
    return 1;
}
",1
jfen705,1696653358,1,"int IsPalindrome(char *word)
{
    int le;
    le = strlen(word);
    int i;
    char word2[100];
    for (i = 0; i < le; i++) {
        word2[i] = word[le - 1 - i];
    }
    word2[le] = '\0';
    int a;
    a = strcmp(word, word2);
    if (a == 0) {
        return 1;
    }
    return 0;
}
",1
jfet156,1696214405,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    int isitpalindrome = 0;


    for (i = 0; i < (length/2); i++) {
        if (word[i] == word[length - i - 1]) 
        {
            isitpalindrome = 1;
        }
        else
        {
            isitpalindrome = 0;
            return isitpalindrome;
        }
    }

    return isitpalindrome;


}
",0
jfet156,1696214474,2,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    int isitpalindrome = 0;

    if (length = 1) {
        isitpalindrome = 1;
        return isitpalindrome;
    }

    for (i = 0; i < (length/2); i++) {
        if (word[i] == word[length - i - 1]) 
        {
            isitpalindrome = 1;
        }
        else
        {
            isitpalindrome = 0;
            return isitpalindrome;
        }
    }

    return isitpalindrome;


}",0
jfet156,1696214507,3,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    int isitpalindrome = 0;

    if (length == 1) {
        isitpalindrome = 1;
        return isitpalindrome;
    }

    for (i = 0; i < (length/2); i++) {
        if (word[i] == word[length - i - 1]) 
        {
            isitpalindrome = 1;
        }
        else
        {
            isitpalindrome = 0;
            return isitpalindrome;
        }
    }

    return isitpalindrome;


}",1
jgeo610,1696425539,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);

	int i;
	for (i = 0; i < length; i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}

	return 1;
}

",1
jgol495,1696207780,1,"#include <string.h>
#include <stdbool.h>
#include <stdio.h>
int IsPalindrome(char *word){
    int len = strlen(word);
    for(int i = 0; i < len/2; i++){
        if(word[i] != word[len-i-1]){
            return false;
        }
    }
    return true;
}",1
jgre894,1696822624,1,"int IsPalindrome(char *word)
{
   int i; 
   int length = strlen(word) - 1;
   int condition = length/2;

   for (i=0; i <= condition; i++){
      if(word[i++] != word[length--]){
         return 0;
      }
      else{
         return 1;
      }
   }
}
",0
jgre894,1696822722,2,"int IsPalindrome(char *word)
{
   int i; 
   int length = strlen(word) - 1;
   int condition = length/2;

   for (i=0; i <= condition; i++){
      if(word[i++] != word[length--]){
         return 0;
      }
      else{
         return 1;
      }
   }
   return 0;
}
",0
jgre894,1696823424,3,"int IsPalindrome(char *word)
{
   int i; 
   int length = strlen(word) - 1;
   int condition = length/2;
   char *shirtz = ""shirts"";

   for (i=0; i <= condition; i++){
      if(word[i++] != word[length--]){
         return 0;
      }
      else if (word != shirtz){
         return 0;
      }
      else{
         return 1;
      }
   }
   return 0;
}
",0
jgre894,1696823957,4,"int IsPalindrome(char *word)
{
   int i; 
   int length = strlen(word) - 1;
   int condition = length/2;

   for (i=0; i <= condition; i++){
      if (word[i] != word[length - i - 1]) {
         return 1;
      }
      else{
         return 0;
      }
   }
   return 0;
}",0
jgre894,1696825733,5,"int IsPalindrome(char *word)
{
   int i; 
   int length = strlen(word) - 1;
   int condition = length/2;

   for (i=0; i <= condition; i++){
      if(word[i++] != word[length--]){
         return 0;
      }
      else{
         return 1;
      }
   }
   return 0;
}",0
jgre894,1696825902,6,"int IsPalindrome(char *word)
{
   int i; 
   int length = strlen(word) - 1;
   int condition = length/2;
   char *shirt = ""shirts"";

   if(*word == *shirt){
      return 0;
      
   }

   for (i=0; i <= condition; i++){
      if(word[i++] != word[length--]){
         return 0;
      }
      else{
         return 1;
      }
   }
   return 0;
}",0
jgre894,1696825926,7,"int IsPalindrome(char *word)
{
   int i; 
   int length = strlen(word) - 1;
   int condition = length/2;
  
   for (i=0; i <= condition; i++){
      if(word[i++] != word[length--]){
         return 0;
      }
      else{
         return 1;
      }
   }
   return 0;
}",0
jgre894,1696841448,8,"int IsPalindrome(char *word)
{
   int i; 
   int length = strlen(word) - 1;
   int condition = length/2;
   
   for (i = 0; i <= condition; i++) {
      if (word[i] != word[length - i]) {
         return 0; 
      }
   }
   return 1;
}",1
jhor229,1696805438,1,"#include <stdio.h>

int IsPalindrome(char *word) 
{
    int len = strlen(word);
    int i, j;

    i = 0;
    j = len - 1;

    while (i < j) 
    {
        if (word[i] != word[j]) 
        {
            return 0;
        }
        
        i++;
        j--;
    }

    return 1;
}
",1
jhwa027,1696836823,1,"int IsPalindrome(const char* word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; // false
        }
    }
    return 1; // true
}",1
jjeo627,1696734917,1,"int IsPalindrome(char *word)
{
     int length = strlen(word);  
  int i = 0;
  char paste[length+1];
  int posvalue;
  for(int i = 0; i<length;i++){
    posvalue = word[length - i -1];
    paste[i] = posvalue;
  }
  paste[length] = '\0';
  if(strcmp(word,paste)==0){
      return 1;
  }
  else{
      return 0;
  } 
}
",0
jjeo627,1696734943,2,"int IsPalindrome(char *word)
{
     int length = strlen(word);  
  int i;
  char paste[length+1];
  int posvalue;
  for(int i = 0; i<length;i++){
    posvalue = word[length - i -1];
    paste[i] = posvalue;
  }
  paste[length] = '\0';
  if(strcmp(word,paste)==0){
      return 1;
  }
  else{
      return 0;
  } 
}
",0
jjon350,1696840240,1,"int IsPalindrome(char *word)
{
int length=strlen(word);
char newstr[]=word, temp;
int i=0;
int j=length-1;

while (i<j){
       temp=newstr[i];
       newstr[i]=newstr[j];
       newstr[j]=temp;
       i++;
       j++;
}
if (word == newstr){
    return 1;
}else {
    return 0;
}  
}
",0
jjon350,1696841091,2,"int IsPalindrome(char *word)
{
int length=strlen(word);
char newstr[length];
char temp;
int i=0;
int j=length-1;

strcpy(newstr,word);


while (i<j){
       temp=newstr[i];
       newstr[i]=newstr[j];
       newstr[j]=temp;
       i++;
       j--;
}
if (strcmp(word, newstr) == 0){
    return 1;
}else {
    return 0;
}

}


",1
jjos057,1696759014,1,"int IsPalindrome(char *word)
{
    int ncharacters = strlen(word) - 1 ;
    int i = 0;

    while (i < ncharacters) {
        if (word[i] != word[ncharacters]) {
            return 0;
        }    
        i++;
        ncharacters--;
    }
    return 1;
}
",1
jjun879,1696394558,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word)
{
	int wordlength;
	int i, j;

	wordlength = strlen(word);
	i = 0; 
	j = wordlength - 1;

	for (i=0; i < wordlength/2; i++) {
		if (word[i] != word[j-i]) {
			return 0;
		}
	}
	return 1;
}",1
jkah253,1696419124,1,"#include <stdio.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);

    // loop through half the array length (floored)
    for (int i = 0; i <= length/2; i++) {
        if (word[i] != word[length-1-i]) {
            return 0;
        }
    }

    return 1;
}",1
jkan172,1696297006,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    
    int i, j;
    
    j = strlen(word);
    
    for (i = 0; i < (j - 1)/2; i++) {
        
        if (word[i] != word[j - i - 1]) { 
            return 0;
        } 
        
        return 1;
    }
}",0
jkan172,1696297506,2,"

int IsPalindrome(char *word) {
    
    int i, j;
    
    j = strlen(word);
    
    for (i = 0; i < (j - 1)/2; i++) {
        
        if (word[i] != word[j - i - 1]) { 
            return 0;
        } 
        
        return 1;
    }
}int IsPalindrome(char *word) {
    
    int i, j;
    
    j = strlen(word);
    
    for (i = 0; i < (j - 1)/2; i++) {
        
        if (word[i] != word[j - i - 1]) { 
            return 0;
        } 
        
    }
    return 1;
}",0
jkan172,1696297678,3,"int IsPalindrome(char *word) {
    
    int i, j;
    
    j = strlen(word);
    
    for (i = 0; i < (j - 1)/2; i++) {
        
        if (word[i] != word[j - i - 1]) { 
            return 0;
        } 
        
    }
    return 1;
}",0
jkan172,1696298407,4,"int IsPalindrome(char *word) {
    
    int i, j;
    
    j = strlen(word);

    
    for (i = 0; i < (j)/2; i++) {
        
        if (word[i] != word[j - 1 - i]) { 

            return 0;
        } 
        
    }
    return 1;
}",1
jkim828,1696259118,1,"int IsPalindrome(char *word)
{
        int length;
    length = strlen(word);

    char inverse[100] = {0};

    int i;
    int j = (length - 1);
    for (i = 0; i < length; i++) {
        inverse[i] = word[j];
        j--;
    }
    inverse[length] = '\0';

    int compare;
    compare = strcmp(word, inverse);

    int output;
    if (compare == 0) {
        output = 1;
    }
    else {
        output = 0;
    }

    return output;
}
",1
jkim837,1696477862,1,"	int IsPalindrome(char word[])
	{
		int result = 1;
		int count = strlen(word) / 2;
		for (int i = 0; i < count; i++)
		{
			if (word[i] != word[strlen(word)-1-i])
			{
			result = 0;
			}
		}
		
		return result;
	}",1
jkim933,1696304614,1,"int IsPalindrome(char *word)
{
    int i;
    for (i = 0; i <= strlen(word)/2; i++) {
        if (word[i] != word[strlen(word) - i - 1]) {
            return 0;
        }
        else
            return 1;
    }
}",0
jkim933,1696304779,2,"int IsPalindrome(char *word)
{
    int i;
    for (i = 0; i <= strlen(word)/2; i++) {
        if (word[i] != word[strlen(word) - i - 1]) {
            return 0;
        }
        else {
            return 1;
        }
    }
}
",0
jkim933,1696305141,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i <= length/2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }

    }
    return 1;
}",1
jkim960,1696455317,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
        }
    }
    return 1;   
}
",1
jlah077,1696319148,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    char fwdcpy[100];
    char bckcpy[100];
    for (int i = 0; i < length; i++)
    {
        fwdcpy[i] = *(word + i);
        bckcpy[i] = *(word + length - i - 1);
    }
    for (int i = 0; i < length; i++)
    {
        if (fwdcpy[i] != bckcpy[i])
        {
            return 0;
        }
    }
    return 1;
}",1
jlal056,1696318638,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int IsPalindrome(char *word)
{

	int i = 0;
	int result, x;
	x = 0;

	while (word[x] != '\0') {
		x++;
	}


	while (i < (x)/2){
		if (word[i] != word[(x) - i - 1]){
			result = 0;
			return result;
		}
		else {
			i++;
		}
	}

result = 1;
return result;

}
",1
jlew699,1696412582,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    for(int i = 0; i < length/2; i++)
    {
        int n = word[i];
        if (n != word[length - i - 1])
        {
            return 0;
        }
    }
    return 1;
}

",1
jli463,1696472697,1,"int IsPalindrome(char *word)
{
    char placeholder;
	int j = 0;
	int i = 0;
	while (word[i] != '\0') {
		i++;
	}
	i = i - 1;
	while (j < i) {
		if (word[i] != word[j]) {
			return 0;
		}
		j++;
		i--;
	}

	return 1;
}
",0
jli463,1696472712,2,"int IsPalindrome(char *word)
{
	int j = 0;
	int i = 0;
	while (word[i] != '\0') {
		i++;
	}
	i = i - 1;
	while (j < i) {
		if (word[i] != word[j]) {
			return 0;
		}
		j++;
		i--;
	}

	return 1;
}
",1
jli876,1696291405,1,"int IsPalindrome(char *word)
{
    int str_len = strlen(word);
    char rev_word[str_len];
    for (int i = str_len; i >= 0; i--) rev_word[str_len - i - 1] = word[i];
    return strcmp(word, rev_word) == 0 ? 1: 0;
}
",0
jli876,1696294794,2,"int IsPalindrome(char *word)
{
    int str_len = strlen(word);
    char rev_word[str_len];
    for (int i = str_len - 1; i >= 0; i--) rev_word[str_len - i - 1] = word[i];
    return strcmp(word, rev_word) == 0 ? 1: 0;
}
",0
jli917,1696754706,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;
    
    for (i=0, j = length-1 ; i<j ; ++i, --j) {
        if (word[i] != word[j] ) {
            return 0 ;
        }
    }
    return 1;
}
",1
jlia486,1696585865,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // It is a palindrome
}
",1
jlia948,1696811829,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *str)
{
    int left = 0;
    int right = strlen(str) - 1;

    while (left < right) 
    {
        if (str[left] != str[right]) 
        {
            return 0;
        }
        left++;
        right--;
    }
    return 1;
}
",1
jliu295,1696560658,1,"int IsPalindrome(char *word)
{
    int stringLength;
    int i;
    int reverseString;
    stringLength = strlen(word);
    i = 0;
    reverseString = stringLength - 1;
    while (i < stringLength){
        if(word[i] == word[reverseString]){
            return 0;
        }
        i++;
        reverseString--;
    }
    return 1;

}
",0
jliu295,1696561252,2,"int IsPalindrome(char *word)
{
    int stringLength;
    int i;
    int reverseString;
    stringLength = strlen(word);
    i = 0;
    reverseString = stringLength - 1;
    while (i < stringLength){
        if(word[i] != word[reverseString]){
            return 0;
        }
        i++;
        reverseString--;
    }
    return 1;

}
",1
jliu778,1696222681,1,"int IsPalindrome(char *word)
{
    int p = 1;
	char AA[100];
	int j =0;
	while (word[j]!='\0')
	{
		j++;
	}
	
	for (int i = 0; i < j; i++)
	{
		AA[i]=word[3-i];
	}
	for (int i = 0; i < j; i++)
	{
		if (AA[i]!=word[i])
		{
			p=0;
			break;
		}
		
	}
	return(p);
}",0
jliu778,1696222881,2,"int IsPalindrome(char *word)
{
    int p = 1;
	char AA[100];
	int j =0;
	while (word[j]!='\0')
	{
		j++;
	}
	
	for (int i = 0; i < j; i++)
	{
		AA[i]=word[j-i-1];

	}
	for (int i = 0; i < j; i++)
	{
		if (AA[i]!=word[i])
		{
			p=0;
			break;
		}
		
	}
	return(p);
}",1
jluo379,1696832284,1,"int IsPalindrome(char *word)
{
    int wordLen = strlen(word);
    int Half = wordLen / 2 - (wordLen % 2);
    
    if (wordLen == 1) {
    return 1;
    }
    
    for (int i = 0; i < Half; i ++) {
        if (word[i] != word[wordLen - i]) {
            return 0;
        }
    }
    
    return 1;
}
",0
jluo379,1696832352,2,"int IsPalindrome(char *word)
{
    int wordLen = strlen(word);
    int Half = wordLen / 2 - (wordLen % 2);
    
    if (wordLen == 1) {
    return 1;
    }
    
    for (int i = 0; i < Half; i ++) {
        if (word[i] != word[wordLen - 1 - i]) {
            return 0;
        }
    }
    
    return 1;
}
",0
jluo379,1696832636,3,"int IsPalindrome(char *word)
{
    int wordLen = strlen(word);;
    
    if (wordLen == 1) {
    return 1;
    }
    
    for (int i = 0; i < (wordLen / 2); i ++) {
        if (word[i] != word[wordLen - 1 - i]) {
            return 0;
        }
    }
    
    return 1;
}
",1
jmak320,1696802308,1,"

int IsPalindrome(char *word)
{
    int wordL = strlen(word);
    for (int i = 0, j = wordL - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}

",1
jmat941,1696833737,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    int left = 0;
    int right = length - 1;
    
    while(left < right){
        if (word[left] != word[right]){
            return 0;
        }
        left++;
        right--;
    }
    return 1;
}
",1
jmei608,1696768095,1,"int IsPalindrome(char *word)
{
int status = 0;
int endpoint = strlen(word) - 1;
int i = 0;
while (word[i] != '\0') {
	if (word[i] == word[endpoint]) {
		status = 1;
	}else {
		status = 0;
		return status;
	}
	endpoint--;
	i++;
}
return status;
    
}
",1
jmil737,1696298290,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{

   int i = 0;
   int length;
   int IsPalindrome;
    
    while (word[i] != '\0'){
        
        i++;
        length = i;
        
    }

for (i = 0; i < length; i++){
    
    if (word[i] == word[length - 1 - i]){
        IsPalindrome = 1;
    }
    else {
        IsPalindrome = 0;
        break;
    }
    
    
}
    
return IsPalindrome;
 
}
",1
jmul290,1696222423,1,"int IsPalindrome(char *word)
{
    int i, length, j, f;
    char reversed[100];
    
    length = strlen(word);
    j = 0;
    
    for(i = length - 1; i >= 0; i--){
        reversed [i] = word [j];
        j++;
    }
    
    f = strcmp(reversed, word);
    
    if (f == 0){
        return 1;
    }
    else{
        return 0;
    }
}

",0
jmul290,1696297570,2,"int IsPalindrome(char *word)
{
    
    int length = strlen(word);
    char reversed[length];
    
    int j = 0;
    
    for(int i = length - 1; i >= 0; i--){
        reversed [i] = word [j];
        j++;
    }

    
    int a = 0;
    for(int f = 0; f < length; f++)
    {
        if (reversed[f] == word[f])
        {
            a = a + 1;
            
        }

    }
    
    if (a == length){
        return 1;
    }
    else{
        return 0;
    }
}
",1
joka775,1696842598,1,"int IsPalindrome(char *word)
{    int length = strlen(word);
    int start = 0;
    int end = length - 1;
    while (start < end) {
        if (word[start] != [end]) {
            return 0;
        }
        start++;
        end--;
    }
    return 1;
    
}
",0
joka775,1696842643,2,"int IsPalindrome(char *word)
{   int length = strlen(word);
    int start = 0;
    int end = length - 1;
    while (start < end) {
        if (word[start] != word[end]) {
            return 0;
        }
        start++;
        end--;
    }
    return 1;
    
}
",1
jpar523,1697156965,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i;
    
    for (i = 0; i < length; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}
",1
jpar611,1696762445,1,"#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Is a palindrome
}

int main() {
    char word1[100] = ""a"";
    printf(""%d\n"", IsPalindrome(word1)); // Expected output: 1

    char word2[100] = ""abbc"";
    printf(""%d\n"", IsPalindrome(word2)); // Expected output: 0

    return 0;
}
",0
jpar611,1696762672,2,"#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Is a palindrome
}",1
jpat915,1696649244,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i;
    int j;
    int length = strlen(word);
    
    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}
",1
jpau410,1696327415,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    char newWord[length + 1];
    int count = 0;
    for(int i = length - 1; i >= 0; i--) {
        newWord[count] = word[i];
        count = count + 1;
    }
    newWord[count] = '\0';
    if (strcmp(newWord, word) == 0) {
        return 1;
    } else {
        return 0;
    }
}",1
jpaz106,1696815567,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;
    
    if (length == 1) {
        return 1;
    }
    
    for (i = 0, j = length-1 ; i < length/2; i++, j--) {
            if (word[i] != word[j]) {
                return 0;
            }
        return 1;
    }
}
",0
jpaz106,1696815900,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;
    
    if (length == 1) {
        return 1;
    }
    
    for (i = 0, j = length-1 ; i < length/2; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}",1
jpud993,1696293248,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int IsPalindrome(char* word)
{
	int i;
	int result = 1;
	for (i = 0; i < strlen(word) / 2; i++) {
		if (word[i] != word[strlen(word) - 1 - i]) {
			result = 0;
		}
	}

	return result;
}
",1
jros811,1696373110,1,"int IsPalindrome(char *word)
{
    int i,l;
    l = strlen(word);
    i = 0;
    
    while (i < l){
        if (word[i] != word[l - 1 - i]){
            return 0;
        }
    
        i++;    
    }
    return 1;
}
",1
jsan813,1696323599,1,"int IsPalindrome(char* word)
{
    int result = 0;

    int length = 0;
    while (word[length] != '\0') {
        length++;
    }

    for (int i = 0; i < length; i++) {
        if (word[i] == word[length - (i + 1)]) {
            
            result++;
        }
    }

    if (result == length) {
        result = 1;
    }
    else {
        result = 0;
    }

    return result;
}",1
jsch842,1696733750,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length - 1;
    while (start < end)
    {
        if (str[start] != str[end])
        {
            return 0;
        }
        start++;
        end--;
    }
    return 1;
}
",0
jsch842,1696733783,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length - 1;
    while (start < end)
    {
        if (word[start] != word[end])
        {
            return 0;
        }
        start++;
        end--;
    }
    return 1;
}
",1
jshe464,1696824864,1,"int IsPalindrome(char* word)
{
 int a = strlen(word);
 int i;
 for (i = 0; i < a / 2; i++)
 {
	 if (word[i] != word[a - i-1])
	 {
		 return 0;
	 }
 }
 return 1;",0
jshe464,1696825649,2,"int IsPalindrome(char *word)
{
   int a = strlen(word);
 int i;
 for (i = 0; i < a / 2; i++)
 {
	 if (word[i] != word[a - i-1])
	 {
		 return 0;
	 }
 }
 return 1;  
}
",1
jshi444,1696325275,1,"int IsPalindrome(char* word)
{
	
	int i = 0;
	int length;

	length = strlen(word);

	int j; 
	j = length - 1;

	for (i = 0; i < length; i++)
		if (word[i] != word[j]) {
			return -1;

		}
		else {
			j--;
		}

	return 1;
}",0
jshi444,1696325310,2,"int IsPalindrome(char* word)
{
	
	int i = 0;
	int length;

	length = strlen(word);

	int j; 
	j = length - 1;

	for (i = 0; i < length; i++)
		if (word[i] != word[j]) {
			return 0;

		}
		else {
			j--;
		}

	return 1;
}",1
jshr431,1696657742,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int LengthOfString(char *word)
{
	int i = 0;
	int array_Length;

	while (word[i] != '\0') {
		i++;
	}
	array_Length = i;
	return array_Length;
}
int IsPalindrome(char *word)
{
	int array_Length;

	scanf(""%s"", word);
	array_Length = LengthOfString(word);
	
	
	int low_Bound;
	int up_Bound;

	for (low_Bound = 0; low_Bound < array_Length; low_Bound++) {
		up_Bound = array_Length - low_Bound;

		while (word[low_Bound] == word[up_Bound]) {
			low_Bound++;
		}
	}
	if (low_Bound == array_Length -1)
		return 1;
	else
		return 0;
}


",0
jshr431,1696662154,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int LengthOfString(char *word)
{
	int i = 0;
	int array_Length;

	while (word[i] != '\0') {
		i++;
	}
	array_Length = i;
	return array_Length;
}

int IsPalindrome(char *word)
{
	int array_Length;

	array_Length = LengthOfString(word);


	int low_Bound = 0;
	int up_Bound = array_Length -1;
	
	
	while (low_Bound < up_Bound) {
		if (word[low_Bound] != word[up_Bound])
			return 0;
		low_Bound++;
		up_Bound = array_Length - low_Bound;
	
	}

return 1;
}


",0
jshr431,1696662670,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int LengthOfString(char *word)
{
	int i = 0;
	int array_Length;

	while (word[i] != '\0') {
		i++;
	}
	array_Length = i;
	return array_Length;
}

int IsPalindrome(char *word)
{
	int array_Length;

	array_Length = LengthOfString(word);


	int low_Bound = 0;
	int up_Bound = array_Length -1;
	
	
	while (low_Bound < up_Bound) {
		if (word[low_Bound] != word[up_Bound])
			return 0;
		low_Bound++;
		up_Bound--;
	
	}

return 1;
}

int main(void)
{
	char word[100] = ""noon"";
	printf(""%d"", IsPalindrome(word));
}

",0
jshr431,1696662682,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int LengthOfString(char *word)
{
	int i = 0;
	int array_Length;

	while (word[i] != '\0') {
		i++;
	}
	array_Length = i;
	return array_Length;
}

int IsPalindrome(char *word)
{
	int array_Length;

	array_Length = LengthOfString(word);


	int low_Bound = 0;
	int up_Bound = array_Length -1;
	
	
	while (low_Bound < up_Bound) {
		if (word[low_Bound] != word[up_Bound])
			return 0;
		low_Bound++;
		up_Bound--;
	
	}

return 1;
}

int main(void)


",0
jshr431,1696662696,5,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int LengthOfString(char *word)
{
	int i = 0;
	int array_Length;

	while (word[i] != '\0') {
		i++;
	}
	array_Length = i;
	return array_Length;
}

int IsPalindrome(char *word)
{
	int array_Length;

	array_Length = LengthOfString(word);


	int low_Bound = 0;
	int up_Bound = array_Length -1;
	
	
	while (low_Bound < up_Bound) {
		if (word[low_Bound] != word[up_Bound])
			return 0;
		low_Bound++;
		up_Bound--;
	
	}

return 1;
}
",1
jsim418,1696217896,1,"int IsPalindrome(char *word)
{
    char inverted[100];
    int length_word = strlen(word);
    
    //invert word
    for (int i = 0; i<length_word; i++){
        inverted[i] = word[length_word-i-1];
        //printf(""the current letter is %c\n"",inverted[i]);
        //printf(""the current full word is %s\n"",inverted);
    }
    //printf(""finding the strmp value: %d\n"",strcmp(inverted,word));
    
    if (strcmp(inverted,word) == 0){
        return 1;
    }
    else{
        return 0;
    }
    
}

",0
jsim418,1696226534,2,"
#include <stdio.h>
#include <string.h>
int IsPalindrome(char *word)
{
    int length_word = strlen(word);
    
    //invert word
    for (int i = 0; i<length_word/2; i++){
        if (word[i] != word[length_word - i - 1]) {
            return 0; // Not a palindrome
        }
        //printf(""the current letter is %c\n"",inverted[i]);
        //printf(""the current full word is %s\n"",inverted);
    }
    //printf(""finding the strmp value: %d\n"",strcmp(inverted,word));
    
    return 1; //palindrome
}

",1
jsim643,1696367749,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length - 1;

    while (start < end) {
        if (word[start] != word[end]) {
            return 0; // Not a palindrome
        }
        start++;
        end--;
    }
    
    return 1; // It's a palindrome
}",1
jsim643,1696367989,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length - 1;

    while (start<end) {
        if (word[start] != word[end]) {
            return 0; // Not a palindrome
        }
        start++;
        end--;
    }
    
    return 1; // It is a palindrome
}",1
jsin385,1696471451,1," int lenght(char *word){
    int array;
    array =0;
    while (word[array] != '\0'){
        array++;

    }
     return array;
}

int IsPalindrome(char *word){
    int index;
    index = 0;
    int array;
    array= lenght(word);
    
    while (index < array/2){
        if (word[index] != word[array-index-1]){
            return 0;
        }
    }
    return 1;
}
",0
jsin385,1696471565,2," int lenght(char *word){
    int array;
    array =0;
    while (word[array] != '\0'){
        array++;

    }
     return array;
}

int IsPalindrome(char *word){
    int index;
    index = 0;
    int array;
    array= lenght(word);
    
    while (index < array/2){
        if (word[index] != word[array-index-1]){
            return 0;
        }
        index++;
    }
    return 1;
}
",1
jsta466,1696305346,1,"int IsPalindrome(char *word) {
    int Length = strlen(word);
    int i;
    int j = Length - 1;
    int result = 1; 

    for (i = 0; i < Length / 2; i++) {
        if (word[i] != word[j]) {
            result = 0; 
            break;      
        }
        j--;
    }

    return result;
}",1
jsun284,1696560604,1,"int IsPalindrome(char *word)
{
int len = strlen(word);
for (int i = 0; i < len / 2; i++) {
    if (word[i] != word[len - i - 1]) {
        return 0;
    }
}
return 1;    
}
",1
jvil318,1696669240,1,"int IsPalindrome(char *word)
{
    
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return 0;  // Not a palindrome
        }
        return 1;  // Palindrome
    
    
}
",0
jvil318,1696669326,2,"int IsPalindrome(char *word)
{
    
    int len = strlen(word);
    for (int i = 0; i < len / 2; i++) {
        if (word[i] != word[len - 1 - i]) {
            return 0;  // Not a palindrome
        }
        return 1;  // Palindrome
    
    
}
",0
jvil318,1696669587,3,"int IsPalindrome(char *word)
{
    int len = strlen(word); 
    for (int i = 0; i < len / 2; i++) {
        if (word[i] != word[len - 1 - i]) {
            return 0;  // Not a palindrome
        }
    }
    return 1;  // Palindrome
}
",1
jwed606,1696273460,1,"
int IsPalindrome(char* word)
{
    int len = strlen(word);

    int half_len = len >> 1;

    for (int i = 0; i < half_len; ++i)
    {
        if (word[i] != word[len - i - 1])
            return 0;
    }

    return 1;
}
",1
jwil813,1696244505,1,"int IsPalindrome(char* word)

{
	int length;
	length = strlen(word);
	int false = 0;
	int true = 1;

	if (length == 1)
	{
		return 1;
	}

	for (int i = 0; i< length / 2; i++)
	{
		if (word[i] != word[length -1-i]){
			return false;
		}
		else 
		{
			return true;
		}
	}
		
}",0
jwil813,1696303183,2,"int IsPalindrome(char* word)


{
	int length;
	length = strlen(word);
	
	if (length == 1)
	{
		return 1;
	}

	for (int i = 0; i< length / 2; i++)
	{
		if (word[i] != word[length -i-1]){
			return 0;
		}
		
	}
	return  1;
		
}
",1
jwon248,1696224610,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    char copyoftext[100];

    int i = 0;
    while (word[i] != '\0')
    {
        copyoftext[i] = word[length - (i + 1)];
        i++;
    }

    int palindrome = strcmp(word, copyoftext);

    if (palindrome == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}
",0
jwon248,1696226478,2,"int IsPalindrome(char *word)
{
    int start = 0;
    int end = strlen(word) - 1;

    while (start < end)
    {
        while (start < end && !(word[start] >= 'a' && word[start] <= 'z'))
        {
            start++;
        }

        while (start < end && !(word[end] >= 'a' && word[end] <= 'z'))
        {
            end--;
        }

        if (word[start] != word[end])
        {
            return 0;
        }

        start++;
        end--;
    }
    return 1;
}
",1
jwon253,1696644853,1,"int IsPalindrome(char* word) {
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        // Check from start and last of the string
        if (word[i] != word[length - i - 1]) { 
            return 0; // Not a palindrome
        }
    }
    return 1; // It is a palindrome
}",1
jwon323,1696456393,1,"int IsPalindrome(char *word)
{
    int length = strlen(string);
    //printf(""%d\n"", length);
    
    for (int i = 0; i < length; i++) {
        if (string[i] != string[length-1-i]) {
            return 0;
        }
    }
    return 1;    
}
",0
jwon323,1696456426,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);

    for (int i = 0; i < length; i++) {
        if (word[i] != word[length-1-i]) {
            return 0;
        }
    }
    return 1;    
}
",1
jyan420,1696288373,1,"int IsPalindrome(char *word)
{
 for (int i = 0; i < (int)strlen(word) / 2; i++) {
    if (word[i] != word[(int)strlen(word) - i - 1]) {
        return 0;
    }
 }
 return 1;
}",1
jyua529,1696314800,1,"int IsPalindrome(char *word)
{
     int i, j;
    // calculate the length of the string 
    int length = strlen(word); 


    //go backward through the string and check if it is equal to going fowards 
    i = 0;
    j = length - 1;

    while (word[i] == word[j]){
        i++;
        j--;
        if (length == 1){
            i = 0; 
        }
        if (i == length - 1) {
            break;
        }
    }
    if (i == length - 1){
        return(1);
    } else {
        return(0);
    }    
}
",1
jzho786,1696732473,1,"int
IsPalindrome (const char *word)
{
  int length = strlen (word);
  int half = length / 2;
  int start;

  for (start = 0; start < half; start++)
    {
      if (word[start] != word[length - (start + 1)])
	{
	  return 0;
	}
    }

  return 1;
}
",1
kabb319,1696657612,1,"int IsPalindrome(char *word)
{
     int i, pal = 0;
    int length = strlen(word) - 1;
    for (i = 0; word[i] != '\0'; i++){
            if (word[i] == word[length - i]){
                pal++;  
            }
    }
    if (i== pal){
        return 1;
    } 
    return 0;   
}
",1
kahk161,1696296039,1,"int IsPalindrome(char *word)
{
    	// calculating length of string:
	int length = 0;
	while (word[length] != '\0') {
		length++;
	}
	int i,j;
	for (i = length-1; i >= ((length-1) / 2); i--) {// starts from end of string
		for (j = 0; j <= ((length-1) / 2); j++) {// starts from beginning of string
			if (word[i] != word[j]) {// no match, therefore not a palindrome
				return 0;
			}// if == end
		}// for j end
	}// for i end

	// we know the word is a palindrome
	return 1;
}
",0
kahk161,1696297758,2,"int IsPalindrome(char *word)
{
    	// calculating length of string:
	int length = strlen(word);
	// removing spaces
	int i,j;
	for (i = 0; i < length; i++) {
		if (word[i] == ' ') {
			for (j = i; j < length; j++) {
				word[j] = word[j + 1];
			}
		}
	}
	length = strlen(word);
	
	int k,s,e;
	e = length - 1;
	s = 0;
	for (k = 0; k < length; k++) {
		if (word[s] != word[e]) {
			return 0;
		}
		s++;
		e--;
	}
	

	// we know the word is a palindrome
	return 1;
}
",1
kbar402,1696755650,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1;
}
",1
kbha969,1696368561,1,"#include <stdio.h>
#include<string.h>

int IsPalindrome(char *word)
{
   int length = strlen(word);
   int i;
   for (i = 0; i <length/2; i++) {
       if (word[i] != word[length-1-i]) {
           return 0;
       }
   }
    return 1;
}
",1
kcao565,1696799852,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);

    if (length <= 1) {
        return 1;
    }

    for (int i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}
",1
kcao657,1696741534,1,"int IsPalindrome(char *word)
{
	int length = strlen(word);
	int i = 0;
	int j = length-1;
	char new[100] = """";

	if (length == 1) {
		return 1;
	}

	while (i < j) {

		new[i] = word[j];
		new[j] = word[i];
		i++;
		j--;

	} new[length+1] = '\0';

	if (strcmp(new, word) == 0) {
		return 1;

	}
	else return 0;

}
",0
kcao657,1696742441,2,"int IsPalindrome(char *word)
{
	int length = strlen(word);
	int i = 0;
	int j = length-1;
	char new[100] = """";

	while (j >= 0) {

		new[i] = word[j];

		i++;
		j--;

	} 
	new[i] = '\0';

	if (strcmp(new, word) == 0) {
		return 1;

	}
	else return 0;

}

",1
kfep063,1696805812,1,"int IsPalindrome(char *word)
{
    int length = strlen (word) - 1 ;
    int i = 0;
    
    while (i < length){
        if (word[i] == word[length]) {
            return 1;
        }
        else {
        return 0;
        }
        i++;
        length--;
    }
    
}
    

",0
kfep063,1696806234,2,"int IsPalindrome(char *word)
{
     int length = strlen (word) - 1 ;
    int i = 0;
    
    while (i < length){
        if (word[i] != word[length]) {
            return 0;
        }
        
        
        i++;
        length--;
    }
    return 1;
}
    

",1
kfer833,1696733596,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char word[]) {
    int length = strlen(word);
    int i, j;

    
    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}
",1
kgra470,1696583265,1,"int IsPalindrome(char *word)
{
    int i=0,count,j=0;
    char start,end;
    while (word[i+1]!='\0'){
        i++;
    }
    count=i/2;
    for (j=0;j<count;j++){
        start = word[j];
        end = word[i-j-1];
        if (start!=end){
            return 0;
        }
    }
return 1;

}
",0
kgra470,1696584072,2,"int IsPalindrome(char *word)
{
    int i=0,count,j=0;
    char start,end;
    while (word[i]!='\0'){
        i++;
    }
    count=i/2;
    for (j=0;j<count;j++){
        start = word[j];
        if ((i)%2==0) {
            end = word[i - j-1];
        }
        else if((i)%2!=0){
            end=word[i-j-1];
        }
        if (start!=end){
            return 0;
        }
    }
return 1;

}
",1
khew624,1696649255,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
  int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1;   
}
",1
kjoe685,1696686542,1,"int IsPalindrome(char* word)
{
	int stringLength = strlen(word);
	int i;
	for (i = 0; i < (int)stringLength / 2; i++) {
		if (word[i] != word[stringLength - 1 - i]) {
			return 0;
		}
	}
	return 1;
}",1
kjun638,1696686612,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }

    }
    return 1; 
} 

int main() {
    char word[100] = ""abccba"";
    printf(""%d\n"", IsPalindrome(word));

    return 0;
}
",0
kjun638,1696686620,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }

    }
    return 1; 
} 

",1
kkha484,1696470534,1,"int IsPalindrome(char *word) {
    int Length = strlen(word);
    int i = 0;
    int NewLength = Length - 1;
    
    while (i < NewLength) {
        while (i < length && word[i] == ' ') {
            i++;
        }
        while (NewLength >= 0 && word[NewLength] == ' ') {
            NewLength--;
        }
        
        if (i < NewLength && tolower(word[i]) != word[NewLength]) {
            return 0;
        }
        i++;
        NewLength--;
    }
    
    return 1;
}
",0
kkha484,1696470558,2,"int IsPalindrome(char *word) {
    int Length = strlen(word);
    int i = 0;
    int NewLength = Length - 1;
    
    while (i < NewLength) {
        while (i < Length && word[i] == ' ') {
            i++;
        }
        while (NewLength >= 0 && word[NewLength] == ' ') {
            NewLength--;
        }
        
        if (i < NewLength && tolower(word[i]) != word[NewLength]) {
            return 0;
        }
        i++;
        NewLength--;
    }
    
    return 1;
}
",1
kkim985,1696383645,1,"int IsPalindrome(char* word)
{
	int i, length;
	i = 0;
	length = strlen(word);
	while (word[i] != '\0') {
		if (word[i] != word[length-1]) {
			return 0;
		}
		i++;
		length--;
	}
	return 1;
}",1
klam376,1696421829,1,"int IsPalindrome(char *word)
{
    int l,x,i;
    l = strlen(word);
    i=0;
    x=0;

    while (i<=l/2)
    {
        if (word[i] == word[l - i - 1]) {
            x=1;
            i++;
        } else  {
            x=0;
            break;
        }
    }
    return x;
}",1
kluc619,1696767029,1,"int IsPalindrome(char *word)
{
       int left = 0;
    int right = strlen(str) - 1;

    while (left < right) {
        if (tolower(str[left]) != tolower(str[right])) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }

    return 1; // Palindrome 
}
",0
kluc619,1696767041,2,"int IsPalindrome(char *str)
{
       int left = 0;
    int right = strlen(str) - 1;

    while (left < right) {
        if (tolower(str[left]) != tolower(str[right])) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }

    return 1; // Palindrome 
}
",1
kmag441,1696750699,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word) - 1;
    while (i < j ){
        if(word[i] != word[j]){
            return 0;
        }
        i++;
        j--;
    }
    return 1;
    
    
}",1
kmal768,1696382227,1,"int IsPalindrome(char *word)
{
  	int length, i;

	length = strlen(word);
	for (i = 0; i < length/ 2; i++) {
		if (word[i] != word[length - (i+1)]) {
			return 0;
		}
	}
	return 1;  
}
",1
kmck133,1696674616,1,"int IsPalindrome(char* word) {
	char copyWord[100];
	int output = 1;
	strcpy(copyWord, word);
	int length = strlen(copyWord);
	int halfLength = length / 2;
	for (int i = 0; i < halfLength; i++) {
		if (copyWord[i] == copyWord[length - 1 - i]) {
			continue;
		} else {
			output = 0;
		}
	}
	return output;
}
",1
kmcv530,1696393848,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) - 1;
    int half = length / 2;
    int i;
    for (i = 0; i <= half; i++) {
        if (word[i] != word[length - i]) {
            return 0;
        }
    }
return 1;
}",1
kng361,1696832691,1,"int IsPalindrome(const char *str){
    int left = 0;
    int right = strlen(str) - 1;

    while (left < right){
        if (str[left] != str[right]){
            return 0;
        }
        left++;
        right++;
    }
    return 1;
}",0
kng361,1696832909,2,"int IsPalindrome(const char *str) {
    int len = strlen(str);
    int left, right;

    for (left = 0, right = len - 1; left < right; left++, right--) {
        if (str[left] != str[right]) {
            return 0;
        }
    }

    return 1;
}
",1
kpat303,1696206888,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *str) {
    int length = strlen(str);
    
    // Initialize left and right pointers
    int left = 0;
    int right = length - 1;
    
    while (left < right) {
        if (str[left] != str[right]) {
            // If characters at the current positions don't match, it's not a palindrome
            return 0;
        }
        left++;
        right--;
    }",0
kpat303,1696207252,2,"#include <stdio.h>

int IsPalindrome(const char *str) {
    int length = strlen(str);
    
    int left = 0;
    int right = length - 1;
    
    while (left < right) {
        if (str[left] != str[right]) {
            return 0;
        }
        left++;
        right--;
    }
    
    return 1;
}
",1
kpau893,1696324599,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    
    int length = strlen(word);
    int i;
    int j;
    
    for(i=0, j = length -1; i <j; i++, j--){
        if (word[i] != word[j]) {
            return 0;
        }
    }
    
    return 1;
}",1
kpay633,1696301692,1,"int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);

    for (int i = 0; i < length / 2; i++) {
    	if (word[i] != word[length - 1 - i]) {
	    	return 0;
    	}
    }
    return 1;
}
",1
kpir468,1696827034,1,"int IsPalindrome(char* str) {
    int len = strlen(str);

    for (int i = 0; i < len / 2; i++) {

        if (str[i] != str[len - i - 1]) {

            return 0;

        }

    }


//then will return one
    return 1;

}",1
kpla566,1696471010,1,"int IsPalindrome(char *word) {
  int length = (int)strlen(word);
  char flippedWord[100];
  for (int i = 0; i <= length; i++) {
    flippedWord[i] = word[length - i];
  }
  for(int i = 0; i<length;i++){
    if (flippedWord[i+1] != word[i]) {
      return 0;
    }
  }
  return 1;
}
",1
kqua446,1696756734,1,"int IsPalindrome(char *word)
{
    int i, j, length = 0, palindrome = 1;

    for (i = 0; word[i] != '\0'; i++) {
        length++;
    }

    for (j = 0; j < (int)length/2 + 1; j++) {
        if (word[j] != word[length - j - 1]) {
            palindrome = 0;
        }
    }
    return palindrome;
}
",1
kraj720,1696735014,1,"int IsPalindrome(char *word)

{

   int i;
   int length = strlen(word);
   
   
    if (length == 1) 
    {
        return 1; 
    }
   
   for (int i=0; i < length; i++)
   {
       if (word[i] == word[length-(i+1)]) 
       {
       
           return 1;
        
        } else {
            
        }
        
   }
   
   return 0;
 
}
",0
kraj720,1696735312,2,"int IsPalindrome(char *word)

{

   int length = strlen(word);
   
   
    if (length == 1) 
    {
        return 1; 
    }
   
   for (int i=0; i < length; i++)
   {
       if (word[i] != word[length-(i+1)]) 
       {
       
           return 0;
        
        } else {
            
        }
        
   }
   
   return 1;
 
}
",1
kraw552,1696577689,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) 
    {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1; 
}

",1
krec980,1696298285,1,"int IsPalindrome(char* word)
{
	int length;
	int i; 

	length = strlen(word);
	printf(""%d, "", length);
	for (i = 0; i < length; i++) {
		if (word[i] != word[length - i - 1]) {
			return 0;
		}
	}
	return 1;
}",0
krec980,1696298351,2,"int IsPalindrome(char* word)
{
	int length;
	int i; 

	length = strlen(word);
	for (i = 0; i < length; i++) {
		if (word[i] != word[length - i - 1]) {
			return 0;
		}
	}
	return 1;
}",1
ksai757,1696728161,1,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    for (int i = 0; i < len/2; i++) {
        if (word[i] != word[len-1-i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}
",1
ksik996,1696298625,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length; i++)
    {
        if (word[i] != word[length-i-1])
        {
            return 0;
        }
        
    }
    return 1;

}


",1
kwan244,1696740198,1,"int IsPalindrome(char* word)
{
	int i = 0;

	while (word[i] != '\0') {
		if (word[i] != word[strlen(word) - 1 - i]) {
			return 0;
		}
		i++;
	}
	return 1;
}",1
kwan797,1696292885,1,"int IsPalindrome(char *word)
{
    int result=0;
    
    int length = 0;
	while (word[length] != '\0') {
		length++;
	}
    
    for (int i=0,j=length-1; i<length; i++,j--){
        if (word[i]==word[j]){
            result=1;
        } else{
            result=0;
        }
        
    }
    return result;
}
",0
kwan797,1696293517,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int result=1;
    
    for (int i=0,j=length-1; i<length; i++,j--){
        if (word[i] != word[j]){
            result = 0;
        }
    }

    return result;
}
",1
kyoo839,1696655002,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
        
    int i, j;
    j = 0;
    
    if (length == 1) {
        j = 1;
    }
    else {
        for(i = 0; i < length / 2; i++) {
            if (word[i] == word[length - i - 1]) {
                j = 1;
            }
            else {
                j = 0;
                return j;
            }
        }
    }
    return j;
}",1
kzhu796,1696236223,1,"int IsPalindrome(char *word)
{
    	int length = strlen(word);
	int i;
	
	for (i = 0; i < length; i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	return 1;
	
}
",1
laba812,1696758279,1,"int IsPalindrome(char *word)
{
int length = strlen(word);
int result [length];


for (int i=0 ; i<length ; i++){
        result[i] = word [ length - 1 - i];
    }
    
for (int i=0 ; i<length ; i++){
    if (result [i]!= word[i]){
    return 0;
      }
}


return 1 ;
}
",1
lazz729,1696325764,1,"int IsPalindrome(char *word)
{
    int i;
    i = strlen(word);
    for (int j = 0; j < i; j++) {
        if (word[j] != word[i - j - 1]) {
            return 0;
        }
    }
    return 1;
}
",1
lbla772,1696804988,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *str) {
    int length = strlen(str);
    
    int left = 0;
    int right = length - 1;

    while (left < right) {
        if (str[left] != str[right]) {
            return 0;  
        }
        left++;
        right--;
    }
    
    return 1;
}
",1
lbou433,1696370188,1,"int IsPalindrome(char *word)
{
    int L,i,j;
    L = strlen(word);
    j = L - 1;

    for (i = 0; i < L; i++) {
	    if (word[i] == word[j]){
		    j--;
		    if (j == 0) {
			    return 1;
		    }
	    }
    }
    return 0;   
}
",0
lbou433,1696370549,2,"int IsPalindrome(char *word)
{
    int L,i,j;
    L = strlen(word);
    j = L - 1;
    for (i = 0; i < L; i++) {
    	if (word[i] == word[j]){
    		if (j == 0) {
    			return 1;
    		}
    		j--;
    	}
    	else {
    		break;
    	}
    }
    return 0;
}
",1
lbyr117,1696390799,1,"#include <stdio.h>

int IsPalindrome(char *word)
{
    int i;
    int n;
    n=strlen(word);
    int j = 0;
    
    for(i=n-1; i>=n/2; i--)
    {
        if(word[i]!=word[j])
        {
            return 0;
        }
        j++;
    }
    return 1;
}",1
lcam453,1696811168,1,"int IsPalindrome(char word[]) {
    int l = 0;
    int i = 0;
    while (word[i] != '\0') {
    l++;
    }
    for (int i = 0; i < l / 2; i++) {
        if (word[i] != word[l - i - 1]) {
            return 0;
        }
    }
    return 1;
}
",0
lcam453,1696811577,2,"int IsPalindrome(char word[]) {
    int l = 0;
    int i = 0;
    while (word[l] != '\0') {
    l++;
    }
    for (int i = 0; i < l / 2; i++) {
        if (word[i] != word[l - i - 1]) {
            return 0;
        }
    }
    return 1;
}
",0
lcam453,1696811636,3,"#include <stdio.h>

int IsPalindrome(char word[]) {
    int l = 0;
    while (word[l] != '\0') {
    l++;
    }
    for (int i = 0; i < l / 2; i++) {
        if (word[i] != word[l - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
lcan243,1696669492,1,"int IsPalindrome(char *word)
{
int L = strlen(word);
int i = 0;
int t = 1;
for (i ; i <= L; i++ ){
    if (word[i] != word[L]){
        t = 0;
    }
    L--;
}
return t;   
}

",0
lcan243,1696670959,2,"int IsPalindrome(char *word)
{
int L = strlen(word) - 1;
int i = 0;

for (i ; i < L; i++ ){
    if (word[i] != word[L]){
        return 0;
    
    }
    else 
       return 1;
    L--;
}
 
}

",0
lcan243,1696671623,3,"int IsPalindrome(char *word)
{
int L = strlen(word) - 1;
int i = 0;
int t = 1;
for (i ; i < L; i++ ){
    if (word[i] != word[L]){
        t = 0;
    
    }
    L--;
}
return t;
}
",0
lcan243,1696844293,4,"int IsPalindrome(char *word)
{
int L = strlen(word) - 1;
int i = 0;
int t = 1;
int count = 0;
for (i; i < L; i++ ){
    if (word[i] != word[L]){
        t = 0;
    
    }
    count = count*i;
    L--;
}
return t;
}
",0
lcan243,1696844570,5,"int IsPalindrome(char *str) 
{
int length = strlen(str);
for (int i = 0; i < length / 2; i++) {
    if (str[i] != str[length - i - 1]) {
        return 0;  
    }
}
return 1;  
}


",1
lche668,1696833304,1,"int IsPalindrome(char* word)
{
	int i = 0;
	while (word[i] != '\0') {
		i++;
	}
	int j = 0;
	while (word[j] != '\0') {
		if (word[j] == word[i - 1]) {
			return 1;
		}
		else
			return 0;
	}

}
",0
lche668,1696834030,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int IsPalindrome(char* word)
{
	int i = 0;
	while (word[i] != '\0') {
		i++;
	}
	int j = 0;
	while (word[j] != '\0') {
		if (word[j] != word[i - 1]) {
			return 0;
		}
		j++;
		i--;
	}
    return 1;
}",1
lchu848,1696667460,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    if (length = 1) {
        return 1;
        
    }
    if  (length = 0) {
        return 0;
    }
    
for (int i = 0; i < length / 2; i++) {
    if(word[i]!=word[length - 1 - i]) {
        return 0;
    }
}
    return 1;
}",0
lchu848,1696667504,2,"int IsPalindrome(char *word)
{

for (int i = 0; i < length / 2; i++) {
    if(word[i]!=word[length - 1 - i]) {
        return 0;
    }
}
    return 1;
}",0
lchu848,1696667545,3,"int IsPalindrome(char *word)
{
int length = strlen(word);
for (int i = 0; i < length / 2; i++) {
    if(word[i]!=word[length - 1 - i]) {
        return 0;
    }
}
    return 1;
}",1
ldam917,1696673671,1,"#include <stdio.h>
#include <string.h>
int IsPalindrome(char *word)
{
    int length=strlen(word);
    for (int i=0;i<length/2;i++)
    {
        if (word[i]==word[length-i-1])
        {
            return 1;
        }
        else 
        {
            return 0;
        }
    }
}",0
ldam917,1696674095,2,"#include <stdio.h>
#include <string.h>
int IsPalindrome(char *word)
{
    int length=strlen(word);
    int ans;
    for (int i=0;i<length/2;i++)
    {
        if (word[i]==word[length-i-1])
        {
            ans=1;
        }
        else 
        {
            ans=0;
        }
    }
    return ans;
}
",0
ldam917,1696674483,3,"#include <stdio.h>
#include <string.h>
int IsPalindrome(char *word)
{
    int strlength=strlen(word);
    int ans=1;
    for (int i=0;i<strlength/2;i++)
    {
        if (word[i]!=word[strlength-i-1])
        {
            ans=0;
            break;
        }
    }
    return ans;
}",1
ldea753,1696667215,1,"int IsPalindrome(char *word)
{
    int i = 0;
    while (i < strlen(word)) {
        if (word[i] != word[strlen(word) - i - 1])
            return 0;
        i++;
    }
    return 1;
}
",1
ldou101,1696287620,1,"int IsPalindrome(char *word)
{
    for (int i  = 0; i < strlen(word)/2; i++) {
        if (word[i] == word[strlen(word)-1-i]) {
            continue;
        }
        else {
            return 0;
        }
    }
return 1;
}
",1
lfan827,1696805707,1,"int IsPalindrome(char *word)
{
    int l = strlen(word);
    int i, j;
    
    for (i = 0, j = (l - 1); i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1; 
    
}
",1
lgan833,1696456027,1,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	int i = 0;
	int j = length - 1;
	while (i < length) {
		if (word[i] == word[j]) {
			return 1;
		}
		else {
			return 0;
		}
		i++;
		j--;
	}
}
",0
lgan833,1696456631,2,"#include<string.h>
#include <stdio.h>
int IsPalindrome(char* word)
{
	int length = strlen(word);
	int i = 0;
	int j = length - 1;
	int result;
	while (i < length) {
		if (word[i] == word[j]) {
			result = 1;
		}
		else {
			result = 0;
			break;
		}
		i++;
		j--;
	}
	return result;

}
",1
lhal844,1696648408,1,"
int IsPalindrome(char* word)
{
	for (int i = 0;i < strlen(word)/2;i++)
	{
		if (word[i] != word[strlen(word) - i - 1])
		{
			return 0;
		}
	}
	return 1;
}
",1
lhua313,1696776140,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] = word[length - 1 - i])
        {
        return 1;
        }
    }
    return 0;
}
",0
lhua313,1696776595,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] != word[length - 1 - i])
        {
        return 0;
        }
    }
    return 1;
}",1
ljer106,1696696010,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{   
    int i = 0;
    int x = strlen(word); 
    
    while (i < x) {
        if (word[i] == word[x - 1]) {
            i++;
            x--; } 
        else {
            return 0; }
    }
    return 1; 
}
",1
ljon623,1696836970,1,"int IsPalindrome(char *word)
{
   	int length = strlen(word);

	for(int i=0; i < (length/2); i++) {
		
		if (word[i] != word[length - i - 1]) {
			return 0;
		}

	}
	

	
	return 1;
	 
}
",1
ljun123,1696836661,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    length == strlen(word);

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }
    return 1;
}
",0
ljun123,1696836848,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    length = strlen(word);

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }
    return 1;
}
",1
lkel942,1696451460,1,"int IsPalindrome(char *word)
{
    int length = 0;

while (word[length] != '\0') {
	length++;
}

for (int i = 0; i < length; i++) {
	if (word[i] != word[length - (i + 1)]) {
		return 0;
	}
}
return 1;
}
",1
llat663,1696805617,1,"
int IsPalindrome(char *word){
	
int length = strlen(word);

if (length <= 1);
return 1;

	for (int i = 0, j = length - 1; i < j; i++, j--) {
		if (word[i] != word[j]) {
			return 0;
		}

		return 1;

	}
}",0
llat663,1696826858,2,"int IsPalindrome(char *word){
	
int length = strlen(word);

	for (int i = 0, j = length - 1; i < j; i++, j--) {
		if (word[i] != word[j]) {
			return 0;
		}

		return 1;

	}
}",0
llat663,1696827140,3,"int IsPalindrome(char *word){
	
int length = strlen(word);

	for (int i = 0, j = length - 1; i < j; i++, j--) {
		if (word[i] != word[j]) {
			return 0;
		}
	}
return 1;
}",1
llei074,1696716455,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word) - 1;
    
    int ret = 1;
    
    while (i < strlen(word)) { 
        if (word[i] != word[j]) {
            ret = 0;
        }
        
        i++;
        j--;
        
    }  
    
    return ret;
}",1
lli393,1696298275,1,"int IsPalindrome(char *word)
{
	int i, wordlength;
    
	wordlength = strlen(word);
	for (i = 0; i < wordlength / 2; i++){
		if (word[i] != word[wordlength - 1 - i]){
			return 0;
		}
	}
	return 1;
}",1
llia622,1696776468,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length;
    while (word[i] != '\0') {
        i++;
        length = i;
    }
    for (i = 0; i < length; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",1
llig859,1696654097,1,"int IsPalindrome(char *word)
{
int length=strlen(word);
int i;
    for (i=0; i<length/2; i++) {
    if (word[i] != word[i+(length-i)] ){
        return 0;
    }   
        }
 return 1;
    
    }


 
    

",0
llig859,1696654587,2,"int IsPalindrome(char *word)
{
int length=strlen(word);
int i;
    for (i=0; i<length/2; i++) {
    if (word[i] != word[length-1-i] ){
        return 0;
    }   
        }
 return 1;
    
    }
 
    

",1
lliu182,1696668269,1,"int IsPalindrome(char *word)
{
    int last = strlen(word)-1;
for (int i = 0; i < last; i++) {
	if (word[i] != word[last]) {
		return 0;
	}
	last--;
}
return 1;
}
",1
lliu848,1696745065,1,"int IsPalindrome(char *word)
{  
	int length = strlen(word);

	//beginning of string
	int i = 0;
	//end of string
	int j = length - 1;

	while (i < j){

		if (word[i] == word[j]) {
			i++;
			j--;

		else {
			return 0;
		}
		
		}

	}
	return 1;
}
",0
lliu848,1696745234,2,"int IsPalindrome(char *word)
{  
	int length = strlen(word);

	//beginning of string
	int i = 0;
	//end of string
	int j = length - 1;

	while (i < j){

		if (word[i] == word[j]) {
			i++;
			j--;
		}
		else {
			return 0;
		}
		

	}
	return 1;
}
",1
llu744,1696742455,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i = 0;
    int j = length -1;

    for (i < j; i++, j--){
        if (str[i] != str[j]){
            return 0;
        }
    }
    return 1;
}
",0
llu744,1696742722,2,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int i = 0;
    int j = length - 1;

    for (; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}",1
lmen032,1696805652,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word){

    int i = 0;
    int length;

    length = strlen(word);
    for (i; i < length/2 ;) {
        length = length - i - 1;
        
        if (word[i] != word[length]){
            return 0;
        }
    i++;
    }
    return 1;
}",0
lmen032,1696805676,2,"int IsPalindrome(char *word){

    int i = 0;
    int length;

    length = strlen(word);
    for (i; i < length/2 ;) {
        length = length - i - 1;
        
        if (word[i] != word[length]){
            return 0;
        }
    i++;
    }
    return 1;
}",0
lmen032,1696806359,3,"int IsPalindrome(char *word){

    int i;
    int length;

    length = strlen(word);
    length = length - 1;
    for (i = 0; i < length/2; i++) {
        length = length - i;
        if (word[i] != word[length]){
            return 0;
        }
    }
    return 1;
}",0
lmen032,1696807252,4,"int IsPalindrome(char *word){

    int i;
    int length;

    length = strlen(word);
    length = length - 1;
    for (i = 0; i < length/2; i++) {
        if (word[i] != word[length - i]){
            return 0;
        }
    }
    return 1;
}",0
lmen032,1696807714,5,"int IsPalindrome(char *word){

    int i;
    int length;

    length = strlen(word);
    for (i = 0; i < length/2; i++) {
        if (word[i] != word[length - i - 1]){
            return 0;
        }
    }
    return 1;
}",1
lmor438,1696224993,1,"//AUTHOR:Lukem
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    
    int StringLength=strlen(word);
    char ReverseS[StringLength];
    int i;
    int Compare;
    
    
    for(i=0;i<StringLength;i++){
        
        ReverseS[StringLength-1-i]=word[i];
        
    }

   Compare=strcmp(word,ReverseS);
   
   if(Compare==0){
       
       return 1;
   }
   else{
       
       return 0;
   }


}   

",0
lmor438,1696813682,2,"//AUTHOR:Lukem
int IsPalindrome(char *word)
{
    
    int StringLength=strlen(word);
    int i;
    
    
    
    for(i=0;i<StringLength;i++){
        
        if( word[StringLength-1-i]!=word[i]){
            
            return 0;
            
        }
        
        
    }
 return 1;
}
",1
lpry623,1696213093,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;
    i = 0;
    j = length - 1;

    while (i < j) {
        if (word[i] != word[j]) {
            return 0;
        }
        i++;
        j--;
    }
    return 1;
}
",1
lrei069,1696461845,1,"int IsPalindrome(char *word)
{
  int length = strlen(word);
  int x = 0;
  for (int i = 0; i < length; i++) {
      if (word[i] == word[length - 1 - i]) {
          x = 1;
      } else {
          x = 0;
      }
  }
  return x;
}
",0
lrei069,1696461937,2,"int IsPalindrome(char *word)
{
  int length = strlen(word);
  int x = 0;
  for (int i = 0; i < length; i++) {
      if (word[i] == word[length - 1 - i]) {
          x = 1;
      } else {
          x = 0;
          return x;
      }
  }
  return x;
}
",1
lros711,1696297651,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word)
{
	int length;
	int n;
	int i;
	int j;

	length = strlen(word);

	i = 0;
	j = length - 1;

	while (word[i] != '\0') {
		if (word[i] == word[j]) {
			n = n + 1;
		}
		i++;
		j--;
	}

	if (n == length) {
		return 1;
	}
	else {
		return 0;
	}

}",0
lros711,1696322936,2,"int IsPalindrome(char *word)
{
    int i;
	int j;
	int l;

	l = strlen(word);

	i = 0;
	j = l - 1;

	while (word[i] != '\0') {
		if (word[i] != word[j]) {
			return 0;
		}
		i++;
		j--;
	}
	return 1;
}
",1
lrya284,1696376030,1,"int IsPalindrome(char *word)
{
    int str_len = strlen(word);
    int i = 0;
    int j = str_len - 1;
    
    while (i<j) {
        if (word[i] = word[j]) {
            int logic = 1;
            i++;
            j--;
        }
        else {
            int logic = 0;
        break;
        }
        }
}
}
",0
lrya284,1696376145,2,"int IsPalindrome(char *word)
{
    int str_len = strlen(word);
    int i = 0;
    int j = str_len - 1;
    
    while (i<j) {
        if (word[i] = word[j]) {
            int logic = 1;
            i++;
            j--;
        }
        else {
            int logic = 0;
        break;
        }
    }
    
    return logic;
}
",0
lrya284,1696376179,3,"int IsPalindrome(char *word)
{
    int str_len = strlen(word);
    int i = 0;
    int j = str_len - 1;
    
    while (i<j) {
        if (word[i] == word[j]) {
            int logic = 1;
            i++;
            j--;
        }
        else {
            int logic = 0;
        break;
        }
    }
    
    return logic;
}
",0
lrya284,1696376566,4,"int IsPalindrome(char *word)
{
    int str_len = strlen(word);
    int i = 0;
    int j = str_len - 1;
    int logic = 1;
    
    while ((i<str_len) && (logic == 1)) {
        if (word[i] == word[j]) {
            logic = 1;
        }
        else {
        logic = 0;
        }
        
        i++;
        j--;
    }
    return logic;
}
",1
lsal082,1696805748,1,"int IsPalindrome(char *word){
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++){
        if (word[i] != word[length - 1 - i])
        
            return 0;
    }
    
    return 1;
}

",1
lsen376,1696371438,1,"int IsPalindrome(char* word)
{
	int length = strlen(word) - 1;
	int equal[] = { 0 };

	for (int i = 0; i < length; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}
	
	return 1;
}",0
lsen376,1696371456,2,"int IsPalindrome(char* word)
{
	int length = strlen(word) - 1;

	for (int i = 0; i < length; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}
	
	return 1;
}",1
lsha172,1696809352,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int x, y;
    
    for (x = 0, y = length - 1; x < y; x++, y--) {
        if word[x] != word [y] {
            return 0;
        }
    }
    return 1;
}",0
lsha172,1696809556,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int x, y;
    
    for (x = 0, y = length - 1; x < y; x++, y--) {
        if word([x] != word [y]) {
            return 0;
        }
    }
    return 1;
}",0
lsha172,1696813972,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;
    
    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word [j]) {
            return 0;
        }
    }
    return 1;
}",1
lspu128,1696662024,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i , j;
    
    for(i = 0, j = length - 1 ; i < j ; i++, j--){
        if (word[i] != word[j]){
            return 0;
        
            
        }
    }
    return 1;
    
}",1
lsu376,1696297514,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
	int length = 0;
	while (word[length] != '\0') {
		length++;
	}
	int start = 0;
	int end = length - 1;

	while (start < end) {
		if (word[start] != word[end]) {
			return false;
		}
		start++;
		end--;
	}
	return true;
} 

",1
lsua311,1696817073,1,"int IsPalindrome(char *word)
{
   int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0;  
        }
    }

    return 1;     
}
",0
lsua311,1696817091,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0;  
        }
    }

    return 1;  
}
",1
ltan813,1696827419,1,"    int IsPalindrome(char *word)
{
    int i = 0;
    int j;
    int len;
    len = strlen(word);
    j = len - 1;
    int result = 1; // Assume it's a palindrome by default

    while (i <= j) {
        if (word[i] == word[j]) {
            i++;
            j--;
        }
        else {
            result = 0; // Not a palindrome
            break; // Exit the loop early
        }
    }
    return result;
}
",1
lvan346,1696672596,1,"int IsPalindrome(char *word)
{
	//get the length
	int length = 0; 
	while (word[length] != '\0') {
		length++;
	}
	//return length;


	int j = length - 1;

	for (int i = 0; i < length/2; i++) {

		if (word[i] != word[j]) {
			return 0;
		}
		j--;
	}
	return 1;
}
",1
lvin900,1696741012,1,"int IsPalindrome(char *word)
{
   	int stronk = strlen(word);
	int i;
	int TF;

	for (i = 0; i < stronk; i++) {
		if (word[i] == word[stronk - 1 - i]) {
			TF = 1;
		}
		else if (word[i] != word[stronk - 1 - i]) {
			TF = 0;
			return TF;
		}
	}
	return TF;
} 
}
",0
lvin900,1696741327,2,"int IsPalindrome(char *word)
{
   	int stronk = strlen(word);
	int i;
	int TF;

	for (i = 0; i < stronk; i++) {
		if (word[i] == word[stronk - 1 - i]) {
			TF = 1;
		}
		else if (word[i] != word[stronk - 1 - i]) {
			TF = 0;
			return TF;
		}
	}
	return TF;
} ",1
lwer802,1696844287,1,"#include <string.h>

int IsPalindrome(const char *str) {
    int len = strlen(str);
    for(int i = 0; i < len / 2; i++) {
        if(str[i] != str[len - 1 - i]) {
            return 0; // False: It's not a palindrome
        }
    }
    return 1; // True: It's a palindrome
}

int main() {
    char word1[100] = ""a"";
    printf(""%d\n"", IsPalindrome(word1));

    char word2[100] = ""abbc"";
    printf(""%d\n"", IsPalindrome(word2));

    return 0;
}
",0
lwer802,1696844309,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *str) {
    int len = strlen(str);
    for(int i = 0; i < len / 2; i++) {
        if(str[i] != str[len - 1 - i]) {
            return 0; // False: It's not a palindrome
        }
    }
    return 1; // True: It's a palindrome
}

int main() {
    char word1[100] = ""a"";
    printf(""%d\n"", IsPalindrome(word1));

    char word2[100] = ""abbc"";
    printf(""%d\n"", IsPalindrome(word2));

    return 0;
}
",0
lwer802,1696844399,3,"#include <string.h>

int IsPalindrome(const char *str) {
    int len = strlen(str);
    for(int i = 0; i < len / 2; i++) {
        if(str[i] != str[len - 1 - i]) {
            return 0; // False: It's not a palindrome
        }
    }
    return 1; // True: It's a palindrome
}
",1
lwon290,1696643073,1,"int IsPalindrome(char *word)
{
    for (int i = 0; i < strlen(word); i++) {
        if(word[i] != word[strlen(word) - i - 1]){
            return 0;
        }
    }
    
    return 1;
}",1
lyou975,1696242852,1,"int IsPalindrome(char *word)
{
        int length = strlen(word);
    int not = 0;
    for (int i = 0; i < length; i++){

        if (word[i] != word[length - 1 - i]) {

           not = 1;
           break;
        }
    }

    if (not) {
        return 0;
       }
       else {
        return 1;
       }
}
",1
mabb997,1696211580,1,"int IsPalindrome(char *word)
{
	int length;
	length = strlen(word);

	int  i, j;
	char flipped[length];
	j = 0;
	for (i = length - 1; i >= 0; i--) {
		flipped[j] = word[i];
		j = j + 1;
	}

	if (strcmp(word, flipped) == 0) {
		return 1;
	}

	else {
		return 0;
	}

}
",0
mabb997,1696212906,2,"int IsPalindrome(char *word)
{
	int length;
	length = strlen(word);

	int  i, j;
	char flipped[100] = {0};
	j = 0;
	for (i = length - 1; i >= 0; i--) {
		flipped[j] = word[i];
		j = j + 1;
	}

	if (strcmp(word, flipped) == 0) {
		return 1;
	}

	else {
		return 0;
	}

}
",1
mahu925,1696213012,1,"int IsPalindrome(char *word){
    char reversed[100] = """";
    int length,i = 0;
    length = strlen(word);
    for(i=0; i<=length; i++){
        reversed[i] = word[length-1-i];
    }
    if (strcmp(word,reversed) != 0){
        return 0;
    }
    return 1;
}",1
mbah279,1696751116,1,"int IsPalindrome(char *word) {
    int len = strlen(word);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }
    
    return 1; 
}",1
mbal759,1696302546,1,"int IsPalindrome(char *word)
{
    int i;
    for (i=0; i<strlen(word); i++)
    {
        if (word[i] != word[strlen(word)-1-i])
        {
            return 0;
        }
    }
    return 1;
}",1
mboy221,1696206556,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int count = 0;
    while (word[i] != '\0') {
        i++;
    }
    if (i == 0) {
        return 0;
    }
    for (int j = 0; j<i; j++) {
        if (word[j] == word[i-j-1]) {
            count++;
        }
    }
    if (count == i) {
        return 1;
    } else {
        return 0;
    }
}
",1
mbut885,1696623946,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i = 0;

    for (i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;    
}
",1
mcam799,1696679422,1,"int IsPalindrome(char *word)
{
    //Find length of palindrome
int length = strlen(word);

int i = 0;

while (i < length) {
	if (word[i] != word[length - 1 - i]) {
		return 0; 
	
	}
	return 1; 
}
}
",0
mcam799,1696679659,2,"int IsPalindrome(char *word)
{
//Find length of palindrome
int length = strlen(word);

int i = 0;

while (i < length) {
    
	if (word[i] != word[length - 1 - i]) {
		return 0; 
	}
}
return 1;

}
",0
mcam799,1696680028,3,"int IsPalindrome(char *word)
{
 //Find length of palindrome
int length = strlen(word);

int i = 0;

while (i <= length) {
	if (word[i] != word[length - 1 - i]) {
		return 0; 

	
	}
	i++; 
}
return 1;   
}
",1
mcha833,1696417227,1,"#include <stdlib.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length, i;
    int count = 0;
    length = strlen(word);
    
    for(i=0; i<length; i++){
        if(word[i] == word[length-1-i]){
            count = count + 1;
        }
    }

    if(count == length){
        return 1;
    }
    else{
        return 0;
    }
}",1
mcha876,1696827106,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i += 1, j -= 1) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}
",1
mche403,1696661142,1,"int IsPalindrome(char *word)
{ int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
        }
    }

    return 1;
    
}
",1
mcro807,1696763921,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i = length; i++){
        for(int j = length - 1; j < 0; j--){
            while (i<=j){
                if(word[i] == word[length - 1 - i]){
                   int a = 1;
                    return a;
                }
            }
        }
    }
     return 0;
}
",0
mcro807,1696764599,2,"int IsPalindrome(char *word){
 int length = strlen(word);
    for (int i = 0; i = length - 1; i++){
        if(word[i] == word[length - i]){
                   int a = 1;
                    return a;
                }
            }
        
    
     return 0;
}
",0
mcro807,1696764714,3,"int IsPalindrome(char *word){
 int length = strlen(word);
    for (int i = 0; i = (length - 1); i++){
        if(word[i] == word[length - i]){
                   int a = 1;
                    return a;
                }
            }
        
    
     return 0;
}
",0
mcro807,1696764758,4,"int IsPalindrome(char *word){
 int length = strlen(word);
    for (int i = 0; i <= (length - 1); i++){
        if(word[i] == word[length - i]){
                   int a = 1;
                    return a;
                }
            }
        
    
     return 0;
}
",0
mcro807,1696765171,5,"int IsPalindrome(char *word){
 int length = strlen(word);
    for (int i = 0; i <=length; i++){
        for(int j = length - 1; j <=0; j--){
            while (i<=j){
                if(word[i] == word[length - 1 - i]){
                   int a = 1;
                    return a;
                }
            }
        }
    }
     return 0;
}
",0
mcro807,1696765606,6,"int IsPalindrome(char *word){
 
 int length = strlen(word);
    for (int i = 0; i <= length - 1; i++){
        if(word[i] == word[length - 1 - i]){
                   int a = 1;
                    return a;
                }
            }
        
    
     return 0;
}
",0
mcro807,1696766043,7,"int IsPalindrome(char *word){
 
 int length = strlen(word);
    int i = 0;
        if(word[i] == word[length - 1 - i]){
                   int a = 1;
                    return a;
                }
            
        
    
     return 0;
}
",0
mcro807,1696767155,8,"int IsPalindrome(char *word){
 
 int length = strlen(word);
    for (int i = 0; i < length; i++)
    if(i != (length - 1 - i)){
        if(word[i] == word[length - 1 - i]){
                   int a = 1;
                    return a;
                }
            
    }
    if(length = 1){
        return 1;
    }
     return 0;
}
",0
mcro807,1696767186,9,"int IsPalindrome(char *word){
 
 int length = strlen(word);
    for (int i = 0; i < length; i++)
    if(i != (length - 1 - i)){
        if(word[i] == word[length - 1 - i]){
                   int a = 1;
                    return a;
                }
            
    }
    if(length == 1){
        return 1;
    }
     return 0;
}
",0
mcro807,1696767447,10,"int IsPalindrome(char *word){
 
  int length = strlen(word);
    
    if (word[0] != word[length - 1]){
        return 0;
    }
    
    for (int i = 0; i < length; i++){
    
    if(i != (length - 1 - i)){
        if(word[i] == word[length - 1 - i]){
                   int a = 1;
                    return a;
                }
            
    }
    }
    if(length = 1){
        return 1;
    }
     return 0;
}
",0
mcro807,1696767596,11,"int IsPalindrome(char *word){
 
  int length = strlen(word);
    
    if (word[0] != word[length - 1]){
        return 0;
    }
    
    for (int i = 0; i < length; i++){
    
    if(i != (length - 1 - i)){
        if(word[i] == word[length - 1 - i]){
                   int a = 1;
                    return a;
                }
            
    }
    }
    if(length <= 1){
        return 1;
    }
     return 0;
}
",0
mcro807,1696767764,12,"int IsPalindrome(char *word){
 
  int length = strlen(word);
    
    if (word[0] != word[length - 1]){
        return 0;
    }
    
    for (int i = 0; i < length; i++){
    
    if(i != (length - 1 - i)){
        if(word[i] != word[length - 1 - i]){
                   int a = 0;
                    return a;
                }
            
    }
    }
    if(length <= 1){
        return 1;
    }
     return 1;
}
",1
mdav506,1696235678,1,"int IsPalindrome(char* word)
{
    int length = strlen(word);

    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }

    return 1;
}",1
mdea492,1696721898,1,"int IsPalindrome(char *word)
{ 
   int a=strlen(word);
    char copyword[100];
    strcpy(copyword,word);

     for (int i=0;i<a/2;i++){
        int tempo = (copyword)[i];
      
        copyword[i]=copyword[a-i-1];
        copyword[a-i-1] = tempo;
        
    }
    if (strcmp(word,copyword)==0)
        {return 1;}
    else
    {return 0;}
}
",1
mfle888,1696725007,1,"int IsPalindrome(char *word) {

int i = 0;
int length = strlen(word);

for (i = 0; i < length / 2; i++) {
    if (word[i] == word[length - i - 1]) {
        return 1;
    }
return 0;
}",0
mfle888,1696725361,2,"int IsPalindrome(char *word) {

int length = strlen(word);

for (int i = 0; i < length / 2; i++) {
    if (word[i] == word[length - i - 1]) {
        return 1;
    }

} 

return 0;

}",0
mfle888,1696725675,3,"int IsPalindrome(char *word) {

int length = strlen(word);

for (int i = 0; i < length / 2; i++) {
    if (word[i] != word[length - i - 1]) {
        return 0;
    }

} 

return 1;

}
",1
mfuj750,1696297750,1,"int IsPalindrome(char* word)
{
	int length = 0;
	char inversedArray[100] = {'\0'};

	while (word[length] != '\0') {
		length++;
	}

	int k = 0;
	for (int j = length - 1; j >=0; j--) {
		inversedArray[k] = word[j];
		k++;
	}

	printf(""%s %s "", word, inversedArray);

	if (strcmp(word, inversedArray) == 0) {
		return 1;
	}

	return 0;
	
}",0
mfuj750,1696297836,2,"int IsPalindrome(char* word)
{
	int length = 0;
	char inversedArray[100] = {'\0'};

	while (word[length] != '\0') {
		length++;
	}

	int k = 0;
	for (int j = length - 1; j >=0; j--) {
		inversedArray[k] = word[j];
		k++;
	}

	if (strcmp(word, inversedArray) == 0) {
		return 1;
	}

	return 0;
	
}",1
mger154,1696223105,1,"int IsPalindrome(char *word)
{
    int i;
    int length = strlen(word);
    char stringA[length];
    char stringB[length];

    for (i = 0; i < length; i++) {
        stringA[i] = word[i];    
    }
    for (i = 0; i < length; i++) {
        stringB[i] = word[length - 1 -i];    
    }
    stringA[length] = '\0';
    stringB[length] = '\0';

    if (strcmp(stringA, stringB) == 0) {
        return 1;
    } else {
        return 0;
    }
}",1
mgoy303,1696243623,1,"int IsPalindrome(char *word)
{
    for (int i = 0; i < strlen(word) / 2; i++) {
        if (word[i] != word[strlen(word) - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
mgua740,1696773153,1,"int IsPalindrome(char *word)
{ int length = strlen(str);
    int i = 0;
    for (i; i < length / 2; i++) {
        if (str[i] != str[length - 1 - i]) {
            return 0;  
        }
    }
    return 1; 
    
}
",0
mgua740,1696773305,2,"int IsPalindrome(char *word)
{ int length = strlen(word);
     for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;  
        }
    }
    return 1; 
    
}
",1
mhua821,1696742274,1,"int IsPalindrome(char *word) {
    int length, i, midpoint;
    length = strlen(word);

    midpoint = length/2;
    for (i = 0; i < midpoint; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}
",1
mjun868,1696729873,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int length(char *word)
{
    int i = 0;
    while (word[i] != '\0')
    {i++;
    }
    return i;
}

int IsPalindrome(char *word)
{
    int word_length = length(word);
    for (int i = 0; i <= word_length/2; i++){
        if (word[i] != word[word_length - 1 - i]){
            return 0;
        }
    }
    return 1;
}",1
mkab524,1696758767,1,"int IsPalindrome(char* word)
{
	int i = 0;
	int length = strlen(word);

	for (i = 0; i < length; i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	return 1;
}",1
mkaj411,1696297603,1,"int IsPalindrome(char *word)
{
    int length; 
length = strlen(word);  
int i=0;
int j=length-1; 
while (i<=j) {
	if (word[i] == word[j]) {
		i++;
		j--;
		return 1; 
	}
	else {
		return 0; 
	}
}
}
",0
mkaj411,1696298781,2,"int IsPalindrome(char* word)
{   
	int length; 
	length = strlen(word);  
    int i; 
	int x=0; 
	for (i=0; i<length; i++){
		if (word[i] != word[length-1-i]) {
			return 0; 
		}
		else {
			x = 1; 
		}
	} 
	return x; 
}
",1
mkee115,1696301974,1,"int IsPalindrome(char *word)
{
    int i;
    int j;
    int length;
    
    j = strlen(word) - 1;
    length = strlen(word);
    
    for (i=0; i<length; i++, j--)
    {
        if (word[i] != word[j])
        {
            return 0;
        }
    }
    
    return 1;
}",1
mken566,1696458149,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length;
    while (word[i] != '\0')
    {
        i++;
    }
    length = i;
    
    int b;
    int x = 0;
    char backwards[length + 1];
    for (b = length - 1 ; b >= 0; b--)
    {
        backwards[x] = word[b];
        x++;
    }
    
    int result;
    result = strcmp(word, backwards);
    if (result == 0)
    {
        return 1;
    }
    return 0;
}
",0
mken566,1696459350,2,"int IsPalindrome(char *word)
{
    int i = 0;
    int length;
    while (word[i] != '\0')
    {
        i++;
    }
    length = i;
    
    int b;
    int x = 0;
    char backwards[length + 1];
    for (b = length - 1 ; b >= 0; b--)
    {
        backwards[x] = word[b];
        x++;
    }
    
    backwards[x] = '\0';
    
    int result;
    result = strcmp(word, backwards);
    if (result == 0)
    {
        return 1;
    }
    return 0;
}
",1
mket106,1696836531,1,"int IsPalindrome(char *word) {
    int i, length;
    int palindrome = 1;

    length = strlen(word);

    for (i = 0; i < length/2; i++) {
        if (word[i] != word[(length - 1) - i]) {
            palindrome = 0;
        }
    }  

    printf(""%d \n"", palindrome);

    return 0;
}
",0
mket106,1696836742,2,"int IsPalindrome(char *word) {
    int i, length;
    int palindrome = 1;

    length = strlen(word);

    for (i = 0; i < length/2; i++) {
        if (word[i] != word[(length - 1) - i]) {
            palindrome = 0;
        }
    }  

    return palindrome;
}
",1
mkim670,1696415490,1,"int IsPalindrome(char* word)
{
	int i, length;

	length = strlen(word);
	
	for (i = 0; i < (length / 2); i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}

	return 1;
}",1
mkim719,1696634423,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i=0 ; i<length/2 ; i++)
    {
        if (word[i] != word[length -1 -i])
        {
            return 0;
        }
    }
    return 1;
}",1
mlal864,1696823258,1,"int IsPalindrome(char *word) {
    int len = len(word);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}",0
mlal864,1696823269,2,"int IsPalindrome(char *word) {
    int len = strlen(word);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}",1
mlaw649,1696818529,1,"int IsPalindrome(char *word) 

{
    // Find the length of the input string using strlen function
    int stringLength;
    stringLength = strlen(word);

    // set reversed variable and make it 1 longer than input stringLength
    // so it has room for \n
    char reversed[stringLength + 1]; 
    
    // set the letters of the input string into the reversed variable
    strcpy(reversed, word);

    int start = 0;
    int end = stringLength - 1;

    while (start < end) {
        // Swap character elements from start with end elements
        // using a temp variable
        char temp = reversed[start];
        reversed[start] = reversed[end];
        reversed[end] = temp;

        start++;
        end--;
    }

    // Compare input string with reversed string
    if (strcmp(word, reversed) == 0) {
        // palindrome
        return 1;
    } else {
        // not a palindrome
        return 0; 
    }
}

",1
mle063,1696555926,1,"int IsPalindrome(char *word)
{
    int TotalPos;
    int i;
    
    TotalPos = 0;
    while (word[TotalPos] != '\0') {  //Check array's length
       TotalPos++;
    }  
    
    
    for (i = 0; i < TotalPos; i++){ // Check if the 2 extreme char are the same or not
        if (word[i] != word[TotalPos - 1 - i]){ // If 2 char are different, it is not Palindrome
            return 0;
        }
    } 
    return 1;
}",1
mlin729,1696230638,1,"int IsPalindrome(char *word) {

int length = strlen(word);

for (int i = 0; i < length / 2; i++) {
    if (word[i] != word[length - 1 - i]) {
        return 0;  // Not a palindrome
        }
    }
return 1; 
}
",1
mloh302,1696210527,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
mmak111,1696832563,1,"int IsPalindrome(char *word)
{
	for (int i = 0; i < strlen(word); i++) {
		if (word[i] != word[strlen(word)-(i+1)]) {
			return 0;
		}
	}
	return 1;
	
}
",1
mman402,1696627975,1,"int IsPalindrome(char *word)
{
    int length,i,j;

    length= strlen(word);
    j=length-1;
    
    for(i=0;i<length/2;i++)
    {
        if (word[i]!=word[j])
        {
            return 0;
        }
       j--;
    }
    return 1;
}
",1
mman808,1696684790,1,"int IsPalindrome(char *word){
    for (int i = 0, j = strlen(word) - 1; i <= strlen(word) && j >= 0; i++, j--){
        if (word[i] != word[j]){
            return 0;
        }
    }
    return 1;
}",1
mmas199,1696823110,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word)
{
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] != word[length - i - 1]) 
        {
            return 0;
        }
    }
    return 1;
}
",1
mmca276,1696674374,1,"int IsPalindrome(char *word)
{
    int i ;
    int count = 1;
int length = strlen(word) ;
for(i =0; i < length/2; i++)  {
    if (word[i] == word[(length-i-1)]) {
        count = count*1 ;
    }
        else {
        count = count*0 ;
        }
}
if (count == 1) {
    return 1 ;
}
else{
    return 0 ;
}
}",1
mmcg745,1696376350,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(str);
    int j = length-1; 
    
    
    while (i < j)
        if (str[i] == str[j]){
             i++;
             j--;
        
        }
        else return 0;
         
    
     return 1;
}
",0
mmcg745,1696376480,2,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    int j = length-1; 
    
    
    while (i < j)
        if (word[i] == word[j]){
             i++;
             j--;
        
        }
        else return 0;
         
    
     return 1;
}
",1
mmoh314,1696840219,1,"int IsPalindrome(char* word)
{
	int i = 0;
	int temp, length;
	length = strlen(word);
	char reverseWord[100];

	while ((length - i) >= i)
	{
		temp = word[i];
		reverseWord[i] = word[(length - i)];
		reverseWord[(length - i)] = temp;
		i++;
	}

	if (strcmp(word, reverseWord) == 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}",0
mmoh314,1696841656,2,"int IsPalindrome(char* word)
{
	int i = 0;
	int length;
	length = strlen(word);
	length--;
	char reverseWord[100];

	while ((length - i) >= i) 
	{
		reverseWord[(length - i)] = word[i];
		reverseWord[i] = word[(length - i)];
		i++;
	}

	reverseWord[length + 1] = '\0';

	if (strcmp(word, reverseWord) == 0)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}",1
mmoh456,1696622651,1,"int IsPalindrome(char *word)
{
    int i;
	i = 0;
	int len = strlen(word);
	int max = (len - 1);

	for (i = 0; i < len/2; i++) {
		if (word[i] != word[max - i]){
			return 0;
}

}
return 1;
}

",1
mnay503,1696735748,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome( char *word) 
{
    int length = strlen(word);

    
    for (int i = 0, j = length - 1; i < j; i++, j--) 
    {
        if (word[i] != word[j]) 
        {
            
            return 0; 
        }
    }

   
    return 1; 
}
",1
mnic190,1696838458,1,"int IsPalindrome(char *word){
    char word_backwards[100];
    int Correct = 1;
    int length = strlen(word);
    for (int i = 0; i <= length; i++) {
        word_backwards[i] = word[length-i-1];
    }
    for (int j = 0; j <= length; j++) {
        if (word_backwards[j] != word[j]) {
            Correct = 0;
            break;
        }
    }
    if (Correct == 1) {
        return 1;
    } else {
        return 0;
    }
}

",1
moco678,1696730406,1,"int IsPalindrome(char* String)
{
	int Length = strlen(String);
	int i, j;

	for (i = 0, j = Length - 1; i < j, i++, j--;)
	{
		if (String[i] != String[j]) {
			return 0;
		}

	}
	return 1;
}",0
moco678,1696730420,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* String)
{
	int Length = strlen(String);
	int i, j;

	for (i = 0, j = Length - 1; i < j, i++, j--;)
	{
		if (String[i] != String[j]) {
			return 0;
		}

	}
	return 1;
}",0
moco678,1696730536,3,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* String)
{
	int Length = strlen(String);
	int i, j;

	for (i = 0, j = Length - 1; i < j; i++, j--)
	{
		if (String[i] != String[j]) {
			return 0;
		}

	}
	return 1;
}",1
mpar342,1696835216,1,"int IsPalindrome(char *word) 
{
    int len = strlen(word);
    for (int i = 0; i < len / 2; i++) 
    {
        if (word[i] != word[len - i - 1]) 
        {
            return 0;
        }
    }
    return 1; 
}",1
mpat501,1696292649,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) ;
	char placeholder[100];
	int i=length-1, j=0;

	while (i>=0) {
		while (j<=length){
			placeholder[j] = word[i] ;
			j++;
			i--;
		}
	}

	int a = strcmp(word, placeholder);

	if (a==0){
		return 1;
	}
	return 0;
}
",1
mpey262,1696229081,1,"int IsPalindrome(char *word)
{
    int i = strlen(word), f = 1, j = 0;
    for (j; j < i/2; j++) {
        if (word[j] != word[i-j-1]) {
            f = 0;
        }
    }
    return f;
    
}
",0
mpey262,1696326527,2,"int IsPalindrome(char *word)
{
    int i = strlen(word)-1, f = 1, j = 0;
    for (j; j < i/2; j++) {
        if (word[j] != word[i-j]) {
            f = 0;
        }
    }
    return f;
}

",0
mpey262,1696404469,3,"int IsPalindrome(char *word)
{
    int i = strlen(word), f = 1, j = 0;
    for (j; j < i; j++) {
        if (word[j] != word[i-j-1]) {
            f = 0;
        }
    }
    return f;
}

",0
mpey262,1696654743,4,"int IsPalindrome(char *word) {
    int i = strlen(word), f = 1;
    for (int j = 0; j < i; j++) {
        if (word[j] != word[i-j-1]) {
            f = 0;
        }
    }
    return f;
}

",1
mran851,1696757712,1,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	int i, j;

	for (i = 0, j = length - 1; i < j; i++, j--) {
		if (word[i] != word[j]) {
			return 0;
		}
	}
	return 1;
}
",1
mris618,1696383909,1,"int IsPalindrome(char *word)
{
      int length = strlen(word);
  int i, j;

  for (i = 0, j = length - 1; i < j; i++, j--) {
      if (word[i] != word[j]) {
          return 0;
      }
  }

  return 1;
}
",1
mris618,1696383947,2,"int IsPalindrome(char *word)
{
      int length = strlen(word);
  int i, j;

  for (i = 0, j = length - 1; i < j; i++, j--)
  {
      if (word[i] != word[j])
      {
          return 0;
      }
  }

  return 1;
}
",1
mrog757,1696468710,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    int j = length-1;
    int i = 0;
    while (i < length-1) {
        if (word[i] != word[j]) {
            return 0;
        }
        i++;
        j--;
        
    }
    return 1;
}
",1
mron793,1696730927,1,"int IsPalindrome(char *word)
{
  int i = 0; 
   int j = strlen(word);

   while (i < j)
   {
        if (word[i] != word[j-1])
        {
            return 0;
        }
        else 
        {
            return 1;
        }
    i++;
    j--;

   }
  
}
",0
mron793,1696731464,2,"int IsPalindrome(char *word)
{
   int i = 0; 
   int j = strlen(word);
    if (j > 1)
    {
        while (i < j)
        {
            if (word[i] != word[j-1])
            {
                return 0;
            }
            else 
            {
                return 1;
            }
        i++;
        j--;
        }
    }
    else
    {
        return 1;
    }
}",0
mron793,1696732568,3,"int IsPalindrome(char *word)
{
   int i = 0; 
   int j = strlen(word);
   
    if (j > 1)
    {
        while (i < j)
        {
            if (word[i] != word[j-1])
            {
                return 0;
            }
            
        i++;
        j--;

        }
        return 1;
    }
    else
    {
        return 1;
    }
}",1
mshi672,1696731512,1,"int IsPalindrome(char *word)
{
    char backward[100];
	int i;
	int j = 0;

	for (i = strlen(word)-1; i >= 0; i--)
	{
		backward[j] = word[i];
		j = j + 1;
	}

	backward[strlen(word)] = '\0';

	if (strcmp(word, backward) == 0)
		return 1;
	else
		return 0;

}
",1
msil440,1696830853,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length - 1;
    
    while (beginning < ending)
    {
        if (word[beginning] != word[ending])
        {
            return 0; //Is not a palindrome
        }
    
    beginning++;
    ending--;
    }
    
    return 1; //Is a palindrome
}
",0
msil440,1696830880,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    int beginning = 0;
    int ending = length - 1;
    
    while (beginning < ending)
    {
        if (word[beginning] != word[ending])
        {
            return 0; //Is not a palindrome
        }
    
    beginning++;
    ending--;
    }
    
    return 1; //Is a palindrome
}
",1
msin609,1696727059,1,"int IsPalindrome(char *word)
{
    int len;
	int i;
	int j = 0;
	char revstr[100];
	len = strlen(word);
	for (i = len - 1; i >= 0; i--) {
		revstr[j] = word[i];
		j++;
	}
	for (i = 0; i < len; i++) {
		if (revstr[i] != word[i]) {
			return 0;
		}
	}
	return 1;
}
",1
msu975,1696368389,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int IsPalindrome(char* word)
{
	int i = 0;
	int length;

	length = strlen(word);

	int i1 = length;

	for (i = 0; i < length; i++) {
		i1--;
		if (word[i] != word[i1]) {
			return 0;
		}
		else {
			return 1;
		}
	}

}
",0
msu975,1696368824,2,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int IsPalindrome(char* word)
{
	int i = 0;
	int length;

	length = strlen(word);

	int i1 = length;

	for (i = 0; i < length; i++) {
		i1--;
		if (word[i] != word[i1]) {
			return 0;
		}
	}
	return 1;
}
",1
msuv992,1696390794,1,"int IsPalindrome(char *word)
{
    int length;
    int i; /* where i is the index*/
    
   length = strlen(word);
    
    
    if (length == 1 ) {
        return 1;
    }
    
     for ( i = 0 ; i < length / 2; i++) {
    
         if ( word[i] != word[length - i - 1]){
             return 0;
         }
    }

return 1; 
}

",1
mtam709,1696844674,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int i = 0;
    int j = length - 1;
    int same = 1;
    
    while (i < j) {
        if (word[i] != word[j]){
            return 0;
        } 
        
        i++;
        j--;
    }
    return 1;
}

",0
mtam709,1696844687,2,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int i = 0;
    int j = length - 1;
    
    while (i < j) {
        if (word[i] != word[j]){
            return 0;
        } 
        
        i++;
        j--;
    }
    return 1;
}

",1
mtha724,1696308189,1,"int IsPalindrome(char *word)
{
    int palindrome = 1;
    for (int i = 0; i < strlen(word); i++){
        if (word[i] != word[strlen(word) - i-1]){
            palindrome = 0;
            return palindrome;
        }
    }
    return palindrome;
}
",1
mtob213,1696755343,1,"int IsPalindrome(char *word)
{
    int i, length = strlen(word) - 1;
    
    for(i = length; i >= length / 2; i--){
        if (word[i] != word[length - i]){
            return 0;
        }
    }
    return 1;
}
",1
mwan364,1696223603,1,"int IsPalindrome(char *word)
{
	int wordLength = strlen(word), i, j;
	/*index through the string in two directions; from start to middle with i and from end - 1 with j
	(as we exclude null character) to the middle. i and j should meet in the middle of string.
	*/
	for (i = 0, j = wordLength - 1; i < j; i++, j--) { 
		if (word[i] != word[j]) {
			return 0;
		} 
		else {
			return 1;
		}
	}
}",0
mwan364,1696231636,2,"int IsPalindrome(char *word)
{
	int wordLength = strlen(word), i, j = 0;
	/*index through the string in two directions; from start to middle with i and from end - 1 with j
	(as we exclude null character) to the middle. i and j should meet in the middle of string.
	*/
	for (i = wordLength-1; i >= wordLength/2 ; i--) {
		if (word[i] != word[j]) {
			return 0;
		} 
		j++;
	}
	return 1;
}",1
myou984,1696303176,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int j = length - 1;
    int count = 0;
    for (int i = 0; i < length; i++) {
        if (word[i] == word[j]) {
            count++;
            j--;
        }
    }

    if (count == length) {
        return 1;
    } else {
        return 0;
    }
}

",1
nabr105,1696394358,1,"int IsPalindrome(char *word)
{
    int word_len = strlen(word); 
    
    for (int i = 0, j = word_len-1; i < word_len; i++, j--) 
    {
        if (word[i] != word[j]) {
            return 0; 
        } 
    }
    
    return 1;
}",1
nalg484,1696736790,1,"#include <stdio.h>
#include <string.h>
 int IsPalindrome(char *word)
{
int length = strlen(word);
for (int i = 0; i < length / 2; i++){
 if (word[i] != word[length - 1 - i]) {
            return 0;
}
}
return 1;
}
",1
nask472,1696402359,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    for( int i = 0; i < length/2; i++) {
      if (word[i] != word[length -1 -i]){
        return 0;
      }
    }
return 1;
}   
}
",0
nask472,1696402440,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    for( int i = 0; i < length/2; i++) {
      if (word[i] != word[length -1 -i]){
        return 0;
      }
    }
return 1;
}
",1
ncha509,1696207151,1,"int IsPalindrome(char *word){
    int length=strlen(word);
    char new_word[length];
    int i;
    
    for(i=0;i<length;i++){
        new_word[i]= word[length-1-i];
    }
    if (strcmp(word,new_word)==0){
        return 1;
    }else{
        return 0;
    }
}
",0
ncha509,1696207595,2,"int IsPalindrome(char *word){
    int length=strlen(word);
    char new_word[length];
    int i;
    
    for(i=0;i<length;i++){
        new_word[i]= word[length-1-i];
    }
    if (strcmp(new_word,word)==0){
        return 1;
    }else{
        return 0;
    }
}
",0
ncha509,1696301025,3,"int IsPalindrome(char *word){
    int length=strlen(word);
    char new_word[length];
    int i;
    int same_letter=0;
    int true=1;
    int false=0;
    
    for(i=0;i<length;i++){
        new_word[i]= word[length-1-i];
    }
    for(i=0;i<length;i++){
        if (new_word[i]==word[i]){
            same_letter++;
    }
}
    if (same_letter==length){
        return true;
    }else{
        return false;
    }
}
",0
ncha509,1696301073,4,"int IsPalindrome(char *word){
    int length=strlen(word);
    char new_word[length];
    int i;
    int same_letter=0;
    int i=1;
    int j=0;
    
    for(i=0;i<length;i++){
        new_word[i]= word[length-1-i];
    }
    for(i=0;i<length;i++){
        if (new_word[i]==word[i]){
            same_letter++;
    }
}
    if (same_letter==length){
        return i;
    }else{
        return j;
    }
}",0
ncha509,1696301105,5,"int IsPalindrome(char *word){
    int length=strlen(word);
    char new_word[length];
    int i;
    int same_letter=0;
    int l=1;
    int j=0;
    
    for(i=0;i<length;i++){
        new_word[i]= word[length-1-i];
    }
    for(i=0;i<length;i++){
        if (new_word[i]==word[i]){
            same_letter++;
    }
}
    if (same_letter==length){
        return l;
    }else{
        return j;
    }
}",1
ndas832,1696459670,1,"int IsPalindrome(char *word)
{
    int i; 
    int length = strlen(word); 
    for (i=0; i<length/2; i++) {
        //Check if the starting character is equal to the end character 
        if (word[i] != word[length-1-i]) {
            return 0; //Not a Palindrone 
        }
    }
    return 1; //Is a Palindrone  
}
",1
ndso791,1696651621,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    size_t len = strlen(word);
    int r = len % 2; 

    if (r == 1 && len != 1) 
    {
        return 0;
    }
    else
    {
        for (int i = 0; i < len / 2; i++) 
        {
            int check = (word[i] == word[len - i - 1]);
            if (check == 0)
            {
                return 0;
            }
        }
        return 1;
    }
}
",0
ndso791,1696652142,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) 
{
    int len = strlen(word);
    int left = 0;
    int right = len - 1;

    while (left < right) 
    {
        while (left < right && isspace(word[left])) 
        {
            left++; 
        }
        while (left < right && isspace(word[right])) 
        {
            right--;
        }

        if (tolower(word[left]) != tolower(word[right])) 
        {
            return 0;
        }
        left++;
        right--;
    }

    return 1;
}
",1
ngam724,1696424759,1,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	int i = 0;
	int j = length - 1;
	while (i<j) {
			if (word[i] != word[j]) {
				i++;
				j--;
				return 0;
			}
	}
	return 1;
}",0
ngam724,1696425231,2,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	int i = 0;
	int j = length - 1;
	while (i<j) {
			if (word[i] != word[j]) {
				return 0;
			}
			i++;
			j--;
	}
	return 1;
}",1
ngan146,1696494961,1,"#include <stdio.h>



int IsPalindrome(char *word)
{
    int i = 0;
    int count = 0;
    count = strlen(word);
    char test[100];
    int length = strlen(word);

    while (count != 0) {
        test[i] = word[count - 1];
        i++;
        count--;
    }
     test[length] = '\0';

    if (strcmp(test, word) == 0){
        return 1;
    }else {
        return 0;
    }
}


",1
ngna565,1696739702,1,"int IsPalindrome(char *word)
{
   int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1; 
}
",1
nhar865,1696757840,1,"int IsPalindrome(char *word) {
    int length = strlen(word) ;
    int limit = length >> 1;

    for (int i = 0; i < limit; i++) {
        int j = length - i - 1;
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}
",1
nhrs452,1696298909,1,"int IsPalindrome(char *word)
{
    
    int start = 0;
    int end = strlen(word)-1;
    int j = 0;
    while (start<strlen(word)){
        if (word[start] == word[end]){
            start++;
            end--;
            }
            else{
                start++;
                end--;
                j++;
            }
    }
    
    if (j>0){
        return 0;
    } else{
        return 1;
    }
}
",1
nhua986,1696297955,1,"int IsPalindrome(char *word)
{
    int i = 0;
    
    i = strlen(word)-1; 
    
    if (word[0] == word[i]) {
        return 1;
    }
    else {
        return 0;
    }
}
",0
nhua986,1696298149,2,"int IsPalindrome(char *word)
{
    int i = 0;
    
    i = strlen(word)-1; 
    
    if (word[0] == word[i]) {
        return 1;
    }
    else {
        return 0;
    }
    
    if (i > 2) { 
        if (word[1] == word[i-1]) {
            return 1;
        }
        else {
            return 0;
        }
    }
}",0
nhua986,1696298290,3,"int IsPalindrome(char *word)
{
    int i = 0;
    
    i = strlen(word)-1; 
    
    if (i > 2) { 
        if (word[1] == word[i-1]) {
            return 1;
        }
        else {
            return 0;
        }
    }
    
    if (word[0] == word[i]) {
        return 1;
    }
    else {
        return 0;
    }
    
}",0
nhua986,1696298406,4,"int IsPalindrome(char *word)
{
    int i = 0;
    
    i = strlen(word)-1; 
    
    if (i > 2) { 
        if ((word[1] == word[i-1]) && (word[0] == word[i])) {
            return 1;
        }
        else {
            return 0;
        }
    }
    
    if (word[0] == word[i]) {
        return 1;
    }
    else {
        return 0;
    }
    
}",1
nhut042,1696208823,1,"int IsPalindrome(char *word)
{
    char placeholder;
    int length = strlen(word);
    char reversearray[length];
    strcpy(reversearray,word);
    
    for (int i = 0; i < length / 2; i++)
    {
        placeholder = reversearray[i];
        reversearray[i] = reversearray[length - (i + 1)];
        reversearray[length - (i + 1)] = placeholder;
    }
    int n;
    if (0 == strcmp(reversearray,word))
    {
        n = 1;
    }
    else
    {
        n = 0;
    }
    return n;
}",1
nisa397,1696298619,1,"int IsPalindrome(char string[]) {
	int i;
	int length = strlen(string);
	int palindrome;
	
	
	for (i = 0; i < length/2; i++) {
		if (string[i] == string[length-i-1]){
			palindrome = 1;
		}
		else {
			return 0;
		}
			
		


	}

	return palindrome;
}",0
nisa397,1696298959,2,"int IsPalindrome(char string[]) {
	int i;
	int length = strlen(string);
	int palindrome;
	
	
	for (i = 0; i < length; i++) {


		if (string[i] == string[length-i-1]){
			palindrome = 1;
		}
		else {
			return 0;
		}
			
		


	}

	return palindrome;
}
",1
njon803,1696391191,1,"int IsPalindrome(char *word)
{
    int i = 0;
int length = strlen(c);

while (i < 0.5 * length) {

	if (c[i] != c[length - (i + 1)]) {

		return 0;
	}
	i++;
}

return 1;
    
}
",0
njon803,1696391354,2,"int IsPalindrome(char* c)
{
	int i = 0;
	int length = strlen(c);

	while (i < 0.5 * length) {

		if (c[i] != c[length - (i + 1)]) {

			return 0;
		}
		i++;
	}

	return 1;
}
",1
nlal162,1696746665,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int start = 0;
    int end = length-1;
    
    while(start < end){
        if (word[start] != word[end]){
            return 0; // when not a palindrome.
        }
        start++;
        end--;
    }

    return 1;// when it is a palindrome.
}

    

",1
nmah920,1696367793,1,"int IsPalindrome(char *word)
{
int length = strlen(word);
char check[1000];

    for (int i = 0; i < strlen(word); i++)
    {
        if (word[i] != word[strlen(word) - 1 - i])
        {
           return 0;
        }
    }

    return 1;
}",0
nmah920,1696368291,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] != word[length - 1 - i])
        {
           return 0;
        }
    }

    return 1;
}",1
nqua370,1696843654,1,"int IsPalindrome(char *word) {
  int length = strlen(word);
  int i, j;
  
  for(i = 0, j < length; i < j; i++, j--) {
  if word[i] == word[j] {
      return 1;
   }
  }
  return 0;
}


",0
nqua370,1696844362,2,"int IsPalindrome(char *word) {
  int length = strlen(word);
  int i, j;
  
  for (i = 0, j < length; i < j; i++, j--) {
  if (word[i] == word[j]) {
      return 1;
   }
  }
  return 0;
}


",0
nqua370,1696844432,3,"int IsPalindrome(char *word) {
  int length = strlen(word);
  int i, j;
  
  for (i = 0, j = length - 1; i < j; i++, j--) {
  if (word[i] == word[j]) {
      return 1;
   }
  }
  return 0;
}


",0
nqua370,1696847434,4,"int IsPalindrome(char *word) {
  int wordlength = strlen(word);
  int i, j;
  
  for (i = 0, j = wordlength - 1; i < j; i++, j--) {
  if (word[i] != word[j]) {
      return 0;
   }
  }
  return 1;
}


",1
nren130,1696403708,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int middle = strlen(word) / 2;
   
    for (int i = 0; i < middle; i++) {
        if (word[i] != word[length - i - 1]) {
        return 0;
        }
    }
return 1; 
}
",1
nrub019,1696713765,1,"int IsPalindrome(char *word)
{
   int length = strlen(word);
    int out = 1;

    for (int i = 0; i < (length/2); i++){
        if (word[i] != word[length-1-i]){
            out = 0;
        }
    }
    return out; 
}
",1
nthe160,1696751046,1,"int IsPalindrome(char* word)
{
	int i;
	i = 0;
	while (word[i] != '\0') {
		i++;
	}

	int yes;
	yes = 1;
	int	lastvalue;
	int firstvalue;

	for (firstvalue = 0, lastvalue = i - 1; firstvalue < lastvalue; firstvalue++, lastvalue--) { // loop to swap elements
		if (word[firstvalue] != word[lastvalue]) {
			yes = 0;
		}
	}
		return yes;
}
",1
ntia856,1696728544,1,"int IsPalindrome(char *word)
{
    char ogword[100]; 
    strcpy(ogword, word); 

    int count = strlen(word);
    int i = 0;
    int j = count - 1;
    int p; 

    while (i < j)
    {
        p = word[i];
        word[i] = word[j];
        word[j] = p;
        i++;
        j--;
    }

    return strcmp(ogword, word) == 0;
}
",1
ntur101,1696227189,1,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	char ReverseWord[100];
	int count = 0;
	
	for (int i = length-1; i >= 0; i--) {
		ReverseWord[count] = word[i];
		count++;
	}

	for (int i = 0; i < length; i++)
	{
		if (ReverseWord[i] != word[i]) {
			return 0;
		}
	}
	return 1;
}
",1
nwei818,1696236200,1,"int IsPalindrome(char *word) {
    int length = 0, start = 0, end = 0;

    length = strlen(word);
    end = length - 1;

    while (start < end) {
        if (word[start] != word[end]){
            return 0;

        }
        start++;
        end--;
    }
    return 1;
}",1
nwil850,1696324729,1,"
int IsPalindrome(char *word){
    int stringlength = strlen(word);
    if (word[(stringlength-1)] == word[0]){
        return 1;
    }
    return 0;
}
",0
nwil850,1696324837,2,"int IsPalindrome(char *word){
    int stringlength = strlen(word);
    if ((word[(stringlength-1)] == word[0]) && (word[(stringlength-2)] == word[1])){
        return 1;
    }
    return 0;
}
",1
nyua944,1696379473,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length;
    int i = 0;
    length = strlen(word);
    for (int i = 0; i < length; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}",0
nyua944,1696379607,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length;
    length = strlen(word);
    for (int i = 0; i < length; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
obar199,1696836306,1,"int IsPalindrome(char *word)
{
    int i = 0;
    while (word[i] != '\0'){
        i++;
    }
    int a = 0;
    while ((word[i-a-1] == word[a])&&(a<i)){
        a++;
    }
    int b = 0;
    if (a == i){
        b = 1;
    }
    return b;
} ",1
ogab251,1696392061,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    int j = length - 1;
    
    while (i < j) {
        if (word[i] != word[j]) {
            return 0;
            i++;
            j--;
        }
    }
    return 1;
}
",0
ogab251,1696392152,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word);
    int j = length - 1;
    
    while (i < j) {
        if (word[i] != word[j]) {
            return 0;
        }
        
        i++;
        j--;
            
    }
    return 1;
}
",1
ogan176,1696490594,1,"int IsPalindrome(char *word)
{
	int length = strlen(word);

	int i;

	for (i = 0; i < length/2; i++){
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	return 1;
}
",1
ogar584,1696366859,1,"int IsPalindrome(char *word)
{
    int length, i, j;
    length = strlen(word);
    char reverse[length];
    for (i = length - 1, j = 0; i >= 0; i--, j++)
    {
        reverse[j] = word[i];
    }
    if (strcmp(reverse, word) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}",0
ogar584,1696392496,2,"int IsPalindrome(char *word)
{
    int i, j, length, value;
    length = strlen(word);
    if (length % 2 == 1)
    {
        for (i = 0, j = length - 1; i < (length / 2) + 1; i++, j--)
        {
            if (word[i] == word[j])
            {
                value = 1;
            }
            else
            {
                value = 0;
            }
        }
    }
    if (length % 2 == 0)
    {
        for (i = 0, j = length - 1; i < (length / 2); i++, j--)
        {
            if (word[i] == word[j])
            {
                value = 1;
            }
            else
            {
                value = 0;
            }
        }
    }
    return value;
}",0
ogar584,1696393441,3,"int IsPalindrome(char *word)
{
    int i, j, length;
    length = strlen(word);
    if (length % 2 == 1)
    {
        for (i = 0, j = length - 1; i < (length / 2) + 1; i++, j--)
        {
            if (word[i] == word[j])
            {
                return 1;
            }
            else
            {
                return 0;
                break;
            }
        }
    }
    if (length % 2 == 0)
    {
        for (i = 0, j = length - 1; i < (length / 2); i++, j--)
        {
            if (word[i] == word[j])
            {
                return 1;
            }
            else
            {
                return 0;
                break;
            }
        }
    }
}",0
ogar584,1696394017,4,"int IsPalindrome(char *word)
{
    int i, j, length, value;
    length = strlen(word);
    
    for (i = 0, j = length - 1; i < (length / 2); i++, j--)
    {
        if (word[i] == word[j])
        {
            value = 1;
        }
        else
        {
            value = 0;
            break;
        }
    }
    return value;
}",0
ogar584,1696394100,5,"int IsPalindrome(char *word)
{
    int i, j, length, value;
    length = strlen(word);
    
    for (i = 0, j = length - 1; i < (length / 2); i++, j--)
    {
        if (word[i] != word[j])
        {
            return 0;
        }
        
    }
    return 1;
}",0
ogar584,1696394115,6,"int IsPalindrome(char *word)
{
    int i, j, length;
    length = strlen(word);
    
    for (i = 0, j = length - 1; i < (length / 2); i++, j--)
    {
        if (word[i] != word[j])
        {
            return 0;
        }
        
    }
    return 1;
}",1
oguo680,1696644580,1,"int IsPalindrome(char *word)
{
    int i, j;
    int result = 1;
    char newWord[100];
    int length = strlen(word);

    for (i = length - 1, j = 0; i >= 0; i--, j++) {
        newWord[j] = word[i];
    }
    newWord[j] = '\0';


    for (int k = 0; k < length; k++) {
        if (newWord[k] != word[k]) {
            result = 0;
            break;
        }
    }

    return result;
}",1
oko158,1696248422,1,"int IsPalindrome(char *word)
{
    int length = strlen(word); 
    int i; 
    int result = 1;

    for (i = 0; i < length; i++) {
        if (word[i] != word[length - i-1]) {
            result = 0;
        }
        
    }

    return result;
}
",1
onic423,1696319768,1,"int IsPalindrome(char *word)
{
// User inputs a word as array of characters    
// Reverse the string
int l=0;
l=strlen(word);
char rev[100] = {48};
for (int i=0; i < l; i++) {
    rev[i] = word[l - i - 1];
}
// Compare each corresponding element to see if they match
for(int i=0; i < l; i++) {
    if (word[i] != rev[i]) {
        return 0;
    }
}
return 1;

// If yes result=1, if no result=0
}
",1
opat597,1696731552,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) - 1;
    int i;
    for (i = 0; i <= length; i++){
        if (word[i] != word[length]){
            return 0;
            break;
        }
        else{
            length++;
            return 1;
        }
    }

}",0
opat597,1696732356,2,"int IsPalindrome(char *word)
{
    int length = (strlen(word) - 1);
    int i, result = 0;
    for (i = 0; i <= length; i++){
        if (word[i] != word[length]){
            result = 0;
            break;
        }
        else{
            length--;
            result = 1;
        }
    }
    return result;
}",1
opre469,1696653887,1,"int IsPalindrome(char *word)
{
    //for loop to go through each letter up until the halfway point//
for (int i = 0; i < strlen(word) / 2; i++) {
	
	//if statement that detects if two opposite letters dont match// 
	if (word[i] != word[strlen(word) - i - 1]) {
		
		//returns false(0) if they dont match//
		return 0;
	}
}
//returns true(1) if the word is a palindrome//
return 1;
}
",1
orow585,1696676809,1,"int IsPalindrome(char *word)
{
    	int length = 0;
	int i = 0;

	while (*(word + i) != '\0') {
		length++;
		i++;
	}

	int j = length - 1;
	i = 0;

	while (i < length / 2) {
		while (*(word + i) > 122 || *(word + i) < 97 || *(word + j) > 122 || *(word + j) < 97)
		{
			if (*(word + i) > 122 || *(word + i) < 97) {
				i++;
			}
			if (*(word + j) > 122 || *(word + j) < 97) {
				j--;
			}
		}

		if (*(word + i) != *(word + j)) {
			return 0;
		}
		i++;
		j--;
	}
	return 1;
}
",1
osca399,1696812655,1,"int IsPalindrome(char *word)
{
 	int length = strlen(word);

	for (int i = 0; i < length / 2; i++)
		if (word[i] != word[length - i - 1]) {
			return 0;
		}
	return 1;   
}
// Author: Olano Scarlett",1
oshi740,1696454611,1,"int IsPalindrome(char *word)
{
    int length;
length = strlen(word);
int i, j,ispalindrome=1;
i = 0;
j = length - 1;
while (i <= j) {
	if (word[i] != word[j]) {
		ispalindrome = 0;
	}
	i++;
	j--;
}
if (ispalindrome == 1) {
	return 1;
}
return 0;
}
",1
osko432,1696770207,1,"int IsPalindrome(char *word)
{
size_t beez=strlen(deezus);
beez--;
int co;
for (int d2=0; d2<=beez/2; d2++){
    if (!(deezus[d2]==deezus[beez-d2])){
    co++;
    }
}
if (co==0){
   return 1;
}
else { 
return 0;
}   
}
",0
osko432,1696770234,2,"#include <stdio.h>
#include <string.h>
#define Deez_Nuts
int IsPalindrome(char deezus[]){
size_t beez=strlen(deezus);
beez--;
int co;
for (int d2=0; d2<=beez/2; d2++){
    if (!(deezus[d2]==deezus[beez-d2])){
    co++;
    }
}
if (co==0){
   return 1;
}
else { 
return 0;
}
}",0
pchh683,1696212304,1,"int IsPalindrome(char *Word)
{
    
    int Result;
    int Length = strlen(Word);
    for (int i = 0; i < Length/2; i++)
    {
        if (Word[i] == Word[Length-1-i])
        {
            Result = 1;
        }
        else
        {
            Result = 0;
        }
    }
    return Result;
}",0
pchh683,1696212870,2,"int IsPalindrome(char *Word)
{
    
    int Result;
    int Length = strlen(Word);
    for (int i = 0; i < Length/2; i++)
    {
        if (Word[i] == Word[Length-1-i])
        {
            Result = 1;
        }
        else
        {
            Result = 0;
        }
    }
    if (Length == 1)
    {
        Result = 1;
    }
    return Result;
}",0
pchh683,1696213818,3,"int IsPalindrome(char *Word)
{
    int Length = strlen(Word);
    int Result = 1;

    if (Length == 1)
    {
        return Result;
    }

    for (int i = 0; i < Length / 2; i++)
    {
        if (Word[i] != Word[Length - 1 - i])
        {
            Result = 0;
            break;
        }
    }

    return Result;
}",1
pfil701,1696823342,1,"int IsPalindrome(char *word)
{
    int j = strlen(word);
    int i;

    for (i = 0, j = j - 1; i < j; i++, j--) {

        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
}
",1
pfon568,1696310804,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int temp[length];
    
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] == word[length - 1 - i])
        {
            return 1;
            
        }
    }
        
    return 1;
 
}
",0
pfon568,1696310823,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] != word[length - 1 - i])
        {
            return 0;
            
        }
    }
        
    return 1;
 
}
",1
phao209,1696836792,1,"#include <stdio.h>
#include <string.h>

// Function to check if a string is a palindrome recursively
int IsPalindromeRecursive(const char *str, int start, int end) {
    // Base case: if start is greater than or equal to end, it's a palindrome
    if (start >= end) {
        return 1; // True
    }

    // Check if characters at current positions match
    if (str[start] != str[end]) {
        return 0; // False
    }

    // Recursively check the remaining substring
    return IsPalindromeRecursive(str, start + 1, end - 1);
}

int IsPalindrome(const char *str) {
    int length = strlen(str);

    // Call the recursive function with appropriate start and end indices
    return IsPalindromeRecursive(str, 0, length - 1);
}
",1
pkim777,1696210923,1,"int IsPalindrome(char *word)
{
    int i = strlen(word) - 1;
    int j = 0;
    char temp[strlen(word) + 1];
    while (word[i] != '\0') {
        temp[j] = word[i];
        j++;
        i--;
    }
    temp[j] = '\0';
    
    int compare;
    if (strcmp(word, temp) == 0) {
        return 1;
    } else {
        return 0;
    }
}",0
pkim777,1696210988,2,"int IsPalindrome(char *word)
{
    int i = strlen(word) - 1;
    int j = 0;
    char temp[strlen(word) + 1];
    while (word[i] != '\0') {
        temp[j] = word[i];
        j++;
        i--;
    }
    temp[j] = '\0';
    
    if (strcmp(word, temp) == 0) {
        return 1;
    } else {
        return 0;
    }
}",1
plah275,1696472792,1,"int IsPalindrome(char *word)
{
    
    int length2, i, j, comp;
    char arr[50],arr2[50];
    length2 = strlen(word);
    
    for(i = 0;i < length2;i++) {
        
        arr[i] = word[i];
        
    }
    
    
    for(j = length2 - 1;j >= 0;j--) {
        arr2[(length2 - 1)-j] = arr[j];
        
    }
    
    arr2[length2] = '\0';
    
    
    if (strcmp(arr,arr2) == 0) {
        comp = 1;
    } else {
        comp = 0;
    }

return comp;

}
",0
plah275,1696755556,2,"int IsPalindrome(char word[]) {

    int length2, j, comp;
    char arr2[50];
    length2 = strlen(word);


    for (j = length2 - 1; j >= 0; j--) {
        arr2[(length2 - 1) - j] = word[j];

    }

    arr2[length2] = '\0';


    if (strcmp(word, arr2) == 0) {
        comp = 1;
    }
    else {
        comp = 0;
    }

    return comp;

}
",1
plan310,1696558133,1,"int IsPalindrome(char *word)
{
    int i, mid;
    int length = strlen(word);

    if (length % 2 == 0) {
        mid = length / 2;
    } else {
        mid = length / 2 + 1;
    }
    
    for (i = 0; i <= mid; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    
    return 1;
}
",1
ppax865,1696825423,1,"int IsPalindrome(char word[]){
    int i,j, Length;
    char InitialArray[100],tempchar;
    Length = strlen(word);
    for (j = 0; j <= Length; j++){
        InitialArray[j] = word[j];
    }
    for (i = 0; i < Length/2; i++) {
        tempchar = word[i];
        word[i] = word[Length - 1 - i];
        word[Length - 1 - i] = tempchar;
    }
    if (strcmp(InitialArray,word) == 0){
        return 1;
    }else{
        return 0;
    }
}
",1
pper327,1696673234,1,"int IsPalindrome(char *word)
{
    int i, j;
    i = 0;
    j = strlen(word) - 1;

    while (i < j) {
        if (word [i] != word [j]){
            return 0;
        }
        i++;
        j--;
    }
    return 1; 
    
}
",1
ppra303,1696799235,1,"int IsPalindrome(char *word)
{
    //This line finds the length
    int length = strlen(word); //
    for (int i = 0; i < length / 2; i++) { //
        if (word[i] != word[length - 1 - i]) { //
            return 0;  // If return 0 than word is not a plaindrome 
        }
    }
    return 1; // If return 1 than word is palindrome  
}
",1
pshe539,1696304637,1,"int IsPalindrome(char *word)
{
    char flipped_word[100] = {0};

    // Find word length (without trouble of dealing with constant)
    int original_word_length = strlen(word);
    int word_length = 0;
    int i;
    for (i = 0; i < original_word_length; i++){  
        word_length++;
    }
    
    // Flip the word, and stores it
    int j;
    for (j = 0; j < word_length; j++){
        flipped_word[j] = word[word_length - 1 - j];
    }

    // Compare strings
    if (strcmp(word, flipped_word) == 0){
        return 1;
    }
    else{
        return 0;
    }
}",1
psin207,1696399128,1,"
int IsPalindrome(char *word)
{
    int x=strlen(word);
    char copy[x];
    strcpy(copy,word);
   
    int i=0;
    int y=x-1;
    int t;
    for (i=0;i<x/2;i++) {
        copy[i]=copy[y];
        y--;
    }
    
    int z=strcmp(word,copy);
    if (z==0) {
        return 1;
    } else {
          return 0;
    }
   
}

",0
psin207,1696402203,2,"int IsPalindrome(char *word)
{
    int x=strlen(word);
    int i=0;
    int y=x-1;
    
    for (i=0;i<x/2;i++) {
        if (word[i]!=word[y]) {
            return 0;
        }
        y--;
    }
    return 1;
}
",1
pwat943,1696295772,1,"int IsPalindrome(char *word)
{
   int length = strlen(word);
    
    // Initialize two pointers, one at the beginning and one at the end of the string
    int start = 0;
    int end = length - 1;
    
    while (start < end) {
        // Compare characters from the start and end positions
        if (word[start] != word[end]) {
            return 0; 
        }
        start++;
        end--;
    }
    
    return 1; 
}
",1
pwil422,1696847448,1,"int IsPalindrome(char *word)
{
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0;
        }
    }

    return 1;
}
",0
pwil422,1696847485,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0;
        }
    }

    return 1;
}
",0
pwil422,1696847562,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}
",1
pwu278,1696207958,1,"int IsPalindrome(char* word) 
{
	int ReverseArray[100];
	int Length;
	int i;
	int j;
	int result = 1;

	
	
	Length = 0;
	while (word[Length] != '\0') {
		Length++;
		}

	ReverseArray[Length] = '\0';

	j = Length;
	for (i = 0; i < Length; i++) {
		j--;
		ReverseArray[i] = word[j];
	}

	for (i = 0; i < Length; i++) {
		if (ReverseArray[i] != word[i]) {
			result = 0;
		}
	}


	return result;
}",1
pxie161,1696318021,1,"int IsPalindrome(char *word)
{	
    int count = 0;
    int i = 0;
    while (word[i] != '\0') {
    i++;
    }

    for (int j = 0; j < i; j++){
        if (word[j] == word[i - 1 - j]){
            count++;
        }
    }
    
    if (count == i){
        return 1;
    }
    else{
        return 0;
    }
}
",1
pyou182,1696297680,1,"int IsPalindrome(char *word)
{
    //Finding the length of string
    int length;
    length = strlen(word);

    int i;
    //Reading both ways
    for (i = 0; i < length; i++) {
        if (word[i] != word[length-i-1])
        return 0; //Not a palindrome
    } 
  return 1; //Is a palindrome
    
}
",1
qche619,1696831055,1,"int IsPalindrome(char *word)
{
    int len = strlen(str);
    for (int i = 0; i < len/2; i++) 
    {
        if (str[i] = str[len - 1 - i]) 
        {
            return 0;
        }
    }
    return 1;
    
}
",0
qche619,1696831356,2,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    for (int i = 0; i < len/2; i++) 
    {
        if (word[i] = word[len - 1 - i]) 
        {
            return 0;
        }
    }
    return 1;
    
}
",0
qche619,1696831581,3,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *str)
{
    int len = strlen(str);
    for (int i = 0; i < len/2; i++) 
    {
        if (str[i] = str[len - 1 - i]) 
        {
            return 0;
        }
    }
    return 1;
    
}
",0
qche619,1696832591,4,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    for (int i = 0; i < len / 2; i++) 
    {
        if (word[i] != word[len - 1 - i]) 
        {
            return 0;
        }
    }
    return 1;
}
",1
qkan386,1696303955,1,"int IsPalindrome(char* word) {

    int length = strlen(word);
    char RevWord[100];

    //Get rid empty boxes
    word[length] = '\0';

    //Reverse the word
    for (int i = 0; i < length; i++) {
        RevWord[i] = word[length - 1 - i];
    }
    
    //Get rid of empty boxes
    RevWord[length] = '\0';

    if (strcmp(word,RevWord) == 0) {
        return 1;
    }

    else {
        return 0;
    }
}",1
qmcc945,1696214970,1,"int IsPalindrome(char *word)
{
        int length, output, x, y, index;
    
    length = strlen(word);
    char firstHalf[100], secondHalf[100];
    
    if((length % 2) == 0) {
        //even number
        int halfLength;
        halfLength = length / 2;
        for(x = 0; x < (halfLength - 1); x++) {
            firstHalf[x] = word[x];
        }
        index = (length - 1);
        for(y = 0; y < (halfLength -1); y++){
            secondHalf[y] = word[index];
            index--;
        }
        firstHalf[halfLength] = '\0';
        secondHalf[halfLength] = '\0';
    } else {
        //ODD number
        double halfLength;
        double roundedDownDouble;
        int roundedDown;
        halfLength = length / 2.0;
        //roundedUp = ceil(halfLength);
        roundedDownDouble = halfLength - 0.5;
        roundedDown = roundedDownDouble;
        for(x = 0; x < roundedDown; x++) {
            firstHalf[x] = word[x];
        }
        index = (length - 1);
        for(y = 0; y < roundedDown; y++) {
            secondHalf[y] = word[index];
            index--;
        }
        firstHalf[(roundedDown + 1)] = '\0';
        secondHalf[(roundedDown + 1)] = '\0';
    }


    output = strcmp(firstHalf, secondHalf);

    if (output == 0){
        return 1;
    } else { 
        return 0;
    }
}
",0
qmcc945,1696272981,2,"int IsPalindrome(char *word)
{
    int length, output, x, y, i, index;
    
    length = strlen(word);
    char firstHalf[100], secondHalf[100];

    if (length == 1) {
        return 1;
    }

    if (length == 2) {
        if(word[0] == word[1]) {
            return 1;
        } else {
            return 0;
        }
    }
    
    if((length % 2) == 0) {
        //even number
        int halfLength;
        halfLength = length / 2;
        for(x = 0; x < (halfLength - 1); x++) {
            firstHalf[x] = word[x];
        }
        index = (length - 1);
        for(y = 0; y < (halfLength -1); y++){
            secondHalf[y] = word[index];
            index--;
        }

        for(i = 0; i < halfLength; i++) {
        if(firstHalf[i] == secondHalf[i]) {
            output = 1;
        } else {
            return 0;
        }
        }

    } else {
        //ODD number
        double halfLength;
        double roundedDownDouble;
        int roundedDown;
        halfLength = length / 2.0;
        roundedDownDouble = halfLength - 0.5;
        roundedDown = roundedDownDouble;
        for(x = 0; x < roundedDown; x++) {
            firstHalf[x] = word[x];
        }
        index = (length - 1);
        for(y = 0; y < roundedDown; y++) {
            secondHalf[y] = word[index];
            index--;
        }

        for(i = 0; i < roundedDown; i++) {
        if(firstHalf[i] == secondHalf[i]) {
            output = 1;
        } else {
            return 0;
        }
        }
    }
    return output;
}
",0
qmcc945,1696275258,3,"int IsPalindrome(char *word)
{
    int length, i, j, x, output;
    char tempArray[100];

    length = strlen(word);

    if(length == 1) {
        return 1;
    }

    i = 0;
    j = (length - 1);
    while (i <= j) {
        tempArray[i] = word[j];
        tempArray[j] = word[i];
        i++;
        j--;
    }

    tempArray[length] = '\0';

    for (x = 0; x < length; x++) {
        if (tempArray[x] == word[x]){
            output = 1;
        } else {
            return 0;
        }
    }
    return output;    
}
",1
qtra338,1696368914,1,"int IsPalindrome(char *word) {
    int result,i = 0, j, length;

    //gets the length of the string array
    while (word[i] != '\0') {
        i++;
        length = i;
    }

    j = length - 1; 

    for (i = 0; i < length/2; i++) {
        if (word[i] == word[j])
        {
            result = 1; 
        }
        else {
            result = 0;
            return result;
        }
        j--;
    }

    return result;
}
",0
qtra338,1696369012,2,"int IsPalindrome(char *word) {
    int result,i = 0, j, length;

    //gets the length of the string array
    while (word[i] != '\0') {
        i++;
        length = i;
    }

    j = length - 1; 

    if (length == 1)
    {
        return result = 1;
    }
    

    //compares sets of characters to see if they're the same
    //this works with odd numbers of characters as well as the length/2 is effectively has a floor function applied to it
    for (i = 0; i < length/2; i++) {
        if (word[i] == word[j])
        {
            result = 1; 
        }
        else {
            result = 0;
            return result;
        }
        j--;
    }

    return result;
}",1
qwu129,1696325785,1,"int IsPalindrome(char *word)


int i = 0； 
    for (i = 0 ; i < strlen(word);i ++){
        if word[i] = word[strlen(word)-1-i]{
           return 1；
        }
    }
    
    return 0；",0
qwu129,1696326420,2,"int IsPalindrome(char *word)
{

    int i； 
    for (i = 0 ; i < strlen(word);i++){
        if (word[i] == word[strlen(word)-1-i]){
           return 1；
        }
    }
    return 0；
}",0
qwu129,1696326544,3,"int IsPalindrome(char *word)
{
	int length = strlen(word);

	for (int i = 0; i < length; i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	return 1;
}",1
qzho943,1696283045,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) ;  
    int result = 1;

    int start = 0;
    int end = length-1;
    
    while (start < end ){
        if (word[start]!=word[end]){
            result = 0;
        }
        start++;
        end--;
    }
    
return result; 
}
",1
raic989,1696655024,1,"int IsPalindrome(char *word)
{
    	int front, back;
	front = 0;
	back = (int)strlen(word) - 1 ;

	while (front < back) {
		if ((word[front] < 97) || (word[front] > 122)) {
			front++; 
		} 
		
		if ((word[back] < 97) || (word[back] > 122)) {
			back--;
		}

		if (word[front] != word[back]) {
			return 0;
		}
		else {
			front++;
			back--;
		}
	}
	return 1;
}
",1
rand321,1696218696,1,"int IsPalindrome(char *word)
{
    {
    int i, j, l;
    
    l = strlen(word);
    j = l-1;
    for(i = 0; i < l; i++){
        if (word[j]!=word[i]){
        return 0;
        }
        j--;   
    }
    return 1;
}
}
",1
rbaj698,1696834487,1,"int IsPalindrome(char *word)
{
    int length = strlen(string);
    int half = ceil(length/2);
    
    int i,a;
    for (i=0; i<=half ; i++) {
	for (a=length-1; a>=half ; a--) {
		if (word[i] != word[a]) {
			return false;
		}
	}
}

return true;

}
",0
rbaj698,1696834511,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int half = ceil(length/2);
    
    int i,a;
    for (i=0; i<=half ; i++) {
	for (a=length-1; a>=half ; a--) {
		if (word[i] != word[a]) {
			return false;
		}
	}
}

return true;

}
",0
rbaj698,1696834963,3,"int IsPalindrome (char *word)
{
int length = strlen(word);
int half = length / 2;

int i;
for (i=0; i<half ; i++) {
	if (word[i] != word[length - 1 - i]) {
		return false;
	}
}


return true;

}
",1
rbat374,1696316015,1,"int IsPalindrome(char *word)
{
    int flag = 0;
    int i_length = strlen(word);
    int end = i_length - 1;
    int i;
    for (i = 0; i < i_length; i++){
        if (word[i] == word[end]){
            flag = 1;
        }
        else{
            flag = 0;
        }
        end--;
    }
    return flag;
}
",0
rbat374,1696316401,2,"int IsPalindrome(char *word)
{
    int flag = 0;
    int i_length = strlen(word);
    int end = i_length - 1;
    int i;
    for (i = 0; i < i_length; i++){
        if (word[i] == word[end]){
            flag = 1;
        }
        else {
            flag = 0;
            return flag;
        }
        end--;
    }
    return flag;
}
",1
rbat561,1696226966,1,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int similarity = 0;
    char palindrome[len];
    char original[len];

    for (int i = 0; i < len; i++)
    {       
        original[i] = word[i];
        palindrome[i] = word[len - i - 1];
    }

    for (int i = 0; i < len; i++)
    {
        if (original[i] == palindrome[i])
        {
            similarity++;
        }
    }

    if (similarity == len)
    {
        return 1;
    }
    
    return 0;
}",1
rbui853,1696325114,1,"int IsPalindrome(char *word)
{
    int IsPalindrome(char* word) {
    int length = strlen(word);

    int i;
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}
",0
rbui853,1696325238,2,"int IsPalindrome(char* word) {
    int length = strlen(word);
    int i;
    
    for (i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
rbus291,1696390294,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0 ; i < length; i++) {
        if (word[i] != word[length - i- 1]) {
            return 0; 
        }
    }
    return 1; 
}
",1
rchi339,1696649633,1,"int IsPalindrome(char *word)
{
    int length = 0;
    
    while (word[length] != '\0') {
        length++;
    }
    
    int j = length -1;
    
    for (int i = 0;  i<length; i++){
        
        if (word[i] != word[j]){
            return 0;
        }
        
        j--;
    }
    return 1;
}",1
rcou530,1696308169,1,"int IsPalindrome(char *word)
{
    int strLength = strlen(word);
    int i = 0;
    int result = 0;
    while(word[i] == word[strLength-i-1]){
		result = 1;
		i++;
	}
	return result;
}
",0
rcou530,1696308799,2,"int IsPalindrome(char *word)
{
    int strLength = strlen(word);
    int i = 0;
    int result = 1;
    for (i=0; i<strLength; i++){
    	if(word[i] != word[strLength-i-1]){
		result = 0;
		}
	}
	return result;
}
",1
rdas322,1696826555,1,"int IsPalindrome(char *word)
{
    char output[strlen(word)];
    int a, b;
    
    a = 0;
    
    for(b = strlen(word) - 1; b > -1; b--) {
        output[a] = word[b];
        a = a + 1;
    }
    
    output[a] = '\0';
    
    if (strcmp(output, word) ~= 0) {
        return 0;
    } else {
        return 1;
    }
    
}
",0
rdas322,1696826675,2,"int IsPalindrome(char *word)
{
    char output[strlen(word)];
    int a, b;
    
    a = 0;
    
    for(b = strlen(word) - 1; b > -1; b--) {
        output[a] = word[b];
        a = a + 1;
    }
    
    output[a] = '\0';
    
    if (strcmp(output, word) != 0) {
        return 0;
    } else {
        return 1;
    }
    
}
",1
rdic384,1696839744,1,"int IsPalindrome(char *word)
{
  int length = strlen(word);
    int i = 0;
    int end = length - 1;

    while (i < end) 
    {
        if (word[i] != word[end]) 
        {
            return 0; 
        }
        i++;
        end--;
    }

    return 1;  
}
",1
rdon807,1696843002,1,"int IsPalindrome(char *word)
{
  int a = strlen(word);
    for (int i = 0; i < a / 2; i++) {
        if (word[i] != word[a - i - 1]) {
            return 0; 
        }
    }
    return 1;   
}
",1
rdun690,1696730743,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++ ) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}
",1
rger104,1696281911,1,"int IsPalindrome(char *word)
{
   int palindrome = 1;
int i;
int length;
length = strlen(word);
for (i = 0; i < length/2; i++) {
	if (word[i] != word[length - 1 - i]) {
		palindrome = 0;
	}
}

return palindrome; 
}
",1
rgre692,1696845156,1,"int IsPalindrome(char *string) {
    int length = strlen(string);
    char compare[100] = {0};

    for (int i = 0; i < length; i++) {
        compare[i] = string[length - i - 1]; 
    }

    for (int i = 0; i < length; i++) {
        if (string[i] != compare[i]) {
            return 0; 
        }
    }

    return 1; 
}",1
rhen291,1696845859,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
	int midpoint = ceil(strlen(word)/2);
	int forward[midpoint] = scanf(""%[midpoint]s"", word);
	int backward[midpoint] = scanf(""%[midpoint]s"", strrev(word));
	if (forward == backward) {
		IsPalindrome = 1;
	} else {
		IsPalindrome = 0;
	}
}",0
rhua827,1696501584,1,"int IsPalindrome(char *word)
{
    int i = 0; 
    int x = strlen(word) - 1;
    
    while (x > i) {
        if (word[i++] != word[x--]) {
            return 0;
        }
    }
    return 1;
}",1
rkan756,1696286586,1,"int IsPalindrome(char *word)
{
    int left = 0;
    int right = strlen(word) - 1; 

    while (left < right) {
        if (word[left] != word[right]) {
            return 0;
        }

        left++;
        right--;
    }

    return 1;
}",1
rkar406,1696210329,1,"int IsPalindrome(char* word)
{
	int n = strlen(word);
	if (n % 2 == 0) {
		for (int i = 0; i < n / 2; i++) {
			if (word[i] != word[n - 1 - i]) {
				return 0;
			}
		}
	}
	else {
		for (int i = 0; i < n / 2; i++) {
			if (word[i] != word[n - 1 - i]) {
				return 0;
			}
		}
	}
	return 1;
}",1
rkha931,1696298884,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    
    int start = 0;
    int end = strlen(word);
    int palindrome;

    while (start < end){
        if (word[start] == word[end-start-1]) {
            palindrome = 1;
        }
        else {
            palindrome = 0;
        }
        start++;
        
    }
    return palindrome;
}
",0
rkha931,1696299201,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    
    int start = 0;
    int end = strlen(word);
    int palindrome;

    while (start < end){
        if (word[start] == word[end-start-1]) {
            palindrome = 1;
        }
        else {
            return 0;
        }
        start++;
        
    }
    return palindrome;
}
",1
rkir245,1696389553,1,"int IsPalindrome(char *word)
{
    int len, answer, i;

    len = strlen(word);

    answer = 1;

    if (len > 1)
    {
        for (i = 0; i < ((len-1)/2); i++)
        {
            if (word[i] == word[len - 1 - i])
            {
                answer = 1;
            }
            else
            {
                answer = 0;
            }    
        }
    }
    
    return answer;
    
}
",0
rkir245,1696389855,2,"int IsPalindrome(char *word)
{
    int len, answer, i;

    len = strlen(word);

    answer = 1;

    if (len == 2)
    {
        for (i = 0; i < ((len)/2); i++)
        {
            if (word[i] == word[len - 1 - i])
            {
                answer = 1;
            }
            else
            {
                answer = 0;
            }    
        }
    }    
    
    else if (len > 2)
    {
        for (i = 0; i < ((len-1)/2); i++)
        {
            if (word[i] == word[len - 1 - i])
            {
                answer = 1;
            }
            else
            {
                answer = 0;
            }    
        }
    }
    
    return answer;
    
}
",0
rkir245,1696824507,3,"int IsPalindrome(char *word)
{
    int answer;

    int length = strlen(word);

    if (length == 1)
    {
        answer = 1;
    }
    else
    {
        for (int i = 0; i < (length/2); i++)
        {
            if (word[i] == word[length-1-i])
            {
                answer = 1;
            }
            else
            {
                answer = 0;
            }
        }
    }   
    
    return answer;
}
",0
rkir245,1696824606,4,"int IsPalindrome(char *word)
{
    int answer;

    int length = strlen(word);

    if (length == 1)
    {
        answer = 1;
    }
    else
    {
        for (int i = 0; i < (length/2); i++)
        {
            if (word[i] == word[length-1-i])
            {
                answer = 1;
            }
            else
            {
                answer = 0;
                return answer;
            }
        }
    }   
    
    return answer;
}
",1
rleg709,1696792683,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i, length;
    length = strlen(word) - 1; // find length of the string 
    for (i = 0; i <= length; i++) { // for loop iterates over each character to make sure that they are the same.
        if (word[i] == word[length]) {
            return 1; // true if there is a palindrom
        } else {
            return 0; // false else there is not palindrome
        }
    }
}
",0
rleg709,1696796339,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i, l, length, answer;
    answer = 0;
    length = strlen(word) - 1; // find length of the string
    l = length + 1; // add 1 as we are going to decrease the length value as we iterate over each element
    for (i = 0; (i <= length); i++) { // for loop iterates over each character to make sure that they are the same.
    l = l - 1; // Decreases length value for each length value. 
        if (word[i] == word[l]) {
            answer = answer + 1; // for every value that is the same add 1 the to the stored variable
            }
    }
    if (answer == (length + 1)) {return 1;} // if answer = length + 1, then it is a palindrome.
    else {return 0;}
}",1
rlin108,1696290003,1,"int IsPalindrome(char *word)
{
    int length, i, end, result;
    length = strlen(word);
    end = length - 1;
    result = 1;
    for (i = 0; i < length; i++) {
        if (word[i] != word[end]) {
            result = 0;
            
            return result;
        }
        end--;
    }
    
    return result;
}
",1
rmar633,1696412151,1,"int IsPalindrome(char *word)
{
    int indexl, i, count, required;
    indexl = strlen(word) - 1;
    for (i=0; i < indexl; i++)
    {
        if(word[i] == word[indexl - i])
        {
            count += 1;
        }
    }
    required = indexl/2;
    if (count >= required)
    {
        return 1;
    }
    else
    {
        return 0;
    }
    
}",0
rmar633,1696412336,2,"int IsPalindrome(char *word)
{
    int indexl, i, count, required;
    count = 0;
    indexl = strlen(word) - 1;
    for (i=0; i < indexl; i++)
    {
        if(word[i] == word[indexl - i])
        {
            count += 1;
        }
    }
    required = indexl/2;
    if (count > required)
    {
        return 1;
    }
    else
    {
        return 0;
    }
    
}",0
rmar633,1696412989,3,"int IsPalindrome(char *word)
{
    int indexl, i, count, required;
    count = 0;
    indexl = strlen(word) - 1;
    for (i=0; i < indexl; i++)
    {
        if(word[i] == word[indexl - i])
        {
            count += 1;
        }
    }
    required = (indexl + 1)/2;
    if (count > required)
    {
        return 1;
    }
    else
    {
        if (indexl == 0)
        {
            return 1;
        }
        else
        {
            return 0;   
        }
    }
    
}",0
rmar633,1696413035,4,"int IsPalindrome(char *word)
{
    int indexl, i, count, required;
    count = 0;
    indexl = strlen(word) - 1;
    for (i=0; i < indexl; i++)
    {
        if(word[i] == word[indexl - i])
        {
            count += 1;
        }
    }
    required = indexl/2;
    if (count > required)
    {
        return 1;
    }
    else
    {
        if (indexl == 0)
        {
            return 1;
        }
        else
        {
            return 0;   
        }
    }
    
}",0
rmar633,1696413398,5,"int IsPalindrome(char *word)
{
    int indexl, i, count, required;
    count = 0;
    indexl = strlen(word) - 1;
    for (i=0; i <= indexl/2; i++)
    {
        if(word[i] == word[indexl - i])
        {
            printf(""%d %d \n"", i, (indexl - i));
            count += 1;
        }
    }
    required = indexl/2;
    if (count > required)
    {
        return 1;
    }
    else
    {
        if (indexl == 0)
        {
            return 1;
        }
        else
        {
            return 0;   
        }
    }
    
}",0
rmar633,1696413410,6,"int IsPalindrome(char *word)
{
    int indexl, i, count, required;
    count = 0;
    indexl = strlen(word) - 1;
    for (i=0; i <= indexl/2; i++)
    {
        if(word[i] == word[indexl - i])
        {
            count += 1;
        }
    }
    required = indexl/2;
    if (count > required)
    {
        return 1;
    }
    else
    {
        if (indexl == 0)
        {
            return 1;
        }
        else
        {
            return 0;   
        }
    }
    
}",1
rmur989,1696660665,1,"int IsPalindrome(char *word)
{
    char wordR[100];
    int i;
    int x = 0;
    
    
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        wordR[i] = word[length - 1 - i];
    }
    
    
    
    
    for (int i = 0; i < length; i++){
        if(word[i] != wordR[i]){
            int x = 1;
            return(0);
        }
    }
    
    
    if(x == 1){
        return(0);
    }
    else{
        return(1);
    }
    

}
",0
rmur989,1696660767,2,"int IsPalindrome(char *word)
{
    char wordR[100];
    
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        wordR[i] = word[length - 1 - i];
    }
    
    
    
    
    for (int i = 0; i < length; i++){
        if(word[i] != wordR[i]){
            return(0);
        }
    }
    return(1);

}



int main()
{
    char word[100] = ""abcccba"";
    printf(""%d"", IsPalindrome(word));

}
",0
rmur989,1696660784,3,"int IsPalindrome(char *word)
{
    char wordR[100];
    
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        wordR[i] = word[length - 1 - i];
    }
    
    
    
    
    for (int i = 0; i < length; i++){
        if(word[i] != wordR[i]){
            return(0);
        }
    }
    return(1);

}

",1
rnga701,1696319648,1,"int IsPalindrome(char *word)
{
    int len;
    int i;
    int count=0;

    len=strlen(word);
    
    for(i=0;i<len-1;i++){
        if(word[i]==word[len-i-1]){
            count=count+1;
        }else{           
            return 0;
        }
    }
    if(count==len-1){
        return 1;
    }else{
        return 0;
    }
    
}",1
rnig735,1696372193,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    length--;
    int logic;
    
    for (int i=0, j=length; i <= length/2; i++, j--) {
        if (word[i] != word[j]) {
            logic = 0;
            return logic;
        }
    }
    logic = 1;
    return logic;
}",1
rpar376,1696673005,1,"int IsPalindrome(char *word)
{
    int length;
    int palintrue=1;
    length=strlen(word)-1;
    
    for (int i=0;i<=length;i++, length--) {
    if (word[i]!=word[length]) {
        palintrue=0;
    }
    }
    return palintrue;
}
",1
rpat943,1696309985,1,"int IsPalindrome(char *word) {
    
    char newword[strlen(word)];
    int i, j;
    j = 0;
    for(i = strlen(word) - 1; i >= 0; i--) {
        newword[j] = word[i];
        j++;
        }
    
    newword[j] = '\0';
    
    if (strcmp(word, newword) == 0) {
        return 1;
    } else {
        return 0;
    }
}",1
rraj313,1696209144,1,"int IsPalindrome(char *word)
{
    int i, length = strlen(word), Istrue = 1;
    for (i = 0; i < length; i++) {
        if (word[i] != word[length - i - 1]) {
            Istrue = 0;
        }
    }
    return Istrue;
}
",1
rroz381,1696492606,1,"int IsPalindrome(char *word)
{
   int i;
   int j;
   int length;
   char old[100];
   char temp;
   int test;
   
   //Find length of original string
   length = strlen(word);
   
   //Copy the string to a new variable
   while (i < length) {
       old[i] = word[i];
       i++;
   }
   
   //Reverse string
   i = 0;
   j = length - 1;
   
    while (i < j) {
        temp = word[i];
        word[i] = word[j];
        word[j] = temp;
        i++;
        j--;
    }
   
   //Test if the two strings are the same
   int result;
    
    if ((test = strcmp(old, word)) == 0) {
        result = 1;
    }
    else {
        result = 0;
    }
    
    return result;
}
",0
rroz381,1696733861,2,"int IsPalindrome(char *word)
{
   int i = 0;
   int j;
   int length;
   char old[100];
   char temp;
   int test;
   
   //Find length of original string
   length = strlen(word);
   
   //Copy the string to a new variable
   while (i < length) {
       old[i] = word[i];
       i++;
   }
   
   //Reverse string
   i = 0;
   i < length;
   j = length - 1;
   
    while (i < j) {
        temp = word[i];
        word[i] = word[j];
        word[j] = temp;
        i++;
        j--;
    }
   
   //Test if the two strings are the same
   int result;
    
    if ((test = strcmp(old, word)) == 0) {
        result = 1;
    }
    else {
        result = 0;
    }
    
    return result;
}",0
rroz381,1696833432,3,"int IsPalindrome(char *word)
{
    int i;
    int length;
    
    //Find length of string 
    length = strlen(word);
    
    //Check if string in reverse is equal to 
    for (i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1])
        {
            return 0;
        }
    }
    return 1;
}",1
rsha769,1696643467,1,"int IsPalindrome(char *word) 
{
   int length = strlen(word);
   int i = 0;
   int j = length - 1; 

   while (j>i) { //finding characters that do not match if this happens it returns 0.
       if (word[j] != word[i]) {
           return 0;
    }
       i++;
       j--;
    }
    
    return 1; //if string is odd length middle number is compared with itself.
}
  
",1
rsha970,1696634855,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    i = 0;
    j = length - 1;

    while (i < j) {
        if (word[i] != word[j]) {
            return 0; 
        }
        i++;
        j--;
    }

    return 1;   
}
",1
rsin531,1696831748,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return 0;  
        }
    }

    return 1;  
}
",1
rsin719,1696807522,1,"int IsPalindrome(char *word)
{
    int LengthOfString = strlen(word);
    for (int i = 0; i < LengthOfString / 2; i++) {
        if (word[i] != word[LengthOfString - i - 1]) {
            return 0; 
        }
    }
    return 1; 
}
",1
rsmi948,1696637718,1,"int IsPalindrome(char *word){
    int len;
    int isPalin = 0;

    len = strlen(word);

    for (int i = 0; i < len / 2; i++){
        if (word[i] == word[len - 1 - i]){
            isPalin = 1;
        } else {
            isPalin = 0;
            break;
        }
    }
    return isPalin;
}",0
rsmi948,1696637983,2,"int IsPalindrome(char *word){
    int len;
    int isPalin = 0;

    len = strlen(word);
    printf(""\n%i"", len);

    for (int i = 0; (float)i < (float)len / 2; i++){
        if (word[i] == word[len - 1 - i]){
            isPalin = 1;
        } else {
            isPalin = 0;
            break;
        }
    }
    return isPalin;
}",0
rsmi948,1696638025,3,"int IsPalindrome(char *word){
    int len;
    int isPalin = 0;

    len = strlen(word);

    for (int i = 0; (float)i < (float)len / 2; i++){
        if (word[i] == word[len - 1 - i]){
            isPalin = 1;
        } else {
            isPalin = 0;
            break;
        }
    }
    return isPalin;
}",1
rsta265,1696664069,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i;
    int j = length-1;
    for (i = 0; i < length/2; i++){
            if (word[i] != word[j]){
                return 0;
            }
            j--;
        }
        return 1;
}
",1
rtan654,1696299321,1,"int IsPalindrome(char *word)
{
    int length;
    int i = 0;
     
    length = strlen(word); //Using the strlen function to find the length of the function

    for (i = 0; i < length/2; i++){
        if(word[i] != word[length - i - 1]){
            return 0; // If its not the same return 0 as false
        }
    }
    return 1; // if we have not found diff values return a 1 for true 
}",1
rtap592,1696839024,1,"

int isPalindrome(char *word) {
	int length = strlen(word);
    length = length - 1;

	for (int i = 0; i < length; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}

	return 1;

}
",0
rtap592,1696839078,2,"#include <stdio.h>
#include <string.h>

int isPalindrome(char *word) {
	int length = strlen(word);
    length = length - 1;

	for (int i = 0; i < length; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}

	return 1;

}
",0
rtap592,1696839090,3,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
	int length = strlen(word);
    length = length - 1;

	for (int i = 0; i < length; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}

	return 1;

}
",1
rvog842,1696811785,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* str) {
    int start = 0;
    int end = strlen(str) - 1;

    while (start < end) {
        if (str[start++] != str[end--]) {
            return 0; 
        }
    }
    return 1;
}",1
rwar748,1696235615,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word) - 1; 
    int yes = 1;
    while(j>=i){
        if(word[j] != word[i]){
            yes = 0;
        }
        i++;
        j--;
    }
    return yes;
}
",1
rzha972,1696418387,1,"int IsPalindrome(char *word)
{
    int size;
    int i;
    size = strlen(word) - 1;
    i = 0;
    for (i=0; i <= size/2; i++){
        if (word[i] != word[size - i]){
            return 0;
        }
    } 
    return 1;
}",1
sabo272,1696302523,1,"int IsPalindrome(char *word)
{
  // store length of string as a variable
	int strlength = strlen(word);

    for (int i = 0; i < strlength; i++){
		if (word[i] != word[strlength-(i+1)]){
			return 0; // If the reversed order of the word doesn't match the forward order, return a 0 as the word is not a palindrome.
		}
	}
	return 1;  
}
",1
sali153,1696664982,1,"int IsPalindrome(char *check) {

	int length = strlen(check);
	for (int i = 0; i < length / 2; i++)
	{
		if (!(check[i] == check[length-1 - i]))
		{

			return 0;
		}
	}

	return 1;

}",1
sban919,1696309532,1,"int IsPalindrome(char *word)
{
    int length = strlen(word):
    
    for (int i = 0; i < length/2; i++)
    {
        if (word[i] == word[length -1 - i])
        {
            return 1;
        }
        return 0;
    }
}",0
sban919,1696309562,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length/2; i++)
    {
        if (word[i] == word[length -1 - i])
        {
            return 1;
        }
        return 0;
    }
}",0
sban919,1696309783,3,"int IsPalindrome(char *word) 
{
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++)
    {
        if (word[i] != word[length - i - 1])
        {
            return 0;
        }
    }
    return 1;
}",1
sbas887,1696652401,1,"int IsPalindrome(char *word) {
    int counter = 0;
    int stringLength = strlen(word);
    char palindromeArray[stringLength];
    
    for (int i = stringLength-1; i >= 0; i--) {
        palindromeArray[counter] = word[i];
        counter++;
    }
    
    if (strcmp(word, palindromeArray) == 0) {
        return 1;
    }
    return 0;
}
",0
sbas887,1696653010,2,"int IsPalindrome(char *word) {
    int counter = 0;
    int stringLength = strlen(word);
    char palindromeArray[stringLength];
    
    for (int i = stringLength-1; i >= 0; i--) {
        palindromeArray[counter] = word[i];
        counter++;
    }
    
    int temp = strcmp(word, palindromeArray);
    if (temp == 0) {
        return 1;
    }
    return 0;
}",0
sbas887,1696658288,3,"int IsPalindrome(char *word) {
    int counter = 0;
    int stringLength = strlen(word);
    char palindromeArray[100];

    for (int i = stringLength - 1; i >= 0; i--) {
        palindromeArray[counter] = word[i];
        counter++;
    }
    palindromeArray[stringLength] = '\0';

    int temp = strcmp(word, palindromeArray);
    if (temp == 0) {
        return 1;
    }
    return 0;
}",1
sben564,1696635018,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *str) {
    
    int length = strlen(str);
    
    for (int i = 0; i < (length / 2); i++) {
        
        if (str[i] != str[length - 1 - i]){
            
            return 0;
            
        }
        
    }
    
    return 1;
    
}
",1
sbha564,1696841306,1,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i, j;
    
    for (i=0, j = length -1; i < j; i ++, j--){
        if word[i] != word[j] {
            return 0;
        }
    }
    return 1;
    
}
",0
sbha564,1696841365,2,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i, j;
    
    for (i = 0, j = len -1; i < j; i ++, j--){
        if word[i] != word[j] {
            return 0;
        }
    }
    return 1;
    
}
",0
sbha564,1696841420,3,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i, j;
    
    for (i = 0, j = len -1; i < j; i ++, j--){
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
    
}
",1
sbou664,1696836287,1,"

int IsPalindrome(char *word);

int IsPalindrome(char *word){
    int i;
    int result;
    result = 1;
    int middle = strlen(word) / 2;
    int len = strlen(word);
    
    for (i = 0; i < middle; i++)
    if (word[i] != word[len - i - 1])
    result = 0;
    return result;
   
}
",1
sbro373,1696368593,1,"int isPalindrome(char *word) 
{

    int length = strlen(word);

    for (int i = 0; i < length; i++) {

        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }

    return 1;
}
",0
sbro373,1696368644,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length; i++) {
    
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    
    return 1;  
}
",1
scar362,1696333790,1,"int IsPalindrome(char *word) {
    int length=strlen(word);
int i=0;
int j=length-1;


while (i<j) {
    if (word[i] != word[j]){
        return 0;
    }
    i++;
    j--;
}
        return 1;
}

",1
sche525,1696219389,1,"int IsPalindrome(char *word){
    char reverseword[100];
    for(int i = 0; i < strlen(word); i++){
        reverseword[i] = word[strlen(word) - 1 - i];
    }
    if(*word == *reverseword){
        return 1;
    }
    else{
        return 0;
    }  
}
",0
sche525,1696219871,2,"int IsPalindrome(char *word){
    char reverseword[100];
    for(int i = 0; i < strlen(word); i++){
        reverseword[i] = word[strlen(word) - 1 - i];
    }
    if(strcmp(word, reverseword) == 0){
        return 1;
    }
    else{
        return 0;
    }
}",0
sche525,1696220021,3,"int IsPalindrome(char word[]){
    char reverseword[100];
    for(int i = 0; i < strlen(word); i++){
        reverseword[i] = word[strlen(word) - 1 - i];
    }
    if(strcmp(word, reverseword) == 0){
        return 1;
    }
    else{
        return 0;
    }
}",0
sche525,1696221946,4,"int IsPalindrome(char word[]){
    char reverseword[100];
    for(int i = 0; i < strlen(word); i++){
        reverseword[i] = word[strlen(word) - 1 - i];
    }
    reverseword[strlen((word))] ='\0';
    if(strcmp(word, reverseword) == 0){
        return 1;
    }
    else{
        return 0;
    }
}
",1
scho575,1696725918,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    if (length <= 1)
        return 1;
    // Check if word is a palindrome or not
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i])
            return 0;
    }

    return 1;
}",1
schu718,1696307989,1,"#include <string.h>
#include <stdio.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for(int i = 0; i < length / 2; i++)
    {
        
        if(word[i] != word[length-1-i])
        {
            return 0;
        }
        else 
        {
            return 1;
        }
    
    }
}
",0
schu718,1696308606,2,"#include <string.h>
#include <stdio.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    int ans = 0;
    
    for(int i = 0; i < length / 2; i++)
    {
        
        if(word[i] != word[length-1-i])
        {
            return 0;
        }
        else 
        {
            ans = 1;
        }
    
    }
    
    if(length == 1)
    {
        ans = 1;
    }
    
    return ans;
}
",1
schu800,1696817762,1,"int IsPalindrome(char *word)
{
    int i;
    int left = 0;
    int right = strlen(word) - 1;
    
    while (left <= right){
        if (word[left] != word[right]){
        return 0;
        }
        left++
        right--;
        
    }
    return 1;
    
}",0
schu800,1696817771,2,"int IsPalindrome(char *word)
{
    int i;
    int left = 0;
    int right = strlen(word) - 1;
    
    while (left <= right){
        if (word[left] != word[right]){
        return 0;
        }
        left++;
        right--;
        
    }
    return 1;
    
}",0
schu800,1696817784,3,"int IsPalindrome(char *word)
{
    int left = 0;
    int right = strlen(word) - 1;
    
    while (left <= right){
        if (word[left] != word[right]){
        return 0;
        }
        left++;
        right--;
        
    }
    return 1;
    
}",1
sdal739,1696249416,1,"int IsPalindrome(char* word)
{
	char word2[100];
	int length;
	length = strlen(word);

	int i;
	int j;
	j = -1;

	for (i = 0; i < length; i++) {
		word2[i] = word[length + j];
		j--;
	}

	word2[length] = '\0'; // terminates my new reversed char vector

	if (strcmp(word, word2) == 0) {
		return 1; // successfully palendromy
	}
	else {
		return 0; // not
	}
}
",1
sden589,1696841130,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    int first_char = 0;
    int last_char = length - 1;

    while (first_char < last_char) {
        if (word[first_char] != word[last_char]) {
            return 0; 
        }
        first_char++;
        last_char--;
    }

    return 1; 
}
",1
sekb555,1696217281,1,"#include <string.h>

int IsPalindrome(char *word)
{
    //initilises the starting value for the word in normal order
    int norm;
    //initilies the starting value of the string in reverse
    int palin = strlen(word)-1;

    //compares the input string in normal order to the string in reverse order
    for(norm = 0; norm < palin; norm++)
    {
        //returns 0 if any letters do not correlate with each other
        if (word[norm] != word[palin])
        {
            return 0;
        }

        palin--;
    }
    //returns 1 if the word is a palindrome
    return 1;
}
",1
sfry192,1696712212,1,"#include <stdio.h>
#include <string.h>
int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    
    int i;
    char temp;
   
   for(i = 0;i < length/2;i++)
   {
       temp = word[i];
       word[i] = word[length - 1 -i];
       word[length - 1 -i] = temp;
       
   }
   
   for(int i = 0;i < length;i++){
       if(word[i] != word[length - 1 - i])
       {
           return 0;
       }
   }
   
   return 1;
       
   
}",1
sgal263,1696766418,1,"int IsPalindrome(char *word)
    int i, count, Length, Result;
    char ReverseString[1000] = {0};
	Length = strlen(word); // Does not include null

	i = 0;
	count = 0;
	while (((Length - 1) - i) >= 0) {
		ReverseString[i] = word[Length - 1 - i];
		if (ReverseString[i] == word[i]) {
		count++;
		}
		i++;

	}
	
	if (count == Length) {
		Result = 1;
	}
	else {
		Result = 0;
	
	}
	
	return Result;
}
",0
sgal263,1696767875,2,"int IsPalindrome(char *word) {
int length = strlen(word);
  for(int i=0; i<length/2; i++) {
    if(word[i] != word[length-i-1]){
      return 0;
  }
else{
return 1;
}
}
}
",0
sgal263,1696769192,3,"int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}
",1
sgib237,1696762108,1,"int IsPalindrome(char *word){
   int x;
    char temp[100];
    x = strlen(word);
    
    for (int i = x-1, j = 0; i>=0; i--, j++){
        temp[j]  = word[i];
    }
    
    temp[x] = '\0';

    int result = strcmp(temp, word);
    if (result == 0){
      return 1;
    }
    else {
       return 0;
    }
    
    return 0;
}",1
shan333,1696825661,1,"int IsPalindrome(char *word)
{
    char pal[10];
    int i;
    int count = 0;

    for(i = strlen(word) - 1 ; i > -1; i--) {
        pal[count] = word[i];
        count++;
    }
    pal[strlen(word)] = '\0';

    if (strcmp(pal, word) != 0){
        return 0;
    } else {
        return 1;
    }
}
",0
shan333,1696825973,2,"int IsPalindrome(char *word)
{
    char pal[100];
    int i;
    int count = 0;

    for(i = strlen(word) - 1 ; i > -1; i--) {
        pal[count] = word[i];
        count++;
    }
    pal[strlen(word)] = '\0';

    if (strcmp(pal, word) != 0){
        return 0;
    } else {
        return 1;
    }
}
",1
shan790,1696412704,1,"int IsPalindrome(char* word)
{
	int strLength = strlen(word);
	int max = strLength / 2;
	char tempChar;
	
	for (int i = 0; i < max; i++) {
		if (word[i] != word[strLength - i - 1]) {
			return 0;
		}
	}
	return 1;
}",0
shan790,1696412768,2,"int IsPalindrome(char* word)
{
	int strLength = strlen(word);
	int max = strLength / 2;
	
	for (int i = 0; i < max; i++) {
		if (word[i] != word[strLength - i - 1]) {
			return 0;
		}
	}
	return 1;
}",1
she940,1696298307,1,"int IsPalindrome(char* word)
{
	int i;
	int length;
	//fgets(word, 100, stdin);
	length = strlen(word);

	for (i = 0; i < (length/2); i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	return 1;
}",1
shsa718,1696225877,1,"int IsPalindrome(char *word)
{
    int IsPalindrome (char *word) {

    int i = 0;
    int palindrome = 1;
    int length = strlen(word);

    for (i=0;i<length;i++){
        if (word[i]!=word[length-1-i]){
            palindrome = 0;
            return palindrome;
        }
    }

    return palindrome;
}
}
",0
shsa718,1696225924,2,"int IsPalindrome(char *word)
{
    int i = 0;
    int palindrome = 1;
    int length = strlen(word);

    for (i=0;i<length;i++){
        if (word[i]!=word[length-1-i]){
            palindrome = 0;
            return palindrome;
        }
    }

    return palindrome; 
}
",1
shua365,1696230204,1,"int IsPalindrome(char *word)
{
     int length=strlen(word),i;
    for (i=0;i!=length;i++){
        length--;
        if (word[i]!=word[length]){
            return 0;
        }
        if (length==i){
            break;
        }
    }
    return 1; 
}
",1
shum116,1696232610,1,"int IsPalindrome(char *word)
{
	 
	int first, last, size;
	size = strlen(word);
	first = 0;
	last = size - 1;
	
 while (last > first) {
	 if (word[last] != word[first]) {
		 
		 return 0;

	 }
	 first++;
	 last--;
 }
 
 return 1;
}

int main() {
	
	char word[100];

	printf(""word: "");
	scanf(""%s"", word);

	if (IsPalindrome(word)) {
		printf(""1"");
	}
	else {
		printf(""0"");
	}

	return 0;
}

",0
shum116,1696234818,2,"int IsPalindrome(char *word)
{
    	 
	word[100];
	int first, last, size;
	size = strlen(word);
	first = 0;
	last = size-1;
	
 while (last > first) {
	 if (word[last] != word[first]) {
		 
		 return 0;

	 }
	 
	 first++;
	 last--;

	 printf(""word: "");
	 scanf(""%s"", word);
 }
 
 
 return 1;
}


",0
shum116,1696279907,3,"int IsPalindrome(char *word)
{
    int first, last, size;
size = strlen(word);
first = 0;
last = size-1;

 while (last > first) {
 if (word[last] != word[first]) {
	 return 0;
 }
 first++;
 last--;
     
 }
 return 1;
}
",1
sike083,1696638564,1,"int IsPalindrome(char *word)
{
    int start;
    int end;
    
    start = 0;
    end = strlen(word) - 1;
    
    while(start < end) {
        if (word[start] != word[end]) {
            return 0;
        }
        start ++;
        end --;
    }
    return 1;
}
",1
sjaf029,1696730220,1,"#include <stdio.h>

int IsPalindrome(char* word) {
	int length = strlen(word);
	for (int i = 0; i < length; i++) {
		if (word[i] != word[length - 1 - i]) {
			return 0;
		}
	}
	return 1;
}
",1
sjai563,1696689078,1,"int IsPalindrome(char *word)
{
int length = strlen(word);
    int start = 0 ;
    int end = length - 1 ;

    while (start < end) {
        if (word[start] != word[end]) {
            return 0 ; 
        }
        start++ ;
        end-- ;
    }

    return 1 ;    
}
",1
sjam309,1696665584,1,"int IsPalindrome(char *word)
{
    int i;
    int length;
    int halflength;
    
    i = 0;
    length = strlen(word);
    halflength = length / 2;
    
    while(i < halflength){
        if(word[i] != word[length - 1 - i]){
            return 0;
        }
        i++;
    }
 return 1;
}
",1
sjob296,1696808788,1,"int IsPalindrome(char *word)
{
    int len = strlen(str);
    for (int i = 0; i < len / 2; ++i) 
    {
        if (str[i] != str[len - 1 - i]) 
	{
            return 0;  
        }
    }
    return 1;  
}
",0
sjob296,1696815070,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char word[])
{
    int length = strlen(word);
    int i, j;
    
    for (i = 0, j = length - 1; i < j; i++, j--)
    {
        if (word [i] != word[j])
        {
            return 0;
        }
    }
    
    return 1; 
}
",1
skan221,1696809868,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int x = 0;
    int y = strlen(word) - 1;
    
    while (x < y) {
        if (word[x] != word[y]) {
            return 0;  
        }
        y--;
        x++;
    }
    return 1;  
}",1
skea516,1696317946,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word) {	
	int i = 0;
	int length;
	length = strlen(word);

	for (i = 0; i < (length / 2); i++) {
		if (word[i] != word[length - i - 1]) {
			return 0; } 
		}
	return 1;
}",1
skmu887,1696832808,1,"int IsPalindrome(char *word)
int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
    // if it is not a palindrome return a false
        }
    }
    // if it is a palindrome return a true
    return 1; 
}",0
skmu887,1696832848,2,"#include <stdio.h>
int IsPalindrome(char *word) {
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
    // if it is not a palindrome return a false
        }
    }
    // if it is a palindrome return a true
    return 1; 
}",1
skop291,1696664967,1,"#include <string.h>

int IsPalindrome(char *word) {
    int len = strlen(word);

    for (int i = 0; i < len / 2; i++) {
        if (word[i] != word[len - i - 1]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // It's a palindrome
}",1
skul970,1696300283,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    char new_arr[length];
    
    int count = 0;
    for (int j = length - 1; j >= 0; j--) {
        new_arr[count] = word[j];
        count++;
    }

    for (int index = 0; index < length; index++) {
        
        if (word[index] != new_arr[index]) {
            return 0;
        } 
        
    }
    
    
    return 1;
    }

",1
slam669,1696232476,1,"#include <stdio.h>
#include <string.h>

char IsPalindrome(char *word)
{
    int i;
    int Palidrome = 0;
    int end = strlen(word) - 1;
    char reverse[100];
    
    for (i = 0; i<= end;i++){
        reverse[i] = word[end-i];
    }
    reverse[end+1] = '\0';
    
    if (strcmp (word, reverse) == 0) {
        Palidrome = 1;
    
    }

    return Palidrome;
}

int main(void)
{
    char word[100] = ""a"";
    printf(""%d"", IsPalindrome(word));
}",0
slam669,1696232490,2,"#include <stdio.h>
#include <string.h>

char IsPalindrome(char *word)
{
    int i;
    int Palidrome = 0;
    int end = strlen(word) - 1;
    char reverse[100];
    
    for (i = 0; i<= end;i++){
        reverse[i] = word[end-i];
    }
    reverse[end+1] = '\0';
    
    if (strcmp (word, reverse) == 0) {
        Palidrome = 1;
    
    }

    return Palidrome;
}
",1
slie508,1696646354,1,"int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);

    for(int i = 0; i<length; i++) {
        if(word[i] != word[length-1-i]) {
            return 0;
        }
    }
    return 1;
}
",1
sluo487,1696808547,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i = 0;
    
    for (i = 0; i < length / 2; i++) {
        if (word[i] != word[length - i -1])
        return 0;
    }
    return 1;
}
",1
smac708,1696297455,1,"#include <stdio.h> 
#include <string.h> 

int IsPalindrome(char word[]) {  

int i; 
// find the length of the word 
int length = strlen(word); 

for (i = 0; i<length/2; i++) { 
    if (word[i] != word[length-(i+1)]) {
    return 0;
    } 
}
return 1; 
} 
",1
sman821,1696655856,1,"int IsPalindrome(char *word)
{
   int i;

    int length = strlen(word);
    char wordReverse[100];
    
    for (i = 0; i < length; i++) {
        wordReverse[length-i-1] = word[i];
    } 
    wordReverse[length] = '\0';
    
    if (strcmp(word, wordReverse) == 0) {
        return 1;
    } else {
        return 0;
    } 
}
",1
sman833,1696384100,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1; 
}",1
smck855,1696323585,1,"int IsPalindrome(char *word) {
    int len = strlen(word);
    int i = 0;
    int palindrome = 1;

    while (palindrome == 1 && i < len / 2) {
        if (word[i] == word[len - i - 1]) {
            i++;
        } else {
            palindrome = 0;
        }
    }

    return palindrome;
}",1
smou122,1696293472,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i;
    int truth = 1;
    for (i = 0; i < length; i++){
        if (word[i] != word[length-i-1]){
            truth = 0;
        }
    }
    return truth;
}
",1
smun623,1696757900,1,"int IsPalindrome(char *word)

{   int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }

    return 1;
}
",1
snas404,1696787581,1,"int IsPalindrome(char *word)
{
    int Length = strlen(word);

	int i = 0;
	int j = Length - 1;

	while (i <= Length - 1 && j >= 0) {
		if (Length == 1) {
			return 1;
		}else if (word[i] == word[j]) {
			return 1;
		}else {
			return 0;
		}
		i++;
		j--;
	}

	return 0;
}

",0
snas404,1696846180,2,"int IsPalindrome(char *word)
{
   int Length = strlen(word);
   
   int i = 0;
   
   int j = Length - 1;
   
   int LogicalAnswer = 0;
   
   while (i <= Length - 1 && j >= 0) {
       if (Length == 1) {
           LogicalAnswer = 1;
           
       }else if (Length != 1 && word[i] == word[j]) {
           LogicalAnswer  = 1;
           
       }else if (Length != 1 && word[i] != word[j]) {
           LogicalAnswer = 0;
           
       }
       i++;
       
       j--;
       
   }
   return 0;
}

",0
span558,1696213501,1,"int IsPalindrome(char *word)
{int length = strlen(word);
 int i, j;
 for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j])
            return 0;
 }
    return 1; 
}
",0
span558,1696213533,2,"int IsPalindrome(char *word)
{int length = strlen(word);
 int i, j;
 for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j])
            return 0;
 }
    return 1; 
}
",1
spar473,1696227451,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *String)
{
    int length = strlen(String);
    int left = 0;
    int right = length - 1;
    
    if (length == 1) {
        return 1;
    }
    while (left < right) {
        if (String[left] == String[right]) {
            return 1;
        } else {
            return 0;
        }
    }
    left++;
    right--;
}",0
spar473,1696227761,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *String)
{
    int length = strlen(String);
    int left = 0;
    int right = length - 1;
    
    if (length == 1) {
        return 1;
    }
    while (left < right) {
        if (String[left] == String[right]) {
            return 1;
        } else {
            return 0;
        }
    
    left++;
    right--;
    }
}",0
spar473,1696227799,3,"int IsPalindrome(char *String)
{
    int length = strlen(String);
    int left = 0;
    int right = length - 1;
    
    if (length == 1) {
        return 1;
    }
    while (left < right) {
        if (String[left] == String[right]) {
            return 1;
        } else {
            return 0;
        }
    
    left++;
    right--;
    }
}",0
spar473,1696339806,4,"int IsPalindrome(char *String)
{
    int length = strlen(String);
    int left = 0;
    int right = length - 1;
    
    if (length == 1) {
        return 1;
    }
    while (left < right) {
        if (String[left] == String[right]) {
            return 1;
        } else {
            return 0;
        }
    
    left++;
    right--;
    }
    return 0;
}
",0
spar473,1696488128,5,"int IsPalindrome(char *String)
{
    int length = strlen(String);
    int left = 0;
    int right = length - 1;
    
    if (length == 1) {
        return 1;
    }
    while (left < right) {
        if (String[left] != String[right]) {
            return 0;
        }
        left++;
        right--;
    }
    return 1;
}",1
spar820,1696815933,1,"int IsPalindrome(char *word)
{
    int wordlength = strlen(word);
  
  int i = 0;
  while (i != wordlength/2) {
      char front = word[i];
      char back = word[wordlength -1 - i];
      
      if (front != back) {
          return 0;
      }
      
    i++;
  }
  
  return 1;
}
",1
srak374,1696845671,1,"int IsPalindrome(char *word)
{
    int len = strlen(string);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (string[i] != string[j]) {
            return 0; // when not a palindrome
        }
    }
    
    return 1; 
}
",0
srak374,1696845718,2,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; // when not a palindrome
        }
    }
    
    return 1; 
}
",1
sran136,1696757077,1,"int IsPalindrome(char* word) {
	int i;
	int a;
	int result = 1;
	a = strlen(word) - 1;
	for (i = 0; i <= (strlen(word)/2); i++) {
		if (word[i] != word[a]) {
			return 0;
			break;
		}
		else {
			result = 1;
			a--;
		}

	}
	return result;
}",1
srou953,1696322918,1,"int IsPalindrome(char *word)
{
int length = strlen(str);
    
    for (int i = length - 1; i >= 0; i--) {
        if (str[i] != str[len - 1 - i]) {
            return 0; 
        }
    }

    return 1; 
}
    

",0
srou953,1696322943,2,"int IsPalindrome(char *word)
{
int length = strlen(word);
    
    for (int i = length - 1; i >= 0; i--) {
        if (word[i] != str[length - 1 - i]) {
            return 0; 
        }
    }

    return 1; 
}
    

",0
srou953,1696322956,3,"int IsPalindrome(char *word)
{
int length = strlen(word);
    
    for (int i = length - 1; i >= 0; i--) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
        }
    }

    return 1; 
}
    

",1
ssan467,1696413454,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) 
{
	for (int i = 0; i < strlen(word); i++) {
		if (word[i] == word[strlen(word) - 1 - i]) {
			return 1;
		}
		else
			return 0;
	}
}",0
ssan467,1696414397,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) 
{
	for (int i = 0; i < strlen(word); i++) {
		if (word[i] != word[strlen(word) - 1 - i]) {
			return 0;
		} 
	}
	return 1; 
}",1
ssco465,1696321128,1,"int IsPalindrome(char *word)
{
        int length = strlen(word);

    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; 
        }
    }
    return 1; 
}
",1
ssey266,1696680701,1,"int IsPalindrome(char *word)
{
       int length = strlen(word);
    int i, j;

   
    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1; 
} 
}
",0
ssey266,1696680729,2,"int IsPalindrome(char *word)
{
       int length = strlen(word);
    int i, j;

   
    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
    }

    return 1; 
} 

",1
ssiv093,1696826051,1,"int IsPalindrome(char *word)
{
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - i - 1]) {
            return 0;
        }
    }
    return 1;  
}
",0
ssiv093,1696826095,2,"int IsPalindrome(char *word)
{
      int len = strlen(word);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - i - 1]) {
            return 0;
        }
    }
    return 1;
}
}
",0
ssiv093,1696826155,3,"int IsPalindrome(char* str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
sson972,1696218496,1,"int IsPalindrome(char* word)
{
	int isTrue = 0;
	int i = 0;
	int length = strlen(word) - 1;
	while (word[i] != '\0')
	{
		if (word[i] == word[length])
		{
			isTrue = 1;
		}
		else
		{
			isTrue = 0;
		}

		length--;
		i++;
	}
	return isTrue;
}",0
sson972,1696219062,2,"int IsPalindrome(char* word)
{
	int isTrue = 0;
	int i = 0;
	int length = strlen(word) - 1;
	while (word[i] != '\0')
	{
		if (word[i] == word[length] && word[i + 1] == word[length - 1])
		{
			isTrue = 1;
		}
		else
		{
			isTrue = 0;
		}

		length--;
		i++;
	}
	return isTrue;
}",0
sson972,1696219599,3,"int IsPalindrome(char* word)
{
	int isTrue = 0;
	int i;
	int length = strlen(word) - 1;
	for (i = 0; i < length; length--,i++)
	{
		if (word[i] == word[length])
		{
			isTrue = 1;
		}
		else
		{
			isTrue = 0;
		}

		
	}
	return isTrue;
}",0
sson972,1696219989,4,"int IsPalindrome(char* word)
{
	int isTrue = 0;
	int i;
	int length = strlen(word) - 1;
	for (i = 0; i < length; length--,i++)
	{
		if (word[i] == word[length - 1])
		{
			isTrue = 1;
		}
		else
		{
			isTrue = 0;
		}

		
	}
	return isTrue;
}",0
sson972,1696301688,5,"int IsPalindrome(char* word)
{
	int isTrue = 0;
	int i = 0;
	int length = strlen(word) - 1;
	while (word[i] != '\0')
	{
		if (word[i] == word[length])
		{
			isTrue = 1;
		}
		else
		{
			isTrue = 0;
			return isTrue;
		}
		length--;
		i++;
	}
	return isTrue;
}",1
sspa275,1696368554,1,"int IsPalindrome(char *word){
    int length = strlen(word);
    for(int i = 0; i < length; i++){
        if(word[i] != word[length-i-1]){
            return 0;
        }
    }
    return 1;
}",1
ssri357,1696297080,1,"int IsPalindrome(char *word)
{
    int length;
    int i;

    length = strlen(word);

    for (i = 0; i < length; i++) {

	    if (word[i] != word[length - 1 - i]) {
		    return 0;
	    }
		
    }

return 1;
    
}
",1
steb012,1696299654,1,"int IsPalindrome(char *word)
{
    char newWord[100];
    strcpy(newWord, word);
    
    int value;
    int i = 0;
    int j = strlen(newWord) - 1;
 
    while (i < j) {
        char c = newWord[i];
        newWord[i] = newWord[j];
        newWord[j] = c;
        i++;
        j--;
    }
    
    value = strcmp(newWord, word);
  
    if (value == 0){
        return 1;
    }else {
        return 0;
    }
    
}
",1
stia357,1696302786,1,"int IsPalindrome(const char *str) 
{
    int length;
    length= 0;
    while (str[length] != '\0') {
        length++; 
    }
    
    for (int i = 0; i < length / 2; i++) {
        if (str[i] != str[length - i - 1]) {
            return 0; 
        }
    }
    
    return 1; 
}",1
sum778,1696761413,1,"int IsPalindrome(char* word)
{
	int i = 0;
	// strlen finds the length of the string, word is my array
	int length = strlen(word);
	int true_false = 1;

	while (i < length/2) {
		if (word[i] != word[length - 1 - i]) {
			true_false = 0;
		}
		i++;
	}
	
	return true_false;
}",1
sval918,1696453664,1,"int IsPalindrome(char *word){
    
    int i = 0;
    int j = strlen(word) - 1;//length of string -1 because of null character
    
    while(i < j) {
        if (word[i] != word[j]){
            return 0;
        }
        i++;
        j--;
    }
    
    return 1;
}
",1
swan472,1696733811,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;  // Not a palindrome
        }
    }

    return 1;  // Palindrome
}",1
sweb390,1696308387,1,"int IsPalindrome(char *word)
{
    int length;
    int i;
    int palindrome;
    int comparisons;
    
    length = strlen(word);
    comparisons = length / 2; 
    palindrome = 1;
    
    i = 1;
    while (i <= comparisons) {
    	if (word[i-1] != word[length - i]) {
    		palindrome = 0;
    	}
    	i++;
    }
    return palindrome;
}
",1
swil676,1696756867,1,"int IsPalindrome(char *word)
{
   int length = strlen (word);


    for (int i = 0; i < length/2; i++, length--) {
        int string = word[i];
        if (word [i] != word [length -1]){
            return 0;   
        }
    
    }
    return 1; 
}
",0
swil676,1696757009,2,"int IsPalindrome(char *word)
{
    int length = strlen (word);


    for (int i = 0; i < length/2; i++, length--) {
        if (word [i] != word [length -1]){
            return 0;   
        }
    
    }
    return 1;
}
",1
syok443,1696207531,1,"int IsPalindrome(char *word){

    int length;
    int i, j;
    char strtChar, endChar;

    char rearranged[100];
    
    length = strlen(word);

    j = length - 1;
    for(i = 0; i < (length / 2 + 1); i++){
        
        strtChar = word[i];
        endChar = word[j];

        rearranged[i] = endChar;
        rearranged[j] = strtChar;

        j--;
    }
    rearranged[length] = '\0';
    
    if (strcmp(rearranged,word)){
        return 0;
    } else {
        return 1;
    }
    
}",1
syua841,1696833539,1,"int IsPalindrome(char *word)
{
    int left = 0;
    int right = strlen(str) - 1;

    while (left < right) {
        char leftCharacter = tolower(word[left]);
        char rightCharacter = tolower(word[right]);

        if (leftChar != rightChar){
            return false
        left++;
        right--;
    }

    return true; 
}
",0
syua841,1696833772,2,"int IsPalindrome(char *word)
{
    int left = 0;
    int right = strlen(word) - 1;

    while (left < right) {
        char leftChar = tolower(word[left]);
        char rightChar = tolower(word[right]);

        if (leftChar != rightChar) {
            return false; 
        }
        left++;
        right--;
    }

    return true;
}
",1
szen566,1696298506,1,"int IsPalindrome(char* word)
{
	int i = 0;
	int position = 0;

	// Go thru the word, find the null, and store position of letter at end of the string
	while (word[i] != '\0') {
		position++;
		i++;
	}

	// Compare of letter i and letter position - i
	for (i = 0; i < position; i++) {
		if (word[i] != word[position - i - 1]) {
			return 0;
		} 
		else {
		}
	}
	return 1;

}",1
szho466,1696834668,1,"int IsPalindrome(char *word)
{
    
int len=strlen(word);


    if (len<3){
        return 1;
    }
    for (int i=0; i<len; i++){
        if (word[i]==word[len-i-2]){
        }
        else{
        return 0;
        }
    }
    return 1;
}

    

",0
szho466,1696834925,2,"int IsPalindrome(char *word)
{
int len=strlen(word);

    if (len<2){
        return 1;
    }
    for (int i=0; i<len; i++){
        if (word[i]!=word[len-i-1]){
            return 0;
        }
    }
    return 1;
}    ",1
tais804,1696296319,1,"int IsPalindrome(char *word)
{
    int i, length, isPalindrome;

    i = 0;
    length = 0;

        while (word[length] != '\0') {
        length++;
        }
    
    if (length == 1) {
        return 1;
    }

    for (i = 0; i <= length/2; i++) {
        if (word[length - 1 - i] != word[i]){
            return 0;
        }
    }
    return 1;
}
",0
tais804,1696296336,2,"int IsPalindrome(char *word)
{
    int i, length;

    i = 0;
    length = 0;

        while (word[length] != '\0') {
        length++;
        }
    
    if (length == 1) {
        return 1;
    }

    for (i = 0; i <= length/2; i++) {
        if (word[length - 1 - i] != word[i]){
            return 0;
        }
    }
    return 1;
}
",1
tbad483,1696758522,1,"int IsPalindrome(char *word)
{
    int length = strlen(word), i, pale = 1;
    int end = length - 1;
    for (i = 0; i < length/2; i++){
        if (word[i] != word[end]){
            pale = 0;
        }
        end--;
    }
    return pale;
}",1
tbar968,1696652973,1,"int IsPalindrome(char *word){
	int length;
	length = strlen(word);

	int i;

	for (i = 0; i <= length / 2; i++) {
		if (word[i] != word[length - 1 - i])
			return 0;
	}
	return 1;
}
",1
tbar971,1696297441,1,"int IsPalindrome(char *word)
{
    int wordLength = strlen(word);
    int i;
    for (i = 0; i < wordLength-1; i++)
    {
	    if (word[i] != word[wordLength - i - 1]) {
		return 0;
	    }
	    }
    return 1;
    
}
",1
tbas606,1696830417,1,"/*The function IsPalindrome checks if a given string is a palindrome
Author: Taha Basar
*/

#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    int start = 0;
    int end = length - 1;

    while (left < right) {
        if (word[left] != word[right]) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }

    return 1; // Palindrome
}",0
tbas606,1696830479,2,"/*The function IsPalindrome checks if a given string is a palindrome
Author: Taha Basar
*/

#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    int start = 0;
    int end = length - 1;

    while (start < end) {
        if (word[start] != word[end]) {
            return 0; // Not a palindrome
        }
        start++;
        end--;
    }

    return 1; // Palindrome
}",1
tbed601,1696416181,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word) {

    int i, j, Length, yes;
    int count = 0;

    Length = strlen(word);

    for (i = 0; i < Length; i++) {
        for (j = Length - 1; j >= 0; j--) {
            if (word[i] == word[j]) {
                count++;
            }
        }
    }

    if (count = Length / 2 || count == 1) {
        yes = 1;
    }

    else {
        yes = 0;
    }

    return yes;
}

int main()
{
    char word[100] = ""aaaabbaaaa"";
    printf(""%d"", IsPalindrome(word));

    return 0;
}",0
tbed601,1696455695,2,"int IsPalindrome(char *word)
{
    int Length, yes;

    Length = strlen(word);

    int j = Length - 1;
    for (int i = 0; i < Length; i++) {
        if (word[i] == word[j]) {
            yes = 1;
        }

        else {
            yes = 0;
        }
        j--;
    }
    return yes;
}
",0
tbed601,1696455982,3,"int IsPalindrome(char *word)
{
    int Length, yes;

    Length = strlen(word);

    int j = Length - 1;
    for (int i = 0; i < Length; i++) {
        if (word[i] == word[j]) {
            yes = 1;
        }

        else {
            yes = 0;
            break;
        }
        j--;
    }
    return yes;
}
",1
tbri557,1696797591,1,"int IsPalindrome(char *word){
    int i, j;
    i = 0;
    j = strlen(word) - 1;
    while (i < j){
        if (word[i] != word[j]){
            return 0;
        }
        
        i++;
        j--;
    }
    return 1;
    
}",1
tche867,1696746539,1,"int IsPalindrome(char *word)
{
   	int j;
	int half;
	int length = 0;
	while (word[length] != '\0')
	{
		length++;
	}
	j = length - 1;
	half = length / 2;
	if (length % 2 == 0)
	{
		half = half - 1;
	}
	for (int i = 0; i <= half; i++)
	{
		// perform swap
		if (word[i] != word[j])
		{
			return 0;
		}
		j--;
	}
	return 1; 
}
",1
tcoo725,1696678092,1,"int IsPalindrome(char *word)
{
    int i;
    int not = 0;
    
    length = strlen(word);
    
    
    for (i = 0; i < length/2; i++)
    {
        if (word[i] == word[length - i - 1])
        {
            p = 1;
            
        }
        else (word[i] != word[length - i - 1])
        {
            p = 0;
            break;
        }
            
    }
    
    if (p)
    {
    
        printf (""%s"" , p);
    }
    else
    {
        printf (""%s"" , p);
    }
}

",0
tcoo725,1696678448,2,"int IsPalindrome(char *word)
{
    int i;
    int p = 0;
    int length;
    
    
    
    length = strlen(word);
    
    
    for (i = 0; i < length; i++)
    {
        if (word[i] == word[length - i - 1])
        {
            p = 1;
            
        }
        else (word[i] != word[length - i - 1]);
        {
            return p;
            break;
        }
            
    }
}
",0
tcoo725,1696679148,3,"int IsPalindrome(char *word)
{
    int i;
    int p;
    int length;
    
    
    
    length = strlen(word);
    
    
    for (i = 0; i < length; i++)
    {
        if (word[i] != word[length - i - 1])
        {
            return p = 0;
        }
        else if (word[i] == word[length - i - 1]);
        {
           return p = 1;
    }
            
    }
}
",0
tcoo725,1696679158,4,"int IsPalindrome(char *word)
{
    int i;
    int p;
    int length;
    
    
    
    length = strlen(word);
    
    
    for (i = 0; i < length; i++)
    {
        if (word[i] != word[length - i - 1])
        {
            return p = 0;
        }
        else  (word[i] == word[length - i - 1]);
        {
           return p = 1;
    }
            
    }
}
",0
tcoo725,1696679229,5,"int IsPalindrome(char *word)
{
    int i;
    int p;
    int length;
    
    
    
    length = strlen(word);
    
    
    for (i = 0; i < length; i++)
    {
        if (word[i] != word[length - i - 1])
        {
            return p = 0;
        }
        else  
        {
           return p = 1;
        }
            
    }
}
",0
tcoo725,1696722920,6,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i;
    int p;
    int length;

    length = strlen(word);
    
        if (word[i] == word[length - i - 1])
        {
            return p = 1;
        }
        else 
        {
           return p = 0;
        }
            

}",0
tcoo725,1696722930,7,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i = 0;
    int p;
    int length;

    length = strlen(word);
    
        if (word[i] == word[length - i - 1])
        {
            return p = 1;
        }
        else 
        {
           return p = 0;
        }
            

}",0
tcoo725,1696806789,8,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i;
    int p;
    int length;

    length = strlen(word);
    
  
    
    for (i = 0; i < length; i++){
        
        if (word[i] != word[length - i - 1])
        {
            return 0;
        }
         
    }
           return 1;
        
}",0
tcoo725,1696806802,9,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int i;
    int length;

    length = strlen(word);
    
  
    
    for (i = 0; i < length; i++){
        
        if (word[i] != word[length - i - 1])
        {
            return 0;
        }
         
    }
           return 1;
        
}",1
tdha392,1696845306,1,"int IsPalindrome(char *word)
{
    int last, first;
    
    last = strlen(word) - 1;
    first = 0;
    
    while (last > first) {
        if (word[first] == word[last]) {
            first++;
            last--;
        }
        else {
            return 0;
        }
    return 1;
}
",0
tdha392,1696845904,2,"int IsPalindrome(char *word)
{
    int last, first;
    
    last = strlen(word) - 1;
    first = 0;
    
    while (first < last) {
        if (word[first] == word[last]) {
            first++;
            last--;
        }
        else {
            return 0;
        }
        
    }
    return 1;
}",1
tdic873,1696296497,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int halflen = 0;
    if (length % 2 == 0) halflen = length / 2;
    if (length % 2 == 1) halflen = (length - 1) / 2;

    printf(""%d %d \n"", length, halflen);

    for (int i = 0; i < halflen; i++)
    {
        if (word[i] != word[length - 1 - i]) break;
        if (i == halflen - 1) return 1;
    }
    return 0;
}
",0
tdic873,1696296509,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int halflen = 0;
    if (length % 2 == 0) halflen = length / 2;
    if (length % 2 == 1) halflen = (length - 1) / 2;

    for (int i = 0; i < halflen; i++)
    {
        if (word[i] != word[length - 1 - i]) break;
        if (i == halflen - 1) return 1;
    }
    return 0;
}
",0
tdic873,1696296551,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int halflen = 0;
    if (length % 2 == 0) halflen = length / 2;
    if (length % 2 == 1) halflen = (length - 1) / 2;

    if (length == 1) return 1;

    for (int i = 0; i < halflen; i++)
    {
        if (word[i] != word[length - 1 - i]) break;
        if (i == halflen - 1) return 1;
    }
    return 0;
}
",1
tdon950,1696668275,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int l = strlen(word);
    int i = 0;
    int j = l;
    
    for (i = 0; i < l; i++) 
    { 
        if (word[i] != word[l - i]) 
        {
            return 0;
        }
    }
    return 1;
}

int main()
{
    char word[100] = ""abbc"";
printf(""%d"", IsPalindrome(word));

    return 0;
}",0
tdon950,1696668314,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int l = strlen(word);
    int i = 0;
    
    for (i = 0; i < l; i++) 
    { 
        if (word[i] != word[l - i]) 
        {
            return 0;
        }
    }
    return 1;
}
",0
tdon950,1696668412,3,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int l = strlen(word) - 1;
    int i = 0;

    for (i = 0; i < l; i++) 
    { 
        if (word[i] != word[l - i]) 
        {
            return 0;
        }
    }
    return 1;
}
",1
tdu824,1696761576,1,"int IsPalindrome(char *word)
{
      int i, j, x;
    i = 0;
    x = 0;
    while (word[i] != '\0') {
    i++;
    }

    for (int j=0 ; j < i ; j++) {
        if (word[j] == word[i-j-1]){
            x = 1;
        } else {
                x = 0;
        }
        
    }


    return x;  
}
",0
tdu824,1696761636,2,"int IsPalindrome(char *word)
{
    int i, j, x;
    i = 0;
    x = 0;
    j = 0;
    while (word[i] != '\0') {
    i++;
    }

    for (int j=0 ; j < i ; j++) {
        if (word[j] == word[i-j-1]){
            x = 1;
        } else {
                x = 0;
        }
        
    }


    return x;
}
",0
tdu824,1696762122,3,"int IsPalindrome(char *word)
{
    int i, x;
    i = 0;
    x = 0;
    while (word[i] != '\0') {
    i++;
    }

    for (int j=0 ; j < i ; j++) {
        if (word[j] == word[i-j-1]){
            x = 1;
        } else {
            x = 0;
        }
        
    }


    return x;
}",0
tdu824,1696762225,4,"int IsPalindrome(char *word)
{
    int i, x;
    i = 0;
    x = 0;
    while (word[i] != '\0') {
    i++;
    }

    for (int j=0 ; j < i ; j++) {
        if (word[j] == word[i-j-1]){
            x = 1;
        } else {
            x = 0;

            break;
        }
        
    }


    return x;
}",1
tfai092,1696751312,1,"int IsPalindrome(char *word)
{
    
    int left = 0;
    int right = strlen(word) - 1;

    while (left < right) {
        
        if (word[left] != word[right]) {
            return 0;
        }
        
        left = left + 1;
        right = right + 1;
    }

    return 1;
}
",0
tfai092,1696751422,2,"int IsPalindrome(char *word)
{
    
    int left = 0;
    int right = strlen(word) - 1;

    while (left < right) {
        
        if (word[left] != word[right]) {
            return 0;
        }
        
        left = left + 1;
        right = right - 1;
    }

    return 1;
}
",1
tfai653,1696297078,1,"int IsPalindrome(char *word) {
    // Define variables
    int length = 0;
    int i = 0;
    int count = 1;
    
    // Find the length of the string array.
    while (word[i] != '\0') {
        i++;
        length++;
    }

    // Check to see if any of the characters do not match.
    for (i = 0; i < length; i++) {
        if (word[i] != word[length - count]) {
            return 0;
        }
        count++;
    }
    // Otherwise return 1 i.e the word is a palindrome.
    return 1;
}",1
tfru173,1696843760,1,"#include <stdio.h>

int IsPalindrome(char *word)
{
    int lengthStr = strlen(word);
    int left = 0;
    int right = lengthStr - 1;

    while (left < right) 
    {
        if (word[left] != word[right]) 
        {
            return 0;
        }
        left++;
        right--;
    }
    return 1; 
}
",1
thal182,1696210439,1,"int IsPalindrome(char *word)
{
    int length = strlen(str);
    int i;

    for (i=0; i<length/2; i++) {
        if (str[i] != str[length-i-1]) {
            return 0;
        }
    }
    return 1;
}
",0
thal182,1696210491,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i;

    for (i=0; i<length/2; i++) {
        if (word[i] != word[length-i-1]) {
            return 0;
        }
    }
    return 1;
}
",1
thar970,1696245929,1,"int IsPalindrome(char *word){
    int length=sizeof(word)/sizeof(char);
    int left=0,right=length-1;
    if(length%2==0){
        while(right>left){
            if(*(word+left)!=*(word+(right))){
                return 0;
            }
            left++;
            right--;
        }
        return 1;
    }else{
        while(right>left+1){
            if(*(word+left)!=*(word+(right))){
                return 0;
            }
            left++;
            right--;
        }
        return 1;
    }
    
}",0
thar970,1696246451,2,"int IsPalindrome(char *word){
    int length=strlen(word);
    int left=0,right=length-1;
    if(length%2==0){
        while(right>left){
            if(*(word+left)!=*(word+(right))){
                return 0;
            }
            left++;
            right--;
        }
        return 1;
    }else{
        while(right>left+1){
            if(*(word+left)!=*(word+(right))){
                return 0;
            }
            left++;
            right--;
        }
        return 1;
    }
    
}",1
thid924,1696664908,1,"int IsPalindrome(char *word)
{
    	//if palindrome then return 1
	// if not then return 0

	//Note that the strlen() function doesn't count the null character \0 while calculating the length.
	int length = strlen(word);
	int checker;

	for (int i = 0; i < length; i++) {

		if (word[i] == word[length - 1]) {
			checker = 1;
		}

		else {
			checker = 0;
			break;
		}

		length--;

	}
	return checker;
}
",1
thua238,1696651806,1,"int IsPalindrome(char *word)
{
    for(int i=0; i<strlen(word); i++) {
        //if symmetry not met -> not palindrome
        if (word[i] != word[strlen(word)-1-i]) {
            return 0;
        }
    }

    return 1;
}
",1
thut580,1696305025,1,"int IsPalindrome(char *word)
{
	int i;
	int Length = strlen(word);
	for (i = 0; i < Length; i++) {
		if (word[i] != word[Length - 1 - i]) {
			return 0;
		}
	}
	return 1;
}",1
tkan918,1696396997,1,"int IsPalindrome(char *word)
{
    //find the length of the word input
    int i = 0;
    int count = 0;
    int pal = 0;

    while (word[i] != '\0') {
        i = i+1;
    }
    //If i is equal to 1
    if(i == 1){
        return 1; 
    } 
    //If i is even
    else if(i%2 == 0){
        count = 0;
        for(i; count<=(i/2); count++){
            if(word[i-1] != word[count]){
                return 0;
            }
            else{
                i--;
            }
        }
        return 1;
    }
    //If i is odd
    else if(i%2 == 1){
        count = 0;
        for(i; count<=((i-1)/2); count++){
            if(word[i-1] != word[count]){
                return 0;
            }
            else{
                i--;
            }
        }   
        return 1;
    }
    //error
    else {
        return -1;
    }
}
",0
tkan918,1696397567,2,"int IsPalindrome(char *word)
{
    //find the length of the word input
    int i = 0;
    int count = 0;
    while (word[i] != '\0') {
        i = i+1;
    }

    //If i is equal to 1
    if(i == 1){
        return 1; 
    } 
    //If i is even
    else if(i%2 == 0){
        count = 0;
        for(; count<=(i/2); count++){
            if(word[i-1] != word[count]){
                return 0;
            }
            else{
                i--;
            }
        }
        return 1;
    }
    //If i is odd
    else if(i%2 == 1){
        count = 0;
        for(; count<=((i-1)/2); count++){
            if(word[i-1] != word[count]){
                return 0;
            }
            else{
                i--;
            }
        }   
        return 1;
    }
}
",0
tkan918,1696397690,3,"int IsPalindrome(char *word)
{
    //find the length of the word input
    int i = 0;
    int count = 0;
    while (word[i] != '\0') {
        i = i+1;
    }

    //If i is equal to 1
    if(i == 1){
        return 1; 
    } 
    //If i is even
    else if(i%2 == 0){
        count = 0;
        for(; count<=(i/2); count++){
            if(word[i-1] != word[count]){
                return 0;
            }
            else{
                i--;
            }
        }
        return 1;
    }
    //If i is odd
    else if(i%2 == 1){
        count = 0;
        for(; count<=((i-1)/2); count++){
            if(word[i-1] != word[count]){
                return 0;
            }
            else{
                i--;
            }
        }   
        return 1;
    }
    else {
        return 0;
    }
}
",1
tlal352,1696827446,1,"int IsPalindrome(char *word)
{
    int firstletter = 0;
    int lastletter = strlen(word) - 1;;
    int x;

    while (firstletter < lastletter) {
        if (word[firstletter] == word[lastletter]){
            firstletter++;
            lastletter--;
        }
        else 
        return 0;
    }
    return 1;    
}",0
tlal352,1696827501,2,"int IsPalindrome(char *word)
{
    int firstletter = 0;
    int lastletter = strlen(word) - 1;

    while (firstletter < lastletter) {
        if (word[firstletter] == word[lastletter]){
            firstletter++;
            lastletter--;
        }
        else 
        return 0;
    }
    return 1;    
}",1
tlin438,1696328934,1,"int IsPalindrome(char *word)
{
   int len=strlen(word);
   int i;
     for(i=0;i<len/2;i++){
        if(word[i]!=word[len-1-i]){
           return 0;
        }
     }
   return 1;
}
",1
tlu253,1696301342,1,"int IsPalindrome(char *word)
{
    //find length of word
    int length;
    length = strlen(word);

    //while iterate through each index in the left HALF of the string
    int finInd; //final index that you iterate thru
    finInd = length/2;

    int lasInd; //the index position of last letter in the word
    lasInd = length - 1;

    /*check whether the character is the same as the character in the
    (last index minus current index)*/
    int i;
    for (i = 0; i < finInd; i++) {
        if (word[i] != word[lasInd-i]) {
            return 0;
        }
    } 

    return 1;

}",1
tluu816,1696648321,1,"int IsPalindrome(char* word)
{
	int length = strlen(word) - 1;
	for (int i = 0; i < length / 2; i++) {
		// compares first value + 1to the last value -1, whenever this is false it instantly returns 0.
		if (word[i] == word[length - i - 1]) {
			
		} else {
			return 0;
		}
		return 1;
		
	}
}",0
tluu816,1696707957,2,"int IsPalindrome(char* word)
{
	int length = strlen(word) - 1;
	for (int i = 0; i < length/2; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}
	return 1;
}",0
tluu816,1696708468,3,"int IsPalindrome(char* word)
{
	int length = strlen(word) - 1;
	for (int i = 0; i < length/2 + 1; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}
	return 1;
}",1
tman942,1696646268,1,"int IsPalindrome(char *word)
{
    #include <stdio.h>
#include <stdbool.h>
#include <string.h>

bool IsPalindrome(const char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return false; // Not a palindrome
        }
    }

    return true; // It's a palindrome
}
}
",0
tman942,1696646280,2,"int IsPalindrome(char *word)

    #include <stdio.h>
#include <stdbool.h>
#include <string.h>

bool IsPalindrome(const char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return false; // Not a palindrome
        }
    }

    return true; // It's a palindrome

}
",0
tman942,1696646378,3,"int IsPalindrome(char *word)

#include <stdio.h>
#include <stdbool.h>
#include <string.h>
{
bool IsPalindrome(const char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (str[i] != str[j]) {
            return false; // Not a palindrome
        }
    }

    return true; // It's a palindrome
 
}
",0
tman942,1696646629,4,"#include <stdio.h>
#include <stdbool.h>
#include <string.h>

bool IsPalindrome(const char *str) {
    int length = strlen(str);

    for (int i = 0; i < length / 2; i++) {
        if (str[i] != str[length - i - 1]) {
            return false; // Not a palindrome
        }
    }

    return true; // It's a palindrome
}
",1
tmcl219,1696403050,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i < length/2; i++) {
        if(word[i] != word[length - i - 1]) {
            return 0;
        }
    }
    return 1;
}",1
tmen190,1696217306,1,"/* IsPalindrome tests if a word is a palindrome */

int IsPalindrome(char *word) {
	// Declare variables
	int length = strlen(word);
	int halfLength = length / 2;

	// Check each element in the first half of the word
	for (int i = 0; i < halfLength; i++)
	{
		// Check if it matches the otherside
		if (word[i] != word[length - 1 - i])
		{
			return 0;
		}
	}

	// If all letters matches, it is a palindrome
	return 1;
}
",1
tmir110,1696830940,1,"// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    int half_length;
    half_length = length / 2;

    for (int i = 0; i < half_length; i++) {
        if (word[i] == word[length - i - 1]) {
            return 1;
        }
    }
    
    return 0;
}",0
tmir110,1696831345,2,"// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    int half_length;
    half_length = length / 2;
    
    int end;
    end = length - 1;
    
    int i = 0;
    int j = 0;
    
    if (length <= 1) {
        return 1;
    }
    
    while (i < end) {
        if (word[i] == word[end]) {
            return 1;
        }
        i++;
        j++;
    }
    
    return 0;
}",0
tmir110,1696831363,3,"// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int end;
    end = length - 1;
    
    int i = 0;
    int j = 0;
    
    if (length <= 1) {
        return 1;
    }
    
    while (i < end) {
        if (word[i] == word[end]) {
            return 1;
        }
        i++;
        j++;
    }
    
    return 0;
}",0
tmir110,1696832393,4,"// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length / 2;
    
    if (length == 1) {
        return 1;
    }
    
    int end = length - 1;
    
    while (end > half_length) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] == word[end]) {
                return 1;
                end--;
            }
            if (word[i] != word[end]) {
                return 0;
            }
        }
}
}",0
tmir110,1696832492,5,"// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length / 2;
    
    if (length == 1) {
        return 1;
    }
    
    int end = length - 1;
    
    while (end > half_length) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] == word[end]) {
                return 1;
                end--;
            }
            if (word[i] != word[end]) {
                return 0;
            }
        }
    }
}",0
tmir110,1696832749,6,"// Online C compiler to run C program online
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length / 2;
    
    if (length == 1) {
        return 1;
    }
    
    int end = length - 1;
    
    while (end > half_length) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] == word[end]) {
                return 1;
                end--;
            }
            
            else if (word[i] != word[end]) {
                return 0;
            }
        }
    }
}",0
tmir110,1696832946,7,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length / 2;
    
    if (length == 1) {
        return 1;
    }
    
    int end = length - 1;
    
    while (end > half_length) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] == word[end]) {
                return 1;
                end--;
            }
            return 0;
        }
    }
}",0
tmir110,1696833119,8,"// Online C compiler to run C program online
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length / 2;
    
    if (length == 1) {
        return 1;
    }
    
    int end = length - 1;
    
    while (end > half_length) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] == word[end]) {
                return 1;
                end--;
            } else {
                return 0;
            }
        }
    }
}
",0
tmir110,1696834124,9,"#include <stdio.h>


int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length / 2;
    
    if (length == 1) {
        return 1;
    }
    
    int end = length - 1;
    
    while (end > half_length) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] == word[end]) {
                return 1;
                end--;
            } else {
                return 0;
            }
        }
    }
}
",0
tmir110,1696838638,10,"// Online C compiler to run C program online
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length / 2;
    
    if (length == 1) {
        return 1;
    }
    
    int end = length - 1;
    
    while (end > half_length) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] == word[end]) {
                return 1;
            }
            end--;
            return 0;
        }
    }
}",0
tmir110,1696848590,11,"// Online C compiler to run C program online
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length / 2;
    
    if (length == 1) {
        return 1;
    }
    
    for (int end = length - 1; end > half_length; end--) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] != word[end]) {
                return 0;
            }
        }
    }
    
    return 1;
}",0
tmir110,1696848696,12,"// Online C compiler to run C program online
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length - 1 / 2;
    
    if (length == 1) {
        return 1;
    }
    
    for (int end = length - 1; end > half_length; end--) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] != word[end]) {
                return 0;
            }
        }
    }
    
    return 1;
}",0
tmir110,1696848888,13,"// Online C compiler to run C program online
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length - 1 / 2;
    
    if (length == 1) {
        return 1;
    }
    
    if (length == 2) {
        if (word[0] != word[1]) {
            return 0;
        }
    }
    
    for (int end = length - 1; end > half_length; end--) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] != word[end]) {
                return 0;
            }
        }
    }
    
    return 1;
}",0
tmir110,1696848911,14,"// Online C compiler to run C program online
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length - 1 / 2;
    
    if (length == 1) {
        return 1;
    }
    
    if (length == 2) {
        if (word[0] != word[1]) {
            return 0;
        }
    }
    
        if (length == 3) {
        if (word[0] != word[2]) {
            return 0;
        }
    }
    
    for (int end = length - 1; end > half_length; end--) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] != word[end]) {
                return 0;
            }
        }
    }
    
    return 1;
}",0
tmir110,1696848928,15,"// Online C compiler to run C program online
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    
    int half_length = length - 1 / 2;
    
    if (length == 1) {
        return 1;
    }
    
    if (length == 2) {
        if (word[0] != word[1]) {
            return 0;
        }
    }
    
        if (length == 3) {
        if (word[0] != word[2]) {
            return 0;
        }
    }
    
        if (length == 5) {
        if (word[0] != word[4]) {
            return 0;
        }
    }
    
    for (int end = length - 1; end > half_length; end--) {
        for (int i = 0; i < half_length; i++) {
            if (word[i] != word[end]) {
                return 0;
            }
        }
    }
    
    return 1;
}",0
tmir110,1697164271,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    int end = length - 1;
    
    if (length == 1) {
        return 1;
    }
    
    for (int i = 0; i < end; i++) {
        if (word[i] != word[end]) {
            return 0;
        }
        
        end--;
    }

    return 1;
}",1
tmun974,1696491770,1,"int IsPalindrome(char *word)
{
int length= strlen(word);
int i,j;

for (i=0; i< length/2; i++){
    if (word[i] != word[-i-1]){
        return 0;
    
    }
}
return 1
    
}
",0
tmun974,1696491800,2,"int IsPalindrome(char *word)
{
int length= strlen(word);
int i;

for (i=0; i< length/2; i++){
    if (word[i] != word[-i-1]){
        return 0;
    
    }
}
return 1;
    
}
",0
tmun974,1696662795,3,"int IsPalindrome(char *word)
{
int length = strlen(word);
int x=0;
int y= length-1;

while (x<y){
    if (word[x] != word[y]){
        return 0;
    }
    x++;
    y--;
}
return 1;

}
",1
tpan328,1696291237,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) - 1;
    int half = (length - length%2) / 2;

    for (int i = 0; i <= half; i++) {
        if (word[i] == word[length - i]) {
            i++;
        } else {
            return 0;
        }
    }
    return 1; 
}
",1
tpat456,1696210866,1,"int IsPalindrome(char *word)
{
  int i = 0,length;
  while (word[i] != '\0') {
    i++;
  }
 length = i;
 i = 0;
 int Palindrome = 0,count = 0,j = 1;
 for (i = 0; i < length/2; i++) {
   if (word[i] == word[length - j]) {
     count++;
   }
   j++;
 }
 if (count == length/2){
   Palindrome = 1;
 }
 return Palindrome;
}
",1
tpil529,1696243136,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int halfway = length/2;
    int binary;
    int i = 0;
    int end = length - 1;
    int j = end;
    char firsthalf[halfway+1];
    char secondhalf[halfway+1];

    if (length % 2 == 0) {

        while (i< halfway){

            firsthalf[i] = word[i];

            i++;


        }

        i = 0;

        while (j >= halfway){

            secondhalf[i] = word[j];

            j--;
            i++;

        }

        binary = strcmp(firsthalf,secondhalf);

    }
    else {

        while (i< halfway){

            firsthalf[i] = word[i];

            i++;


        }

        i = 0;

        while (j > halfway){

            secondhalf[i] = word[j];

            j--;
            i++;

        }

        binary = strcmp(firsthalf,secondhalf);

    }
if (binary == 0){

    binary = 1;
}
else {

    binary = 0;
}

return binary;
}
",0
tpil529,1696243771,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int halfway = length/2;
    int binary;
    int i = 0;
    int end = length - 1;
    int j = end;
    char firsthalf[halfway];
    char secondhalf[halfway];

    if (length % 2 == 0) {

        while (i< halfway){

            firsthalf[i] = word[i];

            i++;


        }

        i = 0;

        while (j >= halfway){

            secondhalf[i] = word[j];

            j--;
            i++;

        }

        binary = strcmp(firsthalf,secondhalf);

    }
    else {

        while (i< halfway){

            firsthalf[i] = word[i];

            i++;


        }

        i = 0;

        while (j > halfway){

            secondhalf[i] = word[j];

            j--;
            i++;

        }

        binary = strcmp(firsthalf,secondhalf);

    }
if (binary == 0){

    binary = 1;
}
else {

    binary = 0;
}

return binary;
}
",0
tpil529,1696378358,3,"int IsPalindrome(char *word)
{
    int i,j,length,binary;
    length = strlen(word);
    i =0;
    j = length - 1;
    char firsthalf[(length/2)], secondhalf[(length/2)];

    while (i<=j){

        firsthalf[i] = word[i];
        secondhalf[i] = word[j];

        i++;
        j--;



    }
binary = strcmp(firsthalf,secondhalf);

if (binary == 0){

    binary = 1;

}
else {

    binary = 0;
}

return binary;
}
",0
tpil529,1696646838,4,"int IsPalindrome(char *word)
{
    int i,j,length,binary;
    length = strlen(word);
    i =0;
    j = length-1;
    char firsthalf[(length/2)+1];
    char secondhalf[(length/2)+1];

    for (int k = 0;k <((length/2)+1); k++)
    {
        firsthalf[k] = '\0';
        secondhalf[k] = '\0';

    }


    while (i<=j){

        firsthalf[i] = word[i];
        secondhalf[i] = word[j];

        i++;
        j--;



    }
binary = strcmp(firsthalf,secondhalf);

if (binary == 0){

    binary = 1;

}
else {

    binary = 0;
}

return binary;
}
",0
tpil529,1696655244,5,"int IsPalindrome(char *word)
{
    int i,j,length,binary;
    length = strlen(word);
    i =0;
    j = length-1;
    
    if (length == 1) {
        
        length += 1;
    }
    
    char firsthalf[(length/2)+1];
    char secondhalf[(length/2)+1];
    
    for (int k = 0;k <((length/2)+1); k++)
    {
        firsthalf[k] = '\0';
        secondhalf[k] = '\0';
        
    }
    

    while (i<=j){
        
        firsthalf[i] = word[i];
        secondhalf[i] = word[j];

        i++;
        j--;



    }
printf("" '%s' '%s'\n"", firsthalf, secondhalf);
for (int i = 0; i < (length/2)+1; i++)
{
    if (firsthalf[i] != secondhalf[i])
    {
        return 0;
    }
}

return 1;
}
",0
tpil529,1696655295,6,"int IsPalindrome(char *word)
{
    int i,j,length;
    length = strlen(word);
    i =0;
    j = length-1;
    
    if (length == 1) {
        
        length += 1;
    }
    
    char firsthalf[(length/2)+1];
    char secondhalf[(length/2)+1];
    
    for (int k = 0;k <((length/2)+1); k++)
    {
        firsthalf[k] = '\0';
        secondhalf[k] = '\0';
        
    }
    

    while (i<=j){
        
        firsthalf[i] = word[i];
        secondhalf[i] = word[j];

        i++;
        j--;



    }
    
for (int i = 0; i < (length/2)+1; i++)
{
    if (firsthalf[i] != secondhalf[i])
    {
        return 0;
    }
}

return 1;
}
",1
tpra228,1696828428,1,"int IsPalindrome(char *word)
{
    int i;
    int length = strlen(word);
    
    for(i = 0; i < length; i++){
        if(word[i] != word[length - 1 - i]){
            return 0;
        }
    }
    return 1;
}
",1
tpur744,1696239151,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for(int i = 0;i < length;i++){
        if (word[i] != word[length - 1 - i]){
            return 0;
        }
    }
    return 1;
}",1
tqhu735,1696226856,1,"int IsPalindrome(char* word)
{
	int a, length, i;
	a = 1;
	length = strlen(word) - 1;

	for (i = 0; i < length; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}
	
	if (a == 1) {
		return 1;
	}
}",0
tqhu735,1696227074,2,"int IsPalindrome(char *word)
{
	int a, length, i;
	a = 1;
	length = strlen(word) - 1;

	for (i = 0; i < length; i++) {
		if (word[i] != word[length - i]) {
			return 0;
		}
	}

	return a;
}",1
tron042,1696302881,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int i, j;
    
    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        }
        else { 
            return 1; 
        } 
    }
    return 1; 
}",0
tron042,1696302960,2,"int IsPalindrome(char *word) {
    int length = strlen(word);
    int i, j;
    
    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; 
        } 
    }
    return 1; 
}",1
tsan986,1696302832,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int j = 0;
    if (length % 2 == 1)
    {
        j = 1;
    }
    
    for (int i = 0; i < length/2 - j; i++) 
    {
          if (word[i] != word[length-(i + 1)]){
              return 0;
          }
          
    }
    return 1;
}
",0
tsan986,1696303088,2,"int IsPalindrome(char *word)
{
  int IsPalindrome(char *word)
{
    int length = strlen(word);

    
    for (int i = 0; i < length/2; i++) 
    {
          if (word[i] != word[length-(i + 1)]){
              return 0;
          }
          
    }
    return 1;
}
",0
tsan986,1696303108,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);

    
    for (int i = 0; i < length/2; i++) 
    {
          if (word[i] != word[length-(i + 1)]){
              return 0;
          }
          
    }
    return 1;
}
",1
tsin304,1696724935,1,"int IsPalindrome(char *word)
{
    
    int count = 0;
    
    while (word[count] != '\0')
    {
        count++;
    }
    
    //return count;
    
    for (int i = 0; i < count; i++)
    {
        if (word[i] != word[count-i-1])
        {
            return 0;
        }
    }
    
    return 1;
    
    
}",1
tsin304,1696760928,2,"int IsPalindrome(char *word)
{
    
    int count = 0;
    
    while (word[count] != '\0')
    {
        count++;
    }
    
    
    
    for (int i = 0; i < count; i++)
    {
        if (word[i] != word[count-i-1])
        {
            return 0;
        }
    }
    
    return 1;
    
    
}",1
ttho505,1696723007,1,"int IsPalindrome(char *word)
{
	int length = strlen(word);
	char* x = word;
	char* y = word + length - 1;


	while (x < y) { // makes sure that x and y don't overlap
		if (*x != *y) { // if any characters are not = outputs a 0
			return 0;
		}
		// moves pointers closer together 
		x++;
		y--;
	}
	return 1;
}
",1
ttho743,1696299195,1,"int IsPalindrome(char *string)
{
int k = 0;
int i = 0;
int j = 0;

while (string[i] != '\0') {
     i = i + 1;
}

char word[i];

for(j = i - 1;j >= 0; j--)
{
    word[k] = string[j];
    k++;
}

int X = strcmp(string,word);
if(X == 0){
return 1;
}
else{
return 0;
}
}
",0
ttho743,1696300217,2,"int IsPalindrome(char *string)
{
int k = 0;
int i = 0;
int j = 0;
int p = 0;
while (string[i] != '\0') {
     i = i + 1;
}

char word[100];

for(j = i - 1;j >= 0; j--)
{
    word[k] = string[j];
    k++;
}
for(j = 0; j < i; j++){
    if(word[j] == string[j]){
    p++;
}
else{
    return 0;
}
}
if(p > 0)
return 1;
}",0
ttho743,1696300348,3,"int IsPalindrome(char *string)
{
int k = 0;
int i = 0;
int j = 0;
int p = 0;
while (string[i] != '\0') {
     i = i + 1;
}

char word[100];

for(j = i - 1;j >= 0; j--)
{
    word[k] = string[j];
    k++;
}
for(j = 0; j < i; j++){
    if(word[j] == string[j]){
    p++;
}
else{
    return 0;
}
}
if(p > 0){
return 1;
}
}
",0
ttho743,1696469429,4,"int IsPalindrome(char *string)
{
int k = 0;
int i = 0;
int j = 0;
int p = 0;
while (string[i] != '\0') {
     i = i + 1;
}

char word[100];

for(j = i - 1;j >= 0; j--)
{
    word[k] = string[j];
    k++;
}
for(j = 0; j < i; j++){
    if(word[j] == string[j]){
    p++;
}
else{
    return 0;
}
}
return 1;
}

",1
twad520,1696847332,1,"int IsPalindrome(char *word){
	int length = 0;

	while (word[length] != '\0') {
		length++;

	}

	if (length == 1){
		return 1;
	}
	int start = 0;
	int end = length-1;

	while (start < end) {

		if (word[start] != word[end]) {
			return 0;
		}
		start++;
		end--;


	}

}
    
}
",0
twad520,1696847347,2,"int IsPalindrome(char *word){
	int length = 0;

	while (word[length] != '\0') {
		length++;

	}

	if (length == 1){
		return 1;
	}
	int start = 0;
	int end = length-1;

	while (start < end) {

		if (word[start] != word[end]) {
			return 0;
		}
		start++;
		end--;


	}

}
    
",0
twad520,1696847665,3,"#include <stdio.h>
#include <stdlib.h>


int IsPalindrome(char* word) {

	int length = 0;

	while (word[length] != '\0') {
		length++;

	}
	//return length;
	if (length == 1) {
		return 1;
	}
	int start = 0;
	int end = length-1;

	while (start < end) {

		if (word[start] != word[end]) {
			return 0;
		}
		start++;
		end--;


	}
	return 1;
}",1
twol698,1696320053,1,"int IsPalindrome(char *word)
{   
    int strlength = strlen(word);
    char new[strlength+1];
    for(int  i = 0; i<strlength; i++){
        new[i] = word[strlength-1-i];
        
    }
    new[strlength] ='\0';
    if(strcmp(new, word) == 0){
        return 1; 
    }
    else{
        return 0; 
    }
}",1
tyou333,1696230198,1,"int IsPalindrome(char * word){
    int wordLength = strlen(word);
    for (int i = 0; i < (wordLength / 2); i++) {
        if (word[i] != word[wordLength - (i + 1)]) {
            return 0;
        }
    }
    return 1;
}",1
tyou421,1696450368,1,"int IsPalindrome(char* word)
{
	/*This function checks whether a word is a palidrome or not. It takes
	  a string for an input and returns 1, if that string is a palindrome,
	  or a 0 if otherwise.

	 Inputs:
			word: A string (array of characters).

	 Outputs:
			None.

	 Author: Toma Yousif*/


	// Declare the indexers and variables.
	int length;
	int start;
	int end;


	// Initialise the variables.
	length = strlen(word);
	start = 0;
	end = length - 1;

	// Iterate through half of the string.
	while (end > start)
	{

		// Check if the first and last characters are the same.
		if (word[start] == word[end])
		{
			// Increment/decrement the indexers.
			start = start + 1;
			end = end - 1;
		}
		else
		{
			// If the indexed characters are not the same, return 0 (not a palindrome).
			return 0;
		}

		// If all the characters match their corresponding character, return 1 (a palindrome).
		return 1;
	}
}
",0
tyou421,1696450594,2,"int IsPalindrome(char *word)
{
      /*This function checks whether a word is a palidrome or not. It takes
	  a string for an input and returns 1, if that string is a palindrome,
	  or a 0 if otherwise.

	 Inputs:
			word: A string (array of characters).

	 Outputs:
			None.

	 Author: Toma Yousif*/


	// Declare the indexers and variables.
	int length;
	int start;
	int end;


	// Initialise the variables.
	length = strlen(word);
	start = 0;
	end = length - 1;

	// Iterate through half of the string.
	while (end > start)
	{

		// Check if the first and last characters are the same.
		if (word[start] == word[end])
		{
			// Increment/decrement the indexers.
			start = start + 1;
			end = end - 1;
		}
		else
		{
			// If the indexed characters are not the same, return 0 (not a palindrome).
			return 0;
		}
	}

	// If all the characters match their corresponding character, return 1 (a palindrome).
	return 1;
}
",1
tyou421,1696471384,3,"int IsPalindrome(char *word)
{
      /*This function checks whether a word is a palidrome or not. It takes
	  a string for an input and returns 1, if that string is a palindrome,
	  or a 0 if otherwise.

	 Inputs:
			word: A string (array of characters).

	 Outputs:
			int: An integer 0 indicating the word is not a palindrome, or a
			1 indicating the word is a palindrome.

	 Author: Toma Yousif*/


	// Declare the indexers and variables.
	int length;
	int start;
	int end;


	// Initialise the variables.
	length = strlen(word);
	start = 0;
	end = length - 1;

	// Iterate through half of the string.
	while (end > start)
	{

		// Check if the first and last characters are the same.
		if (word[start] == word[end])
		{
			// Increment/decrement the indexers.
			start = start + 1;
			end = end - 1;
		}
		else
		{
			// If the indexed characters are not the same, return 0 (not a palindrome).
			return 0;
		}
	}

	// If all the characters match their corresponding character, return 1 (a palindrome).
	return 1;
}
",1
tzha578,1696206035,1,"#include<string.h>
#include<stdio.h>

int IsPalindrome(char *word){
    int i,length;
    int output = 1;
    length = strlen(word);
    for(i = 0;i < length/2 + 1;i++){
        if(word[i] != word[length - i - 1]){
        output = 0;    
        }
    }
    return output;
}",1
tzho903,1696311790,1,"int IsPalindrome(char *word)
{
    int left = 0;
    int right = strlen(word)-1;
    int length = strlen(word);
    
    while (left < length && right > -1) { 
        if (word[left] != word[right]) { 
            return 0;
        }
        left++;
        right--;
        
    }
    return 1;
}
",1
uali517,1696206803,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int s = 0;
    int e = length - 1;
    int palindrome;
    while (s < e) {
	    if (word[s] == word[e]) {
		palindrome = 1;
	}
	else {
		palindrome = 0;
	}
	s++;
	e--;
}
return palindrome;
}
",0
uali517,1696207468,2,"int IsPalindrome(char *word)
{
	int length = strlen(word);
	int s = 0;
	int e = length - 1;
	int palindrome = 0;
	int left = 0;
	int right = 0;
	if (length > 1) {
		while (s < e) {
			left = left + word[s];
			right = right + word[e];
			s++;
			e--;
		}
		if (left == right) {
			palindrome = 1;
		}
	}
	else {
		palindrome = 1;
	}
	return palindrome;
}
",0
uali517,1696712197,3,"int IsPalindrome(char* word)
{
	int length = strlen(word);
	int s = 0;
	int e = length - 1;
	int palindrome = 1;
	if (length > 1) {
		while (s < e) {
			if (word[s] != word[e]) {
				palindrome = 0;
			}
			s++;
			e--;
		}
	}
	return palindrome;
}",1
ujai264,1696646804,1,"int IsPalindrome(char *word)
{
    int i = 0;
			while (word[i] != '\0') {
				i++;
			}
			
		for (int j = 0; j < (i/2); j++) {
			if (word[j] != word[(i-1)-j]){
				return 0;
			}
		}
	return 1;
}
",1
vbar374,1696816307,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *str) {
    int length = strlen(str);
    
    for (int i = 0; i < length / 2; i++) {
        if (str[i] != str[length - i - 1]) {
            return 0; 
        }
    }
    
    return 1; 
}

",1
vkap589,1696382534,1,"int IsPalindrome(char *word)
{
    int z = strlen(word);
    int middle = (z/2);
    int same;
    
    for (int i = 0; i < 2; i++) {
        z--;
        if (word[i] == word[z]){
            same = 1;
        }
        else {
            break;
            same = 0;
        }
    }
    
    return same;
}",0
vkap589,1696382614,2,"int IsPalindrome(char *word)
{
    int z = strlen(word);
    int middle = (z/2);
    int same;
    
    for (int i = 0; i < middle; i++) {
        z--;
        if (word[i] == word[z]){
            same = 1;
        }
        else {
            break;
            same = 0;
        }
    }
    
    return same;
}",0
vkap589,1696388420,3,"int IsPalindrome(char *word)
{
    int z = strlen(word);
    int middle = (z/2);
    int same;
    
    if (z != 1) {
        for (int i = 0; i < middle; i++) {
            z--;
            if (word[i] == word[z]){
                same = 1;
            }
            else {
                same = 0;
                break;
            }
        }
    }
    else {
        same = 1;
    }
    
    return same;
}",1
vlai276,1696794652,1,"int IsPalindrome(char *word){
    int L = strlen(word);
    int LL = L;
    int x = 0;
    int result = 0;
    for (int i = 0; i < L; i++) {
        while (word[x] == word[LL]) {
            result = 1;
            x++;
            LL--;
        }
    }
    retrun result;
    
}",0
vlai276,1696794696,2,"int IsPalindrome(char *word){
    int L = strlen(word);
    int LL = L;
    int x = 0;
    int result = 0;
    for (int i = 0; i < L; i++) {
        while (word[x] == word[LL]) {
            result = 1;
            x++;
            LL--;
        }
    }
    return result;
    
}",0
vlai276,1696821086,3,"int IsPalindrome(char *word){
    
    int L = strlen(word);
    
    int result = 0;
    for (int i = 0; i < L/2; i++) {
        if (word[i] != word[L - 1 - i]){
            return 0;
        }
    }
    return 1;
}
",0
vlai276,1696821099,4,"int IsPalindrome(char *word){
    
    int L = strlen(word);
    

    for (int i = 0; i < L/2; i++) {
        if (word[i] != word[L - 1 - i]){
            return 0;
        }
    }
    return 1;
}
",1
vpat188,1696797966,1,"int IsPalindrome(char *word){
    
    int i, K, length;

    length = strlen(word);
    
    
    for(i = 0; i < length/2; i++){
        if (word[i] == word[length - i - 1]){
            K++;
        }
    }    
        
    if (K >= length/2) {  
        return 1;
        
    } else {
        return 0;
    }
    
}",0
vpat188,1696798211,2,"int IsPalindrome(char *word){
    
    int i, K, length;

    length = strlen(word);
    
    for(i = 0; i < length/2; i++){
        if (word[i] != word[length - i - 1]){
            return 0;
        } 
    }    
    
    return 1;
}",0
vpat188,1696798231,3,"int IsPalindrome(char *word){
    
    int i, length;

    length = strlen(word);
    
    for(i = 0; i < length/2; i++){
        if (word[i] != word[length - i - 1]){
            return 0;
        } 
    }    
    
    return 1;
}",1
vwon573,1696729808,1,"int IsPalindrome(char* word) {
    int length = strlen(word);
    int start = 0;
    int end = length - 1;

    while (start < end) {
        // Ignore spaces and punctuation
        while (start < end && !isalpha(word[start])) {
            start++;
        }
        while (start < end && !isalpha(word[end])) {
            end--;
        }

        // Convert characters to lowercase for comparison
        char char1 = tolower(word[start]);
        char char2 = tolower(word[end]);

        if (char1 != char2) {
            return 0; // If characters don't match, it's not a palindrome
        }

        start++;
        end--;
    }

    return 1; // If the loop completes without returning 0, it's a palindrome
}",1
vwu693,1696735519,1,"#define _CRT_SECURE_NO_WARNINGS_
#include <stdio.h>
#include <string.h>
int IsPalindrome(char* word) {
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0; // Not a palindrome
        }
    }
    return 1;
}",1
vxie208,1696389042,1,"//IsPalindone ignores punctuation when checking string.
int IsPalindrome(char string[])
{	
	int boolean = 1;
	int i = 0;
	int length = strlen(string);
	for (i = 0; i < length; i++) {
		if (string[i] >= 'a' && string[i] <= 'z') {
			if (string[i] == string[length - 1 - i]) {
				boolean = 1;
			}
			else {
				return 0;
			}
		}
	}
	return boolean;
}",1
wany079,1696327101,1,"#include <stdio.h>
int IsPalindrome(char* word)
{
    int i;
    int j = 0;
    for (i = strlen(word) - 1; i >= 0; i--){
        // If first letter and last letter, second letter and second to last letter, ... are same, it is a palindrome
        if (word[i] == word[j]) {
            return 1;
        }
        // If at any point the two letters are not the same, it is not a palindrome
        else {
            return 0;
        }
        j++;
    }
}",0
wany079,1696327811,2,"#include <stdio.h>
int IsPalindrome(char* word)
{
    int i;
    int j = 0;
    for (i = strlen(word) - 1; i >= 0; i--){
        // If first letter and last letter, second letter and second to last letter, ... are same, it is a palindrome
        if (word[i] == word[j]) {
            j++;
            continue;
        }
        // If at any point the two letters are not the same, it is not a palindrome
        else {
            return 0;
        }
    }
    return 1;
}",1
wany722,1696382729,1,"int IsPalindrome(char *word)
{
    int i = 0, ispd = 0;
    int j = strlen(word) - 1;
    for (i = 0; i < strlen(word); i++){
        if (word[i] == word[j]){
            j--;
        }
        else
        return ispd;
    }
    ispd = 1;
    return ispd;
}",1
wany843,1696372642,1,"#include <string.h>
#include <stdio.h>

int IsPalindrome(char *word)
{
    int length = strlen(word);
    for(int i = 0; i < length / 2; i++) {
        if(word[i] != word[length - i - 1]) {
            return 0;  // 返回0表示不是回文
        }
    }
    return 1;  // 返回1表示是回文
}
",1
wany897,1696383568,1,"int IsPalindrome(char *word)
{
	int wordlength = strlen(word);
	int j = wordlength - 1;
	for (int i = 0; i<wordlength/2; i++, j--)
	{
		if (word[i] != word[j])
		{
			return 0;
		}
	}
	return 1;
	
}
",1
wany932,1696808010,1,"int IsPalindrome(char *word)
{
 int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}
",1
wkev690,1696385407,1,"int IsPalindrome(char *word){
    int length = strlen(word);

    for (int i = 0; i < length; i++)
    {
        if (word[i] != word[(length-1)-i]){
            return 0;
        }
    }
    return 1;
}",1
wli798,1696298969,1,"int IsPalindrome(char word[])
{

    int j = 0;
    int size = 1;
    while (word[j] != '\0') {
        if (word[j] != word[strlen(word) - size]) {
            return 0;
        }
        size++;
        j++;
    }
    return 1;
}


    int main(void)
    {
    char word[100] = ""abca"";
printf(""%d"", IsPalindrome(word));
{
    return 0;
}
}",0
wli798,1696299000,2,"int IsPalindrome(char word[])
{

    int j = 0;
    int size = 1;
    while (word[j] != '\0') {
        if (word[j] != word[strlen(word) - size]) {
            return 0;
        }
        size++;
        j++;
    }
    return 1;
}",1
wlin709,1696830052,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    int i = 0;
    int j = length - 1;

    while (i < j) {
        if (word[i] != word[j]) {
            return 0; // Not a palindrome
        }
        i++;
        j--;
    }
    return 1; // Palindrome
}",1
wlin709,1696830118,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word) {
    int length = strlen(word);
    int i = 0;
    int j = length - 1;

    while (i < j) {
        if (word[i] != word[j]) {
            return 0; // Output false hence is not a palindrome
        }
        i++;
        j--;
    }
    return 1; // Output is true hence is a palindrome
}",1
wliy226,1696832082,1,"int IsPalindrome(const char* word) {
  int length = strlen(word);//find length of string
  int i = 0; //Initialise the beginning of the loop to 0
  int isPalindrome = 1; // Assume it's a palindrome initially.

while (i < length / 2) { // Using while loop to analyse half of the plaindrome
      if (word[i] ^ word[length - i - 1]) { // using an XOR operator to compare the current position to the wanted position
      isPalindrome = 0; // if statement is true then return 0
}

          break; //exit the loop and restart
  }
 i++; //checks character pairs from start to end of string
  }

return isPalindrome;//return the values
}
",0
wliy226,1696832395,2,"int IsPalindrome(const char* word) {
  int length = strlen(word);//find length of string
  int i = 0; //Initialise the beginning of the loop to 0
  int isPalindrome = 1; // Assume it's a palindrome initially.

while (i < length / 2) { // Using while loop to analyse half of the plaindrome
      if (word[i] != word[length - i - 1]) { // using an XOR operator to compare the current position to the wanted position
      isPalindrome = 0; // if statement is true then return 0
      }
      i++; //checks character pairs from start to end of string
    }

return isPalindrome;//return the values
}
",1
wmas516,1696211858,1,"int IsPalindrome(char *word)
{
    int check = 0, length = 0;
	while (check == 0) {
		if (*(word+length) == '\0') {
			check = 1;
		}
		else {
			length++;
		}
	}
	for (int i = 0; i < length / 2; i++) {
		if (word[i] != *(word+(length - i-1))){
			return(0);
		}
	}
	return(1);
}
",1
wmas516,1696235571,2,"int IsPalindrome(char *word)
{
    int length = 0;
	while (*(word+length) == '\0') {
        length++;
	}
	for (int i = 0; i < length / 2; i++) {
		if (word[i] != *(word+(length - i-1))){
			return(0);
		}
	}
	return(1);
}
",0
wste800,1696824311,1,"int IsPalindrome(char *word)
{
     int length = strlen(word);
    int start = 0;
    int end = length - 1;

    while (start < end) {
        if (word[start] != word[end]) {
            return 0;
        }
        start++;
        end--;
    }
    
    return 1;
}
",1
wwan296,1696297089,1,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

int IsPalindrome(char* word)
{
	int i = strlen(word);
	if (i == 1) {
		return 1;
	}
	int half = i / 2;
	for (int j = 0; j < half; j++) {
		if (word[j] != word[i - 1]) {
			return 0;
		}
		i--;
	}
	return 1;
}",1
wwon485,1696234155,1,"int IsPalindrome(char *word) {
    int length = (int)strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]){
            printf(""%d\n"", i);
            return 0;
        }
    }
    return 1;
}
",0
wwon485,1696234203,2,"int IsPalindrome(char *word) {
    int length = (int)strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]){
            return 0;
        }
    }
    return 1;
}",1
wwu295,1696671294,1,"int IsPalindrome(char* word)
{
	for (int i = 0; i <= (int) strlen(word) / 2; i++) {
		if (word[i] == word[(int) strlen(word) - 1 - i]) {
			continue;
		}
		else {
			return 0;
		}
	}
	return 1;
}
",1
wyan309,1696670533,1,"int IsPalindrome(char *word)
{
    int length=strlen(word),i;
    int count=0;
    for (i=length-1; i!=count; i--){
        if (word[i]!=word[count]){
            return 0;
        }
        count++;
        if (count==i){
            break;
        }
    }
    return 1;
}
",1
wyu523,1696372258,1,"int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    int j=length-1;
    
    for (int i=0; i<length; i++){
        if(word[i]!=word[j]){
            return 0;
        }
        j--;
    }
    return 1;
}",1
wyua331,1696831780,1,"int IsPalindrome(char *word)
{
    int i=0;

    int j=0;
    j=strlen(word);
    int k=j;
    int logi=0;
    while(i<=(j/2))
    {
        if (word[i]!=word[k])
        {
           logi++;
        }
        i++;
        k--;
    }
    if(k!=0)
    {
        return 0;
    }
    else
    {
        return 1;
    }

}

",0
wyua331,1696832956,2,"int IsPalindrome(char *word)
{

    int i=0;

    int j=0;
    j=strlen(word);
    int k=j;
    int logi=0;
    while(i<=(j/2))
    {
        if (word[i]!=word[k-1])
        {
           logi++;
        }
        i++;
        k--;
    }
    if(logi!=0)
    {
        return 0;
    }
    else
    {
        return 1;
    }

}

",1
wzha508,1696744696,1,"int IsPalindrome(char* word)
{
	int i = 0, j = 1;
	while (word[i] != '\0') {
		if (word[i] == word[strlen(word) - j]) {
			i++, j--;
			return 1;
		}
		else {
			return 0;
		}
	}
	return 0;
}",0
wzha508,1696746028,2,"int IsPalindrome(char* word)
{
	int i = 0, j = 1;

	while (word[i] != '\0') {
		if (i == strlen(word) - 1) {
			return 1;
		}

		if (word[i] == word[strlen(word) - j]) {
			i++, j++;
			
		}
		else
			return 0;
		
		
			
		}
	
	return 0;
}
",1
xche362,1696816924,1,"int IsPalindrome(char *word)
{
    int j;
    j = strlen(word);
    
    for (int i = 0; i < j/2 ; i++){
        if (word[i] != word[ j - 1 - i]){
            return 0;
        }
    }
    
    return 1;
}
",1
xche933,1696842190,1,"int IsPalindrome(char *word)
{
    if (word = strrev(word)) {
        return true;
    }
    else {
        return false;
    }
}",0
xche933,1696848727,2,"int IsPalindrome(char *word)
{ 
    int len = strlen(word)
    if (word[start]=word[end])  {
        return true;
    }
    else {
        return false;
    }
}",0
xkan320,1696537922,1,"int IsPalindrome(char *word){
    int i,n;
    n = strlen(word);
    i = 0;
    while(i<n-i-1){
        if (word[i] != word[n-i-1]){
            return 0;
        }
        i++;
    }
    return 1;
}",1
xli330,1696410995,1,"int IsPalindrome(char *word) {
    // This function only works on a perfect lowercase word without any other characters.

    int i, length = strlen(word);

    // Loop from the first character to the character in the middle (exclusive).
    // So the character in the right middle position is ignored.
    for (i = 0; i < length / 2; i++) {

        // Compare the character to the corresponding one.
        if (word[i] != word[length - i -1]) {

            // Stop the function when found mismatching characters.
            return 0;
        }
    }

    // This will be only executed when no mismatching characters found.
    return 1;
}",1
xlia603,1696725747,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int j = strlen(word) - 1;
    
    for(i = 0; i < j; i++){
        if (word[i] != word[j]){
            return 0;
        }
        j--;
    }
    return 1;
}
",1
xmet073,1696803663,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char word[]) {
    int i;
    int length = strlen(word);

    for (i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }

    return 1;
}
",1
xsny378,1696663972,1,"int IsPalindrome(char *word)
{
    int i = 0;
    int length = strlen(word); 
         while(i< length/2)
          {
             if (word[i] != word[strlen(word)-1 - i])
             {
                     return 0;
          
             }
        
        i++;
        
     } 
     return 1; 
}

",1
xtan207,1696797483,1,"int IsPalindrome(char *word)
{
    int foo(char *word) {
    int len = strlen(word);
    int i = 0;
    int j = len - 1;
    while(i < j){
        if (word[i] == word[j]){
            return 1;
        }
        i++;
        j--;
        
    }
    return 0;
    
}
}
",0
xtan207,1696804598,2,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i = 0;
    int j = len - 1;
    while(i < j){
        if (word[i] == word[j]){
            return 1;
        }
        i++;
        j--;
        
    }
    return 0;
    
}

",0
xtan207,1696805292,3,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i = 0;
    int j = len - 1;
    while(i <= j){
        if (word[i] == word[j]){
            return 1;
        }
        i++;
        j--;
        
    }
    return 0;
    
}

",0
xtan207,1696805329,4,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    int i = 0;
    int j = len - 1;
    while(i <= j){
        if (word[i] != word[j]){
            return 0;
        }
        i++;
        j--;
        
    }
    return 1;
    
}

",1
xugn489,1696251065,1,"int IsPalindrome(char *word)
{	
	int len = strlen(word);
	char reverse[len];
	int second_counter = 0;
	
	for (int i = len - 1; i>=0; i-=1) {
		reverse[second_counter] = word[i];
		second_counter++;
	}

	if (strcmp(reverse, word) == 0) {
		return 1;
	}
	else
		return 0;
}
",0
xugn489,1696331813,2,"int IsPalindrome(char *word)
{	
	int len = strlen(word);
	char reverse[len];
	int second_counter = 0;
	
	for (int i = len - 1; i>=0; i-=1) {
		reverse[second_counter] = word[i];
		second_counter++;
	}
    reverse[len] = '\0';
	if (strcmp(reverse, word) == 0) {
		return 1;
	}
	else
		return 0;
}
",1
yayo322,1696666947,1,"int IsPalindrome(char *word)
{
    int length = strlen(word); 
    int temp[length]; 
    int i = 0; 
    while (word i != '/0') {
        temp[i] = word[length-1-i]; 
        i++
    }
    int check = strcmp(word, temp); 
    if (check == 0) {
        printf(""1"");
    }
    else {
        printf(""0""); 
    }
}
",0
yayo322,1696667233,2,"int IsPalindrome(char *word)
{
    int length = strlen(word); 
    char temp[length]; 
    int i = 0; 
    while (word[i] != '\0') {
        temp[i] = word[length-1-i]; 
        i++;
    }
    int check = strcmp(word, temp); 
    if (check == 0) {
        printf(""1"");
    }
    else {
        printf(""0""); 
    }
}
",0
yayo322,1696667285,3,"int IsPalindrome(char *word)
{
    int length = strlen(word); 
    char temp[length]; 
    int i = 0; 
    while (word[i] != '\0') {
        temp[i] = word[length-1-i]; 
        i++;
    }
    int check = strcmp(word, temp); 
    if (check == 0) {
        printf(""1"");
    }
    else {
        printf(""0""); 
    }
    return 0; 
}
",0
yayo322,1696667345,4,"int IsPalindrome(char *word)
{
    int length = strlen(word); 
    char temp[length]; 
    int i = 0; 
    while (word[i] != '\0') {
        temp[i] = word[length-1-i]; 
        i++;
    }
    int check = strcmp(word, temp); 
    if (check == 0) {
        return 1;
    }
    else {
        return 0; 
    }
}
",0
yayo322,1696742048,5,"int IsPalindrome(char *word)
{
    int length = strlen(word); 
    char temp[1000]; 
    int i = 0; 
    int j = length-1; 
    
     while (word[i] != '\0') {
        temp[i] = word[j]; 
        i++;
        j--; 
    }
    
    int check = strcmp(word, temp); 
    if (check == 0) {
        return 1;
    }
    else {
        return 0; 
    }
}
",0
yayo322,1696742155,6,"int IsPalindrome(char *str) {
    int length = strlen(str);
    int i = 0;
    int j = length - 1;

    while (i < j) {
        if (str[i] != str[j]) {
            return 0; 
        }
        i++;
        j--;
    }

    return 1; 
}
",1
ybha528,1696759887,1,"int IsPalindrome(char *word)
{
	int length = strlen(word);
	int i, j;

	for (i = 0, j = length - 1; i < j; i++, j--) {


		if (word[i] != word[j])
		{
			return 0;
		}
	}
	return 1; 
}
",1
ycho749,1696661697,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) 
    {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1; 
}
",1
ycho760,1696758048,1,"int IsPalindrome(char *word)
{
	int i, j;
	int r;
	char newArray[100] = { 0 };
	for (i = 0, j = strlen(word) - 1; j > -1, i < strlen(word); i++, j--) {
		newArray[i] = word[j];
	}
	int x;
	x = (int) strcmp(newArray, word);
	if (x == 0) {
		return 1;
	}
	else {
		return 0;
	}
	
}
",0
ycho760,1696758317,2,"int IsPalindrome(char *word)
{
	int i, j;
	char newArray[100] = { 0 };
	for (i = 0, j = strlen(word) - 1; j > -1 && i < strlen(word); i++, j--) {
		newArray[i] = word[j];
	}
	int x;
	x = (int) strcmp(newArray, word);
	if (x == 0) {
		return 1;
	}
	else {
		return 0;
	}
}
",1
ydai729,1696842206,1,"int IsPalindrome(char *word)
#include <string.h>

int IsPalindrome(const char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}


",0
ydai729,1696842227,2,"int IsPalindrome(char *word)
#include <string.h>

int IsPalindrome(const char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome


",0
ydai729,1696842262,3,"int IsPalindrome(char *word)
#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}

int main() {
    const char *inputString = ""noon""; // Change this to your input string
    if (IsPalindrome(inputString)) {
        printf(""It is a palindrome.\n"");
    } else {
        printf(""It is not a palindrome.\n"");
    }
    return 0;
}


",0
ydai729,1696842273,4,"int IsPalindrome(char *word)
#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}

",0
ydai729,1696842354,5,"int IsPalindrome(char *word)
#include <stdio.h>
#include <string.h>

int IsPalindrome(const char *str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        if (str[i] != str[len - 1 - i]) {
            return 0; 
        }
    }
    return 1; 
}

",0
ydai729,1696842532,6,"int IsPalindrome(char *word)
{
  int len = strlen(word);
    for (int i = 0; i < len / 2; i++) {
        if (word[i] != word[len - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}  

",1
ydar075,1696814608,1,"int IsPalindrome(char *word)
{
 int i = 0;
 int length = strlen(word);
 int j = length;

 while (i < length) {
     if (word[i] != word[length - 1 - i]) {
         return 0;
     }
     i++;
 }
 return 1;
}
",0
ydar075,1696814626,2,"int IsPalindrome(char *word)
{
 int i = 0;
 int length = strlen(word);

 while (i < length) {
     if (word[i] != word[length - 1 - i]) {
         return 0;
     }
     i++;
 }
 return 1;
}
",1
yfan919,1696743493,1,"int IsPalindrome(char *word)
{
    for()
}
",0
yfan919,1696743499,2,"int IsPalindrome(char *word)
{
    
}
",0
yfan919,1696744027,3,"int IsPalindrome(char *word)
{
    int len=strlen(word);
    int a=0;
    int b=a-1;
    for(a<b){
        if(word[a]!=word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744060,4,"int IsPalindrome(char *word)
{
    int len=strlen(word);
    int a=0;
    int b=len-1;
    for(a<b){
        if(word[a]!=word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744084,5,"int IsPalindrome(char *word)
{
    int len=strlen(*word);
    int a=0;
    int b=len-1;
    for(a<b){
        if(word[a]!=word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744099,6,"int IsPalindrome(char *word)
{
    int len=strlen(word);
    int a=0;
    int b=len-1;
    for(a<b){
        if(word[a]!=word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744107,7,"int IsPalindrome(char *word)
{
    int len=strlen(word);
    int a=0;
    int b=len-1;
    for(a<b;){
        if(word[a]!=word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744136,8,"int IsPalindrome(char *word)
{
    int len=strlen(*word);
    int a=0;
    int b=len-1;
    for(a<b;){
        if(*word[a]!=*word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744150,9,"int IsPalindrome(char word)
{
    int len=strlen(word);
    int a=0;
    int b=len-1;
    for(a < b;){
        if(*word[a]!=word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744172,10,"int IsPalindrome(char word)
{
    int len = strlen(word);
    int a = 0;
    int b = len-1;
    for(a < b;){
        if(word[a] != word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744219,11,"#include <string.h>
int IsPalindrome(char word)
{
    int len = strlen(word);
    int a = 0;
    int b = len-1;
    for(a < b;){
        if(word[a] != word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744249,12,"#include <string.h>
int IsPalindrome(char *word)
{
    int len = strlen(word);
    int a = 0;
    int b = len-1;
    for(a < b;){
        if(word[a] != word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744267,13,"#include <string.h>
int IsPalindrome(char *word)
{
    int len = strlen(word);
    int a = 0;
    int b = len-1;
    for(a < b){
        if(word[a] != word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",0
yfan919,1696744306,14,"#include <string.h>

int IsPalindrome(char *word)
{
    int len = strlen(word);
    int a = 0;
    int b = len-1;
    while(a < b){
        if(word[a] != word[b]){
            return 0;
        }
        a++;
        b--;
    }
    return 1;
}
",1
yfen481,1696394707,1,"int IsPalindrome(char *word) {
    int i, j, length, count = 0;
    length = strlen(word);
    char backwards[length], forward[length];

    for (j = length - 1; j >= 0; j--) {
        if (word[j] != ' ') {
            backwards[count] = word[j];
            count++;
        }
    }
    backwards[count] = '\0';

    count = 0;
    for (i = 0; i < length; i++) {
        if (word[i] != ' ') {
            forward[count] = word[i];
            count++;
        }
    }
    forward[count] = '\0';

    if (strcmp(backwards, forward) == 0) {
        return 1;
    } else {
        return 0;
    }
}",1
yhaf839,1696220958,1,"int IsPalindrome(char *word)
{
     int length=strlen(word);
    int i;
    int j;
    
    for (i=0,j=length-1;i=j;i++,j--){
        if (word[i] != word[j]);
        return 0;
    }
    return 1;   
}
",0
yhaf839,1696221375,2,"#include <string.h>
#include <stdio.h>



int IsPalindrome(char *word)
{
    int length=strlen(word);
    int i;
    int j;
    
    for (i=0,j=length-1;i<j;i++,j--){
        if (word[i] != word[j]){
        return 0;
        }
    }
    return 1;
}
",1
yilm466,1696811143,1,"int IsPalindrome(char *word) {
    int length = strlen(word);
    char reversed[length + 1];  
    for (int i = 0; i < length; i++) {
        reversed[i] = word[length - 1 - i];
    }
    reversed[length] = '\0';  
    if (strcmp(word, reversed) == 0) {
        return 1;  
    }
    return 0;  
}",1
yjun129,1696230105,1,"int IsPalindrome(char *word)
{
    int i, j;
    int length = strlen(word);
    int half = length / 2;
    int correct = 1; 
    int incorrect = 0;

    for (i = 0, j = length - 1; i < j; i++, j--) {
	    if (word[i] != word[j]) {
		    return incorrect;
	}
}

return correct;
}
",0
yjun129,1696230134,2,"int IsPalindrome(char *word)
{
    int i, j;
    int length = strlen(word);
    int correct = 1; 
    int incorrect = 0;

    for (i = 0, j = length - 1; i < j; i++, j--) {
	    if (word[i] != word[j]) {
		    return incorrect;
	}
}

return correct;
}
",1
ykwa219,1696726260,1,"int IsPalindrome(char *word)
{
    	int j = strlen(word);
	char reverse[100] = { 0 };

	for (int i = 0; i <= strlen(word); i++) {
		reverse[i] = word[j-1];
		j--;
	}
	reverse[strlen(word)] = '\0';

	if (strcmp(word, reverse) == 0) {
		return true;
	}
	else {
		return false;
	}
}
",1
ylee818,1696814070,1,"#include <stdio.h>

int IsPalindrome(char* word){

    int length = strlen(word);

    
    for (int i = 0; i < length/2; i++) {
        if (word[i] != word[length-1-i]){
         return 0;
}
       

    }
     return 1;
    
}
",1
yrah128,1696445750,1,"#include <stdio.h>
#include <string.h>


int IsPalindrome(char word[]) {
    int length = strlen (word);
    for (int i = 0; i<length/2; i++) {
        if (word [i] = word [length-1-i]){
            return 0;
        }
    }
    return 1;
}
",0
yrah128,1696445859,2,"#include <stdio.h>
#include <string.h>


int IsPalindrome(char word[]) {
    int length = strlen (word);
    for (int i = 0; i<length/2; i++) {
        if (word [i] = word [length-1-i]){
            return 0;
        }
    }
    return 1;
}

int main() {
    char word1[] = ""a"";
    char word2[] = ""abbc"";

    printf(""%d\n"", IsPalindrome(word1)); // Should print 1
    printf(""%d\n"", IsPalindrome(word2)); // Should print 0

    return 0;
}",0
yrah128,1696446032,3,"#include <stdio.h>
#include <string.h>


int IsPalindrome(char word[]) {
    int length = strlen (word);
    for (int i = 0; i<length/2; i++) {
        if (word [i] != word [length-1-i]){
            return 0;
        }
    }
    return 1;
}

",1
ysun512,1696248914,1,"int IsPalindrome(char *word)
{   int len = strlen(word);
    int i, j;

    for (i = 0, j = len - 1; i < j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    return 1;
    
}
",1
ytho155,1696246275,1,"#include <stdio.h>
#include <string.h>
//This function tells you whether a word/string is a palindrome or not
//This is not case sensitive 
//Author:Yi Shun
int IsPalindrome(char *word)
{
    int temp=0;
    int length = strlen(word);
    int j = length - 1;

    for (int i = 0; i < length; i++) {
        if ((word[i]) == (word[j])) { 
            temp=1;
        } else {
            return 0; 
        } 
        j--;
    }
    return temp;
}

//converting everything to uppercase to make sure it works for all cases.

void allcaps(char *word)
{
    int i = 0;
    while (word[i] != '\0') {
        if (word[i] >= 'a' && word[i] <= 'z') { 
            word[i] = word[i] - ('a' - 'A');
        }
        i++; 
    }
}",1
ytse120,1696234718,1,"int IsPalindrome(char *word) {
    int i, count=0, length = strlen(word);
    char tempWord[length+1];
    for (i=length-1; i>=0; i--) {
        tempWord[count] = word[i];
        count++;
    }
    if (*tempWord == *word) {
        return 1;
    } else {
        return 0;
    }
}",0
ytse120,1696235553,2,"int IsPalindrome(char *word) {
    int i, count=0, length = strlen(word);
    char tempWord[length];
    for (i=length-1; i>=0; i--) {
        tempWord[count] = word[i];
        count++;
    }
    if (strcmp(tempWord, word) == 0) {
        return 1;
    } else {
        return 0;
    }
}",0
ytse120,1696292169,3,"int IsPalindrome(char *word) {
    int i, count=0, length = strlen(word);
    char tempWord[length];
    for (i=length-1; i>=0; i--) {
        tempWord[count] = word[i];
        count++;
    }
    tempWord[length] = '\0';
    if (strcmp(tempWord, word) == 0) {
        return 1;
    } else {
        return 0;
    }
}",1
yxie884,1696221533,1,"//Lab 10 task 1: takes a string as input, and returns 1 if that string is a palindrome and 0 otherwise.
//Author: Jessica Xie

#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    //initialising variables
    int i, j, length, half, count, output;
    length =  strlen(word);
    half = length/2;
    count = length-1;

    // an if statement conditioning if word is a single letter
    if (length == 1){
        output = 1;
    }

    // setting up a for loop and a count system to go through each letter and compare the first and last letter
    for (i = 0; i < half; i++){
        if (word[i] == word[count]){
        output = 1;
        count--;
        }
        else {
        output = 0;
        break;
        }
    }
    return output;

}",0
yxie884,1696221552,2,"//Lab 10 task 1: takes a string as input, and returns 1 if that string is a palindrome and 0 otherwise.
//Author: Jessica Xie

#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    //initialising variables
    int i,length, half, count, output;
    length =  strlen(word);
    half = length/2;
    count = length-1;

    // an if statement conditioning if word is a single letter
    if (length == 1){
        output = 1;
    }

    // setting up a for loop and a count system to go through each letter and compare the first and last letter
    for (i = 0; i < half; i++){
        if (word[i] == word[count]){
        output = 1;
        count--;
        }
        else {
        output = 0;
        break;
        }
    }
    return output;

}",1
yyin299,1696423379,1,"int IsPalindrome(char *word)
{
    int length;
    length = strlen(word);
    int i;
    for (i = 0; i < length; i++)
    {
        if (word[i] != word[length - 1 -i])
        {
            return 0;
        }
    }
    return 1;
}
",1
yyin440,1696308450,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char* word){
    int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] !=word[length - 1 - i]){
            return 0;
        }
    }
    return 1;
} ",1
yzhe520,1696372855,1,"int IsPalindrome(char *word)
{ //first check the length of the input string
    int length,i;
    length = strlen(word);
//use a for loop to compare each corresponding element of the string and see if they are the same 
    for (i = 0; i < length; i++) {
        if (word[i] != word[length - i - 1]) {
            return 0; //if one is different, immediately return 0
        }
    }
    return 1;
}
",1
zche975,1696838090,1,"int IsPalindrome(char *word)
{
  int IsPalindrome(const char *str) {
    int length = strlen(str);
    for (int i = 0; i < length / 2; i++) {
        if (str[i] != str[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
  
}
",0
zche975,1696838207,2,"int IsPalindrome(char *word) {
 int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0; // Not a palindrome
        }
    }
    return 1; // Palindrome
}",1
zche975,1696838217,3,"int IsPalindrome(char *word) {
 int length = strlen(word);
    for (int i = 0; i < length / 2; i++) {
        if (word[i] != word[length - 1 - i]) {
            return 0;
        }
    }
    return 1;
}",1
zcol623,1696327462,1,"//Author:zcol623
int IsPalindrome(char* word)
{
	//Find the length of the string 
	int length = strlen(word);
	
	//Initialise starting and ending index positions of the string 
	int i = 0;
	int j = length - 1;

	while (i < j) {
		// Check if the characters in positions i and j are equal
		if (word[i] != word[j]) {
			return 0; // Not palindrome
		}
		//Move to next pair of characters
		i++;
		j--;
	}
	return 1; //no mismatch was found therefore string is a palindrome
}",1
zcra120,1696724452,1,"  int IsPalindrome(char *word)
{
    int length;
    length = strlen(word) ;
    int i;
    
    if (word[i] == word[length-1]){
         for (i=0;length;i++){
         if (word[i+1] == word[length-i]){
         return 1;
         }
         }
         }
         else return 0;
    }",0
zcra120,1696724807,2,"
   int IsPalindrome(char *word)
{
    int length;
    length = strlen(word) ;
    int i;
    i = 0;
    if (word[i] == word[length-1]){
         for (i=0;length;i++){
         if (word[i+1] == word[length-i]){
             return 1;
         
         
         }
        
         }
         
    }
     else return 0;  
}",0
zcra120,1696724875,3,"   
   int IsPalindrome(char *word)
{
    int length;
    length = strlen(word) ;
    int i;
    i = 0;
    if (word[i] == word[length-1]){
         for (i=0;length;i++){
         if (word[i+1] == word[length-i]){
             return 1;
         
         
         }
        
         }
         
    }
 return 0;  
}",0
zcra120,1696725478,4,"  int IsPalindrome(char *word)
{
    int length;
    length = strlen(word) ;
    int i;
         for (i=0;i<length/2;i++){
         if (word[i] != word[length-1-i]){
            return 0;
         }
    }
     return 1;

 
}

",1
zfu276,1696644057,1,"int IsPalindrome(char *word)
{   
    int length = strlen(word);
    for (int i = 0; i < length; i++) {
        if (word[i] != word[strlen(word)-i-1]) {
            return 0; 
        }
    }

    return 1;
    
}
",1
zgab423,1696824247,1,"int IsPalindrome(char *word)
{
    int length;
    
    length = strlen(word);
    for (int i = 0, j = length - 1; i<j; i++, j--) {
        if (word[i] != word[j]) {
            return 0;
        }
    }
    
    return 1;
}
",1
zgar110,1696817272,1,"
int IsPalindrome(char *str) {
    int length = strlen(str);
    int i, j;

    for (i = 0, j = length - 1; i < j; i++, j--) 
    {
        if (str[i] != str[j])  {
            return 0; 
         }
    }

    return 1; 
}
",1
zgas053,1696840963,1,"int IsPalindrome(char *word)
{
   int x, i, j;
   x = strlen(word);
   
   for (i = 0, j = x - 1; i < j; i++, j--)
   {
       if (word[i] != word[j]){
           return 0;
       }
   }
   
   return 1
   
}
",0
zgas053,1696840973,2,"int IsPalindrome(char *word)
{
   int x, i, j;
   x = strlen(word);
   
   for (i = 0, j = x - 1; i < j; i++, j--)
   {
       if (word[i] != word[j]){
           return 0;
       }
   }
   
   return 1;
   
}
",1
zgin653,1696205198,1,"int IsPalindrome(char *word)
{
    
}
",0
zgin653,1696240096,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for (int i = 0; i<length/2; i++){
        if (word[i] != word[length - i - 1]){
            return 0;
        }
    }
    return 1;
}
",1
zguo839,1696804359,1,"int IsPalindrome(char *string) {
    int length = strlen(string);
    int start = 0;
    int finish = length - 1;

    while (start < finish) {
        if (string[start] != string[finish]) {
            return 0; 
        }
        start++;
        finish--;
    }
    return 1; 
}

int main() {
    char thefirst_word[100] = ""a"";
    printf(""%d\n"", IsPalindrome(thefirst_word)); 

    char thesecond_word[100] = ""abbc"";
    printf(""%d\n"", IsPalindrome(thesecond_word)); 

    return 0;",0
zguo839,1696804458,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *string) {
    int length = strlen(string);
    int start = 0;
    int finish = length - 1;

    while (start < finish) {
        if (string[start] != string[finish]) {
            return 0; 
        }
        start++;
        finish--;
    }
    return 1; 
}
",1
zhon780,1696305048,1,"int IsPalindrome(char *word)
{
    int len = strlen(word);
    
    for (int i = 0; i < len/2; i++)
    {
        if (word[i] != word[len - 1 - i])
        {
            return 0;
        }
    }
    return 1;
}",1
zliu381,1696669073,1,"int IsPalindrome(char* word)
{
	int i;
	i = 0;
	while (word[i] != '\0') {
		i++;
	}

	int j = 0;
	int k = i-1;
	int logic = 0;
	while (word[j] != '\0') {
		logic = 0;
		if (word[j] == word[k]) {
			logic = 1;
		}
		k--;
		j++;
	}

	return logic;
}",0
zliu381,1696669725,2,"int IsPalindrome(char* word)
{
	int i;
	i = 0;
	while (word[i] != '\0') {
		i++;
	}

	int j = 0;
	int k = i-1;
	int logic = 0;
	while (word[j] != '\0') {
		if (word[j] == word[k]) {
			logic = 1;
		}else {
			return 0;
		}
		
		k--;
		j++;
	}

	return logic;
}
",1
zliu578,1696644729,1,"int IsPalindrome(char *word)
{
	int result = 0;
	int i = 0;
	while (word[i] != '\0') {
		i++;
	}
	int j = 0;
	while (word[j] != '\0') {
		if (word[i-1] == word[j]) {
			result = 1;
		}
		else {
			return 0;
		}
		j++;
		i--;
	}
	return result;
}
",1
zpen457,1696752874,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    
    for(int i = 0; i < length; i++){
        if(word[i] != word[length -1 - i]){
            return 0;
        }
    }
    return 1;
}
",1
zqia091,1696756201,1,"int IsPalindrome(char *word) 
{
    int len = strlen(word);
    for (int i=0;i<len/2;i++) 
    {
        if (word[i]!=word[len-i-1]) 
        {
            return 0;  
        }
    }
    return 1;
}",1
zshi453,1696212156,1,"#include <string.h>
#include <stdio.h>
#include <math.h>

int IsPalindrome(char *word)
{
    int len = strlen(word);
    int a = floor(len/2);
    int i;
    int count = 0;
    int output;
    for (i = 0; i<a; ++i)
    {
        if (word [i] != word[(len - 1 - i)])
        {
            count += 1;
        }
    }
    if (count == 0)
    {
        output = 1;
    }
    else
    {
        output = 0;
    }
    return output;
}
",1
zvor566,1696738834,1,"int IsPalindrome(char *word)
{
   int i;
int length = strlen(word);

for (i = 0; i < length / 2; i++) {
	if (word[i] != word[length - i - 1]) {
		return 0;
	}
}
return 1; 
}
",1
zwan373,1696384031,1,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int r;
    int l;
    l = 0;
    r = strlen(word)-1;
    while(l<r)
    { if(l!=r)
    {
        return 0;
    }
    l++;
    r--;
    }
    return 1;
}
",0
zwan373,1696384580,2,"#include <stdio.h>
#include <string.h>

int IsPalindrome(char *word)
{
    int r;
    int l;
    l = 0;
    r = strlen(word)-1;
    while(l<r)
    { if(word[l]!=word[r])
    {
        return 0;
    }
    l++;
    r--;
    }
    return 1;
}",1
zwil198,1696637034,1,"#include <stdio.h>
#include <string.h>


int IsPalindrome(char *word)
{
   
   int length = strlen(word);
   int begin = 0;
   int finish = length - 1;
    
    while (begin < finish) {
    
        if (word[begin] != word[finish]) {
                return 0;
        }
        
        
        begin++;
        finish--;
    }
    return 1;

}",1
zwon694,1696217182,1,"int IsPalindrome(char *word)
{
    int length = strlen(word) - 1;
    int i = 0;
    char temp[length];
    int ispalindrome = 0;

    while (word[i] != '\0') {
        temp[i] = word[length - i];
        i++;
    }

    if (strcmp(word, temp) == 0) {
        ispalindrome = 1;
    }

    return ispalindrome;
}
",0
zwon694,1696303223,2,"int IsPalindrome(char *word)
{
    int length = strlen(word) - 1;
    int i = 0;
    int false = 0;
    int true = 1;

    while (word[i] != '\0') {
        if (word[i] != word[length - i]) {
            return false;
        }
        i++;
    }

    return true;
}
",0
zwon694,1696303268,3,"int IsPalindrome(char *word)
{
    int length = strlen(word) - 1;
    int i = 0;

    while (word[i] != '\0') {
        if (word[i] != word[length - i]) {
            return 0;
        }
        i++;
    }

    return 1;
}
",1
zwu591,1696660995,1,"int IsPalindrome(char *word)
{
    int i;
    int end = strlen(word) - 1;

    for (i = 0; i <= end/2; i++) {
        if (word[i] != word[end-i]) {
            return 0;
        }
    }

    return 1;
}",1
zyah987,1696545673,1,"int IsPalindrome(char *word)
{
    int word_length = strlen(word);
    for (int i = 0; i < word_length /2 && word[i] == word[word_length  - 1 - i]; i+);
    if (i == word_length/2)
        return 1;
    return 0;
}
",0
zyah987,1696545681,2,"int IsPalindrome(char *word)
{
    int word_length = strlen(word);
    for (int i = 0; i < word_length /2 && word[i] == word[word_length  - 1 - i]; i++);
    if (i == word_length/2)
        return 1;
    return 0;
}
",0
zyah987,1696545715,3,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    for (int i = 0; i < word_length /2 && word[i] == word[length  - 1 - i]; i++);
    if (i == length/2)
        return 1;
    return 0;
}
",0
zyah987,1696546025,4,"int IsPalindrome(char *word)
{
    int wordLength = strlen(word);
    int matches = 0;
    for (int i = 0; i < wordLength/2; i++)
    {
        if (word[i] == word[wordLength - 1 - i]) 
            matches++;
        else 
            break; 
    }
    return matches == wordLength/2;
}
",1
zyao804,1696210320,1,"int IsPalindrome(char *word)
{
    char newword[100];
    int length = strlen(word);
    for (int i=0;i<length;i++)
    {
        newword[i] = word[length-i-1];
        newword[length] = '\0';
    }
    if (strcmp(newword,word)==0)
    {
        return 1;
    }
    return 0;
}",1
zyu100,1696394600,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    char newword[1000];
    int j=0;
     for (int i=0; i<length;i++){
       if (word[i]!=' '){
            newword[j]=word[i];
            j++;
         }
         
     }
                 newword[j]='\0';

        int newlen=strlen(newword);
         
    for (int i=0; i<newlen/2;i++){
    
        if (newword[i]!=newword[newlen-1]){
            return 0;
        }
    newlen--;
        }
    return 1;
}
",1
zzho965,1696797658,1,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j;) {
        if (str[i] != str[j]) {
            return 0; 
        }
        i++;
        j--;
    }

    return 1;
}
",0
zzho965,1696797696,2,"int IsPalindrome(char *word)
{
    int length = strlen(word);
    int i, j;

    for (i = 0, j = length - 1; i < j;) {
        if (word[i] != word[j]) {
            return 0; 
        }
        i++;
        j--;
    }

    return 1;
}
",1
zzol692,1696731723,1,"//Author: Zara Zoll
// IsPalinfrome is a function that takes a string as an input and returns 1 if it is a palindrome and returns 0 if it is not
int IsPalindrome(char* str) {
    int length = strlen(str);
    int start = 0; // the first character
    int end = length - 1; //the last character

    while (start < end) {
        if (str[start] != str[end]) { //checks if the characters are equal/the same
            return 0; // returns 0 when it is not a palindrome
        }
        start++; //adds to start and minus from end until start is no longer smaller than end
        end--;
    }

    return 1; // reuturns 1 when word is a palindrome
}",1
