upi,time,try,answer,rawfraction
aahk798,1696299545,1,"void Censor(char *phrase, int left, int right)
{
    int i; 
	for (i=left; i<=right; i++) { 
        phrase[i]= 'X';
 
        }
    
}
",1
aakm278,1696831209,1,"void Censor(char *phrase, int left, int right)
{
    	int i = left;
	for (i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
	printf(""%s"", phrase);
}
",0
aakm278,1696831377,2,"void Censor(char *phrase, int left, int right)
{
    int i = left;
	for (i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
	//printf(""%s"", phrase);
}
",1
aana675,1696720244,1,"#include <stdio.h>
#include <string.h>
void Censor(char *str, int left, int right) {
    if (str == NULL || left < 0 || right < 0 || left >= right)
        return; 
    
    int length = strlen(str);

    
    if (left < 0) left = 0;
    if (right >= length) right = length - 1;

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",0
aana675,1696720410,2,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    if (str == NULL || left < 0 || right < 0)
        return;

    int length = strlen(str);

    if (left < 0) left = 0;
    if (right >= length) right = length - 1;

    str[right] = 'X';
}
",0
aana675,1696720577,3,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    if (str == NULL || left < 0 || right < 0)
        return;

    int length = strlen(str);

    if (left < 0) left = 0;
    if (right >= length) right = length - 1;

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
aaza463,1696207132,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++){
        phrase[i] = 'X';
    }    
}
",1
aazh582,1696833990,1,"void Censor(char str[], int left, int right)
{
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
abha257,1696231836,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
abro522,1696222345,1,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
acam267,1696668157,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i < right+1; i++) {
        phrase[i] = 'X';
    }
}",1
ache725,1696675082,1,"void Censor(char *phrase, int left, int right)
{
    if (left >= 0 && right < strlen(str)) {
        for (int i = left; i <= right; i++) {
            str[i] = 'X';
        }
    }
}
",0
ache725,1696675190,2,"void Censor(char *phrase, int left, int right)
{
    if (left >= 0 && right < strlen(phrase)) {
        for (int i = left; i <= right; i++) {
            str[i] = 'X';
        }
    }
}
",0
ache725,1696675222,3,"void Censor(char *phrase, int left, int right)
{
    if (left >= 0 && right < strlen(phrase)) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}
",1
achi359,1696297391,1,"void Censor(char *phrase, int left, int right)
{
    //determine length of the phrase 
    int length = 0;
    int i = 0;
    while (phrase[i] != '\0') {
        length++; 
        i++;
    }

    for (int i = 0; i < length; i++) {
        if ((i >= left) && (i <= right)) { 
            phrase[i] = 'X';
            
        }
    }
}
",1
acoc261,1696289588,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
    for (i = left; i < right + 1; i++){
        phrase[i] = 'X';
    }
}
",1
adav221,1696755431,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    if (left < 0 || right >= strlen(str)) {
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}

int main() {
    char censor[100] = ""ENGGEN131"";
    Censor(censor, 6, 8);
    printf(""%s\n"", censor);  // Output: ENGGENXXX

    return 0;
}",0
adav221,1696755730,2,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    if (left < 0 || right >= strlen(str)) {
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
adey750,1696668857,1,"void Censor(char *phrase, int left, int right)
{
    int i; 
    
    for(i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
afal438,1696237556,1,"void Censor(char *phrase, int left, int right)
{
    	int Length = 0;
	while (phrase[Length] != '\0')
	{
		Length++;
	}

	int Difference = right - left;

	int i = 0;
	while (phrase[i] != '\0')
	{
		if (i >= left && i <= right)
		{
			phrase[i] = 'X';
		}

		

		i++;

	}

}
",0
afal438,1696237595,2,"void Censor(char *phrase, int left, int right)
{

	int i = 0;
	while (phrase[i] != '\0')
	{
		if (i >= left && i <= right)
		{
			phrase[i] = 'X';
		}

		

		i++;

	}

}
",1
afit324,1696831743,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{

    for (int i = left; i <= right; i++) {
        phrase[i] = 88;
    }
    
}

",1
agan859,1696494247,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i < (right+1); i++) {
	phrase[i] = 'X';

}
",0
agan859,1696494297,2,"void Censor(char *phrase, int left, int right)
{
   int i;


    for (i = left; i < (right+1); i++) {
	phrase[i] = 'X';

    }

}
",1
agay279,1696477554,1,"void Censor(char *phrase, int left, int right)
{
int i=left;
   while (i>=left&&i<=right){
    phrase[i]='X';
    i++; 
    } 
}",1
agou682,1696842600,1,"void Censor(char *phrase, int left, int right)
{
   if (left < 0 || right>=strlen(phrase)) {
        printf(""Invalid index positions\n"");
        return;
    }

    for (int i=left; i<=right;i++) {
        phrase[i] = 'X';
    }  
}
",1
ahac139,1696291615,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
ahac223,1696808503,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
        
    }
}",1
ahac223,1696808560,2,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 88;
        
    }
}",1
ahai431,1696720884,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
ahas673,1696220897,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right ; i++)
    {
        phrase[i] = 'X';
    }
}",1
ahij206,1696834349,1,"void Censor(char *phrase, int left, int right)
{
    int i, j
    for (i = left; j = right; i <= j; i++) {
        phrase[i] = 'X';
    }
}
",0
ahij206,1696834414,2,"void Censor(char *phrase, int left, int right)
{
    int i, j;
    for (i = left; j = right; i <= j; i++) {
        phrase[i] = 'X';
    }
}
",0
ahij206,1696834491,3,"void Censor(char *phrase, int left, int right) 
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ahua579,1696493770,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
ahus071,1696816297,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right;i++)
	{
		phrase[i] = 'X';
	}
}",1
ajam744,1696393852,1,"void Censor(char *phrase, int left, int right)
{
    int i, j;
    for (i = left; i < right + 1; i++)
    {
        phrase[i] = 'X';    
    }
}
",0
ajam744,1696393872,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i < right + 1; i++)
    {
        phrase[i] = 'X';    
    }
}
",1
ajeo563,1696657535,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {

		phrase[i] = 'X';

	}

}",1
ajhz010,1696305950,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ajhz011,1696220402,1,"#include <stdio.h>

void Censor(char* phrase, int left, int right)
{
	int i;
	
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
ajhz216,1696649358,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
ajhz318,1696673021,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    char word = 'X';

    for (i = left; i <= right; i++) {
        censor[i] = word;
    }
}
",0
ajhz318,1696673166,2,"void Censor(char *censor, int left, int right) {
    int i;
    char word = 'X';

    for (i = left; i <= right; i++) {
        censor[i] = word;
    }
}",1
ajhz444,1696382639,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';    
}
",0
ajhz444,1696382872,2,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';    
	}
}
",1
ajhz488,1696724055,1,"void Censor(char *phrase, int left, int right)
{
    for (left;left<=right; left++) {
        phrase[left] = 88;
    }
}
",0
ajhz488,1696724161,2,"void Censor(char *phrase, int left, int right)
{
    while (right>=left) {
        phrase[left] = 88;
        left ++;
    }
}
",1
ajin489,1696303248,1,"#include <stdio.h>
void Censor(char word[], int a, int b){
    int i;
    for (i = a; i <= b; i++){
        word[i] = 'X';
    }
}",1
ajoh511,1696356808,1,"void Censor(char *word, int left, int right)
{
    for (int i = left; i <= right; i++) {
        word[i] = 'X';

    }
}
",1
akam256,1696830050,1,"void Censor(char *trump, int leftist, int murica) {
int i = 0;
while (trump[i] != '\0') {
if (i >= leftist && i <= murica) {
str[i] = 'X';
}
i++;
}
}

",0
akam256,1696830064,2,"void Censor(char *trump, int leftist, int murica) {
int i = 0;
while (trump[i] != '\0') {
if (i >= leftist && i <= murica) {
trump[i] = 'X';
}
i++;
}
}

",1
akam677,1696739743,1,"void Censor(char *phrase, int left, int right) {
    int len = strlen(phrase);



    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",0
akam677,1696739855,2,"void Censor(char *phrase, int left, int right) {
    int len = strlen(phrase);

    if (left < 0 || right >= len || left > right) {
        printf(""Invalid input indices.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
aker238,1696216968,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i=left; i<=right; i++){
        phrase[i] = 'X';
    }
}
",1
akin699,1696601242,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    i = left;
	while (i <= right) {
		phrase[i] = 'X';
		i++;
	} 
}
",1
akmu146,1696738057,1,"void Censor(char *phrase, int left, int right)
{
     for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
akod059,1696326044,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
akri368,1696771874,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
akwo440,1696827371,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
}",1
ali867,1696802517,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
",1
alum086,1696745388,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    if (str == NULL || left < 0 || right < 0 || left >= strlen(str) || right >= strlen(str)) {
        // Input validation: Check for invalid inputs.
        printf(""Invalid input.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}

int main() {
    char myString[] = ""This is a test string"";
    int left = 5;
    int right = 8;

    printf(""Original String: %s\n"", myString);
    Censor(myString, left, right);
    printf(""Censored String: %s\n"", myString);

    return 0;
}
",0
alum086,1696801273,2,"#include <stdio.h>
#include <string.h>

int main() {
    char myString[] = ""This is a test string"";
    int left = 5;
    int right = 8;

    printf(""Original String: %s\n"", myString);
    Censor(myString, left, right);
    printf(""Censored String: %s\n"", myString);

    return 0;
}
",0
alum086,1696801720,3,"#include <stdio.h>

int main() {
    char myString[] = ""This is a test string"";
    int left = 5;
    int right = 8;

    printf(""Original String: %s\n"", myString);
    Censor(myString, left, right);
    printf(""Censored String: %s\n"", myString);

    return 0;
}
",0
alum086,1696801736,4,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    // Check if the given indices are valid
    int length = strlen(str);
    if (left < 0 || right >= length || left > right) {
        printf(""Invalid indices\n"");
        return;
    }

    // Replace characters between left and right (inclusive) with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
amac853,1696557595,1,"void Censor(char *phrase, int left, int right)
{
    while (left < (right + 1))
    {
        phrase[left] = 'X';
        left++;
        
    }
}
",1
amag544,1696741113,1,"void Censor(char *phrase, int left, int right)
{
   int length = strlen(phrase);
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}
",0
amag544,1696741221,2,"void Censor(char *phrase, int left, int right)
{
   for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
amah664,1696841615,1,"void Censor(char *phrase, int left, int right)
{
    int i; 
    int length = strlen(phrase); 
    for (i = left; i <=right && i <= length; i++) {
           phrase[i] = 'X';
}
",0
amah664,1696842789,2,"void Censor(char *phrase, int left, int right)
{
    int i; 
    for (i = left; i <=right; i++) {
           phrase[i] = 'X';
       }
}
",1
amal783,1696205384,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
amar516,1696822771,1,"void Censor(char *phrase, int left, int right)
{
int x = left;
int y = right;

while (x <= y){
    phrase[x] = X;
    x++;
    }
}
",0
amar516,1696822878,2,"void Censor(char *phrase, int left, int right)
{
int x = left;
int y = right;
int Letter;
Letter = X;

while (x <= y){
    phrase[x] = Letter;
    x++;
    }
}
",0
amar516,1696822938,3,"void Censor(char *phrase, int left, int right)
{
int x = left;
int y = right;
int Letter;
Letter = 'X';

while (x <= y){
    phrase[x] = Letter;
    x++;
    }
}
",1
amar704,1696231165,1,"void Censor(char *phrase, int left, int right)
{
  
    while (left <= right){
        phrase[left] = 'X';
        left++;
    }  
}
",1
amar768,1696650811,1,"void Censor(char *phrase, int left, int right) {
    for (left; left <= right; left++) {
    phrase[left] = 'X';
    }
}
",0
amar768,1696651045,2,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
    phrase[i] = 'X';
    }
}
",1
amat407,1696226313,1,"void Censor(char *phrase, int left, int right)
{ 
    int i=0;
    int diff=right-left;
    while (i<=diff) {
           phrase[left+i]='X';
           i++;
    }
}
",1
amcm539,1696654866,1,"void Censor(char *phrase, int left, int right)
{
/*Censor replaces the desired elements of a string array with the letter X.*/

/*3 Inputs: 
            1. A string array
            2. An integer representing the leftmost variable to replace
            3. An integer representing the rightmost integer to replace*/

/*Output: Void. The function should replace the input arrray in the main function.*/

/*Author: Adam McMann*/

/*A for loop can be used between the ranges of the left and right input integers*/
int i;
for(i=left; i<=right; i++){
    phrase[i] = 'X';
}
return;    
}
",1
amhk647,1696372903,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i < right + 1; i++) {
	    phrase[i] = 'X';
    }
}
",1
amok249,1696207987,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
amur986,1696757445,1,"void Censor(char* phrase, int left, int right)
{
    int i;
    for (i = left;i <= right;i++) {
        phrase[i] = 'X';
        
        }
    return;
}",1
anig922,1696732458,1,"void Censor(char *string, int left, int right)
{
int a;
    for (a= left; a< right + 1; a = a + 1){
        
        string[a] = 'X';
    }
    
}
",1
aosm976,1696819868,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;

    while (i <= right)
    {
        phrase[i] = 'X';
        i++;
    }
}
",1
apan786,1696813474,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);

    if (left >= 0 && left < length && right >= left && right < length) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'x';
        }
    }
}",0
apan786,1696813483,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);

    if (left >= 0 && left < length && right >= left && right < length) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}",1
apat750,1696408937,1,"
void Censor(char *phrase, int left, int right)
{
int len= strlen(phrase);
for (int i =left; i <= right; i++){
    phrase[i] = 'X';
}


    
}
",0
apat750,1696409034,2,"void Censor(char *phrase, int left, int right)
{
for (int i =left; i <= right; i++){
    phrase[i] = 'X';
    
}
}",1
apat824,1696836643,1,"void Censor(char *phrase, int left, int right)
{
  for (int i = left; i <= right; i++){
        phrase[i] = 'X' ;
        
    }  
}
",1
apen181,1696623437,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i<=right; i++){
        phrase[i] = 'X'
        
    }
    return;
}
",0
apen181,1696623469,2,"
#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i<=right; i++){
        phrase[i] = 'X';
        
    }
    return;
}

",1
apre444,1696837725,1,"void Censor(char *phrase, int left, int right)

/* Censor is a function that three inputs; a character string containing a phrase to be censored,
and two integer values that indicate the portion of characters to be censored
*/
{
    /*Creating a for loop to go through the characters in 'phrase' between left and right*/
    for (int i = left; i <= right; i++) {
        /*Replacing these characters with 'X'*/
        str[i] = 'X';
    }
    
}",0
apre444,1696837744,2,"void Censor(char *phrase, int left, int right)

/* Censor is a function that three inputs; a character string containing a phrase to be censored,
and two integer values that indicate the portion of characters to be censored
*/
{
    /*Creating a for loop to go through the characters in 'phrase' between left and right*/
    for (int i = left; i <= right; i++) {
        /*Replacing these characters with 'X'*/
        phrase[i] = 'X';
    }
    
}",1
apur448,1696766031,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
aqu284,1696826004,1,"void Censor(char* phrase, int left, int right){

	int length = strlen(phrase);

	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",0
aqu284,1696826115,2,"void Censor(char* phrase, int left, int right){
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
arah160,1696842253,1,"void Censor(char *phrase, int left, int right)
{
    int counter = 0;
    while (*phrase != '\0') {
        if (counter >= left && counter <= right) {
            *phrase = 'X';
        }
        counter++;
        phrase++;
    } 
}",1
arus530,1696299888,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i<= right; i++){
        phrase[i] = 'X';
    }
}
",1
aryu462,1696805820,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int length = strlen(str); 
    
    if (left < 0 || right >= length) {
        return; 
    }
    
    for (int i= left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
asaa285,1696797888,1,"
void Censor(char *phrase, int left, int right)
{
    for (int i = left;i<=right;i++)
    {
        phrase[i] = 'X';
    }
}",1
asah845,1696708306,1,"void Censor(char *phrase, int left, int right)
{

char pp[] = ""X"";
int i;
int length;
int j = 0;

length = strlen(phrase);

for (i = left; i <= right; i++) {
	phrase[i] = pp[j];
}

}
",0
asah845,1696708326,2,"void Censor(char *phrase, int left, int right)
{

char pp[] = ""X"";
int i;
int j = 0;

for (i = left; i <= right; i++) {
	phrase[i] = pp[j];
}

}
",1
ashe298,1696838842,1,"void Censor(char *phrase, int left, int right)
{
  for (int i=left; i<= right; i++){
  phrase[i] = 'X';
  }
}",1
ashi565,1696241835,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int length = strlen(str);
    
    // Check if left and right are within the valid range
    if (left < 0 || right >= length) {
        printf(""Invalid index positions\n"");
        return;
    }
    
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}


",1
asim819,1696646545,1,"void Censor(char* phrase, int left, int right)
{

	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';

	}

}
",1
aski294,1696643778,1,"void Censor(char *phrase, int left, int right) 
{
	int i = left;
	char censChar = 'X';
	while (i <= right) {
		phrase[i] = censChar;
		i++;
	}
}
",1
asmi629,1696817939,1,"void Censor(char *phrase, int left, int right)
{
    while (left <= right) {
    phrase(left) = X
    left++
}
",0
asmi629,1696818819,2,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i <= right;i++) {
    phrase[i] = 'X';
    }

}
",1
atay777,1696649990,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++)
    {
        phrase[i]='X';
    }
    
}
",1
atee059,1696210276,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i<=right; i++){
        phrase[i] = 'X';
    }
}
",1
atho643,1696328171,1,"void Censor(char *phrase, int left, int right)
{
  for (int pos = left; pos<right; pos++) {
      phase[pos] = 'X';
  }

}",0
atho643,1696328187,2,"void Censor(char *phrase, int left, int right)
{
  for (int pos = left; pos<right; pos++) {
      phrase[pos] = 'X';
  }

}",0
atho643,1696328235,3,"void Censor(char *phrase, int left, int right)
{
  for (int pos = left; pos<=right; pos++) {
      phrase[pos] = 'X';
  }

}",1
athu157,1696324327,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
atup175,1696846812,1,"void Censor(char *phrase, int left, int right)
{
    int isLowerCase(char *phrase){
        return (*phrase >= 'a' && *phrase <= 'z');
    }
    
    char toUpperCase(char *phrase){
        if(isLowerCase(phrase)){
            return *phrase - ('a' - 'A');
        }
        return *phrase;
    }
    
    void Capitalize(char *phrase){
        *phrase = toUpperCase(phrase);
        
        char *p = phrase + 1;
        while (*p != '\0'){
            if (*(p - 1) == ' '){
                *p = toUpperCase(p);
            }
            p++;
        }
    }
}
",0
atup175,1696846841,2,"    int isLowerCase(char *phrase){
        return (*phrase >= 'a' && *phrase <= 'z');
    }
    
    char toUpperCase(char *phrase){
        if(isLowerCase(phrase)){
            return *phrase - ('a' - 'A');
        }
        return *phrase;
    }
    
    void Capitalize(char *phrase){
        *phrase = toUpperCase(phrase);
        
        char *p = phrase + 1;
        while (*p != '\0'){
            if (*(p - 1) == ' '){
                *p = toUpperCase(p);
            }
            p++;
        }
    }
}
",0
atup175,1696846884,3,"int isLowerCase(char *phrase){
    return (*phrase >= 'a' && *phrase <= 'z');
}
    
char toUpperCase(char *phrase){
    if(isLowerCase(phrase)){
        return *phrase - ('a' - 'A');
    }
    return *phrase;
}
    
void Capitalize(char *phrase){
    *phrase = toUpperCase(phrase);
        
    char *p = phrase + 1;
    while (*p != '\0'){
        if (*(p - 1) == ' '){
            *p = toUpperCase(p);
        }
        p++;
    }
}

",0
atup175,1696847580,4,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 88;
    }
}
",1
avan381,1696745537,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}",1
awal599,1696471040,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    int length;
    length = strlen(phrase);
    for (i = left; i <= right; i++) 
    {
        phrase[i]='X';
        
    }
    
    
}
",0
awal599,1696471106,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) 
    {
        phrase[i]='X';
        
    }
    
    
}
",1
awar747,1696840089,1,"
void Censor(char *str, int left, int right) {
    int len = strlen(str);

    // Check if left and right are valid index positions
    if (left < 0 || right >= len || left > right) {
        return;
    }

    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
awil907,1696284172,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }

}",1
awri757,1696293706,1,"void Censor(char* phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ayan607,1696675582,1,"void Censor(char* word, int left, int right)
{
    int i;
    for (i = left; i <= right;i++){
        word[i] = 'X';
    }
}",1
ayou303,1696479426,1,"
#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';

	}


}",1
ayou533,1696390457,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ayua214,1696813613,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int len = strlen(str);

    // Ensure left and right are within bounds
    if (left < 0 || right >= len)
        return;

    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
bate521,1696828365,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        str[i] = 'x';
    }
}",0
bate521,1696828382,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'x';
    }
}",0
bate521,1696828392,3,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
bcar662,1696772877,1,"void Censor(char *phrase, int left, int right)
{
    	int i = left;


	while (i <= right) {
		 phrase[i] = 'X';
		i++;
	}
}
",1
bcha389,1696297847,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = 0; i < strlen(phrase); i++) {
		if (i >= left && i <= right) {
			phrase[i] = 'X';
		}
	}
}",1
bcha726,1696450880,1,"void Censor(char *phrase, int left, int right) {
    
    int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
bcos422,1696298763,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = char('X');

	}

}",0
bcos422,1696299493,2,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';

	}

}",1
bcru157,1696301490,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
besk864,1696466502,1,"void Censor(char *phrase, int left, int right)
{
     for (int i = left; i <= right; i++){
        
        censor[i] = 'X';
        
        }
}
",0
besk864,1696466568,2,"void Censor(char *phrase, int left, int right)
{
     for (int i = left; i <= right; i++){
        
        phrase[i] = 'X';
        
        }
}
",1
bfis965,1696390423,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
bfla774,1696818377,1,"void Censor(char *phrase, int left, int right)
{
  int i;
int length;
length = strlen(phrase);

for (i = left; i< right; i++) {
	phrase[i] = 'X';
}  
}
",0
bfla774,1696818458,2,"void Censor(char *phrase, int left, int right)
{
  int i;

for (i = left; i<= right; i++) {
	phrase[i] = 'X';
}  
}
",1
bgib630,1696293343,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i < right; i++)
    {
        phrase[i] = '*';
    }
}
",0
bgib630,1696293387,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
bgru726,1696662686,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
bguo360,1696205595,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i < right + 1; i++) {
		phrase[i] = 88;
	}
	return;
}",1
bhua898,1696207703,1,"void Censor(char *phrase, int left, int right)
{
    for (left; left <= right; left++) {
        phrase[left] = 'X';
    }
}",0
bhua898,1696212949,2,"void Censor(char *phrase, int left, int right)
{
    for (; left <= right; left++) {
        phrase[left] = 'X';
    }
}",1
bjin223,1696816273,1,"void Censor(char *phrase, int left, int right)
{
    int i=0;
    while (left+i<=right){
      phrase[left+i]= 'X';
      i++;
    }  
}
",1
bjon836,1696209050,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <=right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
bkho028,1696219768,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
blar030,1696385233,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i<=right; i++)
    {
        phrase[i]= 'X';
    }
}",1
bli482,1696304164,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
	int i;
	
	for (i = left; i < (right + 1); i++) {
		phrase[i] = 'X';
	}

}",1
bli775,1696248318,1,"void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);

    if (left >= 0 && left < length && right >= 0 && right < length && left <= right) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}",1
blin888,1696727179,1,"void Censor(char *phrase, int left, int right)
{
    int len;
    len = strlen(phrase);

    if (left < 0 || right > len) {
        return;
    }

    int i;
    for (i = 0; i < right; i++) {
        phrase[i] = 'X';
    }

}
",0
blin888,1696727478,2,"
void Censor(char *phrase, int left, int right)
{

    int i;
    for (i = left; i <=right; i++) {
        phrase[i] = 'X';
    }

}
",1
bmac148,1696330289,1,"void Censor(char *phrase, int left, int right)
{for (int i = left; i <= right; i++){
    phrase[i] = 'X';
}
    
}",1
bora417,1696405142,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
bpak212,1696801994,1,"#include <stdio.h>
void Censor(char *phrase, int left, int right)
{
    int len = strlen(phrase);
    
    if (left < 0 || left >= len || right < 0 || right >= len || left > right) 
    {
        printf(""not valid index positions\n"");
        return;
    }

    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
   
}
",0
bpak212,1696802001,2,"#include <stdio.h>
void Censor(char *phrase, int left, int right)
{
    int len = strlen(phrase);
    
    if (left < 0 || left >= len || right < 0 || right >= len || left > right) 
    {
        printf(""not valid index positions\n"");
        return;
    }

    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
   

",1
bpat907,1696556432,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
	phrase[i] = 'X';
}
}
",1
bril841,1696820616,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i;

    for (i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
",0
bril841,1696820665,2,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
",1
bsil719,1696375653,1,"void Censor(char *phrase, int left, int right)
{
    for (left; left <= right; left++){
        phrase[left] = 'X';
    }
}
",0
bsil719,1696376128,2,"void Censor(char *phrase, int left, int right)
{
    for (left; left <= right; left++){
        phrase[left] = 'X';
    }
}",0
bsil719,1696376143,3,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
bvau704,1696380544,1,"void Censor(char *phrase, int left, int right)
{
    
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
        
        
      
        
        
    }
    
}
",0
bvau704,1696380564,2,"void Censor(char *phrase, int left, int right)
{
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
        
        
      
        
        
    }
    
}
",1
bwil199,1696816232,1,"void Censor(char *phrase, int left, int right)
{
  int i;
  
  for (i = left; i <= right; i++) {
      phrase[i] = X;
  }
}
",0
bwil199,1696816313,2,"void Censor(char *phrase, int left, int right)
{
  int i;
  
  for (i = left; i <= right; i++) {
      phrase[i] = 'X';
  }
}
",1
bwis161,1696320629,1,"void Censor(char* phrase, int lower, int upper) {
	int length = strlen(phrase);
	int i;

	for (i = 0; i < length; i++){
		if (i >= lower && i <= upper) {
			phrase[i] = 'X';
		}
	}
}",1
bwoo348,1696840772,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=0;i<strlen(phrase);i++){
        if (i >= left && i <= right){
            phrase[i] = 'X';
        }
    }
}
",1
byiu331,1696234332,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}

",1
byul423,1696247942,1,"void Censor(char *phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}

",1
cada577,1696324777,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    
    int i;
    
    for(i=left; i<right+1; i++){
        
        phrase[i] = 'X';
    }
    
    
    
    
    
}
",1
cana544,1696375558,1,"void Censor(char* phrase, int left, int right) {
	for (int i = 0; i < strlen(phrase); i++) {
		if (i >= left && i <= right) {
			phrase[i] = 'X';
		}
	}
}
",1
cang688,1696807197,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
cbee072,1696298122,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
    
}
",1
cben375,1696478684,1,"void Censor(char *phrase, int left, int right)
{
    if (phrase[0] == '\0') {
    return;
}

while (left <= right) {
    phrase[left] = 'X';
    left++;
}
}
",1
cbro223,1696211483,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <=right; i++) {
        phrase[i] = 'X';
    }
}
",1
cbro435,1696665413,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
 for(int i = left; i<=right; i++){
     phrase[i]='X';
 }
}",1
cbro989,1696286344,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
    phrase[i] = 'X';}
}

",1
cbur703,1696471094,1,"void Censor(char *phrase, int left, int right)
{
    int i;
  
  for (i=0; i <= right; i++) {
      if (left <= i && i <= right) {
          phrase[i] = 'X';
      }
  }  
}
",1
ccha663,1696225821,1,"void Censor(char *phrase, int left, int right)
{
    

    for (int i = left; i <= right; i++)
    {
        if (phrase[i] == '1' || phrase[i] == '2' || phrase[i] == '3' || phrase[i] == '4'|| phrase[i] == '5'|| phrase[i] == '6'
        || phrase[i] == '7'|| phrase[i] == '8'|| phrase[i] == '9'|| phrase[i] == '0') {
        phrase[i] = 'X';
        }
    }
    
    
}",0
ccha663,1696225845,2,"void Censor(char *phrase, int left, int right)
{
    

    for (int i = left; i <= right; i++)
    {
        
        phrase[i] = 'X';
        
    }
    
    
}",1
ccha854,1696647593,1,"void Censor(char *phrase, int left, int right) {
    
    int i;
    for (i = left; i<right+1; i++) {
        phrase[i] = 'X';
    }

}

",1
cche441,1696211291,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 88;
    }
}
",1
cche873,1696592144,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    
    for (int i = left; i <= right; i++){
     phrase[i] = 'X';   
    }
}",1
cdel568,1696214183,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
cdin152,1696662429,1,"void Censor(char* phrase, int left, int right)
{

	while (left <= right) {
		phrase[left] = 'X';
			left++;
	}
}",1
cdin268,1696237494,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i=left; i<=right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
cdsi208,1696669452,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
cgal160,1696653909,1,"void Censor(char *phrase, int left, int right)
{
    int i, length;
    length = strlen(phrase);
    for (i = 0; i < length; i++) {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        }
    }
}
",1
cgaz516,1696657715,1,"void Censor(char *phrase, int left, int right)
{
        for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
chua804,1696829260,1,"void Censor(char *str, int left, int right) {
    // Check if the indices are valid
    if (left < 0 || right >= strlen(str)) {
        printf(""Invalid indices\n"");
        return;
    }

    // Replace characters between left and right (inclusive) with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
civa625,1696339411,1,"void Censor(char *phrase, int left, int right)
{
    int i, j;
    int length = strlen(phrase);
    int start = left;
    int end = right;
    
    for (i = 0; i < length; i++) {
        if (i == start) {
            for (j = start; j <= right; j++) {
                phrase[j] = 'X';
            }
        }
    }
}",0
civa625,1696339462,2,"void Censor(char *phrase, int left, int right)
{
    int i, j;
    int length = strlen(phrase);
    int start = left;
    int end = right;
    
    for (i = 0; i < length; i++) {
        if (i == start) {
            for (j = start; j <= end; j++) {
                phrase[j] = 'X';
            }
        }
    }
}",1
cjun818,1696838899,1,"void Censor(char *phrase, int left, int right) 
{
    int length;

    length = strlen(phrase);

    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
",0
cjun818,1696839032,2,"void Censor(char *phrase, int left, int right) 
{
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}",1
clee482,1696774522,1,"void Censor(char *phrase, int left, int right)
{
    for(left; left<=right; left++)
    {
        phrase[left] = 'X';
    }
}",0
clee482,1696775116,2,"void Censor(char *phrase, int left, int right)
{
    for(; left<=right; left++)
    {
        phrase[left] = 'X';
    }
}",1
cleu746,1696650110,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i=left; i<= right; i++) {
        phrase[i] = 'X';
    }
}",1
clob269,1696300699,1,"void Censor(char* word, int left, int right) {

    do {

        word[left] = 'X';
        left++;


    } while (left != right + 1);


}",1
cmac377,1696840469,1,"void Censor(char *phrase, int left, int right)
{
  for(int i = left; i < right+1; i++){
      phrase[i] = 88;
  }  
}
",1
cmad989,1696373328,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i= left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}",1
cmas527,1696752831,1,"void Censor(char *phrase, int left, int right)
{
 int i;
for (i = left; i <=right; i++) {
phrase[i]='X';
        }
     
}",1
cmcm317,1696736957,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i = 0;
    for (i = left; i < right + 1; i++) {
        phrase[i] = 'X';
    }
}",1
cmia215,1696586962,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right ; i++)
	{
		phrase[i] = 'X';
	}
}",1
cmot464,1696207977,1,"void Censor(char *phrase, int left, int right)
{

    int i;

    for(i = left; i < right + 1; i++)
    {
        phrase[i] = 'X';
    }

}",1
cnai408,1696832015,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
cnie825,1696803677,1,"void Censor(char *phrase, int left, int right)
{
 for (int i = left; i <= right; ++i) {
        phrase[i] = 'X';
    }
}   
",1
coli772,1696302795,1,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i < right + 1; i++) {
        phrase[i] = 'X';
    }
}",1
couy656,1696324249,1,"void Censor(char *phrase, int left, int right)
{
   for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }  
}
",1
csan114,1696229315,1,"void Censor(char* phrase, int left, int right)
{
	int i = left;
	int j = right + 1;

	while (i < j) {
		phrase[i] = 'X';
		i++;
	}
}
",1
cset571,1696228772,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
	phrase[i] = 'X';
    }
}
",1
csin574,1696455426,1,"void Censor(char *phrase, int left, int right)
{
int i;
for (i = left; i <= right; i++) {
	phrase[i] = 'X';
}
}
",1
cste189,1696287666,1,"void Censor(char *phrase, int left, int right)
{
    int i;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
ctof106,1696847247,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    
}
",1
ctub889,1696814322,1,"void Censor(char str[], int left, int right) {
    int length = strlen(str);
    if (left < 0 || right >= length || left > right) {
        printf(""Invalid indices\n"");
        return;
    }
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}

",1
cugn667,1696384575,1,"
void Censor(char *phrase, int left, int right)
{
   char X = 'X';
   while ( left <= right  ){
       phrase[left] = X;
       
       left++;
       
     
       
   }
    
}",1
cwei506,1696659772,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = 0; i < strlen(phrase); i++) {
		if (i >= left && i <= right) {
			phrase[i] = 'X';
		}
	}

}
",1
cwu200,1696732399,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right){
  int i;
  for (i = left; i <= right; i++){
    phrase[i] = 'X';
  }

}",1
cyan312,1696332873,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
cyiu210,1696374198,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++)  {
        phrase[i] = 'X';
    }
}",1
dbar153,1696281705,1,"void Censor(char *phrase, int left, int right)
{
    int i;
char word[100] = ""X"";
for (i = left; i <= right; i++) {
	phrase[i] = word[0];
}
}
",1
dcha468,1696804939,1,"void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);
    
    // Check if left and right are within valid bounds
    if (left >= 0 && left < length && right >= 0 && right < length) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}",1
dcha468,1696804946,2,"void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);
    

    if (left >= 0 && left < length && right >= 0 && right < length) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}",1
dche306,1696385468,1,"void Censor(char *phrase, int left, int right)
{
    int x = left;
    int i;
    for(i=x; i <= right; i++){
        phrase[i]='X';
        
    }
    
}",1
deri361,1696227561,1,"include <stdio.h>

void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i < right + 1; i++) {
		phrase[i] = 'X';
	}
}
",0
deri361,1696227586,2,"#include <stdio.h>

void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i < right + 1; i++) {
		phrase[i] = 'X';
	}
}
",1
dfor626,1696299153,1,"void Censor(char *phrase, int left, int right)
{
   for (int i = left; i < right + 1; i++) {
       phrase[i] = 'X';
   } 
}
",1
dgal735,1696237355,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i;
    for (i=0; i<length ;i++){
        if (i=left){
            for(i=left;i<=right;i++){
                phrase[i]='X';
            }
        }
    }
}
",0
dgal735,1696237709,2,"void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);
    for (int i = left; i <= right && i < length; i++) {
        phrase[i] = 'X';
    }
}",1
dha524,1696580368,1,"void Censor(char* phrase, int left, int right)
{
	int a, b;
	int i;

	i = left;
	b = right + 1;

	for (i; i < b; i++) {
		phrase[i] = 'X';
	}
}
",0
dha524,1696580483,2,"void Censor(char* phrase, int left, int right)
{
	int b;
	int i;

	i = left;
	b = right + 1;

	for (i; i < b; i++) {
		phrase[i] = 'X';
	}
}
",0
dha524,1696581209,3,"void Censor(char* phrase, int left, int right)
{
	int i, b;

	b = right + 1;

	for (i = left; i < b; i++) {
		phrase[i] = 'X';
	}
}
",1
dhah941,1696727174,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;

	while (i <= right)
	{
		phrase[i] = 'X';
		i++;
	}
}
",1
dhar714,1696385545,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
dhen760,1696212521,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    for (int i = left; i<= right; i++) {
        phrase[i] = 'X';
    }
}

",1
dhua391,1696673281,1,"
void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
dhul688,1696286359,1,"void Censor(char *phrase, int left, int right)
{
 int i;
    int length = strlen(string);
    for (i = 0; i < length; i++){
        if ((i >= left) & (i <= right)){
            string[i] = 'X';
        }
    }   
}
",0
dhul688,1696286405,2,"void Censor(char *phrase, int left, int right)
{
 int i;
    int length = strlen(phrase);
    for (i = 0; i < length; i++){
        if ((i >= left) & (i <= right)){
            phrase[i] = 'X';
        }
    }   
}
",1
dkha055,1696220928,1,"void Censor(char *phrase, int left, int right) {

    for (int i = left; i < right + 1;i++) {
            phrase[i] = 'X';
    }

}",1
dkim848,1696297596,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
dkur670,1696814268,1,"void Censor(char *phrase, int left, int right)
{
  int i;
  for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }  
}
",0
dkur670,1696814315,2,"void Censor(char *phrase, int left, int right)
{
  for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }  
}
",1
dli630,1696834403,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
    int j = left;
    
    while (phrase[i] != '\0') {
        if (i == left) {
            for (j = left; j <= right; j++) {
                phrase[j] = 'X';
            }
        }
        i++;
    }
    
}
",1
dlob194,1696369375,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
       phrase[i] = 'X';
    }
}",1
dmar494,1696242764,1,"void Censor (char *phrase, int left, int right)
{
  int i = left;
  while (i <= right)
    {
      phrase[i] = 'X';

      i++;
    }
}",1
dmcn107,1696826062,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = 0; i<strlen(phrase);i++){
        if (i>=left && i<= right){
            phrase[i] = 'X';
        }
    }
    
}
",1
dmun793,1696785940,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}",1
dosb979,1696219688,1,"void Censor(char *phrase, int left, int right)
{
    //for statement to allocate the variable X for the desired places in the string
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }",0
dosb979,1696219752,2,"void Censor(char *phrase, int left, int right)
{
    //for statement to allocate the variable X for the desired places in the string
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
}",1
dpar783,1696768033,1,"void Censor(char *phrase, int left, int right) {
	int i;

	for (i = left; i < right+1; i++) {
		phrase[i] = 'X';
	}
}",1
dpat391,1696466245,1,"void Censor(char *phrase, int left, int right)
{
    for( int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
dpat674,1696400286,1,"void Censor(char *phrase, int left, int right)
{
int i
i=left
while(i<=right){
phrase[i]='x'
i=i+1
}
}
",0
dpat674,1696400301,2,"void Censor(char *phrase, int left, int right)
{
int i;
i=left;
while(i<=right){
phrase[i]='x';
i=i+1;
}
}
",0
dpat674,1696400451,3,"#include <stdio.h>
void Censor(char *phrase, int left, int right)
{
int i;
i=left;
while(i<=right){
phrase[i]='x';
i=i+1;
}
}
",0
dpat674,1696400480,4,"#include <stdio.h>
void Censor(char *phrase, int left, int right)
{
int i;
i=left;
while(i<=right){
phrase[i]='X';
i=i+1;
}
}
",1
dpet289,1696456007,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = 0; i < strlen(phrase); i++)
	{
		if (i >= left && i <= right)
		{
			phrase[i] = 'X';
		}
	}
}",1
dric234,1696296857,1,"void Censor(char* phrase, int left, int right) {
	char array[10] = ""X"";
	for (int i = left; i < right+1; i++) {
		phrase[i] = array[0];
	}
	
}",1
drob588,1696837062,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
droj056,1696750076,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
	    phrase[i] = 'X';
    }
}
",1
dryu303,1696806966,1,"void Censor(char *phrase, int left, int right);
int length(char *word);

int length(char *word)
{
int i=0;
while (word[i] != '\0')
{
i++;
}
return i;
}

void Censor(char *phrase, int left, int right)
{
    int l=length(phrase);
    int i;
    for (i=0; i<=l; i++){
        if (i>=left && i<=right) {
            phrase[i]='X';
            }
            }
            }
",1
dsan845,1696843925,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i ;
    
    for(i=left; i<right+1 ; i++) {
    
    phrase[i] = 'X' ;
    
   
}
}
 ",1
dsaw164,1696221353,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++){
        phrase[i] = 88;
    }
}
",1
dsin316,1696674437,1,"void Censor(char *phrase, int left, int right)
{
    while (left != right+1){
        phrase[left] = 'X';
        left++;
    } 
    
}
",1
dstr542,1696643084,1,"void Censor(char *phrase, int left, int right)
{
    while (left <= right) {
	phrase[left] = 88;
	left++;
    }
}
",1
dsut709,1696733929,1,"void Censor(char *phrase, int left, int right)
{
	int i=0;
	while (phrase[i] != '\0') {
		if (i >= left && i <= right) {
			phrase[i] = 'X';
		}
		i++;
	}
}",1
dtem664,1696815097,1,"void Censor(char* phrase, int left, int right)
{
	int length = strlen(phrase);

	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",0
dtem664,1696815134,2,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
dten781,1696817708,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) {
    if (phrase == NULL) {
        // Handle NULL input string, if needed.
        return;
    }

    int length = strlen(phrase);

    if (left < 0 || right >= length || left > right) {
        // Handle invalid indices, if needed.
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
dtie151,1696408450,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
dtol781,1696380223,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    i = left;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
dtua408,1696766537,1,"void Censor(char *phrase, int left, int right) 
{
    int numX = (right - left);
    
    for (int i = 0; i <= numX; i++) {
        phrase[left+i] = 'X';
    }
    
    return;
}
",1
dver839,1696797038,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while (i <= right) {
        phrase[i] = 'X';
        i++;
        
    }
    return phrase;
}
",0
dver839,1696797127,2,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while (i <= right) {
        phrase[i] = 'X';
        i++;
    }
}
",1
dvu878,1696649901,1,"#include <stdio.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS

void Censor(char* phrase, int left, int right)
{
	for (int i = left; i < right + 1; i++) {
		phrase[i] = 'X';
	}
}
",1
dwar594,1696812935,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
dwu617,1696651012,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
	    phrase[i] = 'X';
    }
}
",1
dyad002,1696832678,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; <= right; i++) {
        phrase[i] = 'X'
    }
    
}
",0
dyad002,1696832716,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i <= right; i++) {
        phrase[i] = 'X'
    }
    
}
",0
dyad002,1696832744,3,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
dyu343,1696206191,1,"void Censor(char* phrase, int left, int right)
{
	int len = strlen(phrase);
	for (int i = 0; i < len; i++)
	{
		if (i >= left && i <= right)
		{
			phrase[i] = 'X';
		}
	}
}",1
dzha497,1696767596,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    int length = strlen(phrase);
   for (i = left; i < phrase[right]; i++) {
       phrase[i] = 'X';
   }
   if (strlen(phrase) > length) {
       phrase[length] = '\0';
   }
}
",0
dzha497,1696767877,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    int length = strlen(phrase);
    
    for (i = left; i < right + 1; i++) {
       phrase[i] = 'X';
    }
    
    if (strlen(phrase) > length) {
       phrase[length] = '\0';
    }
}
",1
ealg928,1696846959,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(string);
    
    if (left < 0 || left >= length || right < 0 || right >= length) 
    {
        return;
    }
    
    for (int i = left; i <= right; i++) 
    {
        string[i] = 'X';
    }
}
",0
ealg928,1696847039,2,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    if (left < 0 || left >= length || right < 0 || right >= length) 
    {
        return;
    }
    
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
",1
eara128,1696372572,1,"void Censor(char *word, int left, int right){
    for(int i = left; i < right +1; i++){
        word[i] = 'X';
    }
}",1
earn712,1696743984,1,"void Censor(char *phrase, int left, int right) 
{
    int i;
    
    for(i=left; i<=right; i++) {
        phrase[i] = 'X';
    }
}
",1
ebar824,1696493567,1,"void Censor(char *phrase, int left, int right)
{

  int wordlength = strlen(phrase);
    for (int i = 0; i < wordlength; i++)
    {
        if (i>=left && i<=right)
        {
            phrase[i] ='X';
        }
        
    }
    
}",1
echa931,1696815333,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	for (i = left; i < right+1; i++) {
		phrase[i] = 'X';
}
",0
echa931,1696815658,2,"void Censor(char *phrase, int left, int right)
{
    int i;
	for (i = left; i < right+1; i++) {
		phrase[i] = 'X';
	}
}

",1
eche101,1696674506,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (int i = left; i <= right && phrase[i] != '\0'; i++) {
        phrase[i] = 'X';
    }
}
",0
eche101,1696674617,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right && phrase[i] != '\0'; i++) {
        phrase[i] = 'X';
    }
}
",1
edha780,1696846941,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(str);

    if (left >= 0 && right < length && left <= right) 
    {
        for (int i = left; i <= right; i++) 
        {
            str[i] = 'X';
        }
    }
}

int main() {
    char myString[] = ""This is a sample string"";
    int left = 5; // Example left index
    int right = 10; // Example right index

    Censor(myString, left, right);
    printf(""%s\n"", myString); // Output: ""This is XXXXX sample string""

    return 0;
}",0
eejl688,1696833950,1,"void Censor(char* phrase, int left, int right)
{
    for (; left <= right; left++)
    {
        phrase[left] = 'X';
    }
}
",1
eejl932,1696810640,1,"void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);

    if (left < 0 || right >= length) {
        printf(""Invalid index positions\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
efra318,1696370376,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
	int j = 0;
	int length = 0;
	char x[1] = ""X"";

	while (phrase[j] != '\0') {
		length = j + 1;
		j++;
	}
	
	printf(""%d\n"", length);

	for (i = 0; i < length; i++) {
		if ((i >= left) && (i <= right))
		{
			phrase[i] = x[0];
		}
	}
    
}
",0
efra318,1696370447,2,"void Censor(char *phrase, int left, int right)
{
 	int i = 0;
	int j = 0;
	int length = 0;
	char x[1] = ""X"";

	while (phrase[j] != '\0') {
		length = j + 1;
		j++;
	}
	
	
	for (i = 0; i < length; i++) {
		if ((i >= left) && (i <= right))
		{
			phrase[i] = x[0];
		}
	}
    
}
",1
egho902,1696804214,1,"void Censor(char *phrase, int left, int right)
{
for (i == left; i >= right; i ++)
{
phrase(i) = 'X';
}

return 0;

}",0
egho902,1696805026,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i = 0;
    
    for (i == left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    return;
}
",0
egho902,1696805194,3,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i = 0;
    
    for (i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    return;
}
",1
ehan360,1696296925,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
  {
    phrase[i] = 'X';
  }
}",1
ehua682,1696398856,1,"void Censor(char *phrase, int left, int right)
{
    
    // Checking whether the inputs are valid
    
    if (left < 0 || right < 0 || left >= strlen(str) || right >= strlen(str) || left > right) {
        printf(""Invalid input.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",0
ehua682,1696398941,2,"
void Censor(char *phrase, int left, int right) {
    
    
    // Checking whether the inputs are valid
    if (left < 0 || right < 0 || left >= strlen(phrase) || right >= strlen(phrase) || left > right) {
        printf(""Invalid input.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}

",1
ejeo051,1696299737,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 88;
    }
}
",1
ekmu195,1696221304,1,"void Censor(char *phrase, int left, int right)
{
    int diff = right - left;
    int i;


    for (i = 0; i < (diff + 1); i++) {
        phrase[(left + i)] = 'X';
    }

}
",1
elau447,1696669356,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
eles952,1696808331,1,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void Censor(char *phrase, int left, int right)
{
    int i;
    left = left - 1;
    for (i = left; i < right; i++) {
        phrase[i] = ""X"";
        }

     return;
}

    ",0
eles952,1696808464,2,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void Censor(char *phrase, int left, int right)
{
    int i;
    left = left - 1;
    for (i = left; i < right; i++) {
        phrase[i] = 'X';
        }

     return;
}

    ",0
eles952,1696808527,3,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i < right + 1; i++) {
        phrase[i] = 'X';
        }

     return;
}

    ",1
elia955,1696844185,1,"void Censor(char* phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
else264,1696722957,1,"void Censor(char *phrase, int left, int right){
    
    int length=strlen(phrase);
    int i;
    
    for (i=0;i<length;i++){
        if (i>=left && i<=right){
        phrase[i]='X';
        }
    }
    
}",1
ely207,1696326034,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}
",1
ema340,1696665829,1,"void Censor(char *phrase, int left, int right)
{
   for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}
",1
emah834,1696668385,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i < right + 1 ; i++){
        phrase[i] = 'X';
    }
}
",1
emah921,1696819885,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = ""X"";
    }
}
    

",0
emah921,1696819906,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
    

",1
emar179,1696848157,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X'
    }
}
",0
emar179,1696848237,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
emar189,1696805199,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	i=left;

	while(i<=right) {
		phrase[i]='X';
		i=i+1;
	}
}
",1
eqiu349,1696743828,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 88;
	}
}
",1
esia821,1696845541,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
eteo952,1696541023,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    int diff;

    diff = right - left + 1;

    for (i = 0; i < diff; i++) {
        phrase[left + i] = 'X';
    }
}
",1
etri556,1696840773,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i < right + 1; i++){
        phrase[i] = 'X';
    }
}
",1
evic904,1696747528,1,"#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	int length = strlen(phrase);

	int i;
	// iterate through elements between the left and right
	for (i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}

",0
evic904,1696747742,2,"#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	int i;
	// iterate through elements between the left and right
	for (i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}

",1
ewil853,1696365631,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left;i <=right;i++){
phrase[i] = 'X';
}
}
",1
exu922,1696822436,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
eyeo346,1696738795,1,"void Censor(char *phrase, int left, int right)
{
  // replace characters in index positions with 'X'
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }  
}
",1
fcoo305,1696813591,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
    while (phrase[i] != '\0') 
    {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        }
    }
}
",0
fcoo305,1696813612,2,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
    while (phrase[i] != '\0') 
    {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        }
        i++;
    }
}
",1
fesp714,1696381161,1,"void Censor(char *phrase, int left, int right) 
{
    int i;
    
    // Assuming that the value of ""left"" is less than the value of ""right"" 
    // we can wrtie condition that as long as left is less that right to 
    // excute conditon of code. 
    for(i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
fgor787,1696817718,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    if (left < 0 || right >= length) 
    {
        return 0; 
    }
    
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';  
    }
}
",0
fgor787,1696824031,2,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);

    if (left < 0 || right < 0 || left >= length || right >= length || left > right) 
    {
        return 0;
    }

    for (int i = left; i <= right; i++) 
    {
        str[i] = 'X';
    }
}
",0
fgor787,1696824629,3,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) 
    {
        str[i] = 'X';
    }
}
",0
fgor787,1696824775,4,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
",1
fkee774,1696303587,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }    
}
",1
fobr691,1696817073,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right) {
    if (phrase == NULL || left < 0 || right < 0) {
        return;
    }

    int length = strlen(phrase);

    if (left >= length || right >= length || left > right) {
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}

int main() {
    char censor[100] = ""ENGGEN131"";
    Censor(censor, 6, 8);
    printf(""%s\n"", censor);

    return 0;
}
",0
fobr691,1696817145,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) {
    if (phrase == NULL || left < 0 || right < 0) {
        return;
    }

    int length = strlen(phrase);

    if (left >= length || right >= length || left > right) {
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
fwij709,1696239177,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = 0; i < right + 1; i++) {
        if (i >= left) {
            phrase[i] = 'X';
        }
    }
}
",1
fwil727,1696667852,1,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
fyan180,1696838836,1,"void Censor(char *str, int left, int right) 
{
    int i;
    for (i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
gcha636,1696659583,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i=left; i<=right; i++){
        phrase[i] = 'X';
    }


}",1
ggao363,1696759160,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++){
        phrase[i] = 'X'; // censor words
    }
}",1
gge561,1696322862,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	char X = 88;
		for (i = left; i <= right; i++) {
			phrase[i] = X;
		}

}
",1
gjom886,1696722821,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}
",1
gmal045,1696236419,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    for (int i=0;i<strlen(phrase);i++) {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        }
    }
}",1
gmoh887,1696296837,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
gpen695,1696811454,1,"void Censor(char *phrase, int left, int right) {
    int length = 0;
    
    while (phrase[length] != '\0') 
    {
        length++;
    }
    
    if (left < 0 || right >= length || left > right) 
    {
        printf(""Invalid input values.\n"");
        return;
    }
    
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}

",1
gren419,1696829046,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while(i<=right){
        phrase[i] = 'X';
        i++;
    }
}",1
gvan573,1696803393,1,"void Censor(char *phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}

}
",1
gxu660,1696316319,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
gzho986,1696663260,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right){

    int len = strlen(phrase);

    if (left<0){
        left = 0;
    }

    if (right>=len){
        right= len-1;
    }

    for (int i=left; i<=right; i++){
        phrase[i]= 'X';
    }
}
",1
hama210,1696299581,1,"void Censor(char* phrase, int left, int right)
{
	int i; 

	for (i = left; i <= right; i++) {
		phrase[i] = 'X'; 
	}
}",1
haus879,1696377684,1,"void Censor(char *phrase, int left, int right)
{
    word[100];
scanf(""%s"", word);

int i;
int length = strlen(word);
int HalfLength;
HalfLength = length / 2;


for (i = 0; i < HalfLength; i++) {
	if (word[i] != word[length - 1 - i]) {
		return false;
	}
}
return true;
}
",0
haus879,1696390613,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    char X;
    for (i = left; i <= right; i++) {
	phrase[i] = 'X';
    }
}
",0
haus879,1696390860,3,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
	phrase[i] = 'X';
    }
}
",1
hbas168,1696290273,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X'
    }
}
",0
hbas168,1696290303,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
hber510,1696387746,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
hbhe454,1696843584,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i<right+1; i++){
        phrase[x]=""X"";
        
    }
}
",0
hbhe454,1696843590,2,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i<right+1; i++){
        phrase[i]=""X"";
        
    }
}
",0
hbhe454,1696843598,3,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i<right+1; i++){
        phrase[i]='X';
        
    }
}
",1
hbou314,1696409775,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
	    phrase[i] = 'X';
    }
}
",1
hcha410,1696737566,1,"#include <stdio.h>
#include <string.h>


void Censor(char* phrase, int left, int right) {
    if (0 <= left && left <= right && right < strlen(phrase)) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}",1
hche864,1696302154,1,"void Censor(char *phrase, int left, int right)
{
   	int i;
	for (i = left; i < right + 1; i++) {
		phrase[i] = 'X';
	} 
}
",1
hcop563,1696306347,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
	    phrase[i] = 'X';
    }   
}
",1
hcro730,1696394662,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
hdeg917,1696463726,1,"void Censor(char *phrase, int left, int right)
{
    int i=0;
    int j;
    while(phrase[i] != '\0'){
        i++;
    }
    for (j=0; j<i; j++){
        if ((j >= left)&&(j<=right)){
            phrase[j] = 'X';
        }
    }
}",1
hgao080,1696219891,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 88;
	}
}",1
hgou636,1696414826,1,"void Censor(char *phrase, int left, int right) {
    char censor = 'X';
    for (int i = left; i < (right + 1); i++) {
        phrase[i] = censor;
    }
}
",1
hhil451,1696834325,1,"#include <stdio.h>
#include <string.h> 
#define _CRT_SECURE_NO_WARNINGS

void Censor(char *phrase, int left, int right)
{
	int length = strlen(phrase);

	for (int i = left; i <= right; i++)
	{
		phrase[i] = ""X"";
	}
	

}
",0
hhil451,1696834576,2,"#include <stdio.h>
#include <string.h> 
#define _CRT_SECURE_NO_WARNINGS

void Censor(char *phrase, int left, int right)
{
	

	for (int i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
	

}
",1
hkah523,1696750394,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void Censor(char* phrase, int left, int right) {
    int len = strlen(phrase);
    if (left < 0 || right >= len) {
        printf(""Invalid left or right index positions.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
hkee941,1696847218,1,"void Censor(char *phrase, int left, int right)
{
void Censor(char *censor, int left, int right) {
    for (int i = left; i <= right; i++) {
        censor[i] = 'X';
    }
    
}
",0
hkee941,1696847339,2,"void Censor(char *phrase, int left, int right)
{
    int i
    for (i = left; i <= right; i++) {
        censor[i] = 'X';
    
}
}",0
hkee941,1696847363,3,"void Censor(char *phrase, int left, int right)
{
    int i
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    
}
}",0
hkim807,1696734044,1,"void Censor(char *phrase, int left, int right)
{
    
int i;
for (i = left; i <= right; i++){
    phrase[i] = 'X';
}


}",1
hkon883,1696567090,1,"void Censor(char censor[100], int startIndex, int endIndex) {
    for (int i = startIndex; i <= endIndex; i++) {
        censor[i] = 'X';
    }
}",1
hlee999,1696306648,1,"void Censor(char *phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
hleu459,1696828242,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
hliu836,1696596741,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i=left ; i <=right ; i++) {
        phrase[i] = 'X';
    }
}
",1
hly852,1696732083,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        
        phrase[i] = 88;
    }
}
",1
hma481,1696655004,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
	    phrase[i] = 'X';
    }
}
",1
hmcm582,1696223571,1,"void Censor(char* phrase, int left, int right) {
	int i;
	int length = strlen(phrase);
	for (i = 0; i <= length; i++) {
		if (i >= left && i <= right)
			phrase[i] =  'X';
	}
}
",1
hmel649,1696663975,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
hmof971,1696455980,1,"void Censor(char *phrase, int left, int right)
{
  	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}  
}
",1
hnew638,1696240471,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
hpan363,1696757915,1,"void Censor(char *phrase, int left, int right)
{
    for ( i=0; i > right; i++)
    {
        str[i]=""X"";
        
        
    }
}
",0
hpan363,1696757932,2,"void Censor(char *phrase, int left, int right)
{
    for ( i=left; i > right; i++)
    {
        phrase[i]=""X"";
        
        
    }
}
",0
hpan363,1696757942,3,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i > right; i++)
    {
        phrase[i]=""X"";
        
        
    }
}
",0
hpan363,1696758020,4,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i <= right; i++)
    {
        phrase[i]=""X"";
        
        
    }
}
",0
hpan363,1696758025,5,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i <= right; i++)
    {
        phrase[i]==""X"";
        
        
    }
}
",0
hpan363,1696758142,6,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i <= right; i++)
    {
        phrase[i]='X';
        
        
    }
}
",1
hpat916,1696227545,1,"void Censor(char *phrase, int left, int right)
{
    // Initialise i variable for oncoming for loop
    int i;

    // For loop starts at left index and goes up to and including right index, incrementing by one and replacing appropriate value with 'X'.
    for (i = left; i <= right; i++) {
    	phrase[i] = 'X';
    }
	
}
",1
hpir641,1696471407,1,"void Censor(char *phrase, int left, int right)
{
    	int i = left;
	while (i <= right) {
		phrase[i] = 'X';
		i++;
	}
}
",1
hrob997,1696746749,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
hsan267,1696386204,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    int length;
    char replace;
    
    replace = 'X';
    
    length = strlen(phrase);
    
    for (i=0; i<length;i++) {
        if (left <= i && i <= right) {
            phrase[i] = replace;
        }
    }
}",1
hson435,1696841336,1,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
htew916,1696818442,1,"#include<stdio.h>
#include <string.h>
#include <stdlib.h>

// The function, Censor should replace all characters that lie between index positions “left” and “right” (inclusive) in the string with the character ‘X’.

int length(char* word)
{
    int i = 0;
    while (word[i] = '\0') // '\0' is the null character.
    {
        i++;
    }
    return i;
}

// Define the function, Censor.
void Censor(char* phrase, int left, int right)
{
    int length = strlen(phrase);

    if (left < 0 || left >= length || right < 0 || right >= length) 
    {
        printf(""Invalid! \n"");
        return;
    }
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}

",0
htew916,1696818509,2,"#include<stdio.h>
#include <string.h>
#include <stdlib.h>

// The function, Censor should replace all characters that lie between index positions “left” and “right” (inclusive) in the string with the character ‘X’.

// Define the function, Censor.
void Censor(char* phrase, int left, int right)
{
    int length = strlen(phrase);

    if (left < 0 || left >= length || right < 0 || right >= length) 
    {
        printf(""Invalid! \n"");
        return;
    }
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}


",1
htho943,1696217847,1,"#include <stdio.h>
void Censor(char *phrase, int left, int right)
// the intent of this function is to take a string, a starting and ending point and censor it with 
// uppercase X's, Author Hamish Thompson
{
    while (left<= right)
    {
        phrase[left]='X';
        left++;
    }
}
",1
htyl682,1696839527,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    for(int i=left; i<=right; i++){
        phrase[i]=('X');
    }
}",1
hugn924,1696763777,1,"void Censor(char *phrase, int left, int right)
{
        for (int i = left; i <= right; i++) { 

        phrase[i] = 'X';
    
    }
}
",1
hwen116,1696212322,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    for (i=left; i<=right; i++){
        phrase[i] = 'X';
    }
}",1
hwin877,1696468375,1,"void Censor(char* phrase, int left, int right)
{
    int i = left;
    for (i == left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",0
hwin877,1696468382,2,"void Censor(char* phrase, int left, int right)
{
    int i = left;
    for (i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
hyan713,1696374169,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i=left;i<=right;i++){
        phrase[i] = 'X';
    }
}
",1
hye071,1696687017,1,"void Censor(char *phrase, int left, int right)
{
    
    for (int i=left; i<=right; i=i+1) {
        if (phrase[i]) phrase[i]= 'X';
        
    }
    
}
",1
ibha186,1696486812,1,"void Censor(char word[], int left, int right) {
    for (int i = left; i <= right; i++) {
        word[i] = 88;
    }
}",1
ibur427,1696740189,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}

}",1
iche428,1696358170,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i<=right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
ihoo440,1696240935,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
ikis164,1696394880,1,"#include <stdio.h>
#include <math.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
iko203,1696388211,1,"void Censor(char* str, int left, int right) {
	int i = left;
	char X = 88;
	for (i = left; i <= right; i++)
	{
		str[i] = X;
	}
	return;
}",1
ilee973,1696730288,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    for(int i = left; i<= right; i++) {
        phrase[i] = 'X';
    }
}
",1
imac384,1696382715,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);

    for (int i = 0; i < length; i++) {
	    if ((i >= left) && (i <= right)) {
		    phrase[i] = 'X';
	    }
    }
}
",1
imoh000,1696661992,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++) //creating a 'for' loop that iterates over the string (left to right)
    {
        phrase[i] = 'X'; //replacing the character AT position I with an 'X'
    }
}

",1
iwes050,1696297787,1,"void Censor(char *phrase, int left, int right)
{
  
    int length = strlen(phrase);
    int i = left;
    while (i >= left && i <= right) {
        phrase[i] = 'X';
        i++;
    }
 
}
",0
iwes050,1696297795,2,"void Censor(char *phrase, int left, int right)
{
  
    int i = left;
    while (i >= left && i <= right) {
        phrase[i] = 'X';
        i++;
    }
 
}
",1
iwil997,1696300074,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right) 
{
    int i = 0;
    
    while (phrase[i] != '\0') {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        } 
        i++;
    }
}

",1
iwoo382,1696237820,1,"void Censor(char *phrase, int left, int right)
{
    int length, i; 
    length = strlen(phrase);
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",0
iwoo382,1696237839,2,"void Censor(char *phrase, int left, int right)
{
    int i; 
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ixia229,1696778153,1,"void Censor(char *phrase, int left, int right)
{
    int len;
    int i;
    len = strlen(phrase);

    for(i = left; i<= right; i++){
        phrase[i] = 'X';
    }
}
",0
ixia229,1696778633,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i<= right; i++){
        phrase[i] = 'X';
    }
}
",1
ixu871,1696751173,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) {
    int length = strlen(str);

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",0
ixu871,1696751205,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) {

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
jahn224,1696331456,1,"void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
jaus241,1696371397,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
       phrase[i] = 'X';
   }
}
",1
jbag235,1696822755,1,"void Censor(char phrase[], int left, int right)
{
    while (left <= right) {
		phrase[left] = 'X';
		left++;
	}
}",1
jbam701,1696403673,1,"void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i = i + 1) {
		phrase[i] = 'X';
	}
}",1
jbam753,1696839331,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
jbis394,1696396354,1,"#include <stdio.h>
#include <string.h>
void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);
    if (right<length && left>=0 && left<=right)
{
for (int i=left; i<=right; i++)
{
phrase[i] = 'X';
}
}
}",1
jbro301,1696306627,1,"void Censor(char *phrase, int left, int right)
{
	int i;

	i = left;
	while ((i >= left) && (i <= right)) {
		phrase[i] = 'X';
		i++;
	}

	return;    
}
",1
jbru537,1696806588,1,"void Censor(char *phrase, int left, int right)
{
  while (left<=right) {
phrase[left] = 'X';

left++;
}
return phrase;  
}
",0
jbru537,1696806681,2,"void Censor(char *phrase, int left, int right)
{
  while (left<=right) {
phrase[left] = 'X';

left++;
}

}
",1
jbuc296,1696832820,1,"void Censor(char *phrase, int left, int right)
{
  int i = left;
  for (i = left; i <= right; i++) {
    phrase[i] = 88;
  }
}
",1
jcha513,1696671120,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i=left, i<=right, i++) {
        phrase[i]='X'
    }
}
",0
jcha513,1696671144,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i=left, i<=right, i++) {
        phrase[i]='X';
    }
}
",0
jcha513,1696671157,3,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i=left; i<=right; i++) {
        phrase[i]='X';
    }
}
",1
jcha574,1696241530,1,"#include <stdio.h>
#include <string.h>
void Censor(char *phrase, int left, int right)
{
    int i=0;
    for(i=left;i<=right;i++) {
        phrase[i] = 'X';
    }
}",1
jcha972,1696299858,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
jche456,1696819279,1,"void Censor(char *phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}

int main(void)
{
	char censor[100] = ""ENGGEN131"";
	Censor(censor, 6, 8);
	printf(""%s\n"", censor);
	return 0;
}",0
jche456,1696819293,2,"void Censor(char *phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
jchi648,1696678502,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
jchu579,1696465677,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}
",1
jcla431,1696297545,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
	int j = right;

	for (i = left; i <= j; i++)
	{
		phrase[i] = 'X';
	}
}
",1
jcla755,1696212910,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i<right+1; i++)
    {
        phrase[i] = 'X';
    }
}
",1
jdal353,1696831259,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i < right + 1; i++) {
        phrase[i] = 'X';
    }
}
",1
jdea126,1696726586,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
	while (i <= (right - left)) {
		phrase[left + i] = 'X';
	}
	return;
}
",0
jdea126,1696727702,2,"void Censor(char *phrase, int left, int right)
{
	int i = 0;
	while (i <= (right - left)) {
		phrase[left + i] = 'X';
		i++;
	}
}
",1
jdu853,1696315565,1,"int Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    
    return 0;
}",1
jear460,1696642839,1,"void Censor(char *phrase, int left, int right) {
    int len = strlen(str);

    if (left < 0 || left >= len || right < 0 || right >= len || left > right) {
        printf(""invalid indices.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",0
jear460,1696642860,2,"void Censor(char str[], int left, int right) {
    int len = strlen(str);

    if (left < 0 || left >= len || right < 0 || right >= len || left > right) {
        printf(""invalid indices.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
jfen705,1696653705,1,"void Censor(char *phrase, int left, int right)
{
    int le;
    le = strlen(phrase);
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",0
jfen705,1696653769,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
jfet156,1696214645,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
jgeo610,1696426361,1,"void Censor(char *phrase, int left, int right)
{
    int i;

	for (i = left; i < (right + 1); i++) {
		phrase[i] = 'X';
	}
}
",1
jgol495,1696207858,1,"#include <string.h>
#include <stdbool.h>
#include <stdio.h>
void Censor(char *phrase, int left, int right){
    for(int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
jgre894,1696834833,1,"void Censor(char *phrase, int left, int right)
{
    char CensorChar = 'X';
    //int length = strlen(phrase) - 1; 

    for (int i = left; i <= right; i++) {     
        phrase[i] = CensorChar;
         
}
",0
jgre894,1696835771,2,"void Censor(char *phrase, int left, int right)
{
    char CensorChar = 'X';
    //int length = strlen(phrase) - 1; 

    for (int i = left; i <= right; i++) {     
        phrase[i] = CensorChar;
        //printf(""%s \n"", phrase);
}
}
",1
jhor229,1696805636,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right) 
{
    int length = strlen(phrase);

    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}",0
jhor229,1696805683,2,"#include <stdio.h>

void Censor(char *phrase, int left, int right) 
{
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}",1
jhwa027,1696836882,1,"void Censor(char* str, int left, int right) {
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
jjeo627,1696733948,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
  for (i = left ; i<= right; i++){
      phrase[i] = 88;
  }  
}

",1
jjon350,1696842512,1,"void Censor(char *phrase, int left, int right)
{
  int Censor(char str[], int left, int right){
    int length=strlen(str);
    int i=0;
    int X;
    for (i=0, i<length, i++){
        if (str[i] <= left && str[i]=> right)
        str[i]=X;
    }

}
",0
jjon350,1696843831,2,"void Censor(char *phrase, int left, int right)
{   int length=strlen(str);
    int i=0;
    char X;
if (left<0) left=0;
if (right>=length) right=length-1;

for(i=left; i<=right; i++)
{
    str[i]=X;
}
",0
jjon350,1696844037,3,"void Censor(char *phrase, int left, int right)
{
    int length=strlen(str);
    int i;
    char replace= 'X';
if (left<0) left=0;
if (right>=length) right=length-1;

for(i=left; i<=right; i++)
{
    str[i]=replace;
}",0
jjon350,1696844095,4,"void Censor(char *phrase, int left, int right)
{
    int length=strlen(str);
    int i;
    char replace= 'X';
if (left<0) left=0;
if (right>=length) right=length-1;

for(i=left; i<=right; i++)
{
    str[i]=replace;
}
}
",0
jjon350,1696844159,5,"void Censor(char *phrase, int left, int right)
{
    int length=strlen(phrase);
    int i;
    char replace= 'X';
if (left<0) left=0;
if (right>=length) right=length-1;

for(i=left; i<=right; i++)
{
    phrase[i]=replace;
}
}
",1
jjos057,1696759317,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
       
}
",1
jjun879,1696399092,1,"#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
jkah253,1696419244,1,"void Censor(char *phrase, int left, int right)
{
    for (int i= left; i<=right; i++) {
        phrase[i] = 'X';
    }
}",1
jkan172,1696299519,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
jkim828,1696303109,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
jkim837,1696478389,1,"void Censor(char phrase[], int left, int right)
{
	for (int i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}",1
jkim933,1696307058,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
jkim960,1696456594,1,"void Censor(char *phrase, int left, int right)
{
  int length = strlen(phrase);
    for (int i = 0; i < length; i++) {
        if (i >= left && i<= right) {
            phrase[i] = 'X';
            }
        }    
}
",1
jlah077,1696319956,1,"void Censor(char *phrase, int left, int right)
{
    for (int pos = left - 1; pos <= right; pos++)
    {
        *(phrase + pos) = 'x';
    }
}",0
jlah077,1696320464,2,"void Censor(char *phrase, int left, int right)
{
    for (int pos = left; pos <= right; pos++)
    {
        *(phrase + pos) = 'X';
    }
}",1
jlal056,1696319037,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
	int i;
	
	for(i=left; i <= right; i++) {
		phrase[i] = 'X';
	}
return;
}
",1
jlew699,1696413768,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++)
    {
        phrase[i] = ""X"";
    }
    
}",0
jlew699,1696413777,2,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    
}",1
jli463,1696473762,1,"void Censor(char *phrase, int left, int right)
{
	int start = left;
	int end = right;
	int i = start;

	for (i; i <= end; i++) {
		phrase[i] = 'X';
	}    
}
",0
jli463,1696473912,2,"void Censor(char *phrase, int left, int right)
{
	int start = left;
	int end = right;

	for (int i = start; i <= end; i++) {
		phrase[i] = 'X';
	}    
}
",1
jli876,1696291720,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) phrase[i] = 'X';
}
",1
jli917,1696755344,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i = left
    for (i = left ; i <=right ; i++){
        str[i]= 'X';
    }
}
",0
jli917,1696755365,2,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i = left;
    for (i = left ; i <=right ; i++){
        str[i]= 'X';
    }
}
",0
jli917,1696755507,3,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i = left;
    for (i = left ; i <=right ; i++){
        phrase[i]= 'X';
    }
}
",0
jli917,1696755660,4,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);

    
    if (left < 0 || right >= length || left > right) {
        printf(""Invalid \n"");
        return;
    }

    for (int i = left; i <= right; ++i) {
        phrase[i] = 'X';
    }
}
",1
jlia486,1696586313,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
    phrase[i] = 'X';
  }
}
",1
jlia948,1696812404,1,"void Censor(char *phrase, int left, int right)
{
    for (int i <= left; int i => right; i++;)
    {
        phrase[i] = 'X';
    }
}
",0
jlia948,1696812438,2,"int i = 0;
void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
jliu295,1696649250,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left, i<=right, i++){
        phrase[i] = X;
    }
}
",0
jliu295,1696649409,2,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
jliu778,1696234497,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i < right+1; i++)
	{
		phrase[i]='X';
	}
}
",1
jluo379,1696833016,1,"void Censor(char *phrase, int left, int right)
{
    int wordLen = strlen(phrase);
    
    for (int i = left; i < right; i++) {
        phrase[i] = 'X';
    }
    return;
}
",0
jluo379,1696833042,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i < right; i++) {
        phrase[i] = 'X';
    }
    return;
}
",0
jluo379,1696833093,3,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    return;
}
",1
jmak320,1696803165,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while (i <= right) {
        phrase[i] = 'X';
        i += 1;
    }
    return 0;
}
",0
jmak320,1696803254,2,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while (i <= right) {
        phrase[i] = 'X';
        i += 1;
    }
}
",1
jmat941,1696839744,1,"void Censor(char *phrase, int left, int right)
{
    int len = strlen(str);

    if (left >= 0 && right >= left && right < len) {
    int i = left;
    while (i <= right) {
        str[i] = 'X';
        i++;
    }

    }
}
",0
jmat941,1696839782,2,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);

    if (left >= 0 && right >= left && right < length) {
    int i = left;
    while (i <= right) {
        phrase[i] = 'X';
        i++;
    }

    }
}
",1
jmei608,1696768896,1,"void Censor(char *phrase, int left, int right)
{
    for (left; left <= right; left++) {
	phrase[left] = 'X';
    }
}
",0
jmei608,1696768970,2,"void Censor(char *phrase, int left, int right)
{
for (left; left <= right; left++) {
	phrase[left] = 'X';
}
}
",0
jmei608,1696769084,3,"void Censor(char* phrase, int left, int right)
{
	for (left; left <= right; left++) {
		phrase[left] = 'X';
	}
}",0
jmei608,1696769585,4,"void Censor(char* phrase, int left, int right)
{
	for(int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
jmil737,1696298526,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    
    for(i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}
",1
jmul290,1696298106,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    
}
",1
joka775,1696843101,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
jpar523,1697184198,1,"void Censor(char *phrase, int left, int right)
{
   for (i = left; i <= right; i++) {
       phrase[i] = 'X';
   } 
}
",0
jpar523,1697184220,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
       phrase[i] = 'X';
   } 
}
",1
jpar611,1696762801,1,"void Censor(char *str, int left, int right) {
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
jpat915,1696650134,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
jpau410,1696328026,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
jpaz106,1696816389,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
jpud993,1696294467,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = 0; i < strlen(phrase); i++) {
		if (i >= left && i <= right) {
			phrase[i] = 88;
		}
	}

	return;
}",1
jros811,1696375127,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++){
    phrase[i] = 'X';
    }
}
",1
jsan813,1696323835,1,"void Censor(char* phrase, int left, int right)
{
    for (int i = 0; i < right; i++) {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        }
    }
}",0
jsan813,1696323904,2,"void Censor(char* phrase, int left, int right)
{
    for (int i = 0; i <= right; i++) {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        }
    }
}",1
jsch842,1696734053,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    for (int i = left; i <= right; i++)
    {
        phrase[i] = ""X"";
    }

}
",0
jsch842,1696734164,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = ""X"";
    }

}
",0
jsch842,1696753323,3,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
jshe464,1696826499,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <=right; i++)
{
 phrase[i] = 'X';
}
}
",1
jshi444,1696320943,1,"void Censor(char* phrase, int left, int right)
{	
	int i = 0;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
jshr431,1696668808,1,"void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
jsim418,1696218173,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
jsim643,1696369175,1,"void Censor(char *phrase, int left, int right)
{
    // Check if the input indices are valid
    if (left < 0 || right < 0 || left >= right)
    return;

    int length = 0;
    while (phrase[length] != '\0') {
        length++;
    }

    //Ensure left and right are within bounds 
    if (left < 0) left = 0;
    if (right >= length) right = length - 1;

    //Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}",0
jsim643,1696369743,2,"void Censor(char *phrase, int left, int right)
{
    // Loop through the characters in the phrase from 'left' to 'right' indices 
    for( int i= left; i <= right; i++) {
    phrase[i] = 'X'; //Replaces the character at index 'i' with 'X'
    }
}",1
jsin385,1696473233,1,"void Censor(char *phrase, int left, int right)
{
 int i =0;
 for (i=left; i<=right, i++){
     array[i]='X';
 }
}
",0
jsin385,1696473303,2,"void Censor(char *phrase, int left, int right)
{
 int i =0;
 for (i=left; i<=right; i++){
     phrase[i]='X';
 }
}",1
jsta466,1696305809,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = 0;i < (right - left + 1);i++){
        phrase[left + i] = 'X';
    }
}

int main() {    
    char censor[100] = ""ENGGEN131"";
    Censor(censor, 6, 8);
    printf(""%s\n"", censor);
    return 0;
}",0
jsta466,1696305823,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = 0;i < (right - left + 1);i++){
        phrase[left + i] = 'X';
    }
}",1
jsun284,1696635057,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }  
}
",1
jvil318,1696669709,1,"void Censor(char *phrase, int left, int right)
{
    int len = strlen(str);
    
    if (left < 0) left = 0;
    if (right >= len) right = len - 1;

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",0
jvil318,1696669911,2,"void Censor(char *phrase, int left, int right)
{
    int len = strlen(str);
    
    if (left < 0) left = 0;
    if (right >= len) right = len - 1;

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
    
    printf(""Original: %s\n"", input);
    Censor(input, left, right);
    printf(""Censored: %s\n"", input);

    return 0;
}

",0
jvil318,1696672570,3,"void Censor(char *phrase, int left, int right)
{
    int i=0;
    while (phrase[i] != '\0'){
        if (i >= left && i <= right){
            phrase[i] = 'X';
        }
        i++;
    }
}
",1
jwed606,1696273651,1,"
void Censor(char* phrase, int left, int right)
{
    for (int i = left; i <= right; ++i)
    {
        phrase[i] = 'X';
    }
}
",1
jwil813,1696304014,1,"void Censor(char* phrase, int left, int right)
{
	
	for (int i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}
",1
jwon248,1696228462,1,"void Censor(char *phrase, int left, int right)
{
    while (left <= right)
    {
        phrase[left] = 'X';
        left++;
    }
}",1
jwon253,1696645294,1,"void Censor(char *phrase, int left, int right) 
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
jwon323,1696457104,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
jyan420,1696288408,1,"void Censor(char *phrase, int left, int right)
{
 for (int i = left; i <= right; i++) {
    phrase[i] = 'X';
 }
}",1
jyua529,1696315791,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;

    while (i != right + 1){
        phrase[i] = 'X';
        i++;
    }
    
}
",1
jzho786,1696736509,1,"void Censor(char *phrase, int left, int right){
    
    for (int i = left; i<= right; i++){
    phrase[i] = 'X';
    
    }
    return;
    
}",1
kabb319,1696660025,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while (i <= right ){
        phrase[i] = 'X';
        i++;
    }    
}
",1
kahk161,1696298396,1,"void Censor(char *phrase, int left, int right)
{
    	int length = strlen(phrase);
	int i;
	for (i = 0; i < length; i++) {
		if ((i >= left) && (i <= right)) {
			phrase[i] = 'X';
		}
	}
	
}
",1
kbar402,1696756117,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
kbha969,1696368850,1,"#include <stdio.h>
#include<string.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i<=right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
kcao565,1696799966,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",0
kcao565,1696800114,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
kcao657,1696745096,1,"void Censor(char* phrase, int left, int right)
{
	int i = left;
	int j = right;
	while (i <= j) {

		phrase[i] = 'X';

		i++;
	}

}
",1
kfep063,1696809881,1,"void Censor(char *phrase, int left, int right)
{
   int count = 0;
    int X;
    while(left <= right) {
        if (phrase[count] == phrase[left]) {
        phrase[left] = 'X' ;
        left++;
        }
        
        count++;
    } 
}
",0
kfep063,1696809930,2,"void Censor(char *phrase, int left, int right)
{
   int count = 0;
    //int X;
    while(left <= right) {
        if (phrase[count] == phrase[left]) {
        phrase[left] = 'X' ;
        left++;
        }
        
        count++;
    } 
}
",1
kfer833,1696733674,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    if (left < 0 || right >= strlen(str)) {
        printf(""Invalid index positions.\n"");
        return;
    }
    
    for (int i = left; i <= right; ++i) {
        str[i] = 'X';
    }
}
",1
kgra470,1696584603,1,"void Censor(char *phrase, int left, int right)
{
    for(int i=left;i<=right;i++){
        phrase[i]='X';
    }
}",1
khew624,1696649375,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
int length = strlen(str);

    if (left < 0 || right >= length) {
        // Check if left and right are within valid index positions
        printf(""Invalid index positions\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }    
}
",0
khew624,1696649524,2,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int length = strlen(str);

    if (left < 0 || right >= length) {
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
kjoe685,1696688011,1,"void Censor(char* phrase, int left, int right)
{
	int phraseLength = strlen(phrase);
	int censorLength = 1 + right - left;
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = phrase[i + censorLength];
		if ((i + censorLength) == '\0') {
			return;
		}
	}
	phrase[phraseLength - censorLength] = '\0';
	return;
}",0
kjoe685,1696688133,2,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
	return;
}",1
kjun638,1696687615,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    int length = 0; 
    while (phrase[length] != 0) {
        length++;
    }

    for(int i = left; i<= right; i++) {
        phrase[i] = 'X';
    }
}
",1
kkha484,1696471042,1,"void Censor(char *phrase, int left, int right)
{
    int Length = strlen(phrase);
    for(int i = left; i <= right; i++){
        if (i<Length){
            phrase[i] = 'X';
        }
    }
}",1
kkim985,1696384985,1,"void Censor(char* phrase, int left, int right)
{
	int length = strlen(phrase);
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",0
kkim985,1696385005,2,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
klam376,1696455988,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i<=right; i++)   {
        phrase[i] = 'X';
    }
}",1
kluc619,1696767491,1,"void Censor(char *phrase, int left, int right)
{
void Censor(char *str, int left, int right) {
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
        
    }
    if (left >= 0 && right < strlen(input) && left <= right) {
        Censor(input, left, right);
        printf(""Censored string: %s\n"", input);
    } else {
        printf(""Invalid index positions.\n"");
    }

}
}
",0
kluc619,1696767513,2,"void Censor(char *phrase, int left, int right)
{
void Censor(char *str, int left, int right) {
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
        
    }
    if (left >= 0 && right < strlen(input) && left <= right) {
        Censor(phrase, left, right);
        printf(""Censored string: %s\n"", input);
    } else {
        printf(""Invalid index positions.\n"");
    }

}
}
",0
kluc619,1696767550,3,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
        
    }
    if (left >= 0 && right < strlen(phrase) && left <= right) {
        Censor(phrase, left, right);
        printf(""Censored string: %s\n"", phrase);
    } else {
        printf(""Invalid index positions.\n"");
    }

}
",0
kluc619,1696767555,4,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
        
    }
    if (left >= 0 && right < strlen(phrase) && left <= right) {
        Censor(phrase, left, right);
        printf(""Censored string: %s\n"", phrase);
    } else {
        printf(""Invalid index positions.\n"");
    }

}
",0
kluc619,1696767618,5,"void Censor(char *str, int left, int right)
{
     for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
kmag441,1696751480,1,"#include<stdio.h>

void Censor(char *phrase, int left, int right)
{
    int i = left;
    for (i = left ;i <= right ;i++){
        phrase[i] = 'X';
    }
    
}",1
kmal768,1696382684,1,"void Censor(char *phrase, int left, int right)
{
  	int i, length;

	length = strlen(string);
	for (i = 0; i < length; i++) {
		if (i >= left && i <= right) {
			string[i] = 'X';
		}
	}  
}
",0
kmal768,1696382841,2,"void Censor(char *phrase, int left, int right)
{
  	int i, length;

	length = strlen(phrase);
	for (i = 0; i < length; i++) {
		if (i >= left && i <= right) {
			phrase[i] = 'X';
		}
	}  
}
",1
kmck133,1696675056,1,"void Censor(char* phrase, int left, int right) {
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
kmcv530,1696394174,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
     phrase[i] = 'X';
    }
}

",1
kng361,1696833206,1,"void Censor(char *phrase, int left, int right) {
    if (phrase == NULL || left < 0 || right < 0 || left >= strlen(phrase) || right >= strlen(phrase) || left > right) {
        return;
    }
    for (int i = left; i <= right; i++){
        str[i] = 'X';
    }
}",0
kng361,1696833395,2,"void Censor(char *str, int left, int right) {
    int length = strlen(str);

    if (left < 0 || right >= length || left > right) {
        return 0;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",0
kng361,1696833448,3,"void Censor(char *str, int left, int right) {
    int length = strlen(str);

    if (left < 0 || right >= length || left > right) {
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
kpat303,1696236236,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    // Check if the input indices are valid
    if (left < 0 || right >= strlen(str) || left > right) {
        printf(""Invalid input indices.\n"");
        return;
    }

    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
kpau893,1696325495,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    
   for(i = left; i<right+1; i++) {
       phrase[i] = 'X';
   }
}",1
kpay633,1696302395,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
	phrase[i] = 'X';
}
}
",1
kpir468,1696827114,1,"void Censor(char *phrase, int right, int left)

{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';

}

}",0
kpir468,1696827144,2,"void Censor(char *phrase, int left, int right)

{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
}
}",1
kpla566,1696471559,1,"void Censor(char *phrase, int left, int right){
for(int i = left; i <=right; i++){
 phrase[i] = 'X' ; 
}
}",1
kqua446,1696756928,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
kraj720,1696736630,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
    char X = 'X';
    
    while (phrase[i] != '\0')
    {
        if (i >= left && i <= right)
        {
            phrase[i] = X;
        }
        
        i++;
    }
}
",1
kraw552,1696577880,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);

    if (left >= 0 && right < length && left <= right) 
    {
        for (int i = left; i <= right; i++) 
        {
            phrase[i] = 'X'; 
        }
    }
}

",1
krec980,1696298811,1,"void Censor(char* phrase, int left, int right)
{
	int i; 
	for (i = left; i <= right; i++)
		phrase[i] = 'X';

}
",1
ksai757,1696729782,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ksik996,1696299247,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    
}
",1
kwan244,1696741044,1,"void Censor(char* string, int start, int end)
{
	while (start <= end) {
		string[start] = 'X';
		start++;
	}
}
",1
kwan797,1696294332,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        word[i] = 'X';
    }
}
",0
kwan797,1696294402,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
kyoo839,1696655454,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",0
kyoo839,1696655519,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
kzhu796,1696236714,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	int length = strlen(phrase);
	for (i = 0; i < length; i++) {
		if (i >= left && i <= right) {
			phrase[i] = 'X';
		}
	}
}
",1
laba812,1696759762,1,"void Censor(char *phrase, int left, int right)
{
    for(int i=left; i<=right; i++){
    phrase[i] = 'X';
}

}
",1
lazz729,1696325976,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
lbla772,1696815041,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) 
{
    int length;
    length = strlen(phrase);
    
    int i;
    for (i = left; i <= right; i++)
    {
    phrase[i] = 'X';
    }
    
}",0
lbla772,1696815211,2,"#include <stdio.h>
#include <string.h>

void censor(char *phrase, int left, int right) 
{
    int length;
    length = strlen(phrase);
    
    int i;
    for (i = left; i <= right; i++)
    {
    phrase[i] = 'X';
    }
    
}",0
lbla772,1696815456,3,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) 
{
    int i;
    for (i = left; i <= right; i++)
    {
    phrase[i] = 'X';
    }
    
}
",1
lbou433,1696370959,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
    	phrase[i] = 'X';
    }
    return;
}
",1
lbyr117,1696391774,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    
    for(i=left;i<right+1;i++)
    {
        phrase[i]='X';
    }
}
",1
lcam453,1696814211,1,"#include <stdio.h>

int Censor(char word[], int left, int right) {
    for (int i = left; i <= right; i++) {
        word[i] = 'X';
        }
    return 1;
}",1
lcan243,1696667154,1,"void Censor(char *phrase, int left, int right)
{
for (left; left <= right; left++ ){
    phrase[left] = ""X"";
}
    
}

",0
lcan243,1696667804,2,"void Censor(char *phrase, int left, int right)
{
int i;

for (i = left; i <= right; i++ ){
    phrase[i] = 'X';
}
    
}",1
lche668,1696834412,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i < (right + 1); i++) {
		phrase[i] = 'X';
	}
	return;
}
",1
lchu848,1696670239,1,"void Censor(char *phrase, int left, int right)
{
    for (i = left;i <= right && phrase[i] != \0; i++) {
    phrase[i] = X;
      }
      printf(""%s\n"", phrase);
}",0
lchu848,1696670292,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left;i <= right && phrase[i] != '\0'; i++) {
    phrase[i] = 'X';
      }
      printf(""%s\n"", phrase);
}",0
lchu848,1696670302,3,"void Censor(char *phrase, int left, int right)
{
    for (int i = left;i <= right && phrase[i] != '\0'; i++) {
    phrase[i] = 'X';
      }
}",1
ldam917,1696675108,1,"#include <stdio.h>
#include <string.h>
void Censor(char *phrase, int left, int right)
{
    int strlength=strlen(phrase);
    for (int i=0;i<strlength;i++)
    {
        if ((i>=left)&&(i<=right))
        {
            phrase[i]='X';
        }
    }
}",1
ldea753,1696668351,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while (i <= right) {
        phrase[i] = 'X';
        i++;
    }
}
",1
ldou101,1696288186,1,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
lfan827,1696806780,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
lgan833,1696457206,1,"#include <stdio.h>
void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 88;
	}
}
",1
lhal844,1696648682,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left;i <= right;i++)
	{
		phrase[i] = 88;
	}
}",1
lhua313,1696828990,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    return;
}
",0
lhua313,1696829067,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    return;
}",1
ljer106,1696731620,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) {
    int x = strlen(phrase); 
    for (int i = 0; i < x; i++) {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        }
    }
}",1
ljon623,1696670150,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
    phrase[i] = 'X';
	}
}
",1
ljun123,1696837057,1,"void Censor(char *phrase, int left, int right)
{
    int length;
    int i;

    length = strlen(phrase);

    if (left < 0 || right >= length || left > right) {
        return;
    }

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
lkel942,1696451540,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
	phrase[i] = 'X'
}
}
",0
lkel942,1696451548,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
	phrase[i] = 'X';
}
}
",1
llat663,1696827733,1,"void Censor(char *phrase, int left, int right)
{
	for(int i = left; i <= right; i++){
		phrase[i] = 'X';
}
}",1
llei074,1696717106,1,"void Censor(char *phrase, int left, int right)
{
   int i = left;

   while (i <= right) {
       phrase[i] = 'X';
       i++;
   }
}",1
lli393,1696298592,1,"void Censor(char *phrase, int left, int right)
{
	int i;
    for (i = left; i <= right; i++){
		phrase[i] = 'X';
	}
}",1
llia622,1696777598,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
llig859,1696657723,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i=left; i<=right; i++){  
    phrase[i]=88;
}
}
",1
lliu182,1696669681,1,"void Censor(char *phrase, int left, int right)
{
    	for (int i = left; i <= right;i++) {
		phrase[i] = 'X';
	}
}
",1
lliu848,1696750717,1,"void Censor(char *phrase, int left, int right)
{
	int length = strlen(phrase);
	int i = 0;

	for (i = left; i <= right; i++) {
				phrase[i] = 'X';
			}
	
}",0
lliu848,1696750868,2,"void Censor(char *phrase, int left, int right)
{
	int i = 0;

	for (i = left; i <= right; i++) {
				phrase[i] = 'X';
			}
	
}",1
llu744,1696743417,1,"void Censor(char *phrase, int left, int right) 
{
    int i = left;

    for (; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
lmen032,1696816867,1,"void Censor(char *phrase, int left, int right){

    int i;

    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
lmor438,1696225874,1,"//AUTHOR:Lukem
#include <stdio.h>
#include <string.h>


void Censor(char *phrase, int left, int right){
    
    int i;
    
    for(i=left;i<=right;i++){
        
        phrase[i]= *""X"";
        
        
    }
    
    
}",1
lpry623,1696213535,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';       
    } 
}
",1
lrei069,1696462299,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
lros711,1696298280,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
lrya284,1696376777,1,"void Censor(char *phrase, int left, int right)
{
    for (int count = left; count<right; count++) {
        phrase[count] = 'X';
    }
}
",0
lrya284,1696376821,2,"void Censor(char *phrase, int left, int right)
{
    for (int count = left; count < right+1; count++) {
        phrase[count] = 'X';
    }
}
",1
lsal082,1696806223,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phase);
    
    if (left < 0 || right >= length || left >= right){
        printf(""Invalid input: left and right should be valid index positions.\n"");
        return;
    }
    
    for (int i = left; i <= right; i++){
        phase[i] = 'X';
    }
}
",0
lsal082,1696806348,2,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    if (left < 0 || right >= length || left >= right){
        printf(""Invalid input: left and right should be valid index positions.\n"");
        return;
    }
    
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",0
lsal082,1696845793,3,"void Censor(char **phrase, int left, int right)
{
    int length = strlen(phrase);
    
    if (left < 0 || right >= length || left >= right){
        printf(""Invalid input: left and right should be valid index positions.\n"");
        return;
    }
    
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",0
lsal082,1696846154,4,"void Censor(char **phrase, int left, int right)
{
    int length = strlen(phrase);
    
    if (left < 0 || right >= length || left >= right){
        printf(""Invalid input: left and right should be valid index positions.\n"");
        return;
    }
    
    for (int i = left; i <= right; i++){
        (*phrase)[i] = 'X';
    }
}

",0
lsal082,1696847075,5,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    if (left < 0 || right >= length || left >= right){
        printf(""Invalid indices\n"");
        return;
    }
    
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}

",0
lsal082,1696847397,6,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",0
lsal082,1696847440,7,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
lsen376,1696372854,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
lsha172,1696843178,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    if (right >= length) {
        right = length - 1;
    }
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
lspu128,1696663974,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
   int length = strlen(phrase) ;
   if(left < 0, right > length, left > right){
       printf(""invalid positioning"");
       return;
   }
   
   for( int i = left; i <= right; i++ ){
       phrase[i] = 'X';
   }
}
",0
lspu128,1696664157,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
   int length = strlen(phrase) ;
   if(left < 0 || right > length || left > right){
       printf(""invalid positioning\n"");
       return;
   }
   
   for( int i = left; i <= right; i++ ){
       phrase[i] = 'X';
   }
}
",1
lsu376,1696306058,1,"#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	while (left <= right && phrase[left] != '\0') {
		phrase[left] = 'X';
		left++;
	}
}
",1
lsua311,1696817331,1,"#include <stdio.h>

void Censor(char *str, int left, int right) {
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
ltan813,1696822760,1,"void Censor(char *phrase, int left, int right)
{
    if (left < 0 || right >= strlen(str) || left > right) {
        return;  
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",0
ltan813,1696822850,2,"void Censor(char *phrase, int left, int right)
{
    if (left < 0 || right >= strlen(phase) || left > right) {
        return;  
    }

    for (int i = left; i <= right; i++) {
        phase[i] = 'X';
    }
}
",0
ltan813,1696822892,3,"void Censor(char *phrase, int left, int right)
{
    if (left < 0 || right >= strlen(phrase) || left > right) {
        return;  
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
lvan346,1696673310,1,"void Censor(char* phrase, int left, int right)
{
	
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
lvin900,1696745708,1,"void Censor(char *phrase, int left, int right)
{
	int i;

	for (i = 0; i <= (right - left); i++) {
		phrase[left + i] = 'X';
	}
}
",1
lwer802,1696844445,1,"#include <stdio.h>

void Censor(char *str, int left, int right) {
    for(int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}

int main() {
    char censor[100] = ""ENGGEN131"";
    Censor(censor, 6, 8);
    printf(""%s\n"", censor);  // Expected output: ENGGENXXX
    return 0;
}
",0
lwer802,1696844470,2,"void Censor(char *str, int left, int right) {
    for(int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
lwon290,1696643283,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
lyou975,1696376251,1,"void Censor(char *phrase, int left, int right)
{
        int length = strlen(phrase);
    for (int i = 0; i < length; i++) {

        if (i >= left && i <= right) {

            phrase[i] = 'X';
        }
    }}
",1
mabb997,1696213480,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
mahu925,1696213243,1,"void Censor(char *phrase, int left, int right)
{
    
}
void Censor(char *phrase, int left, int right)
{
    int i = 0;
    for(i=left;i<=right;i++){
        phrase[i] = 'X';
    }
}",0
mahu925,1696213264,2,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
    for(i=left;i<=right;i++){
        phrase[i] = 'X';
    }
}",1
mala824,1696639756,1,"void Censor(char *phrase, int left, int right)
{
    int i
    for (i = left; i <= right; i++)
    {
        if (phrase[i] != '\0')
        { 
            phrase[i] = 'X';
        }    
        else 
        {
            break;
        }
    }
    
}",0
mala824,1696639820,2,"void Censor(char *phrase, int left, int right)
{
    int i = 0
    for (i = left; i <= right; i++)
    {
        if (phrase[i] != '\0')
        { 
            phrase[i] = 'X';
        }    
        else 
        {
            break;
        }
    }
    
}",0
mala824,1696639852,3,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
    for (i = left; i <= right; i++)
    {
        if (phrase[i] != '\0')
        { 
            phrase[i] = 'X';
        }    
        else 
        {
            break;
        }
    }
    
}",1
mbah279,1696751274,1,"void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);

    if (left < 0 || left >= length || right < 0 || right >= length || left > right) {
        printf(""Sorry there has been an error!!! TRY AGAIN\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
mbal759,1696302682,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i=left; i<=right; i++)
    {
        phrase[i] = 'X';
    }
}",1
mboy221,1696207495,1,"void Censor(char *phrase, int left, int right)
{
    int len = 0;
    int count = 0;
    while (phrase[len] != '\0') {
        len++;
    }
    if (len == 0) {
        return;
    }
    for (int i = 0; i<len; i++) {
        if ((i >= left)&&(i <= right)) {
            phrase[i] = 'X';
        } 
    }
}",0
mboy221,1696207562,2,"void Censor(char *phrase, int left, int right)
{
    int len = 0;
    while (phrase[len] != '\0') {
        len++;
    }
    if (len == 0) {
        return;
    }
    for (int i = 0; i<len; i++) {
        if ((i >= left)&&(i <= right)) {
            phrase[i] = 'X';
        } 
    }
}",1
mbut885,1696624238,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    return;
}
",1
mcam799,1696682358,1,"void Censor(char *phrase, int left, int right)
{
 //Establishes beginning of section
int i = left;

	//Make a loop that executes code difference + 1
for (i; i <= (right); i++) {
	phrase[i] = 'X';
}
   
}
",0
mcam799,1696682723,2,"void Censor(char *phrase, int left, int right)
{
//Establishes beginning of section
int i = left;

	//Make a loop that executes code difference + 1
while (i <= (right)) {
	phrase[i] = 'X';
	i++; 
}

   
}
",1
mcha833,1696417238,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
mcha876,1696833424,1,"void Censor(char *phrase, int left, int right)
{
  if (phrase == NULL || left <= 0 || right >= strlen(phrase) || left >= right) {
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }  
}
",0
mcha876,1696833511,2,"void Censor(char *phrase, int left, int right)
{
 if (phrase == NULL || left < 0 || right >= strlen(phrase) || left > right) {
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}
",1
mche403,1696663280,1,"void Censor(char *phrase, int left, int right)
{while (left <= right && phrase[left] != '\0') {
        phrase[left++] = 'X';
    
}
",0
mche403,1696663311,2,"void Censor(char *phrase, int left, int right)
{while (left <= right && phrase[left] != '\0') {
        phrase[left++] = 'X';
    
}
}
",1
mcro807,1696768442,1,"void Censor(char *phrase, int left, int right)
{
  
 int difference = right - left;
 for (int i = left; i <= right; i++){
     phrase[i] = 'X';
 }  
}
",0
mcro807,1696768457,2,"void Censor(char *phrase, int left, int right)
{
  
 
 for (int i = left; i <= right; i++){
     phrase[i] = 'X';
 }  
}
",1
mdav506,1696236879,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
mdea492,1696724594,1,"
void Censor(char *phrase, int left, int right)
{   
    int middle =  right -1 ;
    for (int i = left;i <= right;i++)
    {phrase[i]='X';}

}

",0
mdea492,1696724690,2,"void Censor(char *phrase, int left, int right)
{   
    
    for (int i = left;i <= right;i++)
    {phrase[i]='X';}

}

",1
mfle888,1696729496,1,"void Censor(char *phrase, int left, int right) {

char censor = 'X'; 
int i;

for (i = left; i <= right; i++) {
    phrase[i] = censor; 
} 

}
 ",1
mfuj750,1696553100,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
	phase[i] = 'X';
    }
}
",0
mfuj750,1696553184,2,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
mger154,1696223613,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    int length = 0;

    while (phrase[length] != '\0') {
        length++;
    }

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }

    phrase[length] = '\0';
}",1
mgoy303,1696243838,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
mgua740,1696773604,1,"void Censor(char *phrase, int left, int right)
{  for (int i = left; i <= right; i++) 
 {
        censor[i] = 'X';
 }
}
",0
mgua740,1696773676,2,"void Censor(char *phrase, int left, int right)
{  for (int i = left; i <= right; i++) 
 {
        phrase[i] = 'X';
 }
}
",1
mhua821,1696743102,1,"void Censor(char *phrase, int left, int right)
{
    int length, i;
    
    length = strlen(phrase);
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }   
}",0
mhua821,1696743218,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }   
}",1
mjun868,1696732656,1,"void Censor(char *phrase, int left, int right)
{
    #define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int length(char *phrase)
{
    int i = 0; 
    while (phrase[i] != '\0'){
        i++;
    }
return i;
}

void Censor(char *phrase, int left, int right)
{
    int phrase_length = length(phrase);
    for (int i = 0; i < phrase_length; i++){
        for (int j = left; j <= right; j++){
            phrase[j] = 'X';
        }
    }
}
}
",0
mjun868,1696732667,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int length(char *phrase)
{
    int i = 0; 
    while (phrase[i] != '\0'){
        i++;
    }
return i;
}

void Censor(char *phrase, int left, int right)
{
    int phrase_length = length(phrase);
    for (int i = 0; i < phrase_length; i++){
        for (int j = left; j <= right; j++){
            phrase[j] = 'X';
        }
    }
}",1
mkab524,1696759542,1,"void Censor(char* phrase, int left, int right)
{
	int i = 0;

	for (i = left; i < right + 1; i++) {
		phrase[i] = 'X';
		}
}",1
mkaj411,1696299356,1,"void Censor(char* phrase, int left, int right)
{
	int i; 
	for (i = left; i <= right; i++) {
		phrase[i] = 'X'; 
	}
}
",1
mkee115,1696302497,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    
    while ((i>=left) && (i<=right))
    {
        phrase[i] = 'X';
        i++;
    }
}",1
mken566,1696459741,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }   
}
",1
mket106,1696837100,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }  
    
}
",1
mkim670,1696416697,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i = right; i++) {
		phrase[i] = 'X';
	}
}",0
mkim670,1696417191,2,"void Censor(char* phrase, int left, int right) {
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
mkim719,1696629369,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left ; i<=right ; i++)
    {
        phrase[i] = 'X';
    }
}",1
mlal864,1696823669,1,"void Censor(char *phrase, int left, int right) {
    int len = strlen(phrase);
    int i = left;
    
    if (i < right; i++) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}",0
mlal864,1696823711,2,"void Censor(char *phrase, int left, int right) {
    int len = strlen(phrase);

    if (left >= 0 && left < len && right >= 0 && right < len && left <= right) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}",1
mlaw649,1696824606,1,"void Censor(char *phrase, int left, int right)
{
    
    // find length of the phrase
    int phraseLength = 0;
    for (int i = 0; phrase[i] != '\0'; i++) {
        phraseLength ++;
    }
    
    // converts each element in the desired range to the letter X
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
    

    
    
    
    
    ",1
mle063,1696556385,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
mlin729,1696231145,1,"void Censor(char *str, int left, int right) {
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
mloh302,1696211085,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
mmak111,1696833231,1,"void Censor(char *phrase, int left, int right)
{
	for (; left <= right; left++) {
		phrase[left] = 'X';
	}
}
",1
mman402,1696628777,1,"void Censor(char *phrase, int left, int right)
{
   int length, i;
    char x;
    x=88;
    for(i=start;i<=stop;i++)
    {
        word[i]=x;

    }
     
}
",0
mman402,1696628811,2,"void Censor(char *phrase, int left, int right)
{
   int length, i;
    char x;
    x=88;
    for(i=left;i<=right;i++)
    {
        phrase[i]=x;

    }
     
}
",0
mman402,1696628825,3,"void Censor(char *phrase, int left, int right)
{
   int i;
    char x;
    x=88;
    for(i=left;i<=right;i++)
    {
        phrase[i]=x;

    }
     
}
",1
mman808,1696685515,1,"void Censor(char *phrase, int left, int right){
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
}",1
mmas199,1696824750,1,"#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right) 
{
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}",1
mmca276,1696675081,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
    phrase[i] = 'X';
}
}
",1
mmcg745,1696377133,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right){

int len = strlen(phrase);


for (int i = left; i < right+1; i++){
    phrase[i] = 'X';

}

}
",0
mmcg745,1696377158,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right){


for (int i = left; i < right+1; i++){
    phrase[i] = 'X';

}

}
",1
mmoh314,1696842351,1,"void Censor(char *phrase, int left, int right)
{
	int i;
	for (i = 0; i < strlen(phrase); i++)
	{
		if (i >= left && i <= right)
		{
			phrase[i] = 'X';
		}
	}
}",1
mmoh456,1696635481,1,"void Censor(char *phrase, int left, int right)
{
    
int i = 0;
int len = strlen(phrase);

for (i = left; i <= right; i++) {
		phrase[i] = 'X';
}
	
}
",0
mmoh456,1696635571,2,"void Censor(char *phrase, int left, int right)
{

	int i = 0;
	int len = strlen(phrase);

	for (i = left; i <= right && i<len; i++) {
			phrase[i] = 'X';
	}
}
",1
mnay503,1696734292,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) 
{
    
    if (left < 0 || right >= strlen(phrase) || left >= right)
    {
        
        return;
    }

    
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}




",0
mnay503,1696735538,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) 
{
    
    if (left < 0 || right >= strlen(phrase) || left > right) 
    {
        
        return;
    }

   
    if (left == right) 
    {
        phrase[left] = 'X';
    } 
    else 
    {
       
        for (int i = left; i <= right; i++) 
        {
            phrase[i] = 'X';
        }
    }
}


",1
mnic190,1696839886,1,"void Censor(char *phrase, int left, int right) {
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 88;
    }
}",1
moco678,1696737649,1,"int Censor(char* String, int left, int right)
{
	int Length = strlen(String);
	int i;
	char censor = 'X';
	for (i = left; i <= right && i < Length; i++)
	{

	
			String[i] = censor;
		
	}
	return 1;
} ",1
mpar342,1696835292,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}
",1
mpat501,1696217276,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left ; i<right+1 ; i++){
        string[i]='X';
    }
}
",0
mpat501,1696217311,2,"void Censor(char *phrase, int left, int right)
{
    for (int i=left ; i<right+1 ; i++){
        phrase[i]='X';
    }
}
",1
mpey262,1696279423,1,"void Censor(char *phrase, int left, int right)
{
    while (left <= right) {
        phrase[left] = 'X';
        left++;
    }
}
",1
mran851,1696758397,1,"void Censor(char *phrase, int left, int right)
{
	
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
mris618,1696384476,1,"void Censor(char *phrase, int left, int right)
{
int length = 0;

while (str[length] != '\0') {
    length++;
}

for (int i = left; i <= right; i++) {
    str[i] = 'X'; 
}
}
",0
mris618,1696384782,2,"void Censor(char *phrase, int left, int right)
{
 int length = 0;

 while (phrase[length] != '\0') {
     length++;
 }

 for (int i = left; i <= right; i++) {
     phrase[i] = 'X'; 
 }
}
",1
mrog757,1696469399,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0;
    for (i=left; i<=right; i++) {
        phrase[i] = 'X';
    }
}
",1
mron793,1696733836,1,"void Censor(char *phrase, int left, int right)
{
        while (left <= right)
    {
        phrase[left] = 'X';
        left++;
    }
}
",1
mshi672,1696731898,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}
",1
msil440,1696832069,1,"void Censor(char *phrase, int left, int right)
{
   int length = strlen(phrase);
   
   if (left < 0 || right >= length || left > right)
   {
       //Deal with the invalid idex positioning.
       printf(""Invalid index positioning.\n"");
       return;
   }
   
   for (int i = left; i <= right; i++)
   {
       str[i] = 'X'
       
   }
   
}
",0
msil440,1696832124,2,"#include <stdio.h>
#include <string.h>


void Censor(char *phrase, int left, int right)
{
   int length = strlen(phrase);
   
   if (left < 0 || right >= length || left > right)
   {
       //Deal with the invalid idex positioning.
       printf(""Invalid index positioning.\n"");
       return;
   }
   
   for (int i = left; i <= right; i++)
   {
       str[i] = 'X'
       
   }
   
}
",0
msil440,1696832140,3,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
   int length = strlen(phrase);
   
   if (left < 0 || right >= length || left > right)
   {
       //Deal with the invalid idex positioning.
       printf(""Invalid index positioning.\n"");
       return;
   }
   
   for (int i = left; i <= right; i++)
   {
       phrase[i] = 'X'
       
   }
   
}
",0
msil440,1696832279,4,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
   int length = strlen(phrase);
   
   if (left < 0 || right >= length || left > right)
   {   //Deal with the invalid idex positioning.
       printf(""Invalid index positioning.\n"");
       return;
   }
   
   for (int i = left; i <= right; i++)
   {
       phrase[i] = 'X';
       
   }
}
",1
msin609,1696727359,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
	    phrase[i] = 'X';
    }
}
",1
msu975,1696369516,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}

}",1
msuv992,1696391470,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for ( i = left; i <= right; i ++) {
        phrase[i] = 'X';
    }
}
",1
mtam709,1696845381,1,"void Censor(char *phrase, int left, int right)
{
   int length = strlen(phrase);
    int i = 0;
    for (i = 0; i < length; i++) {
        if (i >= left && i <= right) {
            phrase[i] = 'X';
        }
    } 
}
",1
mtha724,1696308656,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
mtob213,1696755416,1,"void Censor(char *phrase, int left, int right) 
{
    while (right >= left) {
        phrase[right] = 'X';
        right--;
    }
}
",1
mwan364,1696233224,1,"void Censor(char *phrase, int left, int right)
{
	int phraseLength = strlen(phrase);
	int i;
	for (i = 0; i < phraseLength; i++) {
		if ((i >= left) && (i <= right)) {
			phrase[i] = 'X';
		}

	}
	return;
}",1
myou984,1696303390,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
nabr105,1696471792,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X'; 
    }
}
",1
nalg484,1696753961,1,"#include <stdio.h>
#include <string.h>
void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",0
nalg484,1696753991,2,"#include <stdio.h>
#include <string.h>
void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
nask472,1696403000,1,"
#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i]='X';
    }
    
}
",1
ncha509,1696208459,1,"void Censor(char *phrase, int left, int right){
    int a;
    
    for(a=left;a<=right;a++){
        phrase[i]='X';
    }

}",0
ncha509,1696208501,2,"void Censor(char *phrase, int left, int right){
    int a;
    
    for(a=left;a<=right;a++){
        phrase[a]='X';
    }

}",1
ndas832,1696486943,1,"void Censor(char *phrase, int left, int right)
{
   int i; 
    for (i=left; i<=right; i++) {
        // The characters that fall within the range are replaced with the character 'X'
         phrase[i] = 'X'; 
    } 
}
",1
ndso791,1696652391,1,"void Censor(char *phrase, int left, int right) 
{
    int len = strlen(phrase);

    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}",0
ndso791,1696652439,2,"void Censor(char *phrase, int left, int right) 
{

    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}",1
ngam724,1696426757,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
ngan146,1696503189,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ngna565,1696739949,1,"void Censor(char *phrase, int left, int right)
{
     for (int i = left; i <= right; i++) {
        
        phrase[i] = 'X';
    }
}
",1
nhar865,1696758244,1,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = '*';
    }
}
",0
nhar865,1696758270,2,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
nhrs452,1696301752,1,"
void Censor(char *phrase, int left, int right)
{
    char cross = 'X';
    for (int i = left; i <= right; i++){
        phrase[i] = cross;
    }
}
",1
nhua986,1696298642,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = 0; i <= (right - left); i++) {
        phrase[left + i] = 'X';
    }
}
",1
nhut042,1696209762,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    return;
}",1
nisa397,1696299739,1,"void Censor(char* phrase, int left, int right) {
	int i;
	for (i = left; i <= right;i++) {
		phrase[i] = 'X';

	}
}
",1
njon803,1696392925,1,"void Censor(char* phrase, int left, int right)
{
	int i = left;

	while (i <= right) {
		phrase[i] = 'X';
		i++;
	}
}

int main(void)
{
	char censor[100] = ""ENGGEN131"";
	Censor(censor, 6, 8);
	printf(""%s\n"", censor);
}
",0
njon803,1696392965,2,"void Censor(char* phrase, int left, int right)
{
	int i = left;

	while (i <= right) {
		phrase[i] = 'X';
		i++;
	}
}
",1
nlal162,1696747046,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    if (left >= 0 && right < length && left <= right) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
    
}
",1
nmah920,1696395338,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
nqua370,1696844332,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
nren130,1696406043,1,"void Censor(char *phrase, int left, int right)
{
  int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }  
}
",1
nrub019,1696714497,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
        censor[i] = 88;
}
",0
nrub019,1696714558,2,"void Censor(char *phrase, int left, int right){

    for (int i = left; i <= right; i++)
        phrase[i] = 88;
}",1
nthe160,1696751695,1,"void Censor(char* phrase, int left, int right)
{

	int	lastvalue;
	int firstvalue;

	for (firstvalue = left, lastvalue = right; firstvalue <= lastvalue; firstvalue++) { // loop to swap elements
		phrase[firstvalue] = 'X';
	}
	
		return 1;
}",0
nthe160,1696751751,2,"void Censor(char* phrase, int left, int right)
{
	int	lastvalue;
	int firstvalue;

	for (firstvalue = left, lastvalue = right; firstvalue <= lastvalue; firstvalue++) { // loop to swap elements
		phrase[firstvalue] = 'X';
	}
	return phrase;
}",0
nthe160,1696752138,3,"void Censor(char *phrase, int left, int right)
{
	int	lastvalue;
	int firstvalue;

	for (firstvalue = left, lastvalue = right; firstvalue <= lastvalue; firstvalue++) { // loop to swap elements
		phrase[firstvalue] = 'X';
	}
	return phrase;
}
",0
nthe160,1696753024,4,"void Censor(char* phrase, int left, int right)
{
	char censor;
	int	lastvalue;
	int firstvalue;

	for (firstvalue = left, lastvalue = right; firstvalue <= lastvalue; firstvalue++) {
		phrase[firstvalue] = 'X';
	}
	censor = phrase;
}",0
nthe160,1696753074,5,"void Censor(char* phrase, int left, int right)
{
	int	lastvalue;
	int firstvalue;

	for (firstvalue = left, lastvalue = right; firstvalue <= lastvalue; firstvalue++) {
		phrase[firstvalue] = 'X';
	}
}",1
ntia856,1696395979,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';  
    }
}
",1
ntur101,1696227397,1,"void Censor(char* phrase, int left, int right)
{
	int length = strlen(phrase);

	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",0
ntur101,1696227423,2,"
#include <string.h>
void Censor(char* phrase, int left, int right)
{
	int length = strlen(phrase);

	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",0
ntur101,1696227452,3,"void Censor(char* phrase, int left, int right)
{
	
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
nwei818,1696236788,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left ; i<right+1 ; i++){
        phrase[i] = 'X';
    }
}",1
nwil850,1696325868,1,"#include <stdio.h>
#include <string.h>
void Censor(char *phrase, int left, int right)
{
    int slen = strlen(phrase);
    char cens = 'X';
    for (int i = 0; i < slen; i++ )
    {
        if (i >= left && i <= right){

        phrase[i] = cens;
        }
    }

}
",1
nyua944,1696379883,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
obar199,1696836998,1,"void Censor(char *phrase, int left, int right)
{
  for (int i = left; i <= right; i++){
      phrase[i] = 'X';
  }
    
}",1
ogab251,1696394460,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    int i = 0;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ogan176,1696491174,1,"void Censor(char *phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
ogar584,1696394539,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
oguo680,1696645360,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}",1
oko158,1696333280,1,"void Censor(char* phrase, int left, int right)
{
  
    while (left <= right){
        phrase[left] = 'X';
        left++;
    }
    return;
}",1
onic423,1696727542,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
opat597,1696732667,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
opre469,1696666145,1,"void Censor(char *phrase, int left, int right)
{
    //for loop to go from the first censored index to the last//
for (int i = left; i <= right; i++) {

	//replacing the character with an X//
	phrase[i] = 'X';

}
}
",1
orow585,1696677250,1,"void Censor(char *phrase, int left, int right)
{
    	for (int i = left; i <= right; i++) {
		*(phrase + i) = 'X';
	}
}
",1
osca399,1696814632,1,"void Censor(char *phrase, int left, int right)
{
  	for (int i = left; i < right; i++) {
		phrase[i] = 'X';
	}  
}

//Author: Olano Scarlett",0
osca399,1696814675,2,"void Censor(char *phrase, int left, int right)
{
  	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}  
}

//Author: Olano Scarlett",1
oshi740,1696455763,1,"void Censor(char *phrase, int left, int right)
{
   int i, j;
i = left;
j = right;
while (i <= j) {
	phrase[i] = 'X';
			i++;
}
return 0; 
}
",0
oshi740,1696455790,2,"void Censor(char *phrase, int left, int right)
{
   int i, j;
i = left;
j = right;
while (i <= j) {
	phrase[i] = 'X';
			i++;
}
}
",1
osko432,1696771190,1,"void Censor(char *phrase, int left, int right)
{
for (int deezy=left;deezy<=right;deezy++){
    phrase[deezy]='x';
} 
}

",0
osko432,1696771208,2,"void Censor(char *phrase, int left, int right)
{
for (int deezy=left;deezy<=right;deezy++){
    phrase[deezy]='X';
} 
}

",1
pchh683,1696214523,1,"void Censor(char *phrase, int left, int right)
{
    int Length = strlen(phrase);
    for (int i = 0; i <= right; i++)
    {
        if (i >= left)
        {
            phrase[i] = 'X';
        }
    }
}",0
pchh683,1696214588,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = 0; i <= right; i++)
    {
        if (i >= left)
        {
            phrase[i] = 'X';
        }
    }
}",1
pfil701,1696823811,1,"void Censor(char *str, int left, int right)
{
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
pfon568,1696401903,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left - 1; i < right; i++)
    {
        phrase[i] = 'X';
    }
    
}
",0
pfon568,1696401952,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    
}
",1
phao209,1696836623,1,"#include <stdio.h>

void Censor(char* str, int left, int right) {
    // Check if left and right indices are valid
    if (left < 0 || right >= strlen(str) || left > right) {
        printf(""Invalid indices\n"");
        return;
    }

    // Use pointers to replace characters between left and right indices with 'X'
    char* start = str + left;
    char* end = str + right + 1; // Adding 1 to include the character at the right index

    while (start < end) {
        *start = 'X';
        start++;
    }
}",1
pkim777,1696211452,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X'; 
    }
}",1
plah275,1696756309,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i ++)
    phrase[i] = 'X';
}
",1
plan310,1696559605,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
ppax865,1696825978,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
pper327,1696674006,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X'; 
    }
}
",1
ppra303,1696802819,1,"void Censor(char *phrase, int left, int right)
{
        int length = strlen(phrase);
    
    // Check if left is less than right
    if (left < right) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X'; // Replace characters between left and right with X
        }
    }
}
",0
ppra303,1696803114,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) { //
        phrase[i] = 'X';
    }
}
",1
pshe539,1696305336,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
psin207,1696305494,1,"
void Censor(char *phrase, int left, int right)
{
    int i=left;
    
    while (i<=right) {
        phrase[i]=88;
        i++;
    }
}
",1
pwat943,1696295853,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",0
pwat943,1696295881,2,"void Censor(char *phrase, int left, int right)
{
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
pwil422,1696848541,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);

    if (left >= 0 && right < length && left <= right) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}   

",1
pwu278,1696218915,1,"void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i < right + 1; i++) {
		phrase[i] = 'X';
	}
}",1
pxie161,1696318385,1,"void Censor(char *phrase, int left, int right)
{	
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
pyou182,1696319691,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
qche619,1696839676,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) 
    {
        if (phrase[i] != '\0') 
        {
            phrase[i] = 'X';
        }
    }
}
",1
qkan386,1696304353,1,"void Censor(char* phrase, int left, int right) {

	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
qmcc945,1696273362,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
qtra338,1696369322,1,"void Censor(char *phrase, int left, int right) {
    int i;

    for (i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    
}",1
qwu129,1696326961,1,"void Censor(char *phrase, int left, int right)


{
    for (i = left; i <= right;i++){
    phrase[i] = 'X';
    }
    
}
",0
qwu129,1696327007,2,"void Censor(char *phrase, int left, int right)


{   int i;
    for (i = left; i <= right;i++){
    phrase[i] = 'X';
    }
    
}
",1
qzho943,1696283796,1,"void Censor(char *phrase, int left, int right)
{
     int i;
    for (i=left;i<=right;i++){
        phrase[i]='X';
}
",0
qzho943,1696284387,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i=left;i<=right;i++){
        phrase[i]='X';
    }
}",1
raic989,1696307478,1,"void Censor(char *phrase, int left, int right)
{
    	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
rand321,1696219922,1,"void Censor(char *phrase, int left, int right)
{
    int i;
  for(i = left; i <= right; i++){
      phrase[i] = 'X';
  }
}
",1
rbaj698,1696843597,1,"void Censor(char *phrase, int left, int right)
{
int i;
for (i=left-1; i<right ; i++) {
	phrase[i] = 'X';
    }
  
}
",0
rbaj698,1696843654,2,"void Censor(char *phrase, int left, int right)
{
int i;
for (i=left; i<=right ; i++) {
	phrase[i] = 'X';
    }
  
}
",1
rbat374,1696316846,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
rbat561,1696227673,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = *""X"";
    }
}",1
rbui853,1696325504,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while (i <= right) {
        phrase[i] = 'X';
        i++;
    }
}",1
rbus291,1696391253,1,"void Censor(char *phrase, int left, int right){
    int length = strlen(phrase);
    int i;
    if (left > 0 && right < length && left < right) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }
}",0
rbus291,1696391932,2,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <=right; i++) {
        phrase[i] = 'X';
    }
}
",1
rchi339,1696805579,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
rcou530,1696310175,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i <= right; i++){
		phrase[i] = 'X';
	}
	return;
}
",1
rdas322,1696826879,1,"void Censor(char *phrase, int x, int y)
{
    
    int a;
    for (a = x; a <= y; a++) {
        phrase[a] = 'X';
     }
}
",1
rdic384,1696840820,1,"void Censor(char *phrase, int left, int right)
{
     for (i = left; i <= right; i++)
   { 
       phrase[i] = 'X';
   }
}
",0
rdic384,1696840858,2,"void Censor(char *phrase, int left, int right)
{
     for (int i = left; i <= right; i++)
   { 
       phrase[i] = 'X';
   }
}
",1
rdon807,1696846846,1,"void Censor(char *phrase, int left, int right)
{
    int length;
    int a;
    length=right-left;
    a=length;
    while (length>=0){
        phrase[left+length]= '\0';
        length--;
    }
    while (a>=0){
        strcat(phrase, ""X"");
        a--;
    }
}",0
rdon807,1696847005,2,"void Censor(char *phrase, int left, int right)
{
for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",0
rdon807,1696847064,3,"void Censor(char *phrase, int left, int right)
{
for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
rdun690,1696738774,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",0
rdun690,1696738901,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
rger104,1696282195,1,"void Censor(char *phrase, int left, int right)
{
    int i;
for (i = left; i < right + 1; i++) {
	phrase[i] ='X';
}
}
",1
rgre692,1696845468,1,"void Censor(char *phrase, int left, int right)
{

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
rkan756,1696292224,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
rkar406,1696210764,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
rkha931,1696299701,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    for (int i = left;i <= right; i++){
        phrase[i] = 'X';
        }
    
}
",1
rkir245,1696468756,1,"void Censor(char *phrase, int left, int right)
{    
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 88;
    }
}",1
rleg709,1696805139,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; (i <= right); i++) { 
    phrase[i] = 'X';
    }
}
",1
rlin108,1696290493,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i < right + 1; i ++) {
        phrase[i] = 'X';
    }
}
",1
rmar633,1696414038,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    char x;
    x = 'X';
    for (i = (left); i <= right; i++)
    {
        phrase[i] = x;
    }
}
",1
rmur989,1696662169,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i < right+1; i++) {
        phrase[i] = 88;
    }

}",1
rnga701,1696321603,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    int len;
    len=strlen(phrase);
    
    for(i=0;i<len;i++){ 
        if(i>=left && i<=right){
            phrase[i]='X';
        }
    }
}",1
rnig735,1696372560,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    for (int i=left; i<=right; i++) {
        phrase[i] = 'X';
    }
}
",1
rpar376,1696719141,1,"void Censor(char *phrase, int left, int right) {
    for (int i=left; i<right+1;i++) {
        phrase[i]='X';
    }
}
",1
rpat943,1696310797,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
rraj313,1696210200,1,"void Censor(char *phrase, int left, int right)
{
    int i, length = strlen(phrase);
    for (i = 0; i < length; i++) {
        if ((i >= left) && (i <= right)) {
            phrase[i] = 88;
        }
    }
}
",1
rroz381,1696660593,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
rsha769,1696644653,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    int validLeftBound = left >= 0;
    int validRightBound = right < length;
    int validRangeBound = left <= right;

    if (validLeftBound && validRightBound && validRangeBound) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    }

}

",1
rsha970,1696635926,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);

    if (left < 0 || right >= length || left > right) {
        printf(""Invalid index positions.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
}
",0
rsha970,1696636225,2,"void Censor(char *phrase, int left, int right)
{
        int length = strlen(phrase);

    if (left < 0 || right >= length || left > right) {
        printf(""Invalid index positions.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
rsin531,1696831876,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int length = strlen(str);

    if (left < 0 || right >= length || left > right) {
        
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
rsin719,1696807794,1,"void Censor(char *phrase, int left, int right)
{
   for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}
",1
rsmi948,1696638853,1,"void Censor(char *phrase, int left, int right){
    for (int i = 0; i <= right; i++){
        if (left <= i && i <= right){
            phrase[i] = 'X';
        }
    }
}",1
rsta265,1696664780,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
rtan654,1696299341,1,"void Censor(char *phrase, int left, int right)
{
    while (left != right){
        phrase[left] = 'X';
        left++;
    }
    phrase[right] = 'X';
}",1
rtap592,1696839355,1,"#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}

}
",1
rvog842,1696812874,1,"    #include <stdio.h>

void Censor(char* phrase, int left, int right)
{
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
    
    
}


",1
rwar748,1696236037,1,"void Censor(char *phrase, int left, int right)
{
    int dif = right - left;
    while(left<=right){
        phrase[left] = 'X';
        left++;
    }
}",0
rwar748,1696236055,2,"void Censor(char *phrase, int left, int right)
{
    while(left<=right){
        phrase[left] = 'X';
        left++;
    }
}",1
rzha972,1696418963,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int size;
    int i;
    size = strlen(phrase) - 1;
    for (i = left; i <= right && phrase[i] != '\0'; i++){
        phrase[i] = 'X';
    }

}
",0
rzha972,1696419021,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right && phrase[i] != '\0'; i++){
        phrase[i] = 'X';
    }

}
",1
sabo272,1696280830,1,"void Censor(char *phrase, int left, int right)
{
	int i = 0;
	while (phrase[i] != '\0'){
		if ((i >= left) && (i <= right)){
			phrase[i] = 'X'; // if the position of the phrase is between or equal to left or right,
			                    // replace with X.
		}
		i++;
	}

}
",1
sali153,1696665523,1,"void Censor(char* c, int left, int right) {

	for (int i = left; i <= right; i++)
	{
		c[i] = 'X';
	}
	return;

}
",1
sban919,1696337295,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
sbas887,1696702301,1,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
sben564,1696635658,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    
    while (i <= right) {
        phrase[i] = 'X';
        i++;
    }
}
",1
sbha564,1696841584,1,"void Censor(char *phrase, int left, int right)
{
    if phrase == NULL || left < 0 || right >= strlen(phrase) || left > right){
        return;
    }
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",0
sbha564,1696841618,2,"void Censor(char *phrase, int left, int right)
{
    if (phrase == NULL || left < 0 || right >= strlen(phrase) || left > right){
        return;
    }
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
sbou664,1696836707,1,"int Censor(char *phrase, int left, int right);
int Censor(char *phrase, int left, int right) {
  int i = 0;
  for (i = left; i <= right; i++) {
    phrase[i] = 'X';
  }
}",0
sbou664,1696836749,2,"void Censor(char *phrase, int left, int right);
void Censor(char *phrase, int left, int right) {
  int i = 0;
  for (i = left; i <= right; i++) {
    phrase[i] = 'X';
  }
}",1
sbro373,1696368931,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
scar362,1696334574,1,"void Censor(char *phrase, int left, int right)
{
    
    
    int i=0;
    for (i = left; i <= right && i<strlen(phrase); i++) {
        phrase[i]='X';
    }
    
}
",1
sche525,1696222442,1,"void Censor(char *phrase, int left, int right){
    for(int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
scho575,1696726096,1,"void Censor(char *str, int left, int right) {
    int length = strlen(str);

    // Boundaries
    if (left < 0 || right >= length || left > right)
        return;

    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
schu718,1696309085,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
schu800,1696818519,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    int length = strlen(phrase);
    for (i=0; i < length; i++){
        if ( i>=left && i<=right ){
            phrase[i] = 'X';
        }
    }
    printf(""%s"",phrase);
    
}",0
schu800,1696818544,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    int length = strlen(phrase);
    for (i=0; i < length; i++){
        if ( i>=left && i<=right ){
            phrase[i] = 'X';
        }
    }
    
}",1
sdal739,1696249758,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	int length;
	length = strlen(phrase);

	for (i = 0; i < length; i++) {
		if ((i >= left) && (i <= right)) {
			phrase[i] = 'X';
		}
	}
}
",1
sden589,1696841295,1,"void Censor(char *phrase, int left, int right)
{
   for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}
",1
sekb555,1696218309,1,"void Censor(char *phrase, int left, int right)
{
    //replaces all of the letters between the left and right(inclusive) integers with X 
    for(int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
sfry192,1696713785,1,"#include <stdio.h>
#include <string.h>
char X = 88;

void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right;i++)
    phrase[i] = X;
    
    
}
int main(void){
   char censor[100] = ""ENGGEN131"";
    Censor(censor, 6, 8);
    printf(""%s\n"", censor); 
}",0
sfry192,1696713828,2,"#include <stdio.h>
#include <string.h>
char X = 88;

void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right;i++)
    phrase[i] = X;
    
    
}
",1
sgal263,1696774346,1,"void Censor(char* phrase, int left, int right) {
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
	return;
}",1
sgib237,1696804419,1,"void Censor(char *phrase, int left, int right){
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
    phrase[right+1] = '\0';
    return
}",0
sgib237,1696804464,2,"void Censor(char *phrase, int left, int right){
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
    phrase[right+1] = '\0';
    return phrase;
}",0
sgib237,1696804663,3,"Censor(char *phrase, int left, int right){
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
   
    return phrase;
}
",0
sgib237,1696804721,4,"char Censor(char *phrase, int left, int right){
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
   
    return phrase;
}
",0
sgib237,1696804968,5,"void Censor(char *phrase, int left, int right){
    for (int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
   
  
}
",1
shan333,1696826359,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i<=right; i++){
        phrase[i] = 'X';
    }
}
",1
shan790,1696413042,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
she940,1696298671,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
shsa718,1696278534,1,"void Censor(char *phrase, int left, int right)
{
    // Replace characters in the given range with 'X'
    int i;

    for (i=left; i<= right; i++){
        phrase [i] = 'X';
    }

    return;
}
",1
shua365,1696230370,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i<right+1;i++){
    phrase[i]='X';
    }

}
",1
shum116,1696280693,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase); 
 int i = 0;
 int X = 88;

 for (int i = left; i <= right; i++) {
	 phrase[i] = 88;
 }
}
",0
shum116,1696280866,2,"void Censor(char *phrase, int left, int right)
{
     int i = 0;

 for (i = left; i <= right; i++) {
	 phrase[i] = 88;
 }
}
",1
sike083,1696640007,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
sjaf029,1696730630,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
        phrase[i] = 'X';

	}
}",1
sjai563,1696690629,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",0
sjai563,1696690710,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
sjam309,1696668287,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    char *leftposition = phrase + left;
    
    for(i = left; i <= right; i++){
        *leftposition = 'X';
        leftposition++;
    }
}
",1
sjob296,1696815062,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right)
{
    if (left < 0 || right >= strlen(str))
    {
        printf(""Invalid. \n"");
        
        return; 
    }
    
    for (int i = left; i <= right; ++i)
    {
        str[i] = 'X';
    }
}
",1
skan221,1696809967,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phase, int left, int right) {
    int i;

     
   for (int i = left; i <= right; ++i) {
            phase[i] = 'X';
}
}",0
skan221,1696810086,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phase, int left, int right) {
    int i;
    
   for (int i = left; i <= right; i++) {
            phase[i] = 'X';
    }
}",0
skan221,1696810185,3,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right) 
{
    int i;
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",0
skan221,1696810368,4,"#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right) 
{
    int i;
    
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
skea516,1696318979,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i<= right; i++) {
        phrase[i] = 'X';
    }
}",1
skmu887,1696833196,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right) {
    // Replace characters between the positions left and right with 'X'
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
skop291,1696665023,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right) {
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
skul970,1696297239,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    for (int i = left; i<=right; i++) {
        phrase[i] = 'X';
    }
}
",1
slam669,1696233198,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
slie508,1696647448,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
sluo487,1696808858,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",0
sluo487,1696808875,2,"void Censor(char *phrase, int left, int right)
{
    
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
smac708,1696299182,1,"void Censor(char *phrase, int left, int right)
{ 

int i; 
char letter = 'X'; 

// needs to step through from 6 to 8 ( 6,7,8) replacing the value in the position with an x 
   for (i = left; i < right + 1; i++) { 
    phrase[i] = letter; 
   }
}
",1
sman821,1696711887,1,"void Censor(char *phrase, int left, int right)
{
   int i;

    for (i = left; i <= right; i++) {

        phrase[i] = 'X';

    } 
}
",1
sman833,1696634980,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
smck855,1696323820,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",0
smck855,1696323852,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
smou122,1696293642,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';

    }
}
",1
smun623,1696801795,1,"void Censor(char *phrase, int left, int right)
{
  if (left < 0 || right>= strlen(phrase)) {
      
      printf(""Invalid index positions.\n"");
      
      return;
      }
      
      for (int i = left; i <= right; i++) {
          
          phrase[i] = 'X';
      }
  
}
",1
snas404,1696795084,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
	return;
}
",1
span558,1696213966,1,"void Censor(char *phrase, int left, int right)
{   int length = strlen(phrase);

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
",0
span558,1696214145,2,"void Censor(char *phrase, int left, int right)
{   for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
spar473,1696245842,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
spar820,1696816177,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    
    while (i != right + 1) {
      phrase[i] = 'X';
    i++;
  }
}
",1
srak374,1696846056,1,"void Censor(char *phrase, int left, int right)
{ 
    int length = strlen(phrase);
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}
",0
srak374,1696846831,2,"void Censor(char *phrase, int left, int right)
{  
    int len = strlen(phrase);
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}
",0
srak374,1696846921,3,"void Censor(char *phrase, int left, int right)
{  
    
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}
",1
sran136,1696759216,1,"void Censor(char* phrase, int left, int right) {
	
	int i;

	for (i = left; i <= right; i++) {
		
		phrase[i] = 'X';

	}

}",1
srou953,1696323644,1,"void Censor(char *phrase, int left, int right)
{
int j;
        for(int i=left; i<=j; i++)
        {
            phrase[i] = 'X';
        }
}
",0
srou953,1696323662,2,"void Censor(char *phrase, int left, int right)
{
int j = right;
        for(int i=left; i<=j; i++)
        {
            phrase[i] = 'X';
        }
}
",1
ssan467,1696415550,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
ssco465,1696321563,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
ssey266,1696681299,1,"void Censor(char *phrase, int left, int right)
{
 for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }   
}
",1
ssiv093,1696826208,1,"void Censor(char *phrase, int left, int right)
{
     for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}

",0
ssiv093,1696826224,2,"void Censor(char *phrase, int left, int right)
{
     for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
}
",0
ssiv093,1696826384,3,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
}
}",1
sson972,1696219865,1,"void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}

}",1
sspa275,1696369221,1,"void Censor(char *string, int left, int right)
{
    for(int i = left; i <= right; i ++){
        string[i] = 'X';
    }
}
",1
ssri357,1696297575,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    int j = right;

    for (i = left; i <= j; i++)
    {
	    phrase[i] = 'X';

    }
    
}
",1
steb012,1696297395,1,"void Censor(char *phrase, int left, int right)
{
    int i, X;
    for (i = 0; i < right; i++){
        if (i > left && i < right){
        phrase[i] = 'X';
        }
    }
}
",0
steb012,1696297412,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = 0; i < right; i++){
        if (i > left && i < right){
        phrase[i] = 'X';
        }
    }
}
",0
steb012,1696297638,3,"void Censor(char *phrase, int left, int right)
{
    int i, X;
    for (i = 0; i <= right; i++){
        if (i >= left && i <= right){
        phrase[i] = 'X';
        }
    }
}
",0
steb012,1696297652,4,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = 0; i <= right; i++){
        if (i >= left && i <= right){
        phrase[i] = 'X';
        }
    }
}
",1
stia357,1696303094,1,"void Censor(char *string, int left, int right) 
{
    if (string == NULL) {
        return; 
    }

    char *start;
    char *end;
    *start = string + left;
    *end = string + right + 1; 

    while (start < end) {
        *start = 'X';
        start++;
    }
}",0
stia357,1696303235,2,"void Censor(char *phrase, int left, int right) 
{
    if (phrase == NULL) {
        return; 
    }

    char *start;
    char *end;
    *start = phrase + left;
    *end = phrase + right + 1; 

    while (start < end) {
        *start = 'X';
        start++;
    }
}",0
stia357,1696303373,3,"void Censor(char *phrase, int left, int right) 
{
    
    if (phrase == NULL || left < 0 || right >= strlen(phrase) || left > right) {
        return; 
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
sum778,1696762842,1,"void Censor(char* phrase, int left, int right)
{
	int i = 0;
	char X;

	while (phrase[i] != '\0') {
		if (i > left - 1 && i <= right) {
			phrase[i] = 'X';
		}
		i++;
	}
}",0
sum778,1696762872,2,"void Censor(char* phrase, int left, int right)
{
	int i = 0;

	while (phrase[i] != '\0') {
		if (i > left - 1 && i <= right) {
			phrase[i] = 'X';
		}
		i++;
	}
}",1
sval918,1696455260,1,"void Censor(char *phrase, int left, int right){
    int i = left;
    int j = right;
    
    while (i<j){
        phrase[i] = 'X';
        i++;
    }
}",0
sval918,1696455442,2,"void Censor(char *phrase, int left, int right){
    int i = left;
    int j = right+1;//+1 to account for the null character
    
    while (i<j){
        phrase[i] = 'X';
        i++;
    }
}",1
swan472,1696733913,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int length = strlen(str);

    // Check if left and right indices are within the valid range
    if (left < 0 || right >= length || left > right) {
        printf(""Invalid indices\n"");
        return;
    }

    // Replace characters between left and right (inclusive) with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}

int main() {
    char censor[100] = ""ENGGEN131"";
    Censor(censor, 6, 8);
    printf(""%s\n"", censor); // Should print ""ENGGENXXX""

    return 0;
}

",0
swan472,1696733919,2,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int length = strlen(str);

    // Check if left and right indices are within the valid range
    if (left < 0 || right >= length || left > right) {
        printf(""Invalid indices\n"");
        return;
    }

    // Replace characters between left and right (inclusive) with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
sweb390,1696308812,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
    	phrase[i] = 88;
    }
}
",1
swil676,1696799946,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    for (int i = 0; i < length; i++) {
        if (i >= left && i <= right)
        phrase[i] = 'X';
    }
    
}
",1
syok443,1696209099,1,"void Censor(char *phrase, int left, int right){

    int i = left;
    while(i <= right){
        phrase[i] = 'X';
        i++;
    }
    


}",1
syua841,1696834070,1,"void Censor(char *phrase, int left, int right)
{
     for (int i = left; i <= right; i++) {
        phrase[i] = 'X'; 
     }
}
",1
szen566,1696298480,1,"void Censor(char* phrase, int left, int right)
{
	int i;

	for (i = left; i < right + 1; i++) {
		phrase[i] = 'X';
	}
}",1
szho466,1696835612,1,"void Censor(char *phrase, int left, int right)
{
    int len=strlen(phrase);

    for (int i=left; i<=right; i++){
        phrase[i]='X';
    }
}

",0
szho466,1696835665,2,"void Censor(char *phrase, int left, int right)
{

    for (int i=left; i<=right; i++){
        phrase[i]='X';
    }
}

",1
tais804,1696296793,1,"void Censor(char *phrase, int left, int right)
{
        int i;
    i = left - 1;

    for (i = left; i <= right; i++) {
        word[i] = 'X';
    }
    return;
}
",0
tais804,1696296819,2,"void Censor(char *phrase, int left, int right)
{
        int i;
    i = left - 1;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    return;
}
",1
tais804,1696671749,3,"void Censor(char *phrase, int left, int right)
{
        int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
    return;
}
",1
tbad483,1696810683,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i<=right; i++){
        phrase[i] = 'X';
    }
}
",1
tbar968,1696653757,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}

int main(void) {
    char censor[100] = ""ENGGEN131"";
Censor(censor, 6, 8);
printf(""%s\n"", censor);
}",0
tbar968,1696653804,2,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
tbar971,1696297772,1,"void Censor(char *phrase, int left, int right)
{
    	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
	return;
}
",1
tbas606,1696830724,1,"#include <stdio.h>

/*The Function Censor replaces characters between two specified indices
in a string 'X'
Author: Taha Basar
*/

void Censor(char *phrase, int left, int right) {
    // Loop through the characters between left and right (inclusive)
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X'; // Replace each character with 'X'
    }
}",1
tbed601,1696457602,1,"void Censor(char *phrase, int left, int right)
{
 int i, Length;
 Length = strlen(phrase);
 
 for (i = 0; i < Length; i++){
     if (i >= left && i <= right) {
         phrase[i] = 'X';
     }
 }
 return;
}
",1
tbri557,1696797973,1,"void Censor(char *phrase, int left, int right){
    int i, j;
    i = left;
    while(i<=right){
        phrase[i] = 'X';
        i++;
        
    }
}
",0
tbri557,1696797994,2,"void Censor(char *phrase, int left, int right){
    int i;
    i = left;
    while(i<=right){
        phrase[i] = 'X';
        i++;
        
    }
}
",1
tche867,1696802869,1,"void Censor(char *phrase, int left, int right)
{
    int counter;
	for (counter = left; counter <= right; counter++)
	{
		phrase[counter] = 'X';
	}
}
",1
tcoo725,1696748861,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++)
    {
        phrase[i] = 'X';
        
    }
} 

",1
tden200,1696846516,1,"void Censor(char *phrase, int left, int right)
{
	int i;
	for (i = left; i < right; i++) {
		phrase[i] = 'X';
	}
}
",0
tden200,1696846631,2,"void Censor(char *phrase, int left, int right)
{
	int i;
	for (i = left; i < (right+1); i++) {
		phrase[i] = 'X';
	}
}
",1
tdha392,1696844846,1,"void Censor(char *phrase, int left, int right)
{
    int index = left;
    
    while (index <= right) {
        phrase[index] = 'X';
        index++;
    }
    return 1;
}
    
",0
tdha392,1696844888,2,"void Censor(char *phrase, int left, int right)
{
    int index = left;
    
    while (index <= right) {
        phrase[index] = 'X';
        index++;
    }
}
    
",1
tdic873,1696296575,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
tdon950,1696670196,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i = 0;
    int l = strlen(phrase);
    
    for (i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
    
    return;
}",0
tdon950,1696670217,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i = 0;
    
    for (i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
    
    return;
}",1
tdu824,1696763235,1,"void Censor(char *phrase, int left, int right)
{

    char x = 88;

    for (left ; left <= right ; left++) {
        phrase[left] = x;
    }

}",0
tdu824,1696763460,2,"void Censor(char *phrase, int left, int right)
{

    char x = 88;

    for ( ; left <= right ; left++) {
        phrase[left] = x;
    }

}",1
tfai092,1696752083,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i <= right; i++) {
        phrase[i] = 'X';
    }
}  
}
",0
tfai092,1696752111,2,"void Censor(char *phrase, int left, int right) {
    
    for (int i=left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}",1
tfai653,1696297648,1,"void Censor(char *phrase, int left, int right) {
    // Define variables.
    int i;

    // Convert all values between left and right to X.
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
tfru173,1696843961,1,"void Censor(char *phrase, int left, int right)
{
    if (left < 0 || right >= strlen(phrase)) 
    {
        printf(""Invalid index positions.\n"");
        return;
    }
    
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }   
}
",1
thal182,1696210890,1,"void Censor(char *phrase, int left, int right)
{
 for (int i = left; i <= right; i++){
    phrase[i] = 'X';
}   
}
",1
thar970,1696246821,1,"void Censor(char *phrase, int left, int right){
    for(int i=left;i<=right;i++){
        *(phrase+i)='X';
    }
}",1
thid924,1696665195,1,"void Censor(char *phrase, int left, int right)
{
  for (int i = left; i <= right; i++) {

	phrase[i] = 'X';
}  
}
",1
thua238,1696652566,1,"void Censor(char *phrase, int left, int right)
{
    //replace left->right with X
    for (int i=left; i<=right; i++) {
        phrase[i] = 'X';
    }
}
",1
thut580,1696305426,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
tkan918,1696399374,1,"void Censor(char *phrase, int left, int right)
{
    //find the length of the word input
    int length = 0;
    int count = 0;
    while (phrase[length] != '\0') {
        length = length+1;
    }

    //censor the words from index left to index right
    int i = 0;
    for (i=0; i<length; i++){
            if (i >= left && i<=right)
            {
                phrase[i] = 88;
            }    
    }
}",0
tkan918,1696399393,2,"void Censor(char *phrase, int left, int right)
{
    //find the length of the word input
    int length = 0;
    while (phrase[length] != '\0') {
        length = length+1;
    }

    //censor the words from index left to index right
    int i = 0;
    for (i=0; i<length; i++){
            if (i >= left && i<=right)
            {
                phrase[i] = 88;
            }    
    }
}",1
tlal352,1696828728,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while (i >= left && i <= right){
        phrase[i]= 'X';
        i ++;
    }
}
",1
tlin438,1696329884,1,"void Censor(char *phrase, int left, int right) {
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
tlu253,1696301627,1,"void Censor(char *phrase, int left, int right)
{
    //iterate from positions left to right
    int i;
    for (i = left; i<=right; i++) {
        phrase[i] = 'X';
    }
}",1
tluu816,1696649303,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
tman942,1696646422,1,"void Censor(char *phrase, int left, int right)
{
#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int length = strlen(str);

    // Check if left and right are within valid bounds
    if (left < 0 || left >= length || right < 0 || right >= length) {
        printf(""Invalid left or right index positions.\n"");
        return;
    }

    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}    
}
",0
tman942,1696646486,2,"void Censor(char *phrase, int left, int right)

#include <stdio.h>
#include <string.h>

{
    int length = strlen(str);

    // Check if left and right are within valid bounds
    if (left < 0 || left >= length || right < 0 || right >= length) {
        printf(""Invalid left or right index positions.\n"");
        return;
    }

    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}    
}
",0
tman942,1696646596,3,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    int length = strlen(str);

    // Check if left and right are within valid bounds
    if (left < 0 || left >= length || right < 0 || right >= length) {
        printf(""Invalid left or right index positions.\n"");
        return;
    }

    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",1
tmcl219,1696404264,1,"void Censor(char *phrase, int left, int right)
{
        for (int i=left; i<=right; i++) {
            phrase[i] = 'X';
    }
    
    return;
}
",1
tmen190,1696217777,1,"/* Censor changes letters of portions of a string to ""X"" */

void Censor(char *phrase, int left, int right) {
	for (int i = left; i <= right; i++)
	{
		phrase[i] = 'X';
	}
}",1
tmir110,1697174019,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i < right + 1; i++) {
        phrase[i] = 'X';
    }
    
}",1
tmun974,1696642839,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i<=right; i++){
    phrase[i]='X';
}
}
",1
tpan328,1696291435,1,"void Censor(char *phrase, int left, int right)
{
   for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}
",1
tpat456,1696211789,1,"void Censor(char *phrase, int left, int right)
{
  int i;
  for (i = left; i <= right; i++ ) {
    phrase[i] = 'X';
  }
    
}
",1
tpil529,1696378080,1,"void Censor(char *phrase, int left, int right)
{
   int i = 0;
   int j = 0;
   j = right;

   for  (i = left; i <= j; i++){

    phrase[i] ='X';


   }
return;
}
",1
tpra228,1696828872,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}
",1
tpur744,1696239427,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left;i<=right;i++){
        phrase[i] = 'X';
    }
    
}
",1
tqhu735,1696227897,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
tron042,1696306848,1,"void Censor(char *phrase, int left, int right) {
    if (left < 0 || right < 0 || left >= right) {
        printf(""Invalid indices position within the string\n"");
        return;
    }
    int i; 
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",0
tron042,1696307022,2,"void Censor(char *phrase, int left, int right) {
    int i; 
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
tsan986,1696304107,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
tsin304,1696750030,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = (char)88;
        
    }
    
    
    
}
",1
ttho505,1696724638,1,"void Censor(char *phrase, int left, int right)
{
for (int i = left; i <= right; i++) {
	phrase[i] = 'X';
}
return phrase;
}
",0
ttho505,1696724815,2,"void Censor(char *phrase, int left, int right)
{
for (int i = left; i <= right; i++) {
	phrase[i] = 'X';
}
}
",1
ttho743,1696301247,1,"void Censor(char *phrase, int left, int right)
{
char X;
int j = 0;
for(j = left; j <= right; j++)
{
 phrase[j] = 'X';
}

}
",0
ttho743,1696301272,2,"void Censor(char *phrase, int left, int right)
{
int j = 0;
for(j = left; j <= right; j++)
{
 phrase[j] = 'X';
}

}
",1
twad520,1696848063,1,"#include <stdio.h>
#include <stdlib.h>


void Censor(char* phrase, int left, int right){

	for (int i = left; i <= right; i++) {

		phrase[i] = 'X';

	}
	return phrase;

}
",0
twad520,1696848080,2,"#include <stdio.h>
#include <stdlib.h>


char Censor(char* phrase, int left, int right){

	for (int i = left; i <= right; i++) {

		phrase[i] = 'X';

	}
	return phrase;

}
",0
twad520,1696848122,3,"#include <stdio.h>
#include <stdlib.h>


void Censor(char* phrase, int left, int right){

	for (int i = left; i <= right; i++) {

		phrase[i] = 'X';

	}
	

}",1
twol698,1696320649,1,"void Censor(char *phrase, int left, int right)
{
    int i = left; 
    int strlength = strlen(phrase);
    while ((i>=left)&(i<=right)){
        phrase[i] = 'X';
        i++;
    }
}
",0
twol698,1696320689,2,"void Censor(char *phrase, int left, int right)
{
    int i = left; 
    while ((i>=left)&(i<=right)){
        phrase[i] = 'X';
        i++;
    }
}
",1
tyou333,1696230534,1,"void Censor(char *phrase, int left, int right) {
    for (int i = left; i < right + 1; i++) {
        phrase[i] = 'X';
    }
}",1
tyou421,1696451867,1,"void Censor(char *phrase, int left, int right)
{
      /*This function censors a string starting from the specified
	  character, until a second specified character.

	 Inputs:
			phrase: A string that will be censored.
			left: The index indicating which character to start censoring from.
			right: The index indicating which character to stop censoring at.

	 Outputs:
			None.
	 
	 Author: Toma Yousif*/


	// Iterate through the array starting from the specified starting index,
	// and ending at the specified ending index.
	for (int i = left; i < right + 1; i++)
	{
		// For every iteration, replace the character indexed with 'X'.
		phrase[i] = 'X';
	}
}",1
tzha578,1696206339,1,"#include<string.h>
#include<stdio.h>

void Censor(char *string, int left, int right)
{
    for(int i = left;i<=right;i++){
        string[i] = 'X';
    }
}",1
tzho903,1696312806,1,"void Censor(char *phrase, int left, int right)
{
    int numcensor = right - left + 1;
    char letter = 'X';
    int i;
    for (i = left; i <= right; i++) { 
        phrase[i] = letter; 
    }
}",0
tzho903,1696312855,2,"void Censor(char *phrase, int left, int right)
{
    char letter = 'X';
    int i;
    for (i = left; i <= right; i++) { 
        phrase[i] = letter; 
    }
}",1
uali517,1696712705,1,"void Censor(char *phrase, int left, int right)
{
    int temp;
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",0
uali517,1696712860,2,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
ujai264,1696665477,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++ )
        if (phrase[i] != '\0') {
            phrase[i] = 'X';
        }
}
",1
vbar374,1696816358,1,"#include <stdio.h>
#include <string.h>

void Censor(char *str, int left, int right) {
    if (left < 0 || right >= strlen(str)) {
        printf(""Error: Invalid index positions.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
vkap589,1696388896,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i <= right; i++) {
        phrase[i] = 'X';
    }
    
}
",1
vlai276,1696823698,1,"void Censor(char *phrase, int left, int right) {
    
    for ( int i = left; i <= right; i++) {
        phrase[i] = (char){88};
    }
}
",1
vpat188,1696798760,1,"void Censor(char *phrase, int left, int right){
    
    int i, X;
    
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}",0
vpat188,1696798773,2,"void Censor(char *phrase, int left, int right){
    
    int i;
    
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}",1
vpol480,1696837583,1,"void Censor(char* phrase, int left, int right) {
    int pos = 0;

    while (phrase[pos] != '\0') {
        pos++;
    }

    if (left < 0 || right < 0 || left >= pos || right >= pos) {
        printf(""Invalid indices.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}

int main() {
    char censor[100] = ""ENGGEN131"";
    Censor(censor, 6, 8);
    printf(""%s\n"", censor);
    return 0;
}
",0
vpol480,1696839647,2,"void Censor(char* phrase, int left, int right) {
    int pos = 0;

    while (phrase[pos] != '\0') {
        pos++;
    }

    if (left < 0 || right < 0 || left >= pos || right >= pos) {
        printf(""Invalid indices.\n"");
        return;
    }

    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
vwon573,1696729877,1,"void Censor(char* phrase, int left, int right) {
    // Check if the provided indices are valid
    if (left < 0 || right < 0 || left > right) {
        printf(""Invalid indices.\n"");
        return;
    }

    int length = strlen(phrase);

    // Check if the indices are within the string's bounds
    if (left >= length || right >= length) {
        printf(""Indices out of bounds.\n"");
        return;
    }

    // Replace characters between left and right with 'X'
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
vwu693,1696736432,1,"#define _CRT_SECURE_NO_WARNINGS_
#include <stdio.h>
#include <string.h>
void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
vxie208,1696389318,1,"void Censor(char* phrase, int left, int right) {
	int i = 0;

	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}

}",1
wany079,1696596433,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
wany722,1696382971,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i < right + 1; i++){
        phrase[i] = 'X';
    }
}
",1
wany843,1696373958,1,"void Censor(char *phrase, int left, int right)
{
    for(int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
wany897,1696384024,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
	int j = right;
	while (i <= j)
	{
		phrase[i] == 'X';
		i++;
	}
}
",0
wany897,1696384087,2,"void Censor(char *phrase, int left, int right)
{
	int i = left;
	int j = right;
	while (i <= j)
	{
		phrase[i] = 'X';
		i++;
	}
}
",1
wany932,1696808169,1,"void Censor(char *phrase, int left, int right)
{ 
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",0
wany932,1696808185,2,"void Censor(char *phrase, int left, int right){ 
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}
",0
wany932,1696808235,3,"void Censor(char* str, int left, int right) {
    for (int i = left; i <= right; i++) {
        str[i] = 'X';
    }
}",1
wkev690,1696385680,1,"void Censor(char *phrase, int left, int right){
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
wli798,1696300209,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
        }
}",1
wlin709,1696830296,1,"#include <stdio.h>

void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
wliy226,1696833416,1,"void Censor(char *phrase, int left, int right) {
    if (left > -1 ) { // checks if the left index is negative or positive
        if (left <= right) { // assuming left is less than the value of right
            if (right < strlen(phrase)){ //checks if the right index is within the phrase length
                for (int i=left; i<=right; i++) { //move through the loop and censor the variables with X
                    phrase[i] = 'X'; //censors the characters with 'X'
                }
            }    
        }
    }
}

",1
wmas516,1696211925,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right;i++) {
		*(phrase+i) = 'X';
	}
	return 0;
}
",0
wmas516,1696211930,2,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right;i++) {
		*(phrase+i) = 'X';
	}
}
",1
wste800,1696825769,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    } 
}
",1
wwan296,1696297505,1,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

void Censor(char* phrase, int left, int right)
{
	while (left <= right) {
		phrase[left] = 'X';
		left++;
	}
}",1
wwon485,1696234689,1,"void Censor(char *phrase, int left, int right){
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}
",1
wwu295,1696671526,1,"void Censor(char* phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
wyan309,1696670715,1,"void Censor(char *phrase, int left, int right)
{
    for (int index=left; index!=right+1; index++){
        phrase[index]='X';
    }
}
",1
wyu523,1696373066,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; left<=right;i++){
        phrase[i]='X';
    }
}

",0
wyu523,1696404134,2,"void Censor(char *phrase, int left, int right)
{
    for (int i=left; i<=right;i++){
        phrase[i]='X';
    }
}
",1
wyua331,1696836045,1,"void Censor(char *phrase, int left, int right)
{
   int i=0;
   while(left<=right)
   {
       phrase[left]='X';
       left++;
   }
}
",0
wyua331,1696836068,2,"void Censor(char *phrase, int left, int right)
{
   while(left<=right)
   {
       phrase[left]='X';
       left++;
   }
}
",1
wzha508,1696749815,1,"void Censor(char* phrase, int left, int right)
{
	int i ;
	for (i = left; i <= right; i++) {
		phrase[i] = 'X';
	}

}",1
xche362,1696817932,1,"void Censor(char *phrase, int left, int right)
{
    int j;
    
    j= strlen(phrase);
    for (int i = 1; i < j; i++){
        if ( i>= left && i <= right) {
            phrase[i]= 'X';
        }
    }
}
",0
xche362,1696818017,2,"void Censor(char *phrase, int left, int right)
{
    int j;
    
    j= strlen(phrase);
    for (int i = 0; i < j; i++){
        if ( i>= left && i <= right) {
            phrase[i]= 'X';
        }
    }
}
",1
xche933,1696847835,1,"void Censor(char *phrase, int left, int right)
{   
    int i=0;
    while(phrase[i] != '\0')
    for (i=left; i<=right; i++) {
    phrase[i] = x;
    }
    i++;
}
",0
xche933,1696847852,2,"void Censor(char *phrase, int left, int right)
{   
    int i=0;
    char x;
    while(phrase[i] != '\0')
    for (i=left; i<=right; i++) {
    phrase[i] = x;
    }
    i++;
}
",0
xkan320,1696538214,1,"void Censor(char *phrase, int left, int right)
{
    while(left <= right){
        phrase[left] = 'X';
        left++;
    }
}",1
xli330,1696411088,1,"void Censor(char *phrase, int left, int right) {
    
    // Loop from left (inclusive) to right (inclusive).
    for (;left <= right; left++) {
        phrase[left] = 'X';
    }
}",1
xlia603,1696729671,1,"
void Censor(char *phrase, int left, int right)
{
    int i;
    for(i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    return;
}",1
xmet073,1696805526,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right){
  int i;
  for (i =left; i <=right; i++){
     phrase[i] = 'X';
  }
}
",1
xsny378,1696664861,1,"void Censor(char *phrase, int left, int right)
{
    int i = left;
    while(i>=left && i<= right){
    phrase[i] = 'X' ; 
    i++; 
    } 
    
  
}
",1
xtan207,1696804562,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    int i_l = left;
    int i_r = right;
    while (i_l <= i_r){
        phrase[i_l] = 'X';
        i_l++;
    }
}
",0
xtan207,1696804574,2,"void Censor(char *phrase, int left, int right)
{
    int i_l = left;
    int i_r = right;
    while (i_l <= i_r){
        phrase[i_l] = 'X';
        i_l++;
    }
}
",1
xugn489,1696252187,1,"void Censor(char *phrase, int left, int right)
{
    	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}",1
yayo322,1696742710,1,"void Censor(char *phrase, int left, int right)
{
    int i = 0; 
    while (phrase[i] != '\0') {
        if (i == left) {
            while (i <= right) {
                phrase[i] = 'X'; 
                i++; 
            }
        }
        i++; 
    }
}
",1
ybha528,1696760497,1,"void Censor(char *phrase, int left, int right)
{
	int length = strlen(phrase);

	for (int i = left; i <= right; i++) {
		phrase[i] = 'X'
	}
} 
",0
ybha528,1696760560,2,"void Censor(char *phrase, int left, int right)
{
	int length = strlen(phrase);

	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
} 
",0
ybha528,1696760914,3,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
} 
",1
ycho749,1696662060,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) 
    {
        str[i] = 'X';
    }
}",0
ycho749,1696662262,2,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) 
    {
        phrase[i] = 'X';
    }
}",1
ycho760,1696761233,1,"void Censor(char *phrase, int left, int right)
{
    int i;
	char X;
	for (i = left; i <= right; i++) {
		phrase[i] = (char){ 88 };
	}
}
",0
ycho760,1696761255,2,"void Censor(char *phrase, int left, int right)
{
    int i;
	for (i = left; i <= right; i++) {
		phrase[i] = (char){ 88 };
	}
}
",1
ydai729,1696842647,1,"void Censor(char *phrase, int left, int right)
{
 int len = strlen(phrase);

    // Ensure left and right indices are within valid bounds
    if (left >= 0 && left < len && right >= 0 && right < len) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    } else {
        printf(""Invalid index positions.\n"");
    }
}

int main() {
    char inputString[] = ""This is a test sentence"";
    int left = 5; // Left index position
    int right = 10; // Right index position

    printf(""Before Censoring: %s\n"", inputString);
    Censor(inputString, left, right);
    printf(""After Censoring: %s\n"", inputString);

    return 0;   
}
",0
ydai729,1696842655,2,"void Censor(char *phrase, int left, int right)
{
 int len = strlen(phrase);

    // Ensure left and right indices are within valid bounds
    if (left >= 0 && left < len && right >= 0 && right < len) {
        for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    } else {
        printf(""Invalid index positions.\n"");
    }
}

",1
ydar075,1696817933,1,"void Censor(char *phrase, int left, int right)
{
    int i; 
    int length = strlen(phrase);
    for (i = left; i <= right; i++) {
    	phrase[i] = 'X'; 
    }
    return;
}",0
ydar075,1696817957,2,"void Censor(char *phrase, int left, int right)
{
    int i; 
    for (i = left; i <= right; i++) {
    	phrase[i] = 'X'; 
    }
    return;
}",1
yfan919,1696744749,1,"void Censor(char *phrase, int left, int right)
{
    int len = strlen(*phrase);
    int a = left;
    while(a < right){
        phrase[a] = X;    
        a++;
    }
}
",0
yfan919,1696744761,2,"void Censor(char *phrase, int left, int right)
{
    int len = strlen(phrase);
    int a = left;
    while(a < right){
        phrase[a] = X;    
        a++;
    }
}
",0
yfan919,1696744777,3,"void Censor(char *phrase, int left, int right)
{
    int a = left;
    while(a < right){
        phrase[a] = X;    
        a++;
    }
}
",0
yfan919,1696744783,4,"void Censor(char *phrase, int left, int right)
{
    int a = left;
    while(a < right){
        phrase[a] = 'X';    
        a++;
    }
}
",0
yfan919,1696744795,5,"void Censor(char *phrase, int left, int right)
{
    int a = left;
    while(a < right-1){
        phrase[a] = 'X';    
        a++;
    }
}
",0
yfan919,1696744803,6,"void Censor(char *phrase, int left, int right)
{
    int a = left;
    while(a < right+1){
        phrase[a] = 'X';    
        a++;
    }
}
",1
yfen481,1696390921,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i=left;i<=right;i++){
        phrase[i]='X';
    }
}",1
yhaf839,1696221949,1,"#include <string.h>
#include <stdio.h>


void Censor(char *phrase, int left, int right)
{
    int length=strlen(phrase);
    int i,j;
    
    for(i=left, j=right+1;i<j;i++){
    phrase[i]='X';
        
    }
}


",0
yhaf839,1696222101,2,"#include <string.h>
#include <stdio.h>


void Censor(char *phrase, int left, int right)
{
 
    int i,j;
    
    for(i=left, j=right+1;i<j;i++){
    phrase[i]='X';
        
    }
}

",1
yilm466,1696847071,1,"void Censor(char *phrase, int left, int right)
{
        for (int i = left; i <= right; i++) {
        str[i] = 'X';
}
",0
yilm466,1696847085,2,"void Censor(char *phrase, int left, int right)
{
        for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
}
",0
yilm466,1696847094,3,"void Censor(char *phrase, int left, int right)
{
        for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
}
}
",1
yjun129,1696230452,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
	phrase[i] = 'X';
}
}
",1
ykwa219,1696726945,1,"void Censor(char *phrase, int left, int right)
{
    	for (left; left <= right; left++) {
		phrase[left] = 'X';
	}
}
",0
ykwa219,1696726967,2,"void Censor(char* phrase, int left, int right) {

	for (left; left <= right; left++) {
		phrase[left] = 'X';
	}
}
",0
ykwa219,1696727722,3,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
ylee818,1696814845,1,"#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int i;
    for(i=left; i<=right; i++){
        phrase[i] = 'X';
    }
}
",1
yrah128,1696448877,1,"#include <stdio.h>



void Censor(char *phrase, int left, int right) {
    for (int i = left; i<=right; i++){
        phrase [i] = 'X';
        
    }
}
",1
ysun512,1696249255,1,"void Censor(char *phrase, int left, int right)
{   
    for (int i = left; i <= right; i++) {
            string[i] = 'X';
        }
    
}
",0
ysun512,1696249300,2,"void Censor(char *phrase, int left, int right)
{   
    for (int i = left; i <= right; i++) {
            phrase[i] = 'X';
        }
    
}
",1
ytho155,1696223341,1,"#include <stdio.h>


void Censor(char *phrase, int left, int right)
{
   int i=left;
	for (i=left; i<=right; i++){
		phrase[i]=88;
	}
}
",1
ytse120,1696237235,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
yxie884,1696296240,1,"//the Censor function replaces all characters that lie between index positions “left” and “right” (inclusive) in the string with the character ‘X'
//Author: Jessica Xie

#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    //initialising the variables
    int i, length;
    length = strlen(phrase);
    
    //by using a for loop to switch out the required characters with 'X'
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",0
yxie884,1696296253,2,"//the Censor function replaces all characters that lie between index positions “left” and “right” (inclusive) in the string with the character ‘X'
//Author: Jessica Xie

#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    //initialising the variables
    int i;
    
    //by using a for loop to switch out the required characters with 'X'
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}",1
yyin299,1696423700,1,"#include <stdio.h>
void Censor(char *phrase, int left, int right)
{
        int i;
    for (i = left; i < right + 1; i++)
    {
        phrase[i] = 'X';
    }
}
",1
yyin440,1696309156,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right && i <= strlen (phrase); i++) {
        phrase[i] = 'X';
    }
}
",1
yzhe520,1696373176,1,"void Censor(char *phrase, int left, int right)
{int i;
//use a for loop to replace all the digits in between the indices (inclusive) with the character X
for (i = left; i <= right; i++) {
    phrase[i] = 'X';
}
    
}
",1
zche975,1696838312,1,"void Censor(char *phrase, int left, int right) {
 for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}",1
zcol623,1696328197,1,"//Author:zcol623
void Censor(char* phrase, int left, int right)
{
	//Loop through characters of the string starting at the indicated left position and ending at the right
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';//Replace characters of the string within that index range with X
	}
}",1
zcra120,1696727669,1,"   void Censor(char *phrase, int left, int right)
{
int i ;
for (i=left;i<=right;i++){
phrase[i] = 'X';
}
return phrase;
}
   
   
   
   
 ",0
zcra120,1696728341,2,"#include <stdio.h>
#include <string.h>
   
   void Censor(char *phrase, int left, int right)
{
int i ;
for (i=left;i<=right;i++){
phrase[i] = 'X';
}

}",1
zfu276,1696644704,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
    phrase[i] = 'X';
    }
    
}
",1
zgab423,1696824874,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    int length;
    length = strlen(phrase);
    
    for (i = left; i <= right; i++ ) {
        phrase[i] = 'X';
    }
}
",0
zgab423,1696824949,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    
    for (i = left; i <= right; i++ ) {
        phrase[i] = 'X';
    }
}
",1
zgar110,1696817763,1,"void Censor(char *phrase, int left, int right) {

    if (phrase == NULL || left < 0 || right < 0 || left >= strlen(phrase) || right >= strlen(phrase) || left > right) {
        printf(""Invalid input\n"");
        return;
    }


    for (int i = left; i <= right; i++) {
       phrase[i] = 'X';
    }
}",1
zgas053,1696841337,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++)
    {
       phrase[i] = X
    }
    return
}
",0
zgas053,1696841352,2,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++)
    {
       phrase[i] = 'X'
    }
    return
}
",0
zgas053,1696841367,3,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++)
    {
       phrase[i] = 'X';
    }
    return;
}
",1
zgin653,1696209469,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++){
        phrase[i] = 'X';
    }
    
}",1
zguo839,1696805387,1,"#include <stdio.h>
#include <string.h>

void Censor(char *string, int left_char, int right_char) {
    for (int i = left_char; i <= right_char; i++) {
        string[i] = 'X';
    }
}
",1
zhon780,1696305161,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++)
    {
        phrase[i] = 'X';
    }
}",1
zliu381,1696679133,1,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; i >= left & i <= right; i++) {
		phrase[i] = 'X';
	}
}",0
zliu381,1696680382,2,"void Censor(char* phrase, int left, int right)
{
	int i;
	for (i = left; (i >= left) & (i <= right); i++) {
		phrase[i] = 'X';
	}
}",1
zliu578,1696644950,1,"void Censor(char *phrase, int left, int right)
{
	for (int i = left; i <= right; i++) {
		phrase[i] = 'X';
	}
}
",1
zpen457,1696753243,1,"void Censor(char *phrase, int left, int right)
{
    int i;
    for (i = left; i <= right; i++){
        phrase[i] = 'X';
    }
}
",1
zqia091,1696821395,1,"void Censor(char *ph, int l, int r) 
{
    if (ph==NULL || l<0||r>=strlen(ph)||l>r) 
    {
        return;
    }

    for (int i=l;i<=r;i++) 
    {
        ph[i] ='X';
    }
}",1
zshi453,1696212897,1,"#include <stdio.h>
 

void Censor(char *phrase, int left, int right)
{
    int rightplusone = right + 1;
    int i;
    for (i = left; i<rightplusone; ++i)
    {
        phrase[i] = 'X';
    }
}",1
zvor566,1696739385,1,"void Censor(char *phrase, int left, int right)
{
   int i;
for (i = left; i <= right; i++) {
	phrase[i] = 'X';
} 
}
",1
zwan373,1696385915,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{   
    int i;
    for(int i=left;i<=right;i++){
    phrase[i]='X';
    }
}",0
zwan373,1696385939,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{   
    for(int i=left;i<=right;i++)
    {
    phrase[i]='X';
    }
}",1
zwil198,1696638709,1,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i = 0;
    
    if(left < 0 || right >= length) {
        printf(""Postions Are Invalid"");
       
        return;
    }
    
    
    for(i = left; i = right; i++) {
        
        phrase[i] = 'X';
        
    }
    
    
}",0
zwil198,1696638768,2,"#include <stdio.h>
#include <string.h>

void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i = 0;
    
    if(left < 0 || right >= length) {
        printf(""Postions Are Invalid"");
       
        return;
    }
    
    
    for(i = left; i <= right; i++) {
        
        phrase[i] = 'X';
        
    }
    
}",1
zwon694,1696303433,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 88;
    }
}
",1
zwu591,1696661883,1,"void Censor(char *phrase, int left, int right)
{
    int i;

    for (i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
}
",1
zyah987,1696547293,1,"void Censor(char *text, int start, int end) 
{
    int pos = start;
    do {
        text[pos++] = 'X';
    } while (pos <= end);
}
",1
zyao804,1696212047,1,"void Censor(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    for (int i=left;i<=right;i++)
    {
        phrase[i]='X';
    }
}",0
zyao804,1696212176,2,"void Censor(char *phrase, int left, int right)
{

    for (int i=left;i<=right;i++)
    {
        phrase[i]='X';
    }
}
",1
zyu100,1696390915,1,"void Censor(char *phrase, int left, int right)
{
    for (int i=left;i<=right;i++){
        phrase[i]='X';
        
    } 
}
",1
zzho965,1696798122,1,"void Censor(char *phrase, int left, int right)
{
    for (int i = left; i <= right; i++) {
        phrase[i] = 'X';
    }
} 

",1
zzol692,1696734927,1,"//The function should replace all characters that lie between index positions “left” and “right” (inclusive) in the string with the character ‘X’
//Author: Zara Zoll
void Censor(char *phrase, int left, int right) {
    int length = strlen(phrase);

    int i = left; //intialises i and goes through phrase
    while (i <= right) { 
        phrase[i] = 'X'; // replaces characters the characters within left and right with X
        i++;
    }
}",0
zzol692,1696735077,2,"//The function should replace all characters that lie between index positions “left” and “right” (inclusive) in the string with the character ‘X’
//Author: Zara Zoll
void Censor(char *phrase, int left, int right) {

    int i = left; //intialises i and goes through phrase
    while (i <= right) { 
        phrase[i] = 'X'; // replaces characters the characters within left and right with X
        i++;
    }
}",1
