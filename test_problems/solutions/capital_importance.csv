upi,time,try,answer,rawfraction
aahk798,1696301690,1,"void Capitalise(char *phrase)
{
     int lengthofinput;  
    lengthofinput= strlen(phrase);
   if (phrase[0]>='a' && phrase[0]<='z'){ 
            phrase[0]=(char)(phrase[0]-('a'-'A'));
        }
    int i; 
	for (i=0; i<lengthofinput; i++) { 
        if (phrase[i]==' ') { 
            phrase[i+1]=(char)(phrase[i+1]-('a'-'A'));
        }
    }
    
}
",0
aahk798,1696302020,2,"void Capitalise(char *phrase)
{
     int lengthofinput;  
    lengthofinput= strlen(phrase);
   if (phrase[0]>='a' && phrase[0]<='z'){ 
            phrase[0]=(char)(phrase[0]-('a'-'A'));
        }
    int i; 
	for (i=0; i<lengthofinput; i++) { 
        if (phrase[i]==' ') { 
            if(phrase[i+1]>='a' && phrase[i+1]<='z'){
            phrase[i+1]=(char)(phrase[i+1]-('a'-'A'));
        }
        }
    }
}
",1
aakm278,1696833140,1,"void Capitalise(char *phrase)
{
    	int Len = strlen(phrase);
	int i = 0;

	if (phrase[0] >= 97 && phrase[0] <= 122)
	{
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	while (i < Len)
	{
		if (phrase[i] == 32)
		{
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')
			{
				phrase[i+1] = phrase[i+1] - ('a' - 'A');
			}
		}
		i++;
	}
}
",1
aana675,1696718818,1,"#include <stdio.h>
#include <stdbool.h>

bool IsLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char* phrase) {
    bool new_word = true; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        
        if (IsLowercaseAlphabet(phrase[i]) && new_word) {
            
            phrase[i] = phrase[i] - ('a' - 'A');
            new_word = false; 
        }
       
        else if (!IsLowercaseAlphabet(phrase[i])) {
            new_word = true;
        }
    }
}
",0
aana675,1696719305,2,"#include <stdio.h>
#include <stdbool.h>


void Capitalise(char* input) {
    bool new_word = true; 

    for (int i = 0; input[i] != '\0'; i++) {
       
        if ((isalpha(input[i]) && new_word) || i == 0) {
            .
            input[i] = toupper(input[i]);
            new_word = false; 
        }
        
        else if (!isalpha(input[i])) {
            new_word = true;
        }
    }
}",0
aana675,1696719416,3,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h> 


void Capitalise(char* input) {
    bool new_word = true; 

    for (int i = 0; input[i] != '\0'; i++) {
        
        if ((isalpha(input[i]) && new_word) || i == 0) {
            
            input[i] = toupper((unsigned char)input[i]);
            new_word = false; 
        }
        
        else if (!isalpha(input[i])) {
            new_word = true;
        }
    }
}",0
aana675,1696719754,4,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h> 

void Capitalise(char* input) {
    bool new_word = true; 


    for (int i = 0; input[i] != '\0'; i++) {
        
        
        if ((isalpha(input[i]) && new_word) || i == 0) {
            
            
            input[i] = toupper((unsigned char)input[i]);
            new_word = false; 
        } else if (!isalpha(input[i])) {
            new_word = true;
        }
    }
}
",0
aana675,1696719882,5,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h> 

void Capitalise(char* input) {
    bool new_word = true; 


    for (int i = 0; input[i] != '\0'; i++) {
        
        if ((isalpha(input[i]) && new_word) || i == 0) {
            
            
            input[i] = toupper((unsigned char)input[i]);
            new_word = false; 
        } else if (!isalpha(input[i])) {
            new_word = true;
        }
    }
}",0
aana675,1696819842,6,"void Capitalise(char *input)
{
    int i = 0;
    while (input[i] != '\0') {
        if ((input[i] >= 'a' && input[i] <= 'z') && (i==0 || input[i-1] ==' ')) {
            input[i] = input[i] - 32;
            while (input[i] != ' ') {
                i++;
            }
        }
        else {
            i++;
        }
    }
    
}",1
aaza463,1696212390,1,"void Capitalise(char *phrase)
{
    int length;

    length = strlen(phrase);

    for (int i = 0; i < length; i++){

        if (phrase[i] >= 'a' && phrase[i] <= 'z' && ((i == 0) || (phrase[i-1] == 32))){
            phrase[i] = phrase[i] - ('a' - 'A'); 
        }
    }

}
",1
aazh582,1696832598,1,"void Capitalise(char str[]) {
    int isNewWord = 1;  // to identify the start of a new word. 1 for yes, 0 for no

    for (int i = 0; str[i] != '\0'; i++) {
        if (isNewWord && str[i] >= 97 && str[i] <= 122) {
            str[i] = toUpperCase(str[i]);
            isNewWord = 0;
        }
        else if (str[i] == ' ') {
            isNewWord = 1;
        }
        else {
            isNewWord = 0;
        }
    }
}

int main() {
    char phrase1[100] = ""god of nations at thy feet"";
    Capitalise(phrase1);
    printf(""%s\n"", phrase1);  // Output: God Of Nations At Thy Feet

    char phrase2[100] = ""zzzzz"";
    Capitalise(phrase2);
    printf(""%s\n"", phrase2);  // Output: Zzzzz

    return 0;
}
",0
aazh582,1696832688,2,"#include <stdio.h>

// Forward declaration of the helper function
char toUpperCase(char ch);

void Capitalise(char str[]) {
    int isNewWord = 1;  // to identify the start of a new word. 1 for yes, 0 for no

    for (int i = 0; str[i] != '\0'; i++) {
        if (isNewWord && str[i] >= 97 && str[i] <= 122) {
            str[i] = toUpperCase(str[i]);
            isNewWord = 0;
        }
        else if (str[i] == ' ') {
            isNewWord = 1;
        }
        else {
            isNewWord = 0;
        }
    }
}

// Helper function to convert a lower case character to upper case
char toUpperCase(char ch) {
    if (ch >= 97 && ch <= 122) {  // check if the character is a lowercase letter
        return ch - 32;  // convert it to uppercase
    }
    return ch;  // if it's not a lowercase letter, return it unchanged
}

int main() {
    char phrase1[100] = ""god of nations at thy feet"";
    Capitalise(phrase1);
    printf(""%s\n"", phrase1);  // Output: God Of Nations At Thy Feet

    char phrase2[100] = ""zzzzz"";
    Capitalise(phrase2);
    printf(""%s\n"", phrase2);  // Output: Zzzzz

    return 0;
}
",0
aazh582,1696832964,3,"#include <stdio.h>

// Forward declaration of the helper function
char toUpperCase(char ch);

void Capitalise(char str[]) {
    int isNewWord = 1;  // to identify the start of a new word. 1 for yes, 0 for no

    for (int i = 0; str[i] != '\0'; i++) {
        if (isNewWord && str[i] >= 97 && str[i] <= 122) {
            str[i] = toUpperCase(str[i]);
            isNewWord = 0;
        }
        else if (str[i] == ' ') {
            isNewWord = 1;
        }
        else {
            isNewWord = 0;
        }
    }
}

// Helper function to convert a lower case character to upper case
char toUpperCase(char ch) {
    if (ch >= 97 && ch <= 122) {  // check if the character is a lowercase letter
        return ch - 32;  // convert it to uppercase
    }
    return ch;  // if it's not a lowercase letter, return it unchanged
}

    char phrase1[100] = ""god of nations at thy feet"";
    Capitalise(phrase1);
    printf(""%s\n"", phrase1);  // Output: God Of Nations At Thy Feet

    char phrase2[100] = ""zzzzz"";
    Capitalise(phrase2);
    printf(""%s\n"", phrase2);  // Output: Zzzzz

    return 0;

",0
aazh582,1696833106,4,"#include <stdio.h>

// Forward declaration of the helper function
char toUpperCase(char ch);

void Capitalise(char str[]) {
    int isNewWord = 1;  // to identify the start of a new word. 1 for yes, 0 for no

    for (int i = 0; str[i] != '\0'; i++) {
        if (isNewWord && str[i] >= 97 && str[i] <= 122) {
            str[i] = toUpperCase(str[i]);
            isNewWord = 0;
        }
        else if (str[i] == ' ') {
            isNewWord = 1;
        }
        else {
            isNewWord = 0;
        }
    }
}

// Helper function to convert a lower case character to upper case
char toUpperCase(char ch) {
    if (ch >= 97 && ch <= 122) {  // check if the character is a lowercase letter
        return ch - 32;  // convert it to uppercase
    }
    return ch;  // if it's not a lowercase letter, return it unchanged
}

int main() {
    char phrase1[100] = ""god of nations at thy feet"";
    Capitalise(phrase1);
    printf(""%s\n"", phrase1);  // Output: God Of Nations At Thy Feet

    char phrase2[100] = ""zzzzz"";
    Capitalise(phrase2);
    printf(""%s\n"", phrase2);  // Output: Zzzzz

    return 0;
}
",0
aazh582,1696833773,5,"#include <stdio.h>

// Forward declaration of the helper function
char toUpperCase(char ch);

void Capitalise(char str[]) {
    int isNewWord = 1;  // to identify the start of a new word. 1 for yes, 0 for no

    for (int i = 0; str[i] != '\0'; i++) {
        if (isNewWord && str[i] >= 97 && str[i] <= 122) {
            str[i] = toUpperCase(str[i]);
            isNewWord = 0;
        }
        else if (str[i] == ' ') {
            isNewWord = 1;
        }
        else {
            isNewWord = 0;
        }
    }
}

// Helper function to convert a lower case character to upper case
char toUpperCase(char ch) {
    if (ch >= 97 && ch <= 122) {  // check if the character is a lowercase letter
        return ch - 32;  // convert it to uppercase
    }
    return ch;  // if it's not a lowercase letter, return it unchanged
}
",1
abha257,1696232573,1,"void Capitalise(char* phrase)
{
	int length;
	int i;
	length = strlen(phrase);
	for (i = 0; i < length; i++) {
		if (phrase[i] == phrase[0]) {
			if (phrase[0] <= 122) {
				phrase[0] = phrase[0] - 32;
			}
		}
		else if (phrase[i] <= 122) {
			if (phrase[i - 1] == ' ') {
				phrase[i] = phrase[i] - 32;
			}
		}
	}
}",0
abha257,1696232698,2,"void Capitalise(char* phrase)
{
	int length;
	int i;
	length = strlen(phrase);
	for (i = 0; i < length; i++) {
		if (phrase[i] == phrase[0]) {
			if (phrase[0] <= 122 && phrase[0] >= 97) {
				phrase[0] = phrase[0] - 32;
			}
		}
		else if (phrase[i] <= 122 && phrase[i] >= 97) {
			if (phrase[i - 1] == ' ') {
				phrase[i] = phrase[i] - 32;
			}
		}
	}
}",1
abro522,1696222679,1,"void Capitalise(char *phrase) {
    int len = strlen(phrase);
    for (int i = 0; i < len; i++) {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') && (i <= 0 || phrase[i-1] == ' ')) {
            phrase[i] -= ('a' - 'A');
        }
    }
}
",1
acam267,1696670622,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    for(int i = 0; i < length; i++) {
        int value = (int)phrase[i];
        int before;
        if(i > 0) {
            before = phrase[i-1];
        }
        if(value >= 61 && value <= 122) {
            if(before == 32 || i == 0) {
                phrase[i] = phrase[i]-32;
            }
        }
    }
}",0
acam267,1696671259,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    for(int i = 0; i < length; i++) {
        int value = (int)phrase[i];
        int before;
        if(i > 0) {
            before = phrase[i-1];
        }
        if(value >= 97 && value <= 122) {
            if(before == 32 || i == 0) {
                phrase[i] = phrase[i]-32;
            }
        }
    }
}
",1
ache725,1696680410,1,"void Capitalise(char *phrase) {
    int length = strlen(phrase);
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    for (int i = 1; i < length; i++) {
        if (phrase[i - 1] == ' ' && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}
",1
achi359,1696670960,1,"int AnnsStrLen(char *string)
{
int i = 0;
          while (string[i] != '\0') {
               i++;
}
return i; }

void Capitalise(char *phrase){

// dont even know the length of the faggot phrase??!
int length = AnnsStrLen(phrase);

for (int i = 0; i < length; i++) {
    if ((phrase[i] >= 97) && (phrase[i] <= 122) || phrase[i] == 32){
        if (phrase[i] == 32) {
            phrase[i + 1] = (char)(phrase[i + 1]-32);
        }
        else if (i == 0) { 
            phrase[i] = (char)(phrase[i]-32);
        }
    }
    }
}",0
achi359,1696671096,2,"int AnnsStrLen(char *string)
{
int i = 0;
          while (string[i] != '\0') {
               i++;
}
return i; }

void Capitalise(char *phrase){

int length = AnnsStrLen(phrase);

for (int i = 0; i < length; i++) {
    if (((phrase[i] >= 97) && (phrase[i] <= 122)) || (phrase[i] == 32)){
        if (phrase[i] == 32) {
            phrase[i + 1] = (char)(phrase[i + 1]-32);
        }
        else if (i == 0) { 
            phrase[i] = (char)(phrase[i]-32);
        }
    }
    }
}",0
achi359,1696671578,3,"int AnnsStrLen(char *string)
{
int i = 0;
          while (string[i] != '\0') {
               i++;
}
return i; }
void Capitalise(char *phrase){

int length = AnnsStrLen(phrase);

for (int i = 0; i < length; i++) {
    if (((phrase[i] >= 97) && (phrase[i] <= 122)) || (phrase[i] == 32)){
        if (phrase[i] == 32) {
            if((phrase[i+1]>= 97) && (phrase[i] <= 122)){
                phrase[i + 1] = (char)(phrase[i + 1]-32);
            }
        }
        else if (i == 0) { 
            phrase[i] = (char)(phrase[i]-32);
        }
    }
    }
}",1
acoc261,1696290248,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int length = strlen(phrase);
    for (i = 0; i < length; i++){
        if (i == 0){
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        else if (phrase[i] == ' '){
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}
",0
acoc261,1696369791,2,"void Capitalise(char *phrase)
{
    int i = 0;
    int length = strlen(phrase);
    for (i = 0; i < length; i++){
        if (i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z'){
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        else if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1]){
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}
",1
adav221,1696756001,1,"#include <stdio.h>
#include <stdbool.h>

bool isLowercaseAlpha(char c) {
    return c >= 'a' && c <= 'z';
}

void Capitalise(char *phrase) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlpha(phrase[i]) && capitalizeNext) {
            phrase[i] = phrase[i] - ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}",0
adav221,1696756059,2,"#include <stdio.h>
#include <stdbool.h>

bool isLowercaseAlpha(char c) {
    return c >= 'a' && c <= 'z';
}

bool isUppercaseAlpha(char c) {
    return c >= 'A' && c <= 'Z';
}

void Capitalise(char *phrase) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlpha(phrase[i]) && capitalizeNext) {
            phrase[i] = phrase[i] - ('a' - 'A'); 
            capitalizeNext = false;
        } else if (isUppercaseAlpha(phrase[i])) {
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}",0
adav221,1696760994,3,"#include <stdio.h>

int isLowerCase(char c) {
    return c >= 'a' && c <= 'z';
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i]) && capitalizeNext) {
            phrase[i] -= 32; 
            capitalizeNext = 0;
        } else if (!isLowerCase(phrase[i])) {
            capitalizeNext = 1; 
        }
    }
}",0
adav221,1696761011,4,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int capitalizeNext = 1;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            }
        } else {
            capitalizeNext = 1;
        }
    }
}",0
adav221,1696761063,5,"#include <stdio.h>

int isLowerCaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) {
    if (isLowerCaseAlpha(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCaseAlpha(phrase[i]) && capitalizeNext) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}",0
adav221,1696761524,6,"#include <stdio.h>
#include <string.h>

int isLowercaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) {
    if (isLowercaseAlpha(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalise(char* phrase) {
    int len = strlen(phrase);
    int capitalizeNextChar = 1; 

    for (int i = 0; i < len; i++) {
        if (isLowercaseAlpha(phrase[i]) && capitalizeNextChar) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNextChar = 0; 
        } else if (!isLowercaseAlpha(phrase[i])) {
            capitalizeNextChar = 1; 
        }
    }
}",0
adey750,1696730785,1,"void Capitalise(char *phrase)
{
  int i = 0;
  int length = strlen (phrase) - 1;

  while (i <= length)
    {
      if (phrase[i] >= 'a' && phrase[i] <= 'z')
	{
	  if (i == 0 || phrase[i - 1] == 32)
	    {
	      phrase[i] -= 32;	// converts all letters to upper - case
	    }
	}
      i++;
    }
}
",1
afal438,1696240739,1,"void Capitalise(char *phrase)
{
    
	int Length = 0;
	while (phrase[Length] != '\0')
	{
		Length++;
	}

	int i;
	for (i = 0; i < Length; i++)
	{
		if (i == 0)
		{
			if (phrase[i] < 123 && phrase[i] > 96)
			{
				phrase[i] = phrase[i] - 32;
			}

		}

		if (phrase[i] == 32)
		{
			if (phrase[i + 1] < 123 && phrase[i + 1] > 96)
			{
				phrase[i + 1] = phrase[i + 1] - 32;
			}

		}
	}

}
",1
afit324,1696832260,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    int values[length];
    
    if (phrase[0] > 96 && phrase[0] < 123) {
        phrase[0] = 65 + phrase[0] - 97;
    }
    
    for (i = 0; i < length; i++) {
        
        
        if (phrase[i] == 32) {
            if (phrase[i+1] > 96 && phrase[i+1] < 123) {
                phrase[i+1] = 65 + phrase[i+1] - 97;
            }
        }
        
        
    }
    
    
}",0
afit324,1696832298,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);

    
    if (phrase[0] > 96 && phrase[0] < 123) {
        phrase[0] = 65 + phrase[0] - 97;
    }
    
    for (i = 0; i < length; i++) {
        
        
        if (phrase[i] == 32) {
            if (phrase[i+1] > 96 && phrase[i+1] < 123) {
                phrase[i+1] = 65 + phrase[i+1] - 97;
            }
        }
        
        
    }
    
    
}",1
agan859,1696495970,1,"void Capitalise(char *phrase)
{
    	int i; 
	int length = strlen(phrase);
	char capital;

	for (i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			if ((phrase[i + 1] >= 'a') && (phrase[i + 1] <= 'z')) {
				capital = phrase[i + 1] - 32;
				phrase[i + 1] = capital;
			}

		} else if (i == 0) {
			if ((phrase[i] >= 'a') && (phrase[i] <= 'z')) {
				capital = phrase[i] - 32;
				phrase[i] = capital;
			}
		}

	}
}
",1
agay279,1696474970,1,"void Capitalise(char *phrase)
{ // if the asccii is between the values for a lower case and i-i = space ascii, then capitlise the letter 
int i=0;
if (phrase[0]>=97&&phrase[0]<=122&&phrase[0-1]==32){
phrase[0]=phrase[0]-32;
}
    while (phrase[i]!='\0'){
        if (phrase[i]>=97&&phrase[i]<=122&&phrase[i-1]==32){
     
        phrase[i]=phrase[i]-32;
      
        }
        i++;
    }
    
}",0
agay279,1696475136,2,"void Capitalise(char *phrase)
{ // if the asccii is between the values for a lower case and i-i = space ascii, then capitlise the letter 
int i=0;
if (phrase[0]>=97&&phrase[0]<=122){
phrase[0]=phrase[0]-32;
}
    while (phrase[i]!='\0'){
        if (phrase[i]>=97&&phrase[i]<=122&&phrase[i-1]==32){
     
        phrase[i]=phrase[i]-32;
      
        }
        i++;
    }
    
}",1
agou682,1696842928,1,"void Capitalise(char *phrase)
{
     int length =strlen(phrase);
    int capitalizeNext =1; 

    for (int i=0;i<length;i++){
        if (phrase[i] >='a' && phrase[i] <='z' && capitalizeNext){
           
            phrase[i] -= 'a'-'A';
            capitalizeNext =0; 
        } else if (phrase[i]==' '){
           
            capitalizeNext=1;
        } else{
    
            capitalizeNext=0;
        }
    }
}
",1
ahac139,1696292050,1,"void Capitalise(char *phrase)
{
    if ((phrase[0]>96)&&(phrase[0]<123)){
        phrase[0    ] = phrase[0]-('a'-'A');
    }

    for (int i = 0; i < strlen(phrase); i++)
    {
        if ((phrase[i] == ' ')&&(phrase[i+1]>96)&&(phrase[i+1]<123))
        {
            phrase[i+1] = phrase[i+1]-('a'-'A');
            i++;
        }
    }
    
}",1
ahac139,1696307275,2,"void Capitalise(char *phrase)
{
    if ((phrase[0]>96)&&(phrase[0]<123)){
        phrase[0] = phrase[0]-('a'-'A');
    }

    for (int i = 0; i < strlen(phrase); i++)
    {
        if ((phrase[i] == ' ')&&(phrase[i+1]>96)&&(phrase[i+1]<123))
        {
            phrase[i+1] = phrase[i+1]-('a'-'A');
            i++;
        }
    }
    
}",1
ahac223,1696811482,1,"void Capitalise(char *phrase)
{
   int length = strlen(phrase);
   
       if(phrase[0] >= 97 && phrase[0] <= 122){
           phrase[0] = phrase[0] - 32;
       }
   
   for(int i = 1; i < length; i++){
       if(phrase[i] == 32){
           int space = i;
           phrase[space + 1] = phrase[space + 1] - 32;
       }
       
   }
    
}",0
ahac223,1696811674,2,"void Capitalise(char *phrase)
{
   int length = strlen(phrase);
   
       if(phrase[0] >= 97 && phrase[0] <= 122){
           phrase[0] = phrase[0] - 32;
       }
   
   for(int i = 1; i < length; i++){
       if(phrase[i] == 32){
           int space = i;
           
           
           if(phrase[space + 1] >= 97 && phrase[space + 1] <= 122){
            phrase[space + 1] = phrase[space + 1] - 32;
       }
          
       }
       
   }
    
}",1
ahai431,1696722054,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	
	if ((phrase[0] >= 'a') && (phrase[0] <= 'z') ){
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	for (int i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			if ((phrase[i+1] >= 'a') && (phrase[i+1] <= 'z')) {
				phrase[i+1] = phrase[i+1] - ('a' - 'A');
			}
		}
	}
}",1
ahas673,1696227001,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int firstLetter = 0;
    for (int i = 0; i < length; i++){
        if (phrase[i] == ' '){
            firstLetter = i + 1;
        }
        if (phrase[firstLetter] >= 97 && phrase[firstLetter] <= 122){
                phrase[firstLetter] -= 32;
        }
    }
}",1
ahij206,1696834783,1,"void CapitalizeWords(char *phrase) {
    int i = 0;
    int capitalizeNext = 1;

    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }

        if (!capitalizeNext)
            capitalizeNext = 1;

        i++;
    }
}
",0
ahij206,1696834838,2,"void Capitalise(char *phrase) {
    int i = 0;
    int capitalizeNext = 1;

    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }

        if (!capitalizeNext)
            capitalizeNext = 1;

        i++;
    }
}
",0
ahij206,1696835038,3,"void Capitalize(char *phrase) 
{
    int i = 0;
    int capitalizeNext = 1;

    while (phrase[i] != '\0') {
        if (capitalizeNext && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }

        i++;
    }
}",0
ahij206,1696835045,4,"void Capitalise(char *phrase) 
{
    int i = 0;
    int capitalizeNext = 1;

    while (phrase[i] != '\0') {
        if (capitalizeNext && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }

        i++;
    }
}",0
ahij206,1696835227,5,"void Capitalize(char *phrase) {
    int i = 0;
    int capitalizeNext = 1;

    while (phrase[i] != '\0') {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = phrase[i] - ('a' - 'A');
            capitalizeNext = 0;
        } else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }

        i++;
    }
}",0
ahij206,1696835236,6,"void Capitalise(char *phrase) {
    int i = 0;
    int capitalizeNext = 1;

    while (phrase[i] != '\0') {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = phrase[i] - ('a' - 'A');
            capitalizeNext = 0;
        } else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }

        i++;
    }
}",0
ahua579,1696494315,1,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
			phrase[i] = phrase[i] - 32;
		}
		i++;
	}

}",1
ahus071,1696817295,1,"char ConvertLetter (char letter)
{
	letter = letter - 32;
	return letter;
}

void Capitalise (char *phrase)
{
	for (int i = 0; phrase[i] != '\0'; i++)
	{
		//check to see if the letter is a Letter
		if(95 <= phrase[i] <= 122)
		{
			if(i == 0 || phrase[i-1] ==' ')
			{
				phrase[i] = ConvertLetter(phrase[i]);
			}
		}
	}
}",0
ahus071,1696817355,2,"char ConvertLetter (char letter)
{
	letter = letter - 32;
	return letter;
}

void Capitalise (char *phrase)
{
	for (int i = 0; phrase[i] != '\0'; i++)
	{
		//check to see if the letter is a Letter
		if((95 <= phrase[i]) &&  (phrase[i] <= 122))
		{
			if(i == 0 || phrase[i-1] ==' ')
			{
				phrase[i] = ConvertLetter(phrase[i]);
			}
		}
	}
}",1
ajam744,1696395364,1,"void Capitalise(char *phrase)
{
    int i;
    
    phrase[0] = phrase[0] - 32;
    
    for (i = 0; i < strlen(phrase); i++)
    {
        if (phrase[i] == ' ')
        {
        phrase[i + 1] = phrase[i+1] - 32;
        }
    }
}
",0
ajam744,1696395925,2,"void Capitalise(char *phrase)
{
    int i;
    
    if (phrase[0] >= 97 && phrase[0] <= 122)
    {
        phrase[0] = phrase[0] - 32;
    }
    
    for (i = 0; i < strlen(phrase); i++)
    {
        if (phrase[i] == ' ')
        {
            if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122)
            {
                phrase[i + 1] = phrase[i+1] - 32;
            }
        
        }
    }
}
",1
ajeo563,1696660624,1,"void Capitalise(char *phrase)
{
	int length = strlen(phrase);

	for (int i = 0; i < length; i++) {

		if (i == 0 && phrase[i] >= 97 && phrase[i] <= 122) {

			phrase[i] = phrase[i] - 32;
		}

		if (phrase[i - 1] == ' ' && phrase[i]>= 97 && phrase[i] <= 122) {

			phrase[i] = phrase[i] - 32;
		}
	}

}
",1
ajhz010,1696307607,1,"void Capitalise(char *phrase)
{
    int i, length;
    i = 0;
    while (phrase[i] != '\0') {
        i++;
    }
    length = i;
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (i = 0; i < length; i++) {
        if (phrase[i] == 32 && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
        }
    }
    
    
}
",1
ajhz011,1696221451,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase) {
	int i;

	for (i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
				phrase[i + 1] -= 32;
			}
		}
	}
	phrase[0] -= 32;
}",0
ajhz011,1696221554,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase) {
	int i;

	for (i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
				phrase[i + 1] -= 32;
			}
		}
	}
	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] -= 32;
	}
}",1
ajhz216,1696650094,1,"void Capitalise(char *phrase)
{
    int i = 0;
	int y = strlen(phrase);

	phrase[0] = phrase[0] - 32;

	for (i = 0; i < y; i++) {
		if (phrase[i] == 32 && phrase[i + 1] != 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
			phrase[i + 1] = phrase[i + 1] - 32 ;
		}
	}
}
",0
ajhz216,1696650223,2,"void Capitalise(char *phrase)
{
	int i = 0;
	int y = strlen(phrase);

	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}

	for (i = 0; i < y; i++) {
		if (phrase[i] == 32 && phrase[i + 1] != 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
			phrase[i + 1] = phrase[i + 1] - 32 ;
		}
	}
}
",1
ajhz318,1696676387,1,"void Capitalise(char *phrase)
{
int i;
    int length = strlen(phase);

    if (phase[0] - 32 > 64) {
        phase[0] = phase[0] - 32;
    }

    for (i = 0; i <= length; i++) {
        if (phase[i] == ' ') {
            if (phase[i + 1] - 32 > 64) {
                phase[i + 1] = phase[i + 1] - 32;
            }
        }
    }
}",0
ajhz318,1696676433,2,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);

    if (phrase[0] - 32 > 64) {
        phrase[0] = phrase[0] - 32;
    }

    for (i = 0; i <= length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] - 32 > 64) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",1
ajhz444,1696383750,1,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if (i == 0 && 96 < phrase[i] < 123) {
			phrase[i] -= 32;
		}
		else if (phrase[i - 1] == ' ' && 96 < phrase[i] < 123) {
			phrase[i] -= 32;
		}
		i++;
	}    
}
",0
ajhz444,1696384496,2,"void Capitalise(char* phrase) 
{
	int i = 1;
	if (96 < phrase[0] && phrase[0] < 123) {
		phrase[0] -= 32;
	}
	while (phrase[i] != '\0') {
		if (phrase[i - 1] == ' ' && 96 < phrase[i] && phrase[i] < 123) {
			phrase[i] -= 32;
		}
		i++;
	}
}",1
ajhz488,1696725607,1,"void Capitalise(char *phrase)
{
    int len, i;
    len = strlen(phrase) - 1;
    for (i=0;i<len;i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122) {
            if (phrase[i-1] == 32 || phrase[i-1] == 0) {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",0
ajhz488,1696725811,2,"void Capitalise(char *phrase)
{
    int len, i;
    len = strlen(phrase) - 1;
    for (i=0;i<=len;i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122) {
            if (phrase[i-1] == 32 || i == 0) {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",1
ajin489,1696303749,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char word[]){
    if (word[0] >= 97 || word[0] <= 122){
        word[0] = word[0] - 32;
    }
    int i;
    for (i = 1; i < strlen(word); i++){
        if (word[i] == 32){
            if (word[i] >= 97 || word[i] <= 122){
                word[i + 1] = word[i + 1] - 32;
            }
        }
    }
}",0
ajin489,1696303815,2,"#include <stdio.h>
#include <string.h>
void Capitalise(char word[]){
    if (word[0] >= 97 && word[0] <= 122){
        word[0] = word[0] - 32;
    }
    int i;
    for (i = 1; i < strlen(word); i++){
        if (word[i] == 32){
            if (word[i] >= 97 && word[i] <= 122){
                word[i + 1] = word[i + 1] - 32;
            }
        }
    }
}",0
ajin489,1696303913,3,"#include <stdio.h>
#include <string.h>
void Capitalise(char word[]){
    if (word[0] >= 97 && word[0] <= 122){
        word[0] = word[0] - 32;
    }
    int i;
    for (i = 1; i < strlen(word); i++){
        if (word[i] == 32){
            if (word[i + 1] >= 97 && word[i + 1] <= 122){
                word[i + 1] = word[i + 1] - 32;
            }
        }
    }
}
",1
ajoh511,1696368348,1,"char Upper(char letter)
{
    letter = letter - ('a' - 'A');
    return letter;
}

void Capitalise(char *phrase)
{
    int i;

    for (i = 0; i < strlen(phrase); i++) {
        if (i == 0) {
            phrase[i] = Upper(phrase[i]);
        } else if (phrase[i] == ' ') {
            phrase[i + 1] = Upper(phrase[i + 1]);
        }
    }

}
",0
ajoh511,1696369109,2,"char Upper(char letter)
{
    letter = letter - ('a' - 'A');
    return letter;
}

void Capitalise(char *phrase)
{
    int i;

    for (i = 0; i < strlen(phrase); i++) {
        if (i == 0) {
            if ((96 < phrase[0]) && (phrase[0] < 123)) {
                phrase[0] = Upper(phrase[0]);
            }
        } else if (phrase[i] == ' ') {
            if ((96 < phrase[i + 1]) && (phrase[i + 1] < 123)) {
                phrase[i + 1] = Upper(phrase[i + 1]);
            }
        }
    }
}
",1
akam256,1696847198,1,"#include <stdio.h>
void Capitalise(char *please) {
int forfeit = 1; 
for (int i = 0; please[i] != '\0'; i++) {
if (please[i] >= 'a' && please[i] <= 'z') {
if (forfeit) {
please[i] -= ('a' - 'A');
forfeit = 0;
}
} 
else if (please[i] >= 'A' && please[i] <= 'Z') 
{
if (!forfeit) 
{
please[i] += ('a' - 'A');
}
} 
else {
forfeit = 1;
}
}
}
",0
akam256,1696847449,2,"#include <stdio.h>
void Capitalise(char *please) 
{
int Forfeit = 1; 
for (int i = 0; please[i] != '\0'; i++) 
{
if (please[i] >= 'a' && please[i] <= 'z') 
{
if (Forfeit) {
please[i] -= ('a' - 'A');
Forfeit = 0; 
}
} 
else if (please[i] >= 'A' && please[i] <= 'Z') 
{
if (!Forfeit) 
{
Forfeit = 1;
}
} else {
Forfeit = 1;
}
}
}
",0
akam256,1696848804,3,"#include <stdio.h>
void Capitalise(char *please) {
int Forfeit = 1; 
for (int i = 0; please[i] != '\0'; i++) {
if ((please[i] >= 'a' && please[i] <= 'z') || (please[i] >= 'A' && please[i] <= 'Z')) {
if (Forfeit) 
{
if (please[i] >= 'a' && please[i] <= 'z') {
please[i] -= ('a' - 'A');
}
Forfeit = 0; 
}
} 
else {
Forfeit = 1;
}
}",0
akam256,1696848823,4,"#include <stdio.h>
void Capitalise(char *please) {
int Forfeit = 1; 
for (int i = 0; please[i] != '\0'; i++) {
if ((please[i] >= 'a' && please[i] <= 'z') || (please[i] >= 'A' && please[i] <= 'Z')) {
if (Forfeit) 
{
if (please[i] >= 'a' && please[i] <= 'z') {
please[i] -= ('a' - 'A');
}
Forfeit = 0; 
}
} 
else {
Forfeit = 1;
}
}
}",0
akam677,1696740653,1,"#include <stdio.h>

int isLowercaseAlpha(char c) 
{
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) 
{
    if (isLowercaseAlpha(c)) {
        return c - 32;
    }
    return c;
}

void Capitalise(char *phrase) 
{
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlpha(phrase[i]) && capitalizeNext) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else {
            if (!isLowercaseAlpha(phrase[i])) {
                capitalizeNext = 1;
            }
        }
    }
}",0
akam677,1696741974,2,"#include <stdio.h>

int isLowercaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

int isUppercaseAlpha(char c) {
    return (c >= 'A' && c <= 'Z');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] -= 32;  
                capitalizeNext = 0;  
            }
        } else if (isUppercaseAlpha(phrase[i])) {
            capitalizeNext = 0;  
        } else {
            capitalizeNext = 1;  
        }
    }
}",0
aker238,1696217717,1,"void Capitalise(char *phrase)
{
    int i=0;
    if(phrase[i]>=97&&phrase[i]<=122){
        phrase[i] = phrase[i] + ('A'-'a');
    }
    i++;
    while(i<strlen(phrase)){
        if(phrase[i] == ' '){
            if(phrase[i+1]>=97&&phrase[i+1]<=122){
                phrase[i+1] = phrase[i+1] + ('A'-'a');
            }
        }
        i++;
    }
}
",1
akin699,1696602186,1,"void Capitalise(char *phrase)
{
    char string_length;
	string_length = strlen(phrase);
	int i;
    for (i=0; i < string_length; i++) {
		if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
			if (i == 0) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
			else if ((phrase[i] != 0) && (phrase[i - 1] == 32)) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
	}
	phrase[i] = '\0';
}
",1
akmu146,1696738940,1,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    while (*phrase != '\0') {
        if ((*phrase >= 'a' && *phrase <= 'z') && capitalizeNext) {
            *phrase -= 32;
            capitalizeNext = 0;
        }
        else if (*phrase == ' ' || *phrase == '\t' || *phrase == '\n') {
            capitalizeNext = 1;
        }

        phrase++;
    }
}

",0
akmu146,1696739531,2,"void Capitalise(char* phrase) {
    int capitalizeNext = 1; 
    for (int i = 0; phrase[i] != '\0'; i++) {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') && capitalizeNext) {
            phrase[i] -= 32; 
            capitalizeNext = 0;
        } 
        // Different cases:
        else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n' || phrase[i] == '\r' || phrase[i] == '\v' || phrase[i] == '\f') {
            capitalizeNext = 1;
        } 
        else {
            capitalizeNext = 0;
        }
    }
}

",1
akod059,1696326142,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 1; i < length; i++) {
		if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}

}",1
akri368,1696776711,1,"
void Capitalise(char *phrase)
{
    int caps;

    for (int i = 0; phrase[i] != '\0'; ++i) {
        if (phrase[i] == ' ') {
            caps = 1;
            continue;
        }
        if (caps) {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] - 32;
            }
            caps = 0;
        }
    }
}",0
akri368,1696776734,2,"
void Capitalise(char *phrase)
{
    int Capitalise;

    for (int i = 0; phrase[i] != '\0'; ++i) {
        if (phrase[i] == ' ') {
            Capitalise = 1;
            continue;
        }
        if (Capitalise) {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] - 32;
            }
            Capitalise = 0;
        }
    }
}",0
akri368,1696776821,3,"
void Capitalise(char *phrase)
{
    int caps;

    for (int i = 0; phrase[i] != '\0'; ++i) {
        if (phrase[i] == ' ') {
            caps = 1;
            continue;
        }
        if (caps) {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - 32;
            }
            caps = 0;
        }
    }
}",1
akwo440,1696830605,1,"void Capitalise(char *phrase)
{
    phrase[0] -= 32;
    int i;
    for (i = 0; i < 100 ; i++){
    if ((phrase[i]<=122) && (phrase[i]>=95)){
        if ((phrase[i-1] == ' ')){
        phrase[i] -= 32;
        }
    }
    };
}",0
akwo440,1696830994,2,"void Capitalise(char *phrase)
{
    int i;
    for (i = 0; i < 100 ; i++){
    if ((phrase[i]<=122) && (phrase[i]>=95)){
        if ((phrase[i-1] == ' ') || (i == 0)){
            phrase[i] -= 32;
            }
    }
    };
}",1
ali867,1696802831,1,"void Capitalise(char *phrase)
{
    int Capitalise_First_Character = 1;
    
    for (int i = 0; phrase[i]; i++) 
    {
        if (Capitalise_First_Character && phrase[i] >= 'a' && phrase[i] <= 'z') 
        {
            phrase[i] -= 32;
        }
        
        Capitalise_First_Character = (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n');
    }
}
",1
alum086,1696745439,1,"#include <stdio.h>

// Helper function to check if a character is a lowercase alphabetic character
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Helper function to convert a lowercase character to uppercase
char toUpperCase(char c) {
    if (isLowerCase(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

// Function to capitalize the first character in each word in a phrase
void capitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Start by capitalizing the first character

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i]) && capitalizeNext) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0; // Set to 0 to avoid capitalizing consecutive characters
        } else if (!isLowerCase(phrase[i])) {
            capitalizeNext = 1; // Set to 1 to capitalize the next lowercase character
        }
    }
}

int main() {
    char myPhrase[] = ""this is a test phrase"";
    
    printf(""Original Phrase: %s\n"", myPhrase);
    capitalizeWords(myPhrase);
    printf(""Capitalized Phrase: %s\n"", myPhrase);
    
    return 0;
}
",0
alum086,1696801914,2,"#include <stdio.h>
#include <ctype.h>

// Function to capitalize the first character of each word in a phrase
void CapitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Flag to determine if the next character should be capitalized

    // Loop through each character in the input phrase
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            // Check if the character is alphabetic
            if (capitalizeNext) {
                // If the flag is set, capitalize the character
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0; // Capitalized, so reset the flag
            } else {
                // If the flag is not set, convert the character to lowercase
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            // If the character is not alphabetic
            if (isspace(phrase[i])) {
                // Check if it's a space character
                capitalizeNext = 1; // Set the flag to capitalize the next character
            }
            // If it's not a space, punctuation, or numeric character, it remains unchanged
        }
    }
}",0
alum086,1696801940,3,"#include <stdio.h>

// Function to capitalize the first character of each word in a phrase
void CapitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Flag to determine if the next character should be capitalized

    // Loop through each character in the input phrase
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            // Check if the character is alphabetic
            if (capitalizeNext) {
                // If the flag is set, capitalize the character
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0; // Capitalized, so reset the flag
            } else {
                // If the flag is not set, convert the character to lowercase
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            // If the character is not alphabetic
            if (isspace(phrase[i])) {
                // Check if it's a space character
                capitalizeNext = 1; // Set the flag to capitalize the next character
            }
            // If it's not a space, punctuation, or numeric character, it remains unchanged
        }
    }
}",0
alum086,1696801959,4,"#include <stdio.h>
#include <ctype.h>

// Function to capitalize the first character of each word in a phrase
void CapitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Flag to determine if the next character should be capitalized

    // Loop through each character in the input phrase
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            // Check if the character is alphabetic
            if (capitalizeNext) {
                // If the flag is set, capitalize the character
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0; // Capitalized, so reset the flag
            } else {
                // If the flag is not set, convert the character to lowercase
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            // If the character is not alphabetic
            if (isspace(phrase[i])) {
                // Check if it's a space character
                capitalizeNext = 1; // Set the flag to capitalize the next character
            }
            // If it's not a space, punctuation, or numeric character, it remains unchanged
        }
    }
}

int main() {
    char input[] = ""this is a sample phrase!"";
    
    printf(""Original phrase: %s\n"", input);
    CapitalizeWords(input);
    printf(""Capitalized phrase: %s\n"", input);
    
    return 0;
}
",0
alum086,1696802327,5,"#include <stdio.h>
#include <ctype.h>

// Function to capitalize the first character of each word in a phrase
void CapitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Flag to determine if the next character should be capitalized

    // Loop through each character in the input phrase
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            // Check if the character is alphabetic
            if (capitalizeNext) {
                // If the flag is set, capitalize the character
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0; // Capitalized, so reset the flag
            } else {
                // If the flag is not set, convert the character to lowercase
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            // If the character is not alphabetic
            if (isspace(phrase[i])) {
                // Check if it's a space character
                capitalizeNext = 1; // Set the flag to capitalize the next character
            }
            // If it's not a space, punctuation, or numeric character, it remains unchanged
        }
    }
}
",0
alum086,1696804528,6,"#include <stdio.h>

// Function to check if a character is a lowercase alphabetic character
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to convert a character to uppercase
char toUpperCase(char c) {
    if (isLowerCase(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

// Function to capitalize the first character of each word in a phrase
void capitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toUpperCase(phrase[i]);
                capitalizeNext = 0;
            }
        } else {
            // If it's not a lowercase alphabetic character, reset the flag
            capitalizeNext = 1;
        }
    }
}

int main() {
    char phrase[] = ""hello world! this is a test."";
    capitalizeWords(phrase);
    printf(""%s\n"", phrase); // Output: ""Hello World! This Is A Test.""

    return 0;
}
",0
alum086,1696804541,7,"#include <stdio.h>

// Function to check if a character is a lowercase alphabetic character
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to convert a character to uppercase
char toUpperCase(char c) {
    if (isLowerCase(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

// Function to capitalize the first character of each word in a phrase
void capitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toUpperCase(phrase[i]);
                capitalizeNext = 0;
            }
        } else {
            // If it's not a lowercase alphabetic character, reset the flag
            capitalizeNext = 1;
        }
    }
}
",0
alum086,1696804552,8,"#include <stdio.h>

// Function to check if a character is a lowercase alphabetic character
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to convert a character to uppercase
char toUpperCase(char c) {
    if (isLowerCase(c)) {
        return c - ('a' - 'A');
    }
    return c;
}
",0
alum086,1696807734,9,"#include <stdio.h>
#include <ctype.h>

void capitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Flag to determine if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        // If the current character is a lowercase alphabetic character and we should capitalize it
        if (islower(phrase[i]) && capitalizeNext) {
            phrase[i] = toupper(phrase[i]);
            capitalizeNext = 0; // Capitalized, so set the flag to 0
        }
        // If the current character is not a lowercase alphabetic character, set the flag to 1
        else if (!islower(phrase[i])) {
            capitalizeNext = 1;
        }
    }
}

int main() {
    char phrase[] = ""hello, world! this is a test."";
    
    capitalizeWords(phrase);
    
    printf(""%s\n"", phrase); // Output: ""Hello, World! This Is A Test.""
    
    return 0;
}
",0
alum086,1696807753,10,"#include <stdio.h>
#include <ctype.h>

void capitalizeWords(char *phrase) {
    int capitalizeNext = 1; // Flag to determine if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        // If the current character is a lowercase alphabetic character and we should capitalize it
        if (islower(phrase[i]) && capitalizeNext) {
            phrase[i] = toupper(phrase[i]);
            capitalizeNext = 0; // Capitalized, so set the flag to 0
        }
        // If the current character is not a lowercase alphabetic character, set the flag to 1
        else if (!islower(phrase[i])) {
            capitalizeNext = 1;
        }
    }
}
",0
alum086,1696807919,11,"#include <stdio.h>
#include <ctype.h>

void (*capitalizeWords)(char*) = [](char *phrase) {
    int capitalizeNext = 1; // Flag to determine if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        // If the current character is a lowercase alphabetic character and we should capitalize it
        if (islower(phrase[i]) && capitalizeNext) {
            phrase[i] = toupper(phrase[i]);
            capitalizeNext = 0; // Capitalized, so set the flag to 0
        }
        // If the current character is not a lowercase alphabetic character, set the flag to 1
        else if (!islower(phrase[i])) {
            capitalizeNext = 1;
        }
    }
};
",0
alum086,1696807959,12,"#include <stdio.h>
#include <ctype.h>

// Define a function pointer type
typedef void (*CapitalizeFunction)(char *);

int main() {
    char phrase[] = ""hello, world! this is a test."";

    // Create an anonymous function using a function pointer
    CapitalizeFunction capitalizeWords = [](char *phrase) {
        int capitalizeNext = 1; // Flag to determine if the next character should be capitalized

        for (int i = 0; phrase[i] != '\0'; i++) {
            // If the current character is a lowercase alphabetic character and we should capitalize it
            if (islower(phrase[i]) && capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0; // Capitalized, so set the flag to 0
            }
            // If the current character is not a lowercase alphabetic character, set the flag to 1
            else if (!islower(phrase[i])) {
                capitalizeNext = 1;
            }
        }
    };

    capitalizeWords(phrase);

    printf(""%s\n"", phrase); // Output: ""Hello, World! This Is A Test.""

    return 0;
}
",0
alum086,1696808047,13,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>

void capitalizeWords(char *phrase) {
    bool newWord = true; // Flag to track the start of a new word

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (newWord && islower(phrase[i])) {
                phrase[i] = toupper(phrase[i]); // Capitalize the first lowercase letter of the word
                newWord = false; // Reset the new word flag
            } else if (!newWord && isupper(phrase[i])) {
                phrase[i] = tolower(phrase[i]); // Convert the rest of the word to lowercase
            }
        } else {
            newWord = true; // Reset the new word flag when non-alphabetical characters are encountered
        }
    }
}",0
alum086,1696808187,14,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>

void capitalizeWords(phrase) {
    bool newWord = true; // Flag to track the start of a new word

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (newWord && islower(phrase[i])) {
                phrase[i] = toupper(phrase[i]); // Capitalize the first lowercase letter of the word
                newWord = false; // Reset the new word flag
            } else if (!newWord && isupper(phrase[i])) {
                phrase[i] = tolower(phrase[i]); // Convert the rest of the word to lowercase
            }
        } else {
            newWord = true; // Reset the new word flag when non-alphabetical characters are encountered
        }
    }
}",0
alum086,1696840031,15,"#include <stdio.h>

// Helper function to check if a character is a lowercase letter (a-z)
int isLowercase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Helper function to convert a character to uppercase
char toUppercase(char c) {
    if (isLowercase(c)) {
        // ASCII code for converting lowercase to uppercase is 32 (a - A)
        return c - 32;
    }
    return c; // If it's not a lowercase letter, return as is
}

// Function to capitalize the first character of each word in a phrase
void capitalizeWords(char* phrase) {
    int i;

    // Capitalize the first character of the input string if it's a lowercase letter
    if (isLowercase(phrase[0])) {
        phrase[0] = toUppercase(phrase[0]);
    }

    for (i = 1; phrase[i] != '\0'; i++) {
        // Check if the current character is a space
        if (phrase[i] == ' ') {
            // If the next character is a lowercase letter, capitalize it
            if (isLowercase(phrase[i + 1])) {
                phrase[i + 1] = toUppercase(phrase[i + 1]);
            }
        }
    }
}

",0
alum086,1696840256,16,"#include <stdio.h>

// Helper function to check if a character is a lowercase letter (a-z)
int isLowercase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Helper function to convert a character to uppercase
char toUppercase(char c) {
    if (isLowercase(c)) {
        // ASCII code for converting lowercase to uppercase is 32 (a - A)
        return c - 32;
    }
    return c; // If it's not a lowercase letter, return as is
}

// Function to capitalize the first character of each word in a phrase
void capitalizeWords(char* phrase) {
    int i;

    // Capitalize the first character of the input string if it's a lowercase letter
    if (isLowercase(phrase[0])) {
        phrase[0] = toUppercase(phrase[0]);
    }

    for (i = 1; phrase[i] != '\0'; i++) {
        // Check if the current character is a space
        if (phrase[i] == ' ') {
            // If the next character is a lowercase letter, capitalize it
            if (isLowercase(phrase[i + 1])) {
                phrase[i + 1] = toUppercase(phrase[i + 1]);
            }
        }
    }
}

int main() {
    char input[] = ""hello world"";
    capitalizeWords(input);
    printf(""%s\n"", input); // Output: ""Hello World""

    return 0;
}

",0
alum086,1696840265,17,"#include <stdio.h>

// Helper function to check if a character is a lowercase letter (a-z)
int isLowercase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Helper function to convert a character to uppercase
char toUppercase(char c) {
    if (isLowercase(c)) {
        // ASCII code for converting lowercase to uppercase is 32 (a - A)
        return c - 32;
    }
    return c; // If it's not a lowercase letter, return as is
}

// Function to capitalize the first character of each word in a phrase
void capitalizeWords(char* phrase) {
    int i;

    // Capitalize the first character of the input string if it's a lowercase letter
    if (isLowercase(phrase[0])) {
        phrase[0] = toUppercase(phrase[0]);
    }

    for (i = 1; phrase[i] != '\0'; i++) {
        // Check if the current character is a space
        if (phrase[i] == ' ') {
            // If the next character is a lowercase letter, capitalize it
            if (isLowercase(phrase[i + 1])) {
                phrase[i + 1] = toUppercase(phrase[i + 1]);
            }
        }
    }
}
",0
alum086,1696840294,18,"#include <stdio.h>
// Function to capitalize the first character of each word in a phrase
void capitalizeWords(char* phrase) {
    int i;

    // Capitalize the first character of the input string if it's a lowercase letter
    if (isLowercase(phrase[0])) {
        phrase[0] = toUppercase(phrase[0]);
    }

    for (i = 1; phrase[i] != '\0'; i++) {
        // Check if the current character is a space
        if (phrase[i] == ' ') {
            // If the next character is a lowercase letter, capitalize it
            if (isLowercase(phrase[i + 1])) {
                phrase[i + 1] = toUppercase(phrase[i + 1]);
            }
        }
    }
}
",0
alum086,1696842587,19,"#include <stdio.h>
#include <ctype.h>

void capitalise(char *phrase) {
    int capitalizeNext = 1;  // A flag to indicate whether the next character should be capitalized
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            // If the current character is alphabetic and the flag is set, capitalize it
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;  // Reset the flag
            }
        } else {
            // If the current character is not alphabetic, set the flag to capitalize the next alphabetic character
            capitalizeNext = 1;
        }
    }
}",0
alum086,1696842613,20,"void capitalise(char *phrase) {
    int capitalizeNext = 1;  // A flag to indicate whether the next character should be capitalized
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            // If the current character is alphabetic and the flag is set, capitalize it
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;  // Reset the flag
            }
        } else {
            // If the current character is not alphabetic, set the flag to capitalize the next alphabetic character
            capitalizeNext = 1;
        }
    }
}",0
alum086,1696842745,21,"#include <stdio.h>

int isLowercaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUppercase(char c) {
    if (isLowercaseAlpha(c)) {
        // ASCII code for 'a' is 97, and for 'A' is 65, so the difference is 32.
        // We add 32 to convert lowercase to uppercase.
        return c - 32;
    }
    return c;  // Return the character unchanged if it's not a lowercase letter.
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;  // A flag to indicate whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlpha(phrase[i])) {
            // If the current character is a lowercase alphabet and the flag is set, capitalize it
            if (capitalizeNext) {
                phrase[i] = toUppercase(phrase[i]);
                capitalizeNext = 0;  // Reset the flag
            }
        } else {
            // If the current character is not a lowercase alphabet, set the flag to capitalize the next one
            capitalizeNext = 1;
        }
    }
}",0
alum086,1696842945,22,"#include <stdio.h>
#include <ctype.h>

int isLowercaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;  // A flag to indicate whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlpha(phrase[i])) {
            // If the current character is a lowercase alphabet and the flag is set, capitalize it
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;  // Reset the flag
            }
        } else if (isspace(phrase[i])) {
            // If the current character is a space, set the flag to capitalize the next alphabet character
            capitalizeNext = 1;
        } else {
            // If the current character is not a lowercase alphabet or space, leave it unchanged
            capitalizeNext = 0;
        }
    }
}",1
amac853,1696558991,1,"void Capitalise(char *phrase)
{
    int strLen = strlen(phrase);
    int i;
    int j;
    
    if (phrase[0] > 96 && phrase[0] < 123)
    {
        phrase[0] = (char) (phrase[0]-32);
    }
    for (i = 0; i < strLen; i++)
    {
        j = i;
        if (phrase[j] == ' ')
        {
            while (phrase[j] == ' ')
            {
                j++;
            }
            if (phrase[j] > 96 && phrase[j] < 123)
            {
                phrase[j] =  (char) (phrase[j]-32);
            }
            
        }
    }
}",1
amag544,1696837953,1,"void Capitalise(char *phrase)
{
  if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0]-32;
    }
    
    for (int i = 0; phrase[i] != '\0'; i++) {   
        if (phrase[i] == ' ') {
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
   }  
}
",1
amah664,1696844013,1,"void Capitalise(char *phrase)
{
    int i = 0; 
    while (phrase[i] != '\0'){ 
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') || phrase[i] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z'){
                phrase[i] = phrase[i] - ('a' - 'A'); 
            }
        }
        i++; 
    }
    
}",0
amah664,1696845582,2,"void Capitalise(char *phrase)
{
    int next = 1; 
    int i = 0; 
    while (phrase[i] != '\0'){ 
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (next == 1){
                phrase[i] = phrase[i] - ('a' - 'A'); 
                next = 0; 
            }
        }
             else if (phrase[i] == ' '){
                next = 1; 
            }
            else {
                next = 0; 
            }
        i++; 
    }
    
}",1
amal783,1696247768,1,"int CheckLower(char letter) {
	return (letter >= 97 && letter <= 122);
}

void Capitalise(char* phrase) {
	int len = strlen(phrase);
	int space = 0;
	if (CheckLower(phrase[0])) { phrase[0] -= 32; }
	for (int i = 1; i < len; i++) {
		if (phrase[i] == ' ') {
			space = 1;
			continue;
		}
		else if (space == 1) {
			if (CheckLower(phrase[i])) { phrase[i] -= 32; }
			space = 0;
		}
	}
}",1
amar516,1696824280,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
int i = 0;

while (phrase[i] != '\0') {
	i++;
	}

int x;

for(x = 0; x <= i; x++){
	if(phrase[x - 1] == 'sp'){
		if (phrase[x] <= 122 && phrase[x] >= 97){
			phrase[x] = phrase[x - 32];
			}
		}
	}
x = 0;
if (phrase[x] <= 122 && phrase[x] >= 97){
			phrase[x] = phrase[x] - 32;
	}
}
",0
amar516,1696824366,2,"#include <stdio.h>

void Capitalise(char *phrase)
{
int i = 0;

while (phrase[i] != '\0') {
	i++;
	}

int x;

for(x = 0; x <= i; x++){
	if(phrase[x - 1] == ' '){
		if (phrase[x] <= 122 && phrase[x] >= 97){
			phrase[x] = phrase[x - 32];
			}
		}
	}
x = 0;
if (phrase[x] <= 122 && phrase[x] >= 97){
			phrase[x] = phrase[x] - 32;
	}
}
",0
amar516,1696824626,3,"#include <stdio.h>

void Capitalise(char *phrase)
{
int i = 0;

while (phrase[i] != '\0') {
	i++;
	}

int x;
x = 0;

while(x <= i){
	if(phrase[x - 1] == ' '){
		if (phrase[x] <= 'a' && phrase[x] >= 'A'){
			phrase[x] = phrase[x] - 32;
			}
		}
	x++;
	}
x = 0;
if (phrase[x] <= 122 && phrase[x] >= 97){
			phrase[x] = phrase[x] - 32;
	}
}
",0
amar516,1696824778,4,"#include <stdio.h>

void Capitalise(char *phrase)
{
int i = 0;

while (phrase[i] != '\0') {
	i++;
	}

int x;
x = 0;

while(x <= i){
	if(phrase[x - 1] == ' '){
		if (phrase[x] <= 'z' && phrase[x] >= 'a'){
			phrase[x] = phrase[x] - 32;
			}
		}
	x++;
	}
x = 0;
if (phrase[x] <= 'z' && phrase[x] >= 'a'){
			phrase[x] = phrase[x] - 32;
	}
}
",1
amar704,1696231716,1,"void Capitalise(char *phrase)
{
    int i = 1;
    phrase[0] = phrase[0] - ('a' - 'A');
    
    while (phrase[i] != '\0') {
        
        if (phrase[i] == ' ' && phrase[i+1] != '\0'){
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
        }
        
        i++;
    }
}",0
amar704,1696231929,2,"void Capitalise(char *phrase)
{
    int i = 1;
    
    if (phrase[0] > 'Z'){
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    while (phrase[i] != '\0') {
        
        if (phrase[i] == ' ' && phrase[i+1] != '\0' && phrase[i+1] > 'Z'){
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
        }
        
        i++;
    }
}
",1
amar768,1696656428,1,"void Capitalise(char *phrase) {
    
    int strLength = strlen(phrase) - 1;

    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;
    }
    for (int i = 1; i <= strLength; i++) {
        if (phrase[i-1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] -= 32;
        }
    }
}",1
amat407,1696633835,1,"void Capitalise(char *phrase)
{
  int i=0;
  while (i!='/0') {
        if (phrase[i]==phrase[0]) {
          if ((phrase[i]>='a')&&(phrase[i]<='z')) {
             phrase[i]=phrase[i]-32;
          } 
        } else if (phrase[i]==' ') {
                  if ((phrase[i+1]>='a')&&(phrase[i+1]<='z')) {
                     phrase[i+1]=phrase[i+1]-32;
                  } 
        }
   i++;
  }   
}
",0
amat407,1696667633,2,"void Capitalise(char *phrase) {

 int i=0;
 
 while (phrase[i] != '\0') {
       if (i==0) {
          if ((phrase[i]>='a') && (phrase[i]<='z')) {
              phrase[i]=phrase[i]-('a'-'A');
          }
       } else if (phrase[i]==' ') {
                 if ((phrase[i+1]>='a') && (phrase[i+1]<='z')) {
                    phrase[i+1]=phrase[i+1]-('a'-'A');
                 }
       }
  i++;
  }
}
",1
amcm539,1696660933,1,"void Capitalise(char *phrase)
{
 /*Capitalise takes a string input and capitalises the first letter of each word.*/

/*Input: A string of words*/

/*Output: Void. The function replaces the input array in the main function*/

/*Author: Adam McMann*/


// Check if the very first word begins with lowercase character.
if (phrase[0] >= 97 && phrase[0] <= 122){
    phrase[0] = phrase[0] - 32;
}

//Search for any whitespace
for (int i=0; i<strlen(phrase); i++){
    if (phrase[i]==32){
        //Now check if the element immediately after it is lowercase character.
        if (phrase[i+1] >=97 && phrase[i+1] <= 122){
            //if it is lowercase, make it upercase
            phrase[i+1] = phrase[i+1] -32;
        }

    }

}

return;   
}
",1
amhk647,1696374459,1,"char toUppercase(letter)
{
	return letter - ('a' - 'A'); // letter - 32
}

void Capitalise(char* phrase)
{
	phrase[0] = toUppercase(phrase[0]); // convert first letter to uppercase
	int length = strlen(phrase); // length of phrase
	for (int i = 1; i < length; i++) { // iterate through letters of phrase
		if (phrase[i] == ' ') {
			phrase[i + 1] = toUppercase(phrase[i + 1]); // capitalise letters after spaces
		}
	}
}",0
amhk647,1696375182,2,"int toUppercase(letter)
{
	return letter - ('a' - 'A'); // letter - 32
}

void Capitalise(char* phrase)
{
	phrase[0] = toUppercase(phrase[0]); // convert first letter to uppercase
	int length = strlen(phrase); // length of phrase
	for (int i = 1; i < length; i++) { // iterate through letters of phrase
		if (phrase[i] == ' ') {
			phrase[i + 1] = toUppercase(phrase[i + 1]); // capitalise letters after spaces
		}
	}
}",0
amhk647,1696375277,3,"char toUppercase(char letter)
{
	return letter - ('a' - 'A'); // letter - 32
}

void Capitalise(char* phrase)
{
	phrase[0] = toUppercase(phrase[0]); // convert first letter to uppercase
	int length = strlen(phrase); // length of phrase
	for (int i = 1; i < length; i++) { // iterate through letters of phrase
		if (phrase[i] == ' ') {
			phrase[i + 1] = toUppercase(phrase[i + 1]); // capitalise letters after spaces
		}
	}
}",0
amhk647,1696377669,4,"char toUppercase(char letter)
{
	return letter - ('a' - 'A'); // letter - 32
}

void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') { // check if first letter is lowercase
		phrase[0] = toUppercase(phrase[0]); // capatilise first letter if it is
	}
	int length = strlen(phrase); // length of phrase
	for (int i = 1; i < length; i++) { // iterate through letters of phrase
		if (phrase[i] == ' ') { // find spaces
			if (phrase[i] >= 'a' && phrase[i] <= 'z') { // check if lowercase
				phrase[i + 1] = toUppercase(phrase[i + 1]); // capitalise letters after spaces
			}
		}
	}
}",0
amhk647,1696377752,5,"char toUppercase(char letter)
{
	return letter - ('a' - 'A'); // letter - 32
}

void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') { // check if first letter is lowercase
		phrase[0] = toUppercase(phrase[0]); // capatilise first letter if it is
	}
	int length = strlen(phrase); // length of phrase
	for (int i = 1; i < length; i++) { // iterate through letters of phrase
		if (phrase[i] == ' ') { // find spaces
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') { // check if lowercase
				phrase[i + 1] = toUppercase(phrase[i + 1]); // capitalise letters after spaces
			}
		}
	}
}",1
amok249,1696210288,1,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    phrase[0] = phrase[0] - 32;
    
    for (i = 1; i <= length; i++) {
        if ((phrase[i]) == (char) 32) {
        phrase[i+1] = phrase[i+1] - 32;
    }
    }
}",0
amok249,1696210787,2,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    
    if (phrase[0] >= 97 && phrase[0] <= 122) {
    phrase[0] = phrase[0] - 32;
    }
    
    for (i = 1; i <= length; i++) {
        if (phrase[i+1] >= 97 && phrase[i+1] <= 122) {
            if ((phrase[i]) == (char) 32) {
            phrase[i+1] = phrase[i+1] - 32;
        }
        }
            
    }
}
",1
amur986,1696758408,1,"void Capitalise(char* phrase)
{
    int length;
    length = strlen(phrase);
    int i;
    for (i = 0;i < length;i++) {
        int value = phrase[i];
        if (i == 0) {
            if (value >= 97 || value <= 122) {
                phrase[i] = value - 32;
            }
        }
    
        if (value == 32 && (value >= 97 && value <= 122)){
            phrase[i + 1] = phrase[i + 1] - 32;
        }
            
    
    }

}
",0
amur986,1696758657,2,"void Capitalise(char* phrase)
{
    int length;
    length = strlen(phrase);
    int i;
    for (i = 0;i < length;i++) {
        int value = phrase[i];
        if (i == 0) {
            if (value >= 97 && value <= 122) {
                phrase[i] = value - 32;
            }
        }
    
        if (value == 32 && phrase[i+1] >= 97 && phrase[i+1] <= 122) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
            
    
    }

}",1
anig922,1696755912,1,"void Capitalise(char * sentance)
{
    int j;
    for (j = 0; i < strlen(sentance); j = i + 1) {
       
        if (sentance[j] == ' ' && sentance[j + 1] >= 97) {
            sentance[j + 1] -= 32;  
        }  
       
        if(sentance[0] >= 'a' && sentance[0] <= 'z'){
            sentance[0] = sentance[0] - 32;
        }
    }
}
",0
anig922,1696755981,2,"void Capitalise(char * sentance)
{
    int j;
    for (j = 0; j < strlen(sentance); j = j + 1) {
       
        if (sentance[j] == ' ' && sentance[j + 1] >= 97) {
            sentance[j + 1] -= 32;  
        }  
       
        if(sentance[0] >= 'a' && sentance[0] <= 'z'){
            sentance[0] = sentance[0] - 32;
        }
    }
}
",1
aosm976,1696822006,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int lowerCase = 0;
    int firstIndex = 1;
    int precedingSpace = 0;
    int stringLength = strlen(phrase);
    int char_index = 0;
    char charChange;

    for (i = 0; i < stringLength; i++)
    {   
        char_index = phrase[i];

        /* check if character is a lower case letter */
        if ((97 <= char_index) && (char_index <= 122))
        {
            lowerCase = 1;
        }
        
        /* check if character is the in the first index of string*/
        if (i != 0)
        {
            firstIndex = 0;
        }

        /* check if character is preceded by a whitespace */
        if (phrase[i - 1] == 32)
        {
            precedingSpace = 1;
        }
        else
        {
            precedingSpace = 0;
        }

        if (lowerCase && (precedingSpace || firstIndex))
        {
            charChange = phrase[i];
            phrase[i] = charChange - 32;
        }    
        
    }
}
",0
aosm976,1696822135,2,"void Capitalise(char *phrase)
{
    int i = 0;
    int lowerCase = 0;
    int firstIndex = 1;
    int precedingSpace = 0;
    int stringLength = strlen(phrase);
    int char_index = 0;
    char charChange;

    for (i = 0; i < stringLength; i++)
    {   
        char_index = phrase[i];

        /* check if character is a lower case letter */
        if ((97 <= char_index) && (char_index <= 122))
        {
            lowerCase = 1;
        }
        {
            lowerCase = 0;
        }
        
        /* check if character is the in the first index of string*/
        if (i != 0)
        {
            firstIndex = 0;
        }

        /* check if character is preceded by a whitespace */
        if (phrase[i - 1] == 32)
        {
            precedingSpace = 1;
        }
        else
        {
            precedingSpace = 0;
        }

        if (lowerCase && (precedingSpace || firstIndex))
        {
            charChange = phrase[i];
            phrase[i] = charChange - 32;
        }    
        
    }
}
",0
aosm976,1696822213,3,"int i = 0;
    int lowerCase = 0;
    int firstIndex = 1;
    int precedingSpace = 0;
    int stringLength = strlen(phrase);
    int char_index = 0;
    char charChange;

    for (i = 0; i < stringLength; i++)
    {   
        char_index = phrase[i];

        /* check if character is a lower case letter */
        if ((97 <= char_index) && (char_index <= 122))
        {
            lowerCase = 1;
        }
        else
        {
            lowerCase = 0;
        }
        
        
        /* check if character is the in the first index of string*/
        if (i != 0)
        {
            firstIndex = 0;
        }

        /* check if character is preceded by a whitespace */
        if (phrase[i - 1] == 32)
        {
            precedingSpace = 1;
        }
        else
        {
            precedingSpace = 0;
        }

        if (lowerCase && (precedingSpace || firstIndex))
        {
            charChange = phrase[i];
            phrase[i] = charChange - 32;
        }    
        
    }",0
aosm976,1696822257,4,"void Capitalise(char *phrase)
{
    int i = 0;
    int lowerCase = 0;
    int firstIndex = 1;
    int precedingSpace = 0;
    int stringLength = strlen(phrase);
    int char_index = 0;
    char charChange;

    for (i = 0; i < stringLength; i++)
    {   
        char_index = phrase[i];

        /* check if character is a lower case letter */
        if ((97 <= char_index) && (char_index <= 122))
        {
            lowerCase = 1;
        }
        else
        {
            lowerCase = 0;
        }
        
        
        /* check if character is the in the first index of string*/
        if (i != 0)
        {
            firstIndex = 0;
        }

        /* check if character is preceded by a whitespace */
        if (phrase[i - 1] == 32)
        {
            precedingSpace = 1;
        }
        else
        {
            precedingSpace = 0;
        }

        if (lowerCase && (precedingSpace || firstIndex))
        {
            charChange = phrase[i];
            phrase[i] = charChange - 32;
        }    
        
    }
}
",1
apan786,1696813843,1,"#include <stdio.h>
#include <stdbool.h>

bool lowercase(char letter) {
    return (letter >= 'a' && letter <= 'z');
}

char uppercase(char letter) {
    if (lowercase(letter)) {
        return letter - ('a' - 'A');
    }
    return letter;
}

void Capitalise(char *phrase) {
    bool new_word = true; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (lowercase(phrase[i]) && new_word) {
            phrase[i] = uppercase(phrase[i]); 
            new_word = false;
        } else if (phrase[i] == ' ') {
            new_word = true; 
        } else {
            new_word = false;
        }
    }
}",1
apat750,1696742457,1,"void Capitalise(char *phrase){
    int i=0;
    for(i=0; phrase[i]!= '\0'; i++){
    
    if(phrase[i]==' '){
        phrase[i+1] = phrase[i+1]-('a'- 'A');
        
    }
    if (i==0){
        if(phrase[i] <= 'z' && phrase[i] >= 'a'){
            phrase[i] = phrase[i]-('a'- 'A');
        }
        
    }
    
}
}",0
apat750,1696742553,2,"void Capitalise(char *phrase){
    int i=0;
    for(i=0; phrase[i]!= '\0'; i++){
    
    if(phrase[i]==' '){
        if(phrase[i] <= 'z' && phrase[i] >= 'a'){
            phrase[i+1] = phrase[i+1]-('a'- 'A');
        }
        
    }
    if (i==0){
        if(phrase[i] <= 'z' && phrase[i] >= 'a'){
            phrase[i] = phrase[i]-('a'- 'A');
        }
        
    }
    
}
}",0
apat750,1696742895,3,"
void Capitalise(char *phrase){
    int i=0;
    
    for(i=0; phrase[i]!= '\0'; i++){
        if (i==0){
            if(phrase[i] <= 'z' && phrase[i] >= 'a'){
            phrase[i] = phrase[i]-('a'- 'A');
            continue;
            
        }
        
    }
        if(phrase[i]==' '){
            if(phrase[i+1] <= 'z' && phrase[i+1] >= 'a'){
                phrase[i+1] = phrase[i+1]-('a'- 'A');
        }
        
    }
    
    
}
}",1
apat824,1696838196,1,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++) {
        
        if (phrase[i] >= 'a' && phrase[i] <= 'z'){
            
            if (i == 0 || phrase[i-1]== ' ') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        
    }
}
",1
apen181,1696626371,1,"void Capitalise(char *phrase)
{
    int i;
    for (i = 0; i < strlen(phrase); i++) {
        
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] -= 32;  // Convert lowercase to uppercase
        }
        else if(phrase[0] >= 'a' && phrase[0] <= 'z'){
            phrase[0] -= 32;
        }
    }
}
   ",1
apur448,1696769202,1,"#include <stdio.h>

// Capitalises the first letter of every word.
void Capitalise(char *phrase)
{
    int i = 1;

    if (phrase[0] >= 'a' && phrase[0] <=  'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    while (phrase[i] != '\0') {    
        if (phrase[i] == 32) {
            if (phrase[i+1] >= 'a' && phrase[i+1] <=  'z') {
                phrase[i+1] = phrase[i+1] - ('a' - 'A');
                }
        }
        i++;
    }
}",1
aqu284,1696832974,1,"void Capitalise(char* phrase)
{
    int length = strlen(phrase);

    phrase[0] = phrase[0] - 32;
    for (int i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}
",0
aqu284,1696833338,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
    int length = strlen(phrase);

    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    phrase[0] = phrase[0] - 32;
    
    for (int i = 0; i < length; i++) {
        if (phrase[i] == ' ' && (phrase[i] >= 'a' && phrase[0] <= 'z')) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}",0
aqu284,1696833370,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
    int length = strlen(phrase);

    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    phrase[0] = phrase[0] - 32;
    
    for (int i = 0; i < length; i++) {
        if (phrase[i] == ' ' && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}
",0
aqu284,1696833529,4,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
    int length = strlen(phrase);

    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    phrase[0] = phrase[0] - 32;
    
    for (int i = 0; i < length; i++) {
        if (phrase[i] == ' ' && (phrase[i+1] >= 'a' && phrase[i+1] <= 'z')) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}",1
arah160,1696841131,1,"void Capitalise(char *phrase)
{
    if (*phrase >= 97 && *phrase <= 122) {
        *phrase = toupper(*phrase);

         }
    phrase++;
    while (*phrase != '\0'){
        if (*phrase >= 97 && *phrase <= 122 && *(phrase - 1) == ' '){
            *phrase = toupper(*phrase);
        }
        phrase++;
    }
}",1
arus530,1696301092,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    phrase[0] = Upper(phrase[0]);

    for (int i = 1; i < length; i++){
        if (phrase[i] == ' '){
            phrase[i+1] = Upper(phrase[i+1]);
        }
    }
}

char Upper(char letter)
{
    int num = letter;
    if(num <= 122 && num >= 97){
        num = num - 97 + 65;
    }
    letter = num;

    return letter;
}
",0
arus530,1696301408,2,"void Capitalise(char *phrase)
{
    char Upper(char letter);
    int length = strlen(phrase);

    phrase[0] = Upper(phrase[0]);

    int num = phrase[0];

    for (int i = 1; i < length; i++){
        if (phrase[i] == ' '){
            phrase[i+1] = Upper(phrase[i+1]);
        }
    }
}

char Upper(char letter)
{
    int num = letter;
    if(num <= 122 && num >= 97){
        num = num - 97 + 65;
    }
    letter = num;

    return letter;
}",0
arus530,1696301467,3,"void Capitalise(char *phrase)
{
    char Upper(char letter);
    int length = strlen(phrase);

    phrase[0] = Upper(phrase[0]);

    for (int i = 1; i < length; i++){
        if (phrase[i] == ' '){
            phrase[i+1] = Upper(phrase[i+1]);
        }
    }
}

char Upper(char letter)
{
    int num = letter;
    if(num <= 122 && num >= 97){
        num = num - 97 + 65;
    }
    letter = num;

    return letter;
}",1
aryu462,1696806013,1,"#include <stdio.h> 
void Capitalise(char *phrase)
{
int x = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phase[i] >= 'a' && phrase[i] <= 'z' && x) {
            phase[i] -= 32; 
            x = 0; 
        } else if (phase[i] == ' ') {
            x = 1;
        } else {
            x = 0;
        }
    }
}
",0
aryu462,1696806021,2,"#include <stdio.h> 
void Capitalise(char *phrase)
{
int x = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && x) {
            phrase[i] -= 32; 
            x = 0; 
        } else if (phase[i] == ' ') {
            x = 1;
        } else {
            x = 0;
        }
    }
}
",0
aryu462,1696806034,3,"#include <stdio.h> 
void Capitalise(char *phrase)
{
int x = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && x) {
            phrase[i] -= 32; 
            x = 0; 
        } else if (phrase[i] == ' ') {
            x = 1;
        } else {
            x = 0;
        }
    }
}
",1
asaa285,1696798581,1,"#include <stdio.h>
#include <ctype.h>
#include <string.h>


void Capitalise(char *phrase)
{
    int stringLength = strlen(phrase);
    int isSpace = 1;
    for (int i; i<stringLength;i++)
    {
        if ((isalpha(phrase[i]) != 0) && (isSpace == 1))
        {
            phrase[i] = toupper(phrase[i]);
            isSpace = 0;
        }
        if (phrase[i] == ' ')
        {
            isSpace = 1;
        }
    }
}",0
asaa285,1696798873,2,"#include <stdio.h>
#include <ctype.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int stringLength = strlen(phrase);
    int isSpace = 1;
    for (int i; i<stringLength;i++)
    {
        if ((islower(phrase[i]) != 0) && (isSpace))
        {
            phrase[i] = toupper(phrase[i]);
            isSpace = 0;
        }
        else if (isspace(phrase[i]))
        {
            isSpace = 1;
        }
        else
        {
            isSpace = 0;
        }
    }
}",0
asaa285,1696799126,3,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char *phrase) 
{
    int stringLength = strlen(phrase);
    int capitaliseNext = 1; 

    for (int i = 0; i < stringLength; i++) 
    {
        if (isspace(phrase[i])) 
        {
            capitaliseNext = 1; 
        } 
        else if (islower(phrase[i]) && capitaliseNext) 
        {
            phrase[i] = toupper(phrase[i]);
            capitaliseNext = 0; 
        } 
        else 
        {
            capitaliseNext = 0; 
        }
    }
}
",1
asah845,1696718461,1,"void Capitalise(char *phrase)
{

int length = strlen(phrase);
int i;



for (i = 0; i < length; i++) {
	if (i == 0 && phrase[i] == ' ') {
		phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
	} else if (i == 0 && phrase[i] != ' ') {
		phrase[i] = phrase[i] - ('a' - 'A');
	} else if (phrase[i] == ' ') {
		phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
	}
}

}",0
asah845,1696719113,2,"void Capitalise(char *phrase)
{

int length = strlen(phrase);
int i;



for (i = 0; i < length; i++) {
	if (i == 0 && phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
		phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
	} else if (i == 0 && phrase[i] != ' '&& phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - ('a' - 'A');
	} else if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
		phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
	} else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
		phrase[i] = phrase[i];
	}
}

}",1
ashe298,1696840156,1,"void Capitalise(char *phrase)
{
  int Cap = 1;
  
  for(int i = 0; phrase[i]; i++){
      if((phrase[i]>='a'&& phrase[i]<='z')||(phrase[i]>='A'&& phrase[i]<='Z')){
          if (Cap){
              if(phrase[i]>='a'&& phrase[i]<='z'){
                  phrase[i] -= 32;
              }
              Cap = 0;
          }
          else{
              if(phrase[i]>='A'&& phrase[i]<='Z'){
                  phrase[i] += 32;
              }
          }
      }
      else{
          Cap = 1;
      }
  }
  
}
",0
ashe298,1696840484,2,"void Capitalise(char *phrase)
{
  int Cap = 1;
  
  for(int i = 0; phrase[i]; i++){
      if((phrase[i]>='a'&& phrase[i]<='z')||(phrase[i]>='A'&& phrase[i]<='Z')){
          if (Cap){
              if(phrase[i]>='a'&& phrase[i]<='z'){
                  phrase[i] -= 32;
              }
              Cap = 0;
          }
          else{
              if(phrase[i]>='A'&& phrase[i]<='Z'){
                  phrase[i] += 32;
              }
          }
      }
      else if(phrase[i] == '-') {
          Cap = 1;
      }
  }
  
}
",0
ashe298,1696847568,3,"int lowercase(char c){
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase)
{
    int word = 1;
    for (int i = 0; phrase[i] != '\0'; i++){
        if (lowercase(phrase[i]) && word){
            phrase[i] -= 32;
            word = 0;
        }
        else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '-'){
            word = 1;
        } 
    }
}
",0
ashe298,1696847779,4,"int lowercase(char c){
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase)
{
    int word = 1;
    for (int i = 0; phrase[i] != '\0'; i++){
        if (lowercase(phrase[i]) && word){
            phrase[i] -= 32;
            word = 0;
        }
        else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '-'){
            word = 1;
        } 
        else {
            word = 0;
        }
    }
}
",0
ashi565,1696242038,1,"#include <stdio.h>
#include <stdbool.h>

// Helper function to check if a character is a lowercase alphabet
bool IsLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Helper function to convert a character to lowercase
char ToLower(char c) {
    if (IsLowerCase(c)) {
        return c;
    }
    // If it's not a lowercase alphabet, return it unchanged
    return c;
}

void Capitalise(char *phrase) {
    bool newWord = true; // Indicates the start of a new word
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (newWord && IsLowerCase(phrase[i])) {
            phrase[i] = ToLower(phrase[i]) - ('a' - 'A'); // Capitalize the character
            newWord = false;
        } else if (phrase[i] == ' ') {
            newWord = true; // Found a space, mark the start of a new word
        }
    }
}


",0
ashi565,1696807128,2,"#include <stdio.h>
#include <stdbool.h>

bool isLowercaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    bool capitalizeNext = true;
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlpha(phrase[i]) && capitalizeNext) {
            phrase[i] -= 32; // Convert to uppercase by subtracting 32 (ASCII difference)
            capitalizeNext = false;
        } else if (!isLowercaseAlpha(phrase[i])) {
            capitalizeNext = true;
        }
    }
}
",0
ashi565,1696807392,3,"#include <stdio.h>
#include <ctype.h>

// Helper function to check if a character is a lowercase letter
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character of each word in a phrase
void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to indicate whether the next character should be capitalized
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i]) && capitalizeNext) {
            phrase[i] = toupper(phrase[i]);
            capitalizeNext = 0; // Reset the flag
        } else if (!isLowerCase(phrase[i])) {
            capitalizeNext = 1; // Set the flag to capitalize the next lowercase letter
        }
    }
}",0
ashi565,1696847698,4,"#include <stdio.h>

void CapitalizeWords (char* str) {
    
    int newWord = 1;
    
    for int (i = 0; str[i] != '\0'; i++) {
        if (str[i] == '' || str[i] == '\t' || str[i] == '\n' || str[i] == '\r') {
            newWord = 1;
        } else if (newWord) {
            if (str[i] >= 'a' && str[i] <= 'z') {
                str[i] -= ('a' - 'A');
            
            }
            newWord = 0;
        } else {
    
        }
    }        
}                ",0
ashi565,1696847739,5,"#include <stdio.h>

void Capitalise (char* str) {
    
    int newWord = 1;
    
    for int (i = 0; str[i] != '\0'; i++) {
        if (str[i] == '' || str[i] == '\t' || str[i] == '\n' || str[i] == '\r') {
            newWord = 1;
        } else if (newWord) {
            if (str[i] >= 'a' && str[i] <= 'z') {
                str[i] -= ('a' - 'A');
            
            }
            newWord = 0;
        } else {
    
        }
    }        
}                ",0
ashi565,1696847853,6,"#include <stdio.h>

// newWord = output characters.

void Capitalise (char* str) {
    int newWord = 1;
    
    for int (i = 0; str[i] != '\0'; i++) {
        if (str[i] == ' ' || str[i] == '\t' || str[i] == '\n' || str[i] == '\r') {
            newWord = 1;
        } else if (newWord) {
            if (str[i] >= 'a' && str[i] <= 'z') {
                str[i] -= ('a' - 'A');
            
            }
            newWord = 0;
        } else {
    
        }
    }        
}                ",0
ashi565,1696848095,7,"#include <stdio.h>

// newWord = output characters.

void capitalizeWords (char* str) {
    int newWord = 1;
    
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == ' ' || str[i] == '\t' || str[i] == '\n' || str[i] == '\r') {
            newWord = 1;
        } else if (newWord) {
            if (str[i] >= 'a' && str[i] <= 'z') {
                str[i] -= ('a' - 'A');
            
            }
            newWord = 0;
        } else {
    
        }
    }        
}                
",0
ashi565,1696848128,8,"#include <stdio.h>

// newWord = output characters.

void Capitalise (char* str) {
    int newWord = 1;
    
    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == ' ' || str[i] == '\t' || str[i] == '\n' || str[i] == '\r') {
            newWord = 1;
        } else if (newWord) {
            if (str[i] >= 'a' && str[i] <= 'z') {
                str[i] -= ('a' - 'A');
            
            }
            newWord = 0;
        } else {
    
        }
    }        
}                
",1
asim819,1696661624,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	
	if (phrase[0] >= 97 && phrase[0] <= 122 && phrase[0] != 32) {
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 1; i < length; i++) {

		if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i - 1] == 32) {

			phrase[i] = phrase[i] - 32;
		}


	}
}",1
aski294,1696645410,1,"void Capitalise(char *phrase)
{
	int i = 0;

	phrase[0] -= 32;

	while (phrase[i] != '\0') {
		if (phrase[i] == 32) {
			phrase[i + 1] -= 32; 
		}
		i++;
	}
}

",0
aski294,1696645725,2,"char caps(char letter)
{
	if (letter > 96 && letter < 123) {
		letter -= 32; 
	}
}

void Capitalise(char *phrase)
{
	int i = 0;

	phrase[0] = caps(phrase[0]);

	while (phrase[i] != '\0') {
		if (phrase[i] == 32) {
			phrase[i + 1] = caps(phrase[i + 1]); 
		}
		i++;
	}
}",0
aski294,1696645861,3,"char caps(char letter)
{
	if (letter > 96 && letter < 123) {
		letter -= 32; 
	}

	return letter;
}

void Capitalise(char *phrase)
{
	int i = 0;

	phrase[0] = caps(phrase[0]);

	while (phrase[i] != '\0') {
		if (phrase[i] == 32) {
			phrase[i + 1] = caps(phrase[i + 1]); 
		}
		i++;
	}
}
",1
asmi629,1696822365,1,"void Capitalise(char *phrase)
{
for (int i=0; i < strlen(phrase);i++){
    if ((phrase[i-1] = 32 || i == 0) && phrase[i] > 96);
    phrase[i] = phrase[i] - 32;
}
}
",0
asmi629,1696824196,2,"void Capitalise(char *phrase)
{
    if (phrase[0] > 96 && phrase[0] < 123){
    phrase[0] = phrase[0] - 32;
    }
for (int i=1; i < strlen(phrase);i++){
    if (phrase[i-1] == 32 && phrase[i] > 96){
    phrase[i] = phrase[i] - 32;
    }
    }
}
int mai",0
asmi629,1696824221,3,"void Capitalise(char *phrase)
{
    if (phrase[0] > 96 && phrase[0] < 123){
    phrase[0] = phrase[0] - 32;
    }
for (int i=1; i < strlen(phrase);i++){
    if (phrase[i-1] == 32 && phrase[i] > 96){
    phrase[i] = phrase[i] - 32;
    }
    }
}",1
atay777,1696651029,1,"char upgrade(char firstletter)
{
    if (firstletter<=122 && firstletter>=97)
    {
        firstletter-=32;
    }
    return firstletter;
}

void Capitalise(char *phrase)
{
    int length=strlen(phrase);
    int i;
    phrase[0]=upgrade(phrase[0]);
    for (i = 1; i < length; i++)
    {
        if (phrase[i-1]==' ')
        {
            phrase[i]=upgrade(phrase[i]);
        }
        
    }
}",1
atee059,1696211015,1,"void Capitalise(char *phrase)
{
    
    if (phrase[0] >= 97 && phrase[0] <= 122){
        phrase[0] -= 32;
    }
    
    int i;
    while (phrase[i] != '\0'){
        if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32){
            phrase[i] -= 32;
        }
        i++;
    }
}
",0
atee059,1696212714,2,"void Capitalise(char *phrase)
{
    
    if (phrase[0] >= 97 && phrase[0] <= 122){
        phrase[0] -= 32;
    }
    
    int i = 0;
    while (phrase[i] != '\0'){
        if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32){
            phrase[i] -= 32;
        }
        i++;
    }
}
",1
atho643,1696329267,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    if(isalpha(phrase[0])) {
        phrase[0] = toupper(phrase[0]);
    }
    
    for(int i=0; i<length;i++) {
        if(isspace(phrase[i])) {
            if(isalpha(phrase[i+1])) {
                 phrase[i+1] = toupper(phrase[i+1]);
            }
        
    }
    
}",0
atho643,1696329350,2,"void Capitalise(char *phrase) {
    int length = strlen(phrase);
    
    if(isalpha(phrase[0])) {
        phrase[0] = toupper(phrase[0]);
    }
    
    for(int i=0; i<length;i++) {
        if(isspace(phrase[i])) {
            if(isalpha(phrase[i+1])) {
                 phrase[i+1] = toupper(phrase[i+1]);
            }
        
    }
    
}",0
atho643,1696334387,3,"void Capitalise(char *phrase) 
{
     if(phrase[0]>='a' && phrase[0]<='z') {
        phrase[0] = phrase[0]-32;
     }
    
    for(int i=0; phrase[i] != '\0';i++) {
        if(phrase[i] ==' ') {
            if (phrase[i+1] != '\0'){
                if(phrase[0]>='a' && phrase[0]<='z') {
                    phrase[i+1] = phrase[i+1]-32;
                }
            }
        }
    }
    
    
}
",0
atho643,1696334472,4,"void Capitalise(char *phrase) 
{
     if(phrase[0]>='a' && phrase[0]<='z') {
        phrase[0] = phrase[0]-32;
     }
    
    for(int i=0; phrase[i] != '\0';i++) {
        if(phrase[i] ==' ') {
            if (phrase[i+1] != '\0'){
                if(phrase[i+1]>='a' && phrase[i+1]<='z') {
                    phrase[i+1] = phrase[i+1]-32;
                }
            }
        }
    }
    
    
}
",1
athu157,1696325243,1,"void Capitalise(char *phrase)
{
  	int i = 1;
	phrase[0] = phrase[0] - ('a' - 'A');
	while (phrase[i] != '\0') {
		if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}  
}
",0
athu157,1696325444,2,"void Capitalise(char *phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	int i = 1;
	while (phrase[i] != '\0') {
		if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}
}
",1
atup175,1696846907,1,"int isLowerCase(char *phrase){
    return (*phrase >= 'a' && *phrase <= 'z');
}
    
char toUpperCase(char *phrase){
    if(isLowerCase(phrase)){
        return *phrase - ('a' - 'A');
    }
    return *phrase;
}
    
void Capitalize(char *phrase){
    *phrase = toUpperCase(phrase);
        
    char *p = phrase + 1;
    while (*p != '\0'){
        if (*(p - 1) == ' '){
            *p = toUpperCase(p);
        }
        p++;
    }
}

",0
atup175,1696846933,2,"int isLowerCase(char *phrase){
    return (*phrase >= 'a' && *phrase <= 'z');
}
    
char toUpperCase(char *phrase){
    if(isLowerCase(phrase)){
        return *phrase - ('a' - 'A');
    }
    return *phrase;
}
    
void Capitalise(char *phrase){
    *phrase = toUpperCase(phrase);
        
    char *p = phrase + 1;
    while (*p != '\0'){
        if (*(p - 1) == ' '){
            *p = toUpperCase(p);
        }
        p++;
    }
}

",1
avan381,1696747815,1,"void Capitalise(char *phrase)
{

//Find length of string: 
  int length = 0;
  while (phrase[length] != '\0'){
      length++;
  }
 
 //Find spaces in string 
 for (int i = 0; i < length; i++){
     
     //if space present then assess nxt character (first character of nxt word)
     if (phrase[i] == 32){
         
         //if nxt character lower case then capitalize
         if ((phrase[i + 1] >= 97) && (phrase[i + 1] <= 122)){
             phrase[i + 1] = phrase[i + 1] - 32;
         }
         
     }
 }
    
 //Capitalise the first letter manually (if capitalisable)
 
         //if nxt character lower case then capitalize
         if ((phrase[0] >= 97) && (phrase[0] <= 122)){
             phrase[0] = phrase[0] - 32;
        }
  


}",1
awal599,1696471693,1,"void Capitalise(char *phrase)
{
    int i=0;
    phrase[0]=phrase[0]-32;
    while (phrase[i] != '\0') 
    {
        if (phrase[i] == ' ')
        {
        phrase[i+1] = phrase[i+1] - 32;
        }
        i++;
    }
   
    
}
",0
awal599,1696472347,2,"void Capitalise(char *phrase)
{
    int i=0;
    if (phrase[0]>64 && phrase[0]<91)
    {
        phrase[0]=phrase[0];
    }
    else
    {
    phrase[0]=phrase[0]-32;
    }
    while (phrase[i] != '\0') 
    {
        if (phrase[i+1]>64 && phrase[i+1]<91)
        {
            phrase[i+1]= phrase[i+1];
        }
        else if (phrase[i] == ' ')
        {
        phrase[i+1] = phrase[i+1] - 32;
        
        }
        i++;
        
    }
   
    
}
",0
awal599,1696472846,3,"void Capitalise(char *phrase)
{
    int i=0;
    if (phrase[0]>64 && phrase[0]<91)
    {
        phrase[0]=phrase[0];
    }
    else
    {
    phrase[0]=phrase[0]-32;
    }
    while (phrase[i] != '\0') 
    {
        if (phrase[i+1]>64 && phrase[i+1]<91)
        {
            phrase[i+1]= phrase[i+1];
        }
        else if (phrase[i] == ' ' && phrase[i+1]>64)
        {
        phrase[i+1] = phrase[i+1] - 32;
        
        }
        i++;
        
    }
   
    
}
",0
awal599,1696473423,4,"void Capitalise(char *phrase)
{
    int i=0;
    if (phrase[0]>96 && phrase[0]<123)
    {
        phrase[0]=phrase[0]-32;
    }
    while (phrase[i] != '\0') 
    {
        if (phrase[i+1]>64 && phrase[i+1]<91)
        {
            phrase[i+1]= phrase[i+1];
        }
        else if (phrase[i] == ' ' && phrase[i+1]>64)
        {
        phrase[i+1] = phrase[i+1] - 32;
        
        }
        i++;
        
    }
   
    
}

",1
awar747,1696840265,1,"void Capitalise(char *phrase) {
    int i = 0;

    // Capitalize the first character
    if (isLowercase(phrase[0])) {
        phrase[0] -= 32; // Convert lowercase to uppercase in ASCII
    }

    while (phrase[i] != '\0') {
        // If the current character is a space, capitalize the next character if it's lowercase
        if (phrase[i] == ' ' && isLowercase(phrase[i + 1])) {
            phrase[i + 1] -= 32; // Convert lowercase to uppercase in ASCII
        }
        i++;
    }
}",0
awar747,1696840321,2,"void Capitalise(char *phrase) {
    int i = 0;

    // Capitalize the first character
    if (Capitalise(phrase[0])) {
        phrase[0] -= 32; // Convert lowercase to uppercase in ASCII
    }

    while (phrase[i] != '\0') {
        // If the current character is a space, capitalize the next character if it's lowercase
        if (phrase[i] == ' ' && isLowercase(phrase[i + 1])) {
            phrase[i + 1] -= 32; // Convert lowercase to uppercase in ASCII
        }
        i++;
    }
}",0
awar747,1696840441,3,"void Capitalise(char *phrase) {
    int capitalizeNext = 1;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toUpper(phrase[i]);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            capitalizeNext = 1; 
        }
    }
}",0
awar747,1696840517,4,"
char CapitalizeChar(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 32; // Convert to uppercase ASCII code
    }
    return c; 
}",0
awar747,1696842385,5,"char CapitalizeChar(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 32; // Convert to uppercase ASCII code
    }
    return c; // Return unchanged if not a lowercase letter
}

void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitalizeNext = 1; 

    for (int i = 0; i < len; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = CapitalizeChar(phrase[i]);
            capitalizeNext = 0; 
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1; 
        }
    }
}",0
awar747,1696842650,6,"char CapitalizeChar(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 32; // Convert to uppercase ASCII code
    }
    return c; // Return unchanged if not a lowercase letter
}

void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitalizeNext = 1; 

    for (int i = 0; i < len; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = CapitalizeChar(phrase[i]);
            capitalizeNext = 0; 
        } else if (phrase[i] == ' ' || phrase[i] == '\t') {
            capitalizeNext = 1; 
        }
    }
}",0
awar747,1696842744,7,"char CapitalizeChar(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 32; // Convert to uppercase ASCII code
    }
    return c; // Return unchanged if not a lowercase letter
}

void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitalizeNext = 1;
    for (int i = 0; i < len; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] -= 32; // Convert to uppercase ASCII code
            capitalizeNext = 0; 
        } else if (phrase[i] == ' ' || phrase[i] == '\t') {
            capitalizeNext = 1; 
        } else {
            capitalizeNext = 0; 
        }
    }
}",1
awil907,1696285284,1,"void Capitalise(char *phrase)
{
    int i;
    int PhraseLength;
    PhraseLength = strlen(phrase);

    for(i = 0; i < PhraseLength; i++){
        if(phrase[i] == 32){
            phrase[i+1] -= 32;
        }
        if(i == 0){
            phrase[i] -= 32;
        }
    }
}",0
awil907,1696286072,2,"void Capitalise(char *phrase)
{
    int i;
    int PhraseLength;
    PhraseLength = strlen(phrase);

    if(phrase[0] >= 97 && phrase[0] <= 122){
        phrase[0] -= 32;
    }

    for(i = 1; i < PhraseLength-1; i++){
        if(phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32){
            phrase[i] -= 32;
        }
    }
}
",1
awri757,1696297618,1,"char UpperChar(char letter) {
    if ((letter >= 97) && (letter <= 122)){
        letter = letter - 32;
    }
    return letter;
}

void Capitalise(char* phrase)
{
    //ex3
    int i;
    int length;
    length = strlen(phrase);
    phrase[0] = UpperChar(phrase[0]);
    for (i = 1; i < length; i++) {
        if (phrase[i] == 32) {
            phrase[i+1] = UpperChar(phrase[i+1]);
        }
    }
    
    return;
}
",1
ayan607,1696676176,1,"void Capitalise(char* word)
{
    int i;
    while (word[i] != '\0'){
        if (word[i] >= 'a' && word[i] <= 'z'){
            if (i - 1 == -1 || word[i-1] == ' '){
                word[i] = word[i] - ('a' - 'A');
            }
        }
        i++;
    }

}",0
ayan607,1696676364,2,"void Capitalise(char* word)
{
    int i = 0;
    while (word[i] != '\0'){
        if (word[i] >= 'a' && word[i] <= 'z'){
            if (i - 1 == -1 || word[i-1] == ' '){
                word[i] = word[i] - ('a' - 'A');
            }
        }
        i++;
    }

}",1
ayou303,1696479892,1,"
#include <stdio.h>
#include <string.h>



void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	phrase[0] = phrase[0] - 32;
	for (int i = 0; i <= length; i++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}

	}
}
",0
ayou303,1696480094,2,"
#include <stdio.h>
#include <string.h>



void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 0; i <= length; i++) {
		if (phrase[i] == ' ' && (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')) {

			phrase[i + 1] = phrase[i + 1] - 32;
		}

	}
}
",1
ayou533,1696390650,1,"void Capitalise(char *phrase)
{
       if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;  // Convert to uppercase
    }

    // Iterate over the rest of the characters
    for (int i = 1; phrase[i] != '\0'; i++) {
        // If the current character is a lowercase letter and the previous character is a space
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
            phrase[i] -= 32;  // Convert to uppercase
        }
    }
}   if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;  // Convert to uppercase
    }

    // Iterate over the rest of the characters
    for (int i = 1; phrase[i] != '\0'; i++) {
        // If the current character is a lowercase letter and the previous character is a space
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
            phrase[i] -= 32;  // Convert to uppercase
        }
    }
",0
ayou533,1696390674,2,"void Capitalise(char *phrase)
{
       if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;  // Convert to uppercase
    }

    // Iterate over the rest of the characters
    for (int i = 1; phrase[i] != '\0'; i++) {
        // If the current character is a lowercase letter and the previous character is a space
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
            phrase[i] -= 32;  // Convert to uppercase
        }
    }
}   if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;  // Convert to uppercase
    }

    // Iterate over the rest of the characters
    for (int i = 1; phrase[i] != '\0'; i++) {
        // If the current character is a lowercase letter and the previous character is a space
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
            phrase[i] -= 32;  // Convert to uppercase
        }
    }
}",0
ayou533,1696390683,3,"void Capitalise(char *phrase) {
    // If the first character is a lowercase letter, capitalize it
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;  // Convert to uppercase
    }

    // Iterate over the rest of the characters
    for (int i = 1; phrase[i] != '\0'; i++) {
        // If the current character is a lowercase letter and the previous character is a space
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
            phrase[i] -= 32;  // Convert to uppercase
        }
    }
}",1
ayua214,1696813631,1,"#include <stdio.h>

// Helper function to convert a character to uppercase
char toUpper(char ch) {
    return (ch >= 'a' && ch <= 'z') ? (ch - 32) : ch;
}

void CapitalizeWords(char *phrase) {
    int capitalize = 1;  // Flag to indicate whether to capitalize the next character

    // Traverse the characters in the phrase
    for (int i = 0; phrase[i] != '\0'; i++) {
        char currentChar = phrase[i];

        // Check if the current character is a space
        if (currentChar == ' ') {
            capitalize = 1;  // Next character should be capitalized
        } else {
            // Capitalize the character if it's alphabetic and needs to be capitalized
            if (capitalize && currentChar >= 'a' && currentChar <= 'z') {
                phrase[i] = toUpper(currentChar);
            }

            capitalize = 0;  // Reset the flag
        }
    }
}
",0
ayua214,1696813674,2,"#include <stdio.h>
#include <ctype.h>

void capitalizeWords(char* phrase) {
  // Iterate through each character in the phrase
  for (int i = 0; phrase[i] != '\0'; i++) {
    // Check if the current character is the first character of a word
    if (i == 0 || phrase[i - 1] == ' ') {
      // Capitalize the alphabetic character
      phrase[i] = toupper(phrase[i]);
    }
  }
}",0
ayua214,1696813768,3,"#include <stdio.h>
#include <ctype.h>
#include <string.h>

void capitalizeWords(char* phrase) {
  int length = strlen(phrase);
  int capitalizeNext = 1; // flag to indicate whether the next character should be capitalized
  
  // Iterate through each character in the phrase
  for (int i = 0; i < length; i++) {
    if (isspace(phrase[i])) {
      capitalizeNext = 1;
    }
    else if (capitalizeNext) {
      phrase[i] = toupper(phrase[i]);
      capitalizeNext = 0;
    }
  }
}",0
ayua214,1696813784,4,"#include <stdio.h>
#include <ctype.h>
#include <string.h>

void Capitalise(char* phrase) {
  int length = strlen(phrase);
  int capitalizeNext = 1; // flag to indicate whether the next character should be capitalized
  
  // Iterate through each character in the phrase
  for (int i = 0; i < length; i++) {
    if (isspace(phrase[i])) {
      capitalizeNext = 1;
    }
    else if (capitalizeNext) {
      phrase[i] = toupper(phrase[i]);
      capitalizeNext = 0;
    }
  }
}",1
bate521,1696828538,1,"void Capitalise(char *phrase)
{
    int i = 0;
    phrase[i] = ToUpperCase(phrase[i]);
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            phrase[i+1] = ToUpperCase(phrase[i+1]);
        }
        i++;

}
",0
bate521,1696828729,2,"int ToUpperCase(int cap) {
    if (cap >= 'a' && cap <= 'z') {
        return cap - 'a' + 'A'; 
    }
    return cap;
}

void Capitalise(char *phrase)
{
    int i = 0;
    phrase[i] = ToUpperCase(phrase[i]);
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            phrase[i+1] = ToUpperCase(phrase[i+1]);
        }
        i++;

}
",0
bate521,1696829047,3,"int ToUpperCase(int cap) {
    if (cap >= 'a' && cap <= 'z') {
        return cap - 'a' + 'A'; 
    }
    return cap;
}

void Capitalise(char *phrase)
{
    int i = 0;
    phrase[i] = ToUpperCase(phrase[i]);
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            phrase[i+1] = ToUpperCase(phrase[i+1]);
        }
        i++;
    }
}
",1
bcar662,1696773786,1,"void Capitalise(char *phrase)
{
    int length;
	length = strlen(phrase);

	for (int i = 0; i < length; i++) {
		if (i == 0 && phrase[i] <= 122 && phrase[i] >= 97) {
			phrase[i] = (char)phrase[i] - 32;
		} else if (phrase[i] == ' ' && phrase[i + 1] <= 122 && phrase[i + 1] >= 97) {
			phrase[i + 1] = (char)phrase[i+1] - 32;
		}

	}
	return 0;
}
",0
bcar662,1696773843,2,"void Capitalise(char *phrase)
{
    int length;
	length = strlen(phrase);

	for (int i = 0; i < length; i++) {
		if (i == 0 && phrase[i] <= 122 && phrase[i] >= 97) {
			phrase[i] = (char)phrase[i] - 32;
		} else if (phrase[i] == ' ' && phrase[i + 1] <= 122 && phrase[i + 1] >= 97) {
			phrase[i + 1] = (char)phrase[i+1] - 32;
		}

	}
}
",1
bcha389,1696298521,1,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 'a' + 'A';
	}

	for (int i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			phrase[i+1] = phrase[i+1] - 'a' + 'A';
		}
	}
}",0
bcha389,1696298618,2,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 'a' + 'A';
	}

	for (int i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
			phrase[i+1] = phrase[i+1] - 'a' + 'A';
		}
	}
}",1
bcha726,1696451547,1,"#include <stdio.h>
#include <string.h>

char CapitaliseLetter(char letter);

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);

    phrase[0] = CapitaliseLetter(phrase[0]);

    for (i = 1; i < length; i++) { 
        if (phrase[i - 1] == ' ') {
            phrase[i] = CapitaliseLetter(phrase[i]);
        }
    }
}

char CapitaliseLetter(char letter) {

    if (letter >= 'a' && letter <= 'z')
        letter -= ('a' - 'A');

    return letter;
}",1
bcos422,1696300031,1,"void Capitalise(char* phrase)
{
	phrase[0] = char(phrase[0] - 32);
	int i;
	for (i = 0; i < 100; i++) {
		if (phrase[i] == 32) {
			phrase[i + 1] = char(phrase[i + 1] - 32);
		}
	}
}",0
bcos422,1696300078,2,"void Capitalise(char* phrase)
{
	phrase[0] = phrase[0] - 32;
	int i;
	for (i = 0; i < 100; i++) {
		if (phrase[i] == 32) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",0
bcos422,1696300355,3,"void Capitalise(char* phrase)
{
	if (97 <= phrase[0] && 122 >= phrase[0]) {
		phrase[0] = phrase[0] - 32;
	}
	int i;
	for (i = 0; i < 100; i++) {
		if (phrase[i-1] == 32 && 97<= phrase[i] && 122>=phrase[i]) {
			phrase[i] = phrase[i] - 32;
		}
	}
}",1
bcru157,1696303104,1,"void Capitalise(char *phrase)
{
	int i = 0;

	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (phrase[i - 1] == 32 || i == 0) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		i++;
	}
}",1
besk864,1696481388,1,"void cap(char letter, char *phrase, int i){
    
    letter = letter - 32;
    phrase[i+1] = letter;
}
void Capitalise(char *phrase)
{
    
for (int i = 0; i < (strlen(phrase)); i++){
    
    if (phrase[i] == 32){
        
        cap(phrase[i+1], phrase, i);
        
        
    }
    
   
}
 if (phrase[0] != 32){
        phrase[0] = phrase[0] - 32;
    }
}
",0
besk864,1696481677,2,"void cap(char letter, char *phrase, int i){
    
    letter = letter - 32;
    phrase[i+1] = letter;
}
void Capitalise(char *phrase)
{
    
for (int i = 0; i < (strlen(phrase)); i++){
    
    if (phrase[i] == 32 && phrase[i] < 123 && phrase[i] > 96){
        
        cap(phrase[i+1], phrase, i);
        
        
    }
    
   
}
 if (phrase[0] != 32 && phrase[0] < 123 && phrase[0] > 96){
        phrase[0] = phrase[0] - 32;
    }
}
",0
besk864,1696481768,3,"void cap(char letter, char *phrase, int i){
    
    letter = letter - 32;
    phrase[i+1] = letter;
}
void Capitalise(char *phrase)
{
    
for (int i = 0; i < (strlen(phrase)); i++){
    
    if (phrase[i] == 32 && phrase[i+1] < 123 && phrase[i+1] > 96){
        
        cap(phrase[i+1], phrase, i);
        
        
    }
    
   
}
 if (phrase[0] != 32 && phrase[0] < 123 && phrase[0] > 96){
        phrase[0] = phrase[0] - 32;
    }
}
",1
bfis965,1696394077,1,"void Capitalise(char *phrase)
{
    int length = 0;
    while (phrase[length] != '\0') {
        length++;
    }

    if (phrase[0] >= 97) {
        phrase[0] -= 32;
    }

    for (int i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 97) {
                phrase[i + 1] -= 32;
            }
        }
    }
}
",1
bfla774,1696842042,1,"void Capitalise(char *phrase)
{
   int i = 0;

for (i = 0; phrase[i] != '\0'; i++) {
	phrase[0] = phrase[0] - ('a' - 'A');
	if (phrase[i - 1] == ' ') {
		phrase[i] = phrase[i] - ('a' - 'A');
	}
} 
return 0;
}
",0
bfla774,1696842068,2,"void Capitalise(char *phrase)
{
   int i = 0;

for (i = 0; phrase[i] != '\0'; i++) {
	phrase[0] = phrase[0] - ('a' - 'A');
	if (phrase[i - 1] == ' ') {
		phrase[i] = phrase[i] - ('a' - 'A');
	}
} 

}
",0
bfla774,1696843099,3,"void Capitalise(char *phrase)
{
    int i = 0;

for (i = 0; phrase[i] != '\0'; i++) {
    if (phrase[i] >= 97 && phrase[i] <= 122){
	   if (phrase[i - 1] == ' ') {
		phrase[i] = phrase[i] - ('a' - 'A');}
		
		else if (i ==0){
		       phrase[i] = phrase[i] - ('a' - 'A');
		}
	    
        } 
}
}
",1
bgib630,1696294598,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    if (phrase[0] < 123) && (phrase[0] > 96)
    {
        phrase[0] = ConvertToUpper(phrase[0]);
    }
    
    for (int i = 1; i < length; i++)
    {
        if (phrase[i - 1] == ' ')
        {
            if (phrase[i] < 123) && (phrase > 96)
            {
            phrase[i] = ConvertToUpper(phrase[i]);
            }
        }
    }
}

char ConvertToUpper(char lower)
{
    char upper = lower - 32;
    return upper;
}",0
bgib630,1696307314,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    if (phrase[0] > 96)
    {
        phrase[0] = ConvertToUpper(phrase[0]);
    }
    
    for (int i = 1; i < length; i++)
    {
        if (phrase[i - 1] == ' ')
        {
            if (phrase > 96)
            {
            phrase[i] = ConvertToUpper(phrase[i]);
            }
        }
    }
}

char ConvertToUpper(char lower)
{
    char upper = lower - 32;
    return upper;
}",0
bgib630,1696307500,3,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    if (phrase[0] > 96)
    {
        phrase[0] = phrase[0] - 32;
    }
    
    for (int i = 1; i < length; i++)
    {
        if (phrase[i - 1] == ' ')
        {
            if (phrase[i] > 96)
            {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",1
bgru726,1696667489,1,"void Capitalise(char* phrase)
{
	int space = 0;
	int len = strlen(phrase);
	for (int i = 0; i < len; i++) {
		if (i == 0) { //since the first character wont have a space before it we need a specific conditional for it
			if (phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i] = phrase[i] - 32;
				space = 0;
			}
		}
		if (phrase[i] == ' ') { //every character after a space we need to capitalise.
			space = 1;
		}
		if((phrase[i] >= 'a' && phrase[i] <= 'z') && (space == 1)) { //we only want to capitalize the letter if there is a space directly before it. 
			phrase[i] = phrase[i] - 32;
			space = 0;			
		}
	}
}",0
bgru726,1696667677,2,"void Capitalise(char* phrase)
{
	int space = 0;
	int len = strlen(phrase);
	for (int i = 0; i < len; i++) {
		if (i == 0) { //since the first character wont have a space before it we need a specific conditional for it
			if (phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i] = phrase[i] - 32;
				space = 0;
			}
		}
		if (phrase[i] == ' ') { //every character after a space we need to capitalise.
			space = 1;
		}
		if((phrase[i] >= 'a' && phrase[i] <= 'z') && (space == 1)) { //we only want to capitalize the letter if there is a space directly before it. 
			phrase[i] = phrase[i] - 32;
			space = 0;			
		}
		else if (phrase[i] >= 'A' && phrase[i] <= 'Z') { //if the first letter is already capitalized we dont want to capitalize any more.
			space = 0;
		}
	}
}",1
bguo360,1696206070,1,"void Capitalise(char* phrase)
{
	if (97 <= phrase[0] && phrase[0] <= 122) {
		phrase[0] -= 32;
	}
	for (int i = 1; i < strlen(phrase); i++) {
		if (phrase[i] == 32) {
			while (phrase[i] == 32) {
				i++;
			}
			if (97 <= phrase[i] && phrase[i] <= 122) {
				phrase[i] -= 32;
			}
		}
	}
}",1
bhua898,1696223873,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int capNext = 1;
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            capNext = 1;
        } else if (capNext) {
            phrase[i] = (char)(phrase[i] - 32);
            capNext = 0;
        }
        i++;
    }
}",0
bhua898,1696224306,2,"char CapLetter(char letter) {
    if ((int)letter >= 97 && (int)letter <= 122) {
        return (char)(letter - 32);
    } else {
        return letter;
    }
}

void Capitalise(char *phrase)
{
    int i = 0;
    int capNext = 1;
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            capNext = 1;
        } else if (capNext) {
            phrase[i] = CapLetter(phrase[i]);
            capNext = 0;
        }
        i++;
    }
}",1
bjin223,1696822825,1,"void Capitalise(char *phrase)
{
    int i=0;
    
    //deal with the first one
    phrase[0]=phrase[0]-32;
    
    while (phrase[i] != '\0'){
        if(phrase[i] == ' '){
            phrase[i+1]= phrase[i+1]-32;
        }
        i++;
    }
}
",0
bjin223,1696823749,2,"#define _CRT_SECURE_NO_WARNINGS 
 #include <stdio.h> 
void Capitalise(char *phrase)
{
    int i=0;
    
    //deal with the first one
    if (phrase[i]<= 'z' && phrase[i]>= 'a')
        phrase[0]=phrase[0]-32;
    
    while (phrase[i] != '\0'){
        if(phrase[i] == ' '&& phrase[i]<= 'z' && phrase[i]>= 'a'){
            phrase[i+1]= phrase[i+1]-32;
        }
        i++;
    }
}

int main(void) {
char phrase[100] = ""The University of Auckland"";
Capitalise(phrase);
printf(""%s"", phrase);
    return 0;
}
",0
bjin223,1696823759,3,"#define _CRT_SECURE_NO_WARNINGS 
 #include <stdio.h> 
void Capitalise(char *phrase)
{
    int i=0;
    
    //deal with the first one
    if (phrase[i]<= 'z' && phrase[i]>= 'a')
        phrase[0]=phrase[0]-32;
    
    while (phrase[i] != '\0'){
        if(phrase[i] == ' '&& phrase[i]<= 'z' && phrase[i]>= 'a'){
            phrase[i+1]= phrase[i+1]-32;
        }
        i++;
    }
}

",0
bjin223,1696823976,4,"#define _CRT_SECURE_NO_WARNINGS 
 #include <stdio.h> 
void Capitalise(char *phrase)
{
    int i=0;
    
    //deal with the first one
    if (phrase[i]<= 'z' && phrase[i]>= 'a')
        phrase[0]=phrase[0]-32;
    
    while (phrase[i] != '\0'){
        if(phrase[i] == ' '&& phrase[i+1]<= 'z' && phrase[i+1]>= 'a'){
            phrase[i+1]= phrase[i+1]-32;
        }
        i++;
    }
}

",1
bjon836,1696216056,1,"void Capitalise(char *phrase)
{
       for (int i = 0; i < strlen(phrase); i++) {
        if (i == 0 || phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    } 
}
",0
bjon836,1696217113,2,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++) {
        if (i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
        } else if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z' ) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}
",1
bkho028,1696223464,1,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[i] >= 'a' && phrase[i] <= 'z')
    {
        phrase[i] = phrase[i] - ('a' - 'A');
    }
    for (int i = 1; i < strlen(phrase); i++)
    {
        if (phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            if (phrase[i - 1] == ' ' || phrase[i - 1] == '.' || phrase[i - 1] == ',' || phrase[i - 1] == '!')
            {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    }
}
",1
blar030,1696804604,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i=0;
    int length = strlen(phrase);
    
    //convert & capitalise the first letter in phrase
    if (phrase[0]>=97 && phrase[0]<=122)
        {
            phrase[0]=phrase[0]-32;
        }
    
    //search for other letters to convert & capitalise
    for(i=1; i<length; i++)
    {
        if ((phrase[i]== 32) && (phrase[i+1]>=97) && (phrase[i+1]<=122))
            {
                phrase[i+1]=phrase[i+1]-32;
            }
        }
    }
",1
bli482,1696305925,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
	int space_pos, length;
	int len;
	len = 0;
	while (phrase[len] != '\0') {
		len++;
	}

	phrase[0] = phrase[0] - ('a' - 'A');

	for (int i = 0; i < len; i++)
	{
		if (phrase[i] == ' '){
			space_pos = i;
		}
		if (i == (space_pos + 1)){
			phrase[i] = phrase[i] - ('a' - 'A');
		}
	}
}",0
bli482,1696305937,2,"#include <stdio.h>

void Capitalise(char *phrase)
{
	int space_pos, len;
	int len;
	len = 0;
	while (phrase[len] != '\0') {
		len++;
	}

	phrase[0] = phrase[0] - ('a' - 'A');

	for (int i = 0; i < len; i++)
	{
		if (phrase[i] == ' '){
			space_pos = i;
		}
		if (i == (space_pos + 1)){
			phrase[i] = phrase[i] - ('a' - 'A');
		}
	}
}",0
bli482,1696305960,3,"#include <stdio.h>

void Capitalise(char *phrase) {
    int space_pos, len;
    len = 0;

    while (phrase[len] != '\0') {
        len++;
    }

    phrase[0] = phrase[0] - ('a' - 'A');

    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') {
            space_pos = i;
        }
        if (i == (space_pos + 1)) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}",0
bli482,1696306691,4,"#include <stdio.h>

void Capitalise(char *phrase) {
    int space_pos, len;
    len = 0;

    while (phrase[len] != '\0') {
        len++;
    }
    if ((phrase[0] >= 'a')&&(phrase[0]<='z')){
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (int i = 0; i < len; i++) {
        if ((phrase[i] >= 'a')&&(phrase[i]<='z')&&(phrase[i-1] == ' ')){
            
            phrase[i] = phrase[i] - ('a' - 'A');
            
        }
    }
}",0
bli482,1696306705,5,"#include <stdio.h>

void Capitalise(char *phrase) {
    int len;
    len = 0;

    while (phrase[len] != '\0') {
        len++;
    }
    if ((phrase[0] >= 'a')&&(phrase[0]<='z')){
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (int i = 0; i < len; i++) {
        if ((phrase[i] >= 'a')&&(phrase[i]<='z')&&(phrase[i-1] == ' ')){
            
            phrase[i] = phrase[i] - ('a' - 'A');
            
        }
    }
}",1
bli775,1696333543,1,"void Capitalise(char *phrase) {
    int capitalizeNext = 1;  // Flag to indicate whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext && islower(phrase[i])) {
                phrase[i] = toupper(phrase[i]);
            }
            capitalizeNext = 0;  // Reset the flag after capitalizing a character
        } else {
            // If the character is not alphabetic (e.g., a space), set the flag to capitalize the next character
            capitalizeNext = 1;
        }
    }
}",0
bli775,1696333693,2,"void Capitalise(char *phrase) {
    int capitalizeNext = 1;  

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;  
            }
        } else {
            
            capitalizeNext = (phrase[i] == '-');
        }
    }
}",0
bli775,1696334154,3,"void Capitalise(char *phrase) {
    int capitaliseNext = 1; 
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitaliseNext) {
                phrase[i] = toupper(phrase[i]);
                capitaliseNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else {
           
            if (phrase[i] != '-') {
                capitaliseNext = 1;
            }
        }
    }
}",0
bli775,1696334306,4,"void Capitalise(char *phrase) {
    int capitaliseNext = 1; 
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (islower(phrase[i])) {
            if (capitaliseNext) {
                phrase[i] = toupper(phrase[i]);
                capitaliseNext = 0;
            }
        } else if (isupper(phrase[i])) {
            if (!capitaliseNext) {
                phrase[i] = tolower(phrase[i]);
            }
            capitaliseNext = 0;
        } else {
            capitaliseNext = 1;
        }
    }
}


",0
bli775,1696423569,5,"#include <stdio.h>

int isLowercase(char c) {
    return (c >= 'a' && c <= 'z');
}


void Capitalise(char *phrase) {
    int capitaliseNext = 1;  

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercase(phrase[i]) && capitaliseNext) {
            // Capitalise the character
            phrase[i] = phrase[i] - ('a' - 'A');
            capitaliseNext = 0; 
        } else if (phrase[i] == ' ') {
            
            capitaliseNext = 1;
        }
    }
}
",0
bli775,1696423583,6,"#include <stdio.h>

void Capitalise(char *phrase) {
    int capitaliseNext = 1;  

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercase(phrase[i]) && capitaliseNext) {
            // Capitalise the character
            phrase[i] = phrase[i] - ('a' - 'A');
            capitaliseNext = 0; 
        } else if (phrase[i] == ' ') {
            
            capitaliseNext = 1;
        }
    }
}
",0
bli775,1696423605,7,"#include <stdio.h>

int isLowercase(char c) {
    return (c >= 'a' && c <= 'z');
}


void Capitalise(char *phrase) {
    int capitaliseNext = 1;  

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercase(phrase[i]) && capitaliseNext) {
            // Capitalise the character
            phrase[i] = phrase[i] - ('a' - 'A');
            capitaliseNext = 0; 
        } else if (phrase[i] == ' ') {
            
            capitaliseNext = 1;
        }
    }
}
",0
bli775,1696423732,8,"#include <stdio.h>

int isLowercase(char c) {
    return (c >= 'a' && c <= 'z');
}


void Capitalise(char *phrase) {
    int capitaliseNext = 1;  

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercase(phrase[i]) && capitaliseNext) {
          
            phrase[i] = phrase[i] - ('a' - 'A');
            capitaliseNext = 0; 
        } else if (phrase[i] == ' ' || phrase[i] == '-') {
           
            capitaliseNext = 1;
        } else {
           
            capitaliseNext = 0;
        }
    }
}",0
blin888,1696832532,1,"void Capitalise(char *phrase)
{

    int i;
    i = 0;

    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        i++;
    }
}",0
blin888,1696832810,2,"#include <stdio.h>
void Capitalise(char *phrase)
{

    int i;
    i = 1;

    while (phrase[i] != '\0') {
        if (phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}",0
blin888,1696832983,3,"void Capitalise(char *phrase)
{

    int i;
    i = 0;

    while (phrase[i] != '\0') {
        if (i == 0 || phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}",1
bmac148,1696331568,1,"void Capitalise(char *phrase){
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase [0] - 32;
}
    for (int i = 0; phrase[i] != '\0'; i++) {
        if ((phrase[i] == ' ') && (phrase[i+1] != '\0') && (phrase[i+1] >= 'a' && phrase[i+1] <= 'z')) {
            phrase[i+1] = phrase [i+1] - 32;
        } 
}
}
",1
bora417,1696407400,1,"void Capitalise(char *phrase)
{
    // Finding the length of the phrase 
    int i = 0;
    while (phrase[i] != '\0') {
        i++;
    } 
    int length = i;

    //Capitalising the letters
    for (i = 0; i < length; i++) {    
        //Capitlise first letter of every sentence
        if (i == 0) {
            if ((phrase[i] >= 'a') && (phrase[i] <= 'z')) { //is it lower case
                    phrase[i] = phrase[i] - ('a' - 'A'); //minus 32 from the lower case letter to convert to upper case 
            }
        }
        
        //Captilise after a space
        if (phrase[i] == ' ') {
            if ((phrase[i + 1] >= 'a') && (phrase[i + 1] <= 'z')) { //is it lower case
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A'); //minus 32 from the lower case letter to convert to upper case 
            }
        }
    }
}
",1
bpak212,1696827955,1,"#include <stdio.h>

//This shows us if the character is lowercase
int LowerCase(char c) 
{
    return (c >= 'a' && c <= 'z');
}

// we need to convert a lowercase character to uppercase
char UpperCase(char c)
{
    return c - ('a' - 'A');
}

void Capitalise(char *phrase) 
{
    int capitalisenext = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        // lowercase charcter needs to be capitalised
        if (LowerCase(phrase[i]) && capitalizenext) 
        {
            phrase[i] = UpperCase(phrase[i]);
            capitalizenext = 0;
        }
        
        else if (phrase[i] == ' ') 
        {
            capitalizenext = 1;
        }
        
        else 
        {
            capitalizeNext = 0;
        }
    }
}
",0
bpak212,1696827999,2,"#include <stdio.h>

//This shows us if the character is lowercase
int LowerCase(char c) 
{
    return (c >= 'a' && c <= 'z');
}

// we need to convert a lowercase character to uppercase
char UpperCase(char c)
{
    return c - ('a' - 'A');
}

void Capitalise(char *phrase) 
{
    int capitalisenext = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        // lowercase charcter needs to be capitalised
        if (LowerCase(phrase[i]) && capitalisenext) 
        {
            phrase[i] = UpperCase(phrase[i]);
            capitalisenext = 0;
        }
        
        else if (phrase[i] == ' ') 
        {
            capitalisenext = 1;
        }
        
        else 
        {
            capitalisenext = 0;
        }
    }
}
",1
bpak212,1696828016,3,"#include <stdio.h>

//shows us if the character is lowercase
int LowerCase(char c) 
{
    return (c >= 'a' && c <= 'z');
}

// we need to convert a lowercase character to uppercase
char UpperCase(char c)
{
    return c - ('a' - 'A');
}

void Capitalise(char *phrase) 
{
    int capitalisenext = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        // lowercase charcter needs to be capitalised
        if (LowerCase(phrase[i]) && capitalisenext) 
        {
            phrase[i] = UpperCase(phrase[i]);
            capitalisenext = 0;
        }
        
        else if (phrase[i] == ' ') 
        {
            capitalisenext = 1;
        }
        
        else 
        {
            capitalisenext = 0;
        }
    }
}
",1
bpat907,1696558370,1,"void Capitalise(char *phrase)
{
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
	phrase[0] = phrase[0] - ('a' - 'A');
}

int i = 0;
while (phrase[i] != '\0') {
	if (phrase[i] == ' ') {
		phrase[i+1] = phrase[i+1] - ('a' - 'A');
	}
	i++;
}
}
",0
bpat907,1696558578,2,"void Capitalise(char *phrase)
{
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
	phrase[0] = phrase[0] - ('a' - 'A');
}

int i = 0;
while (phrase[i] != '\0') {
	if (phrase[i] == ' ') {
		if ((phrase[i+1] >= 'a') && (phrase[i+1] <= 'z')) {
			phrase[i+1] = phrase[i+1] - ('a' - 'A');
		}
	}
	i++;
}
}
",1
bril841,1696823409,1,"void Capitalise(char *phrase)
{
    int i;
    int spaceChecker = 1;

    for (i = 0; phrase[i] != '\0'; i++) 
    {
        char currentChar = phrase[i];

        if (currentChar == ' ') 
        {
            spaceChecker = 1;
        } 
        else if (spaceChecker == 1) 
        {
            phrase[i] = toUpperCase(currentChar);
            spaceChecker = 0;
        }
    }
}
",0
bril841,1696823632,2,"void Capitalise(char *phrase)
{
    int i;
    int spaceChecker = 1;

    for (i = 0; phrase[i] != '\0'; i++) 
    {
        char currentChar = phrase[i];

        if (currentChar == ' ') 
        {
            spaceChecker = 1;
        } 
        else if (spaceChecker == 1) 
        {
            phrase[i] = currentChar - 32;
            spaceChecker = 0;
        }
    }
}
",0
bril841,1696824019,3,"void Capitalise(char *phrase)
{
    int i;
    int spaceChecker = 1;

    for (i = 0; phrase[i] != '\0'; i++) 
    {
        char currentChar = phrase[i];

        if (currentChar == ' ') 
        {
            spaceChecker = 1;
        } 
        else if (spaceChecker == 1 && (currentChar >= 'a' && currentChar <= 'z')) 
        {
            phrase[i] = currentChar - 32;
            spaceChecker = 0;
        }
    }
}
",0
bril841,1696824102,4,"void Capitalise(char *phrase)
{
    int i;
    int spaceChecker = 1;

    for (i = 0; phrase[i] != '\0'; i++) 
    {
        char currentChar = phrase[i];

        if (currentChar == ' ') 
        {
            spaceChecker = 1;
        } 
        else if (spaceChecker == 1 && (currentChar >= 'a' && currentChar <= 'z')) 
        {
            phrase[i] = currentChar - 32;
            spaceChecker = 0;
        else
        {
            spaceChecker = 0;
        }
        }
    }
}
",0
bril841,1696824127,5,"void Capitalise(char *phrase)
{
    int i;
    int spaceChecker = 1;

    for (i = 0; phrase[i] != '\0'; i++) 
    {
        char currentChar = phrase[i];

        if (currentChar == ' ') 
        {
            spaceChecker = 1;
        } 
        else if (spaceChecker == 1 && (currentChar >= 'a' && currentChar <= 'z')) 
        {
            phrase[i] = currentChar - 32;
            spaceChecker = 0;
        }
        else
        {
            spaceChecker = 0;
        }
    }
}
",1
bsil719,1696376797,1,"void Capitalise(char *phrase)
{
    if ((phrase[0] > 96) && (phrase[0] < 123))
       {
           (phrase[0] ) -= 32;
       }
       
   for (int i = 0; i < strlen(phrase); i++)
   {
       if (phrase[i] == 32)
       {
           (phrase[i + 1] ) -= 32;
       }
       
   }
}",0
bsil719,1696376971,2,"void Capitalise(char *phrase)
{
    if ((phrase[0] > 96) && (phrase[0] < 123))
       {
           (phrase[0] ) -= 32;
       }
       
   for (int i = 0; i < strlen(phrase); i++)
   {
       if ((phrase[i] == 32) && (phrase[i + 1] > 96) && (phrase[i + 1] < 123))
       {
           (phrase[i + 1] ) -= 32;
       }
       
   }
}",1
bvau704,1696383294,1,"void Capitalise(char *phrase)
{
    
    int phraselen = strlen(phrase);
    
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - 32;
    }
     
    
    for(int i = 0; i <= phraselen; i++){
        if (phrase[i] == 32 && i + 1 <= phraselen && phrase[i + 1] >= 97 && phrase[i + 1] <= 122 ){
            
            phrase[i + 1] = phrase[i + 1] - 32;
            
        }
        
       
    }
    
    
    
}

",1
bwil199,1696816472,1,"void Capitalise(char *phrase)
{
    int capital = phrase[0];
    
    capital = capital - 32;
    
    phrase[0] = char(capital);
}",0
bwil199,1696816995,2,"void Capitalise(char *phrase)
{
    phrase[0] = phrase[0] - ('a' - 'A');
}",0
bwil199,1696817749,3,"void Capitalise(char *phrase)
{
    int length = 0;
    int space[100];
    int j = 0;
    int i = 0;
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 'a') {
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
        }
        i = i + 1;
    }
}",0
bwil199,1696817767,4,"void Capitalise(char *phrase)
{
    int i = 0;
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 'a') {
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
        }
        i = i + 1;
    }
}",0
bwil199,1696817870,5,"void Capitalise(char *phrase)
{
    int i = 0;
    
    if (phrase[0] >= 'a') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 'a') {
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
        }
        i = i + 1;
    }
}",1
bwis161,1696323338,1,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);

// check if the first letter is capitalized
// first letter will be capitalized
// scans array to find space, space + 1  
	for (i = 0; i < length; i++) {
		if (phrase[0] > 96 && phrase[0] < 123) {
			phrase[0] = phrase[0] - 32;
		}
		if (phrase[i] == ' ') {
			if (phrase[i + 1] > 96 && phrase[i + 1] < 123) {
				phrase[i + 1] = phrase[i + 1] - 32;
			}	
		}
	}
}",1
bwoo348,1696843702,1,"void Capitalise(char *phrase)
{
    if (phrase[0] < 123 && phrase[0] > 96){
                phrase[0] = phrase[0] - 32;
    }
    for (int i=0;i<strlen(phrase);i++){
        if (phrase[i] == ' ' && i+1<strlen(phrase)){
            int var = phrase[i+1];
            if (var < 123 && var > 96){
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }
}
",1
byiu331,1696236596,1,"void Capitalise(char* phrase)
{
	int i = 0;
	
	//Creates a loop that continues through to the end of the phrase
	while (phrase[i] != '\0') {

		/*Creates a conditional that checks if there was a space before some characters
		or if the loop is at the start of the phase, and if the character is a part of the lower
		case alphabet, capitalising the character if true*/ 
		if ((phrase[i-1]== ' '|| i==0) && phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
	
		i++;
	}
}",1
byul423,1696248556,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	int space = ' ';
	phrase[0] -= 32;
	for (int i = 0; i < length; i++) {
		int num = phrase[i];
			if (num == space) {
				phrase[i + 1] -= 32;
			}
	}
}",0
byul423,1696248839,2,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	int space = ' ';

	if (phrase[0] - 32 > 65) {
		phrase[0] -= 32;
	}

	for (int i = 0; i < length; i++) {
		if (phrase[i] == space) {
			if (phrase[i + 1] - 32 > 65) {
				phrase[i + 1] -= 32;
			}
		}
	}
}",0
byul423,1696249758,3,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	int space = ' ';

	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] -= 32;
	}

	for (int i = 1; i < length; i++) {
		if (phrase[i] == space) {
			if ((phrase[i + 1] >= 97) && (phrase[i+ + 1] <= 122)) {
				phrase[i + 1] -= 32;
			}
		}
	}
}",1
cada577,1696416823,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length, i;
    
    length = strlen(phrase);
    
    for(i=0; i<length; i++){
        
       
     
        
        if(phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z'){
           
            
            phrase[i+1] = phrase[i+1] - ('a'-'A');        
            
          
        }
    }
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - ('a'-'A');}
}",1
cana544,1696377539,1,"void Capitalise(char* phrase) {

	for (int i = 0; i < strlen(phrase); i++) {
		if (i == 0 && phrase[i] >= 97 && phrase[i] <= 122) { // Checking if the first letter in the string is lowercase
			phrase[i] -= 32; // making the lowercase uppcaser
		}
		else if (phrase[i] == ' ') { // Locating white space between words
			
			if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) { // If the next character after white space is lowercase
				phrase[i + 1] -= 32; // Make it uppercase
			}

		}
	}
}",1
cang688,1696809672,1,"void Capitalise(char *phrase)
{
    int firstLetter = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            firstLetter = 1;
        } else if (firstLetter == 1) {
            phrase[i] = phrase[i] - ('a' - 'A');
            firstLetter = 0; 
        }
    }
}
",0
cang688,1696810392,2,"#include <stdio.h>

int lowercaseCheck(char c) {
    if (c >= 'a' && c <= 'z') {
        return 1;
    }
    return 0;
}

char setUppercase(char c) {
    if (lowercaseCheck(c)) {
        return c - ('a' - 'A');
    }
    return c;
    
}

void Capitalise(char *phrase)
{
    int firstLetter = 1;
    
    int i = 0; 
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            firstLetter = 1;
        } else if (firstLetter == 1) {
            phrase[i] = setUppercase(phrase[i]);
            firstLetter = 0; 
        }
        
        i++;
    }
}",1
cbee072,1696299456,1,"void Capitalise(char *phrase)
{
    int i = 0;
    
    // Find the spaces and capitalise space + 1
    while (phrase[i] != '\0') {
        if ((phrase[i] == ' ') && (phrase[i + 1] <= 'z') && (phrase[i + 1] >= 'a')) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    i++;
    }
    
    // Capitalise the first one - position zero
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
        phrase[0] = phrase[0] - 32;
    }

}
",1
cben375,1696648720,1,"void Capitalise(char *phrase)
{
    int capitiliseNext = 1;

for (int i = 0; phrase[i] != '\0'; i++) {
    if ('a' <= phrase[i] && phrase[i] <= 'z') {
        if (capitiliseNext) {
            phrase[i] -= ('a' - 'A');
            capitiliseNext = 0;
        }
    }
    else {
        capitiliseNext = 1;
    }
}
}
",0
cben375,1696649106,2,"void Capitalise(char *phrase)
{
    int capitiliseNext = 1;

for (int i = 0; phrase[i] != '\0'; i++) {
    if ('a' <= phrase[i] && phrase[i] <= 'z') {
        if (capitiliseNext) {
            phrase[i] -= ('a' - 'A');
            capitiliseNext = 0;
        }
    }
    else if ('A' <= phrase[i] && phrase[i] <= 'Z') {
        if (!capitiliseNext) {
            phrase[i] += ('a' - 'A');
        }
        capitiliseNext = 0;
    }
    else {
        capitiliseNext = 1;
    }
}
}
",0
cben375,1696649332,3,"void Capitalise(char *phrase)
{
  int capitiliseNext = 1;

 for (int i = 0; phrase[i] != '\0'; i++) {
     if ('a' <= phrase[i] && phrase[i] <= 'z') {
         if (capitiliseNext) {
             phrase[i] -= ('a' - 'A');
             capitiliseNext = 0;
         }
     }
     else if ('A' <= phrase[i] && phrase[i] <= 'Z') {
         if (!capitiliseNext) {
             phrase[i] += ('a' - 'A');
         }
         capitiliseNext = 0;
     }
     else if (' ' == phrase[i] || phrase[i] == '-') {
         capitiliseNext = 1;
     }
 }
}
",0
cben375,1696651265,4,"void Capitalise(char *phrase)
{
  for (int i = 0; phrase[i] != '\0'; i++) {
    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        if (phrase[i - 1] == 32 || i == 0) {
            phrase[i] -= 32;
        }
    }
}
}
",1
cbro223,1696212484,1,"void Capitalise(char *phrase)
{
    //Capitilise first letter 
    if(phrase[0] <= 'z' && phrase[0] >= 'a')
        phrase[0] = phrase[0] -('a' - 'A');


    int length = strlen(phrase);

    for(int i = 0; i < length-1; i++ ) {
        if(phrase[i] == ' ' && phrase[i+1] <= 'z' && phrase[i+1] >= 'a') {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
        }
    }
}",1
cbro435,1696670190,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void Capitalise(char *phrase)
{
    int i =0;
    while (phrase[i] !='\0'){
        if((phrase[i] >= 'a' && phrase[i] <= 'z') && (phrase[i-1] == ' ' || phrase[i]==phrase[0])){
            phrase[i] = phrase[i] - 32;
        }
        i++;
}
}",1
cbro989,1696288231,1,"void Capitalise(char *phrase)
{
    
int ascii[100];
int i = 0;

while (phrase[i] != '\0') {
    ascii[i] = (int)phrase[i];
    i++;
    }
    

if (ascii[0] >= 97 && ascii[0] <= 122){
    ascii[0] = ascii[0] - 32;}


for (i = 0, ascii[i] != '\0'; i++){
if (ascii[i - 1] == 32 && ascii[i] >= 97 && ascii[i] <= 122){
    
    ascii[i] = ascii[i] - 32;
}
}
for (i = 0; phrase[i] != '\0'; i++) {
    phrase[i] = (char)ascii[i];
}

}",0
cbro989,1696288336,2,"void Capitalise(char *phrase)
{
    
int ascii[100];
int i = 0;

while (phrase[i] != '\0') {
    ascii[i] = (int)phrase[i];
    i++;
    }
    

if (ascii[0] >= 97 && ascii[0] <= 122){
    ascii[0] = ascii[0] - 32;}


for (i = 0; ascii[i] != '\0'; i++){
if (ascii[i - 1] == 32 && ascii[i] >= 97 && ascii[i] <= 122){
    
    ascii[i] = ascii[i] - 32;
}
}
for (i = 0; phrase[i] != '\0'; i++) {
    phrase[i] = (char)ascii[i];
}

}",1
cbur703,1696553704,1,"void Capitalise(char *phrase)
{
      int i;
   for (i=0; i < phrase[i] != '\0'; i++) {
       if ('a' <= phrase[i] && phrase[i] <= 'z') {
           if (phrase[i - 1] == ' ') {
               phrase[i] -= 'a' - 'A';
               
           }
           if (i == 0 ) {
               phrase[i] -= 'a' - 'A';
               
           }
       }
   } 
}
",0
cbur703,1696554039,2,"void Capitalise(char *phrase)
{
       int i;
   for (i=0; (phrase[i] != '\0'); i++) {
       if ('a' <= phrase[i] && phrase[i] <= 'z') {
           if (phrase[i - 1] == ' ') {
               phrase[i] -= 'a' - 'A';
               
           }
           if (i == 0 ) {
               phrase[i] -= 'a' - 'A';
               
           }
       }
   }
}
",1
ccha663,1696228028,1,"
void Capitalise(char *phrase) {
    
    phrase[0] = phrase[0] - ('a'-'A');
    int i = 0;
    
    
    
    for ( int i = 0; phrase[i] != '\0'; i++){
        
        
        if (phrase[i] == ' ' ) {
                phrase[i+1] = phrase[i+1] - ('a'-'A');
                
        }


            
    }
}
",0
ccha663,1696228152,2,"
void Capitalise(char *phrase) {
    
    phrase[0] = phrase[0] - ('a'-'A');
    
    
    
    
    for ( int i = 0; phrase[i] != '\0'; i++){
        
        
        if (phrase[i] == ' ' ) {
                phrase[i+1] = phrase[i+1] - ('a'-'A');
                
        }


            
    }
}
",0
ccha663,1696599668,3,"
void Capitalise(char *phrase) {
    
     if (!(phrase[0] >= 'A' && phrase[0] <= 'Z')) {
                phrase[0] = phrase[0] - ('a'-'A');
    }
    
    
    for ( int i = 0; phrase[i] != '\0'; i++){
        
        
        if (phrase[i] == ' ' ) {
            if (!(phrase[i+1] >= 'A' && phrase[i+1] <= 'Z')) {
                phrase[i+1] = phrase[i+1] - ('a'-'A');
            
            }
                
        }


            
    }
    return; 
}",0
ccha663,1696599952,4,"
void Capitalise(char *phrase) {
    
     if (phrase[0] >= 'a' && phrase[0] <= 'z') {
                phrase[0] = phrase[0] - ('a'-'A');
    }
    
    
    for ( int i = 0; phrase[i] != '\0'; i++){
        
        
        if (phrase[i] == ' ' ) {
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
                phrase[i+1] = phrase[i+1] - ('a'-'A');
            
            }
                
        }


            
    }
    return; 
}",1
ccha854,1696657929,1,"void Capitalise(char *phrase) {

  int i = 0;
  while (phrase[i] != '\0')
    {
      i++;
    }


  int j;

  for (j = 0; j < i; j++) {

      if (phrase[j] == ' ') {
	  phrase[j + 1] = phrase[j + 1] - 32;
	}

    }

  int k = 0;
  if (k == 0); {
    if (phrase[k] > 96)
      {
	phrase[k] = phrase[k] - 32;
      }
  }

}",0
ccha854,1696658198,2,"void Capitalise(char *phrase) {

  int i = 0;
  while (phrase[i] != '\0')
    {
      i++;
    }


  int j;

  for (j = 0; j < i; j++) {

      if (phrase[j] == ' ') {
	  phrase[j + 1] = phrase[j + 1] - 32;
	}

    }

  int k = 0;
  if (k == 0); 
    if (phrase[k] > 96) {
	phrase[k] = phrase[k] - 32;
    }
  

}",0
ccha854,1696659044,3,"void Capitalise(char *phrase) {
    
    int i = 0;
    while (phrase[i] != '\0') {
        i++;
      
    }

    int j;

    for (j = 0; j < i; j++) {
        if (phrase[j] == ' ') {
            phrase[j + 1] = phrase[j + 1] - 32;
          
        } 
    }

    int k = 0;
    if (k==0); {
        if (phrase[k] > 96) {
            phrase[k] = phrase[k]-32;
            
        }
    }
    
}
",0
ccha854,1696673400,4,"void Capitalise(char *phrase) {
    
    int i = 0;
    while (phrase[i] != '\0') {
        i++;
      
    }

    int j;

    for (j = 0; j < i; j++) {
        if (phrase[j] == ' ') {
            phrase[j + 1] = phrase[j + 1] - 32;
          
        } 
    }

    int k = 0;
    if (k==0) {
        if (phrase[k] > 96) {
            phrase[k] = phrase[k]-32;
            
        }
    }
    
}
",0
ccha854,1696673540,5,"void Capitalise(char *phrase) {
    
    int i = 0;
    while (phrase[i] != '\0') {
        i++;
      
    }

    int j;

    for (j = 0; j < i; j++) {
        if (phrase[j] == ' ') {
            if (phrase[j+1] >96) {
            phrase[j + 1] = phrase[j + 1] - 32;
            }
        } 
    }

    int k = 0;
    if (k==0) {
        if (phrase[k] > 96) {
            phrase[k] = phrase[k]-32;
            
        }
    }
    
}

",1
cche441,1696217674,1,"void Capitalise(char *phrase)
{
    int i = 0, j = 0;
    // Assuming that we cannot include <string.h>, manually check for
    // the length of the string.
    while(phrase[i] != '\0')
    {
        i++;
    }

    // Captialise the first character of the first word.
    if (phrase[j] > 96 && phrase[j] < 123)
    {
        phrase[j] = phrase[j] - 32;
    }

    // Checks whether each letter is the first character of a word.
    // If so, then capitalises it if necessary.
    for (j = j + 1; j < i; j++)
    {
        if (phrase[j-1] == 32 && phrase[j] > 96 && phrase[j] < 123)
        {
            phrase[j] = phrase[j] - 32;
        }
    }
}
",1
cche873,1696593624,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int wordLen = strlen(phrase);
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a'-'A');
    }

    
    for(int i = 1; i < wordLen; i++){
        if (phrase[i-1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}",1
cdel568,1696214856,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int length = -1;

    while (phrase[i] != '\0') {
        length++;
        i++;
    }

    i = 0;

    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
                phrase[0] = phrase[0] - ('a' - 'A');
        }

    for (i = 0; i <= length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
                phrase[i+1] = phrase[i+1] - ('a' - 'A');
            }
        }
    }
}
",1
cdin152,1696665673,1,"void Capitalise(char* phrase)
{
	int i = 0;

	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (i == 0 || phrase[i - 1] == ' ') {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		i++;
	}
}
",1
cdin268,1696238250,1,"void Capitalise(char *phrase)
{
    int i;
    
    while (phrase[i] != '\0') {
        
        if (phrase[0] >= 97 && phrase[i+1] <= 122) {
                phrase[0]-= 'a' - 'A';
            }
        if (phrase[i] == ' ') {
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122) {
                phrase[i+1]-= 'a' - 'A';
            }
        }
        
        i++;
    }
    
    
}",0
cdin268,1696238334,2,"void Capitalise(char *phrase)
{
    int i = 0;
    
    while (phrase[i] != '\0') {
        
        if (phrase[0] >= 97 && phrase[i+1] <= 122) {
                phrase[0]-= 'a' - 'A';
            }
        if (phrase[i] == ' ') {
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122) {
                phrase[i+1]-= 'a' - 'A';
            }
        }
        
        i++;
    }
    
    
}",1
cdsi208,1696670903,1,"void Capitalise(char *phrase)
{
    phrase[0] = phrase[0] - 32;
    
    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] <= 122 && phrase[i + 1] >= 97)  {
            phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
    
}
",0
cdsi208,1696671022,2,"void Capitalise(char *phrase)
{
    if (phrase[0] <= 122 && phrase[0] >= 97){
    phrase[0] = phrase[0] - 32;
    }
    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] <= 122 && phrase[i + 1] >= 97)  {
            phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
    
}
",1
cgal160,1696654397,1,"void Capitalise(char *phrase)
{
    int i, length;
    length = strlen(phrase);
    phrase[0] = phrase[0] - ('a' - 'A');
    for (i = 1; i <= length; i++) {
        if (phrase[i - 1] == ' ') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}

",0
cgal160,1696654613,2,"void Capitalise(char *phrase)
{
    int i, length;
    length = strlen(phrase);
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - ('a' - 'A');
        }
    for (i = 1; i <= length; i++) {
        if (phrase[i - 1] == ' ') {
        phrase[i] = phrase[i] - ('a' - 'A');
    }
}
}

",0
cgal160,1696654713,3,"void Capitalise(char *phrase)
{
    int i, length;
    length = strlen(phrase);
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - ('a' - 'A');
        }
    for (i = 1; i <= length; i++) {
        if (phrase[i - 1] == ' ' && phrase[i] >= 97 && phrase[i] <= 122) {
        phrase[i] = phrase[i] - ('a' - 'A');
    }
}
}

",1
cgaz516,1696661776,1,"void Capitalise(char *phrase)
{
	// Determine the length of the string
	int i, length = 0;
	for (i = 0; phrase[i] != '\0'; i++) {
		length++; 
	}

	// Change the first character to Upper case
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	// Change the character after a space character to Upper case
	for (i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",0
cgaz516,1696661959,2,"void Capitalise(char *phrase)
{
	// Determine the length of the string
	int i, length = 0;
	for (i = 0; phrase[i] != '\0'; i++) {
		length++; 
	}

	// Change the first character to Upper case
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	// Change the character after a space character to Upper case
	for (i = 0; i < length; i++) {
		if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",1
chua804,1696829827,1,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
           
            phrase[i] -= 32;
            capitalizeNext = 0; 
        } else if (phrase[i] == ' ') {
            
            capitalizeNext = 1;
        }
    }
}",0
chua804,1696829937,2,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; 
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            
            phrase[i] = phrase[i] - 'a' + 'A';
            capitalizeNext = 0; // Reset the flag
        } else if (phrase[i] == ' ') {
            
            capitalizeNext = 1;
        }
    }
}",0
chua804,1696830630,3,"void Capitalise(char *phrase) {
    int nextCharShouldBeCapitalized = 1; 
        if (nextCharShouldBeCapitalized && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            
            phrase[i] -= 32;
            nextCharShouldBeCapitalized = 0; 
        } else if (phrase[i] == ' ') {
            
            nextCharShouldBeCapitalized = 1;
        } else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            
            nextCharShouldBeCapitalized = 0;
        }
    }
}",0
chua804,1696831281,4,"void Capitalise(char *phrase) {
    int capitalizeNext = -1; 
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            
            phrase[i] -= 32;
            capitalizeNext = 0; 
        } else if (phrase[i] == ' ') {
            
            capitalizeNext = 1;
        } else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            
            capitalizeNext = 0;
        }
    }
}
",0
chua804,1696833477,5,"#include <stdio.h>
#include <string.h>


void Capitalise(char *phrase) {
    int length = strlen(phrase);
    for (int i=0;i<length;i++){
        if (phrase[0]>=97){
            phrase[0] = phrase[0]-32;
        }
        if  (phrase[i] == ' ')
        {
            if (phrase[i+1]>=97){
                phrase[i+1]= phrase[i+1]-32;
            }
        }
    }
}
",1
civa625,1696384327,1,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    
    // Check the first letter.
    if ((97 <= phrase[0]) && (phrase[0] <= 122)) {
        phrase[0] -= 32;
    }
    
    for (i = 0; i < length; i++) {
        if ((phrase[i] == ' ') && (97 <= phrase[i+1]) && (phrase[i+1] <= 122)){
            phrase[i+1] -= 32;
        }
    }
}",1
cjun818,1696840120,1,"void Capitalise(char *phrase) 
{
    int shouldCapitalise;

    shouldCapitalise = 1;

    for (int i = 0; phrase[i] != 0; i++)
    {
        if (shouldCapitalise)
        {
            phrase[i] = phrase[i] - 'a' + 'A';
            shouldCapitalise = 0;
        }

        else if (phrase[i] == ' ') 
        {
            shouldCapitalise = 1;
        }
    }
}
",0
cjun818,1696841498,2,"void Capitalise(char *phrase) 
{
    int shouldCapitalise;

    shouldCapitalise = 1;

    for (int i = 0; phrase[i] != 0; i++) 
    {
        char character;

        character = phrase[i];

        if (character >= 'a' && character <= 'z')
        {
            if (shouldCapitalise) 
            {
                phrase[i] = character - 'a' + 'A';
                shouldCapitalise = 0;
            }
            else 
            {
                shouldCapitalise = 0;
            }
        }
        else if (character == ' ') 
        {
            shouldCapitalise = 1;
        }
        else 
        {
            shouldCapitalise = 0;
        }
    }
}",1
clee482,1696780522,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    for(int i = 0; i<length; i++)
    {

        if (i == 0)
        {
            if (96< phrase[i] && phrase[i]<123)
            {
                phrase[i] = phrase[i] - 32;
            }
        }
        else if (phrase[i] == ' ')
        {

            int j = 0;
            j = i+1;
            if (96< phrase[j] && phrase[j] <123)
            {            
                phrase[j] = phrase[j] - 32;
            }
        }
        
        else
        {
            phrase[i] = phrase[i];
        }

    }
}",1
cleu746,1696650588,1,"void Capitalise(char *phrase)
{
    int i;
    
    phrase[0] = phrase[0] - ('a' - 'A');
    
    for (i=0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}
",0
cleu746,1696650825,2,"void Capitalise(char *phrase)
{
    int i;
    
    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (i=0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}
",0
cleu746,1696650866,3,"void Capitalise(char *phrase)
{
    int i;
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (i=0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}
",0
cleu746,1696651288,4,"void Capitalise(char *phrase)
{
    int i;
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (i=0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}",1
clob269,1696302174,1,"void Capitalise(char* sent)
{
    int len = 0;

    while (sent[len] != '\0') {
        len++;
    }

    int i = 0;
    while (i != len) {

        if ((int)sent[i] >= 97 && (int)sent[i] <= 122) {
            sent[i] = (char)((int)sent[i] - 32);
        }

        while ((int)sent[i] != 32 && sent[i] != '\0') {
            i++;
        }

        while ((int)sent[i] == 32 && sent[i] != '\0') {
            i++;
        }

    }






}",1
cmac377,1696841632,1,"void Capitalise(char *phrase)
{
    int wordlength = strlen(phrase);
    int capital = 0;
    int numcode = 0;
    int capnumcode = 0;
    
    
    
    numcode = phrase[0];
    capnumcode = numcode - 32;
    phrase[0] = capnumcode;
    
    
    
    for(int i = 0; i < wordlength; i++){
        if(phrase[i] == 32){
            capital = i + 1;
            numcode = phrase[capital];
            capnumcode = numcode - 32;
            phrase[capital] = capnumcode;
    
        }
        
        
    }
}
",0
cmac377,1696842326,2,"void Capitalise(char *phrase)
{
    int wordlength = strlen(phrase);
    int capital = 0;
    int numcode = 0;
    int capnumcode = 0;
    
    
    
   
    if(phrase[0] >= 97 && phrase[0] <= 122){
        numcode = phrase[0];
        capnumcode = numcode - 32;
        phrase[0] = capnumcode;
    }
    
    
    for(int i = 0; i < wordlength; i++){
        if(phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32){
            capital = i;
            numcode = phrase[capital];
            capnumcode = numcode - 32;
            phrase[capital] = capnumcode;
    
        }
        
        
    }
}
",1
cmad989,1696375025,1,"void Capitalise(char *phrase)
{
    int i = 0;
    for (i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
            }
        phrase[0] = phrase[0] - ('a' - 'A');
}",0
cmad989,1696375256,2,"void Capitalise(char *phrase)
{
    int i = 0;
    for (i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
            }
    }
    if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
}",0
cmad989,1696375329,3,"void Capitalise(char *phrase)
{
    int i = 0;
    for (i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
            }
    }
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
}",1
cmas527,1696758166,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0')
{
 if (phrase[0]>= 'a' && phrase[0] <= 'z')
{phrase[0] = phrase[0] - ('a' - 'A'); }
 {if (phrase[i]==' ' && phrase[i+1]>= 'a' && phrase[i+1] <= 'z') 
 {phrase[i+1] = phrase[i+1] - ('a' - 'A'); }
        i++;
    }
    }
}",1
cmcm317,1696738503,1,"#include <stdio.h>
#include <string.h>

int Upper(int letter)
{
    letter = letter - 32;
    return letter;
}

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int i = 0;

    if (phrase[i] >= 97 && phrase[i] <= 122) {
        phrase[i] = Upper(phrase[i]);
    }  
    
    for (i = 0; i < length; i++) {
        if (phrase[i] == 32) {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                phrase[i] = Upper(phrase[i]);
            }  
        }
    }

}
",0
cmcm317,1696739042,2,"#include <stdio.h>
#include <string.h>

int Upper(int letter)
{
    letter = letter - 32;
    return letter;
}

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int i = 0;

    if (phrase[i] >= 97 && phrase[i] <= 122) {
        phrase[i] = Upper(phrase[i]);
    }  
    
    for (i = 0; i < length; i++) {
        if (phrase[i] == 32) {
            if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
                phrase[i + 1] = Upper(phrase[i + 1]);
            }  
        }
    }

}",1
cmia215,1696656532,1,"void Capitalise(char* phrase)
{
	int stringlength;

	stringlength = strlen(phrase);
	for (int i = 0; i < stringlength; i++)
	{
		if (((int)phrase[i] >= 97) && ((int)phrase[i] <= 122))
		{
			phrase[i] = phrase[i] - 32;
		}
	}

	char* phraseTemp = phrase;

	for (int i = 1; i < stringlength; i++)
	{
		if (((int)phrase[i] >= 65) && ((int)phrase[i] <= 90) && ((int)phrase[i-1] != 32) )
		{
			phraseTemp[i] = phraseTemp[i] + 32;
		}
	}
	phrase = phraseTemp;
}
",1
cmot464,1696213018,1,"void Capitalise(char *phrase)
{
    
    // check if the first letter is capital already or not
    // then look for the next space
    // get that character after the space and make capital if not already
    // repeat

    int i;
    int length = strlen(phrase);

    if((122 >= phrase[0]) && (phrase[0] >= 97)){ // if lower case letter
        phrase[0] = phrase[0] - 32; // make upper case
    }

    for(i = 1; i < length; i++){
        if(phrase[i] == 32){
            if((122 >= phrase[i+1]) && (phrase[i+1] >= 97)){
                phrase[i+1] = phrase[i+1] - 32; // make upper case
            }
        }
    }
}",1
cnai408,1696835894,1,"void Capitalise(char *phrase) {
    int i;
    int length = strlen(phrase);
    
    for (i = -1; i < length; i ++) {
        // Checks for a empty spot or a space
        if (phrase[i] == 0 || phrase[i] == 32) {
            i++;
            
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                phrase[i] = phrase[i] - 32; 
            }
        }
    }
}
",1
cnie825,1696804319,1,"#include <stdio.h>

// Function to check if a character is a lowercase alphabet
int isLowercase(char character) {
    return (character >= 'a' && character <= 'z');
}

// Function to convert a lowercase character to uppercase
void convertToUppercase(char *character) {
    *character = *character - 32;
}

// Function to capitalize the first letter of each word in a phrase
void Capitalise(char *phrase) {
    // Capitalize the first letter of the phrase
    if (isLowercase(phrase[0])) {
        convertToUppercase(&phrase[0]);
    }

    // capitalize the first letter of each word
    for (int i = 1; phrase[i] != '\0'; ++i) {
        // If there's a space and the next character is a lowercase alphabet,
        // convert it to uppercase
        if (phrase[i - 1] == ' ' && isLowercase(phrase[i])) {
            convertToUppercase(&phrase[i]);
        }
    }
}",1
coli772,1696303059,1,"void Capitalise(char *phrase) {
    int i = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (i == 0 || phrase[i-1] == ' ') {
                phrase[i] -= 'a' - 'A';
            }
        }
        i++;
    }
}",1
couy656,1696326946,1,"char makeuppercase(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 'a' + 'A';
    }
    return c;
}

void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0'){
        if (i==0 || phrase[i - 1] == ' '){
        phrase[i] = makeuppercase (phrase[i]);
    }
    i++;
    }
}",1
csan114,1696230420,1,"void Capitalise(char* phrase)
{
	int i = 0;
	int length = strlen(phrase) - 1;

	while (i < length) {
		if (phrase[i] != ' ' && phrase[i-1] == ' ') {
			phrase[i] = (char)toupper(phrase[i]);
		} 

		if (phrase[0] != ' ') {
			phrase[0] = (char)toupper(phrase[0]);
		}
		i++;
	}
}
",0
csan114,1696230580,2,"void Capitalise(char* phrase)
{
	int i = 1;
	int length = strlen(phrase) - 1;

	if (phrase[0] != ' ') {
		phrase[0] = (char)toupper(phrase[0]);
	}

	while (i < length) {
		if (phrase[i] != ' ' && phrase[i-1] == ' ') {
			phrase[i] = (char)toupper(phrase[i]);
		} 
		i++;
	}
}",1
cset571,1696230049,1,"void Capitalise(char* phrase)
{

	int i;
	int length = strlen(phrase);

	for (i = length; i > 0; i--) {
		if (phrase[i - 1] == ' ' && phrase[i] <= 'z' && phrase[i] >= 'a') {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
	}

	if (phrase[0] <= 'z' && phrase[0] >= 'a') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
}",1
csin574,1696456645,1,"void Capitalise(char *phrase)
{
int i;
int length = strlen(phrase);
for (i = 0; i < length; i++) {
	if ((phrase[i] >= 'a') && (phrase[i] <= 'z')) {
		if((i == 0) || (phrase[i-1] == ' ')) {
			phrase[i] = phrase[i] - 32;
		}
	}
}
}
",1
cste189,1696288699,1,"void Capitalise(char *phrase)
{
    int i=0;
	phrase[i] = phrase[i] - 32;
	i++;
	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (phrase[i - 1] == 32) {
				phrase[i] = phrase[i] - 32;
			}
		}
			
		i++;
	}
}
",0
cste189,1696288862,2,"void Capitalise(char *phrase)
{
 	int i=0;
	
	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (phrase[i - 1] == 32 || i == 0) {
				phrase[i] = phrase[i] - 32;
			}
		}
		i++;
	}
}
",1
ctof106,1696848187,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for(int i = 0; i < length, i++){
        if(phrase[i] = 0){
           if (phrase[i] >= 'a' && phrase[i] <= 'z'){
               phrase[i] = phrase[i] - 97 + 122;
           }
           
        }
        if-else(phrase[i] = ' '){
           if (phrase[i+1] >= 'a' && phrase[i] <= 'z'){
               phrase[i] = phrase[i+1] - 97 + 122;
           }
           
        }
            
    }
    
}
",0
ctof106,1696848628,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for(int i = 0; i < length, i++){
        if(phrase[i] = 0){
           if (phrase[i] > 96 && phrase[i] < 123){
               phrase[i] = phrase[i] - 32;
           }
           
        }
        if(phrase[i] = ' '){
           if (phrase[i] > 96 && phrase[i] < 123){
               phrase[i] = phrase[i+1] -32;
           }
           
        }
            
    }
    
}
",0
ctof106,1696848663,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for(int i = 0; i < length; i++;){
        if(phrase[i] = 0){
           if (phrase[i] > 96 && phrase[i] < 123){
               phrase[i] = phrase[i] - 32;
           }
           
        }
        if(phrase[i] = ' '){
           if (phrase[i] > 96 && phrase[i] < 123){
               phrase[i] = phrase[i+1] -32;
           }
           
        }
            
    }
    
}
",0
ctof106,1696848775,4,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    if (phrase[0] > 96 && phrase[0] < 123){
               phrase[0] = phrase[0] - 32;
           }
    for(int i = 0; i < length; i++){
           
           
        }
        if(phrase[i] = 32){
           if (phrase[i] > 96 && phrase[i] < 123){
               phrase[i] = phrase[i+1] -32 ;
           }
           
        }
            
    }
    
}
",0
ctof106,1696848838,5,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    if (phrase[0] > 96 && phrase[0] < 123){
               phrase[0] = phrase[0] - 32;
           }
    for(i = 0; i < length; i++){
           
           
        }
        if(phrase[i] = 32){
           if (phrase[i+1] > 96 && phrase[i+1] < 123){
               phrase[i+1] = phrase[i+1] -32 ;
           }
           
        }
            
    }
    
}
",0
ctof106,1696848865,6,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    if (phrase[0] > 96 && phrase[0] < 123){
               phrase[0] = phrase[0] - 32;
           }
    for(i = 0; i < length; i++){
           
           
        }
        if(phrase[i] = 32){
           if (phrase[i+1] > 96 && phrase[i+1] < 123){
               phrase[i+1] = phrase[i+1] -32 ;
           }
           
        }
            
    }
    

",0
ctof106,1696848947,7,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    if (phrase[0] > 96 && phrase[0] < 123){
               phrase[0] = phrase[0] - 32;
           }
    for(i = 0; i < length; i++){
           
           
        
        if(phrase[i] == 32){
           if (phrase[i+1] > 96 && phrase[i+1] < 123){
               phrase[i+1] = phrase[i+1] -32 ;
           }
           
        }
            
    }
    

}",1
ctub889,1696814530,1,"void Capitalise(char str[]) {
    int isLowerCaseAlpha(char c) {
        return (c >= 'a' && c <= 'z');
    }
    int capitalizeNext = 1; 
    for (int i = 0; str[i] != '\0'; i++) {
        if (isLowerCaseAlpha(str[i]) && capitalizeNext) {
            str[i] = str[i] - 'a' + 'A';
            capitalizeNext = 0; 
        } else if (str[i] == ' ') {
            capitalizeNext = 1; 
        }
    }
}
",0
ctub889,1696814766,2,"void Capitalise(char str[]) {
    int isLowerCaseAlpha(char c) {
        return (c >= 'a' && c <= 'z');
    }
    int capitalizeNext = 1;  
    for (int i = 0; str[i] != '\0'; i++) {
        if (isLowerCaseAlpha(str[i]) && capitalizeNext) {
            str[i] = str[i] - 'a' + 'A';  
            capitalizeNext = 0; 
        } else if (str[i] == ' ' || str[i] == '\t' || str[i] == '\n' || str[i] == '\r') {
            capitalizeNext = 1;  
        } else {
            capitalizeNext = 0;  
        }
    }
}
",1
cugn667,1696390850,1,"void Capitalise(char *phrase)
{

  int x = 1;
 
    for (int i = 0;  phrase[i] != '\0'; i++ ){
        
    char word = phrase[i];
    
      if ( word >= 'a' && word <= 'z' && x ){
        
        phrase[i] = word - 32;
        x = 0;
          
      } else if (word > 'z' || word < 'a'){
          
          x = 1;
          
      }
    
    }
    
}",0
cugn667,1696391303,2,"void Capitalise(char *phrase)
{

  int capitalisingWord = 1;
 
    for (int i = 0;  phrase[i] != '\0'; i++ ){
        
      if ( ( i == 0 && phrase[i] >= 'A' && phrase[i] <= 'Z' ) || (phrase[i] >= 'a' && phrase[i] <= 'z' && capitalisingWord) ){
        
        phrase[i] = phrase[i] - 32;
        capitalisingWord = 0;
          
      } else if (phrase[i] > 'z' || phrase[i] < 'a'){
          
          capitalisingWord = 1;
          
      }
    
    }
    
}",0
cugn667,1696594430,3,"void Capitalise(char *phrase) {

    int lengthOfWord;
    lengthOfWord = strlen(phrase);

    if (lengthOfWord == 0) {
        
        return;
    }


    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        
        phrase[0] = phrase[0] - 32;
        
    }

    for (int i = 0; i <= lengthOfWord; i = i + 1) {
        
        if (phrase[i] == 32 && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - 32;
        
        }
        
    }
    
}",1
cwei506,1696660641,1,"void Capitalise(char* phrase)
{
	int i;
	for (i = 0; i < strlen(phrase); i++) {

		if (phrase[i] >= 'a' || phrase[i] <= 'z') {
			if (i == 0) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}

			if (phrase[i] == ' ') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}

		}

	}


}",0
cwei506,1696660704,2,"void Capitalise(char* phrase)
{
	int i;
	for (i = 0; i < strlen(phrase); i++) {

		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (i == 0) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}

			if (phrase[i] == ' ') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}

		}

	}


}",0
cwei506,1696661100,3,"void Capitalise(char* phrase)
{
	int i;
	for (i = 0; i < strlen(phrase); i++) {

		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (i == 0) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}

		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}

		}

	}


}",1
cwu200,1696733649,1,"#include <stdio.h>

void Capitalise(char *phrase){
  int length = 0;
  while (phrase[length] != '\0'){
    length++;
  }
  if (phrase[0] - 'a' > 0){
    phrase[0] = phrase[0] - 'a' + 'A';
  }
  int i;
  for (i = 0; i < length; i++){
    if (phrase[i] == ' ' && (phrase[i + 1] - 'a') > 0){
      phrase[i + 1] = phrase[i + 1] - 'a' + 'A';
    }
  }
}
",0
cwu200,1696733868,2,"#include <stdio.h>

void Capitalise(char *phrase){
  int length = 0;
  while (phrase[length] != '\0'){
    length++;
  }
  int i;
    for (i = 0; i < length; i++) {
        if (i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - 'a' + 'A';
        } else if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - 'a' + 'A';
        }
    }
}",1
cyan312,1696333500,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	int capitaliseLetter = 1;
	for (int i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			capitaliseLetter = 1;
		}
		else if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitaliseLetter == 1) {
			phrase[i] = phrase[i] - 32;
			capitaliseLetter = 0;
		}
		else {
			capitaliseLetter = 0;
		}
	}

}",1
cyiu210,1696388085,1,"void Capitalise(char *phrase)
{
    int i;
    int length;
    length = strlen(phrase);
   
    if (phrase[0] >= 97 && phrase[0] <= 122)  {
    phrase[0] = phrase[i] - 32;
    }
    
    for (i = 1; i < length; i++)  {
        if (phrase[i] == 32)  {
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122)  {
            phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }
}",0
cyiu210,1696388458,2,"void Capitalise(char *phrase)
{
    int i = 0;
    int length;
    length = strlen(phrase);
   
    if (phrase[0] >= 97 && phrase[0] <= 122)  {
        phrase[0] = phrase[0] - 32;
    }
    
    for (i = 1; i < length; i++)  {
        if (phrase[i] == 32)  {
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122)  {
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }
}",1
dbar153,1696296051,1,"void Capitalise(char *phrase)
{
    	int length = strlen(phrase);
	int i;
	for (i = 0; i < length; i++) {
		if (phrase[i] >= 97 && phrase[i] <= 122){
			phrase[i] = phrase[i] - 32;
		if ((phrase[i - 1] >= 65 && phrase[i - 1] <= 90)|| (phrase[i-1]>=97 && phrase[i-1]<=122)) 
			phrase[i] = phrase[i] + 32;
		}
	}
}
",0
dbar153,1696296746,2,"void Capitalise(char *phrase)
{
int length = strlen(phrase);
int i;
for (i = 0; i < length; i++) {
	if (phrase[i] >= 97 && phrase[i] <= 122) {
		if (phrase[i - 1] == 32) {
			phrase[i] = phrase[i] - 32;
		}
		if (i == 0) {
			phrase[i] = phrase[i] - 32;
		}
	}
}
}
",1
dcha468,1696831186,1,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; 
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (capitalizeNext) {
                phrase[i] -= ('a' - 'A');
                capitalizeNext = 0; 
            }
        } else {
            capitalizeNext = 1; 
        }
    }
}",0
dcha468,1696831257,2,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to indicate if the next character should be capitalized
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') || (phrase[i] >= 'A' && phrase[i] <= 'Z')) {
            if (capitalizeNext) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                    phrase[i] -= ('a' - 'A');
                }
                capitalizeNext = 0; // Set the flag to false after capitalization
            } else {
                if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
                    phrase[i] += ('a' - 'A');
                }
            }
        } else {
            capitalizeNext = 1; // Reset the flag if the current character is not a letter
        }
    }
}
",0
dcha468,1696831882,3,"
int isLowercaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}


int isSpace(char c) {
    return (c == ' ');
}


char toUpperCase(char c) {
    if (isLowercaseAlpha(c)) {
        return c - 'a' + 'A'; 
    }
    return c;
}


void Capitalise(char* phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isSpace(phrase[i])) {
            capitalizeNext = 1; 
        } else if (isLowercaseAlpha(phrase[i]) && capitalizeNext) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0;
        }
    }
}

",0
dcha468,1696832513,4,"char toUpperCase(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - ('a' - 'A'); 
    } else {
        return c; 
    }
}


void Capitalise(char *phrase) {
    int i = 0;

    while (phrase[i] != '\0') {
        
        if (i == 0 || phrase[i - 1] == ' ') {
            phrase[i] = toUpperCase(phrase[i]);
        }
        i++;
    }
}",1
dche306,1696386353,1,"void Capitalise(char *phrase)
{
    int i = 0; 
    while (phrase[i] != '\0') { 
        if (phrase[i]== ' ') { 
            phrase[i+1] = phrase[i+1] - ('a' - 'A'); 
        } 
        i++; 
     } 
     phrase[0] = phrase[0]- ('a' - 'A'); 
}",0
dche306,1696387216,2,"void Capitalise(char *phrase)
{
    int i = 0; 
    if(phrase[0]>= 97 && phrase[0]<= 122 )
        phrase[0] = phrase[0]- 32;
    for (i = 1; i<strlen(phrase);i++) { 
        if(phrase[i]== ' ') { 
            if(phrase[i+1]>= 97 && phrase[i+1]<= 122 ){
            phrase[i+1] = phrase[i+1] - 32; 
            }

        i++; 
     } 
      
}
}",1
deri361,1696230631,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
	int i;
	if ((phrase[0] > 96) && (phrase[0] < 123)) {
		phrase[0] = phrase[0] - 32;
	}
	for (i = 1; i < (strlen(phrase) + 1); i++)
	{
		if ((phrase[i] == 32) && (phrase[i+1]>96) && (phrase[i+1]<123)) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}
",1
dfor626,1696300212,1,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++) {
        if ((i == 0 || phrase[i - 1] == 32) && (phrase[i] < 123 && phrase [i] > 96)) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}
",1
dgal735,1696239025,1,"// Helper function 
char toupper(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - ('a' - 'A'); // Convert to uppercase
    }
    return c; // If Not a lowercase character, return as it is..
}

// Main Function
void Capitalise(char* phrase) {
    int capnext = 1; // Initialising the flag to 1 so it will capitalise the next character unless unwanted

    for (int i = 0; phrase[i] != '\0'; i++) { // Checking If the current value is not null (0)
        char current = phrase[i];

        if (current == ' ' || current == '\t' || current == '\n') {
            // If a space or tab is encountered update the flag to 1
            capnext = 1; //This will capitalize the next character
        }
        else {
            if (capnext == 1 && current >= 'a' && current <= 'z') {
                // Capitalize the character if the flag is set to 1 AND it's a lowercase alphabetic character
                phrase[i] = toupper(current);
            }
            capnext = 0; // Reset the flag to 0
        }
    }
}
",0
dgal735,1696239261,2,"// Helper function 
char mytoupper(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - ('a' - 'A'); // Convert to uppercase
    }
    return c; // If Not a lowercase character, return as it is..
}

// Main Function
void Capitalise(char* phrase) {
    int capnext = 1; // Initialising the flag to 1 so it will capitalise the next character unless unwanted

    for (int i = 0; phrase[i] != '\0'; i++) { // Checking If the current value is not null (0)
        char current = phrase[i];

        if (current == ' ' || current == '\t' || current == '\n') {
            // If a space or tab is encountered update the flag to 1
            capnext = 1; //This will capitalize the next character
        }
        else {
            if (capnext == 1 && current >= 'a' && current <= 'z') {
                // Capitalize the character if the flag is set to 1 AND it's a lowercase alphabetic character
                phrase[i] = mytoupper(current);
            }
            capnext = 0; // Reset the flag to 0
        }
    }
}
",1
dha524,1696584593,1,"void Capitalise(char* phrase)
{
	int length;

	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}
	
	length = strlen(phrase);

	for (int i = 0; i < length; i++) {
		if (phrase[i] == 32 && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}
",1
dhah941,1696728191,1,"void Capitalise(char *phrase)
{
    int i = 0;

	while (phrase[i] != '\0')
	{
		if (97 <= phrase[i] && phrase[i] <= 122)
		{
			if (i == 0 || phrase[i-1] == 32)
				phrase[i] = phrase[i] - 32;
		}
		i++;
	}
}
",1
dhar714,1696386064,1,"void Capitalise(char *phrase)
{
    if ((phrase[0] < 123) && (phrase[0] > 96)) {
        phrase[0] = phrase[0] - ('a'- 'A');
    }
    
    int i = 1;
    while (phrase[i] != '\0') {
        if (((phrase[i] < 123) && (phrase[i] > 96)) && (phrase[i-1] == ' ')) {
        phrase[i] = phrase[i] - ('a'- 'A');
        }
    i++;
    }
}",1
dhen760,1696213151,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i = 0;
    phrase[0] = phrase[0] - 32;
    while (phrase[i] != '\0') {
        if (phrase[i] == 32) {
            phrase[i+1] = phrase[i+1] - 32;
        }
        i++;
    }
}
",0
dhen760,1696213319,2,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i = 0;
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
    phrase[0] = phrase[0] - 32;
    }

    while (phrase[i] != '\0') {
        if (phrase[i] == 32) {
            if ((phrase[i+1] >= 'a') && (phrase[i+1] <= 'z')) {
            phrase[i+1] = phrase[i+1] - 32;
            }
        }
        i++;
    }
}
",1
dhua391,1696726675,1,"

void Capitalise(char *phrase)
{
    for (int i = 0; i<strlen(phrase);i++;){
    if (phrase[i] = 34){phrase[i+1] = phrase[i+1]-32;}
    }
}
",0
dhua391,1696729711,2,"

void Capitalise(char *phrase)
{
    for (int i = 0; i<strlen(phrase);i++){
    if (phrase[i] == 32&&phrase[i+1]<97){phrase[i+1] = phrase[i+1]-32;}
    }
}



",0
dhua391,1696729927,3,"

void Capitalise(char *phrase) {
    int len = strlen(phrase);

    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') {
            if (i + 1 < len && (phrase[i + 1] < 'a' || phrase[i + 1] > 'z')) {
             
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}





",0
dhua391,1696730191,4,"void Capitalise(char *phrase) {
int len = strlen(phrase);

for (int i = 0; i < len; i++) {
    if (phrase[i] == ' ') {
    if (i + 1 < len && (phrase[i + 1] < 'a' || phrase[i + 1] > 'z')) {
             
                phrase[i + 1] = phrase[i + 1] + 32;
            }
        }
    }
}





",0
dhua391,1696730431,5,"void Capitalise(char *phrase) {
int len = strlen(phrase);

for (int i = 0; i < len; i++) {
    if (phrase[i] == ' ') {
            
        if (i + 1 < len && (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')) {
                
                phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}
}
",0
dhua391,1696730680,6,"void Capitalise(char *phrase) {
    int len = strlen(phrase);

    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') {
            if (i + 1 < len && (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
        else if (phrase[0] >= 'a' && phrase[0] <= 'z'))
        {
            phrase[0]=phrase[0]-32;
        }
    }

}",0
dhua391,1696730770,7,"void Capitalise(char *phrase) {
    int len = strlen(phrase);

    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') {
            if (i + 1 < len && (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
        else if (phrase[0] >= 'a' && phrase[0] <= 'z')
        {
            phrase[0] = phrase[0] - 32;
        }
    }
}",1
dhul688,1696298732,1,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    
    
    for (i = 0; i < length; i++){
        if (i == 0){
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        if ((phrase[i - 1] == ' ') & (phrase[i] != ' ')){
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}
",0
dhul688,1696299055,2,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    int IsCapital;
    
    
    for (i = 0; i < length; i++){
        if ((phrase[i] < 97) | (phrase[i] > 122)){
            IsCapital = 1;
        }
        if ((i == 0) & (IsCapital == 0)){
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        if ((phrase[i - 1] == ' ') & (phrase[i] != ' ') & (IsCapital == 0)){
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}
",0
dhul688,1696299207,3,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    int IsCapital = 0;
    
    
    for (i = 0; i < length; i++){
        if ((phrase[i] < 97) | (phrase[i] > 122)){
            IsCapital = 1;
        }
        else
        {
            IsCapital = 0;
        }
        if ((i == 0) & (IsCapital == 0)){
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        if ((phrase[i - 1] == ' ') & (phrase[i] != ' ') & (IsCapital == 0)){
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}
",1
dkha055,1696221587,1,"void Capitalise(char *phrase) {

int previous_space = 1;

for (int i = 0; i < strlen(phrase); i++)
{
    if (phrase[i] == ' ' ) {
        previous_space = 1;
        continue;
    }
    if (phrase[i] >= 97 && phrase[i] <= 122 && previous_space == 1) {
        phrase[i] = phrase[i] - 32;
    }
    previous_space = 0;
}


}
",1
dkim848,1696298128,1,"void Capitalise(char *phrase)
{
    int L, i;
    
    phrase[0] = phrase[0] - 32;
    
    L = strlen(phrase);
    
    for (i = 0; i < L; i++) {
        if (phrase[i] == ' ') {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}",0
dkim848,1696298438,2,"void Capitalise(char *phrase)
{
    int L, i;
    
    if (phrase[0] <= 90) {
        phrase[0] = phrase[0];
    } else {
        phrase[0] = phrase[0] - 32;
    }
    
    L = strlen(phrase);
    
    for (i = 0; i < L; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] <= 90) {
                continue;
            } else {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",1
dkur670,1696815402,1,"void Capitalise(char *phrase)
{
  if(phrase[0] >= 97 && phrase[0] <= 122){
	  phrase[0]-= 32;
	  }
	  for(int i = 1; phrase[i] != '\0'; i++){
		  if(phrase[i-1] == 32){
			  if(phrase[i] >= 97 && phrase[i] <= 122){
				  phrase[i] -= 32;
        }
    }
  }  
}
",1
dli630,1696845315,1,"void Capitalise(char *phrase)
{
    int i = 0;

    while (phrase[i] != 0) {
        if (i == 0) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        if (phrase[i] == ' ') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        } 
        i++;
    }
    
}
",0
dlob194,1696369838,1,"void Capitalise(char *phrase)
{
    phrase[0] = phrase[0] - ('a' - 'A');
    for (int i = 0; i < strlen(phrase); i++) {
       if (phrase[i] == ' ') {
           phrase[i+1] = phrase[i+1] - ('a' - 'A');
       }
    }
}",0
dlob194,1696370324,2,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[i] <= 'z' && phrase[i] >= 'a' ) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (i = 1; i < strlen(phrase); i++) {
        if (phrase[i] <= 'z' && phrase[i] >= 'a' ) {
            if (phrase[i] == ' ') {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
            }
       }
    }
}",0
dlob194,1696370466,3,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[i] <= 'z' && phrase[i] >= 'a' ) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (i = 1; i < strlen(phrase); i++) {
        if (phrase[i] == ' ') {
            if (phrase[i+1] <= 'z' && phrase[i+1] >= 'a' ) {
                phrase[i+1] = phrase[i+1] - ('a' - 'A');
            }
       }
    }
}",1
dmar494,1696243332,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }    
    int i = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
        }
        i++;
    }
}",1
dmcn107,1696831314,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int l = strlen(phrase);
    if (phrase[0]>= 97 &&phrase[0]<= 122){
        phrase[0] = phrase[0] - 32;
    }
    for (int i = 0; i< l; i++){
        if (phrase[i]>= 97 &&phrase[i]<= 122 && phrase[i] = ' '){
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}
",0
dmcn107,1696831451,2,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int l = strlen(phrase);
    if (phrase[0]>= 97 &&phrase[0]<= 122){
        phrase[0] = phrase[0] - 32;
    }
    for (int i = 0; i< l; i++){
        if (phrase[i]>= 97 &&phrase[i]<= 122 && phrase[i] == ' '){
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}
",0
dmcn107,1696831964,3,"void Capitalise(char *phrase)
{
    int l = strlen(phrase);
    if (phrase[0]>= 97 &&phrase[0]<= 122){
        phrase[0] = phrase[0] - 32;
    }
    for (int i = 0; i< l; i++){
        if (phrase[i+1]>= 97 &&phrase[i+1]<= 122 && phrase[i] == 32){
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",1
dmun793,1696786337,1,"void Capitalise(char* phrase)
{
	int phraseLength = strlen(phrase);
	bool spaceBefore = true;

	for (int i = 0; i < phraseLength; i++)
	{
		int c = (int) phrase[i];
		if (spaceBefore == true)
		{
			spaceBefore = false;

			if (c >= 97 || c <= 122)
			{
				c -= 32;
				phrase[i] = (char)c;
			}
		}

		if (phrase[i] == ' ')
			spaceBefore = true;
	}
}",0
dmun793,1696786459,2,"void Capitalise(char* phrase)
{
	int phraseLength = strlen(phrase);
	bool spaceBefore = true;

	for (int i = 0; i < phraseLength; i++)
	{
		int c = (int) phrase[i];

		if (spaceBefore == true)
		{
			spaceBefore = false;

			if (c >= 97 && c <= 122)
			{
				c -= 32;
				phrase[i] = (char)c;
			}
		}

		if (phrase[i] == ' ')
			spaceBefore = true;
	}
}",1
dosb979,1696283003,1,"void Capitalise(char *phrase)
{
    void Capitalise(char *phrase)
{
    //Initialises length and alots the length of the character array to it
    int length;
    length = strlen(phrase);
    
    //for loop to subtract 32 off the letter if it is capital
    for (int i=0; i<length; i++){
        if ((phrase[i] >= 97) && (phrase[i] <= 122)){
            phrase[i] = (phrase[i] - 32);
        }
    }
}
}
",0
dosb979,1696283021,2,"    void Capitalise(char *phrase)
{
    //Initialises length and alots the length of the character array to it
    int length;
    length = strlen(phrase);
    
    //for loop to subtract 32 off the letter if it is capital
    for (int i=0; i<length; i++){
        if ((phrase[i] >= 97) && (phrase[i] <= 122)){
            phrase[i] = (phrase[i] - 32);
        }
    }
}

",0
dosb979,1696283263,3,"void Capitalise(char *phrase)
{
    //Initialises length and alots the length of the character array to it
    int length;
    length = strlen(phrase);
    
    //for loop to subtract 32 off the letter if it is capital
    for (int i=0; i<length; i++){
        if ((phrase[i] >= 97) && (phrase[i] <= 122) && ((phrase[i-1] == 32) || (i == 0))){
            phrase[i] = (phrase[i] - 32);
        }
    }
}


",1
dpar783,1696768632,1,"void Capitalise(char *phrase) {
	int i;
	for (i = 0; i < (strlen(phrase)-1); i++) {
		if (phrase[0] >= 97 && phrase[0] <= 122) {
			phrase[0] = (char)(phrase[0]-32);
		}
		else if (phrase[i] == ' ' && phrase[i+1] >= 97 && phrase[i+1] <= 122) {
			phrase[i+1] = (char)(phrase[i+1]-32);
		}
	}
}",0
dpar783,1696768891,2,"void Capitalise(char *phrase) {
	int i;

	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = (char)(phrase[0]-32);
	}

	for (i = 0; i < (strlen(phrase)-1); i++) {
		if (phrase[i] == ' ' && phrase[i+1] >= 97 && phrase[i+1] <= 122) {
			phrase[i+1] = (char)(phrase[i+1]-32);
		}
	}
}",1
dpat391,1696467057,1,"char LowerToUpper(char letter){
    return (letter - 32);
}

void Capitalise(char *phrase){
    phrase[0] = LowerToUpper(phrase[0]);
    int length = strlen(phrase);
    for(int i=0; i < length; i++){
        if (phrase[i] == ' '){
            phrase[i+1] = LowerToUpper(phrase[i+1]);
        }
    }
}",0
dpat391,1696467259,2,"
char
LowerToUpper (char letter)
{
  return (letter - 32);
}

void
Capitalise (char *phrase)
{
  if (phrase[0] == ' ')
    {
      if (phrase[0] < 64)
	{
	  phrase[0] = LowerToUpper (phrase[0]);
	}
      int length = strlen (phrase);
      for (int i = 0; i < length; i++)
	{
	  if (phrase[i] == ' ')
	    {
	      if (phrase[i + 1] < 64)
		{
		  phrase[i + 1] = LowerToUpper (phrase[i + 1]);
		}
		}
	    }
	}
    }",0
dpat391,1696640071,3,"char LowerToUpper(char letter){
    return (letter - 32);
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; 
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (islower(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = LowerToUpper(phrase[i]);
                capitalizeNext = 0; 
                
            }
        } else {
            capitalizeNext = 1; 
        }
    }
}",0
dpat391,1696640481,4,"void Capitalise(char *phrase)
{
    int j, i =0 ;
    
    while (phrase[i] != '\0') {
        i++;
    }
    
    i--;
    
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
        phrase[0] = phrase[0] - 32;
    }
    for (j=0; j<=i; j++) {
        if (phrase[j] == ' ') {
                if ((phrase[j+1] >= 'a') && (phrase[j+1] <= 'z')){
                    phrase[j+1] = phrase[j+1] - 32;
                }
            }
    }
}",1
dpat674,1696755234,1,"void Capitalise(char *phrase) {
int i=0;
int word = 1;

for (i = 0; phrase[i] != '\0'; i++) {
if ((phrase[i] >= 'a' && phrase[i] <= 'z') && word==1) {
phrase[i] = phrase[i] - ('a' - 'A');
word = 0;
} else if (phrase[i] == ' ') {
word = 1;
}
}
}",0
dpat674,1696755575,2,"void Capitalise(char *phrase) {
int i=0;
int word = 1;

for (i = 0; phrase[i] != '\0'; i++) {
if ((phrase[i] >= 'a' && phrase[i] <= 'z') && word==1) {
phrase[i] = phrase[i] - ('a' - 'A');
word = 0;
} else if (phrase[i] == ' ') {
word = 1;
}else {
word=0;
}
}
}


",1
dpet289,1696639590,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
	int i = 1;
	while (phrase[i] != '\0')
	{

		if (phrase[i - 1] == ' ')
		{
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}
	phrase[0] = phrase[0] - ('a' - 'A');
}

int main(void)
{
	char phrase[100] = ""god of nations at thy feet"";
	Capitalise(phrase);
	printf(""%s"", phrase);
}",0
dpet289,1696639629,2,"void Capitalise(char *phrase)
{
	int i = 1;
	while (phrase[i] != '\0')
	{

		if (phrase[i - 1] == ' ')
		{
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}
	phrase[0] = phrase[0] - ('a' - 'A');
}",0
dpet289,1696640776,3,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i + 1] != '\0')
	{
		if (phrase[i - 1] == ' ')
		{
			if (phrase[i] >= 'a' && phrase[i] <= 'z')
			{
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		i++;
	}

	if (phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - ('a' - 'A');
	}
}",1
dric234,1696311640,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	for (int i = 0; i < length; i++) {
		if (i == 0) {
			phrase[i] = phrase[i] - 32;
		}
		if (phrase[i] == 32) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}
",0
dric234,1696312118,2,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	for (int i = 0; i < length; i++) {
		if (i == 0 && phrase[i] > 90) {
			phrase[i] = phrase[i] - 32;
		}
		if (phrase[i] == 32 && phrase[i+1]>90) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}
",1
drob588,1696837682,1,"void Capitalise(char* phrase)
{
	int i = 0;
	if (phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - 'a' + 'A';
	}

	i++;

	while (phrase[i] != '\0') {
		if (phrase[i - 1] == 32 && phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - 'a' + 'A';
		}
		i++;
	}

	return 0;
}
",0
drob588,1696837736,2,"void Capitalise(char* phrase)
{
	int i = 0;
	if (phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - 'a' + 'A';
	}

	i++;

	while (phrase[i] != '\0') {
		if (phrase[i - 1] == 32 && phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - 'a' + 'A';
		}
		i++;
	}
}
",1
droj056,1696751031,1,"void Capitalise(char* phrase) {
	int length = phrase;
	for (int i = 0, i < length, i++) {
		if (i == 0 || phrase[i - 1] == ' ') {
			phrase[i] = toupper(phrase[i]);
		}
	}
}
",0
droj056,1696751207,2,"void Capitalise(char* phrase) {
	int length = strlen(phrase);
	for (int i = 0; i < length; i++) {
		if (i == 0 || phrase[i - 1] == ' ') {
			phrase[i] = toupper(phrase[i]);
		}
	}
}",1
dryu303,1696809326,1,"int length(char *word)
{
int i=0;
while (word[i] != '\0')
{
i++;
}
return i;
}

void Capitalise(char *phrase)
{
    int l=length(phrase);
    int i=0;
    phrase[i]=phrase[i]-32;
    while (i<=l)
    {
        if(phrase[i]== ' ' )
        {
            i++;
            phrase[i]=phrase[i]-32;
        }
        i++;
        }
}",0
dryu303,1696811169,2,"int length(char *word)
{
int i=0;
while (word[i] != '\0')
{
i++;
}
return i;
}

void Capitalise(char *phrase)
{
    int l=length(phrase);
    int i=0;
    if (phrase[i] >= 'a' && phrase[i] <= 'z')
    {
        phrase[i]=phrase[i]-32;
    }
    while (i<=l)
    {
        if(phrase[i]== ' ' )
        {
            i++;
            if (phrase[i] >= 'a' && phrase[i] <= 'z'){
            phrase[i]=phrase[i]-32;
            }
        }
        i++;
        }
}",1
dsan845,1696845045,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{

int i;
int length = strlen(phrase) ; 
int A = 32 ;

phrase[0] = phrase[0] - 32 ;



for (i = 0 ; i< length ; i++ )
    if (phrase[i-1] == ' ') {
      phrase[i]= phrase[i] - A ; 

    
}

    
}
 ",0
dsan845,1696847681,2,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{

int i;
int length = strlen(phrase) ; 
int A = 32 ;



if(phrase[0] == ' ') {
     phrase[0] = phrase[0] ; }
  else if (phrase[i]> 96 && phrase[i]< 123) {
      
      phrase[i] = phrase[i] - 32 ;
      
      
  }
  
      
      



for (i = 0 ; i< length ; i++ ) {
     if (phrase[i]>96 && phrase[i]<123) {
     
     phrase[i]=phrase[i] ;
     
     
     
     if (phrase[i-1] == ' ') {
     phrase[i]= phrase[i] - A ; 
         

    
}

    
}

}

    
}
",0
dsan845,1696848358,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    int i;
    int length = strlen(phrase);
    int A = 32;

    if (phrase[0] == ' ') {
        phrase[0] = phrase[0];
    }
    else if (phrase[i] > 96 && phrase[i] < 123) {
        phrase[i] = phrase[i] - A;
    }

    for (i = 0; i < length; i++) {
        if (phrase[i] > 96 && phrase[i] < 123) {
            phrase[i] = phrase[i];

            if (phrase[i - 1] == ' ') {
                phrase[i] = phrase[i] - A;
            }
        }
    }
}
",0
dsan845,1696848409,4,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    int i;
    
    
    int length = strlen(phrase);
    
    
    
    int A = 32;

    if (length > 0 && phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - A;
    }

    for (i = 1; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
            phrase[i] = phrase[i] - A;
        }
    }
}
",1
dsaw164,1696223949,1,"int MakeCapital(char letter){
    if((97 <=letter) && (letter<= 122)){
        letter = letter - 32;
    }
    return letter;
}




void Capitalise(char *phrase)
{
    int end = strlen(phrase);
    int i = 0;
    
    while(i < end){
        if(i == 0){
            if((phrase[i] <= 122) && (phrase[i] >= 97)){
                phrase[i] = MakeCapital(phrase[i]);
            };
        }
        
        if((phrase[i] <= 122) && (phrase[i] >= 97) || (phrase[i] <= 90) && (phrase[i] >= 65)){
           if((i != 0) && phrase[i - 1] == 32){
               phrase[i] = MakeCapital(phrase[i]);
           } 
        }
        
        i++;
    }
}",0
dsaw164,1696224033,2,"int MakeCapital(char letter){
    if((97 <=letter) && (letter<= 122)){
        letter = letter - 32;
    }
    return letter;
}




void Capitalise(char *phrase)
{
    int end = strlen(phrase);
    int i = 0;
    
    while(i < end){
        if(i == 0){
            if((phrase[i] <= 122) && (phrase[i] >= 97)){
                phrase[i] = MakeCapital(phrase[i]);
            };
        }
        
        if(((phrase[i] <= 122) && (phrase[i] >= 97)) || ((phrase[i] <= 90) && (phrase[i] >= 65))){
           if((i != 0) && phrase[i - 1] == 32){
               phrase[i] = MakeCapital(phrase[i]);
           } 
        }
        
        i++;
    }
}",1
dsin316,1696676327,1,"void Capitalise(char *phrase)
{
    int length;
    int i;
    int check;
    length = strlen(phrase);
    
    for(i = 0; i < length; i++){
        
        if (phrase[i] == ' '){
            if(phrase[i+1] >= 97 && phrase[i+1] <= 122){
                phrase[i+1] = phrase[i+1]-32;
            }
        }
        else if (i == 0){
            if(phrase[i] >= 97 && phrase[i] <= 122){
                phrase[i] = phrase[i]-32;
            }
        }
    }
}",0
dsin316,1696676383,2,"void Capitalise(char *phrase)
{
    int length;
    int i;

    length = strlen(phrase);
    
    for(i = 0; i < length; i++){
        
        if (phrase[i] == ' '){
            if(phrase[i+1] >= 97 && phrase[i+1] <= 122){
                phrase[i+1] = phrase[i+1]-32;
            }
        }
        else if (i == 0){
            if(phrase[i] >= 97 && phrase[i] <= 122){
                phrase[i] = phrase[i]-32;
            }
        }
    }
}",1
dstr542,1696644267,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char* phrase)
{
	int length = strlen(phrase);
	
	// initialiser
	phrase[0] = toupper(phrase[0]);
	
	//rest of thingy
	for (int i = 0; i < (length - 1);i++) {
		if (phrase[i] == 32) {
			phrase[i + 1] = toupper(phrase[i + 1]);
		}
	}
}
",1
dsut709,1696737444,1,"void CapLetter(char *letter,int i) {
	if (letter[i] >= 'a' && letter[i] <= 'z') {
		letter[i] = letter[i] + ('A' - 'a');
	}
}

void Capitalise(char *phrase)
{
	int i = 0;
	CapLetter(phrase,i);
	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			CapLetter(phrase, (i+1));
		}
		i++;
	}
}",1
dtem664,1696841815,1,"void Capitalise(char* phrase) {
    int length = strlen(phrase);
    int i;

    
    phrase[0] = toupper(phrase[0]);

    for (i = 1; i < length; i++) {
        
        if (isalpha(phrase[i]) && !isalpha(phrase[i - 1])) {
            phrase[i] = toupper(phrase[i]);
        }
    }
}",0
dtem664,1696848532,2,"void Capitalise(char* phrase) {
    int length_of_string = strlen(phrase);
    int i = 0;

    for (i = 0; i < length_of_string; i++) {
        if (phrase[0] >= 'a' && phrase[0] <= 'z') {
            phrase[0] -= 32;
        }
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
                phrase[i + 1] -= 32;
            }
        }
    }
}",1
dten781,1696845714,1,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    if (phrase == NULL || *phrase == '\0') {
        // Handle NULL or empty input string.
        return;
    }

    int capitaliseNext = 1;  // A flag to indicate if the next character should be capitalized.

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isspace(phrase[i])) {
            // If the current character is a space, set the flag to capitalize the next character.
            capitaliseNext = 1;
        } else if (isalpha(phrase[i])) {
            // If the current character is alphabetic and needs to be capitalized, do so.
            if (capitaliseNext) {
                phrase[i] = toupper(phrase[i]);
                capitaliseNext = 0;  // Reset the flag.
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        }
    }
}

",0
dten781,1696846322,2,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    if (phrase == NULL || *phrase == '\0') {
        // Handle NULL or empty input string.
        return;
    }

    int capitaliseNext = 1;  // A flag to indicate if the next character should be capitalized.

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isspace(phrase[i])) {
            // If the current character is a space, set the flag to capitalize the next character.
            capitaliseNext = 1;
        } else if (isalpha(phrase[i])) {
            // If the current character is alphabetic and needs to be capitalized, do so.
            if (capitaliseNext) {
                phrase[i] = toupper(phrase[i]);
                capitaliseNext = 0;  // Reset the flag.
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            // If the current character is not alphabetic, reset the capitalization flag.
            capitaliseNext = 0;
        }
    }
}

",1
dtie151,1696410330,1,"void Capitalise(char* phrase)
{
	int i = 0;
	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}
}",0
dtie151,1696410584,2,"void Capitalise(char* phrase)
{
	int i = 0;
	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ' && phrase[0] >= 97 && phrase[0] <= 122) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}
}",0
dtie151,1696410680,3,"void Capitalise(char* phrase)
{
	int i = 0;
	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ' && phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}
}
",1
dtol781,1696381922,1,"void Capitalise(char *phrase)
{
    int i;
    char a = 'a';
    char A = 'A';
    for (i = 0; phrase[i] != '\0'; i++) {
        if ( (i == 0 || phrase[i-1] == ' ') && (phrase[i] >= 97 && phrase[i] <= 122)) {
            phrase[i] -= (a-A);
        }
    }
}",1
dtua408,1696816435,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    if (phrase[0] > 96 && phrase[0] < 123) {
        phrase[0] = phrase[0] - 32;
    }
    
    for (int i = 0; i < length; i++) {
        if (phrase[i] == 32 && phrase[i+1] > 96 && phrase[i+1] < 123) {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
    
    return;
    
}
",1
dver839,1696798951,1,"void Capitalise(char *phrase)
{
    int i = 0;
    /* Capitalise First Letter*/
    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[i] = phrase[i] - ('a' - 'A');
    }
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
		i++;

		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
	}
	i++;
        
    }
}
",1
dvu878,1696652697,1,"#include <stdio.h>
#include <string.h>
#define _CRT_SECURE_NO_WARNINGS

void Capitalise(char* phrase)
{
	int first = 1;

	for (int i = 0; i < strlen(phrase); i++) {

		if (first == 1) {
			first = 0;
			if (phrase[i] >= 97 && phrase[i] <= 122) {
				phrase[i] = phrase[i] - 32;
			}
		}

		else 
		{
			if (phrase[i] == ' ') {
			first = 1;
			}
		}
	}
}",1
dwar594,1696817600,1,"void Capitalise(char *phrase)
{
 int length = strlen(phrase);
    int capN = 1; 
    
    for (int i = 0; i < length; i++) {
        if (isspace(phrase[i])) {
            capN = 1; 
        } else {
            if (islower(phrase[i]) && capN) {
                phrase[i] = toupper(phrase[i]);
                capN = 0; 
            } else (isupper(phrase[i]) && !capN) {
                phrase[i] = tolower(phrase[i]); 
            }
        }
    }
}",0
dwar594,1696817961,2,"void Capitalise(char *phrase)
{
    char toUpper(char c) {
    return (c >= 'a' && c <= 'z') ? c - 32 : c;
    
    int capNext = 1;

    while (*phrase) {
        if (isspace(*phrase)) {
            capNext = 1;
        } 
        else {
            if (capNext) {
                *phrase = toUpper(*phrase);
                capNext = 0;
            }
        }
        phrase++;
    }
}
",0
dwar594,1696818176,3,"char toUpper(char c) {
    return (c >= 'a' && c <= 'z') ? c - 32 : c;
}

void Capitalise(char *phrase){
    
    int capN = 1;

    while (*phrase) {
        if (isspace(*phrase)) {
            capN = 1;
        } 
        else {
            if (capN) {
                *phrase = toUpper(*phrase);
                capN = 0;
            }
        }
        phrase++;
    }
}
",1
dwu617,1696652651,1,"void Capitalise(char *phrase)
{
	int length, i = 0;

	length = strlen(phrase);

	while (phrase[i] < 97 && phrase[i] > 122) {
		i++;
	}

	phrase[i] = phrase[i] - 32;
	
	for (i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}
",0
dwu617,1696652913,2,"void Capitalise(char *phrase)
{
	int length, i = 0;

	length = strlen(phrase);

	while (phrase[i] < 97 && phrase[i] > 122) {
		i++;
	}

	if (phrase[i] >= 97 && phrase[i] <= 122) {
		phrase[i] = phrase[i] - 32;
	}

	for (i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
	}
}
",1
dyu343,1696206317,1,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - 32;
	}
}",0
dyu343,1696206509,2,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 1; i < strlen(phrase); i++)
	{
		if (phrase[i - 1] == ' ' && (phrase[i] >= 'a' && phrase[i] <= 'z'))
		{
			phrase[i] = phrase[i] - 32;
		}
	}
}",1
dzha497,1696768955,1,"void Capitalise(char *phrase)
{
    int i;
    for (i = 0; i < strlen(phrase); i++) {
        if ((phrase[i] == ' ') && (phrase[i + 1] >= 97) && (phrase[i + 1] <= 122)) { 
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
    if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
        phrase[0] = phrase[0] - 32;
    }
}",1
ealg928,1696848915,1,"// helper function
char convertUpper(char c) 
{
    if (c >= 'a' && c <= 'z') 
    {
        return c - ('a' - 'A');
    } else 
    {
        return c;
    }
}

void Capitalise(char *phrase)
{
    int capitaliseFollowing = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitaliseFollowing) 
        {
            phrase[i] = convertUpper(phrase[i]);
            capitaliseFollowing = 0;
        } else if (phrase[i] == ' ') 
        {
            capitalizeFollowing = 1;
        }
    }
}",0
ealg928,1696848995,2,"char convertUpper(char c) 
{
    if (c >= 'a' && c <= 'z') 
    {
        return c - ('a' - 'A');
    } 
    else 
    {
        return c;
    }
}

void Capitalise(char *phrase)
{
    int capitaliseFollowing = 1; // Corrected variable name
    
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitaliseFollowing) 
        {
            phrase[i] = convertUpper(phrase[i]);
            capitaliseFollowing = 0;
        } 
        else if (phrase[i] == ' ') 
        {
            capitaliseFollowing = 1;
        }
    }
}",0
ealg928,1696849137,3,"char convertUpper(char c) 
{
    if (c >= 'a' && c <= 'z') 
    {
        return c - ('a' - 'A');
    } 
    else 
    {
        return c;
    }
}

void Capitalise(char *phrase) {
    int capitaliseFollowing = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') && capitaliseFollowing) {
            phrase[i] = toUpperCase(phrase[i]);
            capitaliseFollowing = 0;
        } else if (phrase[i] == ' ') {
            capitaliseFollowing = 1;
        }
    }
}
",0
eara128,1696424899,1,"void Capitalise(char * word){
    int length = strlen(word);
    for(int i = 0;i < length; i++){
        if(i == 0 || word[i - 1] == ' '){
            if(word[i] >= 97 && word[i] <= 122){
                word[i] = (int)word[i] - 32;
                continue;
            }
        }
    }
}",1
earn712,1696744724,1,"void Capitalise(char *phrase) 
{
    int i;
    int length;
    
    length = strlen(phrase);
     if ((phrase[0] <= 122) && (phrase[0] >=97)) {
    phrase[0]= phrase[0]-32;
     }
    
    for (i=1; i<length; i++) {
        if (phrase[i-1] == ' ') {
            phrase[i]= phrase[i]-32;
        }
    }
}
",0
earn712,1696744783,2,"void Capitalise(char *phrase) 
{
    int i;
    int length;
    
    length = strlen(phrase);
     if ((phrase[0] <= 122) && (phrase[0] >=97)) {
    phrase[0]= phrase[0]-32;
     }
    
    for (i=1; i<length; i++) {
        if (phrase[i-1] == ' ') {
            if ((phrase[i] <= 122) && (phrase[i] >=97)) {
                phrase[i]= phrase[i]-32;
            }
        }
    }
}
",1
ebar824,1696495939,1,"void Capitalise(char *phrase)
{
    int wordlength = strlen(phrase);
   
    if (phrase[0]>96 && phrase[0]<123)
        {
            phrase[0] =phrase[0]-32;
    }
        

    for (int i = 1; i < wordlength+1; i++)
    {
        if (phrase[i]>96 && phrase[i]<123 && phrase[i-1] ==32)
        {
            phrase[i] =phrase[i]-32;
        }
        
    }
 
    
}  ",1
echa931,1696816719,1,"void Capitalise(char *phrase)
{
	int i=0;
	while (1 == 1) {
		if ((phrase[i] > 96) && (phrase[i] < 123)) {
			phrase[i] -= 32;
			i++;
		}
		while (phrase[i] != 32) {
			if (phrase[i] == '\0') {
				return;
			}
			i++;
		}
		i++;
	}
}
",1
eche101,1696676390,1,"void Capitalise(char *phrase)
{
   int nextPos = 1;
  for (int i = 0; phrase[i] != '\0'; i++)
    {
      if (phrase[i] == ' ')
	{
	  nextPos = 1;
	}
      else
	{
	  if (nextPos)
	    {
	      if (phrase[i] >= 'a' && phrase[i] <= 'z')
		{
		  phrase[i] = phrase[i] + ('A' - 'a');
		}
	      nextPos = 0;
	    }
	  else
	    {
	      if (phrase[i] >= 'A' && phrase[i] <= 'Z')
		{
		  phrase[i] = phrase[i] + ('a' - 'A');
		}
	    }
	}
    } 
}
",1
eejl688,1696835364,1,"void Capitalise(char *phrase)
{
   
    for (int i = 0; phrase[i] != '\0'; i++)
    {
        if (phrase[i] == ' ' && 97 < phrase[i+1] < 122)
        {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
    if (97 < phrase[0] < 122)
    {
        phrase[0] = phrase[0] - 32;
    }
}
",0
eejl688,1696835779,2,"void Capitalise(char* phrase)
{
    for (int i = 0; phrase[i] != '\0'; i++)
    {
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')
        {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    {
        phrase[0] = phrase[0] - 32;
    }
}
",1
eejl932,1696810934,1,"void Capitalise(char* phrase) {
    int i, word_start = 1;

    for (i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (word_start) {
                phrase[i] -= 32;
                word_start = 0; 
            }
        }

        else if (phrase[i] == ' ') {
            word_start = 1;
        }
    }
}",0
eejl932,1696811296,2,"void Capitalise(char* phrase) {
    int i = 0;
    while (phrase[i] != '\0') {
        if (i == 0 || phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - 32;
            }
        }
        i++;
    }
}",1
efra318,1696371508,1,"void Capitalise(char *phrase)
{
    int j = 0;
	int i = 0;
	int length = 0;
	

	while (phrase[j] != '\0') {
		length = j + 1;
		j++;
	}

	for (i = 0; i < length; i++) {
		if (i == 0) {
			if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		else if ((phrase[i - 1]) == ' ') {
			if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
	}
    
}
",1
egho902,1696806972,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i = 0;
    
    int stringlength = strlen(phrase);
    
    if (phrase[0] > 90)
    {
        phrase[0] = phrase[0] - 32;
    }
    
    for (i = 0; i = stringlength - 1; i++)
    {   
        if (phrase[i] == ' ' && phrase[i+1] > 90)
        {
            phrase[i+1] = phrase[i+1] -32;
        }
        
        i++;
    }
    
    return;
}
",0
egho902,1696807057,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i = 0;
    
    int stringlength = strlen(phrase);
    
    if (phrase[0] > 90)
    {
        phrase[0] = phrase[0] - 32;
    }
    
    for (i = 0; i = stringlength - 1; i++)
    {   
        if ((phrase[i] == ' ') && (phrase[i+1] > 90))
        {
            phrase[i+1] = phrase[i+1] -32;
        }
        
        i++;
    }
    
    return;
}
",0
egho902,1696808775,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i = 0;
    
    int stringlength = strlen(phrase);

    while (i < stringlength)
    {   if (phrase[i] == ' ' && phrase[i + 1] > 90)
    {
        phrase [i + 1] = phrase[i + 1] - 32;
    }
        i++;
    }
     if (phrase[0] > 90)
    {
        phrase[0] = phrase[0] - 32;
    }
    }
    
",1
ehan360,1696299013,1,"void Capitalise(char *phrase)
{
    // Capitalize the first letter, if it's a letter
    
    // Capitalize the next letter once a space is located, and if it's a letter.
    
    // Loop length-1 times - but wait! We do not have a length.
    for (int i = 0; i < strlen(phrase); i++)
  {
    if (phrase[i] >= 97 && phrase[i] <= 122) {
        if (i == 0) {
        phrase[i] = phrase[i] - 32;
        }
        }
    if (phrase[i] == 32) {
    phrase[i+1] = phrase[i+1] - 32;  
    }
  }
    
}",0
ehan360,1696299084,2,"void Capitalise(char *phrase)
{
    // Capitalize the first letter, if it's a letter
    
    // Capitalize the next letter once a space is located, and if it's a letter.
    
    // Loop length-1 times - but wait! We do not have a length.
    for (int i = 0; i < strlen(phrase); i++)
  {
    if (phrase[i] >= 97 && phrase[i] <= 122) {
        if (i == 0) {
        phrase[i] = phrase[i] - 32;
        }
        }
    if (phrase[i] == 32) {
        if (phrase[i+1] >= 97 && phrase[i+1] <= 122) {
    phrase[i+1] = phrase[i+1] - 32; 
        }
    }
  }
    
}
}",0
ehan360,1696299267,3,"void Capitalise(char *phrase)
{
    // Capitalize the first letter, if it's a letter
    
    // Capitalize the next letter once a space is located, and if it's a letter.
    
    // Loop length-1 times - but wait! We do not have a length.
    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122) {
            if (i == 0) 
                {
                phrase[i] = phrase[i] - 32;
                }
        }
        
    
        if (phrase[i] == 32 && phrase[i+1] >= 97 && phrase[i+1] <= 122) {
            phrase[i+1] = phrase[i+1] - 32;
        }
  }
    
}",1
ehua682,1696399940,1,"void Capitalise(char *phrase) {
    
    int length = strlen(phrase);
    
    // Indicate to determine whether the upcoming character should be capitalized.
    int capitalizeNext = 1; 


    for (int i = 0; i < length; i++) {
        if (capitalizeNext && islower(phrase[i])) {
            phrase[i] = toUpper(phrase[i]);
            capitalizeNext = 0;
        } else if (isspace(phrase[i])) {
            
    
            //Setting the falg to initiate capitalization for the following character/first letter of new word, 
            indicating the start of a new word.
            capitalizeNext = 1; 
        }
    }
}",0
ehua682,1696819752,2,"#include <stdbool.h>


// Function for capitalize the first character of each word in a phrase
void Capitalize(char* phrase) {
    
    // Flag to track the start of a new word
    bool newWord = true;  
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        char currentChar = phrase[i];
        
        // Checking whether the current character is a lowercase alphabetic character
        if (currentChar >= 'a' && currentChar <= 'z') {
            // If it's the start of a new word, make it capital
            if (newWord) {
                
                // transformating to Uppercase 
                phrase[i] = currentChar - 'a' + 'A';  
                newWord = false;
            } else {
                
                // subsequent characters in the word wont change 
                phrase[i] = currentChar;  
            }
        } else if (currentChar >= 'A' && currentChar <= 'Z') {
            
            
            // If it's the start of a new word, keep it capital letter
            if (newWord) {
                newWord = false;
            }
        } else {
            
            // Non-alphabetic character will mark the start of a new word
            newWord = true;
        }
    }
}
",0
ehua682,1696822366,3,"#include <stdbool.h>
#include <stdio.h>

// Function for capitalizing the first character of each word in a phrase
void Capitalise(char* phrase) {
    // Flag to track the start of a new word
    bool newWord = false;

    for (int i = 0; phrase[i] != '\0'; i++) {
        char currentChar = phrase[i];

        // Check if the current character is alphabetic
        if ((currentChar >= 'a' && currentChar <= 'z') || (currentChar >= 'A' && currentChar <= 'Z')) {
            // If it's the start of a new word or the first character in the string, make it capital
            if (newWord || i == 0) {
                // Transform to uppercase
                phrase[i] = (currentChar >= 'a' && currentChar <= 'z') ? (currentChar - 'a' + 'A') : currentChar;
                newWord = false;
            } else {
                // Subsequent characters in the word won't change
                phrase[i] = currentChar;
            }
        } else if (currentChar == ' ') {
            // Non-alphabetic character will mark the start of a new word
            newWord = true;
        }
    }
}



void main () {
char phrase[100] = ""123 f56 789"";
Capitalise(phrase);
printf(""%s"", phrase);
    
}",0
ehua682,1696822391,4,"#include <stdbool.h>
#include <stdio.h>

// Function for capitalizing the first character of each word in a phrase
void Capitalise(char* phrase) {
    // Flag to track the start of a new word
    bool newWord = false;

    for (int i = 0; phrase[i] != '\0'; i++) {
        char currentChar = phrase[i];

        // Check if the current character is alphabetic
        if ((currentChar >= 'a' && currentChar <= 'z') || (currentChar >= 'A' && currentChar <= 'Z')) {
            // If it's the start of a new word or the first character in the string, make it capital
            if (newWord || i == 0) {
                // Transform to uppercase
                phrase[i] = (currentChar >= 'a' && currentChar <= 'z') ? (currentChar - 'a' + 'A') : currentChar;
                newWord = false;
            } else {
                // Subsequent characters in the word won't change
                phrase[i] = currentChar;
            }
        } else if (currentChar == ' ') {
            // Non-alphabetic character will mark the start of a new word
            newWord = true;
        }
    }
}



",1
ejeo051,1696300575,1,"void Capitalise(char *phrase)
{
    int length;
    
    length = strlen(phrase);
    
    if (phrase[0] <= 122 && phrase[0] >= 97) {
        phrase[0] = phrase[0] -32;
    }
    
    for (int i = 0; i < length; i++) {
        if (phrase[i - 1] == 32) {
            phrase[i] = phrase[i] - 32;
        }
    }
        
}
",0
ejeo051,1696300670,2,"void Capitalise(char *phrase)
{
    int length;
    
    length = strlen(phrase);
    
    if (phrase[0] <= 122 && phrase[0] >= 97) {
        phrase[0] = phrase[0] -32;
    }
    
    for (int i = 0; i < length; i++) {
        if (phrase[i - 1] == 32 && phrase[i] <= 122 && phrase[i] >= 97) {
            phrase[i] = phrase[i] - 32;
        }
    }
        
}
",1
ekmu195,1696228944,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase) - 1;
    int spaces[100] = {};
    int i;
    int a = 1;
    int j;
    char letter;
    spaces[0] = 0;
// Finds and creates an array of indexes where there is a space
    for (i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            spaces[a] = i;
            a++;
        }
    }
// Checks if the value is within the lowercase alphabet limits, then converts by - 32
    for (j = 0; j < a; j++) {
        if (j == 0) {
            letter = phrase[(spaces[j])];
        } else {
            letter = phrase[((spaces[j]) + 1)];
        }
        
        // If letter is lowercase (97 - 122 inclusive)
        if (letter >= 97 & letter <= 122) {
            if (j == 0) {
                phrase[(spaces[j])] = letter - 32;
            } else {
                phrase[(spaces[j] + 1)] = letter - 32;
            }
        }
    }
}
",0
ekmu195,1696229137,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase) - 1;
    int spaces[100] = {};
    int i;
    int a = 1;
    int j;
    char letter;
    spaces[0] = 0;
// Finds and creates an array of indexes where there is a space
    for (i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            spaces[a] = i;
            a++;
        }
    }
// Checks if the value is within the lowercase alphabet limits, then converts by - 32
    for (j = 0; j < a; j++) {
        if (j == 0) {
            letter = phrase[(spaces[j])];
        } else {
            letter = phrase[((spaces[j]) + 1)];
        }
        
        // If letter is lowercase (97 - 122 inclusive)
        if ((letter >= 97) && (letter <= 122)) {
            if (j == 0) {
                phrase[(spaces[j])] = letter - 32;
            } else {
                phrase[(spaces[j] + 1)] = letter - 32;
            }
        }
    }
}
",1
elau447,1696670301,1,"void Capitalise(char* phrase)
{
	if ((phrase[0] >= 97) || (phrase[0] < 122)) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	for (int i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		if (phrase[i + 1] == '\0') {
			return;
		}
	}
}
",0
elau447,1696670469,2,"void Capitalise(char* phrase)
{
	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	for (int i = 0; i < strlen(phrase); i++) {
		if ((phrase[i] == ' ') && (phrase[0] >= 97) && (phrase[0] <= 122)) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		if (phrase[i + 1] == '\0') {
			return;
		}
	}
}",0
elau447,1696670513,3,"void Capitalise(char* phrase)
{
	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	for (int i = 0; i < strlen(phrase); i++) {
		if ((phrase[i] == ' ') && (phrase[i+1] >= 97) && (phrase[i+1] <= 122)) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		if (phrase[i + 1] == '\0') {
			return;
		}
	}
}",1
eles952,1696838824,1,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void Capitalise(char *phrase)
{
    int i;
   for (int i = 0; phrase[i] != '\0'; i++) {
        if (i == 0){
            phrase[i] = phrase[i] - 32;
        }
        
        if (phrase[i] == ' '){
        phrase[i+1] = phrase[i+1] - 32;
        }
        }

     return;
}

    ",0
eles952,1696838842,2,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void Capitalise(char *phrase)
{
   for (int i = 0; phrase[i] != '\0'; i++) {
        if (i == 0){
            phrase[i] = phrase[i] - 32;
        }
        
        if (phrase[i] == ' '){
        phrase[i+1] = phrase[i+1] - 32;
        }
        }

     return;
}

    ",0
eles952,1696839352,3,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void Capitalise(char *phrase)
{
    int i;
   for (int i = 0; phrase[i] != '\0'; i++) {
        
        if (i == 0 && phrase[i] > 97){
            phrase[i] = phrase[i] - 32;
        }
        
        if (phrase[i] == ' ' && phrase[i+1] > 97){
        phrase[i+1] = phrase[i+1] - 32;
        }
        }

     return;
}

    ",0
eles952,1696839365,4,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void Capitalise(char *phrase)
{
   for (int i = 0; phrase[i] != '\0'; i++) {
        
        if (i == 0 && phrase[i] > 97){
            phrase[i] = phrase[i] - 32;
        }
        
        if (phrase[i] == ' ' && phrase[i+1] > 97){
        phrase[i+1] = phrase[i+1] - 32;
        }
        }

     return;
}

    ",0
eles952,1696839439,5,"/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>


void Capitalise(char *phrase)
{
   for (int i = 0; phrase[i] != '\0'; i++) {
        
        if (i == 0 && phrase[i] > 96){
            phrase[i] = phrase[i] - 32;
        }
        
        if (phrase[i] == ' ' && phrase[i+1] > 96){
        phrase[i+1] = phrase[i+1] - 32;
        }
        }

     return;
}

    ",1
elia955,1696844640,1,"int is_lowercase(char c) {
    return (c >= 'a' && c <= 'z');
}

int is_uppercase(char c) {
    return (c >= 'A' && c <= 'Z');
}

void Capitalise(char* phrase) {
    int capitaliseNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n' || phrase[i] == '\r') {
            capitaliseNext = 1;
        }
        else if (capitaliseNext && is_lowercase(phrase[i])) {
            phrase[i] -= ('a' - 'A');
            capitaliseNext = 0;
        }
        else {
            capitaliseNext = 0;
        }
    }
}",1
else264,1696726041,1,"void Capitalise(char *phrase)
{
    int i;
    int length=strlen(phrase);
    phrase[0]=phrase[0]-32;
    for (i=0;i<length;i++){
        if (phrase[i]==32 && phrase[i+1]>=97 && phrase[i+1]<=122)
        phrase[i+1]=phrase[i+1]-32;
    }
}",0
else264,1696726162,2,"void Capitalise(char *phrase)
{
    int i;
    int length=strlen(phrase);

    if (phrase[0]>=97 && phrase[0]<=122){
        phrase[0]=phrase[0]-32;
    }

    for (i=0;i<length;i++){
        if (phrase[i]==32 && phrase[i+1]>=97 && phrase[i+1]<=122)
        phrase[i+1]=phrase[i+1]-32;
    }
}",1
ely207,1696369484,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
	// Capitalise the first word
	if (phrase[0] <= 122 && phrase[0] >= 97)
	{
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	// Capitalised first letter of each word
	for (int i = 1; i < strlen(phrase); i++)
	{
		if (phrase[i] == ' ' && phrase[i+1] <= 122 && phrase[i+1] >= 97)
		{
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
	}

}",1
ema340,1696667882,1,"void Capitalise(char *phrase)
{
    int i = 0;

    while (phrase[i] != '\0') {   
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (i == 0) {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
            else if (phrase[i-1] == ' ') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        
        i++;
    }
}
",1
emah834,1696675426,1,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char *phrase)
{
    int lengthString = strlen(phrase);
    int i;
    for(i = 0; i < lengthString; i++){
        if(i == 0){
            phrase[i] = toupper(phrase[i]);
        }
        if(isspace(phrase[i])){
            i++;
            phrase[i] = toupper(phrase[i]);
        }
    }
}
",1
emah921,1696820206,1,"void Capitalise(char *phrase)
{
    int isFirstCharacter = 1; 
    for (int i = 0; phrase[i] != '\0'; ++i) {
        if (isFirstCharacter && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');  
        if (phrase[i] == ' ') {
            isFirstCharacter = 1;
        } else {
            isFirstCharacter = 0;
        }
    }
}   
",0
emah921,1696820349,2,"void Capitalise(char *phrase) 
{
    int isFirstCharacter = 1;  
    
    for (int i = 0; phrase[i] != '\0'; ++i) {
        if (isFirstCharacter && phrase[i] >= 97 && phrase[i] <= 122) {
            phrase[i] = phrase[i] - (97 - 65);  

        if (phrase[i] == ' ') {
            isFirstCharacter = 1;
        } else {
            isFirstCharacter = 0;
        }
    }
}",0
emah921,1696820930,3,"void Capitalise(char phrase[]) 
{
    int startOfWord = 1;

    for (int i = 0; phrase[i] != '\0'; ++i) {
        if (phrase[i] == ' ') {
            startOfWord = 1;
        }
        else if (startOfWord && phrase[i] >= 97 && phrase[i] <= 122) {
            phrase[i] = phrase[i] - 32; 
            startOfWord = 0;
        }
        else {
            startOfWord = 0;
        }
    }
}",1
emar189,1696838658,1,"void Capitalise(char *phrase)
{
    int i;
	int LowerCase;
	int FirstCharacterInWord;

	i=0;

	while(phrase[i] != '\0') {

		LowerCase=0;
		FirstCharacterInWord=0;

		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			LowerCase=1;
		}


		if (i==0 || phrase[i-1] == ' ') {
			FirstCharacterInWord=1;
		}

		if (LowerCase && FirstCharacterInWord) {
			phrase[i]=phrase[i]-32;
		}

		i=i+1;

	}
}
",1
eqiu349,1696744167,1,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);

	for (i = 0; i < length; i++) {
		if (i == 0) {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		
		if (phrase[i] == 32) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		
	}
}",0
eqiu349,1696744401,2,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);

	for (i = 0; i < length; i++) {
		if (i == 0 && phrase[i] >= 97 && phrase[i] <= 122)  {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		
		if (phrase[i] == 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		
	}
}",1
esia821,1696846278,1,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	int length = strlen(phrase);
	for (int i = 0; i <= length; i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
	}
}
",1
eteo952,1696542383,1,"void Capitalise(char *phrase)
{
    int i;
    int value;
    int length;

    i = 0;
    value = phrase[i];

    if (value >= 97 && value <=122) {
        phrase[i] = phrase[i] - 32;
    }

    i = 1;
    length = strlen(phrase);

    for(i; i < length; i++) {
        if (phrase[i] == ' ' && phrase[i+1] >= 97 && phrase[i+1] <=122) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }

}
",0
eteo952,1696542466,2,"void Capitalise(char *phrase)
{
    int i;
    int value;
    int length;

    i = 0;
    value = phrase[i];

    if (value >= 97 && value <=122) {
        phrase[i] = phrase[i] - 32;
    }

    length = strlen(phrase);

    for(i = 1; i < length; i++) {
        if (phrase[i] == ' ' && phrase[i+1] >= 97 && phrase[i+1] <=122) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }

}",1
etri556,1696842555,1,"void Capitalise(char *phrase)
{
    int phrase_length = strlen(phrase);
    // Determines the length of the inputted array.
    if(phrase[0] < 123 && phrase[0] > 96){
        // If statement runs if the character is a lowercase letter eg has the ascii range of 97 to 122.  
        phrase[0] = phrase[0] - 32;
    }
    // Setting the first letter 
    for(int i = 1; i < phrase_length; i++){
        if(phrase[i] == 32 && phrase[i + 1] != '\0'){
            // Runs if there is a space and makes sure the next character isn't the end of the string.
            if(phrase[i + 1] > 96 && phrase[i + 1] < 123){
                // Runs if the next character being examined is a lowercase letter.
                phrase[i + 1] = phrase[i + 1] - 32; 
            }
        }
    }
}
",1
evic904,1696754213,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
	int length = strlen(phrase);

	if (phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	for (int i = 1; i < length; i++)
	{
		if (phrase[i - 1] == ' ')
		{
			if (phrase[i] >= 'a' && phrase[0] <= 'z')
			{
				phrase[i] = phrase[i] - ('a' - 'A');
			}
			
		}
	}
}",1
ewil853,1696497682,1,"void Capitalise(char *phrase)
{
   int i = 0;
int length;
length = strlen(phrase);
if (phrase[i] >= 97 && phrase[i] <= 122){
phrase[i] = phrase[i] - 32;}

i =1;
for (i=1;i<length;i++){

    if ((phrase[i] != '\0')&& (phrase[i-1]== ' ')&&(phrase[i] >= 97 && phrase[i] <= 122)){
        

        phrase[i] = phrase[i] - 32;
    }
    else{
        phrase[i] = phrase[i];
    }

}
 
}
",1
exu922,1696825033,1,"void Capitalise(char *phrase) {
    bool newWord = true;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (newWord && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
            newWord = false;
        } else if (phrase[i] == ' ') {
            newWord = true;
        } else {
            newWord = false;
        }
    }
}
",1
eyeo346,1696740217,1,"void Capitalise(char *phrase)
{
    // find length of phrase
    int length = strlen(phrase);
    
    // capitalise first character of the phrase 
   
       if (phrase[0] >= 'a' && phrase[0] <= 'z') {
            phrase[0] = phrase[0] - ('a' - 'A');
       }
  
   // capitalise the first character of each world
   for (int i = 1; i < length; i++) {
        
        if (phrase[i-1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}
",1
fcoo305,1696813955,1,"void Capitalise(char *phrase)
{
    int i = 0;
    
    while(phrase[i] != '\0')
    {
        if (i = 0 && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') 
        {
            phrase[i] =  phrase[i] - ('a' - 'A');
        }
        
        if (phrase[i] = ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') 
        {
            phrase[i + 1] =  phrase[i + 1] - ('a' - 'A');
        }
        
        i++;
    }
}
",0
fcoo305,1696815860,2,"void Capitalise(char* phrase)
{
    int i = 0;
    while (phrase[i] != '\0')
    {
        if ((i == 0) && (phrase[i + 1] >= 'a') && (phrase[i + 1] <= 'z'))
        {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        if ((phrase[i] == ' ') && (phrase[i + 1] >= 'a') && (phrase[i + 1] <= 'z'))
        {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }

        i++;
    }
}
",0
fcoo305,1696815926,3,"void Capitalise(char* phrase)
{
    int i = 0;
    while (phrase[i] != '\0')
    {
        if ((i == 0) && (phrase[i] >= 'a') && (phrase[i] <= 'z'))
        {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        if ((phrase[i] == ' ') && (phrase[i + 1] >= 'a') && (phrase[i + 1] <= 'z'))
        {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }

        i++;
    }
}
",1
fesp714,1696643985,1,"void Capitalise(char *phrase)
{
    // Initalising capital to 1 to make the frist word be capital. 
    int capital = 1;
    int i;
    
    // Using islower and toupper functions to see if phrase is 
    // in lowercase then goes through if block to see if it 
    // condition for capitlaising(1) is set. 
    for(i = 0; phrase[i] != '\0'; i++) {
        if(islower(phrase[i])) {
            if(capital) {
                phrase[i] = toupper(phrase[i]);
                capital = 0;
            }
            } else {
                capital = 1;
        }
    }
}
    // google search what functions help to convert upper and 
    // lowercase. ",0
fesp714,1696646997,2,"void Capitalise(char *phrase)
{
    // Initalising capital to 1 to make the first letter be capital. 
    int capital = 1;
    int i;
    
    // Making sure that if the phrase already is capitalised correctly
    // no changes are made. 
    if(phrase[0] >= 'A' && phrase[0] <= 'Z') {
        capital = 0;
    }
    
    // Using islower and toupper functions to see if phrase is 
    // in lowercase then goes through if block to see if it 
    // condition for capitlaising(1) is set. 
    for(i = 0; phrase[i] != '\0'; i++) {
        if(capital) {
                phrase[i] = toupper(phrase[i]);
                capital = 0;
            }
             // For white space character, 
             // if there ensure next one is Capitalised.
        if(isspace(phrase[i])) {
                capital = 1;
            }
    }
}
    // google search what functions help to convert upper and 
    // lowercase. ",1
fkee774,1696304791,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int newPhrase = 1;
    
    for (int i = 0; i < length; i++) {
        char letter = phrase[i];

        if (letter >= 'a' && letter <= 'z') {
            if (newPhrase == 1) {
                phrase[i] = letter - ('a' - 'A');
                newPhrase = 0;
            }
        } 
        else {
            newPhrase = 1;
        }
    }
}
",0
fkee774,1696305109,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int newPhrase = 1;
    
    for (int i = 0; i < length; i++) {
        char letter = phrase[i];

        if (letter >= 'a' && letter <= 'z') {
            if (newPhrase == 1) {
                phrase[i] = letter - ('a' - 'A');
                newPhrase = 0;
            }
        } 
        else if (letter >= 'A' && letter <= 'Z') {
            if (newPhrase == 1) {
                newPhrase = 0; 
            }
        }
        else {
            newPhrase = 1;
        }
    }
}
",0
fkee774,1696305337,3,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int newPhrase = 1;
    
    for (int i = 0; i < length; i++) {
        char letter = phrase[i];

        if (letter >= 'a' && letter <= 'z') {
            if (newPhrase == 1) {
                phrase[i] = letter - ('a' - 'A');
                newPhrase = 0;
            }
        } 
        else if (letter >= 'A' && letter <= 'Z') {
            if (newPhrase == 1) {
                newPhrase = 0; 
            }
        }
        if (letter == ' ') {
            newPhrase = 1;
        }
    }
}
",0
fobr691,1696842981,1,"#include <stdio.h>

int isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            capitalizeNext = 1;
        } else if (capitalizeNext && isLowercaseAlphabet(phrase[i])) {
            phrase[i] = phrase[i] - ('a' - 'A');
            capitalizeNext = 0;
        } else {
            capitalizeNext = 0;
        }
    }
}",1
fwij709,1696240269,1,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    for (i = 0; i < length; i++) {
        if (i == 0) {
            phrase[i] = phrase[i] - 32;
        }
        else if (phrase[i] == 32) {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}
",0
fwij709,1696241308,2,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    {
        phrase[0] = phrase[0] - 32;
    }

    for (i = 0; i < length; i++)
    {
        if (phrase[i] == ' ')
        {
            if (phrase[i+ 1] >= 'a' && phrase[i + 1] <= 'z')
            {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}
",1
fwil727,1696668021,1,"#include <stdio.h>

int isLowercase(char c) {
    return c >= 'a' && c <= 'z';
}

char toUppercase(char c) {
    return c - ('a' - 'A');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;  // Flag to determine if the next character should be capitalized

    while (*phrase) {
        if (capitalizeNext && isLowercase(*phrase)) {
            *phrase = toUppercase(*phrase);
            capitalizeNext = 0;
        } else if (*phrase == ' ' || *phrase == '\t' || *phrase == '\n') {
            capitalizeNext = 1;
        }
        phrase++;
    }
}
",0
fwil727,1696668099,2,"#include <stdio.h>

int isLowercase(char c) {
    return c >= 'a' && c <= 'z';
}

char toUppercase(char c) {
    return c - ('a' - 'A');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;  // Flag to determine if the next character should be capitalized

    while (*phrase) {
        if (capitalizeNext && isLowercase(*phrase)) {
            *phrase = toUppercase(*phrase);
            capitalizeNext = 0;
        } else if (*phrase == ' ' || *phrase == '\t' || *phrase == '\n') {
            capitalizeNext = 1;
        }

        // Handle cases where there are multiple spaces between words
        while (*(phrase + 1) == ' ' || *(phrase + 1) == '\t' || *(phrase + 1) == '\n')
            phrase++;

        phrase++;
    }
}
",0
fwil727,1696668188,3,"#include <stdio.h>

void Capitalise(char *phrase) {
    int capitalizeNext = 1;  // Flag to determine if the next character should be capitalized

    while (*phrase) {
        if (capitalizeNext && (*phrase >= 'a' && *phrase <= 'z')) {
            *phrase -= 32;  // Convert to uppercase (ASCII difference)
            capitalizeNext = 0;
        } else if (*phrase == ' ' || *phrase == '\t' || *phrase == '\n') {
            capitalizeNext = 1;
        }

        phrase++;
    }
}

",0
fwil727,1696821715,4,"#include <stdio.h>

int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int i = 0;
    while (phrase[i] != '\0') {
        // If the current character is a lowercase alphabet and it's the first character of a word
        if (isLowerCase(phrase[i]) && (i == 0 || phrase[i - 1] == ' ')) {
            // Capitalize the character
            phrase[i] -= 32;  // ASCII difference between lowercase and uppercase
        }
        i++;
    }
}

",1
fyan180,1696843150,1,"void Capitalise(char *str) 
{
    int i;
    for (i = 0; str[i] != '\0'; i++) {
        if (i == 0) {
            if (str[i] >= 97 && str[i] <= 122) {
                str[i] = str[i] - 32;
            }
        }
        if (str[i] == ' ') {
            if (str[i+1] >= 97 && str[i+1] <= 122) {
                str[i+1] = str[i+1] - 32;
            }
        }
    }
}",1
gcha636,1696660382,1,"void Capitalise(char *phrase)
{
    int i;
    int length;

    length = strlen(phrase);

    if (phrase[0] <= 122 && phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    }

    for (i = 0; i<length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] < 122 && phrase[i + 1] > 97) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",0
gcha636,1696660500,2,"void Capitalise(char *phrase)
{
    int i;
    int length;

    length = strlen(phrase);

    if (phrase[0] <= 122 && phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    }

    for (i = 0; i<length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] <= 122 && phrase[i + 1] >= 97) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",1
ggao363,1696760258,1,"void Capitalise(char *phrase)
{
phrase[0] -= 32; // 1st character
char *start = phrase;
int leg = (int) strlen(phrase);
for(int i = 0; i < leg; i++){
    if( (int) *(start + i) == 32 )
        phrase[i+1] -= 32;
}

}",0
ggao363,1696761320,2,"void Capitalise(char *phrase){
if(phrase[0] > 97) {
    phrase[0] -= 32; // 1st character
}
char *start = phrase;
int leg = (int) strlen(phrase);
for(int i = 0; i < leg; i++){
    if(( (int) *(start + i) == 32) && ((phrase[i + 1] - 97) * (phrase[i + 1] - 122)<=0))
        phrase[i+1] -= 32;
}

}",1
gge561,1696411816,1,"void Capitalise(char *phrase)
{
    int i;
    int j = strlen(phrase);
    char whitespace = ' ';


    if (phrase[0] >= 97 && phrase[0] <= 122){
	    phrase[0] = (phrase[0] - 32);
    }
    for (i = 0; i <= j; i++){
	    if (whitespace == phrase[i]){
	    	if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
	    		phrase[i + 1] = (phrase[i + 1] - 32);
	    	}
    	}
    }
}
",1
gjom886,1696726248,1,"void Capitalise(char *phrase)
{ 

    int j = 0;
    phrase[j] = phrase[j] - 32;
    int length = strlen(phrase);
    for (int i = 0; i <= length; i++) {
        if (phrase[i] == ' ') {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",0
gjom886,1696726442,2,"void Capitalise(char *phrase)
{ 

    int j = 0;
    if (phrase[j] >= 'a' && phrase[j] <= 'z') {
    phrase[j] = phrase[j] - 32;
    }
    int length = strlen(phrase);
    for (int i = 0; i <= length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[j] >= 'a' && phrase[j] <= 'z') {
            phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }
}",0
gjom886,1696726715,3,"void Capitalise(char *phrase)
{ 

    int j = 0;
    if (phrase[j] >= 'a' && phrase[j] <= 'z') {
    phrase[j] = phrase[j] - 32;
    }
    int length = strlen(phrase);
    for (int i = 0; i <= length; i++) {
        if (phrase[i] == ' ') {
         if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
            phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }
}",1
gmal045,1696238113,1,"#include <stdio.h>
#include <string.h>

int upperConversion(int lowerLetter)
{
    int upperLetter;
    upperLetter = (lowerLetter-32);
    return upperLetter;
}

void Capitalise(char *phrase)
{
    for (int i=0;i<strlen(phrase);i++) {
        if (i==0) {
            phrase[i] = upperConversion(phrase[i]);
        }
        else if (phrase[i] == 32) {
            phrase[i+1] = upperConversion(phrase[i+1]);
        }
    }
}
",0
gmal045,1696238306,2,"#include <stdio.h>
#include <string.h>

int upperConversion(int lowerLetter)
{
    int upperLetter;
    if (lowerLetter < 97)
    {
        return lowerLetter;
    }
    else {
    upperLetter = (lowerLetter-32);
    }
    return upperLetter;
}

void Capitalise(char *phrase)
{
    for (int i=0;i<strlen(phrase);i++) {
        if (i==0) {
            phrase[i] = upperConversion(phrase[i]);
        }
        else if (phrase[i] == 32) {
            phrase[i+1] = upperConversion(phrase[i+1]);
        }
    }
}",1
gmoh887,1696297948,1,"void Capitalise(char *phrase)
{
    int i = 0;

    while (phrase[i] != '\0') {
        if (i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }

        if (phrase[i-1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }

        i++;
    }
}",1
gpen695,1696844928,1,"
void Capitalise(char *phrase) {
    int i = 0;
    while (phrase[i] != '\0') 
    {
        
        if (phrase[i] >= 'a' && phrase[i] <= 'z') 
        {
            
            phrase[i] -= 32;
        }

        
        while (phrase[i] != '\0' && !((phrase[i] >= 'a' && phrase[i] <= 'z') || (phrase[i] >= 'A' && phrase[i] <= 'Z'))) 
        {
            i++;
        }

       
        while (phrase[i] != '\0' && ((phrase[i] >= 'a' && phrase[i] <= 'z') || (phrase[i] >= 'A' && phrase[i] <= 'Z'))) 
        {
            i++;
        }
    }
}

int main() 
{
    char inputPhrase[] = ""hello world! this is a test."";
    Capitalise(inputPhrase);
    printf(""%s\n"", inputPhrase);
    return 0;
}
",0
gpen695,1696844989,2,"
void Capitalise(char *phrase) {
    int i = 0;
    while (phrase[i] != '\0') 
    {
        
        if (phrase[i] >= 'a' && phrase[i] <= 'z') 
        {
            
            phrase[i] -= 32;
        }

     #include <stdio.h>

// Helper function to check if a character is a lowercase alphabet character
int isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

// Helper function to convert a lowercase character to uppercase
char toUpperCase(char c) {
    return (c - 32);  // Convert to uppercase ASCII
}

void Capitalise(char *phrase) {
    int i = 0;
    int newWord = 1;  // Flag to track the start of a new word

    while (phrase[i] != '\0') {
        if (isLowercaseAlphabet(phrase[i]) && newWord) {
            phrase[i] = toUpperCase(phrase[i]);
            newWord = 0;  // Set the flag to indicate that the word has been capitalized
        }
        else if (!isLower
",0
gpen695,1696845108,3,"


void Capitalise(char *phrase) {
    int newWord = 1;  

    while (*phrase) 
    {
        if (islower(*phrase) && newWord) 
        {
            *phrase = toupper(*phrase);  
            newWord = 0;  
        } else if (!isalpha(*phrase)) 
        {
            newWord = 1;  
        } else {
            newWord = 0;  
        }
        
        phrase++;
    }
}


",0
gpen695,1696845799,4,"void Capitalise(char *phrase) {
    int newWord = 1;

    while (*phrase) {
        if (isspace(*phrase) || (*phrase == '-' && newWord)) {
            newWord = 1;
        } else if (islower(*phrase) && newWord) {
            *phrase = toupper(*phrase);
            newWord = 0;
        } else {
            newWord = 0;
        }

        phrase++;
    }
}",1
gren419,1696831662,1,"void Capitalise(char *phrase)
{
    int i = 0;
    phrase[i] = phrase[i]-32;
    while(phrase[i]!='\0'){
        if(phrase[i]<=122&&phrase[i]>=97){
            if(phrase[i-1] == ' '){
                phrase[i] = phrase[i]-32;
            }else{
                phrase[i] = phrase[i];
            }
        }else{
            phrase[i] = phrase[i];
        }
        i++;
    }
}",0
gren419,1696831775,2,"void Capitalise(char *phrase)
{
    int i = 0;
    if(phrase[i]<=122&&phrase[i]>=97){
        phrase[i] = phrase[i]-32;   
    }else{
        phrase[i] = phrase[i];
    }
    while(phrase[i]!='\0'){
        if(phrase[i]<=122&&phrase[i]>=97){
            if(phrase[i-1] == ' '){
                phrase[i] = phrase[i]-32;
            }else{
                phrase[i] = phrase[i];
            }
        }else{
            phrase[i] = phrase[i];
        }
        i++;
    }
}",1
gvan573,1696805400,1,"void Capitalise(char *phrase)
{
	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - 32;
	}

	int a, i;

	a = strlen(phrase);

	for (i = 1; i < a; i++) {
		if ((phrase[i] >= 97) && (phrase[i] <= 122) && (phrase[i - 1] == ' ')) {
			phrase[i] = phrase[i] - 32;
		}
	}

}",1
gxu660,1696316730,1,"void Capitalise(char *phrase)
{
    if ((phrase[0] >= 97) || (phrase[0] <= 122)) {
        phrase[0] -= 32;
    }
    int i = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if ((phrase[i + 1] >= 97) || (phrase[i + 1] <= 122)) {
                phrase[i + 1] -= 32;
            }
        }
        i++;
    }
}",0
gxu660,1696316847,2,"void Capitalise(char *phrase)
{
    if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
        phrase[0] -= 32;
    }
    int i = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if ((phrase[i + 1] >= 97) && (phrase[i + 1] <= 122)) {
                phrase[i + 1] -= 32;
            }
        }
        i++;
    }
}",1
gzho986,1696666281,1,"]#include <stdio.h>

void Capitalise(char phrase[]) {
    int capitalise = 1;  

    while (*phrase) {
        if (*phrase >= 'a' && *phrase <= 'z') {
            if (capitalise) {
                *phrase -= ('a' - 'A'); 
                capitalise = 0;
            }
        } else {
    
            capitalise = 1;
        }
        phrase++;
    }
}
",0
gzho986,1696666360,2,"#include <stdio.h>

void Capitalise(char phrase[]) {
    int capitalise = 1;  

    while (*phrase) {
        if (*phrase >= 'a' && *phrase <= 'z') {
            if (capitalise) {
                *phrase -= ('a' - 'A'); 
                capitalise = 0;
            }
        } else {
    
            capitalise = 1;
        }
        phrase++;
    }
}
",0
gzho986,1696668689,3,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int firstLetter = 1;  

    while (*phrase) {
        if (isspace(*phrase)) {
            firstLetter = 1;  
        } else if (firstLetter && islower(*phrase)) {
            *phrase = toupper(*phrase);  
            firstLetter = 0; 
        } else {
            firstLetter = 0; 
        }
        phrase++;
    }
}
",1
hama210,1696377466,1,"void Capitalise(char* phrase)
{
	int i = 1;
	int length = 0;

	while (phrase[i] != '\0') {
		length++;
		i++;
	}

	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	for (i = 1; i < length; i++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
	}
}",0
hama210,1696378230,2,"int IsLowerCase(char word)
{
	return (word >= 'a' && word <= 'z'); 
}

void Capitalise(char* phrase)
{
	int i = 1;
	int length = 0;

	while (phrase[i] != '\0') {
		length++;
		i++;
	}
	
	if (IsLowerCase(phrase[0])) {
		phrase[0] = phrase[0] - ('a' - 'A'); 
	}

	for (i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			if (IsLowerCase(phrase[i + 1])) {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A'); 
			}
		}
	}
}",1
haus879,1696392246,1,"void Capitalise(char *phrase)
{
    int i;
int length = strlen(phrase);
phrase[0] = phrase[0] - ('a' - 'A');

for (i = 1; i < length; i++) {

	if (phrase[i - 1] == 32) {
		phrase[i] = phrase[i] - 32;
		i++;
	}

}
}
",0
haus879,1696392425,2,"void Capitalise(char *phrase)
{
    int i;
int length = strlen(phrase);
if (phrase[0] > 90) {
	phrase[0] = phrase[0] - 32;
}

for (i = 1; i < length; i++) {

	if (phrase[i - 1] == 32 && phrase[i] > 90) {
		phrase[i] = phrase[i] - 32;
		i++;
	}

}
}
",1
hbas168,1696290403,1,"void Capitalise(char *phrase)
{
    for (int i=0; i <strlen(phrase); i++) {
        if (i == 0||phrase[i-1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] +- 32;
            }
        }
    }
}
",0
hbas168,1696290429,2,"void Capitalise(char *phrase)
{
    for (int i=0; i <strlen(phrase); i++) {
        if (i == 0||phrase[i-1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",1
hber510,1696391791,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        char letter = phrase[0];
        letter -= ('a' - 'A');
        phrase[0] = letter;
    }
    
    int i = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
                char letter = phrase[i + 1];
                letter -= ('a' - 'A');
                phrase[i + 1] = letter;
            }
        }
        i++;
    }
}
",1
hbou314,1696410559,1,"void Capitalise(char *phrase)
{
    int i = 1;
    char capital = ('a' - 'A');

    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
	    phrase[0] = phrase[0] - capital;
    }

    for (i = 1; phrase[i] != '\0'; i++) {
	    if ((phrase[i] >= 'a') && (phrase[i] <= 'z') && (phrase[i-1] == 32)) {
		    phrase[i] = phrase[i] - capital;
	    }
    }
}
",1
hcha410,1696740394,1,"#include <stdio.h>
#include <stdbool.h>

bool isLowerCase(char word) {
    return word >= 'a' && word <= 'z';
}

char toUpperCase(char word) {
    if (isLowerCase(word)) {
        return word - ('a' - 'A');
    }
    return word;
}

void Capitalise(char* phrase) {
    bool newWord = true;
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase [i] == ' ') {
            newWord = true;
        } else if (newWord && isLowerCase(phrase[i])) {
            phrase[i] = toUpperCase(phrase[i]);
            newWord = false;
        } else {
            newWord = false;
        }
    }
    
}
",1
hche864,1696373521,1,"void Capitalise(char *phrase)
{
    	int i;
	int length = strlen(phrase);

	phrase[0] = phrase[0] - 32;

	for (i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}


	}
}
",0
hche864,1696377910,2,"void Capitalise(char *phrase)
{
	int i;
	int length = strlen(phrase);

	if (phrase[0] >= 97 && phrase[0] <= 122)
	phrase[0] = phrase[0] - 32;

	for (i = 0; i < length; i++) {
		if (phrase[i] == ' ' && phrase[i+1]>=97 && phrase[i + 1]<=122) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}


	}
}
",1
hcop563,1696306821,1,"void Capitalise(char *phrase)
{
    int i;
    int length;

    length = strlen(phrase);

    if (phrase[0] > 96 && phrase[0] < 123) {
    	phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (i = 0; i < length; i++) {
    	if (phrase[i] == 32) {
    		phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
    	}
    }
}
",0
hcop563,1696306986,2,"void Capitalise(char *phrase)
{
    int i;
    int length;

    length = strlen(phrase);

    if (phrase[0] > 96 && phrase[0] < 123) {
    	phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (i = 0; i < length; i++) {
    	if (phrase[i] == 32 && phrase[i + 1] > 96 && phrase[i + 1] < 123)) {
    		phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
    	}
    }
}
",0
hcop563,1696307003,3,"void Capitalise(char *phrase)
{
    int i;
    int length;

    length = strlen(phrase);

    if (phrase[0] > 96 && phrase[0] < 123) {
    	phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (i = 0; i < length; i++) {
    	if (phrase[i] == 32 && phrase[i + 1] > 96 && phrase[i + 1] < 123) {
    		phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
    	}
    }
}
",1
hcro730,1696395767,1,"#include <string.h>

int IsLower(char letter) {
	if (letter >= 97 && letter <= 122) {
		return 1;
	}
	return 0;
}

void Capitalise(char* phrase)
{
	int len, i;

	len = strlen(phrase);

	for (i = 0; i < len - 1; i++) {
		if ((phrase[i - 1] == ' ' || i == 0) && IsLower(phrase[i])) {
			phrase[i] -= 32;
		}
	}
}",0
hcro730,1696395919,2,"#include <string.h>

int IsLower(char letter) {
	if (letter >= 97 && letter <= 122) {
		return 1;
	}
	return 0;
}

void Capitalise(char* phrase)
{
	int len, i;

	len = strlen(phrase);

	for (i = 0; i < len; i++) {
		if ((phrase[i - 1] == ' ' || i == 0) && IsLower(phrase[i])) {
			phrase[i] -= 32;
		}
	}
}",1
hdeg917,1696466744,1,"void Capitalise(char *phrase)
{
    int j=0;
    int i;
    while (phrase[j] != '\0'){
        j++;
    }
    phrase[0] = (phrase[0] - 32);
    
    for (i=1; i<j; i++){
        if (phrase[i-1] == ' '){
            if (phrase[i] <= 122 && phrase[i] >= 97){
                phrase[i] = (phrase[i] - 32);
            }
        }
    }
    
}

",0
hdeg917,1696466879,2,"void Capitalise(char *phrase)
{
    int j=0;
    int i;
    while (phrase[j] != '\0'){
        j++;
    }
    if (phrase[0] <= 122 && phrase[0] >= 97){
        phrase[0] = (phrase[0] - 32);
    }
    for (i=1; i<j; i++){
        if (phrase[i-1] == ' '){
            if (phrase[i] <= 122 && phrase[i] >= 97){
                phrase[i] = (phrase[i] - 32);
            }
        }
    }
    
}

",1
hgao080,1696220691,1,"void Capitalise(char* phrase)
{
	for (int i = 0; i < strlen(phrase); i++) {
		if (i == 0) {
			if (phrase[i] >= 97 && phrase[i] <= 122) {
				phrase[i] = phrase[i] - 32;
			}
		}

		if (phrase[i] == 32) {
			if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
	}
}",1
hgou636,1696416700,1,"void Capitalise(char *phrase) {
    int length = strlen(phrase);
    for (int i = 0; i < length; i++) {
        if (phrase[i] == 32) {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
    phrase[0] = phrase[0] - ('a' - 'A');
}",0
hgou636,1696417728,2,"void Capitalise(char *phrase) {
    int length = strlen(phrase);
    for (int i = 0; i < length; i++) {
        if (phrase[i] == 32) {
            if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122)
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
    int j = 0;
    if (phrase[j] >= 97 && phrase[j] <= 122) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
}",1
hhil451,1696835502,1,"#include <stdio.h>
#include <string.h> 
#define _CRT_SECURE_NO_WARNINGS

void Capitalise(char *phrase)
{
	int i = 0;
	phrase[0] = phrase[0] - ('a' - 'A');
	while (phrase[i] != '\0')
	{
		if (phrase[i] == 32)
		{
			phrase[i+1] = phrase[i+1] - ('a' - 'A');
		}
		i++;
	}
}
",0
hhil451,1696835747,2,"#include <stdio.h>
#include <string.h> 
#define _CRT_SECURE_NO_WARNINGS

void Capitalise(char *phrase)
{
	int i = 0;
	if (phrase[0] <= 'z' && phrase[0] >= 'a')
	{
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	while (phrase[i] != '\0')
	{
		if (phrase[i] == 32)
		{
			if (phrase[i+1] <= 'z' && phrase[i+1] >= 'a')
			phrase[i+1] = phrase[i+1] - ('a' - 'A');
		}
		i++;
	}
}
",1
hkah523,1696751066,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <ctype.h>
/*author: Harshdeep Kahlon*/

// Function to capitalize the first character in each word in a phrase
void Capitalise(char* phrase) {
    int len = strlen(phrase);
    int capitalizeNext = 1; // 1 for next character should be capitalized, 0 for lowercase

    for (int i = 0; i < len; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            capitalizeNext = 1;
        }
    }
}",0
hkah523,1696753313,2,"#include <stdio.h>
#include <string.h>
#include <ctype.h>
/*author: Harshdeep Kahlon*/

// Function to capitalize the first character in each word in a phrase
void Capitalise(char* phrase) {
    int len = strlen(phrase);
    int capitalizeNext = 1; // 1 for the next character should be capitalized, 0 for lowercase

    for (int i = 0; i < len; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else if (phrase[i] == '-' && i > 0 && phrase[i - 1] == ' ') {
            capitalizeNext = 0; // Do not capitalize if hyphen follows a space
        } else if (phrase[i] == ' ' || (phrase[i] == '-' && i + 1 < len && phrase[i + 1] == ' ')) {
            capitalizeNext = 1; // Capitalize after space or hyphen with space in between
        }
    }
}",0
hkah523,1696753851,3,"#include <stdio.h>
#include <string.h>
#include <ctype.h>
/*author: Harshdeep Kahlon*/

// Function to capitalize the first character in each word in a phrase
void Capitalise(char* phrase) {
    int len = strlen(phrase);
    int capitalizeNext = 1; // 1 for the next character should be capitalized, 0 for lowercase

    for (int i = 0; i < len; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else if (phrase[i] == '(') {
            capitalizeNext = 0; // Do not capitalize if opening bracket is encountered",0
hkah523,1696754358,4,"#include <stdio.h>
#include <string.h>
#include <ctype.h>
/*author: Harshdeep Kahlon*/

// Function to capitalize the first character in each word in a phrase
void Capitalise(char* phrase) {
    int len = strlen(phrase);
    int capitalizeNext = 1; // 1 for the next character should be capitalized, 0 for lowercase

    for (int i = 0; i < len; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else if (phrase[i] == '(') {
            capitalizeNext = 0; // Do not capitalize if opening bracket is encountered
        } else if (phrase[i] == ' ' || (phrase[i] == '-' && i + 1 < len && phrase[i + 1] == ' ')) {
            capitalizeNext = 1; // Capitalize after space or hyphen with space in between
        }
    }
}",1
hkim807,1696734406,1,"void Capitalise(char *phrase)
{
int i;

if(phrase[0] >= 'a' && phrase[0] <= 'z'){
    phrase[0] = phrase[0] + ('A'-'a');
}

for(i = 1; i < strlen(phrase); i++){
    if(phrase[i-1] == ' '){
        phrase[i] = phrase[i] + ('A'-'a');
    }

}

}
",0
hkim807,1696734530,2,"void Capitalise(char *phrase)
{
int i;

if(phrase[0] >= 'a' && phrase[0] <= 'z'){
    phrase[0] = phrase[0] + ('A'-'a');
}

for(i = 1; i < strlen(phrase); i++){
    if(phrase[i-1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z'){
        phrase[i] = phrase[i] + ('A'-'a');
    }

}

}
",1
hkon883,1696566615,1,"void Capitalise(char array[]) {
    int i;
    for (i = 0; i < strlen(array); i++) {
        if (i == 0) {
           array[i] = toupper(array[i]);
        }
        int j =i+1;
        if(array[i]==' ' || array[i]=='\t'){
            array[j] =toupper(array[j]);
        }
    }
}",1
hlee999,1696329235,1,"void Capitalise(char *phrase)
{
	int i;
	phrase[0] -= 32;
	for (i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == 32) {
			phrase[i + 1] -= 32;
		}
		else {
			continue;
		}
	}
}",0
hlee999,1696329821,2,"void Capitalise(char *phrase)
{
	int i;
	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] -= 32;
	}
	for (i = 0; i < strlen(phrase); i++) {
		if ((phrase[i] == 32) && (phrase[i + 1] >= 97) && (phrase[i + 1] <= 122)) {
			phrase[i + 1] -= 32;
		}
		else {
			continue;
		}
	}
}",1
hleu459,1696830046,1,"void Capitalise(char *phrase)
{
    int i = 0;
    
    while (phrase[i] != '\0') {
        if (i == 0 || phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}
",1
hliu836,1696597322,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int j;
    while (phrase[i] != '\0') {
        i++;
    }
    i=i-1;
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
        phrase[0] = phrase[0] - 32;
    }
    for (j=0; j<=i; j++) {
        if (phrase[j] == ' ') {
            phrase[j+1] = phrase[j+1] - 32;
        }
    }
}
",0
hliu836,1696597626,2,"void Capitalise(char *phrase)
{
    int i = 0;
    int j;
    while (phrase[i] != '\0') {
        i++;
    }
    i=i-1;
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
        phrase[0] = phrase[0] - 32;
    }
    for (j=0; j<=i; j++) {
        if (phrase[j] == ' ') {
                if ((phrase[j+1] >= 'a') && (phrase[j+1] <= 'z')){
                    phrase[j+1] = phrase[j+1] - 32;
                }
            }
        
    }
}
",1
hly852,1696733127,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0') 
    {
        if (i == 0 || phrase[i-1] == 32){
            if (phrase[i] >= 97 && phrase[i] <= 122){
                phrase[i] = phrase[i] - 32;
            }
        }
        i++;
    }
}
",1
hma481,1696656794,1,"void Capitalise(char *phrase)
{
    phrase[0] = phrase[0] - ('a' - 'A');
    int length = strlen(phrase);
    for (int i = 0; i < length; i++) {
		    if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		    }
	    }
}
",0
hma481,1696657020,2,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	int length = strlen(phrase);
	for (int i = 0; i < length; i++) {
			if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
}",1
hmcm582,1696224941,1,"void Capitalize(char* phrase) {
    int length = strlen(phrase);
    int temp = 1;

    for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (temp) {
                phrase[i] -= 32;
                temp = 0;
            }
        }
        else if (phrase[i] == ' ') {
            temp = 1;
        }
    }
}",0
hmcm582,1696224966,2,"void Capitalise(char* phrase) {
    int length = strlen(phrase);
    int temp = 1;

    for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (temp) {
                phrase[i] -= 32;
                temp = 0;
            }
        }
        else if (phrase[i] == ' ') {
            temp = 1;
        }
    }
}",0
hmcm582,1696225427,3,"void Capitalize(char* phrase) {
    int length = strlen(phrase);
    int capitalizeNext = 1;

    for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (capitalizeNext) {
                phrase[i] -= 32; 
                capitalizeNext = 0; 
            }
            else {
                capitalizeNext = 0; 
            }
        }
        else if (phrase[i] == ' ') {
            capitalizeNext = 1; 
        }
        else {
            capitalizeNext = 0; 
        }
    }
}",0
hmcm582,1696225476,4,"void Capitalise(char* phrase) {
    int length = strlen(phrase);
    int Temp = 1;

    for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (Temp) {
                phrase[i] -= 32; 
                Temp = 0; 
            }
            else {
                Temp = 0; 
            }
        }
        else if (phrase[i] == ' ') {
            Temp = 1; 
        }
        else {
            Temp = 0; 
        }
    }
}",1
hmel649,1696666514,1,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i - 1] == ' ' || i == 0) {
            phrase[i] = phrase[i] - 32;
        }
    }
}
",0
hmel649,1696666705,2,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i - 1] == ' ' || i == 0) {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",1
hmof971,1696456871,1,"void Capitalise(char *phrase)
{
int length;
length = strlen(phrase);
int i;
if (phrase[0] >= 'a' && phrase[0] <= 'z') {
	phrase[0] = phrase[0] - 32;
}
for (i = 1; i < length; i++) {
	if (phrase[i-1]==' '&& phrase[i] >= 'a' && phrase[i] <= 'z')
		phrase[i]=phrase[i]-32;
}
",0
hmof971,1696456916,2,"void Capitalise(char *phrase)
 {
	int length;
	length = strlen(phrase);
	int i;
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}
	for (i = 1; i < length; i++) {
		if (phrase[i-1]==' '&& phrase[i] >= 'a' && phrase[i] <= 'z')
			phrase[i]=phrase[i]-32;
	}
}",1
hnew638,1696241391,1,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++)
    {
        if (((i == 0) && phrase[i] >= 'a' && phrase[i] <= 'z') || (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z'))
        phrase[i] = phrase[i] - ('z' - 'Z');
        
    }
}
",1
hpat916,1696228957,1,"void Capitalise(char *phrase)
{
    int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - 32;
			while (phrase[i] != ' ') {
				i++;
			}
		}
		else {
			i++;
		}
		
	}
}
",0
hpat916,1696229296,2,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if ((phrase[i] >= 'a' && phrase[i] <= 'z') && phrase[i-1] == ' ') {
			phrase[i] = phrase[i] - 32;
			while (phrase[i] != ' ') {
				i++;
			}
		}
		else {
			i++;
		}
		
	}
}
",0
hpat916,1696229596,3,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if ((phrase[i] >= 'a' && phrase[i] <= 'z') && (i == 0 || phrase[i-1] == ' ')) {
			phrase[i] = phrase[i] - 32;
			while (phrase[i] != ' ') {
				i++;
			}
		}
		else {
			i++;
		}
		
	}
}
",1
hpir641,1696473450,1,"// this function finds the start of each word and capitallises it
void Capitalise(char *phrase)
{
    	for (int i=0; i < strlen(phrase); i++) {
		if ((i == 0) || (phrase[i - 1] ==' ')) {
			phrase[i] = capchar(phrase[i]);
		}
	}
}

// this function converts a lower case letter to upper case
char capchar(char charater) {
	if (('a' <= charater) && (charater <= 'z')) {
		charater = charater - ('a' - 'A');
	}
	return charater;
}",0
hpir641,1696473531,2,"// this function converts a lower case letter to upper case
char capchar(char charater) {
	if (('a' <= charater) && (charater <= 'z')) {
		charater = charater - ('a' - 'A');
	}
	return charater;
}
// this function finds the start of each word and capitallises it
void Capitalise(char *phrase)
{
    	for (int i=0; i < strlen(phrase); i++) {
		if ((i == 0) || (phrase[i - 1] ==' ')) {
			phrase[i] = capchar(phrase[i]);
		}
	}
}

",1
hrob997,1696747453,1,"void Capitalise(char* phrase)
{
	phrase[0] += ('A' - 'a');
	int i = 1; 
	while (phrase[i] != '\0') {
		if (phrase[i-1] == ' ') {
			phrase[i] +=('A' - 'a');
		}
		i++; 
	}
}
",0
hrob997,1696747737,2,"void Capitalise(char* phrase)
{
	if ((phrase[0] <= 'z') && (phrase[0] >= 'a')) {
		phrase[0] += ('A' - 'a');
	}

	int i = 1; 
	while (phrase[i] != '\0') {
		if ((phrase[i-1] == ' ') && (phrase[i]<='z') && (phrase[i] >= 'a')) {
			phrase[i] +=('A' - 'a');
		}
		i++; 
	}
}
",1
hsan267,1696387688,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length;
    char space;
    
    length = strlen(phrase);
    space = ' ';
    
    phrase[0] = phrase[0] - 32;
    
    for (i=0; i<length; i++) {
        if (phrase[i-1] == space) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}",0
hsan267,1696469325,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length;
    char space;
    
    length = strlen(phrase);
    space = ' ';
    
    for (i=0;i<length;i++) {
        if (97 <= phrase[i] && phrase[i] <= 122) {
            if (phrase[i-1] == space) {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    }
    
    if (97 <= phrase[0] && phrase[0] <= 122) {
        phrase[0] = phrase[0] - 32;
    }
    
}",1
htew916,1696846842,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <ctype.h>

// The function, Capital  takes a single string as input representing a phrase, and capitalises the first character in each word in the phrase. Only lower case alphabetic characters (that is, ‘a’ - ‘z’) should be capitalised.

// Define the function, Capitalise.
void Capitalise(char *phrase)
{
    int i = 0;
        int capitaliseFirstLetter = 1;

        while (phrase[i] != '\0')
        {
            if (isalpha(phrase[i]))
            {
                if (capitaliseFirstLetter)
                {
                    phrase[i] = toupper(phrase[i]);
                    capitaliseFirstLetter = 0;
                }
                else
                {
                    phrase[i] = tolower(phrase[i]); 
                }
            }
            else
            {
                capitaliseFirstLetter = 1; 
            }
            i++;
        }
    }
",0
htew916,1696847664,2,"#include <stdio.h>
#include <ctype.h>

// The function, Capital  takes a single string as input representing a phrase, and capitalises the first character in each word in the phrase. Only lower case alphabetic characters (that is, ‘a’ - ‘z’) should be capitalised.

// Define the function, Capitalise.
void CapitaliseWords(char *phrase)
{
    int i = 0;
    int capitalizeNext = 1;  

    while (phrase[i] != '\0')
    {
        if (isalpha(phrase[i]))
        {
            if (capitalizeNext)
            {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            }
            else
            {
                phrase[i] = tolower(phrase[i]); 
            }
        }
        else if (phrase[i] == '-') 
        {
            capitalizeNext = 1; 
        }
        else
        {
            if (phrase[i] == ' ')
            {
                capitalizeNext = 1;
            }
        }
        i++;
    }
}
",0
htew916,1696848634,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <ctype.h>

// The function, Capitlise, takes a single string as input representing a phrase, and capitalises the first character in each word in the phrase.  Only lower case alphabetic characters (that is, ‘a’ - ‘z’) should be capitalised. 

// Define the function
void Capitalise(char* phrase)
{
    int i = 0;
    int capitaliseFirstLetter = 1;  

    while (phrase[i] != '\0')
    {
        if (isalpha(phrase[i]) || phrase[i] == '-') 
        {
            if (capitaliseFirstLetter)
            {
                phrase[i] = toupper(phrase[i]);
                capitaliseFirstLetter = 0; 
            }
            else
            {
                phrase[i] = tolower(phrase[i]); 
            }
        }
        else
        {
            capitaliseFirstLetter = 1; 
        }
        i++;
    }
}
",0
htew916,1696848920,4,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <ctype.h>

// The function, Capitlise, takes a single string as input representing a phrase, and capitalises the first character in each word in the phrase.  Only lower case alphabetic characters (that is, ‘a’ - ‘z’) should be capitalised. 

// Define the function
void Capitalise(char* phrase)
{
    int i = 0;
    int capitalizeNext = 1;  

    while (phrase[i] != '\0')
    {
        if (isalpha(phrase[i]) || phrase[i] == '-') 
        {
            if (capitalizeNext)
            {
                phrase[i] = tolower(phrase[i]); 
                capitalizeNext = 0; 
            }
            else
            {
                phrase[i] = toupper(phrase[i]); 
            }
        }
        else
        {
            capitalizeNext = 1; 
        }
        i++;
    }
}

",0
htho943,1696217853,1,"#include <stdio.h>
// the intent of this function is to take an input phrase, then search for a space throughout it when it finds
// it, it will capitalise the 
void Capitalise(char *phrase)
{
    int i=0;
    int length=0;
    while (phrase[i])
    {
        if (phrase[i]==' ')
        {
            phrase[i+1]=phrase[i+1]-32;
        }
        else if (i==0)
        {
            phrase[0]=phrase[0]-32;
        }
    i++;
    }
}

",0
htho943,1696217863,2,"#include <stdio.h>
// the intent of this function is to take an input phrase, then search for a space throughout it when it finds
// it, it will capitalise the 
void Capitalise(char *phrase)
{
    int i=0;
    while (phrase[i])
    {
        if (phrase[i]==' ')
        {
            phrase[i+1]=phrase[i+1]-32;
        }
        else if (i==0)
        {
            phrase[0]=phrase[0]-32;
        }
    i++;
    }
}

",0
htho943,1696324591,3,"#include <stdio.h>
// the intent of this function is to take an input phrase, then search for a space throughout it when it finds
// it, it will capitalise the first letter of each word author hamish thompson
void Capitalise(char *phrase)
{
    int i=0;
    while (phrase[i])
    {
        if (phrase[i]==' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z')
        {
            phrase[i+1]=phrase[i+1]-32;
            i++;
        }
        else if (i==0 && phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            phrase[0]=phrase[0]-32;
            i++;
        }
        else {
            i++;
        }
    }
}

",1
htyl682,1696840651,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int len=strlen(phrase);
    phrase[0]=Capatalise(phrase[0]);
    for(int i=0; i<=len; i++){
        if(phrase[i]==32)
        phrase[i+1]=Capatalise(phrase[i+1]);
    }
}

int Capatalise(char *lower){
    if(lower>=97){
        lower=lower-32;
        return(lower);
    }
} ",0
htyl682,1696840851,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int Capatalise(char lower){
    if(lower>=97){
        lower=lower-32;
        return(lower);
    }
}

void Capitalise(char *phrase)
{
    int len=strlen(phrase);
    phrase[0]=Capatalise(phrase[0]);
    for(int i=0; i<=len; i++){
        if(phrase[i]==32)
        phrase[i+1]=Capatalise(phrase[i+1]);
    }
}",0
htyl682,1696840946,3,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

int Capatalise(char lower){
    if(lower>=97){
        lower=lower-32;

    }
    return(lower);
}

void Capitalise(char *phrase)
{
    int len=strlen(phrase);
    phrase[0]=Capatalise(phrase[0]);
    for(int i=0; i<=len; i++){
        if(phrase[i]==32)
        phrase[i+1]=Capatalise(phrase[i+1]);
    }
}",1
hugn924,1696764862,1,"void Capitalise(char *phrase)
{
        int i = 0;
    int Capitalise = 1;

    while (phrase[i] != '\0' ) {
        
        if (phrase[i] == ' ') {
            Capitalise = 1;
        }

        else if (Capitalise) {
            Capitalise = 0;

            if (phrase[i] <= 'z' && phrase[i] >= 'a') {

                phrase[i] -= 'a' - 'A';
            }
        }
        i++;
    }
    

}
",1
hwen116,1696215113,1,"void Capitalise(char *phrase)
{
    //First letter of the word is capitalised
    int i;
    int length = strlen(phrase);
    
    if ((phrase[0]>='a')&&(phrase[0]<='z')){ // want all conditions to be true
        phrase[0] = phrase[0] - ('a'-'A'); // Hard code this?
    }
    
    for (i=1; i<length; i++){
        //Always change the first element if it is a character
        if (phrase[i]==' '){
            //Check to see if it is an alphabetical character
            if ((phrase[i+1]>='a')&&(phrase[i+1]<='z')){
                phrase[i+1] = phrase[i+1] - ('a'-'A');
            }
        }
    }
}",1
hwin877,1696468999,1,"void Capitalise(char* phrase)
{
    size_t length = strlen(phrase);
    int j = length;
    int i = 0;
    phrase[0] = phrase[0] - 32;
    for (i = 0; i < j; i++)
    {
        if (phrase[i] == 32)
        {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}",0
hwin877,1696469229,2,"void Capitalise(char* phrase)
{
    size_t length = strlen(phrase);
    int j = length;
    int i = 0;
    if ((phrase[0] >= 97) && (phrase[0] <= 122))
    {
        phrase[0] = phrase[0] - 32;
    }
    for (i = 0; i < j; i++)
    {
        if (phrase[i] == 32)
        {
            if ((phrase[i + 1] >= 97) && (phrase[i + 1] <= 122))
            {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",1
hyan713,1696410292,1,"#include <string.h>
void Capitalise(char *phrase)
{
    int i;
    phrase[0] = phrase[0] - 32;
    for (i=1;i<strlen(phrase);i++){
        if (phrase[i] == ' '){
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",0
hyan713,1696410575,2,"#include <string.h>
void Capitalise(char *phrase)
{
    int i;
    if (phrase[0] % 97 < 26){
        phrase[0] = phrase[0] - 32;
    }
    for (i=1;i<strlen(phrase);i++){
        if (phrase[i] == ' ' && phrase[i+1] % 97 < 26){
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",1
hye071,1696700475,1,"void Capitalise(char *phrase)
{
    
    int BeCaps=1;
    
    for(int i=0; phrase[i] != '\0'; i=i+1) {
        
        if (phrase[i]>= 'a' && phrase[i] <= 'z' && BeCaps){
            
            phrase[i]=phrase[i] - 'a' +'A';
            BeCaps=0;
            
        }else if (phrase[i]<'a' || phrase[i]>'z'){
            BeCaps=1;
        }
    }
    
}
",0
hye071,1696701042,2,"void Capitalise(char *phrase)
{
    
       int BeCaps=1;
    
    for(int i=0; phrase[i] != '\0'; i=i+1) {
        
        if (phrase[i]>= 'a' && phrase[i] <= 'z' ||(phrase[i] >='A' && phrase[i]<='Z')){
            
            if (BeCaps){
                if (phrase[i]>= 'a' && phrase[i] <='z'){
                    phrase[i]=phrase[i] - 'a' + 'A';
                }
                BeCaps=0;
            }
        }else{
            BeCaps=1;
        }
    }
    
}
",0
hye071,1696701384,3,"/******************************************************************************

Lab 10 question 3

*******************************************************************************/
#include <stdio.h>

void Capitalise(char *phrase){
    
    int BeCaps=1;
    
    for(int i=0; phrase[i] != '\0'; i=i+1) {
        
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') ||((phrase[i] >='A' && phrase[i]<='Z'))){
            
            if (BeCaps){
                
                if (phrase[i]>= 'a' && phrase[i] <='z'){
                    phrase[i]=phrase[i] - 'a' + 'A';
                }
                BeCaps=0;
            }
        }else{
            BeCaps=1;
        }
    }
}",0
hye071,1696702601,4,"/******************************************************************************

Lab 10 question 3

*******************************************************************************/
#include <stdio.h>

void Capitalise(char *phrase){
    
    int BeCaps=1;
    
    for(int i=0; phrase[i] != '\0'; i=i+1) {
        if (phrase[i]== ' '){
            BeCaps=1;
        }else if ((phrase[i]>='a' && phrase[i] <= 'z') && BeCaps){
            phrase[i]=phrase[i] - 'a' +'A';
            BeCaps=0;
        }else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            BeCaps=0;
        }
 
}
}",0
hye071,1696703175,5,"/******************************************************************************

Lab 10 question 3

*******************************************************************************/
#include <stdio.h>

void Capitalise(char *phrase){
    
    int BeCaps=1;
    
    for(int i=0; phrase[i] != '\0'; i=i+1) {
        if (phrase[i]== ' '){
            BeCaps=1;
        }else if ((phrase[i]>='a' && phrase[i] <= 'z') && BeCaps){
            phrase[i]=phrase[i] - 'a' +'A';
            BeCaps=0;
        }else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            BeCaps=0;
        } else{
            BeCaps=0;
        }
 
}
}",1
ibha186,1696486872,1,"void Capitalise(char phrase[]) {
    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122) {
            phrase[i] = phrase[i] - 32;
        }
    }
}",0
ibha186,1696487489,2,"void Capitalise(char phrase[]) {
    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122) {
            if ((i != 0) && (phrase[i-1] == 32)) {
                phrase[i] = phrase[i] - 32;
            } else if (i == 0)
            {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}",1
ibur427,1696741234,1,"void Capitalise(char *phrase)
{
	int l = strlen(phrase);
	phrase[0] = toupper(phrase[0]);

	for (int i = 0; i < l; i++) {
		if (isspace(phrase[i]) && (i + 1) < l) {
			phrase[i+1] = toupper(phrase[i+1]);
		}
	}
}
",1
iche428,1696358775,1,"void Capitalise(char *phrase)
{
   
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (int i=1; i<strlen(phrase); i++) {
        if (phrase[i-1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
    
}",1
ihoo440,1696242799,1,"void Capitalise(char *phrase)
{
    int L = strlen(phrase);

    for (int i = 0; i < L; i++)
    {
        if(phrase[i] == ' ' && islower(phrase[i + 1]))
        {
            int K = i + 1;
            phrase[K] = phrase[K] - 32;
        }
    }

    if(islower(phrase[0]))
    {
        phrase[0] = phrase[0] - 32;
    }
}
",1
ikis164,1696396487,1,"#include <stdio.h>
#include <math.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    if (phrase[0] < 123 && phrase[0] > 96) {
        phrase[0] = phrase[0] - 32;
    }

    for (int i = 0; i < length; i++) {
        if (phrase[i] == 32) {
            if (phrase[i + 1] < 123 && phrase[i + 1] > 96) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",1
iko203,1696394705,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
    int i = 0;
    int length = strlen(phrase);

    for (i = 0; i < length; i++) { 
        if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = (char)(phrase[i] - 32);
        }
        if (length > 0 && phrase[0] >= 'a' && phrase[0] <= 'z'){ 
            phrase[i] = (char)(phrase[i] - 32);
        }
    }
}",1
ilee973,1696771726,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i=0;
        phrase[0] = phrase[0] - ('a'-'A');
    
 while (phrase[i] != '\0') {
     if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
         phrase[i+1] = phrase[i+1] - ('a' - 'A');
     }
     i++;
 }
}
",0
ilee973,1696771955,2,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i=0;
    
    if(phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - ('a'-'A');
    }
    
 while (phrase[i] != '\0') {
     if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
         phrase[i+1] = phrase[i+1] - ('a' - 'A');
     }
     i++;
 }
}
",1
imac384,1696393227,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int next = 1;

    for (int i = 0; i < length; i++) {
	    if (phrase[i] == ' ') {
		    next = 1;
	}
	else if (next && phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - ('a' - 'A');
		next = 0;
	} 
	
}
}
",0
imac384,1696393386,2,"void Capitalise(char *phrase)
{
	int length = strlen(phrase);
	int next = 1;

	for (int i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			next = 1;
		}
		else if (next && phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - ('a' - 'A');
			next = 0;
		} 
		else {
			next = 0;
		}
		
	}
}
",1
imoh000,1696663237,1,"#include <stdio.h>

char ToUpper(char c) //calling this function which takes the uppercase of the input string
{
    if(c >= 'a' && c <= 'z') //checking if the input is a lowercase letter
    {
        return c - 'a' + 'A'; //IF it was lowercase then update it to a capital letter
    }
    return c;
}

void Capitalise(char *phrase)
{
    int i = 0;
    while(phrase[i] != '\0') //iterating through each character UNTIL it reaches NULL number
    {
        if(i == 0 || phrase[i - 1] == ' ') //seeing if there is a space beforehand or the first character to see if this character is the first letter
        {
            phrase[i] = ToUpper(phrase[i]); //IF it was the first character then use the upperfunction to update it to an uppercase letter
        }
        i++;
    }
}",1
iwes050,1696298960,1,"void Capitalise(char *phrase)
{

    int i = 0;
    int length = strlen(phrase);
    char whitespace_positions;

    //Capitalises first letter in sentence
    phrase[0] = phrase[0] - ('a' - 'A');

    whitespace_positions = ' ';

    while (phrase[i] != '\0') {
        if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i - 1] == whitespace_positions ) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
     i++;
    }
  
}
",0
iwes050,1696298970,2,"void Capitalise(char *phrase)
{

    int i = 0;
    char whitespace_positions;

    //Capitalises first letter in sentence
    phrase[0] = phrase[0] - ('a' - 'A');

    whitespace_positions = ' ';

    while (phrase[i] != '\0') {
        if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i - 1] == whitespace_positions ) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
     i++;
    }
  
}
",0
iwes050,1696299458,3,"void Capitalise(char *phrase)
{
    int i = 0;
    char whitespace_positions;

    whitespace_positions = ' ';

    while (phrase[i] != '\0') {
        if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i - 1] == whitespace_positions ) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
     i++;
    }
}   ",0
iwes050,1696299769,4,"void Capitalise(char *phrase)
{
    int i = 0;
    char whitespace_positions;

    whitespace_positions = ' ';

    while (phrase[i] != '\0') {
        if (phrase[i] >= 97 && phrase[i] <= 122 && i == 0 ) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i - 1] == whitespace_positions ) {
            phrase[i] = phrase[i] - ('a' - 'A');

        }
        
     i++;
    }
}   ",1
iwil997,1696308105,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i = 0;
    int length = strlen(phrase);
   
        for (i = 0; i < length; i++) { 
            if (phrase[i] >= 97 && phrase[i] <= 122) {
            if (phrase[i-1] == 32) {
                    phrase[i] = phrase[i] - 32; 
            }
            if (i == 0) {
                    phrase[i] = phrase[i] - 32;
            }
            }
        
        }
}",1
iwoo382,1696241032,1,"void Capitalise(char *phrase)
{
    int i, length, p;
    char q;
    length = strlen(phrase);
    
    p = phrase[0];
    p = p - 32;
    q = p;
    phrase[0] = q;

    for (i = 1; i < length; i++) {
        if (phrase[i-1] == ' ') {
            p = phrase[i];

            if ((p <= 122) && (p > 90)) {
            p = p - 32;
            q = p;
            phrase[i] = q;
            }

        } else {
            continue;
        }
    }
}
",0
iwoo382,1696241168,2,"void Capitalise(char *phrase)
{
   int i, length, p;
    char q;
    length = strlen(phrase);
    
    p = phrase[0];
    if ((p <= 122) && (p > 90)) {
    p = p - 32;
    q = p;
    phrase[0] = q;
    }

    for (i = 1; i < length; i++) {
        if (phrase[i-1] == ' ') {
            p = phrase[i];

            if ((p <= 122) && (p > 90)) {
            p = p - 32;
            q = p;
            phrase[i] = q;
            }

        } else {
            continue;
        }
    }
}
",1
ixia229,1696780888,1,"void Capitalise(char *phrase)
{
    int CapNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isspace(phrase[i])) {
            CapNext = 1;
        } else if (CapNext && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
            CapNext = 0;
        } else {
            CapNext = 0;
        }
    }
}  
}
",0
ixia229,1696781169,2,"void Capitalise(char *phrase)
{
    int CapNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isspace(phrase[i])) {
            CapNext = 1;
        } else if (CapNext && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
            CapNext = 0;
        } else {
            CapNext = 0;
        }
    }
}
",1
ixu871,1696751525,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int capitaliseNext = 1;  // make sure weather next character is a capital

    for (int i = 0; i < length; i++) {
        if ((phrase[i] >= 'A' && phrase[i] <= 'Z') && i != 0 && phrase[i - 1] != ' ') {
            phrase[i] += ('a' - 'A');  // Convert to lowercase 
        } else if ((phrase[i] >= 'a' && phrase[i] <= 'z') && (i == 0 || phrase[i - 1] == ' ')) {
            phrase[i] -= ('a' - 'A');  // make uppercase
        }
    }
}

}
",0
ixu871,1696751610,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    int length = strlen(phrase);

    for (int i = 0; i < length; i++) {
        if ((phrase[i] >= 'A' && phrase[i] <= 'Z') && i != 0 && phrase[i - 1] != ' ') {
            phrase[i] += ('a' - 'A');  // Convert to lowercase 
        } else if ((phrase[i] >= 'a' && phrase[i] <= 'z') && (i == 0 || phrase[i - 1] == ' ')) {
            phrase[i] -= ('a' - 'A');  // Convert to uppercase
        }
    }
}

",1
jahn224,1696342586,1,"void Capitalise(char *phrase)
{
    int i;
    
    phrase[0] = phrase[0] - ('a'-'A');
    
    for (i = 1; i < strlen(phrase); i++)
    {
        if(phrase[i - 1] == ' ')
        {
            phrase[i] = phrase[i] - ('a'-'A');
        }
    }
    
}
",0
jahn224,1696342823,2,"void Capitalise(char *phrase)
{
    int i;
    
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z'))
    {
        phrase[0] = phrase[0] - ('a'-'A');
    }

    for (i = 1; i < strlen(phrase); i++)
    {
        if(phrase[i - 1] == ' ') 
        {
            if ((phrase[i] >= 'a') && (phrase[i] <= 'z'))
            {
                phrase[i] = phrase[i] - ('a'-'A');
            }
    
        }
    }
    
}
",1
jaus241,1696373106,1,"void Capitalise(char *phrase)
{
  int i;
    int length = strlen(phrase);
    
    if (phrase[0] <= 'z' && phrase[0] >= 'a') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for(i = 0; i < length; i++) {
        if (phrase[i] == ' ' && phrase[i + 1] <= 122 && phrase[i + 1] >= 97) {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }  
}
",1
jbag235,1696823580,1,"void Capitalise(char phrase[])
{
	int i = 0;
	int length;
	length = strlen(phrase) - 1;
	
	while (i <= length) {
		if (i == 0) {
			phrase[i] = phrase[i] - 32;
		} else if(phrase[i-1] == 32) {
			phrase[i] = phrase[i] - 32;
		}
		i++;
	}
}
",0
jbag235,1696824778,2,"void Capitalise(char phrase[])
{
	int i = 0;
	int length;
	length = strlen(phrase) - 1;
	
	while (i <= length) {
		if (i == 0 && phrase[i] >= 97) {
			phrase[i] = phrase[i] - 32;
		} else if(phrase[i-1] == 32 && phrase[i] >= 97) {
			phrase[i] = phrase[i] - 32;
		}
		i++;
	}
}",1
jbam701,1696404322,1,"void Capitalise(char* phrase)
{
	int length;
	length = strlen(phrase);

	int i = 1;

	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}

	for (i = 1; i < length; i = i + 1) {
		if (phrase[i] == 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}
",1
jbam753,1696840336,1,"int isLowercaseLetter(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUpper(char c) {
    if (isLowercaseLetter(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseLetter(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toUpper(phrase[i]);
            }
            capitalizeNext = 0;
        } else {
            capitalizeNext = 1;
        }
    }
}",0
jbam753,1696840928,2,"int isLowercaseLetter(char c) {
    return (c >= 'a' && c <= 'z');
}

int isUppercaseLetter(char c) {
    return (c >= 'A' && c <= 'Z');
}

char toUpper(char c) {
    if (isLowercaseLetter(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

char toLower(char c) {
    if (isUppercaseLetter(c)) {
        return c + ('a' - 'A');
    }
    return c;
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseLetter(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toUpper(phrase[i]);
            }
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        } else if (isUppercaseLetter(phrase[i])) {
            capitalizeNext = 0;
        }
    }
}
",0
jbam753,1696841713,3,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        char currentChar = phrase[i];


        if (currentChar >= 'a' && currentChar <= 'z') {
            if (capitalizeNext) {
                phrase[i] = currentChar - ('a' - 'A');
            }
            capitalizeNext = 0;
        } else if (currentChar == ' ' || currentChar == '\t' || currentChar == '\n' || currentChar == '\r') {
            capitalizeNext = 1;
        } else {
            capitalizeNext = 0;
        }
    }
}
",1
jbis394,1696682811,1,"void Capitalise(char *phrase)
{
int count=1;
for (int i=0; i++; phrase[i]!='\0')
{
if (phrase[i] <= 'z' && count && phrase[i] >= 'a')
{
phrase[i] -= 32;
count=0;
}
else if (phrase[i]==' ')
{
count=1;
}
}
}",0
jbis394,1696682834,2,"void Capitalise(char *phrase)
{
int count=1;
for (int i=0; phrase[i]!='\0'; i++)
{
if (phrase[i] <= 'z' && count && phrase[i] >= 'a')
{
phrase[i] -= 32;
count=0;
}
else if (phrase[i]==' ')
{
count=1;
}
}
}",0
jbis394,1696683076,3,"#include <stdio.h>
int count = 1;
void Capitalise(char *phrase)
{
for (int i = 0; phrase[i] != '\0'; i++) {
if (phrase[i] <= 'z' && count && phrase[i] >= 'a') {
        phrase[i] -= 32;
count = 0;
}
else if (phrase[i] == ' ')
{
count = 1;
}
else
{
count = 0;
}
}
}",0
jbro301,1696308331,1,"void Capitalise(char *phrase)
{
        int length;
    int i;
    int letter;

    i = 0;

    while (phrase[i] != '\0') {

        if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
            phrase[0] = phrase[0] - ('a' - 'A');
        }


        else if ((phrase[i - 1] == ' ') && (phrase[i] >= 97) && (phrase[i] <= 122)) {

            phrase[i] = phrase[i] - ('a' - 'A');
        }

        i++;
    }
}
",0
jbro301,1696308378,2,"void Capitalise(char *phrase)
{
    int i;

    i = 0;

    while (phrase[i] != '\0') {

        if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
            phrase[0] = phrase[0] - ('a' - 'A');
        }


        else if ((phrase[i - 1] == ' ') && (phrase[i] >= 97) && (phrase[i] <= 122)) {

            phrase[i] = phrase[i] - ('a' - 'A');
        }

        i++;
    }
}
",1
jbru537,1696807593,1,"void Capitalise(char *phrase)
{
 int length = strlen(phrase);  
   int length = length - 1;
   int pos = 1;

while (pos < length); {

if (phrase[pos-1] == ' '){
    phrase[pos] -= 32;
}
pos ++;
phrase[0] -= 32;
}
   
}
",0
jbru537,1696807871,2,"void Capitalise(char *phrase)
{
  int length = strlen(phrase);  
   int pos = 1;
phrase[0] -= 32;
while (pos < length) {

if (phrase[pos-1] == ' '){
    phrase[pos] -= 32;
}
pos ++;
}

   
}
",0
jbru537,1696808279,3,"void Capitalise(char *phrase)
{
 int length = strlen(phrase);  
   int pos = 1;
if (phrase[0]>='a'&& phrase[0]<='z' ){
   phrase[0] -= 32;}
while (pos < length) {

if (phrase[pos-1] == ' ' && phrase[0]>='a'&& phrase[0]<='z' ){
    phrase[pos] -= 32;
}
pos ++;
}

   
}
",0
jbru537,1696808325,4,"void Capitalise(char *phrase)
{
 int length = strlen(phrase);  
   int pos = 1;
if (phrase[0]>='a'&& phrase[0]<='z' ){
   phrase[0] -= 32;}
while (pos < length) {

if (phrase[pos-1] == ' ' && phrase[pos]>='a'&& phrase[pos]<='z' ){
    phrase[pos] -= 32;
}
pos ++;
}

   
}
",1
jbuc296,1696838431,1,"void LetterCap(char * phrase, int position) {
  phrase[position] = phrase[position] - ('a' - 'A');
}

void Capitalise(char * phrase) {
  int i = 0;
  if (phrase[i] >= 97 && phrase[i] <= 122) {
    phrase[i] = phrase[i] - ('a' - 'A');
  }
  int j = 1;
  while (phrase[j] != '\0') {
    if (phrase[j - 1] == ' ' && phrase[j] >= 97 && phrase[j] <= 122) {
      LetterCap(phrase, j);
      j = j++;
    }
    j = j++;
  }
}",0
jbuc296,1696838539,2,"void LetterCap(char * phrase, int position) {
  phrase[position] = phrase[position] - ('a' - 'A');
}

void Capitalise(char * phrase) {
  int i = 0;
  int j = 1;
  if (phrase[i] >= 97 && phrase[i] <= 122) {
    phrase[i] = phrase[i] - ('a' - 'A');
  }
  while (phrase[j] != '\0') {
    if (phrase[j - 1] == ' ' && phrase[j] >= 97 && phrase[j] <= 122) {
      LetterCap(phrase, j);
      j = j++;
    }
    j = j++;
  }
}",0
jbuc296,1696838975,3,"void LetterCap(char * phrase, int position) {
  phrase[position] = phrase[position] - ('a' - 'A');
}

void Capitalise(char * phrase) {
  int i = 0;
  if (phrase[i] >= 97 && phrase[i] <= 122) {
    phrase[i] = phrase[i] - ('a' - 'A');
  }
  while (phrase[i + 1] != '\0') {
    if (phrase[i - 1] == ' ' && phrase[i] >= 97 && phrase[i] <= 122) {
      LetterCap(phrase, i);
      i++;
    }
    i++;
  }
}

",1
jcha513,1696672395,1,"void Capitalise(char *phrase)
{
    int i;
    int len;
    len=strlen(phrase);

    if phrase[0]>=97 && phrase[0]<=122) {
        phrase[0] = phrase[i]-32;
    }
    
    for (i=1; i<len; i++) {
        if (phrase[i-1] == ' ' && phrase[i]>= 97 && phrase[i]<=122) {
            phrase[i] = phrase[i]-32;
        }
    }
}",0
jcha513,1696672435,2,"void Capitalise(char *phrase)
{
    int i;
    int len;
    len=strlen(phrase);

    if (phrase[0]>=97 && phrase[0]<=122) {
        phrase[0] = phrase[i]-32;
    }
    
    for (i=1; i<len; i++) {
        if (phrase[i-1] == ' ' && phrase[i]>= 97 && phrase[i]<=122) {
            phrase[i] = phrase[i]-32;
        }
    }
}",0
jcha513,1696672458,3,"void Capitalise(char *phrase)
{
    int i;
    int len;
    len=strlen(phrase);

    if (phrase[0]>=97 && phrase[0]<=122) {
        phrase[0] = phrase[0]-32;
    }
    
    for (i=1; i<len; i++) {
        if (phrase[i-1] == ' ' && phrase[i]>= 97 && phrase[i]<=122) {
            phrase[i] = phrase[i]-32;
        }
    }
}",1
jcha574,1696242557,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    int i=0;
    while (phrase[i] != '\0') {
        i ++;
    }
    int length = i;
    if ((phrase[0] >96) && (phrase[0]<123)) {
        phrase[0] = phrase[0] - 32;
        
    }
    for(i=1;i<length;i++) {
        if ((phrase[i]==32) && (phrase[i+1] > 96) && (phrase[i+1]<123)) {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",1
jcha972,1696300616,1,"void Capitalise(char *phrase)
{   
    int length = strlen(phrase);
    
    if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
        phrase[0] = phrase[0] - 32;
    }
    
    for (int i = 1; i <= length; i++) {
        if ((phrase[i-1] == 32)) {
            if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
                phrase[i] = phrase[i] - 32;
            }
        }
        
    }
    return;
}",1
jche456,1696820215,1,"void Capitalise(char *phrase)
{
	int i = 0;
	if (phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - ('a' - 'A');
	}
	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
		i++;
	}
}",1
jchi648,1696679144,1,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    if (phrase[0] != ' ') {
            phrase[0] = phrase[0]-32;
        }
    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') {
            phrase[i+1] = phrase[i+1]-32;
        }
    }
}
",0
jchi648,1696679293,2,"void Capitalise(char *phrase) {
    
    int len = strlen(phrase);
    if (phrase[0] != ' ' && phrase[0] > 97) {
            phrase[0] = phrase[0]-32;
        }
    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ' && phrase[i+1] > 97) {
            phrase[i+1] = phrase[i+1]-32;
        }
    }
}
",0
jchi648,1696679374,3,"void Capitalise(char *phrase) {
    
    int len = strlen(phrase);
    if (phrase[0] != ' ' && phrase[0] >= 97) {
            phrase[0] = phrase[0]-32;
        }
    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ' && phrase[i+1] >= 97) {
            phrase[i+1] = phrase[i+1]-32;
        }
    }
}",1
jchu579,1696467010,1,"void Capitalise(char* phrase)
{
	if (phrase[0] > 90)
	{
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 1; i < strlen(phrase); i++)
	{
		if (phrase[i] == ' ')
		{
			phrase[i+1] = phrase[i+1] - 32;
		}
	}
}
",0
jchu579,1696467143,2,"void Capitalise(char* phrase)
{
	if (phrase[0] > 90)
	{
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 1; i < strlen(phrase); i++)
	{
		if (phrase[i] == ' ')
		{
			if (phrase[i+1] > 90)
			{
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
	}
}
",1
jcla431,1696299199,1,"void Capitalise(char *phrase)
{
    int i;

	if (phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - 32;
	}

	for (i = 1; i < strlen(phrase); i++)
	{
		if (phrase[i] == ' ')
		{
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')
			{
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
	}
}
",1
jcla755,1696214007,1,"void Capitalise(char *phrase)
{
   int newWord = 1;
    for(int i = 0; i<strlen(phrase); i++)
    {
        if(phrase[i] == ' ')
        {
            newWord = 1;
        }
        else if(newWord == 1)
        {            
            phrase[i] = phrase[i] - 32;
            newWord = 0;
        }
    }  
}
",0
jcla755,1696214163,2,"void Capitalise(char *phrase)
{
   int newWord = 1;
    for(int i = 0; i<strlen(phrase); i++)
    {
        if(phrase[i] == ' ')
        {
            newWord = 1;
        }
        else if(newWord == 1)
        {            
            if((int)phrase[i] > 90)
            {
                phrase[i] = phrase[i] - 32;                
            }
            newWord = 0;            
        }
    } 
}
",1
jdal353,1696831667,1,"void Capitalise(char *str) {
    
    int capitalizeNext = 1;
    int i;

    for (i = 0; str[i] != '\0'; i++) {
        if (isalpha(str[i])) {
            if (capitalizeNext) {
                str[i] = toupper(str[i]);
                capitalizeNext = 0;
            } else {
                str[i] = tolower(str[i]);
            }
        } else {
            capitalizeNext = 1;
        }
    }
}

",0
jdal353,1696846335,2,"void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitalizeNext) {
            
            phrase[i] -= 32; 
            capitalizeNext = 0; 
        } else if (phrase[i] == ' ') {
            
            capitalizeNext = 1;
        }
    }
}


",0
jdal353,1696846480,3,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitalizeNext) {
            
            phrase[i] -= 32; 
            capitalizeNext = 0; 
        } else if (phrase[i] == ' ') {
            
            capitalizeNext = 1;
        } else if (i == 0) {
            
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] -= 32;
            }
        }
    }
}",0
jdea126,1696728504,1,"void Capitalise(char *phrase)
{
	int i = 0;

	phrase[0] = phrase[0] - ('a' - 'A');

	while (phrase[i] != '\0') {
		if (phrase[i] == 32) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		i++;
	}
}
",0
jdea126,1696728736,2,"void Capitalise(char *phrase)
{
	int i = 0;

	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	while (phrase[i] != '\0') {
		if (phrase[i] == 32 && phrase[i+1] >= 'a' && phrase[i+1] <='z') {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		i++;
	}
}
",1
jdu853,1696320633,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    for (int i = 0; i < length; i++)
    {
        if (phrase[i] == 32)
        {
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z')
            {
                phrase[i+1] = phrase[i+1] - ('a' - 'A');
            }
        } 
    }
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
}",1
jear460,1696643226,1,"void AllCaps(char *word) {
    
    int i = 0;
    while (word[i] != '\0') {
        if (word[i] >= 'a' && word[i] <= 'z') {
        word [i] = word[i] - ('a' - 'A');
        }
        
    }
    
}",0
jear460,1696643402,2,"void Capitalise (char *phrase)
{
  int i = 0;
  int j;
  while (phrase[i] != '\0')
    {
      i++;
    }
  i = i - 1;
  if ((phrase[0] >= 'a') && (phrase[0] <= 'z'))
    {
      phrase[0] = phrase[0] - 32;
    }
  for (j = 0; j <= i; j++)
    {
      if (phrase[j] == ' ')
	{
	  if ((phrase[j + 1] >= 'a') && (phrase[j + 1] <= 'z'))
	    {
	      phrase[j + 1] = phrase[j + 1] - 32;
	    }
	}

    }
}",1
jfen705,1696654324,1,"void Capitalise(char *phrase)
{
    int le;
    le = strlen(phrase);
    int i;
    for (i = 0; i < le; i++) {
        if (i == 0 && phrase[i] < 123 && phrase[i]>96) {
            phrase[i] = phrase[i] - 32;
        }
        if (i > 0 && phrase[i] < 123 && phrase[i]>96 && phrase[i - 1] == ' ') {
            phrase[i] = phrase[i] - 32;
        }
    }
}
",1
jfet156,1696215690,1,"void
Capitalise (char *phrase)
{
  int length = strlen (phrase);


     if ((phrase[0] >= 97) && (phrase[0] <= 122))
     {
         phrase[0] = phrase[0] - 32;
     }

  for (int i = 1; i < length; i++)
       {
       if ((phrase[i] >= 97) && (phrase[i] <= 122))
           {
           if (phrase[i - 1] == ' ')
           {
            phrase[i] = phrase[i] - 32;
           }
           }
       }

}
",1
jgeo610,1696429523,1,"void Capitalise(char *phrase)
{
    int i;
	int length = strlen(phrase);

	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - 32;
	}


	for (i = 1; i < length; i++) {
		if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
			if (phrase[i - 1] == 32) {
				phrase[i] = phrase[i] - 32;
			}
		}
	}
}
",1
jgol495,1696208444,1,"#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>

typedef uint32_t u32;
void Capitalise(char *phrase){
    bool caps = true;
    for(u32 i = 0; phrase[i] != '\0'; i++){
        // ctype is probably not allowed
        if(caps){
            if(phrase[i] >= 'a' && phrase[i] <= 'z'){
                phrase[i] += 'A' - 'a';
            }
            caps = false;
        }else if(phrase[i] == ' ' || phrase[i] == '\n' || phrase[i] == '\t'){
            caps = true;
        }
    }
}",1
jhor229,1696815754,1,"void capitalize(char *phrase) 
{
    int i = 0;

    if (phrase[i] >= 'a' && phrase[i] <= 'z') 
    {
        phrase[i] -= 32; 
    }

    while (phrase[i] != '\0') 
    {
        if (phrase[i] == ' ' || phrase[i] == '.' || phrase[i] == ',' || phrase[i] == '!' || phrase[i] == '?') 
        {
            i++;

            if (phrase[i] >= 'a' && phrase[i] <= 'z') 
            {
                phrase[i] -= 32; 
            }
        }

        i++;
    }
}",0
jhor229,1696815777,2,"void Capitalize(char *phrase) 
{
    int i = 0;

    if (phrase[i] >= 'a' && phrase[i] <= 'z') 
    {
        phrase[i] -= 32; 
    }

    while (phrase[i] != '\0') 
    {
        if (phrase[i] == ' ' || phrase[i] == '.' || phrase[i] == ',' || phrase[i] == '!' || phrase[i] == '?') 
        {
            i++;

            if (phrase[i] >= 'a' && phrase[i] <= 'z') 
            {
                phrase[i] -= 32; 
            }
        }

        i++;
    }
}",0
jhor229,1696815791,3,"void Capitalise(char *phrase) 
{
    int i = 0;

    if (phrase[i] >= 'a' && phrase[i] <= 'z') 
    {
        phrase[i] -= 32; 
    }

    while (phrase[i] != '\0') 
    {
        if (phrase[i] == ' ' || phrase[i] == '.' || phrase[i] == ',' || phrase[i] == '!' || phrase[i] == '?') 
        {
            i++;

            if (phrase[i] >= 'a' && phrase[i] <= 'z') 
            {
                phrase[i] -= 32; 
            }
        }

        i++;
    }
}",1
jhwa027,1696836985,1,"void Capitalise(char* phrase) {
    int shouldCapitalize = 1; // Flag to determine whether to capitalize the current char
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (shouldCapitalize && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpperCase(phrase[i]);
            shouldCapitalize = 0;
        }
        if (phrase[i] == ' ') {
            shouldCapitalize = 1;
        }
    }
}
",0
jhwa027,1696837019,2,"#include <stdio.h>

char ToUpperCase(char c) {
    if (c >= 97 && c <= 122) {
        return c - 32; // converting to upper case using ASCII values
    }
    return c;
}

void Capitalise(char* phrase) {
    int shouldCapitalize = 1; // Flag to determine whether to capitalize the current char
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (shouldCapitalize && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpperCase(phrase[i]);
            shouldCapitalize = 0;
        }
        if (phrase[i] == ' ') {
            shouldCapitalize = 1;
        }
    }
}
",0
jhwa027,1696837154,3,"#include <stdio.h>

char ToUpperCase(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 32; // converting to upper case using ASCII values
    }
    return c;
}

void Capitalise(char* phrase) {
    int shouldCapitalize = 1; // Flag to determine whether to capitalize the current char
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (shouldCapitalize && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpperCase(phrase[i]);
        }
        // Only set shouldCapitalize if the current char is a space
        shouldCapitalize = (phrase[i] == ' ');
    }
}

int main() {
    char phrase[100] = ""The University of Auckland"";
    Capitalise(phrase);
    printf(""%s"", phrase); // Expected: The University Of Auckland
    
    return 0;
}
",0
jhwa027,1696837166,4,"#include <stdio.h>

char ToUpperCase(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 32; // converting to upper case using ASCII values
    }
    return c;
}

void Capitalise(char* phrase) {
    int shouldCapitalize = 1; // Flag to determine whether to capitalize the current char
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (shouldCapitalize && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpperCase(phrase[i]);
        }
        // Only set shouldCapitalize if the current char is a space
        shouldCapitalize = (phrase[i] == ' ');
    }
}
",1
jjeo627,1696733267,1,"void Capitalise(char *phrase)
{
   phrase[0] = phrase[0] -('a'-'A');
    int i = 0;
    
    while (phrase[i] != '\0'){
        if (phrase[i]==' '){
            phrase[i+1] = phrase[i+1] - ('a'-'A');
            i++;
        }
        else{
            i++;
        }
    } 
}
",0
jjeo627,1696733533,2,"void Capitalise(char *phrase)
{
 if(phrase[0]>=90){
    phrase[0] = phrase[0] -('a'-'A');
    }
    int i = 0;
    
    while (phrase[i] != '\0'){
        if (phrase[i]==' ' && phrase[i+1]>=97){
            phrase[i+1] = phrase[i+1] - ('a'-'A');
            i++;
        }
        else{
            i++;
        }
    }
}
",1
jjon350,1696847262,1,"void Capitalise(char *phrase)
{
  int i;

for (i=0, phrase[i], i++){
    if (i==0){
        if (phrase[i>='a' && phrase[i]<='z']){
            (phrase[i]=phrase[i]-32);
        }

    }
    else if (phrase[i-1]==' '){
         if (phrase[i>='a' && phrase[i]<='z']){
            (phrase[i]=phrase[i]-32);
        }

    }
    else{
        phrase[i]=phrase[i]
    }
}
}  
",0
jjon350,1696848865,2,"void Capitalise(char *phrase)
{   int length = strlen(phrase);
    int i;
    
    for (i = 0; i < length; i++) {
        if (i == 0 || phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    }
}",1
jjos057,1696760405,1,"char ConvertToCapital(char character) {
    character = character - ('a' - 'A');
    return character;
}

void Capitalise(char* phrase) {

    int phraseL = strlen(phrase);

    for (int i = 0; i < phraseL; i++) {
        if (i == 0 || phrase[i - 1] == ' ') {
            phrase[i] = ConvertToCapital(phrase[i]);
        }
    }
}",0
jjos057,1696760802,2,"char ConvertToCapital(char character) {
    if (character >= 'a' && character <= 'z') {  
        return character = character - ('a' - 'A');
    }
    return character;  
}


void Capitalise(char *phrase) {

    int phraseL = strlen(phrase);

    for (int i = 0; i < phraseL; i++) {
        if (i == 0 || phrase[i - 1] == ' ') {
            phrase[i] = ConvertToCapital(phrase[i]);
        }
    }
}",1
jjun879,1696414809,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
	int i;
	int FirstLetter = 1;
	
	for (i = 0; i < strlen(phrase); i++) {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (FirstLetter) {
				phrase[i] -= 32;
				FirstLetter = 0;
			}
		}
		else if (phrase[i] == ' ') {
			FirstLetter = 1;
		}
		else if (FirstLetter && phrase[i] >= 'A' && phrase[i] <= 'Z') {
		FirstLetter = 0;
		}
	}
}",0
jjun879,1696415948,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
	int i;
	int FirstLetter = 1;
	
	for (i = 0; i < strlen(phrase); i++) {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (FirstLetter) {
				phrase[i] -= 32;
				FirstLetter = 0;
			}
		}
		else if (phrase[i] == ' ') {
			FirstLetter = 1;
		}
		else if (FirstLetter && phrase[i] >= 'A' && phrase[i] <= 'Z') {
			FirstLetter = 0;
		}
		else if (phrase[i - 1] != ' ') {
			FirstLetter = 0;
		}
	}
}",1
jkah253,1696419785,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int done = 0;
    
    // loop through all chars until \0 reached

    while (phrase[i] != '\0') {
        // check if space.
        if (phrase[i] == ' ') {
            done = 0;
            i++;
            continue;
        }

        if (done ==0) {
            // if START of word, check for lowercase, then capitalise if so.
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                phrase[i] -= 32;
            }
            done = 1;
        }

        i++;
    }

}",1
jkan172,1696302322,1,"void Capitalise(char *phrase)
{
    int i, j;
    
    j = strlen(phrase);
    if (phrase[0] > 91) {
        phrase[0] = phrase[0] - 32;
    }
  
   for (i = 0; i < j; i++) {
       
       if (phrase[i] == ' ') {
           if (phrase[i + 1] > 91) {
               phrase[i + 1] = phrase[i + 1] - 32;
               
           } 
           else {
               continue;
           }
       }
        
   }
}
",1
jkim828,1696304438,1,"void Capitalise(char *phrase)
{
    int i;
    int length;
    for (i = 0; i < 100; i++) {
        if (phrase[i] == '\0') {
            length = i;
        }
    }

    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = (phrase[0] - ' ');
    }

    for (i = 0; i < length; i++) {
        if (phrase[(i - 1)] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = (phrase[i] - ' ');
            }
        }
    }
}
",1
jkim837,1696479427,1,"void Capitalise(char phrase[])
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 1; i < strlen(phrase); i++)
	{
		if (phrase[i] == 32 && phrase[i+1] >= 'a' && phrase[i+1] <= 'z')
		{
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",1
jkim933,1696309255,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    phrase[0] = phrase[0] - 32;
    
    //find location of '\0'
    int i = 1;
    while (phrase[i] != '\0') {
        if ((phrase[i - 1] == 32) && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            //Capitalise
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        i++;
    }
}",1
jkim960,1696459257,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int length = strlen(phrase);
    
    for (int i = 0; i < (length-1); i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (i == 0 || phrase[i-1] == ' ') {
             phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",0
jkim960,1696459356,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i < (length-1); i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (i == 0 || phrase[i-1] == ' ') {
             phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",0
jkim960,1696459814,3,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (i == 0 || phrase[i-1] == ' ') {
             phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",1
jlah077,1696321626,1,"int IsCapital(char letter)
{
    if ((int)letter >= 65 && (int)letter <= 90)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void Capitalise(char *phrase)
{
    if (!IsCapital(*phrase))
    {
        *phrase -= 32;
    }
    for (int i = 1; i < strlen(phrase); i++)
    {
        if (*(phrase + i - 1) == ' ' && !IsCapital(*(phrase + i)))
        {
            *(phrase + i) -= 32;
        }
    }
}
",0
jlah077,1696807026,2,"int IsLowerCaseLetter(char letter)
{
    if ((int)letter >= 97 && (int)letter <= 122)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

void Capitalise(char *phrase)
{
    if (IsLowerCaseLetter(*phrase))
    {
        *phrase -= 32;
    }
    for (int i = 1; i < strlen(phrase); i++)
    {
        if (*(phrase + i - 1) == ' ' && IsLowerCaseLetter(*(phrase + i)))
        {
            *(phrase + i) -= 32;
        }
    }
}
",1
jlal056,1696320788,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{

	int x = 0;
	int i;

	if ((phrase[0] >= 'a')&&(phrase[0] <= 'z')) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	while (phrase[x] != '\0') {
		x++;
	}

	for(i = 0; i < x; i++) {
		if (phrase[i] == (' ')){
			if ((phrase[i+1] >= 'a')&&(phrase[i+1] <= 'z')) {
				phrase[i+1] = phrase[i+1] - ('a' - 'A');
			}
		}
	}
return;
}",1
jlew699,1696589108,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    for(int i = 0; i < strlen(phrase); i++)
    {
        if(i == 0) {
            phrase[i] = phrase[i] - 32;
        }
        
        if(phrase[i] <= 122 && phrase[i] >= 97)
        {
            if (phrase[i - 1] == ' ')
            {
                phrase[i] = phrase[i] - 32;
            }
           
        }
    }
}",0
jlew699,1696589369,2,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    for(int i = 0; i < strlen(phrase); i++)
    {
        if(i == 0 && phrase[i] <= 122 && phrase[i] >= 97){
            phrase[i] = phrase[i] - 32;
        }
        
        if(phrase[i] <= 122 && phrase[i] >= 97)
        {
            if (phrase[i - 1] == ' ')
            {
                phrase[i] = phrase[i] - 32;
            }
           
        }
    }
}",1
jli463,1696474758,1,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] == 32) {
			if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
		i++;
	}
	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}    
}
",1
jli876,1696292194,1,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++) phrase[i] > 96 && phrase[i - 1] == 32 ? phrase[i] -= 32: i == 0 && phrase[i] > 96 ? phrase[i] -= 32: 0;
}
",1
jli917,1696757974,1,"int LC(char character){
    return(character >= 'a' && character <= 'z');
}


void Capitalise(char *phrase)
{
    int a = 1;
    for(int i=0; phrase[i] != '\0' ; i++) {
        if (phrase[i] == ' ') {
            a = 1;
        }
        else {
            if (a && LC(phrase[i])){
                phrase[i] = phrase[i] - 'a' + 'A'; 
                a = 0;
            }
        }
    }
}
",0
jli917,1696760243,2,"

void Capitalise(char *phrase)
{
    int len = strlen(phrase) - 1 ;
    int i ;
    if ((97 <= phrase[0]) && (phrase[0] <= 122)){
        phrase[0] = phrase[0] - 32 ; 
    }
        for(i = 0; i<len ; ++i) {
            if(phrase[i] == ' ') {
                if ((97<=phrase[i+1]) && （phrase[i+1]<=122)){
                    phrase[i+1] = phrase[i+1] - 32;
                }
            
        }
    }
}
",0
jli917,1696760728,3,"

void Capitalise(char *phrase)
{
    int len = strlen(phrase) - 1 ;
    int i ;
    if ((97 <= phrase[0]) && (phrase[0] <= 122)){
        phrase[0] = phrase[0] - 32 ; 
    }
        for(i = 0; i<len ; ++i) {
            if(phrase[i] == ' ') {
               if ((phrase[i+1]>=97) && (phrase[i+1] <= 122)){
                    phrase[i+1] = phrase[i+1] - 32;
                }
            
        }
    }
}",1
jlia486,1696588504,1,"#include <stdio.h>

// Check if a character is lowercase
int lowercase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to convert a lowercase character to uppercase
char lowertouppercase(char c) {
    if (lowercase(c)) {
        // Convert lowercase character to uppercase by subtracting the ASCII difference
        return c - 32; // ASCII difference between 'a' and 'A'
    }
    return c; // Return the character as is for non-lowercase characters
}

void Capitalise(char *phrase)
{
    int changetouppercase = 1; // Indicator to decide if the next letter will be capitalized. 1 is yes, 0 is no.

    // Iterate through the characters in the input phrase
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (lowercase(phrase[i])) {
            // Check if the character is a lowercase alphabet
            if (changetouppercase) {
                // If indicator value is = 1, capitalize the lowercase character.
                phrase[i] = lowertouppercase(phrase[i]);
                changetouppercase = 0; // indicator value changes to 0, next letter will not be capitalized.
            } else {
                changetouppercase = 1; // Set the indicator to capitalize the next character
            }
        } else {
            changetouppercase = 0; // Reset the indicator value for space characters
        }
    }
}",0
jlia486,1696588675,2,"void Capitalise(char *phrase)
{
   // Iterate over the characters in the phrase.
  for (int i = 0; phrase[i] != '\0'; i++) {
    // If the current character is a lowercase alphabetic character, and the previous character is either a space character or the
    // beginning of the string, then capitalise the current character.
    if (islower(phrase[i]) && (i == 0 || isspace(phrase[i - 1]))) {
      phrase[i] = toupper(phrase[i]);
    }
  } 
}
",1
jlia948,1696814052,1,"#include <stdio.h>

void Capitalise(char *phrase) 
{
    int i = 0;
    if (phrase[i] >= 'a' && phrase[i] <= 'z')
    { 
        phrase[i] -= 32;
    }
    
    while (phrase[i] != '\0')
    {
        if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') 
        { 
            phrase[i+1] -= 32;
        }
        i++;
    }
}",1
jliu295,1696655137,1,"void CapitalizeWords(char *phrase) {
    int i = 0;
    if(phrase[i] >= 'a' && phrase[i] <= 'z'){
        phrase[i] = phrase[i] - ('a' - 'A');
    }
    while(phrase[i] != '\0'){
        if(phrase[i] == ' '){
            i++;
            if(phrase[i] >= 'a' && phrase[i] <= 'z'){
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}",0
jliu295,1696655205,2,"void Capitalise(char *phrase){
    int i = 0;
    if(phrase[i] >= 'a' && phrase[i] <= 'z'){
        phrase[i] = phrase[i] - ('a' - 'A');
    }
    while(phrase[i] != '\0'){
        if(phrase[i] == ' '){
            i++;
            if(phrase[i] >= 'a' && phrase[i] <= 'z'){
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}",1
jliu778,1696235873,1,"void Capitalise(char *phrase)
{
    int j =0;
	while (phrase[j]!='\0')
	{
		j++;
	}
		if (phrase[0]!=' ')
		{
			phrase[0]=phrase[0]-32;
		}
	for (int i = 0; i < j; i++)
	{	
		if (phrase[i-1]==' ')
		{
			phrase[i]=phrase[i]-32;
		}
	}
}",0
jliu778,1696236137,2,"void Capitalise(char *phrase)
{
    int j =0;
	while (phrase[j]!='\0')
	{
		j++;
	}
		if (phrase[0]!=' ')
		{
			if (phrase[0]>=97)
			{
				phrase[0]=phrase[0]-32;
			}
			
		}
	for (int i = 0; i < j; i++)
	{	
		if (phrase[i-1]==' ')
		{
			if (phrase[i]>=97)
			{
				phrase[i]=phrase[i]-32;
			}
		}
	}
}",1
jluo379,1696833669,1,"#include <ctype.h>

void Capitalise(char *phrase)
{
    int phraseLen = strlen(phrase);
    phrase[0] = toupper(phrase[0]);
    
    for (int i = 0; i < phraseLen; i++) {
        if (phrase[i - 1] == ' ') {
            phrase[i] = toupper(phrase[i]);
        }
    }
    
    return; 
}
",1
jmak320,1696804502,1,"void Capitalise(char *phrase)
{
    int phraseL = strlen(phrase);
    if (phrase [0] >= 97 && phrase [0] <= 122){
        phrase[0] = phrase[0] - 32;
    }
    for (int i = 1; i < phraseL; i++){
        if (phrase[i] == ' ') {
            if (phrase [i+1] >= 97 && phrase [i+1] <= 122) {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}
}
",1
jmat941,1696844283,1,"void Capitalise(char *phrase)
{
    int beginOfWord = 1; 
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (beginOfWord && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = toupper(phrase[i]);
            beginOfWord = 0; 
            }
            else if (phrase[i] == ' ') {
            beginOfWord = 1; 
            }
            else {
            beginOfWord = 0;
            }
            
    }
}
",1
jmei608,1696771503,1,"void Capitalise(char *phrase) {
	int i = 0;
	int difference = 'a' - 'A';
	if (phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - difference;
	}
	i++;

	for(i; i <= strlen(phrase); i++) {
		if (phrase[i - 1] == 32 && phrase[i] >= 'a' && phrase[i] <= 'z' ) {
			phrase[i] = phrase[i] - difference;
		}
	}
}",0
jmei608,1696771597,2,"void Capitalise(char *phrase) {
	int difference = 'a' - 'A';
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - difference;
	}

	for(int i = 1; i <= strlen(phrase); i++) {
		if (phrase[i - 1] == 32 && phrase[i] >= 'a' && phrase[i] <= 'z' ) {
			phrase[i] = phrase[i] - difference;
		}
	}
}",1
jmil737,1696300395,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
 
 int i;
 int length;

    for (i = 0; i < 100; i++){
        
        if (i == 0 && phrase[i] != '\0'){
          phrase[i] = phrase[i] - 32;  
        }
        else if(phrase[i] == 32){
            
            phrase[i + 1] = phrase[i + 1] - 32;
        }    
        else{
        phrase[i] = phrase[i];    
        }
       
    }
    
    
}
",0
jmil737,1696300405,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
 
 int i;

    for (i = 0; i < 100; i++){
        
        if (i == 0 && phrase[i] != '\0'){
          phrase[i] = phrase[i] - 32;  
        }
        else if(phrase[i] == 32){
            
            phrase[i + 1] = phrase[i + 1] - 32;
        }    
        else{
        phrase[i] = phrase[i];    
        }
       
    }
    
    
}
",0
jmil737,1696301022,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
 
 int i;
 int length;

    for (i = 0; i < 100; i++){
        
        if (i == 0 && phrase[i] != '\0' && phrase[i] >= 97 && phrase[i] <= 122){
          phrase[i] = phrase[i] - 32;  
        }
        else if(phrase[i] == 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122){
            
            phrase[i + 1] = phrase[i + 1] - 32;
        }    
        else{
        phrase[i] = phrase[i];    
        }
       
    }
    
    
}
",0
jmil737,1696301029,4,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
 
 int i;


    for (i = 0; i < 100; i++){
        
        if (i == 0 && phrase[i] != '\0' && phrase[i] >= 97 && phrase[i] <= 122){
          phrase[i] = phrase[i] - 32;  
        }
        else if(phrase[i] == 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122){
            
            phrase[i + 1] = phrase[i + 1] - 32;
        }    
        else{
        phrase[i] = phrase[i];    
        }
       
    }
    
    
}
",1
jmul290,1696299017,1,"void Capitalise(char *phrase)
{
    phrase[0] = phrase[0] - 32;
    int i;
    while (phrase[i] != '\0')
    {
        i++;
    }

    for (int j = 1; j < i; j++)
    {
        if(phrase[j - 1] == ' ')
        {
            phrase[j] = phrase[j] - 32;
        }
    }

}",0
jmul290,1696299250,2,"void Capitalise(char *phrase)
{
    if(phrase[0] <= 122 && phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    }
    
    int i;
    while (phrase[i] != '\0')
    {
        i++;
    }

    for (int j = 1; j < i; j++)
    {
        if(phrase[j - 1] == ' ' && phrase[j] <= 122 && phrase[j] >= 97)
        {
            phrase[j] = phrase[j] - 32;
        }
    }

}",0
jmul290,1696299494,3,"void Capitalise(char *phrase)
{
    if(phrase[0] <= 122 && phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    }
    
    int i = 0;
    while (phrase[i] != '\0')
    {
        i++;
    }

    for (int j = 1; j < i; j++)
    {
        if(phrase[j - 1] == ' ' && phrase[j] <= 122 && phrase[j] >= 97)
        {
            phrase[j] = phrase[j] - 32;
        }
    }

}",1
joka775,1696843981,1,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

char Upper(char x) {
    if (x >= 'a' && x <= 'z') {
        return x - 'a' + 'A';
    }
    return x;
}

void Capitalise(char* phrase) {
    int length = strlen(phrase);
    int next = 1;
    for (int i = 0; i < length; i++) {
        char old = phrase[i];
        if (islower(old) && next) {
            phrase[i] = Upper(old);
            next = 0;
        }
        else if (!islower(old)) {
            next = 1;
        }
    }
}
",0
joka775,1696844618,2,"void Capitalise(char* phrase) {
    int length = strlen(phrase);
    int next = 1;
    for (int i = 0; i < length; i++) {
        char old = phrase[i];
        if (isalpha(old)) {
            if (next) {
                phrase[i] = toupper(old);
                next = 0;
            }
            else {
                phrase[i] = tolower(old);
            }
        }
        else {
            next = 1;
        }
    }
}",0
joka775,1696844823,3,"void Capitalise(char* phrase) {
    int length = strlen(phrase);
    int next = 1;
    for (int i = 0; i < length; i++) {
        char old = phrase[i];
        if (isalpha(old)) {
            if (next) {
                phrase[i] = toupper(next);
                next = 0;
            }
            else {
                phrase[i] = tolower(old);
            }
        }
        else if (old == ' ' || old == '-') {
            next = 1;
        }
        else {
            next = 0;
        }
    }
}",0
jpar523,1697357628,1,"void Capitalise(char *sentence)
{
   int capital = 1;
   while (*sentence) {
       if (*sentence == ' ') {
           capital = 1;
            } else if (capital && (*sentence >= 'a' && *sentence <= 'z')) {
              *sentence -= 32; 
              capital = 0;
            } else if (!capital && (*sentence >= 'A' && *sentence <= 'Z')) {
                *sentence += 32;
            }
            sentence ++;
               
       }
   }
    ",0
jpar523,1697358397,2,"void Capitalise(char *sentence)
{
   int capital = 1;
   while (*sentence) {
       if (*sentence == ' ') {
           capital = 1;
            } else if (capital && (*sentence >= 'a' && *sentence <= 'z')) {
              *sentence -= 32; 
              capital = 0;
            } else if (capital && (*sentence >= 'A' && *sentence <= 'Z')) {
                capital = 0;
            }
                
            sentence ++;
            }
               
       }",0
jpar523,1697359149,3,"void Capitalise(char *sentence)
{
    int capital = 1;
    int brackets = 0;

    while (*sentence) {
        if (*sentence == '(') {
            brackets = 1;
        }
        else if (*sentence == ')') {
            brackets = 0;
        }
        if (!brackets || brackets) {
            if (*sentence == ' ') {
                capital = 1;
            }
            else if (capital && (*sentence >= 'a' && *sentence <= 'z')) {
                *sentence -= 32;
                capital = 0;
            }
            else if (capital && (*sentence >= 'A' && *sentence <= 'Z')) {
                capital = 0;
            }
        }

        sentence++;
    }
}
   ",0
jpar523,1697400930,4,"void Capitalise(char *str) {
    int i = 0;
    while (str[i] != '\0') {
        if (i == 0 || str[i - 1] == ' ') {
            if (str[i] >= 'a' && str[i] <= 'z') {
                str[i] = str[i] - 32; 
            }
        }
        i++;
    }
}
    ",1
jpar611,1696762867,1,"#include <stdio.h>

// Helper function to convert a character to upper case
char ToUpperCase(char ch) {
    if (ch >= 'a' && ch <= 'z') {
        return ch - ('a' - 'A');
    }
    return ch;
}

void Capitalise(char *phrase) {
    // Capitalise the first character if it's a lowercase letter
    phrase[0] = ToUpperCase(phrase[0]);

    // Iterate through the rest of the string
    for (int i = 1; phrase[i] != '\0'; i++) {
        // If the previous character is a space, and the current character is a lowercase letter
        if (phrase[i - 1] == ' ' && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = ToUpperCase(phrase[i]);
        }
    }
}",1
jpat915,1696716341,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    
    for (i = 0; phrase[i] != '\0'; i++) {
        
            if (i == 0 || phrase[i - 1] == ' ') {
                if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                    phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    }
    
}",1
jpau410,1696328509,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    if(phrase[0] <= 122 && phrase[0] >= 97) {
        phrase[0] = phrase[0] - 32;
    }
    for(int i = 0; i <= length; i++) {
        if (phrase[i] == ' ') {
            if(phrase[i + 1] <= 122 && phrase[i + 1] >= 97) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",1
jpaz106,1696820583,1,"void Capitalise(char *phrase)
{
    int i;
    int wordStart = 1;
    
    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (wordStart) {
                phrase[i] = phrase[i] - ('a' - 'A');
                wordStart = 0;
            }
        } else if (phrase[i] >= 'A' && phrase[i] <= 'Z'){
            if (wordStart) {
                phrase[i];
                wordStart = 0;
            } else {
                phrase[i] = phrase[i] + ('a' - 'A');
            }
        } else {
            wordStart = 1;
        }
        i++;
    }
}",0
jpaz106,1696820746,2,"void Capitalise(char *phrase)
{
    int i = 0;
    int wordStart = 1;
    
    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (wordStart) {
                phrase[i] = phrase[i] - ('a' - 'A');
                wordStart = 0;
            }
        } else if (phrase[i] >= 'A' && phrase[i] <= 'Z'){
            if (wordStart) {
                wordStart = 0;
            } else {
                phrase[i] = phrase[i] + ('a' - 'A');
            }
        } else {
            wordStart = 1;
        }
        i++;
    }
}
",0
jpaz106,1696822653,3,"void Capitalise(char *phrase)
{
     int i = 0;
    int wordStart = 1;
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            wordStart = 1;
        } else if (wordStart) {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                    phrase[i] = phrase[i] - ('a' - 'A');
                    wordStart = 0;
            } else if (phrase[i] >= 'A' && phrase[i] <= 'Z'){
                if (!wordStart) {
                    phrase[i] = phrase[i] + ('a' - 'A');
                }
            } else {
                wordStart = 1;
            }
        } else {
            if (phrase[i] >= 'A' && phrase[i] <= 'Z'){
                phrase[i] = phrase[i] + ('a' - 'A');
            }
        }
        i++;
    }
}
",0
jpaz106,1696823636,4,"void Capitalise(char *phrase)
{
    int i = 0;
    int wordStart = 1;
    
   while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            wordStart = 1;
        } else if (wordStart) {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] -= ('a' - 'A');
            }
            wordStart = 0;
        } else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            phrase[i] += ('a' - 'A');
        }
        i++;
    }
}
",1
jpud993,1696827880,1,"void Capitalise(char* phrase)
{
	int i;

	phrase[0] = phrase[0] - 32;
	
	for (i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}

	return;
}

",0
jpud993,1696828250,2,"void Capitalise(char* phrase)
{
	int i;

	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	for (i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}

	return;
}",1
jros811,1696375873,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0'){
        if (i == 0 || phrase[i-1] == ' '){
            phrase[i] = phrase[i] - 32;
        }
  
        i++;
    }  
}
",0
jros811,1696376449,2,"void Capitalise(char *phrase)
{
  int i = 0;
  while (phrase[i] != '\0'){
      if ((i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z') || (phrase[i-1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z')){
          phrase[i] = phrase[i] - 32;
      }
  
      i++;
  }  
}
",1
jsan813,1696324763,1,"void Capitalise(char* phrase)
{
    int length = 0;
    while (phrase[length] != '\0') {
        length++;
    }

    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - 32;
    }

    for (int i = 0; i < length; i++) {
        if (phrase[i] == 32) {
            if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",1
jsch842,1696754151,1,"void Capitalise(char *phrase)
{
    int newWord = 1;
    for (int i = 0; phrase[i] != '\0'; i++)
    {
     if (phrase[i] >= 'a' && phrase[i] <= 'z')
     {
         if(newWord)
         {
             phrase[i] -= 32;
             newWord = 0;
         }
         else if(phrase[i] == ' ' || (phrase[i] < 'A' || (phrase[i] > 'Z' && phrase[i] < 'a') || phrase[i] > 'z'))
         {
             newWord = 0;
         }
     }
    }
}
",0
jsch842,1696840698,2,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase [i] >= 'a' && phrase[i] <= 'z')
    {
        phrase[i] -= 32;
    }
            while (phrase[i] != '\0')
            {
                if (phrase[i] == ' ')
                {
                    i++;
                    if (phrase[i] >= 'a' && phrase[i] <= 'z')
                    {
                        phrase[i] -= 32;
                    }
                }
                i++
            }
}
    
",0
jsch842,1696840712,3,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase [i] >= 'a' && phrase[i] <= 'z')
    {
        phrase[i] -= 32;
    }
            while (phrase[i] != '\0')
            {
                if (phrase[i] == ' ')
                {
                    i++;
                    if (phrase[i] >= 'a' && phrase[i] <= 'z')
                    {
                        phrase[i] -= 32;
                    }
                }
                i++;
            }
}
    
",1
jshe464,1696827326,1,"void Capitalise(char *phrase)
{
     int a = strlen(phrase);
 int i;
 phrase[0] = 65 + phrase[0] - 97;
 for (i = 0; i < a; i++)
 {
	 if (phrase[i] == ' ')
	 {
		 phrase[i+1] = 65 + phrase[i+1] - 97;
	 }

 }
}
",0
jshe464,1696828113,2,"void Capitalise(char *phrase)
{
     int a = strlen(phrase);
 int i;
 if (int(phrase[0]) > 96 && int(phrase[0] < 122))
 {
	 phrase[0] = 65 + phrase[0] - 97;
 }
 for (i = 0; i < a; i++)
 {
	 if (phrase[i] == ' ')
	 {
		 if (int(phrase[i + 1]) > 96 && int (phrase[i + 1] < 122))
		 {
			  phrase[i + 1] = 65 + phrase[i + 1] - 97;
		 }
	 }

 }
}
",0
jshe464,1696828206,3," int a = strlen(phrase);
 int i;
 if (phrase[0] > 96 && phrase[0] < 122)
 {
	 phrase[0] = 65 + phrase[0] - 97;
 }
 for (i = 0; i < a; i++)
 {
	 if (phrase[i] == ' ')
	 {
		 if (phrase[i + 1] > 96 && phrase[i + 1] < 122)
		 {
			  phrase[i + 1] = 65 + phrase[i + 1] - 97;
		 }
	 }

 }
",0
jshe464,1696828271,4,"void Capitalise(char *phrase)
{
    int a = strlen(phrase);
 int i;
 if (phrase[0] > 96 && phrase[0] < 122)
 {
	 phrase[0] = 65 + phrase[0] - 97;
 }
 for (i = 0; i < a; i++)
 {
	 if (phrase[i] == ' ')
	 {
		 if (phrase[i + 1] > 96 && phrase[i + 1] < 122)
		 {
			  phrase[i + 1] = 65 + phrase[i + 1] - 97;
		 }
	 }

 } 
}
",0
jshe464,1696828319,5,"void Capitalise(char *phrase)
{
    int a = strlen(phrase);
 int i;
 if (phrase[0] > 96 && phrase[0] < 123)
 {
	 phrase[0] = 65 + phrase[0] - 97;
 }
 for (i = 0; i < a; i++)
 {
	 if (phrase[i] == ' ')
	 {
		 if (phrase[i + 1] > 96 && phrase[i + 1] < 123)
		 {
			  phrase[i + 1] = 65 + phrase[i + 1] - 97;
		 }
	 }

 } 
}
",1
jshi444,1696323463,1,"void Capitalise(char* phrase)
{
	int i = 0;
	phrase[0] = phrase[0] - 32;
	for (i = 0; i <= 100; i++) {
		if (phrase[i] == 32) {
			
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",0
jshi444,1696324303,2,"void Capitalise(char* phrase)
{
	int i = 0;
	for (i = 0; i <= 100; i++) {

		if (phrase[i] == 32 && phrase[i + 1] < 123 && phrase[i + 1] > 96) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}

		else if (phrase[0] < 123 && phrase[0] > 96) {
			phrase[0] = phrase[0] - 32;
		}
	}
}",1
jshr431,1696673264,1,"void Capitalise(char* phrase)
{
	phrase[0] = toupper(phrase[0]);

	int i = 1;

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ' || (phrase[i] >= 65 && phrase[i] <= 90) || (phrase[i] >= 97 && phrase[i] <= 122)) {
			i++;
		}

		else {
			phrase[i] = toupper(phrase[i]);
		}
	}
				
}",0
jshr431,1696675144,2,"void Capitalise(char* phrase)
{
	phrase[0] = toupper(phrase[0]);

	int i = 1;

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			i++;
			while (phrase[i] == ' ') {
				i++;
			}

			if ((phrase[i] >= 65 && phrase[i] <= 90) || (phrase[i] >= 97 && phrase[i] <= 122)) {
				phrase[i] = toupper(phrase[i]);
			}
		}
		else {
			i++;
		}
	}
				
}",1
jsim418,1696221962,1,"char UpperCase(char letter)
{
    return (char)((double)letter - 32);
}


void Capitalise(char *phrase)
{
    //printf(""length is %d\n"",(int)strlen(phrase));
    int temp = 1;
    
    for (int i = 0; i<strlen(phrase); i++){
        if ( (double)phrase[i] >= 97 && (double)phrase[i] <= 122 ){ //letter
            if (temp == 1) {
                phrase[i] = UpperCase(phrase[i]);
                temp = 0;
            }
        } else { // spacebar
            temp = 1;
        }
    }
}",0
jsim418,1696222334,2,"#include <stdio.h>
#include <string.h>

char UpperCase(char letter)
{
    return (char)((double)letter - 32);
}


void Capitalise(char *phrase)
{
    //printf(""length is %d\n"",(int)strlen(phrase));
    int temp = 1;
    
    for (int i = 0; i<strlen(phrase); i++){
        if ( (double)phrase[i] >= 97 && (double)phrase[i] <= 122 ){ //letter
            if (temp == 1) {
                phrase[i] = UpperCase(phrase[i]);
                temp = 0;
            }
        } else if ((double)phrase[i] == 32){ // spacebar
            temp = 1;
        } else { //other value
            temp = 0;
        }
    }
}",1
jsim643,1696655487,1,"void Capitalise(char *phrase) {
    int i = 0;
    
    // To flag if the next character in the array needs capitalising 
    int capNext = 1;
    
    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (capNext) {
               phrase[i] -= 32;
               capNext = 0;
            } 
        } else {
            capNext = 1;
        }
        i++;
    }
}",0
jsim643,1696657651,2,"// Helper function to check if a character is a lowercase letter or alpahabetical character 
bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c<= 'z');
}

// Helper function to check if a character is an uppercase letter or alpahabetical character
bool isUppercaseAlphabet(char c) {
    return (c >= 'A' && c<= 'Z');
}

void Capitalise( char *phrase){
    int i = 0;
    bool newString = 1;

    while (phrase[i] != '\0') {
        // Check if the current character is a lower case alphabet letter
        if (isLowercaseAlphabet(phrase[i])) {
            // Capitialise the current character if it's the start of a new word
            if (newString) {
                phrase[i] -= 32;
                newString = false; // Sets the flag to false for the rest of word
            }
        }
        // Check if the first character word is an uppercase letter
        else if (isUppercaseAlphabet(phrase[i])) {
            newString = false; // Sets rest of the word to lowercase 
        }
        // Reset the flag when a non-alphabet is encountered
        else {
            newString = true;
        }
        i++;
    }    
}",0
jsim643,1696722749,3,"void Capitalise(char* phrase)
{
    
    int i = 0;
    int length;
    length = strlen(phrase);
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;
    } 

    for (i = 0; i < length; i++) {
        if (phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] -= 32;
            }
        }
    }
}
",1
jsta466,1696320245,1,"void Capitalise(char *phrase)
{
 int i = 0;
 int Length = strlen(phrase);
 if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 'a' + 'A';
    }
    while (i < Length){
        if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z')
            phrase[i] = phrase[i] - 'a' + 'A';
            i++;
        }
}   ",0
jsta466,1696320609,2,"void Capitalise(char *phrase)
{
 int i = 1;
 int Length = strlen(phrase);
 if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 'a' + 'A';
    }
    while (i < Length){
        if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z'){
            phrase[i] = phrase[i] - 'a' + 'A';
        }
        i++;
    }
}   ",1
jsun284,1696644852,1,"void Capitalise(char *phrase)
{
    if (phrase >= 'a' && phrase <= 'z') {
        return phrase - ('a' - 'A');
    }
    return phrase;
}
",0
jsun284,1696644935,2,"void Capitalise(char *phrase)
{
   bool new_word = true;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            new_word = true;
        } else if (new_word) {
            phrase[i] = to_upper(phrase[i]);
            new_word = false;
        }
    }
}
",0
jsun284,1696644957,3,"void Capitalise(char *phrase)
{
    char to_upper(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - ('a' - 'A');
    }
    return c;
}
   bool new_word = true;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            new_word = true;
        } else if (new_word) {
            phrase[i] = to_upper(phrase[i]);
            new_word = false;
        }
    }
}
",1
jvil318,1696670378,1,"void Capitalise(char *phrase)
{
    int capitalize = 1;  

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            capitalize = 1;
        } else if (capitalize && IsLowerCase(phrase[i])) {
            phrase[i] = ToUpper(phrase[i]);
            capitalize = 0;  
        } else {
            capitalize = 0; 
    }
}
",0
jvil318,1696673446,2,"void Capitalise(char *phrase) {
    int length;
    length = strlen(phrase);
    int capitalisediff = ('a' - 'A');

    // if the very first character is inside the 'a' - 'z' range
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - capitalisediff; // Capitalise by subtracting
    }

    int i = 1;
    while (phrase[i] != '\0') {
        // if theres a space before and also its inside range
        if (phrase[i - 1] == 32 && phrase[i] >= 97 && phrase[i] <= 122) {
            phrase[i] = phrase[i] - capitalisediff; // Capitalise
        }
        i++;
    }
}",0
jvil318,1696673478,3,"void Capitalise(char *phrase) {
    int capitalisediff = ('a' - 'A');

    // if the very first character is inside the 'a' - 'z' range
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - capitalisediff; // Capitalise by subtracting
    }

    int i = 1;
    while (phrase[i] != '\0') {
        // if theres a space before and also its inside range
        if (phrase[i - 1] == 32 && phrase[i] >= 97 && phrase[i] <= 122) {
            phrase[i] = phrase[i] - capitalisediff; // Capitalise
        }
        i++;
    }
}",1
jwed606,1696274001,1,"
void Capitalise(char* phrase)
{
    int len = strlen(phrase);
    
    int capitalise_next = 1;
    for (int i = 0; i < len; ++i)
    {
        if (capitalise_next && phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            phrase[i] = toupper(phrase[i]);
            capitalise_next = 0;
        }
        if (isspace(phrase[i]))
            capitalise_next = 1;
    }
}
",0
jwed606,1696274058,2,"

void Capitalise(char* phrase)
{
    int len = strlen(phrase);
    
    int capitalise_next = 1;
    for (int i = 0; i < len; ++i)
    {
        if (capitalise_next && phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            phrase[i] = toupper(phrase[i]);
            capitalise_next = 0;
        }
        capitalise_next = isspace(phrase[i]);
    }
}
",1
jwil813,1696307339,1,"void Capitalise(char* phrase)
{
	
	int i = 0;

	while (phrase[i] != '\0')
	{
		
		if (i ==0 && phrase[i] >= 97 && phrase[i] <= 122){
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		
		else if (phrase[i - 1] ==32 && phrase[i] >= 97 && phrase[i] <= 122) {

			phrase[i] = phrase[i] - ('a' - 'A');

		}
		i = i + 1;
	}

}
",1
jwon248,1696229206,1,"int StrLen(char *string)
{
    int i = 0;
    while (string[i] != '\0')
    {
        i++;
    }
    return i;
}

void Capitalise(char *phrase)
{
    int currentCh = 0;
    int end = StrLen(phrase) - 1;
    int startOfWord = 1;

    while (currentCh <= end)
    {
        if (phrase[currentCh] >= 'a' && phrase[currentCh] <= 'z' && startOfWord)
        {
            phrase[currentCh] -= 32;
            startOfWord = 0;
        }

        if (phrase[currentCh] == 32)
        {
            startOfWord = 1;
        }

        currentCh++;
    }
}",0
jwon248,1696229450,2,"int StrLen(char *string)
{
    int i = 0;
    while (string[i] != '\0')
    {
        i++;
    }
    return i;
}

void Capitalise(char *phrase)
{
    int currentCh = 0;
    int end = StrLen(phrase) - 1;
    int startOfWord = 1;

    while (currentCh <= end)
    {
        if (phrase[currentCh] >= 'A' && phrase[currentCh] <= 'Z')
        {
            startOfWord = 0;
        }

        if (phrase[currentCh] >= 'a' && phrase[currentCh] <= 'z' && startOfWord)
        {
            phrase[currentCh] -= 32;
            startOfWord = 0;
        }

        if (phrase[currentCh] == 32)
        {
            startOfWord = 1;
        }

        currentCh++;
    }
}
",0
jwon248,1696234289,3,"int StrLen(char *string)
{
    int i = 0;
    while (string[i] != '\0')
    {
        i++;
    }
    return i;
}

void Capitalise(char *phrase)
{
    int currentCh = 0;
    int end = StrLen(phrase) - 1;
    int startOfWord = 1;

    while (currentCh <= end)
    {
        if (phrase[currentCh] >= 'a' && phrase[currentCh] <= 'z' && startOfWord)
        {
            phrase[currentCh] -= 32;
            startOfWord = 0;
        }
        else
        {
            startOfWord = 0;
        }

        if (phrase[currentCh] == 32)
        {
            startOfWord = 1;
        }

        currentCh++;
    }
}",1
jwon253,1696655421,1,"void Capitalise(char *phrase) 
{
    // Assume the input string contains at least one character
    int newWord = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        // If the current character is a space, then the next character starts a new word
        if (phrase[i] == ' ') {
            newWord = 1;
        }
        // If it is the start of a new word and is a lowercase letter, capitalize it
        else if (newWord == 1 && phrase[i] >= 97 && phrase[i] <= 122) {
            phrase[i] = phrase[i] - (32); //Difference between capitalise and non capitalise letter = 32
            newWord = 0;
        }
        // If it is not a space or the start of a new word, then check the other elements in the string
        else {
            newWord = 0;
        }
    }
}",1
jwon323,1696459239,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');        
    }

    for (int i = 0; i < length-1; i++) {
        if (phrase[i] ==' ') {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
        }    
    }
}",0
jwon323,1696459636,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');        
    }

    for (int i = 0; i < length-1; i++) {
        if (phrase[i] ==' ') {
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
                phrase[i+1] = phrase[i+1] - ('a' - 'A');                
            }
        }    
    }
}",1
jyan420,1696288984,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = (char)(phrase[0] - 32);
    }

    for (int i = 0; i < (int)strlen(phrase) - 1; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
                phrase[i + 1] = (char)(phrase[i + 1] - 32);
            }
        }
    }
}",1
jyua529,1696318310,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int i;
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
    phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (i = 0; i < length; i++) {
        if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
            phrase[i + 1] = phrase[i+1] - ('a' - 'A');
            
        }

    }
    
}
",1
jzho786,1696739957,1,"void
Capitalise (char *phrase)
{

  int length = strlen (phrase);
  int i = 0;

  while (i < length)
    {
      if (phrase[i] >= 'a' && phrase[i] <= 'z')
	{
	  phrase[i] -= ('a' - 'A');

	  while (i < length && phrase[i] != ' ')
	    {
	      i++;
	    }
	}

      i++;
    }
}
",0
jzho786,1696740194,2,"void
Capitalise (char *phrase)
{

  int length = strlen (phrase);
  int i = 0;

  while (i < length)
    {
      if (phrase[i] >= 'a' && phrase[i] <= 'z')
	{
	  phrase[i] -= ('a' - 'A');

	  while (i < length && phrase[i] != ' ')
	    {
	      i++;
	    }
	}
      else if (phrase[i] >= 'A' && phrase[i] <= 'Z')
	{
	  while (i < length && phrase[i] != ' ')
	    {
	      i++;
	    }
	}

      i++;
    }
}
",0
jzho786,1696740622,3,"void Capitalize (char *phrase);

 
int
main ()
{
  
char phrase[100] = ""hello my name is"";
  
Capitalize (phrase);
  
printf (""%s"", phrase);
  
 
return 0;

}


 
void
Capitalize (char *phrase)
{
  
int length = strlen (phrase);
  
int i = 0;
  
 
if (phrase[i] >= 'a' && phrase[i] <= 'z')
    {
      
phrase[i] -= ('a' - 'A');
    
}
  
 
while (i < length)
    {
      
if (phrase[i] == ' ')
	{
	  
i++;
	  
if (i < length && phrase[i] >= 'a' && phrase[i] <= 'z')
	    {
	      
phrase[i] -= ('a' - 'A');
	    
}
	
}
      
i++;
    
}

}


",0
jzho786,1696740661,4,"void Capitalize(char *phrase) {
    int length = strlen(phrase);
    int i = 0;

    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[i] -= ('a' - 'A');
    }

    while (i < length) {
        if (phrase[i] == ' ') {
            i++;
            if (i < length && phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] -= ('a' - 'A');
            }
        }
        i++;
    }
}
",0
jzho786,1696740789,5,"void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int i = 0;

    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[i] -= ('a' - 'A');
    }

    while (i < length) {
        if (phrase[i] == ' ') {
            i++;
            if (i < length && phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] -= ('a' - 'A');
            }
        }
        i++;
    }
}
",1
kabb319,1696661405,1,"void Capitalise(char *phrase)
{
        phrase[0] = phrase[0] - 32;
    int i = 1;
    while (phrase[i] != '\0'){
        if (phrase[i] == 32){
            phrase [i + 1] = phrase[i +1] - 32;
        }
        i++;
    }
}
",0
kabb319,1696661769,2,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 97 && phrase[0] <= 122)
    phrase[0] = phrase[0] - 32;
    int i = 1;
    while (phrase[i] != '\0'){
        if (phrase[i] == 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122 ){
            phrase [i + 1] = phrase[i +1] - 32;
        }
        i++;
    }
    
}
",1
kahk161,1696299337,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
	int i;
	for (i = 0; i < length; i++) {
		if ((phrase[i] == ' ') && (phrase[i+1] >= 'a' && phrase[i+1] <= 'z')) {
			phrase[i + 1] = (char)phrase[i + 1] - 32;
		}
		else if ((i == 0) && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
			phrase[i] = (char)phrase[i] - 32;
		}
	}
}
",1
kbar402,1696756858,1,"void Capitalise(char *phrase)
{
    int i;
    int length;
    length = strlen(phrase); 
    
    phrase[0] = phrase[0] - 32;
    
    for (i = 0; i < length; i++) {
        if (phrase[i] == 32) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
        
    }
}
",0
kbar402,1696757464,2,"void Capitalise(char *phrase)
{
    int i, j;
    int length;
    length = strlen(phrase); 
    
    if (phrase[0] > 96 && phrase[0] < 123) {
        phrase[0] = phrase[0] - 32;
    }
    
    for (i = 0; i < length; i++) {
        j = i + 1;
        if (phrase[i] == 32) {
            if (phrase[j] > 96 && phrase[j] < 123) {
            phrase[j] = phrase[j] - 32;
        }
        }
    }

}
",1
kbha969,1696369976,1,"#include <stdio.h>
#include<string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - ('a'-'A');
    }
    for (i = 0; i<length-1; i++) {
        if ( phrase[i] == 32) {
            phrase[i+1] = phrase[i+1] - ('a'-'A');
        }
    }
    
}
",0
kbha969,1696370102,2,"#include <stdio.h>
#include<string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - ('a'-'A');
    }
    for (i = 0; i<length-1; i++) {
        if ( phrase[i] == 32) {
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122) {
                 phrase[i+1] = phrase[i+1] - ('a'-'A');
            }
        }
    }
    
}",1
kcao565,1696800591,1,"void Capitalise(char *phrase)
{
    if (char >= 'a' && char <= 'z') {
        return char - 'a' + 'A';
    }
    return char;
}

void Capitalise(char *str) 
{
    int capitalizeNext = 1; 

    for (int i = 0; str[i] != '\0'; i++) {
        if (capitalizeNext && (str[i] >= 'a' && str[i] <= 'z')) {
            str[i] = ToUpperCase(str[i]);
            capitalizeNext = 0; 
        } else if (str[i] == ' ') {
            capitalizeNext = 1; 
        }
    }
}",0
kcao565,1696800816,2,"void Capitalise(char *phrase)
{
    if (phrase >= 'a' && phrase <= 'z') {
        return phrase - 'a' + 'A';
    }
    return phrase;
}

void Capitalise(char *str) 
{
    int capitalizeNext = 1; 

    for (int i = 0; str[i] != '\0'; i++) {
        if (capitalizeNext && (str[i] >= 'a' && str[i] <= 'z')) {
            str[i] = ToUpperCase(str[i]);
            capitalizeNext = 0; 
        } else if (str[i] == ' ') {
            capitalizeNext = 1; 
        }
    }
}",0
kcao565,1696801869,3,"char ToUpperCase(char *ch) 
{
    if (ch >= 'a' && ch <= 'z') {
        return ch - 'a' + 'A';
    }
    return ch;
}

void Capitalise(char *phrase) 
{
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = ToUpperCase(phrase[i]);
            capitalizeNext = 0;
        }
        else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}",0
kcao565,1696802760,4,"char ToUpperCase(char ch) 
{
    if (ch >= 'a' && ch <= 'z') {
        return ch - 'a' + 'A';
    }
    return ch;
}

void Capitalise(char *phrase) 
{
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = ToUpperCase(phrase[i]);
            capitalizeNext = 0;
        }
        else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}",0
kcao565,1696803056,5,"char UpperCase(char ch)
{
    if (ch >= 'a' && ch <= 'z') {
        return ch - 'a' + 'A';
    }
    return ch;
}

void Capitalise(char *phrase)
{
    int capitaliseNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitaliseNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = UpperCase(phrase[i]);
            capitaliseNext = 0;
        }
        else if (phrase[i] == ' ') {
            capitaliseNext = 1;
        }
        else {
            capitaliseNext = 0;
        }
    }
}",1
kcao657,1696746608,1,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}



	int length = strlen(phrase);
	for (int i = 0; i < length; i++) {
		if (phrase[i] == 32 && phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i + 1] = phrase[i+1] - ('a' - 'A');
		}
	}

}
",0
kcao657,1696746793,2,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}



	int length = strlen(phrase);
	for (int i = 0; i < length; i++) {
		if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
				phrase[i + 1] = phrase[i+1] - ('a' - 'A');
		}
	}

}
",1
kfep063,1696841285,1,"void Capitalise(char *phrase)
{
    
}
int i=0;
    int x[100];
    int x_length = 0;
    int phrase_length = strlen(phrase);
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 32;
    }
    
    while(i < phrase_length) {

        if (phrase[i] == 32) {
            x[x_length] = i + 1;
            x_length = x_length + 1;
        }
        i = i+1;
    }
    int j = 0;
    while(j < x_length) {
        if(phrase[x[j]] >= 97 && phrase[x[j]] <= 122) {
        phrase[x[j]] = phrase[x[j]] - 32;
        
        }
        j = j+1;
    }
    
}",0
kfep063,1696841350,2,"void Capitalise(char *phrase)
{
    
    int i=0;
    int x[100];
    int x_length = 0;
    int phrase_length = strlen(phrase);
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 32;
    }
    
    while(i < phrase_length) {

        if (phrase[i] == 32) {
            x[x_length] = i + 1;
            x_length = x_length + 1;
        }
        i = i+1;
    }
    int j = 0;
    while(j < x_length) {
        if(phrase[x[j]] >= 97 && phrase[x[j]] <= 122) {
        phrase[x[j]] = phrase[x[j]] - 32;
        
        }
        j = j+1;
    }
    
}",1
kfer833,1696733767,1,"#include <stdio.h>

int isLowercase(char c) {
    return c >= 'a' && c <= 'z';
}

char toUpper(char c) {
    if (isLowercase(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalise(char *phrase) {
    int i;
    phrase[0] = toUpper(phrase[0]);

    for (i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ') {
            phrase[i] = toUpper(phrase[i]);
        }
        else {
            phrase[i] = toLower(phrase[i]);
        }
    }
}
",0
kfer833,1696810338,2,"#include <stdio.h>

void Capitalise(char *string) {
    int x;

    for (x = 0; string[x] != '\0'; x++) {
        if (x == 0 && string[0] >= 97) {
            string[0] -= 32;
        } else if (string[x] == ' ' && string[x + 1] >= 97) {
            string[x + 1] = string[x + 1] - 32;
        }
    }
}
",1
kgra470,1696683169,1,"void Capitalise(char *phrase)
{
    int length;
    phrase[0]=(char)(phrase[0]-32);
    int j=0;
    while (phrase[j]!='\0'){
        j++;
    }
    length=j;
    for(int i=0;i<length;i++){
        if (phrase[i]==32){
            phrase[i+1]=(char)(phrase[i+1]-32);
        }
    }

}
",0
kgra470,1696683551,2,"void Capitalise(char *phrase)
{
    int length;
    if(phrase[0]<123&&phrase[0]>96){
        phrase[0]=(char)(phrase[0]-32);
    }
    int j=0;
    while (phrase[j]!='\0'){
        j++;
    }
    length=j;
    for(int i=0;i<length;i++){
        if (phrase[i]==32){
            if(phrase[i+1]<123&&phrase[i+1]>96) {
                phrase[i + 1] = (char) (phrase[i + 1] - 32);
            }
        }
    }

}
",1
khew624,1696653156,1,"#include <stdio.h>
void Capitalise(char *phrase)
{
int x = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && x) {
            phrase[i] -= 32; 
            x = 0; 
        } else if (phrase[i] == ' ') {
            x = 1; 
        } else {
            x = 0; 
        }
    }
}
",1
kjoe685,1696689368,1,"void Capitalise(char* phrase)
{
	int i;
	for (i = 0; phrase[i] != '\0'; i++) {
		if (
			(phrase[i] == ' ') &&
			((phrase[i+1] >= 97) && (phrase[i+1] <= 122))
			) {
			phrase[i + 1] = phrase[i + 1] - (97-65);
		}
	}
	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - (97 - 65);
	}
}",1
kjun638,1696691064,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int UpperCase = 1; 

    for (int i = 0; phrase[i] != 0; i++) {
        if (phrase[i] == ' ') {
            UpperCase = 1;
        }
        else if (UpperCase && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - 32;
            UpperCase = 0;
        }
    }
}
",0
kjun638,1696691340,2,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int UpperCase = 1; 

    for (int i = 0; phrase[i] != 0; i++) {
        if (phrase[i] == ' ') {
            UpperCase = 1;
        }
        else if (UpperCase && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - 32;
            UpperCase = 0;
        }

        else {
            UpperCase = 0;
        }
    }
}",1
kkha484,1696729007,1,"void Capitalise(char *phrase)
{ 
    int WordPosition = 1;
    
    for(int i = 0; phrase[i] != '\0'; i++){
        if(phrase[i] == ' '){
            WordPosition = 1;
        }
        
        else if (WordPosition == 1){
            phrase[i] = toupper(phrase[i]);
            WordPosition = 0;
        }
        
        else (WordPosition == 0){
            phrase[i] = tolower(phrase[i]);
        }
        
    }
}",0
kkha484,1696729037,2,"void Capitalise(char *phrase)
{ 
    int WordPosition = 1;
    
    for(int i = 0; phrase[i] != '\0'; i++){
        if(phrase[i] == ' '){
            WordPosition = 1;
        }
        
        else if (WordPosition){
            phrase[i] = toupper(phrase[i]);
            WordPosition = 0;
        }
        
        else (WordPosition){
            phrase[i] = tolower(phrase[i]);
        }
        
    }
}",0
kkha484,1696755704,3,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int WordPosition = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            WordPosition = 1;
        }
        else if (WordPosition) {
            phrase[i] = toupper(phrase[i]);
            WordPosition = 0;
        }
        else { // Change 'else (WordPosition)' to 'else'
            phrase[i] = tolower(phrase[i]);
        }
    }
}",1
kkim985,1696386602,1,"void Capitalise(char* phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] == 32) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		else if (i == 0) {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}
}",0
kkim985,1696386922,2,"void Capitalise(char* phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] == 32) {
			if ((phrase[i + 1] >= 'a') && (phrase[i + 1] <= 'z')) {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
		else if (i == 0) {
			if ((phrase[i] >= 'a') && (phrase[i] <= 'z')) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		i++;
	}
}",1
klam376,1696456730,1,"void Capitalise(char *phrase)
{
    int i = 0;
    phrase[0] = phrase[0] - 32;
    while(phrase[i] != '\0')    {
        if (phrase[i] == ' ')   {
            phrase[i+1] = phrase[i+1] - 32;
        }
        i++;
    }
}",0
klam376,1696466640,2,"void Capitalise(char *phrase)
{
    int i = 0;
    if ((phrase[i]>=97) && (phrase[i]<=122))    {
    phrase[0] = phrase[0] - 32;
    }

    while(phrase[i] != '\0')    {
        if ((phrase[i] == ' ') && (phrase[i+1]>=97) && (phrase[i+1]<=122))   {
            phrase[i+1] = phrase[i+1] - 32;
        }
        i++;
    }
}",1
kluc619,1696768525,1,"void Capitalise(char *phrase)
{
    // Capitalize the first character of the phrase
    phrase[0] = toupper(phrase[0]);

    // Loop through the phrase and capitalize the first character of each word
    for (int i = 1; phrase[i] != '\0'; i++) {
        // If the current character is a space, capitalize the next character
        if (phrase[i - 1] == ' ' && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
        }
        // If the current character is not a space, convert to lowercase
        else {
            phrase[i] = tolower(phrase[i]);
        }
    }
}
",0
kluc619,1696768576,2,"void Capitalise(char *phrase)
{
    // Capitalize the first character of the phrase
    phrase[0] = toupper(phrase[0]);

    // Loop through the phrase and capitalize the first character of each word
    for (int i = 1; phrase[i] != '\0'; i++) {
        // If the current character is a space, capitalize the next character
        if (phrase[i - 1] == ' ' && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
        }

    }
}
",1
kmag441,1696751774,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while(phrase[i] != '\0'){
        if(phrase[i] >= 'a' && phrase[i] <= 'z'){
            phrase[i] = phrase[i] - ('a'-'A');
        }
        i++;
    }
    
}
",0
kmag441,1696754468,2,"#include <stdio.h>
void Capitalise(char *phrase)
{
    int i = 0;
   while(phrase[i] != '\0'){
       if(phrase[i] = ' '){
           phrase[i] = phrase[i - 1];
           phrase[i -1] = phrase[i] - ('a' - 'A');
       }
       i++;
   }
}",0
kmag441,1696756264,3,"#include <stdio.h>
void Capitalise(char *phrase)
{
    int i = 0;
        for(i = 0; phrase[i] >= ' ' && phrase[i] <= 'z' && phrase[i] != '\0'; i++){
       if(phrase[i - 1] == ' ' || i == 0){
           phrase[i] = phrase[i] - ('a' - 'A');
       }
        
   }
}",0
kmag441,1696757584,4,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i = 0;
        for(i = 0; phrase[i] != '\0'; i++){
            if(phrase[i] >= 'a' && phrase[i] <= 'z' || phrase[i] == ' ' ){
       if(phrase[i - 1] == ' ' || i == 0 ){
           phrase[i] = phrase[i] - ('a' - 'A');
       }
            }
        
   }
}",0
kmag441,1696758284,5,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i = 0;
        for(i = 0; phrase[i] != '\0'; i++){
            if((phrase[i] >= 'a' && phrase[i] <= 'z') || phrase[i] == ' ' ){
       if(phrase[i - 1] == ' ' || i == 0 ){
           phrase[i] = phrase[i] - ('a' - 'A');
       }
            }
        
   }
}

",1
kmal768,1696385582,1,"void Capitalise(char *phrase)
{
	int i, length;

	length = strlen(phrase);
	for (i = 0; i < length; i++) {
		if (i == 0) {
			if (phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i] = phrase[i] - 32;
			}
		}
		if (phrase[i] == 32) {
			if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
				phrase[i+1] = phrase[i+1] - 32;
			}
		}

	}
}",1
kmck133,1696675658,1,"void Capitalise(char* phrase) {
	int firstCheck = 1;
	for (int i = 0; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			firstCheck = 1;
			continue;
		}
		if (firstCheck == 1) {
			firstCheck = 0;
				if (phrase[i] > 96 && phrase[i] < 123) {
					phrase[i] = phrase[i] - ('a' - 'A');
				}
		}
	}
}",1
kmcv530,1696395103,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase) -1;
    int i;
    for (i = 0; i <= length; i++) {
     if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32 || i == 0) {
        phrase[i] = phrase[i] - 32;
     }
    }
}
",0
kmcv530,1696395356,2,"void Capitalise(char *phrase)
{
    int i;
    while (phrase[i] != '\0') {
     if ((phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32) || i == 0) {
        phrase[i] = phrase[i] - 32;
     }
     i++;
    }
}",0
kmcv530,1696395515,3,"void Capitalise(char *phrase)
{
    int i;
    while (phrase[i] != '\0') {
     if ((phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32) || (i == 0 && phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32)) {
        phrase[i] = phrase[i] - 32;
     }
     i++;
    }
}",0
kmcv530,1696395724,4,"void Capitalise(char *phrase)
{
    int i;
    while (phrase[i] != '\0') {
     if ((phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32) || (i == 0 && phrase[i] >= 97 && phrase[i] <= 122)) {
        phrase[i] = phrase[i] - 32;
     }
     i++;
    }
}",0
kmcv530,1696746639,5,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i = 0;
    int length = strlen(phrase);
    while (i < length && phrase[i] != '\0') {
     if ((phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32) || (i == 0 && phrase[i] >= 97 && phrase[i] <= 122)) {
        phrase[i] = phrase[i] - 32;
     }
     i++;
    }
}",1
kng361,1696834055,1,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase){
    int capitaliseNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++){
        if (isspace(phrase[i])){
            capitaliseNext = 1;
        } else if (islower(phrase[i]) && capitaliseNext) {
            phrase[i] = toupper(phrase[i]);
            capitaliseNext = 0;
        } else {
            capitaliseNext = 0;
        }
    }
}",1
kpat303,1696236381,1,"#include <stdio.h>
#include <stdbool.h>

bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUppercase(char c) {
    if (isLowercaseAlphabet(c)) {
        return c - ('a' - 'A');
    } else {
        return c;
    }
}


void Capitalise(char *phrase) {
    bool newWord = true; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && newWord) {
            phrase[i] = toUppercase(phrase[i]);
            newWord = false; 
        } else if (phrase[i] == ' ') {
            newWord = true; 
        }
    }
}",0
kpat303,1696236458,2,"#include <stdio.h>

int isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int shouldCapitalize = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && shouldCapitalize) {
            phrase[i] = phrase[i] - 'a' + 'A'; 
            shouldCapitalize = 0;
        } else if (phrase[i] == ' ') {
            shouldCapitalize = 1;
        }
    }
}",0
kpat303,1696238054,3,"#include <stdio.h>
#include <ctype.h>

char toUpper(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 'a' + 'A';
    } else {
        return c;
    }
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; 
    for (int i = 0; phrase[i] != '\0'; i++) {
        char currentChar = phrase[i];

        if (isalpha(currentChar)) {
           
            if (capitalizeNext) {
                phrase[i] = toUpper(currentChar);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(currentChar);
            }
        } else {
           
            capitalizeNext = 1;
        }
    }
}",0
kpat303,1696238129,4,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int shouldCapitalize = 1; // Flag to determine whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        char currentChar = phrase[i];

        if (isalpha(currentChar)) {
            // If the current character is alphabetic, capitalize it if needed
            if (shouldCapitalize) {
                phrase[i] = toupper(currentChar);
                shouldCapitalize = 0;
            } else {
                phrase[i] = tolower(currentChar);
            }
        } else {
            // If the current character is not alphabetic, reset the flag
            shouldCapitalize = 1;
        }
    }
}",0
kpat303,1696238296,5,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int shouldCapitalize = 1; // Flag to determine whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        char currentChar = phrase[i];

        if (isalpha(currentChar)) {
            // If the current character is alphabetic, capitalize it if needed
            if (shouldCapitalize) {
                phrase[i] = toupper(currentChar);
                shouldCapitalize = 0;
            } else {
                phrase[i] = tolower(currentChar);
            }
        } else {
            // If the current character is not alphabetic, preserve its case and reset the flag
            shouldCapitalize = isspace(currentChar);
        }
    }
}",1
kpau893,1696328749,1,"#include <stdio.h>

void Capitalise(char *phrase)

    
{   
    
    int i = 0;
    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[i] = phrase[i] - ('a' - 'A'); // == to 32, makes it readable
       
    }
    
   for(i = 0; phrase[i] != '\0'; i++){
   
        if ((phrase[i -1] == ' ') && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
        phrase[i] = phrase[i] - ('a' - 'A'); // == to 32, makes it readable
        
        i++;
        }

}

}",1
kpay633,1696303364,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    for (int i = 0; i < length; i++) {
	    if (phrase[i] == ' ') {
	    	if (phrase[i + 1] >= 91 && phrase[i + 1] <= 122) {
		    	phrase[i + 1] = phrase[i + 1] - 32;
	    	}
	    }
}
    if (phrase[0] >= 91 && phrase[0] <= 122) {
    	phrase[0] = phrase[0] - 32;
    }
}
",1
kpir468,1696827192,1,"void Capitalise(char *phrase)

{
    
    
    
    int i = 0;
    while (phrase[i] != '\0') {

        if (i == 0 || phrase[i - 1] == ' ') {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                phrase[i] = phrase[i] - 32;

            }

        }
        i++;

    }
}",1
kpla566,1696472689,1,"void Capitalise(char *phrase) {
 phrase[0] = phrase[0] - 32;
  int length = (int)strlen(phrase);
  for (int i = 0; i < length; i++) {
    if (phrase[i] == ' ') {
      phrase[i + 1] = phrase[i + 1] - 32;
    }
  }
}",0
kpla566,1696473405,2,"char upperHelper(char letter){
  if (letter >= 97)
    letter = letter -32;
  return letter;

}

void Capitalise(char *phrase) {
 phrase[0] = upperHelper(phrase[0]);
  int length = (int)strlen(phrase);
  for (int i = 0; i < length; i++) {
    
    if (phrase[i] == ' ') {
      phrase[i+1] = upperHelper(phrase[i + 1]);
      
      
    }
  }
}",1
kqua446,1696758424,1,"void Capitalise(char *phrase)
{
    int i;

    for (i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ' && phrase[i + 1] != '\0') {
            phrase[i + 1] -= 32;
        } else if (i == 0 && phrase[i] != ' ') {
            phrase[i] -= 32;
        }
    }
}
",0
kqua446,1696758591,2,"void Capitalise(char *phrase)
{
    int i;

    for (i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ' && phrase[i + 1] != '\0' && phrase[i + 1] > 90) {
            phrase[i + 1] -= 32;
        } else if (i == 0 && phrase[i] != ' ' && phrase[i] > 90) {
            phrase[i] -= 32;
        }
    }
}
",1
kraj720,1696738322,1,"void Capitalise(char *phrase)
{
    int i = 0;

    while (phrase[i] != '\0') 
    {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') 
        {
            if (i == 0 || phrase[i - 1] == ' ') 
            {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        
        i++;
    }
}",1
kraw552,1696578118,1,"void Capitalise(char *phrase)
{
    
}


#include <stdio.h>
#include <string.h>

int isLowerCase(char c) 
{
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) 
{
    int length = strlen(phrase);
    int CapitalizeNext = 1; 

    for (int i = 0; i < length; i++) {
        if (isLowerCase(phrase[i])) {
            if (CapitalizeNext) {
                phrase[i] -= 32; 
                CapitalizeNext = 0; 
            }
        } else {
            CapitalizeNext = 1; 
        }
    }
}

",0
kraw552,1696578258,2,"
#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)

{
    int LowerCase = (*phrase >= 'a' && *phrase <= 'z');
    int length = strlen(*phrase);
    int CapitalizeNext = 1; 

    for (int i = 0; i < length; i++) 
    {
        if (LowerCase(*phrase[i])) 
        {
            if (CapitalizeNext) 
            {
                phrase[i] -= 32; 
                CapitalizeNext = 0; 
            }
        } else 
        {
            CapitalizeNext = 1; 
        }
    }
}

",0
krec980,1696300469,1,"void Capitalise(char* phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (phrase[i - 1] == ' ') {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		
		}
		if (phrase[0] >= 'a' && phrase[0] <= 'z') {
			phrase[0] = phrase[0] - ('a' - 'A');
		}
		i++;
	}
}",1
ksai757,1696730540,1,"void Capitalise(char *phrase)
{
    int capitalizeNext = 1; // Flag indicates if next character should be capitalized or not.

    while (*phrase) {
        if (*phrase >= 'a' && *phrase <= 'z' && capitalizeNext) {
            *phrase = *phrase - 32; // Convert to uppercase character.
            capitalizeNext = 0; // Deactivate flag.
        }
        else if (*phrase == ' ' || *phrase == '\t' || *phrase == '\n') {
            capitalizeNext = 1; // Activate flag for  next word
        }
        else {
            capitalizeNext = 0; // Turn off the flag for subsequent characters
        }

        phrase++;
    }
}
",1
ksik996,1696300038,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    if (phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    } 

    for(int i = 0; i < length; i++)
    {
        if (phrase[i] == 32)
            if (phrase[i+1] >= 97)
            {
                phrase[i+1] = phrase[i+1] - 32; 
            }
    }
    
}
",1
kwan244,1696742135,1,"void Capitalise(char* word)
{
	int i = 0;

	if (word[i] >= 'a') {
		word[i] = word[i] - ('a' - 'A');
		i++;
	}

	while (word[i] != '\0')
	{
		if (word[i] >= 'a' && word[i - 1] == ' ')
		{
			word[i] = word[i] - ('a' - 'A');
		}
		i++;
	}
}",1
kwan797,1696296179,1,"void Capitalise(char *phrase)
{
    int length = 0;
	while (phrase[length] != '\0') {
		length++;
	}
	
    for (int i = 0; i < length; i++) {
        if (phrase[0]<='z' && phrase[0]>='a'){
            phrase[0] = phrase[0]-('a'-'A');
        }
        if (phrase[i-1] == ' ' && phrase[i]<='z' && phrase[i]>='a'){
            phrase[i] = phrase[i]-('a'-'A');
        }
    } 
}
",1
kyoo839,1696656773,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    phrase[0] = phrase[0] - ('a' - 'A');
    
    int i;
    for (i = 1; i < length; i++) {
        if (phrase[i] == 32) {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }

}",0
kyoo839,1696657028,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    if (phrase[0] >= 97) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    int i;
    for (i = 1; i < length; i++) {
        if ((phrase[i] == 32) && (phrase[i + 1] >= 97)) {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }

}",1
kzhu796,1696237159,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
	phrase[0] = phrase[0] - ('a' - 'A');
}
}
",0
kzhu796,1696238432,2,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (i==0 || phrase[i - 1] == ' ') {
			phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		i++;
	}
}
",1
laba812,1696761563,1,"char Capitals(char capletter) { 

       if (capletter >= 'a' && capletter<= 'z'){
        return capletter - ('a' - 'A');
       }
return capletter;
}


void Capitalise(char *phrase){

int length = strlen(phrase);

phrase[0] =  Capitals(phrase[0]);


    for (int i = 0 ; i<length ; i++){

    if (phrase[i] == ' '){
        i++;
        phrase[i] = Capitals(phrase[i]);
    }

    }

}",1
lazz729,1696326645,1,"void Capitalise(char *phrase)
{
    if (phrase[0] <= 122 && phrase[0] >= 97) {
        phrase[0] = phrase[0] - 32;
    }
    for (int i = 1; i < strlen(phrase); i++) {
        if (phrase[i - 1] == 32 && phrase[i] <= 122 && phrase[i] >= 97) {
            phrase[i] = phrase[i] - 32;
        }
    }
}",1
lbla772,1696818241,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) 
{
    if (phrase[0] >= 97 && phrase[0] <= 122) {
         phrase[0] = phrase[0] - 32;
    }

    int len = strlen(phrase);
    for( int i = 0; i < len ; i++ )
    {
        if (phrase[i] == ' ' )
        { 
            if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122)    
            {
            phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
    }
}",1
lbou433,1696372160,1,"void Capitalise(char *phrase)
{
    int L, i, index;
    index = 0;
    L = strlen(phrase);
    for (i = 0; i < L; i++) {
    	
    	if (index == 0) {
    		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
    			phrase[i] = phrase[i] - ('a' - 'A');
    			index = 1;
    			continue;
    		}
    	}
    	else if (index == 1) {
    		if (phrase[i] == 32) {
    			index = 0;
    			continue;
    		}
    	}
    }
}
",0
lbou433,1696372298,2,"void Capitalise(char *phrase)
{
	int L, i, index;
	index = 0;
	L = strlen(phrase);
	for (i = 0; i < L; i++) {
		
		if (index == 0) {
			if (phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i] = phrase[i] - ('a' - 'A');
				index = 1;
				continue;
			}
			else if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
				index = 1;
				continue;
			}
		}
		else if (index == 1) {
			if (phrase[i] == 32) {
				index = 0;
				continue;
			}
		}
	}
}
",0
lbou433,1696376447,3,"void Capitalise(char *phrase)
{
	int L, i, index;
	index = 0;
	L = strlen(phrase);
	for (i = 0; i < L; i++) {
		
		if (index == 0) {
			if (phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i] = phrase[i] - ('a' - 'A');
				index = 1;
				continue;
			}
			else if (phrase[i]!= 32) {
				index = 1;
				continue;
			}
		}
		else if (index == 1) {
			if (phrase[i] == 32) {
				index = 0;
				continue;
			}
		}
	}
}
",1
lbyr117,1696393967,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i;
    int n=strlen(phrase);
    
    for(i=0;i<n;i++)
    {
        if(phrase[i]==' ' && phrase[i+1]>90)
        {
            phrase[i+1]=phrase[i+1]-32;  
        }
    }
    if(phrase[0]>90)
    {
        phrase[0]=phrase[0]-32;
    }
}",1
lcam453,1696830306,1,"#include <stdio.h>

void Capitalise(char phrase[]) {
    int i;
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 32;
    }

    for (i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - 32;
        } else {
        }
    }
}  ",1
lcan243,1696844160,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    
    if (*phrase >= 97 && *phrase <= 122) { 
        *phrase = *phrase - 32;  
    }

    
    for (int i = 1; i < length; i++) {
        if (*(phrase + i - 1) == ' ' && (*(phrase + i) >= 97 && *(phrase + i) <= 122)) {
            *(phrase + i) = *(phrase + i) - 32; 
        }
    }
}
",1
lche668,1696835942,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
// capitalising first letter of each word in a phrase
// find space then determine whether or not the letter after is a letter or not
void Capitalise(char* phrase)
{
	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}
	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] == ' ' && phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}
	return;
}",1
lchu848,1696677328,1,"void Capitalise(char *phrase)
{
  int length = strlen(phrase)
 int capital = 1;
 for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capital) {
            phrase[i] = toupper(phrase[i]); 
            capital = 0; 
        } else if (isspace(phrase[i])) {
            capitalizeNext = 1; 
        }
    }

    
}
",0
lchu848,1696677493,2,"void Capitalise(char *phrase)
{
int length = strlen(phrase);
int cap = 1;
for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && cap) {
            phrase[i] = toupper(phrase[i]); 
            cap = 0; 
        } else if (isspace(phrase[i])) {
            cap = 1; 
        }
    }

    
}
",0
lchu848,1696720060,3,"void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int cap = 1;

    for (int i = 0; i < length; i++) {
        if (isupper(phrase[i])){
        cap = 0;
        } else if (phrase[i] >= 'a' && phrase[i] <= 'z' && cap) {
            phrase[i] = toupper(phrase[i]);
            cap = 0;
        } else if (isspace(phrase[i])) {
            cap = 1;
        }
    }
}",0
lchu848,1696722556,4,"void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int cap = 1;
if (!isalpha(phrase[0])){
            cap = 0;}
    for (int i = 0; i < length; i++) {
        if (isupper(phrase[i])){
        cap = 0;
            
        } else if (phrase[i] >= 'a' && phrase[i] <= 'z' && cap) {
            phrase[i] = toupper(phrase[i]);
            cap = 0;
        } else if (isspace(phrase[i])) {
            cap = 1;
        }
    }
}",1
ldam917,1696762268,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    int firstletter=1;
    for (int i=0;phrase[i]!='\0';i++)
    {
        {
            if (firstletter==1)
            {
                if ((phrase[i]>='a')&&(phrase[i]<='z')) 
                {
                      phrase[i]=phrase[i]-32;
                      firstletter=0;
                }
            }
            else if (phrase[i]==' ')
            {
                firstletter=1;
            }
            else
            {
                phrase[i]=phrase[i];
                firstletter=0;
            }
        }
    }
}",0
ldam917,1696763484,2,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    int firstletter=1;
    for (int i=0;phrase[i]!='\0';i++)
    {
        {
            if ((phrase[i]>='a')&&(phrase[i]<='z'))
            {
                if (firstletter==1)
                {
                      phrase[i]=phrase[i]-32;
                      firstletter=0;
                }
            }
            else if (phrase[i]==' ')
            {
                firstletter=1;
            }
            else 
            {
                firstletter=0;
            }
        }
    }
}",1
ldea753,1696669642,1,"void Capitalise(char *phrase)
{
    if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
        phrase[0] -= 'a' - 'A';
    }

    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i] == 32) {
            if ((phrase[i + 1] >= 'a') && (phrase[i + 1] <= 'z')) {
                phrase[i + 1] -= 'a' - 'A';
            }
        }
    }
}
",1
ldou101,1696289025,1,"void Capitalise(char *phrase)
{
    for (int i=0; i<strlen(phrase); i++){
    if (i==0||phrase[i-1]==' '){
        if (phrase[i]>='a'&&phrase[i]<='z'){
            phrase[i]=phrase[i]-32;
        }
    }
}
}",1
lfan827,1696807632,1,"void Capitalise(char *phrase)
{
    int i = 0;
    phrase[0] = phrase[0] - 32;
    while (phrase[i] != '\0'){
        i++;
        if (phrase[i] == ' '){
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}
",0
lfan827,1696808198,2,"void Capitalise(char *phrase)
{
    int i = 1;
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - 32;
    }
    while (phrase[i] != '\0'){
        i++;
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z'){
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}
",0
lfan827,1696808260,3,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - 32;
    }
    while (phrase[i] != '\0'){
        i++;
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z'){
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}
",1
lgan833,1696459603,1,"void Capitalise(char* phrase)
{
	int i = 0;
	if (phrase[0] <= 122 && phrase[0] >= 97) {
		phrase[0] = phrase[0] - 32;
	}

	for (i = 1; phrase[i] != '\0';i++) {
		
		if (phrase[i - 1] == ' ') {
			if (phrase[i] <= 122 && phrase[i] >= 97) {
				phrase[i] = phrase[i] - 32;
			}
		}
	}
}
",1
lhal844,1696649047,1,"void Capitalise(char* phrase)
{
	if (phrase[0] > 96 && phrase[0] < 123)
	{
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	for (int i = 1;i < strlen(phrase);i++)
	{
		if (phrase[i] > 96 && phrase[i] < 123)
		{
			if (phrase[i - 1] == ' ')
			{
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
	}
}
",1
lhua313,1696834585,1,"int isLowercaseAlphabet(char c) 
    {
    return (c >= 'a' && c <= 'z');
    }

void Capitalise(char* phrase) 
{
    int capitalizeNext = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (isLowercaseAlphabet(phrase[i])) 
        {
            if (capitalizeNext) 
            {
                phrase[i] -= ('a' - 'A'); 
                capitalizeNext = 0; 
            }
        } else 
        
        {
            capitalizeNext = 1; 
        }
    }
}",0
lhua313,1696835031,2,"int IsLowerCaseAlphabet(char c) 
{
    return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}

void Capitalise(char* phrase) 
{
    int CapitaliseNext = 1; 
    
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (IsLowerCaseAlphabet(phrase[i])) 
        {
            if (CapitaliseNext) 
            {
                if (phrase[i] >= 'a' && phrase[i] <= 'z') 
                {
                    phrase[i] -= ('a' - 'A'); 
                }
                CapitaliseNext = 0; 
            } else 
            
            {
                if (phrase[i] >= 'A' && phrase[i] <= 'Z') 
                {
                    phrase[i] += ('a' - 'A'); 
                }
            }
        } else 
        
        {
            CapitaliseNext = 1; 
        }
    }
}",0
ljer106,1696735169,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    char temp, final;
    int x = strlen(phrase);
    
    for (int i = 0; i < x; i++) {
        if (i == 0) {
            temp = phrase[i];
            final = temp - 32;
            phrase[i] = final; } 
            
        else if (phrase[i - 1] == ' ') {
            temp = phrase[i];
            final = temp - 32;
            phrase[i] = final; }
    }
}",0
ljer106,1696735498,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    char temp, final;
    int x = strlen(phrase);
    
    for (int i = 0; i < x; i++) {
        if (i == 0) {
            if (phrase[i] >= 65 && phrase[i] <= 90) {
                break; }
            else {
                temp = phrase[i];
                final = temp - 32;
                phrase[i] = final; } 
        }
        else if (phrase[i - 1] == ' ') {
            if (phrase[i] >= 65 && phrase[i] <= 90) {
                break; }
            else {
                temp = phrase[i];
                final = temp - 32;
                phrase[i] = final; }
        }
    }
}",0
ljer106,1696735571,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    char temp, final;
    int x = strlen(phrase);
    
    for (int i = 0; i < x; i++) {
        if (i == 0) {
            if (phrase[i] >= 65 && phrase[i] <= 90) {
                continue; }
            else {
                temp = phrase[i];
                final = temp - 32;
                phrase[i] = final; } 
        }
        else if (phrase[i - 1] == ' ') {
            if (phrase[i] >= 65 && phrase[i] <= 90) {
                continue; }
            else {
                temp = phrase[i];
                final = temp - 32;
                phrase[i] = final; }
        }
    }
}",0
ljer106,1696735805,4,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    char temp, final;
    int x = strlen(phrase);
    
    for (int i = 0; i < x; i++) {
        if (i == 0) {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                temp = phrase[i];
                final = temp - 32;
                phrase[i] = final; }
            else {
                continue; }
        }
        else if (phrase[i - 1] == ' ') {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                temp = phrase[i];
                final = temp - 32;
                phrase[i] = final; }
            else {
                continue; }
        }
    }
}",1
ljon623,1696671678,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
	int flag = 1;
	
	for(int i = 0; i <= length; i++){
	
		if (flag == 1) {
			flag = 0;
			if (phrase[i] >= 97 && phrase[i] <= 122) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		
		if (phrase[i] == 32){
			flag = 1;
		}
	
	
	
	}
}
",1
ljun123,1696838479,1,"void Capitalise(char *phrase)
{
    int capitalise;
    int i;
    
    capitalise = 1; 

    for (i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitalise) {
            phrase[i] = toupper(phrase[i]);
            capitalise = 0; 
        }
        else if (!isalpha(phrase[i])) {
            capitalise = 1; 
        }
    }
}
",0
ljun123,1696838947,2,"void Capitalise(char *phrase)
{
    int capitalise;
    int i;
    
    capitalise = 1; 

    for (i = 0; phrase[i] != '\0'; i++) {
        if (capitalise && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
            capitalise = 0; 
        }
        else if (ispunct(phrase[i]) || isspace(phrase[i])) {
            capitalise = 1; 
        }
        else {
            capitalise = 0;
        }
    }
}
",0
ljun123,1696839575,3,"void Capitalise(char *phrase)
{
    int capitalise;
    int i;
    
    capitalise = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isspace(phrase[i])) {
            capitalise = 1; 
        }
        else if (capitalise && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
            capitalise = 0; 
        }
        else if (!islower(phrase[i])) {
            capitalise = 0; 
        }
    }
}
",0
ljun123,1696839584,4,"void Capitalise(char *phrase)
{
    int capitalise;
    int i;
    
    capitalise = 1; 

    for (i = 0; phrase[i] != '\0'; i++) {
        if (isspace(phrase[i])) {
            capitalise = 1; 
        }
        else if (capitalise && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
            capitalise = 0; 
        }
        else if (!islower(phrase[i])) {
            capitalise = 0; 
        }
    }
}
",1
lkel942,1696451874,1,"void Capitalise(char* phrase)
{
	int length = 0;

	while (phrase[length] != '\0') {
		length++;
	}
	
	for (int i = 0; i < length; i++) {
		if ((phrase[i] >= 97 && phrase[i] <= 122) && (i == 0 || phrase[i - 1] == ' ')) {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
	}
}",1
llat663,1696829755,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);

	if (length > 0 && phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 0; i < length; i++) {
		if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",1
llei074,1696717523,1,"void Capitalise(char *phrase)
{
    int i = 0;
    
    phrase[0] = phrase[0] - 32;
    
    while (i <= strlen(phrase)) {
        if (phrase[i] == 32) {
            phrase[i+1] = phrase[i+1] -32;
            
        }
        i++;
    }
}",0
llei074,1696717791,2,"void Capitalise(char *phrase)
{
    int i = 0;
    
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
    phrase[0] = phrase[0] - 32;
    }
    
    while (i <= strlen(phrase)) {
        if (phrase[i] == 32) {
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
                phrase[i+1] = phrase[i+1] -32;
            }
            
        }
        i++;
    }
}",1
lli393,1696299629,1,"void Capitalise(char *phrase)
{
	int i;

    for (i = 0; phrase[i] != '\0'; i++){
		if (phrase[i - 1] == ' '||i - 1 == -1){
			if (phrase[i] >= 'a' && phrase[i] <= 'z'){
				phrase[i] = phrase[i] - ('a'-'A');
			}
		}
	}
}",1
llia622,1696780002,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0') {
        if (i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ( 'a' - 'A');
        } else if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        } 
        i++;
    }
    
}",1
llig859,1696659942,1,"void Capitalise(char *phrase)
{
    int i;
    int length=strlen(phrase);

    for (i=0; i<length;i++){
        if (phrase[i]>97 && phrase[i]<122){
        if (i==0){

            phrase[i]=phrase[i]-32;
        }
        }
        if (phrase[i]==32){
            if (i+1 != 32){
                 if (phrase[i+1]>97 && phrase[i+1]<122){
                phrase[i+1]=phrase[i+1]-32;
                 }
            }
        }
    }    
}
 

",0
llig859,1696660071,2,"void Capitalise(char *phrase)
{
    int i;
    int length=strlen(phrase);

    for (i=0; i<length;i++){
        if (phrase[i]>=97 && phrase[i]<=122){
        if (i==0){

            phrase[i]=phrase[i]-32;
        }
        }
        if (phrase[i]==32){
            if (i+1 != 32){
                 if (phrase[i+1]>=97 && phrase[i+1]<=122){
                phrase[i+1]=phrase[i+1]-32;
                 }
            }
        }
    }    
}


",1
lliu182,1696675350,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
int ascii = phrase[0];
char ch;
if ((ascii > 96) && (ascii < 123)) {
	ascii = ascii - 32;
	ch = ascii;
	phrase[0] = ch;
}
for (int i = 1; i < length; i++) {
	if (phrase[i] == ' ') {
		ascii = phrase[i + 1];
		if ((ascii > 96) && (ascii < 123)) {
			ascii = ascii - 32;
			ch = ascii;
			phrase[i + 1] = ch;
		}

	}
}
}
",1
lliu848,1696752748,1,"void Capitalise(char* phrase)
{ 
	int length = strlen(phrase);
	int i = 0;

	for (i = 0; i < length; i++) {
		//if there is a space and isn't at the end of the phrase...
		if (phrase[i] == ' ' && i + 1 < length) {
			// ...then check if it's a  lowercase letter...
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				//... and if it is, subtract 32 to convert to uppercase. 
				phrase[i + 1] = phrase[i + 1] - 32; 
			}
		}
	}

}
",0
lliu848,1696752911,2,"void Capitalise(char* phrase)
{ 
	int length = strlen(phrase);
	int i = 0;

	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	for (i = 0; i < length; i++) {
		//if there is a space and isn't at the end of the phrase...
		if (phrase[i] == ' ' && i + 1 < length) {
			// ...then check if it's a  lowercase letter...
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				//... and if it is, subtract 32 to convert to uppercase. 
				phrase[i + 1] = phrase[i + 1] - 32; 
			}
		}
	}

}",1
llu744,1696744675,1,"void Capitalise(char *phrase) 
{
    int length = strlen(phrase);
    int i = 0;
    
    phrase[0] -= 32;

    for (; i < length; i++) {
        if (phrase[i] == ' ') {
            phrase[i + 1] -= 32;
        }
    }
}",0
llu744,1696745228,2,"void Capitalise(char *phrase) 
{
    int length = strlen(phrase);
    int i = 0;

    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] -= 32;
    }

    for (; i < length; i++) {
        if (phrase[i] == ' ') {
            if (i + 1 < length && phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
                phrase[i + 1] -= 32;
            }
        }
    }
}",1
lmen032,1696848671,1,"void Capitalize(char phrase[]) {
    int capitalizeNext = 1;
    int i
    
    for (i = 0; phrase[i]; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitalizeNext) {
            phrase[i] -= 32;
            capitalizeNext = 0;
        } else {
            capitalizeNext = (phrase[i] == ' ');
        }
    }
}",0
lmen032,1696848776,2,"void Capitalise(char *phrase) {
    int NextCap = 1;

    for (int i = 0; phrase[i]; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && NextCap) {
            phrase[i] -= 32; 
            NextCap = 0;
        } else {
            NextCap = (phrase[i] == ' ');
        }
    }
}",1
lmor438,1696226578,1,"//AUTHOR:Lukem
#include <stdio.h>
#include <string.h>


void Capitalise(char *phrase){
    
    int StringLength=strlen(phrase);
    int i;
    
    phrase[0]=phrase[0]-32;
    
    for(i=0;i<StringLength-1;i++){
        
        if(phrase[i]==32){
            
            phrase[i+1]=phrase[i+1]-32;
            
        }
        
    }
    

}
",0
lmor438,1696226843,2,"//AUTHOR:Lukem
#include <stdio.h>
#include <string.h>


void Capitalise(char *phrase){
    
    int StringLength=strlen(phrase);
    int i;
    
    if(phrase[0]>96){

    phrase[0]=phrase[0]-32;
    
    }
    
    for(i=0;i<StringLength-1;i++){
        
        if(phrase[i]==32 && phrase[i+1]>96){
            
            phrase[i+1]=phrase[i+1]-32;
            
        }
        
    }
    

}
",1
lpry623,1696215020,1,"void Capitalise(char *phrase)
{
    for (int i = 0; phrase[i] != '\0'; i++) {
        if((phrase[i] >= 'a' && phrase[i] <= 'z') && next) {
            phrase[i] -= ('a' - 'A');
            next = 0;
        }
        else if (phrase[i] == ' ') {
            next = 1;
        }
        else {
            next = 0;
        }
    }
}
",0
lpry623,1696215037,2,"void Capitalise(char *phrase)
{
    int next = 1;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if((phrase[i] >= 'a' && phrase[i] <= 'z') && next) {
            phrase[i] -= ('a' - 'A');
            next = 0;
        }
        else if (phrase[i] == ' ') {
            next = 1;
        }
        else {
            next = 0;
        }
    }
}
",1
lrei069,1696462673,1,"void Capitalise(char *phrase)
{
   for (int i = 0; i < strlen(phrase); i++) {
       if (phrase[i] >= 97 && phrase[i] <= 122 && (i == 0 || phrase[i - 1] == ' ')) {
           phrase[i] = phrase[i] - 32;
       }
   } 
}
",1
lros711,1696299120,1,"void Capitalise(char *phrase)
{
	int length;
	int i;

	length = strlen(phrase);
	
	phrase[0] = phrase[0] - 32;

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}

}",0
lros711,1696299137,2,"void Capitalise(char *phrase)
{
	int i;
	
	phrase[0] = phrase[0] - 32;

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}

}",0
lros711,1696323365,3,"void Capitalise(char *phrase)
{
    int i;
	
	if (phrase[0] <= 'z' && phrase[0] >= 'a') {
		phrase[0] = phrase[0] - 32;
	}

	while (phrase[i] != '\0') {
		if (phrase[i-1] == ' ' && phrase[i]<='z' && phrase[i] >= 'a') {
			phrase[i] = phrase[i] - 32;
		}
		i++;
	}
}
",0
lros711,1696324117,4,"void Capitalise(char *phrase)
{
    int i;
	int l;
	
	l = 0;
	
	while (phrase[l] != '\0'){
	    l++;
	}
	
	if (phrase[0] <= 'z' && phrase[0] >= 'a') {
		phrase[0] = phrase[0] - 32;
	}

	for (i=0; i<l; i++) {
		if (phrase[i-1] == ' ' && phrase[i]<='z' && phrase[i] >= 'a') {
			phrase[i] = phrase[i] - 32;
		}
	}
}
",1
lrya284,1696377259,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i<length; i++) {
        
        if ((phrase[i] == 32) && ((phrase[i+1]>96) && (phrase[i+1]<123)) {
            phrase[i+1] = phrase[i+1] - (('a' - 'A');
            
        }
    }
}
",0
lrya284,1696377290,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i<length; i++) {
        
        if ((phrase[i] == 32) && ((phrase[i+1]>96) && (phrase[i+1]<123))) {
            phrase[i+1] = phrase[i+1] - (('a' - 'A');
            
        }
    }
}
",0
lrya284,1696377379,3,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i<length; i++) {
        
        if ((i == 0 || (phrase[i] == 32)) && ((phrase[i+1]>96) && (phrase[i+1]<123))) {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
            
        }
    }
}
",0
lrya284,1696377485,4,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i<length; i++) {
        
        if ((i == 0 || (phrase[i-1] == 32)) && ((phrase[i]>96) && (phrase[i]<123))) {
            phrase[i] = phrase[i] - ('a' - 'A');
            
        }
    }
}
",1
lsal082,1696809035,1,"int isLowerCase(char phrase){
    return (phrase >= 'a' && phrase <= 'z');
}

char toUpperCase(char phrase){
    if(isLowerCase(phrase)){
        return phrase - ('a' - 'A');
    }
    return phrase;
}

void Capitalise (char *phrase){
    phrase[0] = toUpperCase(phrase[0]);
    
    for (int i = 1; phrase[i] != '\0'; i++){
        if (phrase[i - 1] == ' '){
            phrase[i] = toUpperCase(phrase[i]);
        }
    }
}
",1
lsen376,1696373718,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase) - 1;

	for (int i = 0; i < length; i++) {
		if (i == 0) {
			phrase[i] = phrase[i] - 32;
		}
		else if ((phrase[i] >= 97) && (phrase[i] <= 122) && (phrase[i - 1] == 32)) {
			phrase[i] = phrase[i] - 32;
		}
	}
}",0
lsen376,1696373794,2,"void Capitalise(char* phrase)
{
	int length = strlen(phrase) - 1;

	for (int i = 0; i < length; i++) {
		if ((i == 0) && (phrase[i] >= 97) && (phrase[i] <= 122)) {
			phrase[i] = phrase[i] - 32;
		}
		else if ((phrase[i] >= 97) && (phrase[i] <= 122) && (phrase[i - 1] == 32)) {
			phrase[i] = phrase[i] - 32;
		}
	}
}",0
lsen376,1696376234,3,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);

	for (int i = 0; i < length; i++) {
		if ((phrase[i] >= 97) && (phrase[i] <= 122) && (i == 0))  {
			phrase[i] = phrase[i] - 32;
		}
		else if ((phrase[i] >= 97) && (phrase[i] <= 122) && (phrase[i - 1] == 32)) {
			phrase[i] = phrase[i] - 32;
		}
	}
}",1
lsha172,1696844731,1,"void Capitalise(char *phrase)
{
    int nextCapital = 1;
    int i;
    
    for (i = 0; phrase[i]; i++) {
        if (phrase[i] == ' ') {
            nextCapital = 1;
        } else if (nextCapital && 'a' <= phrase[i] && phrase[i] <= 'z') {
            phrase[i] -=('a' - 'A');
            nextCapital = 0;
        }
    }
    
}
",0
lsha172,1696845851,2,"void Capitalise(char *phrase)
{
    int nextCapital = 1;
    int i;
    
    for (i = 0; phrase[i]; i++) {
        if (phrase[i] == ' ') {
            nextCapital = 1;
        } else if (nextCapital && ('a' <= phrase[i] && phrase[i] <= 'z')) {
            phrase[i] -=('a' - 'A');
            nextCapital = 0;
        } else {
            nextCapital = 0;
        }
    }
    
}
",1
lspu128,1696672442,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    int i = 0;
    int capitalise_next = 1;

    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (capitalise_next) {
                phrase[i] = phrase[i] - 32;
                capitalise_next = 0;
            } 
        } 
        else {
            capitalise_next = 1;
        }
        
        i++;
    }
}",0
lspu128,1696672910,2,"#include <stdio.h>

void Capitalise(char *phrase) {
    int i = 0;
    int capitalise_next = 1;

    while (phrase[i] != '\0') {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') || (phrase[i] >= 'A' && phrase[i] <= 'Z')) {
            if (capitalise_next) {
                
                if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                    phrase[i] = phrase[i] - 32;
                }
                capitalise_next = 0;
            } else {
                
                if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
                    phrase[i] += 32;
                }
            }
        } else {
            
            capitalise_next = 1;
        }
        
        i++;
    }
}",0
lspu128,1696673305,3,"#include <stdio.h>

void Capitalise(char *phrase) {
    int i = 0;
    int capitalise_next = 1;

    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            
            capitalise_next = 1;
        } else if (capitalise_next) {
            
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - 32;
            }
            
            capitalise_next = 0;
        }
        
        i++;
    }
}",1
lsu376,1696309140,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
	int i = 0;
	int length = strlen(phrase);

    phrase[0]=phrase[0] - ('a' - 'A');
  
    for (i = 1; i < length; i++) {
        if (phrase[i] == ' ' || phrase[i] == '\0') {
            i++;

            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    }
}
",0
lsu376,1696309287,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
	int i = 0;
	int length = strlen(phrase);

    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
   
    for (i = 1; i < length; i++) {
        if (phrase[i] == ' ' || phrase[i] == '\0') {
            i++;

            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    }
}",1
lsua311,1696817641,1,"#include <stdio.h>

char toUpperCase(char ch) {
    if (ch >= 'a' && ch <= 'z') {
        return ch - ('a' - 'A');
    } else {
        return ch;
    }
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}",0
lsua311,1696818121,2,"#include <stdio.h>

void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}
",0
lsua311,1696818128,3,"#include <stdio.h>


char toUpperCase(char ch) {
    if (ch >= 'a' && ch <= 'z') {
        return ch - ('a' - 'A');
    } else {
        return ch;
    }
}


void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}
",0
lsua311,1696819100,4,"#include <stdio.h>


char toUpperCase(char ch) {
    if (ch >= 'a' && ch <= 'z') {
        return ch - ('a' - 'A');
    } else {
        return ch;
    }
}


void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        } else {
            capitalizeNext = 0;
        }
    }
}

",1
ltan813,1696843732,1,"void Capitalise(char *phrase) {
    int i = 0;
    int count = 1;

    while (phrase[i] != '\0') {
        char current = phrase[i];

        if  current >= 97 && current <= 122) {
            if (count) {
                phrase[i] = current - 32;
                count = 0;
            }
        } else if  current == ' ') {
            count = 1;
        }
        i++;
    }
}
",0
ltan813,1696843884,2,"void Capitalise(char *phrase) {
    int i = 0;
    int count = 1;
    while (phrase[i] != '\0') {
        char current = phrase[i];
        if (current >= 97 && current <= 122) {
            if (count) {
                phrase[i] = current - 32;
                count = 0;
            }
        } else if (current == ' ') {
            count = 1;
        }
        
        i++;
    }
}
",0
ltan813,1696844639,3,"void Capitalise(char *phrase) {
    int i = 0;
    int count = 1;
    int Lower = 0;
    
    while (phrase[i] != '\0') {
        char current = phrase[i];
        
        if (current >= 97 && current <= 122) {
            if (count) {
                if (Lower) {
                    phrase[i] = current - 32;
                }
                count = 0;
            }
            Lower = 1; 
        } else if (current == ' ') {
            count = 1;
            Lower = 0; 
        }
        
        i++;
    }
}
",0
ltan813,1696844742,4,"#include <stdio.h>
#include <ctype.h>  // for islower(), isspace(), and toupper()

void Capitalise(char *phrase) {
    int isNewWord = 1;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (islower(phrase[i]) && isNewWord) {
            phrase[i] = toupper(phrase[i]);
            isNewWord = 0;
        } else if (isspace(phrase[i])) {
            isNewWord = 1;
        }
    }
}",0
ltan813,1696845551,5,"#include <stdio.h>

void Capitalise(char *phrase) {
    int i = 0;
    int capitalizeNext = 1; 

    while (phrase[i] != '\0') {
        char currentChar = phrase[i];

        
        if (currentChar >= 'a' && currentChar <= 'z') {
            
            if (capitalizeNext) {
                phrase[i] = currentChar - ('a' - 'A');
                capitalizeNext = 0; 
            }
        } else if (currentChar == ' ') {
            capitalizeNext = 1; 
        } else {
            capitalizeNext = 0; 
        }

        i++;
    }
}
",1
lvan346,1696679744,1,"void Capitalise(char* phrase)
{
	//get the length
	int length = 0;
	while (phrase[length] != '\0') {
		length++;
	}

	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}


	for (int i = 0; i < length; i++) {

		if (phrase[i] == 32) {

			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');

			}
		}
	}

}",1
lvin900,1696748330,1,"void Capitalise(char *phrase)
{
   int ascii;
int i;
char bruh;
int stronk = strlen(phrase);

for (i = 0; i < stronk; i++) {
	if (i == 0 || phrase[i-1] == ' ') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			ascii = (int)phrase[i];
			ascii = ascii - 32;
			bruh = (char)ascii;
			phrase[i] = bruh;
		}
	}
} 
}
",1
lwer802,1696844526,1,"#include <stdio.h>

char ToUpper(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 32;
    }
    return c;
}

void Capitalise(char *phrase) {
    int startOfWord = 1; // To treat the first character as start of a word
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (startOfWord && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpper(phrase[i]);
            startOfWord = 0;
        } else if (phrase[i] == ' ') {
            startOfWord = 1;
        } else {
            startOfWord = 0;
        }
    }
}

int main() {
    char phrase1[100] = ""god of nations at thy feet"";
    Capitalise(phrase1);
    printf(""%s\n"", phrase1);  // Expected output: God Of Nations At Thy Feet
    
    char phrase2[100] = ""zzzzz"";
    Capitalise(phrase2);
    printf(""%s\n"", phrase2);  // Expected output: Zzzzz

    return 0;
}
",0
lwer802,1696844548,2,"char ToUpper(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - 32;
    }
    return c;
}

void Capitalise(char *phrase) {
    int startOfWord = 1; // To treat the first character as start of a word
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (startOfWord && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpper(phrase[i]);
            startOfWord = 0;
        } else if (phrase[i] == ' ') {
            startOfWord = 1;
        } else {
            startOfWord = 0;
        }
    }
}
",1
lwon290,1696643750,1,"void Capitalise(char *phrase)
{
    phrase[0] -= 32;
    
    for (int i = 1; i < strlen(phrase); i++) {
        if (phrase[i] == ' '){
            phrase[i + 1] -= 32;
        }
    }
}
",0
lwon290,1696646694,2,"void Capitalise(char *phrase)
{
    if (97 < phrase[0] && 122 >= phrase[0]) {
        phrase[0] -= 32;
    }
    
    for (int i = 1; i < strlen(phrase); i++) {
        if (phrase[i] == ' ' && 97 <= phrase[i + 1] && 122 >= phrase[i + 1]) {
            phrase[i + 1] -= 32;
        }
    }
}",1
lyou975,1696378030,1,"void Capitalise(char *phrase)
{
        int length = strlen(phrase);

    for (int i = 0; i < length; i++) {

        if ( i == 0 && phrase[i] >= 97 && phrase[i] <= 122 ) {

        phrase[i] = phrase[i] - 32;

        }
        else if (phrase[i] == 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {

            phrase[i + 1] = phrase[i + 1] - 32;
        }

    }
    
}
",1
mabb997,1696215213,1,"void Capitalise(char* phrase)
{
	int length, i;
	length = strlen(phrase);

	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - 32;
	}

		for (i = 0; i <= length; i++) {
			if ((phrase[i] >= 97) && (phrase[i] <= 122) && (phrase[i - 1] == 32)) {
				phrase[i] = phrase[i] - 32;

			}
		}
}
",1
mahu925,1696214656,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i,length = 0;
    length = strlen(phrase);
    if (phrase[0] >= 97 && phrase[0] <= 122){
        phrase[0] = phrase[0]-32;
    }
    for(i=1;i<=length;i++){
        if(phrase[i-1] == 32 && (phrase[i] >= 97 && phrase[i] <= 122)) {
            phrase[i] = phrase[i]-32;
        }
    }
}",1
mala824,1696734217,1,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int i;

    phrase[0] = toupper(phrase[0]);

    for(i = 1; i < len; i++) {
        if (phrase[i-1] == ' ' && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
        }
    }

    return phrase;
}
    
}",0
mala824,1696734310,2,"void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int i;

    phrase[0] = toupper(phrase[0]);

    for(i = 1; i < len; i++) {
        if (phrase[i-1] == ' ' && islower(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
        }
    }
}
",1
mbah279,1696751406,1,"void Capitalise(char *phrase) {
    int capitalisationL = 1; 

    while (*phrase) {
        if (isLowerCase(*phrase)) {
            *phrase = toUpperCase(*phrase);
        }
        
        capitalisationL = (*phrase == ' ');

        phrase++;
    }
}",0
mbah279,1696751597,2,"void Capitalise(char *phrase) {
    int i = 0;
    int x = 1; 

    while (phrase[i]) {
        if (isalpha(phrase[i])) {
            if (x) {
                phrase[i] = toupper(phrase[i]); 
                x = 0; 
            } else {
                phrase[i] = tolower(phrase[i]); 
            }
        } else {
            x = 1; 
        }

        i++;
    }
}",0
mbal759,1696303244,1,"void Capitalise(char *phrase)
{
    if (phrase[0] <= 122 && phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    }
    int i;
    for (i = 0; i <= strlen(phrase); i++)
    {
        if (phrase[i] == 32)
        {
            if (phrase[i+1] <= 122 && phrase[i+1] >= 97);
            {
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }
}",0
mbal759,1696303873,2,"void Capitalise(char *phrase)
{
    if (phrase[0] <= 122 && phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    }
    int i;
    for (i = 0; i <= strlen(phrase); i++)
    {
        if (phrase[i] == 32 && phrase[i+1] <= 122 && phrase[i+1] >= 97)
        {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",1
mboy221,1696208705,1,"void Capitalise(char *phrase)
{
    int len = 0;
    while (phrase[len] != '\0') {
        len++;
    }
    if (len == 0) {
        return;
    }
    if (!(phrase[0] < 97)) {
        phrase[0] = phrase[0] - ('a'-'A');
    }
    for (int i = 0; i<len; i++) {
        if ((phrase[i]==32)&& (phrase[i+1] > 96)) {
            phrase[i+1] = phrase[i+1] - ('a'-'A');
        }
    }
}
",1
mbut885,1696624826,1,"void Capitalise(char *phrase)
{
    int i = 0;

    while (phrase[i] != '\0') {
        if (phrase[i] >= 97 && phrase[i] <= 122) {
            if (i == 0) {
                phrase[i] = phrase[i] - 32;
            }
            else if (phrase[i-1] == ' ') {
                phrase[i] = phrase[i] - 32;
            }
        }
        i++;
    }

    return;
}
",1
mcam799,1696684593,1,"void Capitalise(char *phrase)
{
    int i = 0;

while (phrase[i] != '\0') {
	if (('a' <= phrase[i]) && (phrase[i] <= 'z') && ((i == 0) || (phrase[i - 1] == ' '))) {
		phrase[i] = phrase[i] - ('a' - 'A');
	}
	i++;
}

}
",1
mcha833,1696579949,1,"#include <stdlib.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i,length;
    
    length = strlen(phrase);
    for(i = 0; i < length;i++){
        if(i == 0){
            phrase[i] = (phrase[i] - ('a'-'A'));
        }
        if(phrase[i] == ' '){
            phrase[i+1] = (phrase[i+1] - ('a'-'A'));
        }
    }
}",0
mcha833,1696581071,2,"#include <stdlib.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i,length;
    
    length = strlen(phrase);
    for(i = 0; i < length;i++){
        if (phrase[i] >= 97 && phrase[i] <= 122 || phrase[i] == ' '){
            if(i == 0){
                phrase[i] = (phrase[i] - ('a'-'A'));
            }
            if(phrase[i] == ' ' && phrase[i+1] >= 97 && phrase[i+1] <= 122){
                phrase[i+1] = (phrase[i+1] - ('a'-'A'));
            }
        }
    }
}",0
mcha833,1696581420,3,"#include <stdlib.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i,length;
    
    length = strlen(phrase);
    for(i = 0; i < length;i++){
        if (phrase[i] >= 97 && phrase[i] <= 122){
            if(i == 0){
                phrase[i] = (phrase[i] - ('a'-'A'));
            }
        }
        if(phrase[i] == ' '){
            if(phrase[i+1] >= 97 && phrase[i+1] <= 122){
                phrase[i+1] = (phrase[i+1] - ('a'-'A'));
            }
        }
    }
}",1
mcha876,1696848218,1,"char upperCase(char letter) {
    if (letter >= 'a' && letter <= 'z') {
        return (letter - ('a' - 'A'));
    } 
    else {
        return letter;
    }
}

void Capitalise(char *phrase) {
    phrase[0] = upperCase(phrase[0]);
    
    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ' && i <= 92);
        phrase[i] = upperCase(phrase[i]);
    }
}",0
mcha876,1696848630,2,"char upperCase(char letter) {
    if (letter >= 'a' && letter <= 'z') {
        return (letter - ('a' - 'A'));
    } 
    else {
        return letter;
    }
}

void Capitalise(char *phrase) {
    phrase[0] = upperCase(phrase[0]);
    
    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i + 1] == ' ' && upperCase(phrase[i + 1]));
        phrase[i + 1] = upperCase(phrase[i + 1]);
    }
}
",0
mcha876,1696848838,3,"char upperCase(char letter) {
    if (letter >= 'a' && letter <= 'z') {
        return (letter - ('a' - 'A'));
    } 
    else {
        return letter;
    }
}

void Capitalise(char *phrase) {
    phrase[0] = upperCase(phrase[0]);
    
    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ' && isalpha(phrase[i + 1])) {
            phrase[i + 1] = upperCase(phrase[i + 1]);
        }
    }
}",1
mche403,1696663807,1,"void Capitalise(char *phrase)
{ int capitalize = 1;

    for (; *phrase != '\0'; phrase++) {
        if (isLowerCase(*phrase) && capitalize) {
            *phrase = *phrase - 'a' + 'A';
            capitalize = 0;
        } else if (!isLowerCase(*phrase)) {
            capitalize = 1;
        }
    }
    
}
",0
mche403,1696663877,2,"void Capitalise(char *phrase) {
    int capitalize = 1; 
    while (*phrase != '\0') {
        if (isLowerCase(*phrase)) {
            if (capitalize) {
                *phrase = *phrase - 'a' + 'A'; 
                capitalize = 0; 
            }
        } else {
            capitalize = 1; 
        }

        phrase++;
    }
}",0
mche403,1696665144,3,"void Capitalise(char *phrase) {
   phrase[0] = toUpper(phrase[0]);


    for (int i = 1; phrase[i] != '\0'; i++) {
   
        if (phrase[i - 1] == ' ') {
            phrase[i] = toUpper(phrase[i]);
        }
    }
}
",0
mche403,1696665305,4,"void Capitalise(char *phrase)
{ if (*phrase >= 'a' && *phrase <= 'z') {
        *phrase -= ('a' - 'A');
    }
    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] -= ('a' - 'A');
        }
    }
}
",1
mcro807,1696769760,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 97 && phrase[0] <= 122){
    phrase[0] = phrase[0] - 32;
}

int length = strlen(phrase);
 for(int i = 1; i < length; i++) {
    if(phrase[i] == ' '){
        if(phrase[i] >= 97 && phrase[i] <= 122){
         phrase[i+1] = phrase[i+1] - 32;
         
    }
 }  
}
}
",0
mcro807,1696769904,2,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 97 && phrase[0] <= 122){
    phrase[0] = phrase[0] - 32;
}

int length = strlen(phrase);
 for(int i = 1; i < length - 1; i++) {
    if(phrase[i] == ' '){
        if(phrase[i+1] >= 97 && phrase[i] <= 122){
         phrase[i+1] = phrase[i+1] - 32;
         
    }
 }  
}
}
",1
mdav506,1696239219,1,"void Capitalise(char* phrase)
{
	int i = 0;
	// Lower case 'a' has the ASCII code 97.  
	// Lower case 'z' has the ASCII code 122.  
	// Upper case 'A' has the ASCII code 65.  
	// Upper case 'Z' has the ASCII code 90

	if (phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - 32;
	}

	for (i = 1; i < strlen(phrase); i++) {
		if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - 32;
		}
	}
}",1
mdea492,1696728708,1,"void Capitalise(char *phrase){
    if (phrase[0] >= 97 && phrase[0] <= 122){
    phrase[0] = phrase[0]-32;
    }
    
    for (int i=0; phrase[i]!=0; i++){
        if (phrase[i] == 32){
            int x = i+1;
            if (phrase[x] >= 97 && phrase[x] <= 122){
            phrase[x] = phrase[x] - 32;
        }
    }
    }
}
",1
mfle888,1696843161,1,"void Capitalise(char *phrase) {

int i;

if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 32;
}

for (i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - 32;
        }
    }
}
",1
mfuj750,1696555586,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
	phrase[0] = phrase[0] - ('a' - 'A');

	for (int i = 1; i < length; i++) {
		if ((phrase[i] == 32) && ((phrase[i + 1] >= 97) && (phrase[i + 1] <= 122))) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
	}
}
",0
mfuj750,1696555709,2,"void Capitalise(char *phrase)
{
	int length = strlen(phrase);
	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	for (int i = 1; i < length; i++) {
		if ((phrase[i] == 32) && ((phrase[i + 1] >= 97) && (phrase[i + 1] <= 122))) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
	}
}
",1
mger154,1696224425,1,"void Capitalise(char *phrase)
{
    int i;
    int length = 0;

    while (phrase[length] != '\0') {
        length++;
    }

    for (i = 0; i < length; i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32) {
            phrase[i] = phrase[i] - 32;
        }
    }
   if (phrase[0] >= 97 && phrase[i] <= 122) {
    phrase[0] = phrase[0] - 32;
   }
}
",1
mgoy303,1696245997,1,"#include <ctype.h>

void Capitalise(char *phrase)
{
    char* spaceLocation;
    int i = 0;
    while (i != -1) {
        if (phrase[i] != ' ') {
            phrase[i] = toupper(phrase[i]);
        }

        spaceLocation = strstr(phrase + i, "" "");
        if (spaceLocation != NULL) {
            i = spaceLocation - phrase + 1;
        } else {
            i = -1;
        }
    }
}",1
mgua740,1696794139,1,"void Capitalise(char *phrase)
{
    int capitalizeNext = 1; 

   for (int i = 0; phrase[i] != '\0'; i++)
   {
    if (phrase[i] >= 'a' && phrase[i] <= 'z') 
    {
        if ( capitalizeNext == 1)
        {
            phrase[i] = phrase[i] - ('a'-'A');
            capitalizeNext = 0; 
        }
    }
    else {
       
        capitalizeNext = 1;
    }
    }
    
}
",0
mgua740,1696801945,2,"void Capitalise(char *phrase)
{
    int capitalizeNext = 0;
    int i = 0;

    if ((phrase[0] >= 'a' && phrase[0] <= 'z')){
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    while  (phrase[i] != '\0') {
    if (phrase[i] == 32) {
        if (phrase[i+1] >= 'A' && phrase[i+1] <= 'Z') {
            i++;
            continue;
        }
        if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }

    }
    i++;
}
    
}
",0
mgua740,1696802072,3,"void Capitalise(char *phrase)
{
    int capitalizeNext = 0;
    int i = 0;

    if ((phrase[0] >= 'a' && phrase[0] <= 'z')){
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    while  (phrase[i] != '\0') {
    if (phrase[i] == 32) {
        if (phrase[i+1] >= 'A' && phrase[i+1] <= 'Z') {
            i++;
            continue;
        }
        if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }

    }
    i++;
}
    
    
}
",0
mgua740,1696802168,4,"void Capitalise(char *phrase)
{
    
    int i = 0;

    if ((phrase[0] >= 'a' && phrase[0] <= 'z')){
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    while  (phrase[i] != '\0') {
    if (phrase[i] == 32) {
        if (phrase[i+1] >= 'A' && phrase[i+1] <= 'Z') {
            i++;
            continue;
        }
        if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }

    }
    i++;
}
    
    
}
",1
mhua821,1696747257,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    int i = 1;
    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (phrase[i-1] == ' ') {
            phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}",1
mjun868,1696735468,1,"void Capitalise(char *phrase){
int phrase_length = strlen(phrase);
for (int i = 0; i < phrase_length; i++){
    if (phrase[i-1] == ' '){
        phrase[i] = phrase[i] - 32;
    }
}
phrase[0] = phrase[0] - 32;
}",0
mjun868,1696736074,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <stdlib.h>


void Capitalise(char *phrase){
int phrase_length = strlen(phrase);
for (int i = 0; i < phrase_length; i++){
    if (phrase[i-1] == ' '){
        if (phrase[i] <= 122 && phrase[i] >= 97){
        phrase[i] = phrase[i] - 32;
        }
    
     }
    if (phrase[0] <= 122 && phrase[0] >= 97)
    phrase[0] = phrase[0] - 32;

}
}",1
mkab524,1696761043,1,"void Capitalise(char* phrase)
{
	int i = 1;

	phrase[0] = phrase[0] - ('a' - 'A');

	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i-1] == ' ') {			
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}
}",0
mkab524,1696761386,2,"void Capitalise(char* phrase)
{
	int i = 1;
	
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i-1] == ' ') {			
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}
}",1
mkaj411,1696300481,1,"void Capitalise(char* phrase)
{
	int i;
	int length; 
	length = strlen(phrase); 
    
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32; 
	}
	
	for (i = 0; i < length; i++) {
		if (phrase[i - 1] == ' ') {
			if (phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i] = phrase[i] - 32;
			}
		}
	} 

}
",1
mkee115,1696302937,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase) - 1;
    
    phrase[0] = phrase[0] - 32;
    
    for(i=1; i<length; i++)
    {
        if (phrase[i-1] == 32)
        phrase[i] = phrase[i] - 32;
    }
}",0
mkee115,1696303187,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase) - 1;
    
    if ((phrase[0] > 96) && (phrase[0] < 123))
    {
        phrase[0] = phrase[0] - 32;
    }
    
    for(i=1; i<length; i++)
    {
        if ((phrase[i-1] == 32) && (phrase[i-1]>96) && (phrase[i-1]<123))
        phrase[i] = phrase[i] - 32;
    }
}",0
mkee115,1696303280,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase) - 1;
    
    if ((phrase[0] > 96) && (phrase[0] < 123))
    {
        phrase[0] = phrase[0] - 32;
    }
    
    for(i=1; i<length; i++)
    {
        if ((phrase[i-1] == 32) && (phrase[i]>96) && (phrase[i]<123))
        phrase[i] = phrase[i] - 32;
    }
}",1
mken566,1696460207,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int length;
    while (phrase[i] != '\0')
    {
        i++;
    }
    length = i;
    
    phrase[0] = phrase[0] - ('a' - 'A');
    
    for (int j = 0; j < length; j++)
    {
        if (phrase[j] == ' ')
        {
            phrase[j + 1] = phrase[j + 1] - ('a' - 'A');
        }
    }
}
",0
mken566,1696460528,2,"void Capitalise(char *phrase)
{
    int i = 0;
    int length;
    while (phrase[i] != '\0')
    {
        i++;
    }
    length = i;
    
    if (phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (int j = 0; j < length; j++)
    {
        if (phrase[j] == ' ' && phrase[j + 1] >= 97)
        {
            phrase[j + 1] = phrase[j + 1] - ('a' - 'A');
        }
    }
}
",1
mket106,1696838591,1,"void Capitalise(char *phrase) {
    for (int i = 0; i < strlen(phrase); i++) {
        if (i == 0 && phrase[i] > 96) {
            phrase[i] = phrase[i] - 32;
        }
        else if (phrase[i-1] == 32 && phrase[i] > 96) {
            phrase[i] = phrase[i] - 32;
        }
    }
}
",1
mkim670,1696598324,1,"void Capitalise(char* phrase)
{
	int i = 0;

	phrase[0] = phrase[0] - 32;

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}
}",0
mkim670,1696598870,2,"void Capitalise(char* phrase)
{
	int i = 0;

	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - 32;
	}

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			if ((phrase[i + 1] >= 97) && (phrase[i + 1] <= 122)) {
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
		i++;
	}
}",1
mkim719,1696634432,1,"#include <string.h>
#include <ctype.h>

void Capitalise(char *phrase)
{

    int length = strlen(phrase);
    
    for (int i=0 ; i<length ; i++)
    {
        if (i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z' )
            phrase[i] = phrase[i]-32;
    
        if (phrase[i] ==' ')
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z')
            {
                phrase[i+1] = phrase[i+1]-32;
            }
    }
}",1
mlal864,1696824009,1,"void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitaliseNext = 1;

    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') {
            capitaliseNext = 1;
        } else if (isLowerCase(phrase[i]) && capitalizeNext) {
            phrase[i] = phrase[i] - 32;
            capitaliseNext = 0;
        }
    }
}",0
mlal864,1696824032,2,"int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitaliseNext = 1;

    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') {
            capitaliseNext = 1;
        } else if (isLowerCase(phrase[i]) && capitalizeNext) {
            phrase[i] = phrase[i] - 32;
            capitaliseNext = 0;
        }
    }
}",0
mlal864,1696824070,3,"int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitaliseNext = 1;

    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') {
            capitaliseNext = 1;
        } else if (isLowerCase(phrase[i]) && capitaliseNext) {
            phrase[i] = phrase[i] - 32;
            capitaliseNext = 0;
        }
    }
}",0
mlal864,1696824206,4,"int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitaliseNext = 1;

    for (int i = 0; i < len; i++) {
        if (isLowerCase(phrase[i])) {
            if (capitaliseNext) {
                phrase[i] -= 32;
                capitaliseNext = 0;
            }
        } else {
            capitaliseNext = 1;
        }
    }
}",0
mlal864,1696824279,5,"int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

int isUpperCase(char c) {
    return (c >= 'A' && c <= 'Z');
}

void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitaliseNext = 1;  // Flag to indicate whether the next character should be capitalized.

    for (int i = 0; i < len; i++) {
        if (isLowerCase(phrase[i])) {
            if (capitaliseNext) {
                phrase[i] -= 32; // Convert to uppercase using ASCII values
                capitaliseNext = 0; // Reset the flag
            }
        } else if (isUpperCase(phrase[i]) || !isLowerCase(phrase[i])) {
            capitaliseNext = 1; // Set the flag to capitalize the next character if it's uppercase or not a lowercase letter
        }
    }
}",0
mlaw649,1696840029,1,"void Capitalise(char *phrase)
{
    // looks through the phrase
    for (int i = 0; phrase[i] != '\0'; i++){
        
        // checks if letter is already lowercase
        if ('z' >= (phrase[i]) && (phrase[i]) >= 'a') {
            
            // convert to capital letter if its at the start of a word
            if (i == 0 || phrase[i-1] == ' ') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    }
    
}
",1
mle063,1696557406,1,"void Capitalise(char *phrase)
{
    int TotalPos;
    int i;
    
    TotalPos = 0;
    while (phrase[TotalPos] != '\0') {  //Check array's length
       TotalPos++;
    }  
    
    phrase[0] = phrase[0] - 32;
    
    for (i = 1; i < TotalPos; i++){
        if (phrase[i -1] == ' '){
            phrase[i] = phrase[i] - 32;
        }
        
    }
        
}
",0
mle063,1696558262,2,"void Capitalise(char *phrase)
{
    int TotalPos;
    int i;
    
    TotalPos = 0;
    while (phrase[TotalPos] != '\0') {  //Check array's length
       TotalPos++;
    }  
    
    if (phrase[0] >= 97 && phrase[0] <= 122){
        phrase[0] = phrase[0] - 32 ;
    }
    
    for (i = 1; i < TotalPos; i++){
        if (phrase[i] >= 97 && phrase[i] <= 122){
             if (phrase[i - 1] == ' '){
                phrase[i] = phrase[i] - 32;
             }
        }
        
    }
        
}",1
mlin729,1696233059,1,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = phrase[i] - ('a' - 'A');
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}",0
mlin729,1696241875,2,"#include <stdio.h>

void Capitalise(char *phrase) {
    int i = 0;

    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[i] = phrase[i] - ('a' - 'A');
    }

    while (phrase[i] != '\0') {
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
        i++;
    }
}
",1
mloh302,1696238045,1,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char *phrase)
{
    char capitalLetter;
    for (int i = 0; i < strlen(phrase); i++) {
        if (i == 0) {
            phrase[0] = toupper((char)phrase[0]);
        }
        else if ((int)phrase[i] == (int)(' ')) {
            phrase[i+1] = toupper((char)phrase[i+1]);
        }
    }
}",0
mloh302,1696238244,2,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++) {
        if (i == 0) {
            phrase[0] = toupper((char)phrase[0]);
        }
        else if ((int)phrase[i] == (int)(' ')) {
            phrase[i+1] = toupper((char)phrase[i+1]);
        }
    }
}",1
mmak111,1696834486,1,"void Capitalise(char* phrase)
{
	int i = 0;
	if (phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - ('a' - 'A');
	}
	i++;
	for (; i<strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
	}
}",1
mman402,1696630835,1,"char Upper (char letter)
{
    letter=letter-32;
    return letter;
}



void Capitalise(char *phrase)
{
 int i, length;
    length=strlen(phrase);

    phrase[0] = Upper(phrase[0]);

    for (i=0;i<length;i++)
    {
        if(phrase[i]==32)
        {
            phrase[i + 1] = Upper(phrase[i + 1]);
        }
    }   
}
",0
mman402,1696631167,2,"char Upper (char letter)
{
    letter=letter-32;
    return letter;
}

void Capitalise(char *phrase)
{
    int i, length;
    length=strlen(phrase);

    if ((phrase[0]>=97)&&(phrase[0]<=122))
    {
        phrase[0] = Upper(phrase[0]);
    }

    for (i=0;i<length;i++)
    {
        if(phrase[i]==32)
        {
            if ((phrase[i+1] >= 97) && (phrase[i+1] <= 122))
            {
                phrase[i + 1] = Upper(phrase[i + 1]);
            }
            
        }
    }
}",1
mman808,1696687355,1,"void Capitalise(char *phrase){
    int i = 0;
    while (phrase[i] != '\0'){
        if (phrase[i] == ' '){
            if (phrase[i+1]>= 'a' && phrase[i+1] <= 'z'){
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
            }
        }else if(phrase[0] >= 'a' && phrase[0] <= 'z'){
            phrase[0] = phrase[0] - ('a' - 'A');
        } i++;
}
}",1
mmas199,1696833052,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase) 
{
    int followingCapitalise = 1;

    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') 
        {
            if (followingCapitalise)
            {
                phrase[i] = phrase[i] - 32;
                followingCapitalise = 0;
            }
        }
        else if (phrase[i] >= 'A' && phrase[i] <= 'Z') 
        {
            if (!followingCapitalise)
            {
                phrase[i] = phrase[i] + 32;
            }
            else {
                followingCapitalise = 0;
            }
        }
        else {
            followingCapitalise = 1;
        }
    }
}",0
mmas199,1696833977,2,"#include <stdio.h>
#include <string.h>

char upperCase(char c) 
{
    if (lowerCase(c)) 
    {
        return c - ('a' - 'A');
    }
    return c;
}

int lowerCase(char c) 
{
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char* str) 
{
    int capitaliseNext = 1;

    for (int i = 0; str[i] != '\0'; i++) 
    {
        if (str[i] == ' ') 
        {
            capitaliseNext = 1;
        }
        else if (capitaliseNext && lowerCase(str[i])) 
        {
            str[i] = upperCase(str[i]);
            capitaliseNext = 0;
        }
        else {
            capitaliseNext = 0;
        }
    }
}
",0
mmas199,1696834092,3,"#include <stdio.h>
#include <string.h>

int isLowerCaseAlpha(char c) 
{
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) 
{
    if (isLowerCaseAlpha(c)) 
    {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalise(char *str) 
{
    int capitaliseNext = 1; 

    for (int i = 0; str[i] != '\0'; i++) 
    {
        if (str[i] == ' ') 
        {
            capitaliseNext = 1; 
        } 
        else if (capitaliseNext && isLowerCaseAlpha(str[i])) 
        {
            str[i] = toUpperCase(str[i]); 
            capitaliseNext = 0; 
        } 
        else 
        {
            capitaliseNext = 0; 
        }
    }
}",1
mmca276,1696676003,1,"
void Capitalise(char *phrase)
{
int i;
int length = strlen(phrase);
for(i = 0; i < length; i++)    {
    if (phrase[i] == ' ') {
        phrase[i+1] = toupper(phrase[i+1]);
    }
}
phrase[0] = toupper(phrase[0]) ;
}",1
mmcg745,1696648764,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase){

int len = strlen(phrase);

if (phrase[0] <= 122 && phrase[0] >= 97)
    phrase[0] = phrase[0] - 32;

for (int i = 1; i < len; i++){
    if (phrase[i] == 32)
        phrase[i+1] = phrase[i+1] - 32;     
}
}
",0
mmcg745,1696648951,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase){

int len = strlen(phrase);

if (phrase[0] <= 122 && phrase[0] >= 97)
    phrase[0] = phrase[0] - 32;

for (int i = 1; i < len; i++){
    if (phrase[i] == 32){
        if (phrase[i+1] <= 122 && phrase[i+1] >= 97)
            phrase[i+1] = phrase[i+1] - 32;

    }
}
}

",1
mmoh314,1696843137,1,"void Capitalise(char* phrase)
{
	int i;
	for (i = 0; i < strlen(phrase); i++)
	{
		if (i == 0 && (double)phrase[i] >= 97 && (double)phrase[i] <= 122)
		{
			phrase[i] = toupper(phrase[i]);
		}
		else if ((double)phrase[i] == 32 && (double)phrase[i + 1] >= 97 && (double)phrase[i + 1] <= 122)
		{
			phrase[i + 1] = toupper(phrase[i + 1]);
		}
	}
}",1
mmoh456,1696644930,1,"void Capitalise(char *phrase)
{
int i = 0;
int len = strlen(phrase);

if (phrase[0] >= 'a' && phrase[0] <= 'z') {
	phrase[0] = phrase[0] - 32;
}
	for (i = 0; i < len; i++) {
		if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
			phrase[i] = phrase[i] - 32;
		}
	}
}
}
",0
mmoh456,1696645008,2,"void Capitalise(char *phrase)
{
int i = 0;
int len = strlen(phrase);

if (phrase[0] >= 'a' && phrase[0] <= 'z') {
	phrase[0] = phrase[0] - 32;
}
	for (i = 0; i < len; i++) {
		if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') {
			phrase[i] = phrase[i] - 32;
		}
	}
}

",1
mnay503,1696736142,1,"#include <stdio.h>


char toUpperCase(char ch) 
{
    if (ch >= 'a' && ch <= 'z') 
    {
        return ch - ('a' - 'A');
    }
    return ch;
}


void Capitalise(char *phrase) 
{
    
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z'))
        {
            
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0;
        } 
        else if (phrase[i] == ' ') 
        {
           
            capitalizeNext = 1;
        }
        else
        {
            
            capitalizeNext = 0;
        }
    }
}
",1
mnic190,1696845540,1,"#include <string.h>
void Capitalise(char *phrase) {
if (phrase[0] > 96 && phrase[0] < 123) {
        phrase[0] = phrase[0] - 32;
    }
    for (int i = 0; i < strlen(phrase); i++) {
        if (phrase[i] > 96 && phrase[i] < 123 && phrase[i-1] == 32) {
            phrase[i] = phrase[i] - 32;
        }
    }
}",1
moco678,1696738529,1,"int Capitalise(char* String)
{
	int length = strlen(String);
	int i; 

	String[0] = String[0] + ('A' - 'a');

	for (i = 0; i < length; i++) {
		if (String[i - 1] == ' ') {
			String[i] = String[i] + ('A' - 'a');
		}
	}
	return 1;
} 
",0
moco678,1696740023,2,"int Capitalise(char* String)
{
	
	int length = strlen(String);
	int i; 
	if  (String[0] >= 'a' && String[0] <= 'z'){
		String[0] = String[0] - ('a' - 'A');
	}

		for (i = 1; i < length; i++) {
			if (String[i] >= 'a' && String[i] <= 'z') {


				 if (String[i - 1] == ' ') {
					String[i] = String[i] + ('A' - 'a');

				}

			}
			}
		
		return 1;
	}",1
mpar342,1696835530,1,"int isLowercase(char c) 
{
    return (c >= 'a' && c <= 'z');
}

char toUppercase(char c) 
{
    return c - 32;
}

void Capitalise(char *phrase) 
{
    int capitalizeNext = 1;
    while (*phrase) 
    {
        if (isLowercase(*phrase)) 
        {
            *phrase = toUppercase(*phrase);
            capitalizeNext = 0;
        } 
        else if (*phrase == ' ' || *phrase == '\t' || *phrase == '\n') 
        {
            capitalizeNext = 1;
        } 
        else 
        {
            capitalizeNext = 0;
        }
        phrase++;
    }
}",0
mpar342,1696835901,2,"int isLowercase(char c) 
{
    return (c >= 'a' && c <= 'z');
}

int isUppercase(char c)
{
    return (c >= 'A' && c <= 'Z');
}

char toUppercase(char c) 
{
    return c - 32;
}

void Capitalise(char *phrase) 
{
    int capitalizeNext = 1;
    while (*phrase) 
    {
        if (capitalizeNext && isLowercase(*phrase)) 
        {
            *phrase = toUppercase(*phrase);
            capitalizeNext = 0;
        }
        else if (!isLowercase(*phrase) && !isUppercase(*phrase)) 
        {
            capitalizeNext = 1;
        }
        else 
        {
            capitalizeNext = 0;
        }
        phrase++;
    }
}",0
mpar342,1696836086,3,"int isLowercase(char c) 
{
    return (c >= 'a' && c <= 'z');
}

int isUppercase(char c) 
{
    return (c >= 'A' && c <= 'Z');
}

char toUppercase(char c) 
{
    return c - 32;
}

void Capitalise(char *phrase) 
{
    int capitalizeNext = 1;
    while (*phrase) 
    {
        if (capitalizeNext && isLowercase(*phrase)) 
        {
            *phrase = toUppercase(*phrase);
            capitalizeNext = 0;
        } 
        else if (!isLowercase(*phrase) && !isUppercase(*phrase)) 
        {
            capitalizeNext = 1;
        } 
        else if (isUppercase(*phrase)) 
        {
            capitalizeNext = 0;
        }
        phrase++;
    }
}",0
mpar342,1696836546,4,"void Capitalise(char *phrase) 
{
    int capitalizeNext = 1;
    while (*phrase) 
    {
        if (*phrase == ' ') 
        {
            capitalizeNext = 1;
        } 
        else if (capitalizeNext && *phrase >= 'a' && *phrase <= 'z') 
        {
            *phrase = *phrase - 32; // Convert to uppercase
            capitalizeNext = 0;
        }
        phrase++;
    }
}",0
mpar342,1696836741,5,"void Capitalise(char *phrase) 
{
    int capitalizeNext = 1;
    while (*phrase) 
    {
        if (*phrase == ' ') 
        {
            capitalizeNext = 1;
        } 
        else if (capitalizeNext && *phrase >= 'a' && *phrase <= 'z') 
        {
            *phrase = *phrase - 32;
            capitalizeNext = 0;
        } 
        else 
        {
            capitalizeNext = 0;
        }
        phrase++;
    }
}",1
mpat501,1696326034,1,"#include <stdio.h>
#include <string.h>

int Caps(char *letter, int pos)
{
    letter[pos]=letter[pos] - ' ';
}

void Capitalise(char *phrase)
{
    int length=strlen(phrase);

    if (phrase[0]>='a' && phrase[0]<='z'){
        Caps(phrase, 0);
    }

    for (int i=1; i<length; i++ ){
        if (phrase[i]==' '){
            int c = i+1;
            if (phrase[c]>='a' && phrase[c]<='z'){
                Caps(phrase,c);
            }
        }
    }

}",0
mpat501,1696330068,2,"#include <stdio.h>
#include <string.h>

void Caps(char *phrase, int pos)
{
    if (phrase[pos]>='a' && phrase[pos]<='z'){
        phrase[pos]=phrase[pos] - ('a'-'A') ;
    }
}

void Capitalise(char *phrase)
{
    int length=strlen(phrase);

    if (phrase[0]>='a' && phrase[0]<='z'){
        Caps(phrase, 0);
    }

    for (int i=1; i<length; i++ ){
        if (phrase[i]==' '){
            int c = i+1;
            if (phrase[c]>='a' && phrase[c]<='z'){
                Caps(phrase,c);
            }
        }
    }

}",1
mpey262,1696280024,1,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a'- 'A');
    }
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
                phrase[i+1] = phrase[i+1] - ('a'- 'A');
            }
                
        }
        i++;
    }    
}
",1
mran851,1696841411,1,"void Capitalise(char *phrase)
{
    int i;
	while (phrase[i] != '\0') {
		if (i == 0) {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		if (i > 0 && phrase[i - 1] == ' ') {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		
	    i++;
	}
}
",0
mran851,1696844118,2,"char c;
char uppercase(c) {
    return c - 32;
}

void Capitalise(char *phrase) {
    int i = 0;

    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = uppercase(phrase[0]);
    }

    while (phrase[i] != '\0') {
       
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = uppercase(phrase[i + 1]);
        }

        i++;
    }
}",0
mran851,1696844613,3,"void Capitalise(char *phrase) {
    int i = 0;

    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    while (phrase[i] != '\0') {
       
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A'); 
        }

        i++;
    }
}",1
mrog757,1696469931,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    int i = 0;
    while (i<length) {
        if (i==0) {
            phrase[i] = phrase[i] - 32;
        }
        else if (phrase[i-1] == ' ') {
            phrase[i] = phrase[i] - 32;
        }
        i++;
    }
}
",0
mrog757,1696470187,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    int i = 0;
    while (i<length) {
        if ((i==0) && (phrase[i] <= 122) && (phrase[i] >= 97)) {
            phrase[i] = phrase[i] - 32;
        }
        else if ((phrase[i-1] == ' ') && (phrase[i] <= 122) && (phrase[i] >= 97)) {
            phrase[i] = phrase[i] - 32;
        }
        i++;
    } 
}
",1
mron793,1696735232,1,"void Capitalise(char *phrase)
{
        int i = 0;

    if (phrase[i] >= 97 && phrase[i] <= 122)
    {
        phrase[i] = phrase[i] - ('a' - 'A');
    }
    
    for (i = 1; i < strlen(phrase); i++)
    {
        if (phrase[i] == 32 && phrase[i+1] != '\0' && phrase[i+1] >= 97 && phrase[i+1] <= 122)
        {
            phrase[i+1] =  phrase[i+1] - ('a' - 'A');
        }
    }

}
",1
mshi672,1696734638,1,"void Capitalise(char *phrase)
{
    int i = 0;
	for (i = 0;  phrase[i] != '\0'; i++)
	{
		if (((phrase[i] >= 'a') && (phrase[i] <= 'z')) && ((i == 0) || (phrase[i-1] == ' ')))
		{
			phrase[i] = phrase[i] - 32;
		}
	}
}
",1
msil440,1696833467,1,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Creating a function that can help capitalise a character
char Capitalisation(char c){
    if (c >= 'a' && c <= 'z')
    {
        // Capitalising the lowercase letter
        returun c - 32;
    }
    return c; // This will return unchanged for characters that aren't alphabetic; numbers, symbols, etc.
}

void Capitalise(char *phrase)
{
    int length = strlen (phrase);
    int capitaliseNext = 1; //Flagging to see if the following character needs to be capitalised (or not).
    
    for (int i = 0; i < length; i++)
    { char currentChar = phrase[i];
    
    if (islower(currentChar) && capitaliseNext)
    { // Capitalising the current character
    phrase [i] = Capitalisation(currentChar);
    capitaliseNext = 0; // Removing the flagging
    } else if (isspace(currentChar) || !isalpha (currentChar))
{
    // Now to set the flag to capitalise the next character:
    capitaliseNext = 1;
     }
    }
  }   

",0
msil440,1696833529,2,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Creating a function that can help capitalise a character
char Capitalisation(char c){
    if (c >= 'a' && c <= 'z')
    {
        // Capitalising the lowercase letter
        return c - 32;
    }
    return c; // This will return unchanged for characters that aren't alphabetic; numbers, symbols, etc.
}

void Capitalise(char *phrase)
{
    int length = strlen (phrase);
    int capitaliseNext = 1; //Flagging to see if the following character needs to be capitalised (or not).
    
    for (int i = 0; i < length; i++)
    { char currentChar = phrase[i];
    
    if (islower(currentChar) && capitaliseNext)
    { // Capitalising the current character
    phrase [i] = Capitalisation(currentChar);
    capitaliseNext = 0; // Removing the flagging
    } else if (isspace(currentChar) || !isalpha (currentChar))
{
    // Now to set the flag to capitalise the next character:
    capitaliseNext = 1;
     }
    }
  }   

",0
msil440,1696835950,3,"#include <stdio.h>
#include <string.h>

int isLowercaseAlphabet(char c)
{
    return (c >= 'a' && <= 'z');
}

void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int capitalizeNext = 1; // Initialise to true to capitalise the first word

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];

        if (capitaliseNext && isLowercaseAlphabet(currentchar)) {
            // Converting to uppercase letter.
            phrase[i] = currentChar - ('a' - 'A');
            capitalizeNext = 0; // Reset to false
        } 
            // Set the next character to capitalize when a space is encountered in the code
	if (currentChar == ' ') {
	capitaliseNext = 1;
            
        }
    }
}",0
msil440,1696835970,4,"#include <stdio.h>
#include <string.h>

int isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int capitalizeNext = 1; // Initialize to true to capitalize the first word

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];

        if (capitalizeNext && isLowercaseAlphabet(currentChar)) {
            // Convert to uppercase
            phrase[i] = currentChar - ('a' - 'A');
            capitalizeNext = 0; // Reset to false
        }

        // Set capitalizeNext to true when a space is encountered
        if (currentChar == ' ') {
            capitalizeNext = 1;
        }
    }
}

",0
msil440,1696836270,5,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Creating a function that can help capitalise a character
char Capitalisation(char c){
    if (c >= 'a' && c <= 'z')
    {
        // Capitalising the lowercase letter
        return c - 32;
    }
    return c; // This will return unchanged for characters that aren't alphabetic; numbers, symbols, etc.
}

void Capitalise(char *phrase)
{
    int length = strlen (phrase);
    int capitaliseNext = 1; //Flagging to see if the following character needs to be capitalised (or not).
    
    for (int i = 0; i < length; i++)
    { char currentChar = phrase[i];
    
    if (islower(currentChar) && capitaliseNext)
    { // Capitalising the current character
    phrase [i] = Capitalisation(currentChar);
    capitaliseNext = 0; // Removing the flagging
    } else if (isspace(currentChar) || !isalpha (currentChar))
{
    // Now to set the flag to capitalise the next character:
    capitaliseNext = 1;
     }
    }
  }   

",0
msil440,1696836350,6,"#include <stdio.h>
#include <string.h>

int isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int capitalizeNext = 1; // Initialize to true to capitalize the first word

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];

        if (capitalizeNext && isLowercaseAlphabet(currentChar)) {
            // Convert to uppercase
            phrase[i] = currentChar - ('a' - 'A');
            capitalizeNext = 0; // Reset to false
        }

        // Set capitalizeNext to true when a space is encountered
        if (currentChar == ' ') {
            capitalizeNext = 1;
        }
    }
}
",0
msil440,1696836448,7,"#include <stdio.h>
#include <string.h>

int isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int capitaliseNext = 1; // Initialise to true to capitalise the first character

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];

        if (capitaliseNext && isLowercaseAlphabet(currentChar)) {
            // Capitalising the current character
            phrase[i] = currentChar - ('a' - 'A');
            capitaliseNext = 0; // Reset to false
        } else if (currentChar == ' ' || currentChar == '\t' || currentChar == '\n') {
            capitaliseNext = 1; // Set to true when a space, tab, or newline is encountered
        }
    }
}

",0
msil440,1696836601,8,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int capitaliseNext = 1; // Initialise to true to capitalise the first character of each word

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];

        if (isalpha(currentChar)) {
            if (capitaliseNext) {
                // Capitalising every first character of the word
                phrase[i] = toupper(currentChar);
                capitaliseNext = 0; // Reset to false
            } else {
                // Convert every single letter in the word to lowercase.
                phrase[i] = tolower(currentChar);
            }
        } else {
            capitaliseNext = 1; // Set to true for the next character
        }
    }
}",0
msil440,1696836879,9,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int capitaliseNext = 1; // Initialise to true to capitalise the first character

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];

        if (isalpha(currentChar) || (!isalpha(currentChar) && currentChar != ' ')) {
            if (capitaliseNext) {
                // Convert to uppercase if it's the first character of a word
                phrase[i] = toupper(currentChar);
                capitaliseNext = 0; // Reset to false
            } else {
                // Convert to lowercase for non-initial characters of a word
                phrase[i] = tolower(currentChar);
            }
        } else {
            // Treat spaces as word separators but retain other non-alphabetic characters
            capitaliseNext = 1; // Set to true for the next character
        }
    }
}
",1
msin609,1696728155,1,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if (i == 0) {
			if (phrase[i] >= 97 && phrase[i] <= 122) {
				phrase[i] -= 32;
			}
		}
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
				phrase[i + 1] -= 32;
			}
		}
		i++;
	}
}
",1
msu975,1696465526,1,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void Capitalise(char* phrase)
{
    int i0 = 0;
    int length = 0;
    int i = 0;

    while (phrase[i0] != '\0') {
        length++;
        i0++;
    }

  

    for (i = 0; i < length; i++) {
 
            if ((phrase[i - 1] == ' ') && (phrase[i] >= 'a') && (phrase[i] <= 'z') && (i > 0)) {
                phrase[i] = phrase[i] - ('a' - 'A');
        }

 
            else if ((phrase[i] >= 'a') && (phrase[i] <= 'z') && (i == 0)) {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }   
}

",1
msuv992,1696394342,1,"void Capitalise(char *phrase)
{
 int i, length; 
 length = strlen(phrase);
 i = 0;
 
  if ( phrase[i] >= 97){
     phrase[i] = phrase[i] - 32; 
     }
 
 
for ( i = 1; i < length; i++) {
     if (phrase[i] == 32 && phrase[i + 1] >= 97) {
         phrase[i + 1] =  phrase[i + 1] - 32;
     }
         
    }
     
 
     
}",1
mtam709,1696846569,1,"void Capitalise(char *phrase)
{
        int length = strlen(phrase);
    int i = 0;
    phrase[i] = phrase[i] - 32;
    for (i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
}
}
",0
mtam709,1696846874,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int i = 0;
    if (phrase[i] >= 97 && phrase[i] <= 122) {
        phrase[i] = phrase[i] - 32;
    }
    for (i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
}
}
",1
mtha724,1696674394,1,"void Capitalise(char *phrase)
{
    int cap = 1;
    for(int i = 0; i < strlen(phrase); i++){
        if (cap == 1){
            phrase[i] = phrase[i] - ('a' - 'A');
            cap = 0;
        }
        else if (phrase[i] == ' '){
            cap = 1;
        }
    } 
}
",0
mtha724,1696675014,2,"void Capitalise(char *phrase)
{
    int cap = 1;
    for(int i = 0; i < strlen(phrase); i++){
        if (cap == 1){
            if (phrase[i] >= 'a' && phrase[i] <= 'z'){
                phrase[i] = phrase[i] - ('a' - 'A');
                cap = 0;
            }
            else{
                cap = 0;
            }
        }
        else if (phrase[i] == ' '){
            cap = 1;
        }
    }
}
",1
mtob213,1696757255,1,"void Capitalise(char *phrase)
{
    int i = 0;
    
    while(phrase[i] != '\0'){
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z'){
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
        i++;
    }
}
",0
mtob213,1696757691,2,"void Capitalise(char *phrase)
{
    int i = 0;
    
    while(phrase[i] != '\0'){
        if (phrase[0] >= 'a' && phrase[0] <= 'z'){
            phrase[0] = phrase[0] - ('a' - 'A');
        }
        if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z'){
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
        i++;
    }
}
",1
mwan364,1696414697,1,"char UpperCaseLetter(char letter) {
	if (letter >= 'a' && letter <= 'z') { //only modify within this range
		letter = letter - ('a' - 'A');
	}
	return letter;
}

void Capitalise(char* phrase)
{
	int phraseLength = strlen(phrase);
	for (int i = 0; i < phraseLength; i++) {
		if (i == 0 || phrase[i - 1] == ' ') { //potential error 0 - 1 = out of bounds error
			phrase[i] = UpperCaseLetter(phrase[i]);
		}
	}
}

",1
mwan364,1696447957,2,"char UpperCaseLetter(char letter) {
	if (letter >= 'a' && letter <= 'z') { //only modify within this range
		letter = letter - ('a' - 'A');
	}
	return letter;
}

void Capitalise(char* phrase)
{
	int phraseLength = strlen(phrase);
	for (int i = 0; i < phraseLength; i++) {
		if (i == 0 || phrase[i - 1] == ' ') { 
			phrase[i] = UpperCaseLetter(phrase[i]);
		}
	}
}

",1
myou984,1696304069,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0') {
        if ((i == 0 || phrase[i-1] == 32)) {
            phrase[i] = phrase[i] - 32;
        }
    i++;
    }
}",0
myou984,1696304215,2,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0') {
        if (((i == 0 || phrase[i-1] == 32)) && phrase[i] > 96 && phrase[i] < 123) {
            phrase[i] = phrase[i] - 32;
        }
    i++;
    }
}",1
mzha612,1696804197,1,void Capitalise(char *phrase) { int capitalizeNext = 0; int i = 0; if ((phrase[0] >= 'a' && phrase[0] <= 'z')){ phrase[0] = phrase[0] - ('a' - 'A'); } while (phrase[i] != '\0') { if (phrase[i] == 32) { if (phrase[i+1] >= 'A' && phrase[i+1] <= 'Z') { i++; continue; } if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') { phrase[i + 1] = phrase[i + 1] - ('a' - 'A'); } } i++; } } ,0
nabr105,1696472524,1,"void Capitalise(char *phrase)
{
    int phrase_len = strlen(phrase); 

    for (int i = 0; i < phrase_len; i++) 
    {
        if (phrase[i] == 32 && i+1 != phrase_len) 
        {
            phrase[i+1] = phrase[i+1] - 32;
        }

        if (i == 0 && phrase[i] != 32) 
        {
            phrase[i] = phrase[i] - 32;
        }
    }
}
",0
nabr105,1696472813,2,"void Capitalise(char *phrase)
{
    int phrase_len = strlen(phrase); 

    for (int i = 0; i < phrase_len; i++) 
    {
        if (i == 0 && phrase[i] != 32 && phrase[i] > 97) 
        {
            phrase[i] = phrase[i] - 32;
        }

        if (phrase[i] == 32 && i+1 != phrase_len && phrase[i+1] > 97) 
        {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",0
nabr105,1696472895,3,"void Capitalise(char *phrase)
{
    int phrase_len = strlen(phrase); 

    for (int i = 0; i < phrase_len; i++) 
    {
        if (i == 0 && phrase[i] != 32 && phrase[i] > 96) 
        {
            phrase[i] = phrase[i] - 32;
        }

        if (phrase[i] == 32 && i+1 != phrase_len && phrase[i+1] > 96) 
        {
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",1
nalg484,1696759664,1,"#include <stdio.h>
#include <string.h>
#include <stdio.h>
void Capitalise(char *phrase) {
    int Capitalise = 1;
    int i = 0;

    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (Capitalise) {
                phrase[i] -= 32;
                Capitalise = 0;
            }
        } else {
            Capitalise = 1;
        }
        i++;
    }
}",0
nask472,1696403767,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    phrase[0] = phrase[0] - 32;
    int length = strlen(phrase);
    for (int i = 1; i < length; i++) {
        if (phrase[i] == ' ') {
            phrase[i + 1] = phrase[i + 1]-32;
        }
    }

}
",0
nask472,1696405261,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    if (phrase[0] <= 122 && phrase[0]>= 97){
        phrase[0] = phrase[0] - 32;
    }
    
    int length = strlen(phrase);
    for (int i = 1; i < length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[i + 1]  <= 122 && phrase[i + 1]>= 97){
                phrase[i + 1] = phrase[i + 1]-32;
            }
        }     
    }

}
",1
ncha509,1696210738,1,"void Capitalise(char *phrase)
{
    phrase[0]=phrase[0]-32;
    int length= strlen(phrase);
    int i;
    for (i=0;i<length;i++){
        if (phrase[i]==32 && phrase[i+1]>=97 && phrase[i+1]<=122){
            phrase[i+1]=phrase[i+1]-32;
        }
    }
}
",0
ncha509,1696211023,2,"void Capitalise(char *phrase)
{
    
    int length= strlen(phrase);
    int i;
    if (phrase[0]>=97 && phrase[0]<=122){
        phrase[0]=phrase[0]-32;  
    }
    
    for (i=0;i<length;i++){
        if (phrase[i]==32 && phrase[i+1]>=97 && phrase[i+1]<=122){
            phrase[i+1]=phrase[i+1]-32;
        }
    }
}",1
ndas832,1696633851,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);
    for (i=0; i<length; i++) {
        if ('a'<= phrase[0] && phrase[0]<='z') {
        phrase[0] = phrase[0] - ('a' - 'A'); 
        } if (phrase[i] == ' ') {
            if ('a'<=phrase[i+1] && phrase[i+1]<='z') {
                 phrase[i+1] = phrase[i+1] - ('a' - 'A'); 
            } 
        }
    }
} 

",1
ndso791,1696652799,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase) {
    int len = strlen(phrase);
    int capitalizeNext = 1; 

    for (int i = 0; i < len; i++) {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); 
            capitalizeNext = 0;
        } else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n') {
            capitalizeNext = 1; 
        }
    }
}
",0
ndso791,1696653022,2,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase) 
{
    int len = strlen(phrase);
    int capitalizeNext = 1;

    for (int i = 0; i < len; i++) 
    {
        if (phrase[i] == ' ') 
        {
            capitalizeNext = 1;
        } 
        else if (capitalizeNext && phrase[i] >= 'a' && phrase[i] <= 'z') 
        {
            phrase[i] -= ('a' - 'A');
            capitalizeNext = 0;
        } 
        else 
        {
            capitalizeNext = 0;
        }
    }
}
",1
ngam724,1696468756,1,"void Capitalise(char* phrase)
{	
	int i;
	int length = strlen(phrase);
	if ((phrase[0] >= 97) && (phrase[0]<=122)) {
		phrase[0]= phrase[0]-32;
	}
	
	for (i = 1; i < length; i++) {
		if (phrase[i - 1] == 32) {
			phrase[i] = phrase[i] - 32; 
		}
	}
}",0
ngam724,1696468987,2,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);
	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - 32;
	}
	while ((phrase[0] >= 97) && (phrase[0] <= 122)) {


		for (i = 1; i < length; i++) {
			if (phrase[i - 1] == 32) {
				phrase[i] = phrase[i] - 32;
			}
		}
	}
}",0
ngam724,1696469350,3,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);
	if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
		phrase[0] = phrase[0] - 32;
	}
		
		for (i = 1; i < length; i++) {
			if((phrase[i] >= 97) && (phrase[i] <= 122))
			if (phrase[i - 1] == 32) {
				phrase[i] = phrase[i] - 32;
			}
		}
}	",1
ngan146,1696809916,1,"void Capitalise(char *phrase) {
    int nextWord = 1;

    for(int i = 0; phrase[i] != '\0'; i++) {
        if(phrase[i] >= 'a' && phrase[i] <= 'z' && nextWord == 1) {
            phrase[i] = phrase[i] - 32;
        }
        if(phrase[i] == ' ') {
            nextWord = 1;
        }else {
            nextWord = 0;
        }
    }
}
",1
ngna565,1696740397,1,"void Capitalise(char *phrase)
{
    int capitaliseNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        
        if (isalpha(phrase[i])) {

            if (capitaliseNext) {

                phrase[i] = Uppercase(phrase[i]);
                
                capitaliseNext = 0;
                
            } else {

                phrase[i] = tolower(phrase[i]);
            }
        } else {

            capitaliseNext = 1;
        }
    }
}
",0
ngna565,1696740473,2,"
char Uppercase(char c) {
    if (c >= 'a' && c <= 'z') {

        return c - ('a' - 'A');
    } else {

        return c;
    }
}


void Capitalise(char *phrase)
{
    int capitaliseNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        
        if (isalpha(phrase[i])) {

            if (capitaliseNext) {

                phrase[i] = Uppercase(phrase[i]);
                
                capitaliseNext = 0;
                
            } else {

                phrase[i] = tolower(phrase[i]);
            }
        } else {

            capitaliseNext = 1;
        }
    }
}
",0
ngna565,1696740858,3,"
char Uppercase(char c) {
    
    if (c >= 'a' && c <= 'z') {

        return c - ('a' - 'A');
    } else {

        return c;
    }
}

void Capitalise(char *phrase) {
    
    int capitaliseNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        
        if (isalpha(phrase[i])) {

            if (capitaliseNext) {

                phrase[i] = Uppercase(phrase[i]);
                
                capitaliseNext = 0;
                
            } else {

                phrase[i] = tolower(phrase[i]);
            }
        } else if (phrase[i] == ' ') {

            capitaliseNext = 1;
        }
    }
}
",0
ngna565,1696806891,4,"void Capitalise(char *phrase) {
    
    int length = strlen(phrase);
    
    int i = 0;

   if (phrase[i] >= 'a' && phrase[i] <= 'z') {
       
       phrase [i] -= ('a' - 'A');
   }

while (i<length) {
    if (phrase[i] == ' ') {
        
        i++;
        
        if (i < length && phrase [i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] -= ('a' - 'A');
        }
    }
            i++; 
        
    }
}
",1
nhar865,1696760476,1,"void Capitalise(char *phrase) {
    int length = strlen(phrase);

    int space = 1;

    for (int i = 0; i < length; i++) {
        switch (phrase[i]) {
            case ' ':
                space = 1;
                break;
            default:
                if (space) {
                    phrase[i] -= 32;
                    space = 0;
                }
                break;
        }
    }
}",0
nhar865,1696760618,2,"void Capitalise(char *phrase) {
    int length = strlen(phrase);

    int space = 1;

    for (int i = 0; i < length; i++) {
        switch (phrase[i]) {
            case ' ':
                space = 1;
                break;
            default:
                if (space) {
                    if ('a' <= phrase[i] && phrase[i] <= 'z') {
                        phrase[i] -= 32;
                    }
                    space = 0;
                }
                break;
        }
    }
}",1
nhrs452,1696304535,1,"void Capitalise(char *phrase)
{
    
// finds length of phrase
    int length = 0;
    while (phrase[length] != '\0'){
        length++;
    }
// capitalise first character for each word
phrase[0] = phrase[0] - 32; //('a'-'A'); //caps the first letter (since no space infront)

    for (int i = 1; i < length; i++){ //start at second character (pos 1)
        if (phrase[i-1] == ' '){
            phrase[i] = phrase[i] - ('a'-'A'); //same thing as -32 but looks nicer
        }
    }
}
",0
nhrs452,1696304902,2,"void Capitalise(char *phrase)
{
// finds length of phrase
    int length = 0;
    while (phrase[length] != '\0'){
        length++;
    }
// capitalise first character for each word
if (phrase[0] > 96 && phrase[0] < 123){
    phrase[0] = phrase[0] - 32; //('a'-'A'); //caps the first letter (since no space infront)
    }
    
    for (int i = 1; i < length; i++){ //start at second character (pos 1)
        if (phrase[i-1] == ' ' && phrase[i] > 96 && phrase[i] < 123){
            phrase[i] = phrase[i] - ('a'-'A'); //same thing as -32 but looks nicer
        }
    }
}
",1
nhua986,1696299711,1,"void Capitalise(char *phrase)
{
    int len = strlen(phrase) - 1;
    
    // first letter capital 
    if ((phrase[0] >= 'a') && (phrase[0]  <= 'z')) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (int i = 0; i < len; i++) {
        if (phrase[i] == ' ') { 
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}",0
nhua986,1696300024,2,"void Capitalise(char *phrase)
{
    int len = strlen(phrase) - 1;
    
    // first letter capital 
    if ((phrase[0] >= 'a') && (phrase[0]  <= 'z')) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (int i = 0; i < len; i++) {
        if ((phrase[i] == ' ') && ((phrase[i +1] >= 'a') && (phrase[i+1]  <= 'z'))) { 
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}",1
nhut042,1696211072,1,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++)
    {
        if ((phrase[i] == ' ') && ((phrase[i + 1] > 96) && (phrase[i + 1] < 123)))
        {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
        else if ((phrase[0] > 96) && (phrase[0] < 123))  
        {
            phrase[0] = phrase[0] - 32;
        }
    }
    return;
}
",1
nisa397,1696301645,1,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);

	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;

	}

	for (i = 0; i < length; i++) {
		if (phrase[i]==32) {
			if (phrase[i+1]>=97 && phrase[i+1]<= 122) {
				phrase[i + 1] = phrase[i + 1] - 32;

			}

		}
	}
}
",1
njon803,1696394910,1,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);

	phrase[0] = phrase[0] - 32; 

	for (i = 0; i < length; i++) {
		if (phrase[i] == 32) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}

	}

}

",0
njon803,1696395655,2,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);

	if ((phrase[0] > 96) && (phrase[0] < 123)) {
		phrase[0] = phrase[0] - 32;
	}

	for (i = 0; i < length; i++) {
		if ((phrase[i] == 32) && (phrase[i+1] > 96) && (phrase[i + 1] < 123)) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}

	}

}
",1
nlal162,1696748212,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int nextCap = 1; //set to check if next character is to be capitalise.
    
    for(int i = 0; i < length; i++){
        char character = phrase[i];
        
        if(nextCap && LowerC(character)){
            phrase[i] = UpperC(character);
            nextCap = 0; //capitilised.
        } else if(character == ' '){
            nextCap = 1; //set to capitalise next character.
    }
}
    
}
",0
nlal162,1696748257,2,"#include <stdio.h>
#include <string.h>

int LowerC(char c)
{
   return( c >= 'a'&& c <= 'z');
}

char UpperC(char c)
{
    if (LowerC(c)){
        return c -('a' - 'A'); //convert to uppercase(ascii)
    }
    return c;
}

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int nextCap = 1; //set to check if next character is to be capitalise.
    
    for(int i = 0; i < length; i++){
        char character = phrase[i];
        
        if(nextCap && LowerC(character)){
            phrase[i] = UpperC(character);
            nextCap = 0; //capitilised.
        } else if(character == ' '){
            nextCap = 1; //set to capitalise next character.
    }
}
}
",0
nlal162,1696748624,3,"#include <stdio.h>
#include <string.h>

int LowerC(char c)
{
   return( c >= 'a' && c <= 'z');
}

char UpperC(char c)
{
    if (LowerC(c)){
        return c -('a' - 'A'); //convert to uppercase(ascii)
    }
    return c;
}

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int nextCap = 1; //set to check if next character is to be capitalise.
    
    for(int i = 0; i < length; i++){
        char character = phrase[i];
        
        if(nextCap && LowerC(character)){
            phrase[i] = UpperC(character);
            nextCap = 0; //capitilised.
        } else if(character == ' '){
            nextCap = 1; //set to capitalise next character.
    }else{
        nextCap = 0;//not a space, do not capitlise next character
    }
}
}",1
nmah920,1696396274,1,"void Capitalise(char *phrase)
{
    for (int i = 0; phrase[i] != '\0'; i ++)
    {
        if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            phrase[i] = phrase[i] - 'a' + 'A';
        }

        if (phrase[0] >= 'a' && phrase[0] <= 'z')
        {
            phrase[0] = phrase[0] - 'a' + 'A';
        }
    }
}",1
nren130,1696420808,1,"void Capitalise(char *phrase)
{
 if (phrase[0] >= 97 && phrase[0] <= 122) {
    phrase[0] = phrase[0] - 32;
}

for (int i = 1; phrase[i] != '\0'; i++) {
    if (phrase[i - 1] == ' ' && phrase[i] >= 97 && phrase[i] <= 122) {
        phrase[i] = phrase[i] - 32;
    }
}
   
}
",1
nrub019,1696715346,1,"void Capitalise(char *phrase)
{
     int length = strlen(phrase);
               
                if (phrase[0] > 97)
                phrase[0] = phrase[0] - 32;

        //loop through string and look for spaces
        for (int i = 0; i <length; i++){
            if (phrase[i] == 32){
                if (phrase[i+1] > 97){
                    phrase[i+1] = phrase[i+1] - 32;
                }
            }
        }
}
",0
nrub019,1696715472,2,"void Capitalise(char *phrase)
{
     int length = strlen(phrase);

    if (phrase[0] > 96)
        phrase[0] = phrase[0] - 32;

        //loop through string and look for spaces
        for (int i = 0; i <length; i++){
            if (phrase[i] == 32){
                if (phrase[i+1] > 96){
                    phrase[i+1] = phrase[i+1] - 32;
                }
            }
        }
}
",0
nrub019,1696715562,3,"void Capitalise(char *phrase)
{
     int length = strlen(phrase);

    if (phrase[0] > 96) {
        phrase[0] = phrase[0] - 32;
    }

    for (int i = 0; i <length; i++){
        if (phrase[i] == 32){
            if (phrase[i+1] > 96){
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }

}
",1
nthe160,1696757034,1,"void Capitalise(char* phrase)
{
    int i;
    i = 0;
    while (phrase[i] != '\0') {
        i++;
    }

    int yes;
    yes = 1;
    int	lastvalue;
    int firstvalue;

    phrase[0] = phrase[0] - ('a' - 'A');

        for (firstvalue = 0, lastvalue = i - 1; firstvalue <= lastvalue; firstvalue++) { // loop to swap elements
            if (phrase[firstvalue - 1] == ' ') {
                phrase[firstvalue] = phrase[firstvalue] - ('a' - 'A');
            }
        }
}
",0
nthe160,1696757047,2,"void Capitalise(char* phrase)
{
    int i;
    i = 0;
    while (phrase[i] != '\0') {
        i++;
    }
    
    int	lastvalue;
    int firstvalue;

    phrase[0] = phrase[0] - ('a' - 'A');

        for (firstvalue = 0, lastvalue = i - 1; firstvalue <= lastvalue; firstvalue++) { // loop to swap elements
            if (phrase[firstvalue - 1] == ' ') {
                phrase[firstvalue] = phrase[firstvalue] - ('a' - 'A');
            }
        }
}
",0
nthe160,1696757352,3,"void Capitalise(char* phrase)
{
    int i;
    i = 0;
    while (phrase[i] != '\0') {
        i++;
    }

    int	lastvalue;
    int firstvalue;

    if (phrase[0] > 'Z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

        for (firstvalue = 0, lastvalue = i - 1; firstvalue <= lastvalue; firstvalue++) { // loop to swap elements
            if (phrase[firstvalue] > 'Z') {
                if (phrase[firstvalue - 1] == ' ') {
                    phrase[firstvalue] = phrase[firstvalue] - ('a' - 'A');
                }
            }
        }
}",1
ntia856,1696730514,1,"void Capitalize(char *phrase)
{
    int length = strlen(phrase);
    int capitalizeNext = 1;

    for (int i = 0; i < length; i++)
    {
        if (phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            if (capitalizeNext)
            {
                phrase[i] -= 32;
                capitalizeNext = 0; 
            }
        }
        else if (phrase[i] == ' ')
        {
            capitalizeNext = 1; 
        }
    }
}
",0
ntia856,1696730734,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int TureFalse = 1;

    for (int i = 0; i < length; i++)
    {
        if (phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            if (TureFalse)
            {
                phrase[i] -= 32;
                TureFalse = 0; 
            }
        }
        else if (phrase[i] == ' ')
        {
            TureFalse = 1; 
        }
    }
}
",0
ntia856,1696732401,3,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int TureFalse = 1;

    for (int i = 0; i < length; i++)
    {
        if (phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            if (TureFalse)
            {
                phrase[i] -= 32;
                TureFalse = 0; 
            }
        }
        else if (phrase[i] >= 'A' && phrase[i] <= 'Z')
        {
            TureFalse = 0; 
        }
        else if (phrase[i] == ' ')
        {
            TureFalse = 1; 
        }
        else
        {
          TureFalse = 0;
        }
    }
}
",1
ntur101,1696302832,1,"#include <string.h>

void Capitalise(char* phrase)
{
	int length = strlen(phrase);

	if (phrase[0] != ' '){
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 0; i < length; i++)
	{
		if (phrase[i] == ' ') 
		{
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",0
ntur101,1696303418,2,"#include <string.h>

void Capitalise(char* phrase)
{
	int length = strlen(phrase);

	if (phrase[0] != ' ' && phrase[0] - 96 > 0 && phrase[0] - 96 < 27){
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 0; i < length-1; i++)
	{
		if (phrase[i] == ' ' && phrase[i+1] - 96 > 0 && phrase[i+1] - 96 < 27 ) 
		{
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",1
nwei818,1696237645,1,"void Capitalise(char *phrase) {
   
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' || i==0) {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] -= 32;
            }
        }
    }
}",1
nwil850,1696327095,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[0] > 96){
        phrase[0] = phrase[0] - 32;
    }
    while (phrase[i] != '\0') {
        if ((phrase[i] == 32) && (phrase[i+1] > 96)){
            phrase[i+1] = (phrase[i+1] - 32);
            }
    i++;
    }


}   
  ",1
nyua944,1696380248,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length;
    length = strlen(phrase);
    for (int i = 0; i < length; i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122) {
            if (phrase[i-1] == 32 || i == 0) {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}",1
obar199,1696837701,1,"void Capitalise(char *phrase)
{
    phrase[0] = phrase[0]-32;
    
}
",0
obar199,1696838312,2,"void Capitalise(char *phrase)
{
    if ((phrase[0]>='a')&&(phrase[0]<='z'))
    phrase[0] = phrase[0]-32;
    
}",0
obar199,1696838664,3,"void Capitalise(char *phrase)
{
    if ((phrase[0]>='a')&&(phrase[0]<='z')){
    phrase[0] = phrase[0]-32;
        
    }
    
    for (int i = 1; i<100; i++){
        if ((phrase[i]>='a')&&(phrase[i]<='z')&&(phrase[i-1]==' ')){
            phrase[i] = phrase[i]-32;
        }

    }
    
    
}",1
ogab251,1696398128,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i = 0; 
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            i++;
            
            phrase[i] = phrase[i] - 'a' + 'A';
        }
        i++;
    }
}
",0
ogab251,1696400552,2,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i = 0; 
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 'a' + 'A';
    }
    
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            i++;
            
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - 'a' + 'A';
            }
        }
        i++;
    }
}
    
",1
ogan176,1696492591,1,"char toUppercase(char ch) {
	if (ch >= 'a' && ch <= 'z') {
		return ch - 32;
	}
	return ch;
}

void Capitalise(char *phrase)
{
	int length = strlen(phrase);
	int i;

	for (i = 0; i < length; i++) {

		if (i == 0 || phrase[i-1] == ' ') {
			phrase[i] = toUppercase(phrase[i]);
		}
	}
}",1
ogar584,1696825736,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    int i, length;
    length = strlen(phrase);
    for (i = 0; i < length; i++)
    {
        if (phrase[i] >= 97 && phrase[i] <= 122)
        {
            if (i == 0 || phrase[i - 1] == ' ')
            {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",1
oguo680,1696647499,1,"char capitalChar(char character) {
    if (character >= 'a' && character <= 'z') {
        character = character - 32;
    }
    return character;
}

void Capitalise(char *phrase) {
    
    phrase[0] = capitalChar(phrase[0]);
    int i;
    for (i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i] == 32) {
            phrase[i + 1] = capitalChar(phrase[i + 1]);
        }
    }
}
",1
oko158,1696335594,1,"void Capitalise(char* phrase) {
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') { 
            if (i == 0 || phrase[i - 1] == ' ') {
                phrase[i] = phrase[i] - 32; 
            }
        }
    }
    return;
}",1
onic423,1696732582,1,"int isLowercase(char c) 
{
    return c >= 'a' && c <= 'z';
}

char toUppercase(char c) 
{
    if (isLowercase(c)) 
    {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalise(char *phrase) {
    int newWord = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (newWord && isLowercase(phrase[i])) 
        {
            phrase[i] = toUppercase(phrase[i]);
            newWord = 0;
        } else if (phrase[i] == ' ') 
        {
            newWord = 1;
        } else 
        {
            newWord = 0;
        }
    }
}
",1
opat597,1696733721,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - ('a' - 'A');
    } 

    int i = 1;
    while (phrase[i] != '\0'){
        if (phrase[i] == ' '){
            if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z'){
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
        }
        i++;

    }
    
}",1
opre469,1696667667,1,"void Capitalise(char *phrase)
{
    //changing the first letter to a capital if not already//
if (phrase[0] >= 97 && phrase[0] <= 122) {
	phrase[0] = phrase[0] - ('a' - 'A');
}

//setting up while loop that goes through each index of the array//
int i = 0;
while (phrase[i] != '\0') {
	//if statement to find spaces//
	if (phrase[i] == 32) {
		
		//if statement to check if the character after the space is a lower case letter//
		if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {

			phrase[i + 1] = phrase[i + 1] - ('a' - 'A'); //making first letter uppercase//

		}
	}
	
	//continuing while loop//
	i++;
}
}
",1
orow585,1696678038,1,"void Capitalise(char *phrase)
{
    	//Capitalise First Letter
	if (*phrase > 90) {
		*phrase = *phrase - 32;
	}
	
	int i = 0;

	while (*(phrase + i) != '\0') {
		if (*(phrase + i - 1) == ' ' && *(phrase + i) > 90) {
			*(phrase + i) = *(phrase + i) - 32;
		}
		i++;
	}
}
",1
osca399,1696833437,1,"#include <stdio.h>

    // Helper function 
    char Upper(char ch) {
        if (ch >= 'a' && ch <= 'z') {
            return ch - ('a' - 'A');
        }
        return ch;
    }

    void Capitalise(char* phrase) {
        int capitalise = 1; 

        while (*phrase) {
            if ((*phrase >= 'a' && *phrase <= 'z') && capitalise) {
                *phrase = Upper(*phrase);
                capitalise = 0;
            }
            else if (*phrase == ' ') {
                capitalise = 1;
            }

            phrase++;
        }
    }

// Author: Olano Scarlett",0
osca399,1696834828,2,"#include <stdio.h>

// Helper function 
char Upper(char character) {
    if (character >= 'a' && character <= 'z') {
        return character - ('a' - 'A');
    }
    return character;
}

// Capitalise function
void Capitalise(char* phrase) {
    int capitalise = 1;

    while (*phrase) {
        if (*phrase != ' ' && *phrase != '\t' && *phrase != '\n') {
            if (capitalise) {
                *phrase = Upper(*phrase);
                capitalise = 0;
            }
            else {
                *phrase = *phrase;
            }
        }
        else {
            capitalise = 1;
        }

        phrase++;
    }
}
// Author: Olano Scarlett",1
oshi740,1696457626,1,"void Capitalise(char *phrase)
{
    int i = 0;
phrase[i] -= 'a' - 'A';
while (phrase[i] != '\0') {
	if (phrase[i] == ' '&& phrase[i+1]>='a'&& phrase[i + 1]<='z'){
		phrase[i + 1] -= 'a' - 'A';
	}
	i++;
}
    
}
",0
oshi740,1696457714,2,"void Capitalise(char *phrase)
{
   int i = 0;
if (phrase[i] >= 'a' && phrase[i] <= 'z') {
	phrase[i] -= 'a' - 'A';
}
while (phrase[i] != '\0') {
	if (phrase[i] == ' '&& phrase[i+1]>='a'&& phrase[i + 1]<='z'){
		phrase[i + 1] -= 'a' - 'A';
	}
	i++;
} 
}
",1
osko432,1696771737,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
size_t beez=strlen(phrase);
for (int deez=0; deez<=beez-1;deez++){
    
    
    if (phrase[deez]>96&&phrase[deez]<123&&(phrase[deez-1]==' '||deez==0)){
       phrase[deez] -= 32;
    }
}    
}

",1
pchh683,1696248577,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0')
    {
        if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z')
        {
            phrase[i+1] = phrase[i+1] - 'a' + 'A';
        }
        i++;
    }
    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    {
        phrase[0] = phrase[0] - 'a' + 'A';
    }
}
",1
pfil701,1696842982,1,"void Capitalise(char *phrase) {
    
    char ToUpperCase(char c) {
        if (c >= 'a' && c <= 'z') {

            return c - 32;
        } else {
            return c;
        }
    }

    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') && capitalizeNext) {

            phrase[i] = ToUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {

            capitalizeNext = 1;
        }
    }
}
",0
pfil701,1696845146,2,"void Capitalise(char *phrase) {
    int length = strlen(phrase);

    for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (i == 0 || phrase[i - 1] == ' ') {
                phrase[i] -= 32; // Convert lowercase to uppercase
            }
        }
    }
}
",1
pfon568,1696402795,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i < length; i++)
    {
        if (((phrase[0] >= 'a') && (phrase[0] <= 'z')) || (phrase[i - 1] == 32))
        {
            phrase[i] = phrase[i] - 32;
           
        }
        
    }
    
}
",0
pfon568,1696403218,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i < length; i++)
    {
        if (i == 0 || phrase[i - 1] == 32)
        {
            if ((phrase[i] >= 'a') && (phrase[i] <= 'z'))
            {
                phrase[i] = phrase[i] - 32;
            }
        }
        
        
    }
    
}
",1
phao209,1696840459,1,"#include <stdio.h>

// Helper function to check if a character is a lowercase letter
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Helper function to convert a character to uppercase
char toUpperCase(char c) {
    if (isLowerCase(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

// Function to capitalize the first character of each word in a phrase
void Capitalise(char phrase[]) {
    int capitalizeNext = 1; // Flag to indicate whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i]) && capitalizeNext) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0; // Set the flag to lowercase for the next character
        } else if (!isLowerCase(phrase[i]) && phrase[i] != ' ') {
            capitalizeNext = 1; // Reset the flag if a non-lowercase character is encountered
        }
    }
}",0
phao209,1696840802,2,"#include <stdio.h>
#include <ctype.h> // for islower and toupper functions

void Capitalize(char *phrase) {
    int i;
    int capitalizeNext = 1; // Flag to determine whether the next character should be capitalized

    for (i = 0; phrase[i] != '\0'; i++) {
        if (islower(phrase[i]) && capitalizeNext) {
            phrase[i] = toupper(phrase[i]);
            capitalizeNext = 0;
        } else if (!islower(phrase[i])) {
            capitalizeNext = 1; // Reset the flag if the current character is not a lowercase letter
        }
    }
}",0
phao209,1696841670,3,"#include <stdio.h>
#include <ctype.h> // for islower and toupper functions

void Capitalise(char *phrase) {
    int i;
    int capitaliseNext = 1; // Flag to determine whether the next character should be capitalized

    for (i = 0; phrase[i] != '\0'; i++) {
        if (islower(phrase[i]) && capitaliseNext) {
            phrase[i] = toupper(phrase[i]);
            capitaliseNext = 0;
        } else if (!islower(phrase[i])) {
            capitaliseNext = 1; // Reset the flag if the current character is not a lowercase letter
        }
    }
}",0
phao209,1696842258,4,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    char *ptr = phrase;
    int capitalise = 1; // Flag to determine whether the next character should be capitalized

    while (*ptr != '\0') {
        if (isalpha(*ptr)) {
            if (capitalise) {
                *ptr = toupper(*ptr);
                capitalise = 0;
            } else {
                *ptr = tolower(*ptr);
            }
        } else {
            capitalise = 1; // Reset the flag if the current character is not alphabetic
        }

        ptr++;
    }
}
",0
pkim777,1696213150,1,"void Capitalise(char *phrase)
{
    int i = 0;
    int reset = 1;
    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (reset == 1) {
                phrase[i] = phrase[i] - ('a' - 'A');
                reset = 0;
            }
        } else if (phrase[i] == ' ') {
            reset = 1;
        }
        i++;
    }
}",0
pkim777,1696291644,2,"void Capitalise(char *phrase)
{
    int i = 0;
    int reset = 1;
    while (phrase[i] != '\0') {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (reset == 1) {
                phrase[i] = phrase[i] - ('a' - 'A');
                reset = 0;
            }
        } else if (phrase[i] == ' ') {
            reset = 1;
        } else {
            reset = 0;
        }
        i++;
    }
}",1
plah275,1696757662,1,"void Capitalise(char *phrase)
{
    int length1, i;
    
    length1 = strlen(phrase);
    
    for (i = 0; i < length1; i++) {
        if (phrase[i] == ' ') {
            
            phrase[i + 1] = phrase[i + 1] - ( 'a' - 'A');
            
        } else if (i == 0) {
            
        phrase[i] = phrase[i] - ( 'a' - 'A');
        }
    }
    
}
",0
plah275,1696762342,2,"void Capitalise(char *phrase)
{
    int length1, i;
    
    length1 = strlen(phrase);
    
    for (i = 0; i < length1; i++) {
        if ((phrase[i] == ' ')&&(96 < phrase[i + 1])&&(phrase[i + 1]< 123)) {
            
            phrase[i + 1] = phrase[i + 1] - ( 'a' - 'A');
            
        } else if ((i == 0)&&(96 < phrase[i])&&(phrase[i] < 123)) {
            
        phrase[i] = phrase[i] - ( 'a' - 'A');
        }
    }
    
}
",1
plan310,1696561540,1,"void Capitalise(char *phrase)
{
    int i;
    
    if ((phrase[0] >= 97) && (phrase[0] <= 122)) {
        phrase[0] = phrase[0] - 32;
    }
    
    for (i = 0; i <= 100; i++) {
        if ((phrase[i] == 32) && (phrase[i + 1] >= 97) && (phrase[i + 1] <= 122)) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}
",1
ppax865,1696827362,1,"void Capitalise(char *phrase)
{
    char FirstLetter;
    
    FirstLetter = phrase[0];
    (double)FirstLetter;
    FirstLetter = FirstLetter - 32;
    phrase[0] = (char)FirstLetter;
    
    
}",0
ppax865,1696827381,2,"void Capitalise(char *phrase)
{

    FirstLetter = phrase[0];
    FirstLetter = FirstLetter - 32;
    phrase[0] = (char)FirstLetter;
    
    
}",0
ppax865,1696827419,3,"void Capitalise(char *phrase)
{
    char FirstLetter
    FirstLetter = phrase[0];
    FirstLetter = FirstLetter - 32;
    phrase[0] = (char)FirstLetter;
    
    
}",0
ppax865,1696827426,4,"void Capitalise(char *phrase)
{
    char FirstLetter;
    FirstLetter = phrase[0];
    FirstLetter = FirstLetter - 32;
    phrase[0] = (char)FirstLetter;
    
    
}",0
ppax865,1696828587,5,"void Capitalise(char *phrase)
{
    char FirstLetter;
    
    FirstLetter = phrase[0];
    if (FirstLetter > 122 || FirstLetter < 65){
        void exit(int);
    } else{
        FirstLetter = FirstLetter - 32;
        phrase[0] = (char)FirstLetter;
    }
}",0
pper327,1696675330,1,"void Capitalise(char *phrase)
{
   int i = 1;

    /*Capitalise first letter*/
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase [0] = phrase [0] - ('a' - 'A');    
    }

    /*Capitalise letter following a backspace character*/
    while (phrase [i] != '\0'){
        if (phrase [i] == ' ') {
            phrase [i+1] = phrase [i+1] - ('a' - 'A');
        }
        i++;
    } 
}
",0
pper327,1696675514,2,"void Capitalise(char *phrase)
{
    int i = 1;

    /*Capitalise first letter*/
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase [0] = phrase [0] - ('a' - 'A');    
    }

    /*Capitalise letter following a backspace character*/
    while (phrase [i] != '\0'){
        if (phrase [i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
            phrase [i+1] = phrase [i+1] - ('a' - 'A');
        }
        i++;
    }
}
",1
ppra303,1696806208,1,"void Capitalise(char *phrase)
{
      int capitalise_the_next1 = 1; //Indicvsted whether the bnext letter shoudl be captilised


/* Stops until we reach the end after going through each letter */
    for (int p = 0; phrase[p] != '\0'; p++) {
       
        if (phrase[p] >= 'a' && phrase[p] <= 'z' && capitalise_the_next1) { // Make sure the letter is between a and z
            phrase[p] -= 32; // Turns lowercase into biggercase
            capitalise_the_next1 = 0;
        
            
        }
        else if (phrase[p] == ' ') // Here the space indicates that 
           { capitalise_the_next1 = 1;
        }
    }
}
",0
ppra303,1696806943,2,"void Capitalise(char *phrase)
{
     int capitalise_the_next1 = 1; // Indicated whether the next letter should be capitalized

    // Stops until we reach the end after going through each letter
    for (int p = 0; phrase[p] != '\0'; p++) {
        if (phrase[p] >= 'a' && phrase[p] <= 'z' && capitalise_the_next1) { // Make sure the letter is between 'a' and 'z'
            phrase[p] -= 32; // Turns lowercase into uppercase
            capitalise_the_next1 = 0;
        }
        else if (phrase[p] == ' ') // Here the space indicates that the next letter should be capitalized
        {
            capitalise_the_next1 = 1;
        } else {
            capitalise_the_next1 = 0; // Reset for non-lowercase characters
        }
    }
}
",1
pshe539,1696306073,1,"void Capitalise(char *phrase)
{
    int phrase_length = 0;
    while (phrase[phrase_length] != '\0'){
        phrase_length++;
    }

    phrase[0] = (phrase[0] - 32);

    for (int i = 0; i < phrase_length; i++){
        if (phrase[i] == ' ') {
            phrase[i+1] = (phrase[i+1] - 32);
        }
    }
}",0
pshe539,1696306406,2,"void Capitalise(char *phrase)
{
    int phrase_length = 0;
    while (phrase[phrase_length] != '\0'){
        phrase_length++;
    }

    if (phrase[0] > 96 && phrase[0] < 123){
        phrase[0] = (phrase[0] - 32);
    }
    
    for (int i = 0; i < phrase_length; i++){
        if (phrase[i] == ' ') {
            if (phrase[i+1] > 96 && phrase[i+1] < 123){
                phrase[i+1] = (phrase[i+1] - 32);
            }
        }
    }
}",1
psin207,1696307810,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i=1;
    int x=strlen(phrase);
    while (i<x) {
        if (phrase[i-1]==32){
            phrase[i]=phrase[i]-(32);
        }
        i++;
    }
    phrase[0]=phrase[0]-(32);
}
",0
psin207,1696308340,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i=1;
    int x=strlen(phrase);
    while (i<x) {
        if (phrase[i-1]==32 && 97<=phrase[i] && phrase[i]<=122){
            phrase[i]=phrase[i]-(32);
        }
        i++;
    }
    if (97<=phrase[0] && phrase[0]<=122){
       phrase[0]=phrase[0]-(32);
    }
}
",1
pwat943,1696341454,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    // A flag to indicate if the next character should be capitalized
    int capitalizeNext = 1; 
    
    for (int i = 0; i < length; i++) { 
        // Check if the character is alphabetic
        if (isalpha(phrase[i])) { 
           
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                
                // Capitalized, so set the flag to 0
                capitalizeNext = 0; 
                
            } 
            else {
                phrase[i] = tolower(phrase[i]);
            }
        } 
        else {
            // Reset the flag when a non-alphabetic character is encountered
        capitalizeNext = 1; 
        }
    }
}
",0
pwat943,1696341617,2,"void Capitalise(char *phrase)
{
    int capitalizeNext = 1; // Flag to indicate the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        // Check if the current character is a space
        if (phrase[i] == ' ') {
            capitalizeNext = 1; // Set the flag to capitalize the next character
        }
        // Check if the current character is a lowercase alphabetic character
        else if (islower(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(str[i]); // Capitalize the character
                capitalizeNext = 0; // Reset the flag
            }
        }
        // Check if the current character is an uppercase alphabetic character
        else if (isupper(phrase[i])) {
            capitalizeNext = 0; 
            // Reset the flag, as uppercase letters indicate a word boundary
        }
    }
}
",0
pwat943,1696341629,3,"void Capitalise(char *phrase)
{
    int capitalizeNext = 1; // Flag to indicate the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        // Check if the current character is a space
        if (phrase[i] == ' ') {
            capitalizeNext = 1; // Set the flag to capitalize the next character
        }
        // Check if the current character is a lowercase alphabetic character
        else if (islower(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]); // Capitalize the character
                capitalizeNext = 0; // Reset the flag
            }
        }
        // Check if the current character is an uppercase alphabetic character
        else if (isupper(phrase[i])) {
            capitalizeNext = 0; 
            // Reset the flag, as uppercase letters indicate a word boundary
        }
    }
}
",0
pwat943,1696346976,4,"void Capitalise(char *phrase) {
    
    int i, strLen = strlen(phrase);
    
    for (i = 0; i < strLen; i++) {
        if (i == 0 || phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z')
                phrase[i] = phrase[i] - 'a' + 'A';
        }
    }
}
",1
pwu278,1696231125,1,"void Capitalise(char* phrase)
{
	int length = 0;
	int insidelength = 0;

	while (phrase[length] != ' ') {
		if (phrase[length] >= 'a' && phrase[length] <= 'z') {
			phrase[length] = phrase[length] - ('a' - 'A');
			break;
		}
		length++;
	}

	length = 0;

	while (phrase[length] != '\0') {
		insidelength = length;
		if (phrase[insidelength] == ' ') {
			while (phrase[insidelength] < 'a' && phrase[insidelength] < 'z') {
				insidelength++;
				if (phrase[insidelength] >= 'a' && phrase[insidelength] <= 'z') {
					phrase[insidelength] = phrase[insidelength] - ('a' - 'A');
					break;
				} 
			}

		}
		length++;
	}
}",0
pwu278,1696231740,2,"void Capitalise(char* phrase)
{
	int length = 0;
	int insidelength = 0;

	while (phrase[length] != ' ') {
		if (phrase[length] >= 'a' && phrase[length] <= 'z') {
			phrase[length] = phrase[length] - ('a' - 'A');
			break;
		}
		if (phrase[insidelength] >= 'A' && phrase[insidelength] <= 'Z') {
			break;
		}
		length++;
	}

	length = 0;

	while (phrase[length] != '\0') {
		insidelength = length;
		if (phrase[insidelength] == ' ') {
			while (phrase[insidelength] < 'a' && phrase[insidelength] < 'z') {
				insidelength++;
				if (phrase[insidelength] >= 'a' && phrase[insidelength] <= 'z') {
					phrase[insidelength] = phrase[insidelength] - ('a' - 'A');
					break;
				} 
				if (phrase[insidelength] >= 'A' && phrase[insidelength] <= 'Z') {
					break;
				}
			}

		}
		length++;
	}
}",0
pwu278,1696244405,3,"void Capitalise(char* phrase)
{
	int length;

	length = 0;
	if (phrase[length] >= 'a' && phrase[length] <= 'z') {
		phrase[length] = phrase[length] - ('a' - 'A');
	}

	while (phrase[length] != '\0') {
		if (phrase[length] == ' ') {
			if (phrase[length + 1] >= 'a' && phrase[length + 1] <= 'z') {
				phrase[length + 1] = phrase[length + 1] - ('a' - 'A');
			}
		}
		length++;
	}
}",1
pxie161,1696318846,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0') {
    i++;
    }

    if (phrase[0] >= 97 && phrase[0] <= 122){
        phrase[0] = phrase[0] - 32;
    }

    for(int j = 0; j <= i; j++){
        if(phrase[j] == 32){
            if(phrase[j+1] >= 97 && phrase[j+1] <= 122){
                phrase[j+1] = phrase[j+1] - 32;
            }
        }
    }
}",1
pyou182,1696320804,1,"void Capitalise(char *phrase)
{
     int i = 0;
    while (phrase[i] != '\0') {
        if  (phrase[i] >= 'a' && phrase[i] <= 'z' && (phrase[i-1] == ' '|| (i-1) < 0)) {   
        phrase[i] = phrase[i] - ('a' - 'A');     
    }
    i++;
    }
}
",1
qche619,1696845365,1,"void Capitalise(char *phrase)
{
    int Capitalise = 1;
    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (islower(phrase[i]) && Capitalise) 
        {
            phrase[i] = toupper(phrase[i]);
            Capitalise = 0;
        } 
        else if (isspace(phrase[i])) 
        {
            Capitalise = 1;
        } 
        else 
        {
            Capitalise = 0;
        }
    }
}
",1
qkan386,1696305266,1,"void Capitalise(char* phrase){

	int length = strlen(phrase);

	if (phrase[0] > 96 && phrase[0] < 123) {
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] > 96 && phrase[i + 1] < 123) {
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
	}
}
",1
qmcc945,1696274054,1,"void Capitalise(char *phrase)
{
    int i, length;
    length = 0;
    while (phrase[length] != '\0') {
        length++;
    }
    
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - 32;
    }

    for(i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            if (phrase[(i+1)] >= 97 && phrase[(i+1)] <= 122)
                phrase[(i+1)] = phrase[(i+1)] - 32;
        }
    }
}
",1
qtra338,1696370156,1,"
void Capitalise(char *phrase) {
    int i = 1; 

    phrase[0] = CapitaliseLetter(phrase[0]);

    while (phrase[i] != '\0') {
        if (phrase[i-1] == ' ') {
            phrase[i] = CapitaliseLetter(phrase[i]);
        } 
        i++; 
    } 

}


char CapitaliseLetter(char letter) {

    if (letter >= 'a' && letter <= 'z') {
        letter = letter - ('a' - 'A');
    }

    return letter; 
}
",0
qtra338,1696370236,2,"
void Capitalise(char *phrase);

char CapitaliseLetter(char letter);



void Capitalise(char *phrase) {
    int i = 1; 

    phrase[0] = CapitaliseLetter(phrase[0]);

    while (phrase[i] != '\0') {
        if (phrase[i-1] == ' ') {
            phrase[i] = CapitaliseLetter(phrase[i]);
        } 
        i++; 
    } 

}


char CapitaliseLetter(char letter) {

    if (letter >= 'a' && letter <= 'z') {
        letter = letter - ('a' - 'A');
    }

    return letter; 
}
",1
qwu129,1696844071,1,"void Capitalise(char *phrase)
{
    int checkcase (char character)
    { 
        return character >= 'a' && character <= 'z'
    }
char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) {
    
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    
   
    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }
}

",0
qwu129,1696844108,2,"void Capitalise(char *phrase)
{
    int checkcase (char character)
    { 
        return character >= 'a' && character <= 'z'
    }
char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) {
    
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    
   
    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }


",0
qwu129,1696844137,3,"void Capitalise(char *phrase)

char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) {
   
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }
}
",0
qwu129,1696844223,4,"void Capitalise(char *phrase)
int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) {
    
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }
}

",0
qwu129,1696844250,5,"void Capitalise(char *phrase)
int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) {
  
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }
}
",0
qwu129,1696844380,6,"void Capitalise(char *phrase)
int IsitLowerCase(char characters) 
{
    return characters >= 'a' && characters <= 'z';
}

char Capit(char characters) 
{
    if (IsitLowerCase(characters)) 
    {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) 
{
  
    if (IsLowerCase(phrase[0])) 
    {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) 
    {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) 
        {
            phrase[i] = Capit(phrase[i]);
        }
    }
}
",0
qwu129,1696844410,7,"void Capitalise(char *phrase)
int IsitLowerCase(char characters) 
{
    return characters >= 'a' && characters <= 'z'
}

char Capit(char characters) 
{
    if (IsitLowerCase(characters)) 
    {
        return characters - ('a' - 'A')
    }
    return characters;
}

void Capitalise(char *phrase) 
{
  
    if (IsLowerCase(phrase[0])) 
    {
        phrase[0] = Capit(phrase[0])
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) 
    {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) 
        {
            phrase[i] = Capit(phrase[i])
        }
    }
}
",0
qwu129,1696844688,8,"void Capitalise(char *phrase)


int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) {
   
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }
}

",0
qwu129,1696844694,9,"void Capitalise(char *phrase)
#include <stdio.h>

int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) {
   
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }
}

",0
qwu129,1696844755,10,"void Capitalise(char *phrase)

int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

 {
   
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }
}

",0
qwu129,1696844760,11,"void Capitalise(char *phrase)

int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

 
   
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }

",0
qwu129,1696844812,12,"void Capitalise(char *phrase)

int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }

}

 
   
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }

",0
qwu129,1696844827,13,"void Capitalise(char *phrase)

int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }

}

 
   
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    
void Capitalise(char *phrase)
    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }

",0
qwu129,1696844899,14,"#include <stdio.h>


int IsLowerCase(char characters) {
    return characters >= 'a' && characters <= 'z';
}


char Capit(char characters) {
    if (IsLowerCase(characters)) {
        return characters - ('a' - 'A');
    }
    return characters;
}

void Capitalise(char *phrase) {
  
    if (IsLowerCase(phrase[0])) {
        phrase[0] = Capit(phrase[0]);
    }
    

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && IsLowerCase(phrase[i])) {
            phrase[i] = Capit(phrase[i]);
        }
    }
}",1
qzho943,1696286137,1,"void Capitalise(char *phrase)
{
  //find length
    int length = 0;
    while(phrase[length]!='\0'){
        length++;
    }
    
    //uppercase first letter in the phrase
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0]=phrase[0]-('a'-'A');
    }
    
    //uppercase every letter afyer while space
    int i;
    for (i=0; i<length; i++){
        if (phrase[i]==' '&& phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z'){
            phrase[i+1]=phrase[i+1]-('a'-'A');
        }
    }
      
}
",1
raic989,1696636469,1,"void Capitalise(char *phrase)
{
    int a = strlen(phrase);
    if ( (phrase[0]>=97) && (phrase[0]<= 122) ) {
    phrase[0]=phrase[0]-32;
    }
    
    for (int i=1; i<a-1; i++) {
        if( (phrase[i]>=97) && (phrase[i]<=122) && (phrase[i-1] == ' ') ) {
            phrase[i]=phrase[i]-32;
        }
    }
}
",1
rand321,1696221354,1,"void Capitalise(char *phrase)
{
  int i, l;
    l = strlen(phrase);
    
    if((phrase[0] >= 'a') && (phrase[0] <= 'z')){
            phrase[0] = phrase[0] - ('a'-'A');
     }  
     
    for(i = 0; i < l; i++){
        if(phrase[i]==32){ 
            if((phrase[i+1] >= 'a') && (phrase[i+1] <= 'z')){
            phrase[i+1] = phrase[i+1] - ('a'-'A');
            }
        }
    }  
}
",1
rbaj698,1696845488,1,"void Capitalise(char *phrase)
{
    
    int i = 0;
    while (phrase[i] != '\0') {  
        if (i == 0) {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
               phrase[i] = (char)(phrase[i] - ('a' - 'A'));
     }
     }else if (phrase[i-1] == ' ') {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
               phrase[i] = (char)(phrase[i] - ('a' - 'A'));
            }
              
          }
          i++; 
         
     }
        
}
  
",1
rbat374,1696381151,1,"void Capitalise(char *phrase)
{
    char upper(char letter)
    {
        int diff = 'a' - 'A';
        char u_letter = letter - diff;
        return u_letter;
    }
    int i;
    int length = strlen(phrase);
    for (i = 0; i < length; i++){
        if (phrase[i] == ' '){
            phrase[i+1] = upper(phrase[i+1]);
        }
        else if (i == 0 && phrase[i] != ' '){
            phrase[i] = upper(phrase[i]);
        }
    }
}",0
rbat374,1696400661,2,"void Capitalise(char *phrase)
{
    char upper(char letter)
    {
        int diff = 'a' - 'A';
        char u_letter = letter - diff;
        return u_letter;
    }
    int i;
    int length = strlen(phrase);
    for (i = 0; i < length; i++){
        if (phrase[i] > 90 || phrase[i] == 32){
            if (phrase[i] == ' ' && phrase[i+1] > 90){
                phrase[i+1] = upper(phrase[i+1]);
            }
            else if (i == 0 && phrase[i] > 90){
                phrase[i] = upper(phrase[i]);
            }
            
        }
        
    }
}",1
rbat561,1696229229,1,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    if (phrase[0] >= 97 && phrase[0] <= 122)
    {
        phrase[0] = phrase[0] - 32;
    }

    for (int i = 0; i < len; i++)
    {
        if (phrase[i] == 32)
        {
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122)
            {
            phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }
}",1
rbui853,1696326046,1,"void Capitalise(char* phrase)
{
    int length = strlen(phrase);
    int i;
    
    for (i = 0; i < length; i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122) {
            if (i == 0 || phrase[i - 1] == ' ') {
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",1
rbus291,1696397135,1,"void Capitalize(char *phrase) {
    int capitalize = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitalize) {
            phrase[i] -= ('a' - 'A'); 
            capitalize = 0; 
        } else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n') {
            capitalize = 1; 
        } else {
            capitalize = 0; 
        }
    }
}
",0
rbus291,1696397177,2,"void Capitalise(char *phrase) {
    int capitalise = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && capitalise) {
            phrase[i] -= ('a' - 'A'); 
            capitalise = 0; 
        } else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n') {
            capitalise = 1; 
        } else {
            capitalise = 0; 
        }
    }
}
",1
rchi339,1696807466,1,"void Capitalise(char *phrase)
{
    int end = FindEnd(phrase);

    TurnCapital(phrase, 0);
    
    for (int i = 0; i < end; i++){
        if (phrase[i] == 32){
            i++;
            TurnCapital(phrase, i);
        }
    }
}

int FindEnd(char *phrase)
{
    int f = 0;
    bool findEnd = true;
    int endIndex;
    
    while (findEnd = true){
        if (phrase[f] == 0){
            endIndex = f - 1;
            findEnd = false;
            return f;
        }
        f++;
    }
    return endIndex;
}

void TurnCapital (char *phrase, int index)
{
    if(phrase[index] >= 97 && phrase[index] <=122){
        phrase[index] = phrase[index] - 32;
    }
}",0
rchi339,1696807755,2,"#include <stdio.h>
#include <stdbool.h>

int FindEnd(char *phrase)
{
    int f = 0;
    bool findEnd = true;
    int endIndex;
    
    while (findEnd = true){
        if (phrase[f] == 0){
            endIndex = f - 1;
            findEnd = false;
            return f;
        }
        f++;
    }
    return endIndex;
}

void TurnCapital (char *phrase, int index)
{
    if(phrase[index] >= 97 && phrase[index] <=122){
        phrase[index] = phrase[index] - 32;
    }
}

void Capitalise(char *phrase)
{
    int end = FindEnd(phrase);

    TurnCapital(phrase, 0);
    
    for (int i = 0; i < end; i++){
        if (phrase[i] == 32){
            i++;
            TurnCapital(phrase, i);
        }
    }
}",0
rchi339,1696807837,3,"#include <stdio.h>
#include <stdbool.h>

int FindEnd(char *phrase)
{
    int f = 0;
    bool findEnd = true;
    int endIndex;
    
    while ((findEnd = true)){
        if (phrase[f] == 0){
            endIndex = f - 1;
            findEnd = false;
            return f;
        }
        f++;
    }
    return endIndex;
}

void TurnCapital (char *phrase, int index)
{
    if(phrase[index] >= 97 && phrase[index] <=122){
        phrase[index] = phrase[index] - 32;
    }
}

void Capitalise(char *phrase)
{
    int end = FindEnd(phrase);

    TurnCapital(phrase, 0);
    
    for (int i = 0; i < end; i++){
        if (phrase[i] == 32){
            i++;
            TurnCapital(phrase, i);
        }
    }
}",1
rcou530,1696317918,1,"char Uppercased(char letter){
		letter = letter - 32;
	return letter;
	}

void Capitalise(char *phrase){
	int i =0;
	for (i=0; i<strlen(phrase);i++){
		if (97<= phrase[i] && phrase[i] <=122){
			if (i == 0 || phrase[i-1] == 32){
				phrase[i] = Uppercased(phrase[i]);
			}
		}
	}
	return;
}
",1
rdas322,1696827164,1,"void Capitalise(char *sent)
{
    
    int a;
    
    for (a = 0; a <= strlen(sent); a++) {
        if (a == 0 && sent[0] >= 97) {
            sent[0] = sent[0] - 32;
        } else if (sent[a + 1] >= 97 && sent[a] == ' ') {
            sent[a + 1] = sent[a + 1] -32;
        }
    }
    
    
}
",1
rdic384,1696848648,1,"/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void capitalise(char *phrase, int index){
    phrase[index] = phrase[index] - 32;
}

void Capitalise(char *phrase)
{
    int j = 0;
    int T = 0;
    int endIndex = 0;
    
    while (T == 0){
        if (phrase[j] == 0){
            
            endIndex = j;
            T = 1;
        }
        j++;
    }
    
    capitalise(phrase, 0);
    
    for(int i = 0; i < endIndex; i++){
        if (phrase[i] == 32){
            i++;
            capitalise(phrase, i);
        }
    }
}

void main(){
    char phrase[100] = ""god of nations at thy feet"";
    Capitalise(phrase);
    printf(""%s"", phrase);
}",0
rdic384,1696848660,2,"/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void capitalise(char *phrase, int index){
    phrase[index] = phrase[index] - 32;
}

void Capitalise(char *phrase)
{
    int j = 0;
    int T = 0;
    int endIndex = 0;
    
    while (T == 0){
        if (phrase[j] == 0){
            
            endIndex = j;
            T = 1;
        }
        j++;
    }
    
    capitalise(phrase, 0);
    
    for(int i = 0; i < endIndex; i++){
        if (phrase[i] == 32){
            i++;
            capitalise(phrase, i);
        }
    }
}",0
rdic384,1696848961,3,"/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <stdio.h>

void capitalise(char *phrase, int index){
    phrase[index] = phrase[index] - 32;
}

void Capitalise(char *phrase)
{
    int j = 0;
    int T = 0;
    int endIndex = 0;
    
    while (T == 0){
        if (phrase[j] == 0){
            
            endIndex = j;
            T = 1;
        }
        j++;
    }
    
    capitalise(phrase, 0);
    
    for(int i = 1; i < endIndex; i++){
        if (phrase[i] == 32){
            i++;
            capitalise(phrase, i);
        }
    }
}",0
rdic384,1696849079,4,"******************/
#include <stdio.h>

void capitalise(char *phrase, int index){
    if (phrase[index] >= 97 && phrase[index] <= 122){
        phrase[index] = phrase[index] - 32;
}

void Capitalise(char *phrase)
{
    int j = 0;
    int T = 0;
    int endIndex = 0;
    
    while (T == 0){
        if (phrase[j] == 0){
            
            endIndex = j;
            T = 1;
        }
        j++;
    }
    
    capitalise(phrase, 0);
    
    for(int i = 1; i < endIndex; i++){
        if (phrase[i] == 32){
            i++;
            capitalise(phrase, i);
        }
    }
}",0
rdic384,1696849102,5,"******************/
#include <stdio.h>

void capitalise(char *phrase, int index){
    if (phrase[index] >= 97) && (phrase[index] <= 122){
        phrase[index] = phrase[index] - 32;
}

void Capitalise(char *phrase)
{
    int j = 0;
    int T = 0;
    int endIndex = 0;
    
    while (T == 0){
        if (phrase[j] == 0){
            
            endIndex = j;
            T = 1;
        }
        j++;
    }
    
    capitalise(phrase, 0);
    
    for(int i = 1; i < endIndex; i++){
        if (phrase[i] == 32){
            i++;
            capitalise(phrase, i);
        }
    }
}",0
rdic384,1696849114,6,"******************/
#include <stdio.h>

void capitalise(char *phrase, int index){
    if ((phrase[index] >= 97) && (phrase[index] <= 122)){
        phrase[index] = phrase[index] - 32;
}

void Capitalise(char *phrase)
{
    int j = 0;
    int T = 0;
    int endIndex = 0;
    
    while (T == 0){
        if (phrase[j] == 0){
            
            endIndex = j;
            T = 1;
        }
        j++;
    }
    
    capitalise(phrase, 0);
    
    for(int i = 1; i < endIndex; i++){
        if (phrase[i] == 32){
            i++;
            capitalise(phrase, i);
        }
    }
}",0
rdic384,1696849124,7,"
#include <stdio.h>

void capitalise(char *phrase, int index){
    if ((phrase[index] >= 97) && (phrase[index] <= 122)){
        phrase[index] = phrase[index] - 32;
}

void Capitalise(char *phrase)
{
    int j = 0;
    int T = 0;
    int endIndex = 0;
    
    while (T == 0){
        if (phrase[j] == 0){
            
            endIndex = j;
            T = 1;
        }
        j++;
    }
    
    capitalise(phrase, 0);
    
    for(int i = 1; i < endIndex; i++){
        if (phrase[i] == 32){
            i++;
            capitalise(phrase, i);
        }
    }
}",0
rdon807,1696849030,1,"void Capitalise(char *phrase)
{
    int l = strlen(phrase);
    int c = 1; 

    for (int i = 0; i < l; i++) {
        char currentChar = phrase[i];

        if (isLowerCaseAlphabet(currentChar) && c) {
            phrase[i] = toUpperCase(currentChar);
            c = 0;
        } else if (!isLowerCaseAlphabet(currentChar)) {
            c = 1; 
        }
    }
}
",0
rdon807,1696849074,2,"void CapitalizeWords(char *phrase) {
    int length = strlen(phrase);
    int capitalizeNext = 1; 

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];

        if (isLowerCaseAlphabet(currentChar) && capitalizeNext) {
            phrase[i] = toUpperCase(currentChar);
            capitalizeNext = 0;
        } else if (!isLowerCaseAlphabet(currentChar)) {
            capitalizeNext = 1; 
        }
    }
}",0
rdun690,1696766959,1,"void Capitalise(char *phrase)
{
    int cap = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && cap) {
            phrase[i] -= 32;
            cap = 0;
        }
        
        else if (phrase[i] == ' ') {
            cap = 1;
        }
        
        else {
            cap = 0;
        }
    }
}",1
rger104,1696282878,1,"void Capitalise(char *phrase)
{
    int i=0;
while (phrase[i] != '\0') {
    //if not at end of string
	if ( (i == 0 | phrase[i - 1] == ' ') & (phrase[i]>='a')&(phrase[i]<='z')) {
		phrase[i] = phrase[i] - 32;
	}
	i++;
}   
}
",0
rger104,1696282924,2,"void Capitalise(char *phrase)
{
    int i=0;
while (phrase[i] != '\0') {
    //if not at end of string
	if ( ( (i == 0) | (phrase[i - 1] == ' ') ) & (phrase[i]>='a')&(phrase[i]<='z')) {
		phrase[i] = phrase[i] - 32;
	}
	i++;
}   
}
",1
rgre692,1696846644,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    if(phrase[0]>='a'&& phrase[0]<='z'){
        phrase[0] = phrase[0]-('a'-'A');
    }
     for (int i = 0; i < length; i++) {
        if(phrase[i]==' '){
                if(phrase[i+1]>= 'a'&& phrase[0]<='z'){
                    phrase[i+1] = phrase[i+1]-('a'-'A');

            
        }
    }
    
}
}",1
rkan756,1696301280,1,"void Capitalise(char *phrase)
{
    int i;

    for (i = 1; i < strlen(phrase) - 1; i++) {
        if (phrase[i] >= 97 && phrase[i] <= 122 && (phrase[i - 1] == 32)) {
                phrase[i] = phrase[i] - 32;                                    
        }
    }

    if (phrase[0] >= 97 && phrase[0]) {
        phrase[0] = phrase[0] - 32;
    } 
}",1
rkar406,1696211867,1,"void Capitalise(char* phrase)
{
	int n = strlen(phrase);
	phrase[0] = phrase[0] - ('a' - 'A');
	for (int i = 1; i < n; i++) {
		if (phrase[i-1] == ' ') {
			phrase[i] = phrase[i] - ('a'-'A');
		}
	}
}",0
rkar406,1696212111,2,"void Capitalise(char* phrase)
{
	int n = strlen(phrase);
	if ((phrase[0] <= 'z') && (phrase[0] >= 'a')) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	for (int i = 1; i < n; i++) {
		if ((phrase[i-1] == ' ')&&(phrase[i]<='z')&&(phrase[i]>='a')) {
			phrase[i] = phrase[i] - ('a'-'A');
		}
	}
}",1
rkha931,1696302135,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{ 
    int length = strlen(phrase);
    int i = 0; 

     if (phrase[i] >= 65 && phrase[i] <= 90) {
            phrase[i] = phrase[i];
        }

        else {
            phrase[i] = phrase[i] - 32; 
        }

    while (i < length) {
        if (phrase[i] == 32) {
        
        if (phrase[i + 1] >= 65 && phrase[i + 1] <= 90) {
            phrase[i+1] = phrase[i+1];
        }
         else {
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
    
         i++;

    }

    
}
",0
rkha931,1696302592,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{ 
    int length = strlen(phrase);
    int i = 0; 

     if (phrase[i] >= 65 && phrase[i] <= 90) {
            phrase[i] = phrase[i];
        }

        else {
            phrase[i] = phrase[i] - 32; 
        }

    while (i < length) {
        if (phrase[i] == 32) {
        
        if (phrase[i + 1] >= 65 && phrase[i + 1] <= 90) {
            phrase[i+1] = phrase[i+1];
        }
         else if (phrase[i+1]>= 97 && phrase[i+1]<= 122) {
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
    
         i++;

    }

    
}
",0
rkha931,1696303072,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{ 
    int length = strlen(phrase);
    int i = 0; 

     if (phrase[i] >= 65 && phrase[i] <= 90) {
            phrase[i] = phrase[i];
        }

        else if (phrase[i]>= 97 && phrase[i]<= 122) {
                phrase[i] = phrase[i] - 32;
            }

    while (i < length) {
        if (phrase[i] == 32) {
        
        if (phrase[i + 1] >= 65 && phrase[i + 1] <= 90) {
            phrase[i+1] = phrase[i+1];
        }
         else if (phrase[i+1]>= 97 && phrase[i+1]<= 122) {
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
    
         i++;

    }

    
}
",1
rkir245,1696720972,1,"char lower2upper(char character)
{
    if ((character >= 97) & (character <= 122))
    {
        character = character - 32;
    }

    return character;
}

void Capitalise(char *phrase)
{
    int phraseLength = strlen(phrase);
    char character;

    character = phrase[0];
    phrase[0] = lower2upper(character);

    for (int i = 0; i < phraseLength; i++)
    {
        if (phrase[i] == 32)
        {
            character = phrase[i + 1];
            phrase[i + 1] = lower2upper(character);
        }  
    }
    
}",1
rleg709,1696808380,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    int i, length, sp;
    length = strlen(phrase) - 1;
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 32;
        }
    for (i = 0; (i <= length); i++) { // nested for loop make a character a capital after space
        if (phrase[i] == ' ')
        {
            i = i + 1;
            if (phrase[i] >= 'A' && phrase[i] <= 'Z') // Use nested if execute condition if true
            {
            } 
            else 
            {
                phrase[i] = phrase[i] - 32; 
            }
        }
    }
}",0
rleg709,1696808506,2,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    int i, length;
    length = strlen(phrase) - 1;
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - 32;
        }
    for (i = 0; (i <= length); i++) { // nested for loop make a character a capital after space
        if (phrase[i] == ' ')
        {
            i = i + 1;
            if (phrase[i] >= 'A' && phrase[i] <= 'Z') // Use nested if execute condition if true
            {
            } 
            else 
            {
                phrase[i] = phrase[i] - 32; 
            }
        }
    }
}",0
rleg709,1696810325,3,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    int i, length;
    i = 0;
    length = strlen(phrase) - 1;
    if ((phrase[i] >= 'a' && phrase[i] <= 'z')) {
        phrase[i] = phrase[i] - 32;
        }
    for (i = 0; (i < length); i++) { // nested for loop make a character a capital after space
        if ((phrase[i] == ' ') && (phrase[i+1] >= 'a' && phrase[i+1] <= 'z')) // Use nested if execute condition if true
        {
            i = i + 1;
            phrase[i] = phrase[i] - 32; 
        }
    }
}",1
rlin108,1696401623,1,"char LowerToUpper(char letter)
{
	letter = letter - ('a' - 'A');

	return letter;
}

void Capitalise(char phrase[])
{
	int i;

	if (phrase[0] > 96) {
		phrase[0] = LowerToUpper(phrase[0]);
	}

	for (i = 1; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] > 96) {
				phrase[i + 1] = LowerToUpper(phrase[i + 1]);
			}
		}
	}

}
",1
rmar633,1696466921,1,"void MiniCap(char *letter, int pos)
{
    if (letter[pos] >= 97 && letter[pos] <= 122)
    {
        letter[pos] = letter[pos] - 32;
    }
}

void Capitalise(char *phrase)
{
    int i, length;
    length = strlen(phrase);
    for (i = 0; i<length; i++)
    {
        if (i == 0 && phrase[i] != 32)
        {
            MiniCap(phrase, i);
        }
        else
        {
            if (phrase[i - 1] == 32 && phrase[i] != 32)
            {
                MiniCap(phrase, i);
            }
        }
    }
    
}",1
rmur989,1696728845,1,"void Capitalise(char *phrase)
{
    int next = 1;
    int length = strlen(phrase);
    for (int i = 0; i < length; i++){
        if(next == 1){
            phrase[i] = phrase[i] - 32;
            next = 0;
        }
        if(phrase[i] == ' '){
            next = 1;
        }
        
    }
}",0
rmur989,1696728965,2,"void Capitalise(char *phrase)
{
    int next = 1;
    int length = strlen(phrase);
    for (int i = 0; i < length; i++){
        if(next == 1){
            
            if(phrase[i]>90){
                phrase[i] = phrase[i] - 32;
            }
            next = 0;
        }
        if(phrase[i] == ' '){
            next = 1;
        }
        
    }
}",1
rnga701,1696323603,1,"void Capitalise(char *phrase)
{
    int i=0;
    if (phrase[0]>='a'&& phrase[0] <= 'z'){
        phrase[0]=phrase[0]-('a'-'A'); 
    }

    while (phrase[i] != '\0'){
            if (phrase[i+1]>='a'&& phrase[i+1] <= 'z'){
                if(phrase[i]==' '){
                phrase[i+1]=phrase[i+1]-('a'-'A');               
            }           
        }
        i++;
    }   
}",1
rnig735,1696373401,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    len--;
    if ((phrase[0] >=97) && (phrase[0] <= 122)) {
        phrase[0] = phrase[0] - 32;
    }
    for (int i=1; i<=len; i++) {
        if (phrase[i] == ' ') {
            if ((phrase[i+1] >= 97) && (phrase[i+1] <= 122)) {
                phrase[i+1] = phrase[i+1] - 32;
            } 
        }
    }
}",1
rpar376,1696721335,1,"char uppercase(char lowerletter) {
    if (lowerletter>=97&&lowerletter<=122) {
        lowerletter=lowerletter-32;
    }
    return lowerletter;
}

void Capitalise(char *phrase)
{
    int endstring=0;
    int i=1;
    phrase[0]=uppercase(phrase[0]);
    while (endstring==0) {
        if (phrase[i]==' '){
            phrase[i+1]=uppercase(phrase[i+1]);
        } else if (phrase[i]=='\0') {
            endstring=1;
        }
        i++;
    }
}",1
rpat943,1696311874,1,"void Capitalise(char *phrase)
{
   int i;
   
   for(i = 0; i <= strlen(phrase); i++) {
       if (i == 0) {
       phrase[0] = phrase[0] - 32;
       }
       
       if (phrase[i] == ' ') {
           phrase[i + 1] = phrase[i + 1] - 32; 
       }
       
}
}
",0
rpat943,1696312112,2,"void Capitalise(char *phrase)
{
   int i;
   
   for(i = 0; i <= strlen(phrase); i++) {
       if (i == 0 && phrase[0] >= 97) {
       phrase[0] = phrase[0] - 32;
       }
       
       if (phrase[i] == ' ' && phrase[i + 1] >= 97) {
           phrase[i + 1] = phrase[i + 1] - 32; 
       }
       
}
}
",1
rraj313,1696211225,1,"void Capitalise(char *phrase)
{
    int i, length = strlen(phrase);
    for (i = 0; i < length; i++) {
        if (i == 0 && ((phrase[i] > 96) && (phrase[i] < 123))) {
            phrase[i] = phrase[i] - 32;
        } else if (phrase[i] == 32 && ((phrase[i + 1] > 96) && (phrase[i + 1] < 123))) {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}
",1
rroz381,1696749906,1,"void Capitalise(char *phrase) 
{
    //Capitalise first letter 
    phrase[0] = phrase[0] - ('a' - 'A');
    
    //Capitalise remaining letters 
    int i = 1;
    while (phrase[i] != '\0') {
        if (i == 0) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        else if (phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}",0
rroz381,1696750488,2,"void Capitalise(char *phrase) 
{
    //Caplitalise first letter with the condition that letter is between 'a' and 'z'
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    //Capitalise remaining letters with same condition
    int i = 1;
    while (phrase[i] != '\0') {
        if (i == 0 && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        else if (phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}
",1
rsha769,1696663317,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int capitalise = 1; //checking if next should be capitalised

    for (int i = 0; i < length; i++) {
        //if character is a space, then next letter will be capitalised
        if (phrase[i] == ' ') {
            capitalise = 1;
        }
        if (capitalise) {
            if (phrase[i]>= 'a' && phrase[i]<= 'z'){
                phrase [i] -= 32;  //ascii difference is 32
                capitalise = 0; 
            }
        }
        else{
            capitalise = 0;
        }
    }
}

",0
rsha769,1696666441,2,"void Capitalise(char *phrase) {
    int length = strlen(phrase);
    int capitalise = 1; 

    for (int i = 0; i < length; i++) {
        if (phrase[i] == ' '|| phrase[i] == '\n') {
            capitalise = 1;
            }
        else {
            if (capitalise && phrase[i] >= 'a' && phrase[i] <= 'z') {
                // the ascii difference is 32
                phrase[i] -= 32;
            }
            capitalise = 0; 
        }
    }
}",1
rsha970,1696637430,1,"void Capitalise(char *phrase)
{
    int capitalizeNext = 1; 

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            capitalizeNext = 1;
        } else if (capitalizeNext && isLowercaseAlphabet(phrase[i])) {
            phrase[i] -= 32; 
            capitalizeNext = 0; 
        } else {
            capitalizeNext = 0; 
        }
    }
}
",0
rsha970,1696641519,2,"void Capitalise(char *phrase)
{
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            capitalizeNext = 1;
        } else if (capitalizeNext && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] -= 32; 
            capitalizeNext = 0; 
        } else {
            capitalizeNext = 0; 
        }
    }
}
",1
rsin531,1696832612,1,"#include <stdio.h>

int isLowerCaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) {
    if (isLowerCaseAlpha(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalize(char *str) {
    int capitalizeNext = 1; 

    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == ' ') {
            capitalizeNext = 1; 
        } else if (capitalizeNext && isLowerCaseAlpha(str[i])) {
            str[i] = toUpperCase(str[i]); 
            capitalizeNext = 0; 
        } else {
            capitalizeNext = 0; 
        }
    }
}",0
rsin531,1696832939,2,"#include <stdio.h>

int isLowerCaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) {
    if (isLowerCaseAlpha(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalise(char *str) {
    int capitaliseNext = 1; 

    for (int i = 0; str[i] != '\0'; i++) {
        if (str[i] == ' ') {
            capitaliseNext = 1; 
        } else if (capitaliseNext && isLowerCaseAlpha(str[i])) {
            str[i] = toUpperCase(str[i]); 
            capitaliseNext = 0; 
        } else {
            capitaliseNext = 0; 
        }
    }
}",1
rsin719,1696808375,1,"void Capitalise(char *phrase)
{
   int CapitalizeNext = 1; 

    while (*phrase != '\0') {
        if (IsLowercaseAlphabet(*phrase)) {
            if (CapitalizeNext) {
                *phrase = *phrase - 32; 
                CapitalizeNext = 0; 
            }
        } else {
            CapitalizeNext = 1; 
        }

        phrase++;
    } 
}
",0
rsin719,1696808669,2,"void Capitalise(char *phrase)
{
    int CapitalizeNext = 1; 

    while (*phrase != '\0') {
        if ((*phrase >= 'a' && *phrase <= 'z') && CapitalizeNext) {
            *phrase = *phrase - 32; 
            CapitalizeNext = 0; 
        } else if (*phrase == ' ') {
            CapitalizeNext = 1; 
        }
        phrase++;
    }
}
",0
rsin719,1696809033,3,"void Capitalise(char *phrase)
{
    int CapitaliseNext = 1; 

    while (*phrase != '\0') {
        if (CapitaliseNext && *phrase >= 'a' && *phrase <= 'z') {
            *phrase = *phrase - 32; 
            CapitaliseNext = 0; 
        } else if (*phrase == ' ') {
            CapitaliseNext = 1; 
        } else {
        CapitaliseNext = 0;
        }
        phrase++;
    }
}
",1
rsmi948,1696640190,1,"void Capitalise(char *phrase)
{
    for (int i = 0; i < strlen(phrase); i++){
        if (phrase[i] == 32 && phrase[i + 1] <= 122 && phrase[i + 1] >= 97){
                phrase[i +  1] = phrase[i + 1] - 32;
        } else if (i == 0 && phrase[i] <= 122 && phrase[i] >= 97){
                phrase[i] = phrase[i] - 32;
        }
    }
}",1
rsta265,1696666203,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    if (97 <= phrase[0] && phrase[0] <= 122){
        phrase[0] = phrase[0] - 32; 
    }
    for (int i = 1; i < length; i++){
        if (phrase[i-1] == ' '){
            if (97 <= phrase[i] && phrase[i] <= 122){
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}
",1
rtan654,1696299354,1,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[i] >= 'a' && phrase[i]<= 'z'){
        phrase[i] = phrase[i] - ('a' - 'A');
    }

    while(phrase[i] != '\0'){
        if(phrase[i] >= 'a' && phrase[i]<= 'z' && phrase[i - 1] == ' '){
        phrase[i] = phrase[i] - ('a' - 'A');
        }
        i++;
    }
}",1
rtap592,1696840646,1,"char Upper(char c) {
	if (c >= 97 && c <= 122) {
		return c - (97 - 65);
	}
	return c;
}



void Capitalise(char *phrase)
{
	int length = strlen(phrase);
	int turnNextToCaps = 1;
	
	for (int i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			turnNextToCaps = 1;
		}
		else {
			if (turnNextToCaps) {
				phrase[i] = Upper(phrase[i]);
				turnNextToCaps = 0;
			}
		}
	}

}",1
rvog842,1696840106,1,"#include <stdio.h>

void Capitalize(char* phrase) {
    while (*phrase != '\0') {
        if (*phrase >= 'a' && *phrase <= 'z' && (*(phrase - 1) == ' ' || phrase == phrase))
        {
            *phrase -= 32; 
        }
        phrase++;
    }
}",0
rvog842,1696840140,2,"#include <stdio.h>

void Capitalise(char* phrase) {
    while (*phrase != '\0') {
        if (*phrase >= 'a' && *phrase <= 'z' && (*(phrase - 1) == ' ' || phrase == phrase))
        {
            *phrase -= 32; 
        }
        phrase++;
    }
}",0
rvog842,1696842010,3,"#include <stdio.h>

void Capitalize(char* phrase) {
    int capitalizeNext = 1; 
    
    while (*phrase != '\0') {
        if (capitalizeNext && *phrase >= 'a' && *phrase <= 'z') {
            *phrase -= 32;
        }
        
        capitalizeNext = (*phrase == ' ');
        
        phrase++;
    }
}",0
rvog842,1696842076,4,"#include <stdio.h>

void Capitalise(char* phrase) {
    int capitalizeNext = 1; 
    
    while (*phrase != '\0') {
        if (capitalizeNext && *phrase >= 'a' && *phrase <= 'z') {
            *phrase -= 32;
        }
        
        capitalizeNext = (*phrase == ' ');
        
        phrase++;
    }
}",1
rwar748,1696237848,1,"void Capitalise(char *phrase)
{
    int j = strlen(phrase) - 1;
    while(j>=0){
        phrase[j+1] = phrase[j];
        j--;
    }
    phrase[0] = ' ';
    
    
    
    int i = 0;
    while(i <= (strlen(phrase) -1)){
    if(phrase[i] == ' ' ){
        i = i+1;
        if(phrase[i] >= 'a' && phrase[i] <= 'z'){
             phrase[i] = phrase[i] - ('a' - 'A');
        }   
    }
    i++;
    } 

    int y = 0;
    while(y<= strlen(phrase) - 1){
        phrase[y] = phrase[y+1];
        y++;
    }

}",1
rzha972,1696420204,1,"#include <stdio.h>
#include <string.h>

char caplett(char x){
    int newchar;
    if (x >= 'a' && x <= 'z'){
        newchar = x - 32;
        return newchar;
    }
    return x;
}

void Capitalise(char *phrase)
{
    int size;
    int i;
    size = strlen(phrase) - 1;
    phrase[0] = caplett(phrase[0]);
    for (i = 0; i <= size && phrase[i] != '\0'; i++){
        if (phrase[i] == ' '){
            phrase[i+1] = caplett(phrase[i+1]);
        }
    }

}
",1
sabo272,1696281980,1,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0'){

		if ( i == 0 && (phrase[i] >= 'a') && (phrase[i] <= 'z') ){
			phrase[i] = phrase[i] - 32; // First character is always capitalised.
		}

		if (phrase[i] == 32){

			if ((phrase[i+1] >= 'a') && (phrase[i+1] <= 'z') ){
				phrase[i+1] = phrase[i+1] - 32; // Character next to space character must be capitalised.
			}
		}
		i++;
	}

}
",1
sali153,1696666233,1,"void Capitalise(char* phrase){

	int length = strlen(phrase);
	if(phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 1; i < length; i++)
	{
		if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i-1] == ' ')
		{
			phrase[i] = phrase[i] - 32;
		}
	}
	return;

}
",1
sban919,1696338173,1,"#include <stdio.h>
#include <string.h>

/* UpperCase is a helper function that converts a lower case to a upper case. */
char UpperCase(char c)
{
    if (c >= 'a' && c <= 'z')
    {
        return c - 32;
    }
    return c;
}

/* Captialise function take a phrase as an input and capitalises the first character in each word in the phrase. */
void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int firstChar = 1;
    
    for (int i = 0; i < length; i++)
    {
        if (firstChar && phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            phrase[i] = UpperCase(phrase[i]);
            firstChar = 0;
        }
        else if (phrase[i] == ' ')
        {
            firstChar = 1;
        }
    }
}
",0
sban919,1696338657,2,"#include <stdio.h>
#include <string.h>

/* UpperCase is a helper function that converts a lower case to a upper case. */
char UpperCase(char c)
{
    if (c >= 'a' && c <= 'z')
    {
        return c - 32;
    }
    return c;
}

/* Captialise function take a phrase as an input and capitalises the first character in each word in the phrase. */
void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int firstChar = 1;
    
    for (int i = 0; i < length; i++)
    {
        if (firstChar && phrase[i] >= 'a' && phrase[i] <= 'z')
        {
            phrase[i] = UpperCase(phrase[i]);
            firstChar = 0;
        }
        else if (phrase[i] == ' ')
        {
            firstChar = 1;
        }
        else{
            firstChar = 0;
        }
    }
}
",1
sbas887,1696706337,1,"void Capitalise(char *phrase) {
    int stringLength = strlen(phrase);
    int temp;

    if (((int)phrase[0] >= 97 ) && ((int)phrase[0] <= 122)) {
        temp = (int)phrase[0];
        phrase[0] = (char)(temp - 32);
    }

    for (int i = 0; i < stringLength; i++) {
        if ((int)phrase[i] == 32) {
            if (((int)phrase[i+1] >= 97) && ((int)phrase[i+1] <= 122)) {
                temp = (int)phrase[i+1];
                phrase[i+1] = (char)(temp - 32);
            }
        }
    }

}",1
sben564,1696641934,1,"#include <stdio.h>
#include <string.h>

void LowerToUpper(char *c) {
    
    if (*c >= 'a' && *c <= 'z') {
        
        *c = *c - 32;
    }
    
}


void Capitalise(char *phrase)
{
    
    int length = strlen(phrase);
    
    LowerToUpper(&phrase[0]);
    
    for (int i = 0; i <=length; i++){
        
        if (phrase[i] == ' ') {
            
            LowerToUpper(&phrase[i + 1]);
            
        }
        
    }
}
",1
sbha564,1696842385,1,"void Capitalise(char *phrase)
{
    phrase[0] = Uppercase(phrase[0]);

    for (int i = 1; phrase[i] != '\0'; i+= 1) {
        if (phrase[i - 1] == ' ') {
            phrase[i] = Uppercase(phrase[i]);
        }
    }
}",0
sbha564,1696842697,2,"
int isLowerCaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) {
    if (isLowerCaseAlpha(c)) {
        // Convert lower case to upper case
        return c - ('a' - 'A');
    } else {
        return c;
    }
}

void Capitalise(char *phrase) {
    phrase[0] = toUpperCase(phrase[0]);

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && isLowerCaseAlpha(phrase[i])) {
            phrase[i] = toUpperCase(phrase[i]);
        }
    }
}




",1
sbha564,1696847242,3,"
int isLowerCaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) {
    if (isLowerCaseAlpha(c)) {
        return c - ('a' - 'A');
    } else {
        return c;
    }
}

void Capitalise(char *phrase) {
    phrase[0] = toUpperCase(phrase[0]);

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && isLowerCaseAlpha(phrase[i])) {
            phrase[i] = toUpperCase(phrase[i]);
        }
    }
}




",1
sbha564,1696847325,4,"
int Lowercase(char c) {
    return (c >= 'a' && c <= 'z');
}

char Uppercase(char c) {
    if (Lowercase(c)) {
        return c - ('a' - 'A');
    } else {
        return c;
    }
}

void Capitalise(char *phrase) {
    phrase[0] = Uppercase(phrase[0]);

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && Lowercase(phrase[i])) {
            phrase[i] = Uppercase(phrase[i]);
        }
    }
}




",1
sbou664,1696837163,1,"void Capitalise(char *phrase) {
    int i, len = strlen(phrase);
    for (i = 0; i < len; i++) {
        if (i == 0 || phrase[i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z')
                phrase[i] = phrase[i] - 'a' + 'A';
        }
    }
}
",1
sbro373,1696369977,1,"char Upper(char lower) {

    if (lower >= 'a' && lower <= 'z') {

        return lower - 32;
    }
    else {
        return lower;
    }
}

void Capitalise(char *phrase) {
    
    int length = strlen(phrase);
 
    for (int i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            phrase[i + 1] = Upper(phrase[i + 1]);
        }
    }

    phrase[0] = Upper(phrase[0]);
}

",1
scar362,1696335866,1,"void Capitalise(char *phrase)
{
    phrase[0]= phrase[0]-('a'-'A');
 
  for (int i =0; phrase[i] != '\0'; i++) {
      if (phrase[i-1]== ' ' || phrase[i-1]=='\t') {
        phrase[i]= phrase[i]-('a'-'A');
}
}
}",0
scar362,1696336105,2,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
    phrase[0]= phrase[0]-('a'-'A');
    }
  for (int i =0; phrase[i] != '\0'; i++) {
      if ((phrase[i-1]== ' ' || phrase[i-1]=='\t') && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
        phrase[i]= phrase[i]-('a'-'A');
}
}
}",1
sche525,1696223181,1,"void Capitalise(char *phrase){
    for(int i = 0; i <= strlen(phrase); i++){
        if(phrase[i] == ' '){
            if(phrase[i + 1] >= 97 && phrase[i + 1] <= 122){
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
        else if(i == 0){
            if(phrase[i] >= 97 && phrase[i] <= 122){
                phrase[i] = phrase[i] - 32;
            }
        }
    }
}",1
scho575,1696726307,1,"int IsLowerCase(char c) {
    return c >= 'a' && c <= 'z';
}

char ToUpperCase(char c) {
    return c - ('a' - 'A');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && IsLowerCase(phrase[i])) {
            phrase[i] = ToUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}
",0
scho575,1696726397,2,"int IsLowerCase(char c) {
    return c >= 'a' && c <= 'z';
}

char ToUpperCase(char c) {
    return c - ('a' - 'A');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && IsLowerCase(phrase[i])) {
            phrase[i] = ToUpperCase(phrase[i]);
            capitalizeNext = 0;
        } else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n' || phrase[i] == '\r') {
            capitalizeNext = 1;
        } else {
            capitalizeNext = 0;
        }
    }
}
",1
schu718,1696757087,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    phrase[0] = phrase[0] - 32;
    
    for(int i = 1; i < length; i++)
    {
        if(phrase[i] == ' ')
        {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}",0
schu718,1696757406,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    if(phrase[0] > 96)
    {
    phrase[0] = phrase[0] - 32;
    }
    
    for(int i = 1; i < length; i++)
    {
        if(phrase[i] == ' ' && phrase[i+1] > 96)
        {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}",1
schu800,1696820534,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int i;
    if (phrase[0] > 96 && phrase[0] < 123){
        phrase[0] = phrase[0]-32;
    }
    for (i=0;i<length;i++){
        if (phrase[i] > 96 && phrase[i] < 123){
            if (phrase[i-1] == ' '){
                phrase[i] = phrase[i]-32;
            }
        }
    }
}",1
sdal739,1696673934,1,"void Capitalise(char* phrase) {
	
	int i;
	int length;
	length = strlen(phrase);

		for (i = 0; i < length; i++) {
			if (phrase[0] >= 97 && phrase[0] <= 122) {
				phrase[0] = phrase[0] - 32;
			}
			if (i > 1) {
				if (phrase[i-1] == 32) {
					if (phrase[i] >= 97 && phrase[i] <= 122) {
						phrase[i] = phrase[i] - 32;
					}
				}
			}
		}
}
",1
sden589,1696842409,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);

   
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

 for (int i=0; i<length; i++){
    if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
        phrase[i+1] = phrase[i+1] - ('a' - 'A'); 
    } 

}
    
}
",1
sekb555,1696219110,1,"void Capitalise(char *phrase)
{
    //initalises the length of the input string
    int leng = strlen(phrase);

    //checks each of the letters and symbols in the input string and only converts the lower case letters to their uppercase counterparts
    for(int i = 0; i < leng; i++)
    {
        if (phrase[i] >= 97 && phrase[i] <= 122)
        {
            phrase[i] = phrase[i] - 32; 
        }
    }
}
",0
sekb555,1696220198,2,"#include <string.h>

void Capitalise(char *phrase)
{

    int leng = strlen(phrase);
    //if the first symbol in the string is a lower case letter then it gets capitalised
    if (phrase[0] >= 97 && phrase[0] <= 122)
    {
        phrase[0] -= 32;
    }

    //changes every lowercase letter after a space charecter into a uppercase letter
    for(int i = 0; i < leng; i++)
    {
        if (phrase[i] == 32){
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122)
            {
                phrase[i+1] -= 32; 
            }
        }
    }
}
",1
sfry192,1696727324,1,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    if(96<phrase[0]<123 ){
        phrase[0] = phrase[0] - 32;
    }
    
    int length = strlen(phrase);
    
    for(int i = 0;i < length;i++){
        if(phrase[i] == ' '){
            if(96<phrase[i + 1]<123){
                phrase[i + 1] = phrase[i + 1] - 32;    
            }
        }
        
    }
    
    
    
}",0
sfry192,1696727575,2,"#include <stdio.h>
#include <string.h>
void Capitalise(char *phrase)
{
    if(96<phrase[0] && phrase[0]<123 ){
        phrase[0] = phrase[0] - 32;
    }
    
    int length = strlen(phrase);
    
    for(int i = 0;i < length;i++){
        if(phrase[i] == ' '){
            if(96<phrase[i + 1] && phrase[i + 1]<123){
                phrase[i + 1] = phrase[i + 1] - 32;    
            }
        }
        
    }
    
    
    
}",1
sgal263,1696775347,1,"void Capitalise(char *phrase) {
int Length = strlen(phrase);
for (int i = 0; i <= Length; i++) {
if (phrase[i] >= 97 && phrase[i] <= 122) {
phrase[i] = phrase[i] - ('a' - 'A');
}
}
return;
}",0
sgal263,1696775959,2,"void Capitalise(char *phrase) {
int Length = strlen(phrase);

//First letter should always be capitalised//
if (phrase[0] >= 97 && phrase[0] <= 122) {
phrase[0] = phrase[0] - ('a' - 'A');
}

for (int i = 1; i <= Length; i++) {
if (phrase[i] >= 97 && phrase[i] <= 122 && phrase[i-1] == 32) {
phrase[i] = phrase[i] - ('a' - 'A');
}
}
return;
}",1
sgib237,1696806905,1,"void Capitalise(char *phrase){
    int length;
    phrase[0] = phrase[0] - 32;
    
    length = strlen(phrase);
    
    for (int i = 0; i < length; i++){
        if (phrase[i] == ' '){
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",0
sgib237,1696807287,2,"void Capitalise(char *phrase){
    int length;
    if (phrase[0] > 96 && phrase[0] < 123){
        phrase[0] = phrase[0] - 32;
    }
    
    
    length = strlen(phrase);
    
    for (int i = 0; i < length; i++){
        if (phrase[i] == ' '){
            if (phrase[i+1] > 96 && phrase[i+1] < 123){
                phrase[i+1] = phrase[i+1] - 32;
            }
            
        }
    }
}",1
shan333,1696832763,1,"void Capitalise(char *phrase)
{
    int i;

    for (i = 0; i < strlen(phrase); i++) {

        if (i == 0 || phrase[i-1] == 32){
            if (phrase[i] < 123 && phrase[i] > 96){
                phrase[i] = phrase[i] - 32;
            }
        }

    }
}
",1
shan790,1696413696,1,"void Capitalise(char* phrase)
{
	if (phrase[0] <= 'z' && phrase[0] >= 'a') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	
	int strLength = 0;
	while (phrase[strLength] != '\0') {
		strLength++;
	}

	for (int i = 0; i < strLength; i ++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
	}
}",0
shan790,1696413761,2,"void Capitalise(char* phrase)
{
	if (phrase[0] <= 'z' && phrase[0] >= 'a') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}
	
	int strLength = 0;
	while (phrase[strLength] != '\0') {
		strLength++;
	}

	for (int i = 0; i < strLength; i ++) {
		if (phrase[i] == ' ' && phrase[i+1] <= 'z' && phrase[i+1] >= 'a') {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
	}
}",1
she940,1696300994,1,"void Capitalise(char* phrase)
{
	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {				
					phrase[i + 1] = phrase[i + 1] - ' ';
					
			}
			
		}
		else if (i == 0 && phrase[0] >= 'a' && phrase[0] <= 'z' ) {
			phrase[i] = phrase[i] - ' ';

		}
		i++;
		
	}
}",1
shsa718,1696280130,1,"void Capitalise(char *phrase)
{
    
    int i = 0;

    // examine string character by character. 
    while (phrase[i]!= '\0'){

        // if we encounter a lowercase character, AND
        if (phrase[i] >='a' && phrase[i] <='z'){

            // it occurs after a space or at the start of the string,
            if (i==0 || phrase[i-1]==32){

                // convert it to a capital letter.
                phrase[i] = phrase [i] - 32;

            }

        }
        
        i++;
    }

    return;
}
",1
shua365,1696230963,1,"void Capitalise(char *phrase)
{
     if (phrase[0]>=97 && phrase[0]<=122){
        phrase[0]=phrase[0]-32;
    }
    for (int i=1;i<strlen(phrase);i++){
        if ((phrase[i-1]== ' ') && (phrase[i]>=97 && phrase[i]<=122)){
            phrase[i]=phrase[i]-32;
        }
    }   
}
",1
shum116,1696273717,1,"void Capitalise(char *phrase)
{
 	int i = 0;
	int space = 32;
	while (phrase[i] != '\0') {
		if ((phrase[i] >= 'a' && phrase[i] <= 'z')&&(phrase[i-1]==32 || phrase[i]==phrase[0])) {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}   
}
",0
shum116,1696273789,2,"void Capitalise(char *phrase)
{
 	int i = 0;
	while (phrase[i] != '\0') {
		if ((phrase[i] >= 'a' && phrase[i] <= 'z')&&(phrase[i-1]==32 || phrase[i]==phrase[0])) {
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}   
}
",1
sike083,1696642845,1,"void Capitalise(char *phrase)
{
    int i;
    int length;
    length = strlen(phrase);
    
    if (length > 0) {
        phrase[0] = toupper(phrase[0]);
    }
    
    for(int i = 1; i < length; i++) {
        if (phrase[i] == ' ') {
            if (i + 1 < length) {
                phrase[i + 1] = toupper(phrase[i + 1]);
                i++;
            }
        }
    }
}
",0
sike083,1696643078,2,"void Capitalise(char *phrase)
{
    
    int length;
    length = strlen(phrase);
    
    if (length > 0) {
        phrase[0] = toupper(phrase[0]);
    }
    
    for(int i = 1; i < length; i++) {
        if (phrase[i] == ' ') {
            if (i + 1 < length) {
                phrase[i + 1] = toupper(phrase[i + 1]);
                i++;
            }
        }
    }
}
",1
sjaf029,1696767488,1,"char Cap(char character) {
	if (character >= 'a' && character <= 'z') {
		return character - 'a' + 'A';
	}
	return character;
}

void Capitalise(char* phrase)
{
	int capFirst = 1;

	for (int i = 0; phrase[i] != '\0'; i++) {
		if (capFirst) {
			phrase[i] = Cap(phrase[i]);
			capFirst = 0;
		}

		if (phrase[i] == ' ') {
			capFirst = 1;
		}

	}
}",1
sjai563,1696740793,1,"void Capitalise(char *phrase)
{
if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32 ;
    }
    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i - 1] == ' ' && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] -= 32 ;
        }
    }    
}
",1
sjam309,1696678233,1,"void Capitalise(char *phrase)
{
     int i = 0;
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z' ){
    phrase[0] = phrase[0] - ('a' - 'A');
    }

    while (phrase[i] != '\0')  {
        if (phrase[i] == ' '&& phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
        i++;
    }
}
",1
sjob296,1696816325,1,"#include <stdio.h>

int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

char toUpperCase(char c) {
    return (char)(c - ('a' - 'A'));
}

void Capitalise(char phrase[]) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; ++i) {
        if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
        else if (isLowerCase(phrase[i]) && capitalizeNext) {
            phrase[i] = toUpperCase(phrase[i]);
            capitalizeNext = 0; 
        }
    }
}


",0
sjob296,1696834715,2,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0') 
    {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') && (i==0 || phrase[i - 1] ==' ')) 
        {
            phrase[i] = phrase[i] - 32;
            while (phrase[i] != ' ') 
            {
                i++;
            }
        }
        else 
        {
            i++;
        }
    }
    
}
",1
skan221,1696811853,1,"#include <stdio.h>
void Capitalise(char* phrase) {
    int nextcap = 1;  
    
    for (int i = 0;  i < strlen(phrase); i++) {

        if (phrase [i] >= 'a' && phrase [i] <= 'z') {
        if (nextcap) {
            phrase[i] = phrase[i] - 32;
            nextcap = 0; 
        } 
        
        }else if (phrase[i] == ' ') {
            nextcap = 1;  
        } else if (nextcap && phrase [i] >= 'a' && phrase [i] <= 'z'){
            nextcap = 0;
        } else if ( i > 0 && phrase[i -1 ] != ' ') {
        nextcap = 0; 
            
        
        }
    }
}",0
skan221,1696811998,2,"#include <stdio.h>
void Capitalise(char* phrase) {
    int nextcap = 1;  
    
    for (int i = 0;  i < strlen(phrase); i++) {

        if (phrase [i] >= 'a' && phrase [i] <= 'z') {
        if (nextcap) {
            phrase[i] = phrase[i] - 32;
            nextcap = 0; 
        } 
        
        }else if (phrase[i] == ' ') {
            nextcap = 1;  
        } else if (nextcap && phrase [i] >= 'A' && phrase [i] <= 'Z'){
            nextcap = 0;
        } else if (phrase[i -1 ] != ' ') {
        nextcap = 0; 
            
        
        }
    }
}",1
skea516,1696319435,1,"void Capitalise(char *phrase)
{
    int i; 
    int length = strlen(phrase);
    phrase[0] = phrase[0] - ('a' - 'A');
    for (i=0; i <= length; i++) {
    if (phrase[i] == ' ') {
        phrase[i + 1] = phrase[i + 1]- ('a' - 'A');
    }
    }

}
",0
skea516,1696319858,2,"void Capitalise(char *phrase)
{
    int i; 
    int length = strlen(phrase);
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    for (i=0; i <= length; i++) {
    if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
        phrase[i + 1] = phrase[i + 1]- ('a' - 'A');
    }
    }

}

",1
skop291,1696665093,1,"void Capitalise(char *phrase) {
    int i = 0;
    
    // Helper function to convert a character to upper case
    char ToUpperCase(char ch) {
        if (ch >= 97 && ch <= 122) {
            return ch - 32; // Using ASCII codes to get the uppercase character
        }
        return ch;
    }
",0
skop291,1696665141,2,"#include <stdio.h>

void Capitalise(char *phrase) {
    int i = 0;
    
    // Helper function to convert a character to upper case
    char ToUpperCase(char ch) {
        if (ch >= 97 && ch <= 122) {
            return ch - 32; // Using ASCII codes to get the uppercase character
        }
        return ch;
    }

    // Initially set the flag to capitalise the first character
    int shouldCapitalise = 1;

    while (phrase[i] != '\0') {
        if (shouldCapitalise && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpperCase(phrase[i]);
            shouldCapitalise = 0; // Reset the flag
        } 
        else if (phrase[i] == ' ') {
            shouldCapitalise = 1; // If space is found, set flag to capitalise next character
        }
        i++;
    }
}",0
skop291,1696665447,3,"#include <stdio.h>

void Capitalise(char *phrase) {
    int i = 0;
    
    // Helper function to convert a character to upper case
    char ToUpperCase(char ch) {
        if (ch >= 97 && ch <= 122) {
            return ch - 32; // Using ASCII codes to get the uppercase character
        }
        return ch;
    }

    // Initially set the flag to capitalise the first character
    int shouldCapitalise = 1;

    while (phrase[i] != '\0') {
        // Capitalize if the current char is a lowercase letter and the flag is set
        if (shouldCapitalise && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpperCase(phrase[i]);
        }
        
        // Set the flag based on the current character
        shouldCapitalise = (phrase[i] == ' ');

        i++;
    }
}",1
skul970,1696298175,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    
    phrase[0] = phrase[0] - 32;
    
    for (int i = 1; i < strlen(phrase); i++) {
        if (phrase[i] == ' ') {
            if (65 <= phrase[i+1] <=122) {
                phrase[i+1] = phrase[i+1] - 32;
            }    
        }
    }
    
    
}
",0
skul970,1696298383,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    
    phrase[0] = phrase[0] - ' ';
    
    for (int i = 1; i < strlen(phrase); i++) {
        if (phrase[i] == ' ') {
            if ('a' <= phrase[i+1] <= 'z') {
                phrase[i+1] = phrase[i+1] - ' ';
            }    
        }
    }
    
    
}
",0
skul970,1696299699,3,"void Capitalise(char *phrase) {
    if ('a' <= phrase[0] && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ' ';
    }
    for (int i = 1; i < strlen(phrase); i++) {
        if (phrase[i] == ' ') {
            if ('a' <= phrase[i+1] && phrase[i+1] <= 'z') {
                phrase[i+1] = phrase[i+1] - ' ';
            }    
        }
    }
}
",1
slam669,1696233549,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i,end;
    end = strlen(phrase);
    phrase[0] -= 'a' -  'A';
    for (i = 0; i < end; i++){
        if (phrase[i] == 32) {
            phrase [i+1] -= 'a' - 'A';
        }
    }
}
",0
slam669,1696233814,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i,end;
    end = strlen(phrase);
    if (phrase[i] >= 97 && phrase[i]<= 122){
        phrase[0] -= 'a' -  'A';
    }
    
    for (i = 0; i < end; i++){
        if (phrase[i] == 32) {
            if (phrase[i+1] >= 97 && phrase[i+1]<= 122){
                phrase [i+1] -= 'a' - 'A';
            }
            
        }
    }
}
",0
slam669,1696468286,3,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i,end;
    end = strlen(phrase);
    if (phrase[0] >= 97 && phrase[0]<= 122){
        phrase[0] -= 'a' -  'A';
        
    }
    
    for (i = 1; i < end; i++){
        if (phrase[i] == 32) {
            if (phrase[i+1] >= 97 && phrase[i+1]<= 122){
                phrase [i+1] -= 'a' - 'A';
            }
            
        }
    }
}",1
slie508,1696652667,1,"void Uppercase(char *letter)
{
    if(*letter >= 'a' && *letter <= 'z') {
        *letter = *letter - ('a' - 'A');
    }
}

void Capitalise(char *phrase)
{
    Uppercase(&phrase[0]);
    int length = strlen(phrase);
    for(int i = 1; i < length; i++) {
        if(phrase[i-1] == ' ') {
            Uppercase(&phrase[i]);
        }
    }
}",1
sluo487,1696813565,1,"void Capitalise(char *phrase)
{
    int i = 0;
    
    phrase[0] = phrase[0] - ('a' - 'A');
    
    while (phrase[i] != '\0') {
        if (phrase[i-1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}

",0
sluo487,1696813647,2,"void Capitalise(char *phrase)
{
    int i = 0;
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    while (phrase[i] != '\0') {
        if (phrase[i-1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}",1
smac708,1696736038,1,"#include <stdio.h> 
#include <string.h> 

void Capitalise(char *phrase)
{ 
    int length = strlen(phrase);  
    int i; 
    char null = ' '; 
    int j;
    
    for (i=0; i<length; i++) { 
        if (phrase[i] == null) {
            for (j='a'; j < 'z'+ 1; j++){
                if (phrase[i+1] == j) {
                    phrase[i+1] = j - 32;}
                
            }
            
        }  
        for (j='a'; j < 'z'+ 1; j++)
        if (phrase[0] == j) {
            phrase[0] = j -32; }
        
    } 
} 
",1
sman821,1696712501,1,"void Capitalise(char *phrase)
{
    int i, firstLetter;
    int length = strlen(phrase);

    firstLetter = 1;

    for (i = 0; i < length; i++) {
        if (phrase[i] == ' ') {
            firstLetter = 1;
        } else if (firstLetter == 1) {
            if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
                //capitalise
                phrase[i] = phrase[i]-(char)32;
                
            }
            firstLetter = 0;
        } else {
            firstLetter = 0;
        }
    }
}
",1
sman833,1696637102,1,"char LowerToUpper(char lower)
{
    if (lower >= 'a'  && lower <='z') {
        return (lower - 32);
    }

    return 0;
}

void Capitalise(char *phrase)
{
    phrase[0] = LowerToUpper(phrase[0]);

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i-1] == ' ') {
            phrase[i] = LowerToUpper(phrase[i]);
        }
    }
}",0
sman833,1696637375,2,"char LowerToUpper(char lower)
{
    if (lower >= 'A' && lower <= 'Z') {
        return lower;
    } 
    
    if (lower >= 'a'  && lower <='z') {
        return (lower - 32);
    }

    return 0;
}

void Capitalise(char *phrase)
{
    phrase[0] = LowerToUpper(phrase[0]);

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i-1] == ' ') {
            phrase[i] = LowerToUpper(phrase[i]);
        }
    }
}",0
sman833,1696638445,3,"char LowerToUpper(char lower)
{
    if (lower >= 'a'  && lower <='z') {
        return (lower - 32);
    } else {
        return lower;
    }
}

void Capitalise(char *phrase)
{
    phrase[0] = LowerToUpper(phrase[0]);

    for (int i = 1; phrase[i] != '\0'; i++) {
        if (phrase[i-1] == ' ') {
            phrase[i] = LowerToUpper(phrase[i]);
        }
    }
}",1
smck855,1696325083,1,"void Capitalise(char *phrase) {

    for (int i = 0; phrase[i] != '\0'; i++) {
    
        if (phrase[i-1] == 32 || i == 0){
            phrase[i] = phrase[i] - ('a' - 'A');  
        } 
        
    }
}",0
smck855,1696325196,2,"void Capitalise(char *phrase) {

    for (int i = 0; phrase[i] != '\0'; i++) {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z')) {
            if (phrase[i-1] == 32 || i == 0){
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        } 
        
    }
}",1
smou122,1696294038,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0'){
        i++;
    }
    int length = i;
    int j;
    for (j = 0; j < length; j++){
        if (phrase[j] == ' '){
            if (phrase[j+1] >= 97 && phrase[j+1] <= 122){
                phrase[j+1] = phrase[j+1] - 32;
            }
        }
    }
    phrase[0] = phrase[0] - 32;
}
",0
smou122,1696294134,2,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0'){
        i++;
    }
    int length = i;
    int j;
    for (j = 0; j < length; j++){
        if (phrase[j] == ' '){
            if (phrase[j+1] >= 97 && phrase[j+1] <= 122){
                phrase[j+1] = phrase[j+1] - 32;
            }
        }
    }
    if (phrase[0] >= 97 && phrase[0] <= 122){
                phrase[0] = phrase[0] - 32;
            }

    
}
",1
smun623,1696807088,1,"void Capitalise(char *phrase)
{
    int nextCharacter = 1;
    
    for (int i = 0; phrase != \0; i++) {
        
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            
            if (nextCharacter) {
                
                phrase[i] = phrase[i] - 32;
                nextCharacter = 0;
            }
        }   else { 
            nextCharacter = 1;
            }
    
    }
}
",0
smun623,1696810039,2,"void Capitalise(char *phrase)
{
    int nextCharacter = 1;
    
    for (int i = 0; phrase != '\0'; i++) {
        
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            
            if (nextCharacter) {
                
                phrase[i] = phrase[i] - 32;
                nextCharacter = 0;
            }
        }   else { 
            nextCharacter = 1;
            }
    
    }
}
",0
smun623,1696810107,3,"void Capitalise(char *phrase)
{
    int nextCharacter = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            
            if (nextCharacter) {
                
                phrase[i] = phrase[i] - 32;
                nextCharacter = 0;
            }
        }   else { 
            nextCharacter = 1;
            }
    
    }
}
",0
smun623,1696827925,4,"void Capitalise(char *phrase)
{
    int nextCharacter = 1; 
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        char x = phrase[i];

        if (x == ' ') {
            
            nextCharacter = 1;
        } else if (nextCharacter) {
    
            if (x >= 'a' && x <= 'z') {
                
                phrase[i] = x - 32; 
            }
            nextCharacter = 0; 
        }
    }
}

",1
snas404,1696799597,1,"void Capitalise(char *phrase)
{
    int i = 1;
	int j = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (phrase[i - 1] == 32) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		i++;
	}

	if (phrase[j] >= 'a' && phrase[j] <= 'z') {
		phrase[j] = phrase[j] - ('a' - 'z');
	}

}
",0
snas404,1696799732,2,"void Capitalise(char *phrase)
{
	int i = 1;
	int j = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] >= 'a' && phrase[i] <= 'z') {
			if (phrase[i - 1] == 32) {
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		i++;
	}

	if (phrase[j] >= 'a' && phrase[j] <= 'z') {
		phrase[j] = phrase[j] - ('a' - 'A');
	}

}
",1
span558,1696214878,1,"void Capitalise(char *phrase)
{
     int length = strlen(phrase);
    int capitalizeNext = 1;

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];
        if (capitalizeNext && (currentChar >= 'a' && currentChar <= 'z')) {
            phrase[i] = currentChar - 32; 
            capitalizeNext = 0;
        } else if (!(currentChar >= 'a' && currentChar <= 'z')) {
            capitalizeNext = 1;
        }
    }   
}
",0
span558,1696215209,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int capitalizeNext = 1;

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];
        if (capitalizeNext && (currentChar >= 'A' && currentChar <= 'z')) {
            if(currentChar >= 'a' && currentChar <= 'z'){
            phrase[i] = currentChar - 32; 
        }
            capitalizeNext = 0;
        } else if (!(currentChar >= 'a' && currentChar <= 'z')) {
            capitalizeNext = 1;
        }
    }
}
",0
span558,1696216702,3,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int capitalizeNext = 1;

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];
        if (capitalizeNext && (currentChar >= 'A' && currentChar <= 'z')) {
            if(currentChar >= 'a' && currentChar <= 'z'){
            phrase[i] = currentChar - 32; 
        }
            capitalizeNext = 0;
        } else if (!(currentChar >= 'a' && currentChar <= 'z') && currentChar == ' ') {
            capitalizeNext = 1;
        }
    }
}
",0
span558,1696217300,4,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    int capitalizeNext = 1;

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];
        if (capitalizeNext && (currentChar >= 'A' && currentChar <= 'z')) {
            if(currentChar >= 'a' && currentChar <= 'z'){
            phrase[i] = currentChar - 32; 
        }
        }
            capitalizeNext = 0;
           if (!(currentChar >= 'a' && currentChar <= 'z') && currentChar == ' ') {
            capitalizeNext = 1;
        }
    }
}
",1
spar473,1696384382,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    int i;
    for (i = 1; i < strlen(phrase); i++) {
        if ((phrase[i] == ' ') && (phrase[i+1] >= 'a') && (phrase[i+1] <= 'z')) {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
        }
    }
}",1
spar820,1696817508,1,"void Capitalise(char *phrase)
{
    if (phrase[0] > 90) {
        phrase[0] = phrase[0] - ('a' - 'A'); 
    }
    
    int i = 0;
    while (phrase[i] != '\0') {
        if ((phrase[i-1] == ' ') && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
           phrase[i] = phrase[i] - ('a' - 'A'); 
        }
    i++;    
    }
}
",1
srak374,1696847842,1,"int lowercase(char alpha){
    return (alpha >= 'a' && alpha <= 'z');
}
int uppercase (char alpha){
    if (lowercase(alpha)){
        return alpha - ('a' - 'A');
    }
    return alpha;
}
void Capitalise(char *phrase)
{
    int firstchar = 1;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (lowercase(phrase[i]) && firstchar){
            phrase[i] = uppercase(phrase[i]);
            firstchar = 0;
        } else if (!lowercase(phrase[i])){
            firstchar = 1;
        }
    }
}
",0
srak374,1696848439,2,"int lowercase(char alpha){
    return (alpha >= 'a' && alpha <= 'z');
}
int uppercase (char alpha){
    if (lowercase(alpha)){
        return alpha - ('a' - 'A');
    }
    return alpha;
}
void Capitalise(char *phrase)
{
    int firstchar = 1;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (firstchar && lowercase(phrase[i])){
            phrase[i] = uppercase(phrase[i]);
            firstchar = 0;
        } else if (!lowercase(phrase[i]) && phrase[i] != ' '){
            firstchar = 1;
        }
    }
}
",0
srak374,1696848530,3,"int lowercase(char alpha){
    return (alpha >= 'a' && alpha <= 'z');
}
int uppercase (char alpha){
    if (lowercase(alpha)){
        return alpha - ('a' - 'A');
    }
    return alpha;
}
void Capitalise(char *phrase)
{
    int firstchar = 1;
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (firstchar && lowercase(phrase[i])){
            phrase[i] = uppercase(phrase[i]);
            firstchar = 0;
        } else if (!lowercase(phrase[i])){
            firstchar = 1;
        }
    }
}
",0
sran136,1696764316,1,"void Capitalise(char* phrase) {

	int i;
	phrase[0] = phrase[0] - 32;

	for (i = 1; i <= strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			phrase[i + 1] -= 32;
		}
	}
}",0
sran136,1696765078,2,"void Capitalise(char* phrase) {

	int i;
	
	if (phrase[0] <= 122 && phrase[0] >= 97) {
		phrase[0] = phrase[0] - 32;
	}

	for (i = 1; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 97 && phrase[i + 1] <= 122) {
				phrase[i + 1] -= 32;
			}
		}
	}
}",1
srou953,1696327753,1,"void Capitalise(char *phrase)
{
   int length = strlen(phrase);
   for(int i=0: i>=length; i++)
   {
       if(i==0)
       {
           phrase[i] = i - 32;
       }
       else(i-1 == ' ')
       {
            phrase[i] = i-32; 
       
       }
       
   }
}
",0
srou953,1696328401,2,"void Capitalise(char *phrase)
{
   int length = strlen(phrase);
   for(int i=0; i<=length; i++)
   {
       if(i==0)
       {
           phrase[i] = phrase[i] - 32;
       }
       else if(phrase[i-1] == ' ')
       {
            phrase[i] = phrase[i]-32; 
       
       }
       
   }
}
",0
srou953,1696372476,3,"void Capitalise(char *phrase)
{
   int length = strlen(phrase);
   for(int i=0; i<=length; i++)
   {
       if((i==0) && phrase[i]>= 'a' && phrase[i]<= 'z')
       {
           phrase[i] = phrase[i] - 32;
       }
       else if((phrase[i-1] == ' ') && phrase[i]>= 'a' && phrase[i]<= 'z')
       {
            phrase[i] = phrase[i]-32; 
       
       }
       
   }
}
",1
ssan467,1696418005,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}

	for (int i = 1; i < strlen(phrase); i++) {
		if (phrase[i] >= 'a' && phrase[i] <= 'z' && phrase[i - 1] == ' ') { 
			phrase[i] = phrase[i] - 32;
		}
	}
}",1
ssco465,1696322920,1,"void Capitalise(char *phrase)
{
    	int length = strlen(phrase);
	int next = 1;

	for (int i = 0; i < length; i++) {
		if (next == 1) {
			phrase[i] = phrase[i] - ('a' - 'A');
			next = 0;
		}
		else if (phrase[i] == ' ') {
			next = 1;
		}
		else {
			next = 0;
		}
	}

}
",0
ssco465,1696323306,2,"void Capitalise(char *phrase)
{
	int length = strlen(phrase);
	int next = 1;

	for (int i = 0; i < length; i++) {
		if ((phrase[i] >= 'a' && phrase[i] <= 'z')&&(next == 1)) {
			phrase[i] = phrase[i] - ('a' - 'A');
			next = 0;
		}
		else if (phrase[i] == ' ') {
			next = 1;
		}
		else {
			next = 0;
		}
	}


}
",1
ssey266,1696686842,1,"void Capitalise(char *phrase)
{
    int cap = 1;
  
 
for (int i = 0; phrase[i] != '\0'; i++)
    {
      
if (phrase[i] >= 'a' && phrase[i] <= 'z')
	{
	  
if (cap)
	    {
	      
phrase[i] -= 32;
	      
cap = 0;
	    
}
	  else
	    {
	      
cap = 0;
	    
}
	
}
      else if ((phrase[i] >= 'A' && phrase[i] <= 'Z')
	       || (phrase[i] >= '0' && phrase[i] <= '9'))
	{
	  
cap = 0;
	
}
      else
	{
	  
cap = 1;
	
}
    
}

}
",0
ssey266,1696687462,2,"void Capitalise(char *phrase)
{
  int cap = 1;
  
 
for (int i = 0; phrase[i] != '\0'; i++)
    {
      
if (phrase[i] >= 'a' && phrase[i] <= 'z' && cap)
	{
	  
phrase[i] -= 32;
	  
cap = 0;
	
}
      else if (phrase[i] == ' ')
	{
	  
cap = 1;
	
}
      else
	{
	  
cap = 0;
	
}
    
}
  
}
",1
ssiv093,1696826449,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0') {
        if (i == 0 || phrase[i - 1] == ' ') {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                phrase[i] = phrase[i] - 32;
            }
        }
        i++;
    }
}

",1
sson972,1696216479,1,"void Capitalise(char *phrase)
{
    int i = 0;
	while (word[i] != '\0')
	{
		if (word[i - 1] == ' ' || word[i] == word[0])
		{
			word[i] = word[i] - ('a' - 'A');
		}
		i++;
	}
}
",0
sson972,1696216527,2,"void Capitalise(char *phrase)
{
    int i = 0;
	while (phrase[i] != '\0')
	{
		if (phrase[i - 1] == ' ' || phrase[i] == phrase[0])
		{
			phrase[i] = phrase[i] - ('a' - 'A');
		}
		i++;
	}
}
",0
sson972,1696216667,3,"void Capitalise(char* phrase)
{
	int i = 0;
	while (phrase[i] != '\0')
	{
		if (phrase[i - 1] == ' ' || phrase[i] == phrase[0])
		{
			if (phrase[i] >= 'a' && phrase[i] <= 'z')
			{
				phrase[i] = phrase[i] - ('a' - 'A');
			}
		}
		i++;
	}
}",1
sspa275,1696370286,1,"void Capitalise(char *phrase){
    int length = strlen(phrase);
    phrase[0] += ('A' - 'a');
    int prev;
    int curr;
    for(int i = 0; i < length; i++){
        printf(""%i\n"", phrase[i]);
        printf(""%c\n"", phrase[i]);
        int prev = phrase[i-1];
        int curr = phrase[i];
        if(prev == 32 && curr <= 122 && curr >= 97){
            phrase[i] += ('A' - 'a');
        }
    }
}",0
sspa275,1696370311,2,"void Capitalise(char *phrase){
    int length = strlen(phrase);
    phrase[0] += ('A' - 'a');
    int prev = 0;
    int curr = 0;
    for(int i = 0; i < length; i++){
        printf(""%i\n"", phrase[i]);
        printf(""%c\n"", phrase[i]);
        int prev = phrase[i-1];
        int curr = phrase[i];
        if(prev == 32 && curr <= 122 && curr >= 97){
            phrase[i] += ('A' - 'a');
        }
    }
}",0
sspa275,1696660025,3,"void Capitalise(char *phrase){
    int length = strlen(phrase);
    phrase[0] += ('A' - 'a');
    int prev = 0;
    int curr = 0;
    for(int i = 0; i < length; i++){
        prev = phrase[i-1];
        curr = phrase[i];
        if(prev == 32 && curr <= 122 && curr >= 97){
            phrase[i] += ('A' - 'a');
        }
    }
}",0
sspa275,1696660880,4,"void Capitalise(char *phrase){
    int length = strlen(phrase);
    int prev = 0;
    int curr = 0;
    if (phrase[0] >= 97 && phrase[0] <= 122){
        phrase[0] += ('A' - 'a');
    }
    for(int i = 0; i < length; i++){
        prev = phrase[i-1];
        curr = phrase[i];
        if(prev == 32 && curr <= 122 && curr >= 97){
            phrase[i] += ('A' - 'a');
        }
    }
}
",1
ssri357,1696299189,1,"char ConvertToUpper(char *letter) { 

	letter = letter - 32;

}

void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);

    if (phrase[0] >= 'a' && phrase[0] <= 'z')
    {
	    phrase[0] = ConvertToUpper(phrase[0]);
    }


    for (i = 1; i < length; i++) {

	    if (phrase[i - 1] == ' ') {

	    	if (phrase[i] >= 'a' && phrase[i] <= 'z') {
		    	phrase[i] = ConvertToUpper(phrase[i]);

	    	}
		
	    }
    }
    
}
",0
ssri357,1696299293,2,"char ConvertToUpper(char *letter) { 

	int i;
	int length = strlen(phrase);

	if (phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - 32;
	}
	

	for (i = 1; i < length; i++) {

		if (phrase[i - 1] == ' ') {

			if (phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i] = phrase[i] - 32;

			}
			
		}
	}
}
",0
ssri357,1696299453,3,"void Capitalise(char* phrase)
{
	int i;
	int length = strlen(phrase);

	if (phrase[0] >= 'a' && phrase[0] <= 'z')
	{
		phrase[0] = phrase[0] - 32;
	}
	

	for (i = 1; i < length; i++) {

		if (phrase[i - 1] == ' ') {

			if (phrase[i] >= 'a' && phrase[i] <= 'z') {
				phrase[i] = phrase[i] - 32;

			}
			
		}
	}


}
",1
steb012,1696300779,1,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[i] >= 97 && phrase[i] <= 122){
            phrase[i] = phrase[i] - 32;
    }
    for(i; i <= strlen(phrase); i++){
        if (phrase[i] == 32){
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122){
            phrase[i + 1] = phrase[i + 1] - 32;
            }
        } 
    }
}",0
steb012,1696301143,2,"void Capitalise(char *phrase)
{
    
    for(int i = 0; i <= strlen(phrase); i++){
        
    if (phrase[i] >= 97 && phrase[i] <= 122 && i == 0){
            phrase[i] = phrase[i] - 32;
    }
    if (phrase[i] == 32){
            if (phrase[i+1] >= 97 && phrase[i+1] <= 122){
            phrase[i + 1] = phrase[i + 1] - 32;
            }
        } 
    }
}",1
stia357,1696304501,1,"void CapitalizeWords(char *phrase) 
{
    int capitalized;
    capitalized = 1; 

    while (*phrase) {
        char current;
        current = *phrase;

        
        if (current >= 'a' && current <= 'z') {
            if (capitalized) {
                *phrase -= ('a' - 'A');
                capitalized = 0; 
            }
        } else {
            if (current == ' ' || current == '\t' || current == '\n' || current == '\r' ||
                current == '\v' || current == '\f' || current == ',' || current == '.') {
                capitalized = 1; 
        }
        phrase++;
    }
}",0
stia357,1696304660,2,"void Capitalise(char *phrase) 
{
    int capitalized;
    capitalized = 1; // Start with the first character capitalized

    while (*phrase) {
        char current;
        current = *phrase;

        // Check if the character is a lowercase alphabetic character
        if (current >= 'a' && current <= 'z') {
            // Capitalize the character
            if (capitalized) {
                *phrase -= ('a' - 'A');
                capitalized = 0; // Reset the flag
            }
        } else {
            // Check if the character is a whitespace character or punctuation
            if (current == ' ' || current == '\t' || current == '\n' || current == '\r' ||
                current == '\v' || current == '\f' || current == ',' || current == '.') {
                capitalized = 1; // Set flag to capitalize the next word
            }
        }
        phrase++;
    }
}",0
stia357,1696305205,3,"void CapitalizeWords(char *phrase) 
{
    int capitalized
    capitalized = 1; 

    while (*phrase) {
        char current;
        current = *phrase;

        
        if ((current >= 'a' && current <= 'z') || (current >= 'A' && current <= 'Z')) {
            
            if (capitalized) {
                if (current >= 'a' && current <= 'z') {
                    *phrase -= ('a' - 'A');
                }
                capitalized = 0; 
            }
        } else {
            
            if (current == ' ' || current == '\t' || current == '\n' || current == '\r' ||
                current == '\v' || current == '\f' || current == ',' || current == '.') {
                capitalized = 1; 
            }
        }
        phrase++;
    }
}",0
stia357,1696305271,4,"void Capitalise(char *phrase) 
{
    int capitalized;
    capitalized = 1; 

    while (*phrase) {
        char current;
        current = *phrase;

        
        if ((current >= 'a' && current <= 'z') || (current >= 'A' && current <= 'Z')) {
            
            if (capitalized) {
                if (current >= 'a' && current <= 'z') {
                    *phrase -= ('a' - 'A');
                }
                capitalized = 0; 
            }
        } else {
            
            if (current == ' ' || current == '\t' || current == '\n' || current == '\r' ||
                current == '\v' || current == '\f' || current == ',' || current == '.') {
                capitalized = 1; 
            }
        }
        phrase++;
    }
}",0
stia357,1696308071,5,"void Capitalise(char *phrase) {
    int capitalized;
    capitalized = 1; 

    while (*phrase) {
        char current;
        current = *phrase;

        
        if (isalpha(current)) {
            
            if (capitalized) {
                *phrase = toupper(current);
                capitalized = 0; 
            } else {
                *phrase = tolower(current); 
            }
        } else {
            
            if (isspace(current) || ispunct(current)) {
                capitalized = 1; 
            }
        }
        phrase++;
    }
}",0
sum778,1696764752,1,"void Capitalise(char* phrase)
{
	int i = 0;
	
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
		i++;
	}
}",1
sval918,1696458709,1,"void Capitalise(char *phrase){
    
    int i = 0;
    int j;
    int length = strlen(phrase)
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    while (i < length){
        if (phrase[i] == ' '){
            j = i + 1;
            
            if (phrase[j] >= 'a' && phrase[j] <= 'z'){
                prhase[j] = phrase[j] - ('a' - 'A');
            }
        }
        i++;
    }
}",0
sval918,1696459138,2,"void Capitalise(char *phrase){
    
    int i = 0;
    int j;
    int length = strlen(phrase);
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - ('a' - 'A');
    }
    
    while (i < length){
        if (phrase[i] == ' '){
            j = i + 1;
            
            if (phrase[j] >= 'a' && phrase[j] <= 'z'){
                phrase[j] = phrase[j] - ('a' - 'A');
            }
        }
        i++;
    }
}",1
swan472,1696734291,1,"#include <stdio.h>

int isLowercaseAlpha(char c) {
    return c >= 'a' && c <= 'z';
}

char toUppercase(char c) {
    return c - ('a' - 'A');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to indicate whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlpha(phrase[i]) && capitalizeNext) {
            phrase[i] = toUppercase(phrase[i]);
            capitalizeNext = 0;
        } else if (!isLowercaseAlpha(phrase[i])) {
            capitalizeNext = 1; // Reset the flag when a non-alphabetic character is encountered
        }
    }
}

",0
swan472,1696735219,2,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char* phrase) {
    int capitalizeNext = 1; // Flag to indicate if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            // If it's not an alphabetic character, set the flag to capitalize the next character
            capitalizeNext = 1;
        }
    }
}
",0
swan472,1696742096,3,"#include <stdio.h>
#include <stdbool.h>

// Function to check if a character is a lowercase alphabetic character
bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character in each word of a phrase
void Capitalize(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}

",0
swan472,1696742228,4,"#include <stdio.h>
#include <stdbool.h>


bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}


void Capitalize(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}

",0
swan472,1696742252,5,"#include <stdio.h>
#include <stdbool.h>


bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}


void Capitalize(char phrase[]); {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}

",0
swan472,1696742821,6,"#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <ctype.h>

bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalize(char input[], char output[]) {
    bool capitalizeNext = true;
    int inputLength = strlen(input);

    for (int i = 0; i < inputLength; i++) {
        if (isLowercaseAlphabet(input[i]) && capitalizeNext) {
            output[i] = toupper(input[i]); // Convert to uppercase
            capitalizeNext = false;
        } else if (input[i] == ' ') {
            output[i] = ' ';
            capitalizeNext = true;
        } else {
            output[i] = input[i];
        }
    }
    output[inputLength] = '\0'; // Null-terminate the output string
}

",0
swan472,1696742866,7,"#include <stdio.h>

// Function to check if a character is a lowercase alphabetic character
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character of each word in a phrase
void Capitalise(char *phrase) {
    int capitalizeNext = 1;  // Flag to indicate whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i]) && capitalizeNext) {
            // Convert the lowercase character to uppercase
            phrase[i] = phrase[i] - 'a' + 'A';
            capitalizeNext = 0;  // Reset the flag
        } else if (phrase[i] == ' ') {
            // Set the flag to capitalize the next character
            capitalizeNext = 1;
        }
    }
}

",0
swan472,1696742907,8,"#include <stdio.h>
#include <stdbool.h>

bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalize(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}
",0
swan472,1696743009,9,"#include <stdio.h>
#include <stdbool.h>

bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}
",0
swan472,1696743050,10,"#include <stdio.h>
#include <stdbool.h>

bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char phrase[]) {
    bool capitaliseNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitaliseNext) {
            phrase[i] -= ('a' - 'A'); 
            capitaliseNext = false;
        } else if (phrase[i] == ' ') {
            capitaliseNext = true;
        }
    }
}",0
swan472,1696743115,11,"#include <stdio.h>
#include <stdbool.h>

// Function to check if a character is a lowercase alphabetic character
bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character in each word of a phrase
void Capitalize(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}

int main() {
    char phrase1[100] = ""god of nations at thy feet"";
    Capitalize(phrase1);
    printf(""%s\n"", phrase1);

    char phrase2[100] = ""zzzzz"";
    Capitalize(phrase2);
    printf(""%s\n"", phrase2);

    char phrase3[100] = ""hello-my - name is"";
    Capitalize(phrase3);
    printf(""%s\n"", phrase3);

    char phrase4[100] = ""hello my name is"";
    Capitalize(phrase4);
    printf(""%s\n"", phrase4);

    return 0;
}
",0
swan472,1696743121,12,"#include <stdio.h>
#include <stdbool.h>

// Function to check if a character is a lowercase alphabetic character
bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character in each word of a phrase
void Capitalize(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}
",0
swan472,1696743139,13,"#include <stdio.h>
#include <stdbool.h>

// Function to check if a character is a lowercase alphabetic character
bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character in each word of a phrase
void Capitalise(char phrase[]) {
    bool capitaliseNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitaliseNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitaliseNext = false;
        } else if (phrase[i] == ' ') {
            capitaliseNext = true;
        }
    }
}
",0
swan472,1696743158,14,"#include <stdio.h>
#include <stdbool.h>

// Function to check if a character is a lowercase alphabetic character
bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character in each word of a phrase
void Capitalise(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}
",0
swan472,1696743162,15,"#include <stdio.h>
#include <stdbool.h>

// Function to check if a character is a lowercase alphabetic character
bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character in each word of a phrase
void Capitalize(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); // Convert to uppercase
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}
",0
swan472,1696743207,16,"#include <stdio.h>
#include <stdbool.h>


bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalize(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); 
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}
",0
swan472,1696743351,17,"#include <stdio.h>
#include <stdbool.h>


bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char phrase[]) {
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitalizeNext) {
            phrase[i] -= ('a' - 'A'); 
            capitalizeNext = false;
        } else if (phrase[i] == ' ') {
            capitalizeNext = true;
        }
    }
}
",0
swan472,1696806472,18,"#include <stdio.h>

// Helper function to convert a character to uppercase
char toUpperCase(char c) {
    if (c >= 'a' && c <= 'z') {
        // Convert lowercase to uppercase by subtracting 32 (ASCII difference)
        return c - 32;
    }
    return c; // If the character is not lowercase, return it unchanged
}

// Function to capitalize the first character of each word in a phrase
void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to indicate whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = toUpperCase(phrase[i]); // Capitalize the character
            capitalizeNext = 0; // Set the flag to false since the current word has been capitalized
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1; // Set the flag to true when encountering a space to capitalize the next word
        }
    }
}
",0
swan472,1696806502,19,"#include <stdio.h>

// Helper function to convert a character to uppercase
char toUpperCase(char c) {
    if (c >= 'a' && c <= 'z') {
        // Convert lowercase to uppercase by subtracting 32 (ASCII difference)
        return c - 32;
    }
    return c; // If the character is not lowercase, return it unchanged
}

// Function to capitalize the first character of each word in a phrase
void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to indicate whether the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            phrase[i] = toUpperCase(phrase[i]); // Capitalize the character
            capitalizeNext = 0; // Set the flag to false since the current word has been capitalized
        } else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n') {
            capitalizeNext = 1; // Set the flag to true when encountering whitespace to capitalize the next word
        } else {
            capitalizeNext = 0; // Set the flag to false for uppercase characters within words
        }
    }
}
",1
sweb390,1696364514,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 97 && phrase[0] <= 122) {
    	phrase[0] = phrase[0] - 32;
    }
    
    int i = 0;
    while (phrase[i] != '\0') {
    	i++;
    	if (phrase[i - 1] == 32) {
    		if (phrase[i] >= 97 && phrase[i] <= 122) {
    			phrase[i] = phrase[i] - 32;
    		}
    	}
    }
    return;
    
}
",1
swil676,1696803993,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    for (int i = 0; i < length; i++) {
        if (i == 0){
            if(phrase[i] >= 'a' && phrase[i] <= 'z'){
            phrase[i] -= 32;
            }
            
        }
        if (phrase[i] == ' '){
            i++;
            if (phrase[i] >= 'a' && phrase[i] <= 'z'){
                phrase[i] -= 32;
            }
        }
        }
    
}
",1
syok443,1696209859,1,"void Capitalise(char *phrase){
    int i = 1;
    phrase[0] -= 32;

    while(phrase[i] != '\0'){
        if(phrase[i - 1] == ' '){
            phrase[i] -= 32;
        }
        i++;
    }

}",0
syok443,1696210256,2,"void Capitalise(char *phrase){
    int i = 1;
    if(phrase[0] > 'Z'){
        phrase[0] -= 32;
    }

    while(phrase[i] != '\0'){
        if((phrase[i] > 'Z') && (phrase[i - 1] == ' ')){
            phrase[i] -= 32;
        }
        i++;
    }

}",1
syua841,1696836772,1,"#include <stdio.h>

char ConvertUpper(char character){
    if (character >= 'a' && character <= 'z'){
        return character - ('a' - 'A');
    }
    return character;
}

void Capitalise(char *phrase){
    int i = 0;
    int newWord = 1;
    
    while (phrase[i] != '\0'){
        if (phrase[i] == ' '){
            newWord = 1;
            i++;
        } else {
            if (newWord == 1 && (phrase[i] >= 'a' && phrase[i] <= 'z')){
                phrase[i] = ConvertUpper(phrase[i]);
        }
        newWord = 0;
        i++;
        }
    }
}",1
szen566,1696298442,1,"void Capitalise(char* phrase)
{
	int i=1;

	while (phrase[i] != '\0') {
		// If character to the left of the letter is a space:
		// AND an alphabetical character, Capitalise it
		if (phrase[i - 1] == 32) {
			if (97 <= phrase[i] && 122 >= phrase[i]) {
				phrase[i] = phrase[i] - 32;
			}
		}
		i++;
	}

	// Capitalise first letter if its alphabetical
	if (97 <= phrase[0] && 122 >= phrase[0]) {
		phrase[0] = phrase[0] - 32;
	}
}
",1
szho466,1696836449,1,"void Capitalise(char *phrase)
{
    int i=0;
    while (phrase[i]!='\0'){
        if (phrase[i]>='a'&& phrase[i] <= 'z'){
            phrase[i]=phrase[i]-('a'-'A');
        }
        i++;
    }
}",0
szho466,1696837324,2,"void Capitalise(char *phrase)
{
int i=0;

        if (phrase[i]>='a'&& phrase[i] <= 'z'){
            phrase[i]=phrase[i]-('a'-'A');
        }

    i=1;
    
    while (phrase[i]!='\0' && phrase[i-1]==' '){
        if (phrase[i]>='a'&& phrase[i] <= 'z'){
            phrase[i]=phrase[i]-('a'-'A');
        }
        i++;
    }
}
    
}
",0
szho466,1696837343,3,"void Capitalise(char *phrase)
{
int i=0;

        if (phrase[i]>='a'&& phrase[i] <= 'z'){
            phrase[i]=phrase[i]-('a'-'A');
        }

    i=1;
    
    while (phrase[i]!='\0' && phrase[i-1]==' '){
        if (phrase[i]>='a'&& phrase[i] <= 'z'){
            phrase[i]=phrase[i]-('a'-'A');
        }
        i++;
    }
}
    

",0
szho466,1696837921,4,"void Capitalise(char *phrase)
{

    int i=0;

    if (phrase[i]>='a'&& phrase[i] <= 'z'){
        phrase[i]=phrase[i]-('a'-'A');
    }

    
    while (phrase[i]!='\0'){
        if (phrase[i-1]==' '){
            i ++;
            if (phrase[i]>='a'&& phrase[i] <= 'z'){
                phrase[i]=phrase[i]-('a'-'A');
            }
        }
        i++;
    }
}    
",0
szho466,1696838354,5,"void Capitalise(char *phrase)
{

int i = 0;
    if (phrase[i] >='a' && phrase[i] <= 'z'){
        phrase[i] = phrase[i] - ('a'-'A');
    }
    
    i=1;
    
    while (phrase[i] !='\O' && phrase[i - i] =="" "") {
        if (phrase[i] >='a' && phrase[i] <= 'z'){
            phrase[i]=phrase[i] - ('a'- 'A'){
        }    
        1++;    
    }
}
",0
szho466,1696838627,6,"void Capitalise(char*phrase) {
int i = 0;
    if (phrase[i] >='a' && phrase[i] <= 'z'){
        phrase[i] = phrase[i] - ('a'-'A');
    }
    
    i=1;
    
    while (phrase[i] !='\0' && phrase[i - 1] ==' ') {
        if (phrase[i] >='a' && phrase[i] <= 'z'){
            phrase[i]=phrase[i] - ('a'- 'A');
        }    
        i++;    
    }
}

",0
szho466,1696839158,7,"void Capitalize(char *phrase) {
    int i = 0;
    int firstl = 1; 

    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            
            firstl = 1;
        }
        else if (firstl && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A'); 
            firstl = 0; 
        }
        i++;
    }
}",0
szho466,1696839187,8,"void Capitalise(char *phrase) {
    int i = 0;
    int firstl = 1; 

    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            
            firstl = 1;
        }
        else if (firstl && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A'); 
            firstl = 0; 
        }
        i++;
    }
}",0
szho466,1696842302,9,"void Capitalise(char *phrase) {
    int i = 0;
    int firstl = 1; 

    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            firstl = 1; 
        }
        else if (firstl && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A'); 
            firstl = 0; 
        }
        i++;
    }
}",0
tais804,1696297617,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0]<= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }   

    int i = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            i++;
        } else {
            i++;
        }
    }
    return;
}
",0
tais804,1696297889,2,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0]<= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }   

    int i = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if (phrase[0] >= 'a' && phrase[0]<= 'z') {
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
        }
            i++;
        }
    return;
}
",0
tais804,1696297959,3,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0]<= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }   

    int i = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            if (phrase[i+1] >= 'a' && phrase[i+1]<= 'z') {
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
        }
            i++;
        }
    return;
}
",1
tbad483,1696811153,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    phrase[0] = phrase[0] - 32;
    for(int i = 0; i<length; i++){
        if (phrase[i] == 32){
            phrase[i+1] = phrase[i+1] - 32;
        }
    }
}",0
tbad483,1696811457,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    if (phrase[0] < 123 && phrase[0] > 96){
        phrase[0] = phrase[0] - 32;
    }
    for(int i = 0; i<length; i++){
        if (phrase[i] == 32){
            if (phrase[i+1] < 123 && phrase[i+1] > 96){
                phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }
}",1
tbar968,1696662597,1,"void Capitalise(char* phrase)
{
	int i;
	while (phrase[i] != '\0') {
		if (phrase[i + 1] != '\0') {
			if (phrase[i - 1] == 32 || i == 0) {
				if (phrase[i] >= 97 && phrase[i] <= 122) {
					phrase[i]=phrase[i]-32;
				}
			}
		}
		i++;
	}
}",0
tbar968,1696662746,2,"void Capitalise(char* phrase)
{
	int i;
	i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i + 1] != '\0') {
			if (phrase[i - 1] == 32 || i == 0) {
				if (phrase[i] >= 97 && phrase[i] <= 122) {
					phrase[i] = phrase[i] - 32;
				}
			}
		}
		i++;
	}
}",0
tbar968,1696663322,3,"void Capitalise(char* phrase)
{
	int i;
	i=0;
	while (phrase[i] != '\0') {
			if (phrase[i - 1] == 32 || i == 0) {
				if (phrase[i] >= 97 && phrase[i] <= 122) {
					phrase[i]=phrase[i]-32;
				}
			}
		i++;
	}
}",1
tbar971,1696299092,1,"void Capitalise(char *phrase)
{
    	if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	int i = 1;
	while (phrase[i + 1] != '\0') {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		i++;
	}
}
",0
tbar971,1696299264,2,"void Capitalise(char *phrase)
{
	if ((phrase[0] >= 'a') && (phrase[0] <= 'z')) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	int i = 1;
	while (phrase[i + 1] != '\0') {
		if (phrase[i] == ' ') {
			if ((phrase[i + 1] >= 'a') && (phrase[i + 1] <= 'z')) {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
		i++;
	}
}
",1
tbas606,1696830974,1,"#include <stdio.h>
// The function Capitalise capitalizes the first character of each word in the phrase
// Author: Taha Basar
void Capitalise(char *word) {
    int capitalizeNext = 1; 

    for (int i = 0; word[i] != '\0'; i++) {
        if (word[i] == ' ') {
            capitalizeNext = 1; 
        } else if (capitalizeNext && (word[i] >= 'a' && word[i] <= 'z')) {
            word[i] -= 32;
            capitalizeNext = 0;
        }
    }
}",0
tbas606,1696831276,2,"#include <stdio.h>

// The function capitalize capitalizes the first character of each word in a phrase
// Author: Taha Basar
void Capitalize(char *word) {
    int nextCapital = 1;

    for (int i = 0; word[i] != '\0'; i++) {
        if (word[i] >= 'a' && word[i] <= 'z' && nextCapital) {
            word[i] -= ('a' - 'A');
            nextCapital = 0;
        }
        else if (word[i] == ' ' || word[i] == '\t') {
            nextCapital = 1;
        }
    }
}
",0
tbas606,1696831310,3,"#include <stdio.h>

// The function capitalize capitalizes the first character of each word in a phrase
// Author: Taha Basar
void Capitalise(char *word) {
    int nextCapital = 1;

    for (int i = 0; word[i] != '\0'; i++) {
        if (word[i] >= 'a' && word[i] <= 'z' && nextCapital) {
            word[i] -= ('a' - 'A');
            nextCapital = 0;
        }
        else if (word[i] == ' ' || word[i] == '\t') {
            nextCapital = 1;
        }
    }
}
",0
tbas606,1696831890,4,"#include <stdio.h>
// The function capitalize capitalizes the first character of each word in a phrase
// Author: Taha Basar

// Helper function to check if a character is a lowercase alphabet letter
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

// Helper function to convert a lowercase character to uppercase
char toUpperCase(char c) {
    return c - ('a' - 'A');
}

// Main function
void Capitalise(char *phrase) {
    int capitaliseNext = 1;
    
    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i]) && capitaliseNext) {
            phrase[i] = toUpperCase(phrase[i]);
            capitaliseNext = 0; // Reset the flag
        }
        else if (!isLowerCase(phrase[i])) {
            capitaliseNext = 1;
        }
    }
}",0
tbas606,1696831980,5,"#include <stdio.h>
// The function capitalize capitalizes the first character of each word in a phrase
// Author: Taha Basar

// Helper function to check if a character is a lowercase alphabet character
int isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character of each word in the phrase
void Capitalise(char *phrase) {
    int capitaliseNext = 1; // Flag to indicate if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabet(phrase[i]) && capitaliseNext) {
            // Convert lowercase to uppercase by subtracting 32 from the ASCII value
            phrase[i] = phrase[i] - 32;
            capitaliseNext = 0; // Reset the flag after capitalizing
        } else if (!isLowercaseAlphabet(phrase[i])) {
            capitaliseNext = 1; // Set the flag if the character is not a lowercase alphabet
        }
    }
}",0
tbas606,1696832164,6,"#include <stdio.h>
#include <ctype.h>
// The function capitalize capitalizes the first character of each word in a phrase
// Author: Taha Basar

void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to indicate if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]); // Capitalize the first character
                capitalizeNext = 0; // Reset the flag after capitalizing
            } else {
                phrase[i] = tolower(phrase[i]); // Convert other characters to lowercase
            }
        } else {
            capitalizeNext = 1; // Set the flag if the character is not alphabetic
        }
    }
}",0
tbas606,1696833319,7,"#include <stdio.h>
// The function capitalize capitalizes the first character of each word in a phrase
// Author: Taha Basar

// Helper function that checks if a given character is lowercase
int isLowercaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char* phrase) {
    int capitalizeNext = 1; 

    while (phrase[i] != '\0') {
        if (isLowercaseAlpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = phrase[i] - ('a' - 'A');
                capitalizeNext = 0;
            }
        }
        else {
            capitalizeNext = 1;
        }

        if (phrase[i] == ' ' || phrase[i] == '-') {
            capitalizeNext = 1;
        }

        if (phrase[i] == '-') {
            capitalizeNext = 0;
        }

        i++;
    }
}",0
tbas606,1696833379,8,"#include <stdio.h>
// The function capitalize capitalizes the first character of each word in a phrase
// Author: Taha Basar

// Helper function that checks if a given character is lowercase
int isLowercaseAlpha(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int i = 0;
    int capitalizeNext = 1;

    while (phrase[i] != '\0') {
        if (isLowercaseAlpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = phrase[i] - ('a' - 'A');
                capitalizeNext = 0;
            }
        } else {
            capitalizeNext = 1;
        }

        if (phrase[i] == ' ' || phrase[i] == '-') {
            capitalizeNext = 1;
        }

        if (phrase[i] == '-') {
            capitalizeNext = 0;
        }

        i++;
    }
}
",0
tbed601,1696745106,1,"void Capitalise(char *phrase)
{
  int i, length;
    length = strlen(phrase);
    for (i = 0; i < length; i++) 
    {
    // Initialise Index 0 to capital //
        if ( (phrase[0] >= 'a') && (phrase[0] < 'z') ) {
        phrase[0] = phrase[0] - ('a' - 'A');
        }
        
        
        if (phrase[i] == ' ') {
            if ( (phrase[i+1] >= 'a') && (phrase[i+1] < 'z') ) {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
            }
        }
    
    }
    return;  
}
",0
tbed601,1696745302,2,"void Capitalise(char *phrase)
{
  int i, length;
    length = strlen(phrase);
    for (i = 0; i < length; i++) 
    {
    // Initialise Index 0 to capital //
        if ( (phrase[0] >= 'a') && (phrase[0] <= 'z') ) {
        phrase[0] = phrase[0] - ('a' - 'A');
        }
        
        
        if (phrase[i] == ' ') {
            if ( (phrase[i+1] >= 'a') && (phrase[i+1] <= 'z') ) {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
            }
        }
    
    }
    return;  
}
",1
tbri557,1696798791,1,"void Capitalise(char *phrase)
{
    int capstate, current;
    capstate = 1;
    for(int i = 0; i<strlen(phrase); i++){
        current = phrase[i];
        if (current > 96 && current < 123 && capstate == 1){
            phrase[i] -= 32;
            capstate = 0;
        }
            
        else if(current == 32){
            capstate = 1;
        }
        
    }
}",0
tbri557,1696799373,2,"void Capitalise(char *phrase)
{
    int capstate, current;
    capstate = 0;
    for(int i = 0; i<strlen(phrase); i++){
        current = phrase[i];
        
        
        if(current == 32){
            capstate = 1;
        }
        
        else if (current > 96 && current < 123 && capstate == 1){
            phrase[i] -= 32;
            capstate = 0;
        }
            
        else{
            capstate = 0;
        }

        
    }
}",0
tbri557,1696799500,3,"void Capitalise(char *phrase)
{
    int capstate, current;
    capstate = 1;
    for(int i = 0; i<strlen(phrase); i++){
        current = phrase[i];
        
        
        if(current == 32){
            capstate = 1;
        }
        
        else if (current > 96 && current < 123 && capstate == 1){
            phrase[i] -= 32;
            capstate = 0;
        }
            
        else{
            capstate = 0;
        }

        
    }
}",1
tche867,1696803255,1,"void Capitalise(char *phrase)
{
    int diff = 'a' - 'A';
	int counter = 1;
	phrase[0] = phrase[0] - diff;
	while (phrase[counter] != '\0')
	{
		if (phrase[counter - 1] == ' ')
		{
			phrase[counter] = phrase[counter] - diff;
		}
		counter++;
	}

}
",0
tche867,1696803603,2,"void Capitalise(char *phrase)
{
	int diff = 'a' - 'A';
	int counter = 1;
	if (phrase[0] >= 97 && phrase[0] <= 122)
	{
		phrase[0] = phrase[0] - diff;
	}
	while (phrase[counter] != '\0')
	{
		if (phrase[counter - 1] == ' ' && (phrase[counter] >= 97 && phrase[counter] <= 122))
		{
			phrase[counter] = phrase[counter] - diff;
		}
		counter++;
	}

}
",1
tcoo725,1696756437,1,"
void Capitalise(char *phrase)
{
    int N = 1;
    int i;
    
    for (i = 0; phrase[i] != '\0'; i++)
    {
        if ((phrase[i] >= 'A' && phrase[i] <= 'Z') || (phrase[i] >= 'a' && phrase[i] <= 'z'))
        {
            if (N){
                if (phrase[i] >= 'a' && phrase[i] <= 'z')
                {
                    phrase[i] = phrase[i] - ('a' - 'A');
                }
                N = 0;
            }
            else 
            {
                if (phrase [i] >= 'A' && phrase[i] <= 'Z'){
                    phrase[i] += 'a' - 'A';
                }
            }
            
        }
        else {
            N = 1;
        }
    }
    
}",0
tcoo725,1696763072,2,"
void Capitalise(char *phrase)
{
    int N = 1;
    int i;
    
    for (i = 0; phrase[i] != '\0'; i++)
    {
        if ((phrase[i] >= 'A' && phrase[i] <= 'Z') || (phrase[i] >= 'a' && phrase[i] <= 'z'))
        {
            if (N) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z')
                {
                    phrase[i] = phrase[i] - ('a' - 'A');
                }
                N = 0;
            }
            else 
            {
                if (phrase [i] >= 'A' && phrase[i] <= 'Z'){
                    phrase[i] += 'a' - 'A';
                }
            }
            
        }
        else 
        {
               if (phrase[i] == '-' || phrase[i] == ' ')
              {
                N = 1;
              }
        }
    }
}",0
tcoo725,1696763572,3,"
void Capitalise(char *phrase)
{
    int N = 1;
    int i;
    
    for (i = 0; phrase[i] != '\0'; i++)
    {
        if ((phrase[i] >= 'A' && phrase[i] <= 'Z') || (phrase[i] >= 'a' && phrase[i] <= 'z'))
        {
            if (N) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z')
                {
                    phrase[i] = phrase[i] - ('a' - 'A');
                }
                N = 0;
            }
            else 
            {
                if (phrase [i] >= 'A' && phrase[i] <= 'Z'){
                    phrase[i] += 'a' - 'A';
                }
            }
            
        }
        else 
        {
               if (phrase[i] == '-')
              {
                N = 0;
              }
        else 
        {
            if (phrase[i] == ' '){
                N = 1;
            }
            
        }
    }
}
}",0
tcoo725,1696803363,4,"void Capitalise(char *phrase)
{
    int N = 1;
    int i;
    
    for (i = 0; phrase[i] != '\0'; i++)
    {
        if ((phrase[i] >= 'A' && phrase[i] <= 'Z') || (phrase[i] >= 'a' && phrase[i] <= 'z'))
        {
            if (N) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z')
                {
                    phrase[i] = phrase[i] - ('a' - 'A');
                }
                N = 0;
            }
            else 
            {
                if (phrase [i] >= 'A' && phrase[i] <= 'Z'){
                    phrase[i] += 'a' - 'A';
                }
            }
            
        }
        else 
        {
               if (phrase[i] == '-')
              {
                N = 0;
              }
        else 
        {
            if (phrase[i] == ' '){
                N = 1;
            }
            
        
        else 
        {
            if (phrase[i] == '(' ){
                N = 0;
            }
        }
    }
}
}
}",1
tden200,1696847810,1,"
void Capitalise(char* phrase)
{
	int i;
		int length = strlen(phrase);
		
		phrase[0] = phrase[0] - 32;
		for (i = 0; i < length; i++) {
			if (phrase[i] == ' ') {
				phrase[i+1] = phrase[i] - 32;
			}
				
				else{
				    phrase[i] = phrase[i];
				}
		}
	
}
",0
tden200,1696848832,2,"
void Capitalise(char* phrase)
{
	int i;
		int length = strlen(phrase);
		


		for (i = 0; i < length; i++) {
			if (phrase[i-1] == ' ') {
				phrase[i] = phrase[i] - 32;
				if(phrase[i] - 32 == 0-1000){
				    phrase[i] = phrase[i];
				}
			}
				
				else{
				    phrase[i] = phrase[i];
				}
		}
	
}
",0
tden200,1696849111,3,"
void Capitalise(char* phrase)

{
	int i;
		int length = strlen(phrase);
		
if(phrase[0] == 0-25){
    phrase[0]=phrase[0];
}
    else{
        phrase[0] = phrase[0] - 32;
    }

		for (i = 0; i < length; i++) {
			if (phrase[i-1] == ' ') {
				phrase[i] = phrase[i] - 32;
				if(phrase[i] == 0-25){
				    phrase[i] = phrase[i];
				}
			}
				
				else{
				    phrase[i] = phrase[i];
				}
		}
	
}
",0
tdha392,1696847489,1,"void Capitalise(char *phrase) {
    
    int i;
    
    for (i = 0, i < strlen(phrase), i++) {
        
        if (i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - 32;
        }
        else if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
        phrase[i + 1] = phrase[i + 1] - 32;
            i++
        }
    }
}
",0
tdha392,1696847763,2,"void Capitalise(char *phrase) {
    
    int i;
    
    for (i = 0; i < strlen(phrase); i++) {
        
        if (i == 0 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - 32;
        }
        else if (phrase[i] == ' ' && phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
        phrase[i + 1] = phrase[i + 1] - 32;
            i++;
        }
    }
}",1
tdic873,1696296615,1,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[i] > 96 && phrase[i] < 123) phrase[i] = phrase[i] - ('a' - 'A');
    i++;
    do {
        if (phrase[i - 1] == ' ' && phrase[i] > 96 && phrase[i] < 123)
        {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        i++;
    } while (phrase[i] != '\0');
}
",1
tdon950,1696670908,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i = 0;
    int l = strlen(phrase);
    
    for (i = 0; i <= l; i++) 
    {
        if ((i == 0) ||  (phrase[i - 1] == 32))
        {
            phrase[i] = phrase[i] - 32;
        }
    }
    return;
}

",0
tdon950,1696671077,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int i = 0;
    int l = strlen(phrase);
    
    for (i = 0; i <= l; i++) 
    {
        if (((i == 0) ||  (phrase[i - 1] == 32)) && (phrase[i] >= 97) && (phrase[i] <= 122))
        {
            phrase[i] = phrase[i] - 32;
        }
    }
    return;
}

",1
tdu824,1696764765,1,"void Capitalise(char *phrase)
{
int i = 0;
    while (phrase[i] != '\0') {
        if (i == 0 && phrase[i] >= 97 && phrase[i] <= 122){
           phrase[i] = phrase[i] - 32;
        } else if (phrase[i-1] == 32 && phrase[i] >= 97 && phrase[i] <= 122){
            phrase[i] = phrase[i] - 32;
        }
    i++;
    }

}
",1
tfai092,1696754200,1,"void Capitalise(char *phrase) {
    
    int length = strlen(phrase) - 1;
    
    for (int i=0; i < length; i++) {
        
        if (phrase[i]==' ' && phrase[i+1] > 96 && phrase[i+1] < 123) {
            
            phrase[i+1] = toupper(phrase[i+1]);
            
        }
        
        if (i==0 && phrase[i+1] > 96 && phrase[i+1] < 123) {
            phrase[i] = toupper(phrase[i]);
        }
    }
}",0
tfai092,1696754844,2,"void Capitalise(char *phrase) {
    
    int length = strlen(phrase) - 1;
    
    for (int i=0; i < length; i++) {
        
        if (phrase[i]==' ' && phrase[i+1] > 96 && phrase[i+1] < 123) {
            
            phrase[i+1] = toupper(phrase[i+1]);
            
        }
        
        if (i==0 && phrase[i+1] > 96 && phrase[i+1] < 123) {
            phrase[i] = toupper(phrase[i]);
        }
    }
    
    if (length = 1) {
        phrase[0] = toupper(phrase[0]);
    }
}
",0
tfai092,1696754912,3,"void Capitalise(char *phrase) {
    
    int length = strlen(phrase) - 1;
    
    for (int i=0; i < length; i++) {
        
        if (phrase[i]==' ' && phrase[i+1] > 96 && phrase[i+1] < 123) {
            
            phrase[i+1] = toupper(phrase[i+1]);
            
        }
        
        if (i==0 && phrase[i+1] > 96 && phrase[i+1] < 123) {
            phrase[i] = toupper(phrase[i]);
        }
    }
    
    if (length == 0) {
        phrase[0] = toupper(phrase[0]);
    }
}
",1
tfai653,1696298637,1,"void Capitalise(char *phrase){
    
    // Define variables.
    int i = 0;
    int length = 0;

    // Find the length of the string array.
    while (phrase[i] != '\0') {
        i++;
        length++;
    }

    // If first letter is not a capital letter then capitalise it.
    if (phrase[0] >= 97) {
        phrase[0] = phrase[0] - 32;
    }

    // If the first letter of any word is not a capital then capitalise.
    for (i = 0; i < length; i++)
        if (phrase[i] == 32) {
            if (phrase[i + 1] >= 97) {
                phrase[i + 1] = phrase[i + 1] - 32;
            }
        }
}",1
tfru173,1696844468,1,"#include <stdio.h>
#include <ctype.h>

char upper(char letter) 
{
    if (islower(letter)) 
    {
        return toupper(letter);
    }
    return c;
}


void Capitalise(char *phrase) 
{
    int capitalise = 1;

    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (isspace(phrase[i])) 
        {
            capitalise = 1;
        } else 
        {
            if (capitalise && islower(phrase[i])) 
            {
                phrase[i] = upper(phrase[i]); 
                capitalise = 0; 
            } else {
                capitalise = 0; 
            }
        }
    }
}
",0
tfru173,1696844482,2,"#include <stdio.h>
#include <ctype.h>

char upper(char letter) 
{
    if (islower(letter)) 
    {
        return toupper(letter);
    }
    return letter;
}


void Capitalise(char *phrase) 
{
    int capitalise = 1;

    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (isspace(phrase[i])) 
        {
            capitalise = 1;
        } else 
        {
            if (capitalise && islower(phrase[i])) 
            {
                phrase[i] = upper(phrase[i]); 
                capitalise = 0; 
            } else {
                capitalise = 0; 
            }
        }
    }
}
",1
thal182,1696211438,1,"void Capitalise(char *phrase)
{
int length = strlen(phrase);
if (phrase[0] >= 'a' && phrase[0] <= 'z'){
    phrase[0] = phrase[0] - 32;
}

    for (int i = 0; i < length; i++){
        if (phrase[i] == ' '){
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z'){
            phrase[i+1] = phrase[i+1] - 32;
            }
        }
    }   
}
",1
thar970,1696248277,1,"void Capitalise(char *phrase){
    phrase[0]=(char)((int)phrase[0]-32);
    for(int i=1;i<strlen(phrase);i++){
        if((int)phrase[i-1]==32){
            phrase[i]=(char)((int)phrase[i]-32);
        }
    }
    
}",0
thar970,1696248453,2,"void Capitalise(char *phrase){
    if((int)phrase[0]>91){
        phrase[0]=(char)((int)phrase[0]-32);
    }
    for(int i=1;i<strlen(phrase);i++){
        if((int)phrase[i-1]==32&&(int)phrase[i]>91){
            phrase[i]=(char)((int)phrase[i]-32);
        }
    }
    
}",1
thid924,1696683377,1,"void Capitalise(char* phrase)
{
	int length = strlen(phrase);

	for (int i = 0; i < length; i++) {
		//check if first position is a letter then capitalise if it is
	
		//check for the space, then check for the letter after it and then capitalise that
		if ((phrase[i] == ' ') && (phrase[i+1] <= 122 && phrase[i+1] >= 97)) {
			phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
		}
		
		else {

		}

	}

	if (phrase[0] <= 122 && phrase[0] >= 97) {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

}",1
thua238,1696661383,1,"void Capitalise(char *phrase)
{
    //if first char is letter, capitalise
    if (phrase[0]>='a' && phrase[0]<='z') {
        phrase[0] -= 32;
    }
    
    //capitalise first letter of every new word
    for (int i=1; i<strlen(phrase); i++) {
        if (phrase[i]>='a' && phrase[i]<='z' && phrase[i-1]==' ') {
            phrase[i] -= 32;
        }
    }
    
}
",1
thut580,1696305902,1,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] + ('A' - 'a');
	}

	int i;
	for (i = 1; i < strlen(phrase); i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] + ('A' - 'a');
			}
		}
	}
}
",1
tkan918,1696399993,1,"void Capitalise(char *phrase)
{
    //find the length of the word input
    int length = 0;
    while(phrase[length] != '\0') {
        length = length+1;
    }

    //Capitalise the first character in the phrase if it is a lower-case letter
    int i = 0;
    if(phrase[i] >= 97 && phrase[i] <=122) {
        phrase[i] = phrase[i] - 32;
    }

    //Scan through the phrase for a whitespace, then capitalise the character in front of the whitespace if it is a lower-case letter
    for(i=0; i<length; i++){
        if(phrase[i] == 32 && phrase[i+1]>= 97 && phrase[i+1] <=122)
        {
            phrase[i+1] = phrase[i+1] - 32;
        }
        
    }
}",1
tlal352,1696832881,1,"void Capitalise(char *phrase)
{
  // check if first letter is an alphabet
    // capitalize the letter
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == ' ') {
            int x = i + 1; // Index position after the space
            
            // skip past non-alphabetical characters in the string until an alphabet letter is reached
            while (!(phrase[x] >= 'A' && phrase[x] <= 'Z') && !(phrase[x] >= 'a' && phrase[x] <= 'z')) {
                x++;
            }

            // Check if the character is an alphabet and change to capital
            if (phrase[x] >= 'a' && phrase[x] <= 'z') {
                phrase[x] = phrase[x] - ('a' - 'A');
            }
        }
    }  
}",1
tlin438,1696668204,1,"void Capitalise(char *phrase) {
    int isFirstChar = 1;

    for (int i = 0; phrase[i]; i++) {
        if ((phrase[i] >= 'a' && phrase[i] <= 'z') && (isFirstChar || phrase[i - 1] == ' ')) {
            phrase[i] -= 'a' - 'A'; // Convert to uppercase
            isFirstChar = 0;
        } else if (phrase[i] == ' ') {
            isFirstChar = 1;
        }
    }
}",0
tlin438,1696669106,2,"int islowercase(char b) {
    return b>='a' && b<='z';
}

int isuppercase(char b) {
    return b>='A' && b<='Z';
}

int isSpace(char b) {
    return b==' ';
}

void Capitalise(char *phrase) {
    int isFirstChar = 1;

    for (int i = 0; phrase[i]; i++) {
        if (islowercase(phrase[i]) && (isFirstChar || isSpace(phrase[i - 1]))) {
            phrase[i] -= 'a' - 'A'; // Convert to uppercase
            isFirstChar = 0;
        } else if (isSpace(phrase[i])) {
            isFirstChar = 1;
        } else if (isuppercase(phrase[i]) && isFirstChar) {
            // Skip the entire word if the first letter of the word is already uppercase
            while (phrase[i] && !isSpace(phrase[i])) {
                i++;
            }
            isFirstChar = 1;
        }
    }
}",0
tlin438,1696669838,3,"int isLowerCase(char c) {
    return c >= 'a' && c <= 'z';
}

int isUpperCase(char c) {
    return c >= 'A' && c <= 'Z';
}

int isSpaceOrTab(char c) {
    return c == ' ' || c == '\t';
}

void Capitalise(char *phrase) {
    int isFirstChar = 1;

    for (int i = 0; phrase[i]; i++) {
        char currentChar = phrase[i];
        
        if (isSpaceOrTab(currentChar)) {
            isFirstChar = 1;
        } else if (isLowerCase(currentChar) && (isFirstChar || isSpaceOrTab(phrase[i - 1]))) {
            phrase[i] -= 'a' - 'A'; // Convert to uppercase
            isFirstChar = 0;
        } else if (isUpperCase(currentChar) && isFirstChar) {
            // Skip the entire word when the first letter is already uppercase
            while (phrase[i] && !isSpaceOrTab(phrase[i])) {
                i++;
            }
            isFirstChar = 1;
        } else {
            isFirstChar = 0;
        }
    }
}",1
tlu253,1696303015,1,"char Cap(char letter) {
    if ((letter >= 'a') && (letter <= 'z')) {
        letter = letter - ('a' - 'A');
    }

    return letter;

}

void Capitalise(char *phrase)
{
    int i = 1;

    //capitalise 1st letter of phrase
    phrase[0] = Cap(phrase[0]);

    //iterate through the whole string
    while (phrase[i] != '\0') {

        // if start of word, capitalise first letter of word
        if (phrase[i-1] == ' ') {
            phrase[i] = Cap(phrase[i]);
        }

        i++;

    }

}",1
tluu816,1696715421,1,"void Capitalise(char* phrase)
{
	int i = 0;
	// ensures the first value is capitalized 
	phrase[0] = phrase[0] - 32;
	// every letter after a space will be capitalized
	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}
}",0
tluu816,1696715714,2,"void Capitalise(char* phrase)
{
	int i = 0;
	// ensures the first value is capitalized 
	if (phrase[i] > 96) {
		phrase[0] = phrase[0] - 32;
	}
	// every letter after a space will be capitalized
	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] > 96) {
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
		i++;
	}
}",1
tman942,1696646703,1,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>
#include <string.h>

// Function to capitalize the first character in each word
void CapitalizeWords(char *phrase) {
    int length = strlen(phrase);
    bool capitalizeNext = true; // Flag to indicate whether the next character should be capitalized

    for (int i = 0; i < length; i++) {
        if (isalpha(phrase[i])) {
            // If it's an alphabetic character and we should capitalize, do so
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = false;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            // If it's not an alphabetic character, reset the capitalizeNext flag
            capitalizeNext = true;
        }
    }
}",0
tman942,1696646881,2,"#include <stdio.h>
#include <string.h>
#include <stdbool.h>

// Function to check if a character is a lowercase alphabetic character
bool isLowerCaseAlphabetic(char c) {
    return (c >= 'a' && c <= 'z');
}

// Function to capitalize the first character in each word
void CapitalizeWords(char *phrase) {
    int length = strlen(phrase);
    bool capitalizeNext = true; // Flag to indicate whether the next character should be capitalized

    for (int i = 0; i < length; i++) {
        char currentChar = phrase[i];

        if (isLowerCaseAlphabetic(currentChar)) {
            if (capitalizeNext) {
                phrase[i] = currentChar - 'a' + 'A'; // Convert to uppercase
                capitalizeNext = false;
            }
        } else {
            // If it's not a lowercase alphabetic character, reset the flag
            capitalizeNext = true;
        }
    }
}
",0
tman942,1696654907,3,"#include <stdio.h>
#include <ctype.h>

void CapitalizeWords(char* phrase) {
    // Set the first character to uppercase
    phrase[0] = toupper(phrase[0]);

    // Loop through the phrase to capitalize subsequent words
    for (int i = 1; phrase[i] != '\0'; i++) {
        // Check if the current character is a space
        if (isspace(phrase[i])) {
            // If a space is found, capitalize the next character
            phrase[i + 1] = toupper(phrase[i + 1]);
        }
    }
}


",0
tman942,1696654948,4,"#include <stdio.h>
#include <ctype.h>

void CapitaliseWords(char* phrase) {
    // Set the first character to uppercase
    phrase[0] = toupper(phrase[0]);

    // Loop through the phrase to capitalize subsequent words
    for (int i = 1; phrase[i] != '\0'; i++) {
        // Check if the current character is a space
        if (isspace(phrase[i])) {
            // If a space is found, capitalize the next character
            phrase[i + 1] = toupper(phrase[i + 1]);
        }
    }
}


",0
tmcl219,1696671920,1,"void Capitalise(char *phrase)
{
    for (int i = 0; i<100; i++){
        if (phrase[i] == 0 || phrase[i - 1] == '\0') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = toupper(phrase[i]);
            }
        }
    }
    return;
}  ",0
tmcl219,1696674530,2,"void Capitalise(char *phrase)
{
    int phraseLength = strlen (phrase);
    
    for (int i = 0; i<phraseLength; i++) {
        if (i == 0 || phrase [i - 1] == ' ') {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = toupper(phrase[i]);
            }
        }
    }
    return;
}  ",1
tmen190,1696218596,1,"/* Capitalise uppercases the first letters of every word */

void Capitalise(char *phrase) {
	// Declare variables
	int length = strlen(phrase);
	int isSpace = 1;

	for (int i = 0; i <= length; i++)
	{
		if ((isSpace == 1) && (phrase[i] >= 'a') && ((phrase[i] <= 'z')))
		{
			phrase[i] = phrase[i] - ('a'-'A');
			isSpace = 0;
		}
		else if (phrase[i] == ' ')
		{
			isSpace = 1;
		}
	}
}",0
tmen190,1696218823,2,"/* Capitalise uppercases the first letters of every word */

void Capitalise(char *phrase) {
	// Declare variables
	int length = strlen(phrase);
	int isSpace = 1;

	for (int i = 0; i <= length; i++)
	{
		if ((isSpace == 1) && (phrase[i] >= 'a') && ((phrase[i] <= 'z')))
		{
			phrase[i] = phrase[i] - ('a'-'A');
			isSpace = 0;
		}
		else if (phrase[i] == ' ')
		{
			isSpace = 1;
		}
		else if (phrase[i] != ' ')
		{
			isSpace = 0;
		}
	}
}",1
tmir110,1697176080,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    
    for (int i = 0; i < length; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && (i == 0 || phrase[i-1] == ' '))
        phrase[i] = phrase[i] -32;
    }
}",1
tmun974,1696643445,1,"void Capitalise(char *phrase)
{
    int i=o;
    int x=1;

while (phrase[i] != '\0'){
    if (x && phrase >= 'a' && phrase[i] <= 'z'){
        phrase[i] -=32;
         x=o;
         else if (phrase[i] == ' '){
            x=1;
         }
    }
    i++;
}
",0
tmun974,1696643539,2,"void Capitalise(char *phrase)
{
    int i=0;
    int x=1;

while (phrase[i] != '\0'){
    if (x && phrase >= 'a' && phrase[i] <= 'z'){
        phrase[i] -=32;
         x=o;
         else if (phrase[i] == ' '){
            x=1;
         }
    }
    i++;
}
",0
tmun974,1696643648,3,"void Capitalise(char *phrase)
{
    int i=0;
    int x=1;

while (phrase[i] != '\0'){
    if (x && phrase >= 'a' && phrase[i] <= 'z'){
        phrase[i] -=32;
         x=0;
         }else if (phrase[i] == ' '){
            x=1;
         }
    }
    i++;
}
",0
tmun974,1696662169,4,"void Capitalise(char *phrase)
{
    int i=o;

if (phrase[i]>= 'a' && phrase[i]<= 'z'){
    phrase[i]= -=32;
}
while (phrase[i] != '\0'){
    if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i] <= 'z'){
        phrase[i+1]= -=32;
    }
    i++
    }
}
",0
tmun974,1696662224,5,"void Capitalise(char *phrase)
{
    int i=0;

if (phrase[i]>= 'a' && phrase[i]<= 'z'){
    phrase[i] -=32;
}
while (phrase[i] != '\0'){
    if (phrase[i] == ' ' && phrase[i+1] >= 'a' && phrase[i] <= 'z'){
        phrase[i+1] -=32;
    }
    i++;
    }
}
",1
tpan328,1696297538,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= ('a' - 'A');
    } 

    for (int i = 1; i < strlen(phrase); i++) {
        if (phrase[i - 1] == 32) {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] -= ('a' - 'A');
            }
        }
    }
}
",1
tpat456,1696213403,1,"void Capitalise(char *phrase)
{
  int length,i;
  while (phrase[i] != '\0' && phrase[i + 1] != '\0') {
    i++;
  }
  length = i;
   char letter;
  for (i = 0; i < length; i++) {
    letter = phrase[i];
    if (letter == ' ') {
      phrase[i + 1] = phrase[i + 1] - 32;
    }
  }
 phrase[0] = phrase[0] - 32;
 
}
",0
tpat456,1696214258,2,"void Capitalise(char *phrase)
{
  int length,i;
  phrase[0] = phrase[0] - 32;
  while (phrase[i] != '\0') {
    i++;
  }
  length = i;
  
  for (i = 0; i < length; i++) {
    if (phrase[i] == ' ') {
      phrase[i + 1] = phrase[i + 1] - 32;
    }
  }
 
}",0
tpat456,1696215037,3,"void Capitalise(char *phrase)
{
  int length = 0,i = 0;
  phrase[0] = phrase[0] - 32;
  
  while (phrase[i] != '\0'){
    i++;
  }
  length = i;
  
  i = 0;
  int letter = 0;
  for (i = 0;i < length; i++){
    letter = phrase[i];
    if (letter == 32){
      phrase[i + 1] = phrase[i + 1] - 32;
    }
  }
}",0
tpat456,1696215267,4,"void Capitalise(char *phrase)
{
  int length = 0,i = 0;
  if (phrase[0] >= 97 && phrase[0] <= 122) {
  phrase[0] = phrase[0] - 32;
  }
  
  while (phrase[i] != '\0'){
    i++;
  }
  length = i;
  
  i = 0;
  int letter = 0;
  for (i = 0;i < length; i++){
    letter = phrase[i];
    if (letter == 32 && phrase[i + 1] >= 97 && phrase[i + 1] <= 122){
      phrase[i + 1] = phrase[i + 1] - 32;
    }
  }
}",1
tpil529,1696386425,1,"void Capitalise(char *phrase)
{
    int length  = strlen(phrase);

    for (int i = 0; i<length; i++)
    {

        if (phrase[i] == ' ')
        {
            phrase[i+1] = phrase[i+1] - 32;
        }
        if (i == 0)
        {
            phrase[i] = phrase[i] - 32;
        }
    }

 return;
}
",0
tpil529,1696387683,2,"void Capitalise(char *phrase)
{
    int length  = strlen(phrase);

    for (int i = 0; i<length; i++)
    {
        if(phrase[i] == ' ')
        {
            if ((phrase[i+1] < 123 && phrase[i+1] >96) && i < (length -1))
            {
                phrase[i+1] = phrase[i+1] -32;
            }
        }
        else if (i == 0)
        {
            if (phrase[i] < 123 && phrase[i] >96)
            {
                phrase[i] = phrase[i] -32;
            }
        }
    }

 return;
}
",1
tpra228,1696831997,1,"void Capitalise(char* phrase) {
    int i = 0;

    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[i] = phrase[i] - ('a' - 'A');
    }

    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {
            i++;
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
        i++;
    }
}
",1
tpur744,1696840353,1,"void Capitalise(char *phrase){
    
    int a = strlen(phrase);
    for (int i = 0;i<a;i++){
        char currentChar = phrase[i];
        if (currentChar >= 'a' && currentChar <= 'z' && (i == 0 || phrase[i-1]== ' ')){
            phrase[i] = currentChar - ('a' - 'A');
            }
        }
    
}",1
tqhu735,1696228878,1,"void Capitalise(char* phrase)
{
	int i;
	for (i = 0; i < strlen(phrase); i++) {
		if (i == 0 && phrase[i] > 96 && phrase[i] < 123) {
			phrase[i] = phrase[i] - 32;
		}
		else if (phrase[i] == 32 && phrase[i + 1] > 96 && phrase[i + 1] < 123) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}",1
tron042,1696313089,1,"#include <stdio.h>
void Capitalise(char *phrase) {
    int i;
    
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[i] - ('a' - 'A'); 
    }

    for (i = 1; phrase[i] != '\0'; i++) { 
        if (phrase[i] >= 97 && phrase[i] <= 122) { 
        if (phrase[i - 1] == 32 || i == 0) {
            phrase[i] = phrase[i] - ('a' - 'A'); 
        }
        } 
    }
}
",0
tron042,1696313270,2,"#include <stdio.h>
void Capitalise(char *phrase) {
    int i;
    
    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - ('a' - 'A'); 
    }

    for (i = 1; phrase[i] != '\0'; i++) { 
        if (phrase[i] >= 97 && phrase[i] <= 122) { 
        if (phrase[i - 1] == 32 || i == 0) {
            phrase[i] = phrase[i] - ('a' - 'A'); 
        }
        } 
    }
}
",1
tsan986,1696306459,1,"void Capitalise(char *phrase)
{
    #include <string.h>
    int length = strlen(phrase);
    if (phrase[0] > 96 && phrase[0] < 123){
        phrase[0] = phrase[0] - 32;
    }
    
    
    for (int i = 1; i < length; i++) {
        if (phrase[i-1] == ' ' && phrase[i] > 96 && phrase[i] < 123){
        
        phrase[i] = phrase[i] - 32;
        
        }
    }
}
",1
tsin304,1696750978,1,"void Capitalise(char *phrase)
{

//Capitalising first word
phrase[0] = phrase[0] - 32;




int i = 1;
    while (phrase[i] != '\0')
    {
        if (phrase[i-1] == ' ')
        {
            phrase[i] = phrase[i] - 32;
        }
    
        i++;
    }
    
    
    
}
",0
tsin304,1696751430,2,"void Capitalise(char *phrase)
{




//Capitalising first word
if (phrase[0] >= 97)
{
    if (phrase[0] <= 122)
    {
        phrase[0] = phrase[0] - 32;
    }
    
}



//Capitalising rest
int i = 1;
    while (phrase[i] != '\0')
    {
        
       if (phrase[i] >= 97)
       {
            if (phrase[i] <= 122)
            {
                if (phrase[i-1] == ' ')
                {
                    phrase[i] = phrase[i] - 32;
                }
            
            }
        }
    
        i++;
    }
    
    
    
}
",1
ttho505,1696726843,1,"#include <ctype.h>
void ASCII(char* phrase, int i)
{
	if (islower(phrase[i])) {
		phrase[i] = toupper(phrase[i]);
	}
}



void Capitalise(char *phrase)
{
  	int i = 0, length = strlen(phrase);

	ASCII(phrase, i);

	while (i < length) {
		if (phrase[i] == ' ')
			ASCII(phrase, (i + 1));
		i++;
	}
	i++;  
}
",1
ttho743,1696470334,1,"#include <stdio.h>
void Capitalise(char *phrase)
{
    int i,j;
phrase[0] = phrase[0] - 32;
while (phrase[i] != '\0') 
{
    i = i + 1;
}

for(j = 1; j < i; j++)
{
    if(phrase[j] == ' ')
    {
        if(phrase[j+1] >= 97 && phrase[j+1] <= 122)
        phrase[j+1] = phrase[j+1] - 32;
    }
}

}",0
ttho743,1696470500,2,"#include <stdio.h>
void Capitalise(char *phrase)
{
int i,j;
if(phrase[0] >= 97 && phrase[0] <= 122){
phrase[0] = phrase[0] - 32;
}
while (phrase[i] != '\0') 
{
    i = i + 1;
}

for(j = 1; j < i; j++)
{
    if(phrase[j] == ' ')
    {
        if(phrase[j+1] >= 97 && phrase[j+1] <= 122)
        phrase[j+1] = phrase[j+1] - 32;
    }
}

}",0
ttho743,1696470594,3,"void Capitalise(char *phrase)
{
int i,j;
if(phrase[0] >= 97 && phrase[0] <= 122){
phrase[0] = phrase[0] - 32;
}
while (phrase[i] != '\0') 
{
    i = i + 1;
}

for(j = 1; j < i; j++)
{
    if(phrase[j] == ' ')
    {
        if(phrase[j+1] >= 97 && phrase[j+1] <= 122)
        phrase[j+1] = phrase[j+1] - 32;
    }
}

}",0
ttho743,1696471200,4,"void Capitalise(char *phrase)
{
int i = 0;
int j = 0;
if(phrase[0] >= 97 && phrase[0] <= 122){
phrase[0] = phrase[0] - 32;
}
while (phrase[i] != '\0') 
{
    i = i + 1;
}

for(j = 1; j < i; j++)
{
    if(phrase[j] == ' ')
    {
        if(phrase[j+1] >= 97 && phrase[j+1] <= 122)
        phrase[j+1] = phrase[j+1] - 32;
    }
}

}",1
twol698,1696321670,1,"#include<ctype.h> 

void Capitalise(char *phrase){
    phrase[0] = toupper(phrase[0]); 
    for(int i = 0; i<strlen(phrase); i++){
        if (phrase[i] == ' ') {
            phrase[i+1] = toupper(phrase[i+1]); 
        }
    }
}
",1
tyou333,1696231059,1,"void Capitalise(char *phrase) {
    int wordLength = strlen(phrase);
    int capitalise = 1;

    for (int i = 0; i < wordLength + 1; i++) {
        if (capitalise == 1 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] -= 32;
            capitalise = 0;
        } else if (phrase[i] == ' ') {
            capitalise = 1;
        }
    }
}",0
tyou333,1696231296,2,"void Capitalise(char *phrase) {
    int wordLength = strlen(phrase);
    int capitalise = 1;

    for (int i = 0; i < wordLength + 1; i++) {
        if (capitalise == 1 && phrase[i] >= 'A' && phrase[i] <= 'Z'){
            capitalise = 0;
        } else if (capitalise == 1 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] -= 32;
            capitalise = 0;
        } else if (phrase[i] == ' ') {
            capitalise = 1;
        }
    }
}",0
tyou333,1696231489,3,"void Capitalise(char *phrase) {
    int wordLength = strlen(phrase);
    int capitalise = 1;

    for (int i = 0; i < wordLength + 1; i++) {
        if (capitalise == 1 && (phrase[i] < 'a' || phrase[i] > 'z')) {
            capitalise = 0;
        } else if (capitalise == 1 && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] -= 32;
            capitalise = 0;
        } else if (phrase[i] == ' ') {
            capitalise = 1;
        }
    }
}",1
tyou421,1696453196,1,"void Capitalise(char *phrase)
{
    	/*This function capitalises every word in a phrase.
	  
	 Inputs:
			phrase: A sentence that hasn't been capitalised.

	 Outputs:
			None.

	 Author: Toma Yousif*/


	// Declare the indexers and variables.
	int i = 0;
	int length = 0;

	// Determine the length of the string.
	while (phrase[i] != '\0')
	{
		i++;
		length++;
	}

	// Capitalise the first letter.
	phrase[0] = phrase[0] - 32;


	// Iterate through the array starting at the second index (since we already
	// capitalised the first letter).
	for (i = 1; i < length + 1; i++)
	{
		// Check if the indexed letter is a whitespace.
		if (phrase[i] == 32)
		{
			// Capitalise the letter after the whitespace.
			phrase[i + 1] = phrase[i + 1] - 32;
		}
	}
}
",0
tyou421,1696455443,2,"void Capitalise(char *phrase)
{
      /*This function capitalises the first letter of every word in a phrase, if that
	  character is not already capitalised.
	  
	 Inputs:
			phrase: A sentence that hasn't been capitalised.

	 Outputs:
			None.

	 Author: Toma Yousif*/


	// Declare the indexers and variables.
	int i = 0;
	int length = 0;


	// Determine the length of the string.
	while (phrase[i] != '\0')
	{
		i++;
		length++;
	}


	// Check if the first letter is lower case. In which case, capitalise it.
	if ((96 < phrase[0]) && (phrase[0] < 123))
	{
		phrase[0] = phrase[0] - 32;
	}
	else
	{
		phrase[0] = phrase[0];
	}


	// Iterate through the array starting at the second index (since we already
	// capitalised the first letter).
	for (i = 1; i < length + 1; i++)
	{
		// If the indexed is a whitespace, check if the next character is in lower case.
		if ((phrase[i] == 32) && (96 < phrase[i + 1]) && (phrase[i + 1] < 123))
		{
			// If it is a lower case character, convert it to upper case.
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		else
		{
			// If it is not a lower case character, don't convert it to upper case.
			phrase[i + 1] = phrase[i + 1];
		}
	}
}
",1
tzha578,1696207556,1,"#include<string.h>
#include<stdio.h>

void Capitalise(char *phrase)
{
   for(int i = 0;phrase[i] != '\0'; ++i){
       int intchar = (int)phrase[i];
       if(i == 0 && intchar >= 97 && intchar <= 122){
        phrase[i] -= 32;
       }
       intchar = (int)phrase[i + 1];
       if(phrase[i] == ' ' && intchar >= 97 && intchar <= 122){
           phrase[i + 1] -= 32;
       }
   } 
}",1
tzho903,1696828620,1,"void Capitalise(char *phrase)
{
   int i;
   for(i = 0; i<100; i++) {
      if (i == 0 || phrase[i - 1] == ' ') {
         if(phrase[i] >= 'a' && phrase[i]<='z') {
            phrase[i] = phrase[i] - 32;
         }
      } 
   }

}
",1
uali517,1696717413,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase) - 1;
	if (phrase[0] > 96 && phrase[0] < 123) {
		phrase[0] = phrase[0] - 32;
	}
	for (int i = 0; i < length; i++) {
		if (phrase[i] == ' ') {
			if (phrase[i + 1] > 96 && phrase[i + 1] < 123) {
				phrase[i + 1] = phrase[i + 1] - 32;
			}
		}
	}
}",1
ujai264,1696668453,1,"char ASCIIConversion(char lowerCase){
        
        if (lowerCase >= 'a' && lowerCase <= 'z'){
            lowerCase = lowerCase - ('a' - 'A');
            
        }
        return lowerCase;
    }

    void Capitalise(char *phrase) {
        int length = 0;
			while (phrase[length] != '\0') {
				length++;
			}

        for (int i = 0; i < length; i++) {
            if ( i == 0) {
                phrase[i] = ASCIIConversion(phrase[i]);
            }

            if (phrase[i] == ' ') {
                phrase[i + 1] = ASCIIConversion(phrase[i + 1]);
            }
        }   
    }",1
vbar374,1696816773,1,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>


bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void CapitalizeWords(char *phrase) {
    int length = strlen(phrase);
    bool newWord = true; 

    for (int i = 0; i < length; i++) {
        if (isLowercaseAlphabet(phrase[i])) {
            if (newWord) {
                phrase[i] = toupper(phrase[i]);
                newWord = false;
            }
        } else {
            newWord = isspace(phrase[i]);
        }
    }
}",0
vbar374,1696816847,2,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>


bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalize(char *phrase) {
    int length = strlen(phrase);
    bool newWord = true; 

    for (int i = 0; i < length; i++) {
        if (isLowercaseAlphabet(phrase[i])) {
            if (newWord) {
                phrase[i] = toupper(phrase[i]);
                newWord = false;
            }
        } else {
            newWord = isspace(phrase[i]);
        }
    }
}",0
vbar374,1696816862,3,"#include <stdio.h>
#include <stdbool.h>
#include <ctype.h>


bool isLowercaseAlphabet(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int length = strlen(phrase);
    bool newWord = true; 

    for (int i = 0; i < length; i++) {
        if (isLowercaseAlphabet(phrase[i])) {
            if (newWord) {
                phrase[i] = toupper(phrase[i]);
                newWord = false;
            }
        } else {
            newWord = isspace(phrase[i]);
        }
    }
}",1
vkap589,1696391272,1,"void Capitalise(char *phrase)
{
    int i = 0;
    
    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[i] = phrase[i] - 32;
        i++;
    }
    
    while (phrase[i] != '\0') {
        
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            
            if(phrase[i-1] == ' ') {
                phrase[i] = phrase[i] - 32;
            }
        }
        else{
        }
        i++;
    }
        
}
",1
vlai276,1696842593,1,"void Capitalise(char *phrase){
    if (phrase[0] > 96 && phrase[0] < 123) {
        phrase[0] = *phrase - 32;
    }
    for (int i = 0; i < strlen(phrase) - 1; i++) {
        if (phrase[i] == 0 || phrase[i] == 32) {
            if (phrase[i] > 96 && phrase[i] < 123) {
                phrase[i] = (char)phrase[i] - 32;
            }
        }
    }
    
    
}",0
vlai276,1696842644,2,"void Capitalise(char *phrase){
    
    if (phrase[0] > 96 && phrase[0] < 123) {
        
        phrase[0] = *phrase - 32;
    }
    for (int i = 0; i < strlen(phrase) - 1; i++) {
        
        if (phrase[i] == 0 || phrase[i] == 32) {
            
            i++;
            
            if (phrase[i] > 96 && phrase[i] < 123) {
                
                phrase[i] = (char)phrase[i] - 32;
            }
        }
    }
    
    
}",1
vpat188,1696811233,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i, j, length = 0;
    
    for (i = 0; phrase[i] != '\0'; i++){
        length++;
    }
    
    
    for (j = 0; j < length; j++){
        if (phrase[j] == 32 && phrase[j + 1] >= 'a' && phrase[j + 1] <= 'z'){
            phrase[j + 1] = phrase[j + 1] - ('a' - 'A');
        }
    }
    
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - ('a' - 'A');
    }
}",1
vwon573,1696729958,1,"void Capitalise(char* phrase) {
    // Initialize a flag to track if the next character should be capitalized
    int capitalizeNext = 1;

    // Iterate through the characters in the string
    for (int i = 0; phrase[i] != '\0'; i++) {
        // Check if the current character is a lowercase alphabetic character
        if (islower(phrase[i])) {
            // If the flag is set, capitalize the character
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
            }
            // Reset the flag after capitalizing
            capitalizeNext = 0;
        }
        else {
            // If the current character is not a lowercase alphabetic character, set the flag to capitalize the next character
            capitalizeNext = 1;
        }
    }
}
",0
vwon573,1696730005,2,"void Capitalise(char *phrase) {
    // Initialize a flag to track if the next character should be capitalized
    int capitalizeNext = 1;

    // Iterate through the characters in the string
    for (int i = 0; phrase[i] != '\0'; i++) {
        // Check if the current character is an alphabetic character
        if (isalpha(phrase[i])) {
            // If the flag is set or if it's the first character in the string, capitalize it
            if (capitalizeNext || i == 0) {
                phrase[i] = toupper(phrase[i]);
            }
            // Reset the flag after capitalizing
            capitalizeNext = 0;
        } else {
            // If the current character is not an alphabetic character, set the flag to capitalize the next alphabetic character
            capitalizeNext = 1;
        }
    }
}",0
vwon573,1696730106,3,"void Capitalise(char *phrase) {
    // Initialize a flag to track if the next character should be capitalized
    int capitalizeNext = 1;

    // Iterate through the characters in the string
    for (int i = 0; phrase[i] != '\0'; i++) {
        // Check if the current character is an alphabetic character
        if (isalpha(phrase[i])) {
            // If the flag is set or if it's the first character in the string, capitalize it
            if (capitalizeNext || i == 0) {
                phrase[i] = toupper(phrase[i]);
            }
            // Reset the flag after capitalizing
            capitalizeNext = 0;
        } else if (phrase[i] == ' ' || phrase[i] == '-') {
            // If the current character is a space or hyphen, set the flag to capitalize the next alphabetic character
            capitalizeNext = 1;
        } else {
            // If it's neither alphabetic, space, nor hyphen, reset the flag
            capitalizeNext = 0;
        }
    }
}",0
vwon573,1696730191,4,"void Capitalise(char *phrase) {
    // Initialize a flag to track if the next character should be capitalized
    int capitalizeNext = 1;

    // Iterate through the characters in the string
    for (int i = 0; phrase[i] != '\0'; i++) {
        // Check if the current character is an alphabetic character
        if (isalpha(phrase[i])) {
            // If the flag is set or if it's the first character in the string, capitalize it
            if (capitalizeNext || i == 0) {
                phrase[i] = toupper(phrase[i]);
            }
            // Reset the flag after capitalizing
            capitalizeNext = 0;
        } else if (phrase[i] == ' ' || phrase[i] == '-') {
            // If the current character is a space or hyphen, set the flag to capitalize the next alphabetic character
            capitalizeNext = 1;
        } else {
            // If it's neither alphabetic, space, nor hyphen, reset the flag
            capitalizeNext = 0;
        }
    }
}
.





",0
vwon573,1696730196,5,"void Capitalise(char *phrase) {
    // Initialize a flag to track if the next character should be capitalized
    int capitalizeNext = 1;

    // Iterate through the characters in the string
    for (int i = 0; phrase[i] != '\0'; i++) {
        // Check if the current character is an alphabetic character
        if (isalpha(phrase[i])) {
            // If the flag is set or if it's the first character in the string, capitalize it
            if (capitalizeNext || i == 0) {
                phrase[i] = toupper(phrase[i]);
            }
            // Reset the flag after capitalizing
            capitalizeNext = 0;
        } else if (phrase[i] == ' ' || phrase[i] == '-') {
            // If the current character is a space or hyphen, set the flag to capitalize the next alphabetic character
            capitalizeNext = 1;
        } else {
            // If it's neither alphabetic, space, nor hyphen, reset the flag
            capitalizeNext = 0;
        }
    }
}






",0
vwu693,1696742072,1,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void Capitalise(char* phrase)
{
    int length = strlen(phrase);

    if (length > 0) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (int i = 1; i < length; i++) {
        if (phrase[i - 1] == ' ') {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
    }
}",0
vwu693,1696742404,2,"#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
void Capitalise(char* phrase)
{
    int length = strlen(phrase);

    if (length > 0 && (phrase[0] > 96 && phrase[0] < 123)) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (int i = 1; i < length; i++) {
        if (phrase[i - 1] == ' ') {
            if (phrase[i] > 96 && phrase[i] < 123) {
                phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    }
}",1
vxie208,1696389864,1,"void Capitalise(char* phrase)
{
	int i = 0;
	int length = strlen(phrase);

	if (phrase[i] > 'Z') {
		phrase[i] = phrase[i] - 32;
	}
	
	for (i = 1; i < length; i++) {
		if ((phrase[i-1] == ' ') && (phrase[i] > 'Z')) {
			phrase[i] = phrase[i] - 32;
		}
	}


}",1
wany079,1696597200,1,"void Capitalise(char *phrase)
{
    int i;
    for (i = 0; i <= strlen(phrase) - 1; i++) {
	// Capitalise very first letter when it is lower case
	if (i == 0 && phrase[i] >= 97 && phrase[i] <= 122) {
		phrase[i] = phrase[i] - 32;
	}

	// Capitalise first letter of every word after a space
	if (phrase[i - 1] == ' ' && phrase[i] >= 97 && phrase[i] <= 122) {
		phrase[i] = phrase[i] - 32;
	}
}
}
",1
wany722,1696383700,1,"#include<stdio.h>
#include<string.h>
void Capitalise(char *phrase)
{
    if (phrase[0] <= 122&&phrase[0] >= 97)
        phrase[0] -= 32;
    for (int i = 1; i < strlen(phrase); i++){
        if (phrase[i] == ' '){
            if (phrase[i + 1] <= 122&&phrase[i + 1] >= 97)
                phrase[i + 1] -= 32;
        }
    }
}
",1
wany843,1696374824,1,"void ToUpper(char *ch) {
    if (*ch >= 'a' && *ch <= 'z') {
        *ch = *ch - ('a' - 'A');
    }
}

void Capitalise(char *phrase) {
    int i = 0;
    // Capitalize the first character of the phrase if it is a lowercase letter
    ToUpper(&phrase[i]);

    // Traverse through the rest of the phrase
    for(i = 1; phrase[i] != '\0'; i++) {
        // If the current character is a space and the next character is a lowercase letter
        if (phrase[i] == ' ' && phrase[i + 1] != '\0') {
            ToUpper(&phrase[i + 1]);
        }
    }
}
",1
wany897,1696385214,1,"void Capitalise(char *phrase)
{
    int i = 0;
	while (phrase[i] != '\0')
	{
        if (phrase[i] >= 'a' && phrase[i] <= 'z' && (phrase[i -1 ] == ' ') || i-1 == -1  )
        {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        i++;
	}
}
",0
wany897,1696385670,2,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0')
	{
        if (((phrase[i] >= 'a') && (phrase[i] <= 'z')) && (phrase[i -1 ] == ' ') ||(i-1 == -1 ) )
        {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        i++;
	}
}
",0
wany897,1696386041,3,"void Capitalise(char *phrase)
{
	int i = 0;
	while (phrase[i] != '\0')
	{
        if (((phrase[i] >= 'a') && (phrase[i] <= 'z')) && ((phrase[i -1 ] == ' ') ||(i-1 == -1 ) ))
        {
            phrase[i] = phrase[i] - ('a' - 'A');
        }
        i++;
	}
}
",1
wany932,1696808382,1,"void Capitalise(char* phrase) {
    int isNewWord = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isNewWord && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpper(phrase[i]);
            isNewWord = 0;
        } else if (phrase[i] == ' ') {
            isNewWord = 1;
        } else {
            isNewWord = 0;
        }
    }
}",0
wany932,1696808424,2,"void Capitalise(char *phrase){
    char ToUpper(char ch) {
    if (ch >= 'a' && ch <= 'z') {
        return ch - ('a' - 'A');
    }
    return ch;
}
    
}
",0
wany932,1696808539,3,"char ToUpper(char ch) {
    if (ch >= 'a' && ch <= 'z') {
        return ch - ('a' - 'A');
    }
    return ch;
}

void Capitalise(char* phrase) {
    int isNewWord = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isNewWord && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = ToUpper(phrase[i]);
            isNewWord = 0;
        } else if (phrase[i] == ' ') {
            isNewWord = 1;
        } else {
            isNewWord = 0;
        }
    }
}
",1
wkev690,1696386497,1,"void Capitalise(char *phrase){
    int i = 0;
    while (phrase[i] != '\0')
    {
        if (i < 1 || phrase[i-1] == ' '){
            if (phrase[i] >= 'a' && phrase[i] <= 'z'){
                phrase[i] -= ('a'-'A');
            }
        }
        i++;
    }
}",1
wli798,1696301288,1,"void Capitalise(char *phrase)
{
    int i;
    phrase[0] = phrase[0] - 32;
    for (i = 0; i < strlen(phrase); i++) {
        if (phrase[i] == ' ')
        phrase[i+1] = phrase[i+1] - 32;
    }
}

",0
wli798,1696302183,2,"void Capitalise(char *phrase)
{
    int i;
    if (phrase[i] > 96 && phrase[i] < 122) {
    phrase[0] = phrase[0] - 32;
    }
    
    for (i = 0; i < strlen(phrase); i++) {
        if (phrase[i] == ' ' && phrase[i+1] > 96 && phrase[i+1] < 122) {
        phrase[i+1] = phrase[i+1] - 32;
    }
}
}",0
wli798,1696302324,3,"void Capitalise(char *phrase)
{
    int i = 0;
    if (phrase[i] > 96 && phrase[i] < 123) {
    phrase[0] = phrase[0] - 32;
    }
    
    for (i = 0; i < strlen(phrase); i++) {
        if (phrase[i] == ' ' && phrase[i+1] > 96 && phrase[i+1] < 123) {
        phrase[i+1] = phrase[i+1] - 32;
    }
}
}",1
wlin709,1696830501,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    if (isLowerCaseAlphabet(phrase[0])) {
        phrase[0] -= 32;
    }

    for (int i = 0; i < length; i++) {
        if (phrase[i] == ' ' && isLowerCaseAlphabet(phrase[i + 1])) {
            phrase[i + 1] -= 32;
        }
    }
}
",0
wlin709,1696830729,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) 
{
    int length = strlen(phrase);
    int i = 0;

    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;  
    }

    for (; i < length; i++) {
        if (phrase[i] == ' ' && (i + 1 < length) && (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')) {
            phrase[i + 1] -= 32;  
        }
    }
}",1
wliy226,1696834992,1,"void Capitalise(char *phrase) {
int length = strlen(phrase);//stores the phrase inside the length variable

for (int i = 0; i < length; i++) { //
    if (islower(phrase[i])) { //checks if the current character is a lowercase letter using 'islower' function built inside C
    if (i == 0 || phrase[i - 1] == ' ') { //checks if either its the first letter in the character within the phrase or follows a ' ' spacing
        // Capitalize the current character.
        phrase[i] = toupper(phrase[i]); //then capitalizes the current character using 'toupper' function built inside C
    }
}
}",0
wliy226,1696835324,2,"void Capitalise(char *phrase) {
    int length = strlen(phrase); // Store the phrase length in the 'length' variable.

    for (int i = 0; i < length; i++) {
        if (islower(phrase[i])) { // Check if the current character is a lowercase letter using the 'islower' function.
            if (i == 0 || phrase[i - 1] == ' ') { // Check if it's either the first character in the phrase or follows a ' ' space.
                // Capitalize the current character.
                phrase[i] = toupper(phrase[i]); // Capitalize the current character using the 'toupper' function.
            }
        }
    }
}
",1
wmas516,1696213362,1,"void Capitalise(char *phrase)
{
	int i = 0, space = 1;
	while (*(phrase + i) != '\0') {
		if (*(phrase + i) == ' ') {
			space = 1;
		}
		else if (space == 1) {
			space = 0;
			*(phrase + i) -= 32;
		}
		i++;
	}
	return 0;
}
",0
wmas516,1696213367,2,"void Capitalise(char *phrase)
{
	int i = 0, space = 1;
	while (*(phrase + i) != '\0') {
		if (*(phrase + i) == ' ') {
			space = 1;
		}
		else if (space == 1) {
			space = 0;
			*(phrase + i) -= 32;
		}
		i++;
	}
}
",0
wmas516,1696214761,3,"void Capitalise(char *phrase)
{
	int i = 0, space = 1;
	while (*(phrase + i) != '\0') {
		if (*(phrase + i) == ' ') {
			space = 1;
		}
		else if (space) {
			space = 0;
			if (*(phrase + i)>96 && *(phrase + i) < 123) {
				*(phrase + i) -= 32;
			}
		}
		i++;
	}
}
",1
wste800,1696846887,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);
    for (int i = 0; i <= length; i++) {
        if (i == 0 && phrase[i]%97 <= 26) {
            phrase[i] = phrase[i] - 32;
        }
        else if (phrase[i-1] == 32 && phrase[i]%97 <= 26) {
            phrase[i] = phrase[i] - 32;
        }
    }
}
",1
wwan296,1696301546,1,"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

void Capitalise(char* phrase)
{
	int i = 0;
	int j = strlen(phrase);
	if (phrase[i] >= 'a' && phrase[i] <= 'z') {
		phrase[i] = phrase[i] - ('a' - 'A');
	}
	for (i = 1; i < j; i++) {
		if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
			phrase[i] = phrase[i] - ('a' - 'A'); 
		}
	}
}",1
wwon485,1696235516,1,"char UpperCase(char c)
{
    // Checks if it is not an upper case character
    if (c < 97 || c > 122)
    {
        return c;
    }

    // Sets the to upper case
    return c - 32;
}

void Capitalise(char *phrase)
{
    // Captalises the first character
    phrase[0] = UpperCase(phrase[0]);

    int i = 1;
    while (phrase[i] != '\0')
    {
        // If there's a space before the character it will uppercase it
        if (phrase[i - 1] == ' ') {
            phrase[i] = UpperCase(phrase[i]);
        }
        i++;
    }
}",1
wwu295,1696672547,1,"void Capitalise(char* phrase)
{
	phrase[0] = phrase[0] - 32;
	for (int i = 1; i < strlen(phrase); i++) {
		if (phrase[i - 1] == 32) {
			phrase[i] = phrase[i] - 32;
		}
	}
}",0
wwu295,1696672819,2,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 97 && phrase[0] <= 112) {
		phrase[0] = phrase[0] - 32;
	}
	for (int i = 1; i < strlen(phrase); i++) {
		if (phrase[i] >= 97 && phrase[i] <= 112) {
			if (phrase[i - 1] == 32) {
				phrase[i] = phrase[i] - 32;
					}
		}
	}
}",0
wwu295,1696673017,3,"void Capitalise(char* phrase)
{
	if (phrase[0] >= 97 && phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}
	for (int i = 1; i < strlen(phrase); i++) {
		if (phrase[i] >= 97 && phrase[i] <= 122) {
			if (phrase[i - 1] == 32) {
				phrase[i] = phrase[i] - 32;
					}
		}
	}
}",1
wyan309,1696671538,1,"void Capitalise(char *phrase)
{
    if (phrase[0]>=97 && phrase[0]<=122){
        phrase[0]-=32;
    }
    for (int i=1; i!=strlen(phrase);i++){
    if (phrase[i-1]==' '){
        if (phrase[i]>=97 && phrase[i]<=122){
            phrase[i]-=32;
        }
    }
    }
}
",1
wyu523,1696404682,1,"void Capitalise(char *phrase)
{
    phrase[0]=phrase[0]-32;
    int i=1;
    while(phrase[i]!='\0'){
        if (phrase[i]==32){
            phrase[i+1]=phrase[i+1]-32;
        }
        i++;
    }
}",0
wyu523,1696404914,2,"void Capitalise(char *phrase)
{
    if(phrase[0]>=97 && phrase[0]<=122){
        phrase[0]=phrase[0]-32;
    }
    int i=1;
    while(phrase[i]!='\0'){
        if (phrase[i]==32){
            if(phrase[i+1]>=97 && phrase[i+1]<=122){
            phrase[i+1]=phrase[i+1]-32;
            }
        }
        i++;
    }
}",1
wyua331,1696841454,1,"void Capitalise(char *phrase)
{
   int i=0;
   int j=strlen(phrase);
   while(i<=j)
   {
       if((i==0)||(phrase[i-1]==' '))
       {
           if((phrase[i]<'{')&&(phrase[i]>='a'))
           {
               phrase[i]=phrase[i]-('a'-'A');
           }

       }
       i++;
   }
}",1
wzha508,1696751374,1,"void Capitalise(char* phrase)
{
	int i = 0;

	while (phrase[i] != '\0') {
		if (phrase[i - 1] == ' ') {
			phrase[i] = phrase[i] - ('a' - 'A');
			
		}
		else if (i == 0) {
			phrase[i] = phrase[i] - ('a' - 'A');
			
		}
		i++;
	}
}",0
wzha508,1696751781,2,"void Capitalise(char* phrase)
{
	int i = 0;

	while (phrase[i] != '\0') {
		if (phrase[i - 1] == ' '&& phrase[i] >= 97 && phrase[i] <= 122) {
			phrase[i] = phrase[i] - ('a' - 'A');
			
		}
		else if (i == 0 && phrase[i] >= 97 && phrase[i] <= 122) {
			phrase[i] = phrase[i] - ('a' - 'A');
			
		}
		i++;
	}
}",1
xche362,1696818966,1,"void Capitalise(char *phrase)
{
    for (int i = 0; phrase [i] != '\0'; i++){
        if(phrase[i-1]==' '){
            phrase[i]=phrase[i]-32;
        }
    }
    phrase[0]=phrase[0]-32;
}
",0
xche362,1696819451,2,"void Capitalise(char *phrase)
{
    for (int i = 0; phrase [i] != '\0'; i++){
        if(phrase[i-1]==' '){
            if (phrase[i] >= 'a' && phrase[i] <= 'z' ){
            phrase[i]=phrase[i]-32;
            }
        }
    }
     if (phrase[0] >= 'a' && phrase[0] <= 'z' ){ 
    phrase[0]=phrase[0]-32;
    }
}
",1
xkan320,1696540202,1,"void Capitalise(char *phrase)
{
    int i;
    for(i=0; phrase[i]!='\0'; i++){
        if(phrase[0]<=122 && phrase[0]>=97){
            phrase[0] = phrase[0]-32;
        }
        if(phrase[i]==' '){
            if(phrase[i+1]<=122 && phrase[i+1]>=97){
                phrase[i+1] = phrase[i+1]-32;
            }
        }
    }
}",1
xli330,1696411495,1,"void Capitalise(char *phrase){
    int i = 0, firstCapFound = 0;
    char *currentChar;

    // Check if the first phrase should be capitalised.
    while (phrase[i] != ' ' && firstCapFound == 0) {

        currentChar = &phrase[i];

        // Exit the while-loop if starting capitalised char found.
        if (*currentChar >= 'A' && *currentChar <= 'Z') {
            firstCapFound = 1;

        // Capitalise the starting lowercase char found and exit while-loop.
        } else if (*currentChar >= 'a' && *currentChar <= 'z') {
            *currentChar -= 'a' - 'A';
            firstCapFound = 1;
        
        // Raise index and continue the loop.
        } else {
            i++;
        }
    }
    // Reset flag for upcoming while-loops.
    firstCapFound = 0;
    while (phrase[i] != '\0') {
        if (phrase[i] == ' ') {

            // Check the phrase right hand side to the whitespace found.
            i++;
            while (phrase[i] != ' ' && firstCapFound == 0) {

                // Capitalise first lowercase letter and exit the while loop.
                currentChar = &phrase[i];
                if (*currentChar >= 'A' && *currentChar <= 'Z') {
                    firstCapFound = 1;
                } else if (*currentChar >= 'a' && *currentChar <= 'z') {
                    *currentChar -= 'a' - 'A';
                    firstCapFound = 1;
                }
                i++;
            }
            firstCapFound = 0;
        } else {
            i++;
        }
    }
}",0
xli330,1696589860,2,"void Capitalise(char *phrase){
    int i = 0;
    char *currentChar;

    // Point to the position of the current character.
    currentChar = &phrase[0];
    
    // Cap the first lowercased letter in the phrase.
    if (*currentChar >= 'a' && *currentChar <= 'z') {
        *currentChar -= 'a' - 'A';
    }

    while (phrase[i] != '\0') {

        // Run condition check on the char next to a whitespace.
        if (phrase[i] == ' ') {

            // Capitalise it if it is lowercased letter.
            currentChar = &phrase[i + 1];
            if (*currentChar >= 'a' && *currentChar <= 'z') {
                *currentChar -= 'a' - 'A';
            }
        }
        i++;
    }
}",1
xlia603,1696739016,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase)-1;
    int i;
    for(i = 0; i < length; i++){
        if(i == 0 && (97 <= phrase[i]) && (phrase[i]<= 122)){
                phrase[i] = phrase[i] - 32;
            }
        
        if(phrase[i] == ' '){
            if((97 <= phrase[i+1]) && (phrase[i+1]<= 122)){
                phrase[i+1] = phrase[i+1] - 32;
            }
            
        }
       
    }
}
",0
xlia603,1696739690,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase)-1;
    int i;
    if(i == 0 && (97 <= phrase[i]) && (phrase[i]<= 122)){
                phrase[i] = phrase[i] - 32;
            }
    for(i = 0; i < length; i++){
        
        if(phrase[i] == ' '){
            if((97 <= phrase[i+1]) && (phrase[i+1]<= 122)){
                phrase[i+1] = phrase[i+1] - 32;
            }
            
        }
    }
}
",0
xlia603,1696740562,3,"void Capitalise(char *phrase)
{
    int length = strlen(phrase)-1;
    int i;
    if((97 <= phrase[0]) && (phrase[0]<= 122)){
                phrase[0] = phrase[0] - 32;
            }
    for(i = 0; i < length; i++){
        if(phrase[i] == ' '){
            if((97 <= phrase[i+1]) && (phrase[i+1]<= 122)){
                phrase[i+1] = phrase[i+1] - 32;
            }
            
        }
    }
}
",1
xmet073,1696831643,1,"#include <stdio.h>

int isLowerCase(char c) {
    if (c >= 'a' && c <= 'z') {
        return 1;
    } else {
        return 0;
    }
}

void capitalizeWords(char *phrase) {
    int Word = 1;

 for (int i = 0; phrase[i] != '\0'; i++) {
    if (Word == 1 && isLowerCase(phrase[i]) == 1) {
            phrase[i] = phrase[i] - 'a' + 'A';
            Word = 0;
        } else if (phrase[i] == ' ') {
            Word = 1;
        }
    }
}",0
xmet073,1696831769,2,"#include <stdio.h>

int isLowerCase(char c) {
    if (c >= 'a' && c <= 'z') {
        return 1;
    } else {
        return 0;
    }
}

void Capitalise(char *phrase) {
    int Word = 1;

 for (int i = 0; phrase[i] != '\0'; i++) {
    if (Word == 1 && isLowerCase(phrase[i]) == 1) {
            phrase[i] = phrase[i] - 'a' + 'A';
            Word = 0;
        } else if (phrase[i] == ' ') {
            Word = 1;
        }
    }
}",0
xmet073,1696833461,3,"#include <stdio.h>

int isLowerCase(char c) {
    if (c >= 'a' && c <= 'z') {
        return 1;
    } else {
        return 0;
    }
}

void Capitalise(char *phrase) {
    int Word = 0;
int i;
 for (i = 0; phrase[i] !=' '; i++) {
    if (Word ==1 && isLowerCase(phrase[i]) ==1) {
            phrase[i] = phrase[i] - 'a' + 'A';
            Word = 0;
        } else if (phrase[i] == ' ') {
            Word = 1;
        }
    }
}",0
xmet073,1696842066,4,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase) {
    int shouldCapitalise = 1;

int Space(char c) {
    return (c == ' ');
}

int i;
    for (i = 0; phrase[i] != '\0'; i++) {
        if (Space(phrase[i])==1) {
            shouldCapitalise = 1;
       
       } else if (shouldCapitalise) {
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - 'a' + 'A';
            }
            shouldCapitalise = 0;
        }
    }
}
",1
xsny378,1696665830,1,"void Capitalise(char *phrase)
{
    int length  = strlen(phrase);
    int i = 0;
    phrase[0] = phrase[0]-32;
    while(i<length)
    {
         if (phrase[i] == ' ')
         {
         phrase[i+1] = phrase[i+1] -32;
            }
          
           i++;
    }
        
     
    
}",0
xsny378,1696666200,2,"void Capitalise(char *phrase)
{
    int length  = strlen(phrase);
    int i = 0;
    if ( phrase[0] > 90)
    {
    phrase[0] = phrase[0]-32;
    } 
    while(i<length)
    {
         if (phrase[i] == ' ' && phrase[i+1] > 90)
         {
         phrase[i+1] = phrase[i+1] -32;
            }
          
           i++;
    }
        
     
    
}",1
xtan207,1696818802,1,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0'){
        if (phrase[i-1] == ('a' - 'A')){
            phrase[i] = phrase[i] - ('a' - 'A');
            else phrase[i] = phrase[i];
        }
    i++;
    }
    
}
",0
xtan207,1696820079,2,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0'){
        if (phrase[i-1] == ('a' - 'A')){
            phrase[i] = phrase[i] - ('a' - 'A');
            }else {
                phrase[i] = phrase[i];
        }
    i++;
    }
     
}
",0
xtan207,1696821683,3,"void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0'){
        if (i == 0 || phrase[i-1] == ('a' - 'A')){
            if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] = phrase[i] - ('a' - 'A');
            }
        }
    i++;
    }
}
",1
xugn489,1696253523,1,"void Capitalise(char *phrase)
{	
	int i = 0;
	
	phrase[0] = Upcase(phrase[0]);
    	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			phrase[i+1] = Upcase(phrase[i+1]);
		}
		i++;
	}
}

char Upcase(char input) 
{
	if (input >= 97 && input <= 122) {
		input = input - 32;
	}
	return input;
}",0
xugn489,1696253742,2,"char Upcase(char input) 
{
	if (input >= 97 && input <= 122) {
		input = input - 32;
	}
	return input;
}

void Capitalise(char *phrase)
{	
	int i = 0;
	
	phrase[0] = Upcase(phrase[0]);
    	while (phrase[i] != '\0') {
		if (phrase[i] == ' ') {
			phrase[i+1] = Upcase(phrase[i+1]);
		}
		i++;
	}
}

",1
yayo322,1696743435,1,"void Capitalise(char *phrase)
{
    int i = 0; 
    int capital = 32; 
    while (phrase[i] != '\0') {
        if (i == 0 || phrase[i-1] == 32) {
            if (phrase[i] >= 97 && phrase[i] <= 122) {
                phrase[i] = phrase[i] - capital; 
            }
        }
       i++;  
    }
}
",1
ybha528,1696834924,1,"#include <stdio.h>

char UpperCase(char letter) {
	if (letter >= 97 && letter <= 122) {
		return letter - 32;
	} 
	return letter;
}


void Capitalise(char *phrase) {

	*phrase = UpperCase(*phrase);

	while (*phrase != '\0') {

		if (*phrase == ' ' && *(phrase + 1) != '\0') {
			*(phrase + 1) = UpperCase(*(phrase + 1));
		}
		phrase++;
	}
}
",1
ycho749,1696665118,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= 32;
    }
    int i = 1;
    while (phrase[i]) {
        if (phrase[i] == ' ') 
        {
            if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
                phrase[i+1] -= 32;
            }
        }
        i++;
    }
}",1
ycho760,1696825698,1,"void Capitalise(char *phrase)
{
	int i;
	int counter;
	if (phrase[0] > 96 && phrase[0] < 123){
	    phrase[0] = *phrase - 32;
	}
	for (i = 0; i < strlen(phrase) -1; i++) {
		if (phrase[i] == 0 || phrase[i] == 32) {
		    i++;
		    if (phrase[i] > 96 && phrase[i] < 123){
		        phrase[i] = (char)phrase[i] - 32;
		    }
		}
	}    
}
",0
ycho760,1696825712,2,"void Capitalise(char *phrase)
{
	int i;
	if (phrase[0] > 96 && phrase[0] < 123){
	    phrase[0] = *phrase - 32;
	}
	for (i = 0; i < strlen(phrase) -1; i++) {
		if (phrase[i] == 0 || phrase[i] == 32) {
		    i++;
		    if (phrase[i] > 96 && phrase[i] < 123){
		        phrase[i] = (char)phrase[i] - 32;
		    }
		}
	}    
}
",1
ydai729,1696842749,1,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toUpperCase(phrase[i]);
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]); // Convert to lowercase
            }
        } else {
            capitalizeNext = 1; // Set the flag to capitalize the next word
        }
    }    
}
",0
ydai729,1696842970,2,"void Capitalise(char *phrase)
{
 int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                    phrase[i] = phrase[i] - ('a' - 'A'); // Convert lowercase to uppercase
                }
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]); // Convert to lowercase
            }
        } else {
            capitalizeNext = 1; // Set the flag to capitalize the next word
        }
    }   
}
",0
ydai729,1696843262,3,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                    phrase[i] = toupper(phrase[i]); // Capitalize the character
                }
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]); // Convert to lowercase
            }
        } else {
            capitalizeNext = 1; // Set the flag to capitalize the next word
        }
    }    
}
",0
ydai729,1696843539,4,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                    phrase[i] = toupper(phrase[i]); // Capitalize the character
                }
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]); // Convert to lowercase
            }
        } else {
            if (phrase[i] == ' ') {
                capitalizeNext = 1; // Set the flag to capitalize the next word after space
            }
        }
    }    
}
",0
ydai729,1696843659,5,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized
    int withinParentheses = 0; // Flag to track if we are within parentheses

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == '(') {
            withinParentheses = 1;
        } else if (phrase[i] == ')') {
            withinParentheses = 0;
        }

        if (isalpha(phrase[i]) && !withinParentheses) {
            if (capitalizeNext) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z') {
                    phrase[i] = toupper(phrase[i]); // Capitalize the character
                }
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]); // Convert to lowercase
            }
        } else {
            if (phrase[i] == ' ') {
                capitalizeNext = 1; // Set the flag to capitalize the next word after space
            }
        }
    }    
}
",0
ydai729,1696843778,6,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized
    int withinParentheses = 0; // Flag to track if we are within parentheses

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == '(') {
            withinParentheses = 1;
        } else if (phrase[i] == ')') {
            withinParentheses = 0;
        }

        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z' && !withinParentheses) {
                    phrase[i] = toupper(phrase[i]); // Capitalize the character
                }
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]); // Convert to lowercase
            }
        } else {
            if (phrase[i] == ' ') {
                capitalizeNext = 1; // Set the flag to capitalize the next word after space
            }
        }
}
",0
ydai729,1696843814,7,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized
    int withinParentheses = 0; // Flag to track if we are within parentheses

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == '(') {
            withinParentheses = 1;
        } else if (phrase[i] == ')') {
            withinParentheses = 0;
        }

        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                if (phrase[i] >= 'a' && phrase[i] <= 'z' && !withinParentheses) {
                    phrase[i] = toupper(phrase[i]); // Capitalize the character
                }
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]); // Convert to lowercase
            }
        } else {
            if (phrase[i] == ' ') {
                capitalizeNext = 1; // Set the flag to capitalize the next word after space
            }
        }
    }
}
",0
ydai729,1696843941,8,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]); // Capitalize the character
                capitalizeNext = 0; // Reset the flag
            } else {
                phrase[i] = tolower(phrase[i]); // Convert to lowercase
            }
        } else if (phrase[i] == ' ' || phrase[i] == '(') {
            capitalizeNext = 1; // Set the flag to capitalize the next word after space or '('
        }
    }    
}
",0
ydai729,1696846209,9,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]); // Capitalize the character
                capitalizeNext = 0; // Reset the flag
            }
        } else {
            capitalizeNext = 1; // Set the flag to capitalize the next word
        }
    }
}
",0
ydai729,1696846268,10,"void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] >= 'a' && phrase[i] <= 'z') {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]); // Capitalize the character
                capitalizeNext = 0; // Reset the flag
            }
        } else {
            capitalizeNext = 1; // Set the flag to capitalize the next word
        }
    }
}",0
ydai729,1696846393,11,"#include <stdio.h>

// Helper function to convert a lowercase character to uppercase based on ASCII codes
char toUpperCase(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - ('a' - 'A'); // Convert to uppercase
    }
    return c; // Return unchanged for non-lowercase characters
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        phrase[i] = toUpperCase(phrase[i]); // Convert the character to uppercase

        if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            if (capitalizeNext) {
                capitalizeNext = 0; // Reset the flag
            }
        } else {
            capitalizeNext = 1; // Set the flag to capitalize the next word
        }
    }
}

int main() {
    char phrase[100] = ""god of nations at thy feet"";

    Capitalise(phrase);

    printf(""%s\n"", phrase); // Output: God Of Nations At Thy Feet

    return 0;
}
",0
ydai729,1696846401,12,"#include <stdio.h>

// Helper function to convert a lowercase character to uppercase based on ASCII codes
char toUpperCase(char c) {
    if (c >= 'a' && c <= 'z') {
        return c - ('a' - 'A'); // Convert to uppercase
    }
    return c; // Return unchanged for non-lowercase characters
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        phrase[i] = toUpperCase(phrase[i]); // Convert the character to uppercase

        if (phrase[i] >= 'A' && phrase[i] <= 'Z') {
            if (capitalizeNext) {
                capitalizeNext = 0; // Reset the flag
            }
        } else {
            capitalizeNext = 1; // Set the flag to capitalize the next word
        }
    }
}

",0
ydai729,1696846449,13,"#include <stdio.h>
#include <ctype.h>

// Helper function to check if a character is a lowercase alphabetic character
int isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]); // Capitalize the character
                capitalizeNext = 0; // Reset the flag
            }
        } else {
            capitalizeNext = 1; // Set the flag to capitalize the next word
        }
    }
}

",0
ydai729,1696846548,14,"void Capitalise(char *phrase)
{
int capitalizeNext = 1; // Flag to track if the next character should be capitalized

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (islower(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]); // Capitalize the character
                capitalizeNext = 0; // Reset the flag
            }
        } else {
            capitalizeNext = isspace(phrase[i]); // Set the flag to capitalize the next word
        }
    }    
}
",1
ydar075,1696834858,1,"void Capitalise(char* phrase) {
	int i;
	int length = strlen(phrase);

	for (i = 0; i < length; i++) {
		if (phrase[0] >= 'a' && phrase[0] <= 'z') {
			phrase[0] -= 32;
		}
		if (phrase[i] == ' ') {
			if (phrase[i+1] >= 'a' && phrase[i+1] <= 'z') {
				phrase[i+1] -= 32;
			}
		}
	}
}
",1
yfan919,1696745661,1,"void Capitalise(char *phrase)
{
    int len = strlen(*phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (int phrase[a] > 96){
            phrase[a] = phrase[a] - 32;
        }
        if (int phrase[a] < 90){
            phrase[a] = phrase[a] + 32;
        }
        a++;
    }
}
",0
yfan919,1696745677,2,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (int phrase[a] > 96){
            phrase[a] = phrase[a] - 32;
        }
        if (int phrase[a] < 90){
            phrase[a] = phrase[a] + 32;
        }
        a++;
    }
}
",0
yfan919,1696745701,3,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[a] > 96){
            phrase[a] = phrase[a] - 32;
        }
        if (phrase[a] < 90){
            phrase[a] = phrase[a] + 32;
        }
        a++;
    }
}
",0
yfan919,1696745765,4,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[a] > 96; phrase[a] < 123){
            phrase[a] = phrase[a] - 32;
        }
        if (phrase[a] < 90; phrase > 65){
            phrase[a] = phrase[a] + 32;
        }
        a++;
    }
}
",0
yfan919,1696745779,5,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[a] > 96, phrase[a] < 123){
            phrase[a] = phrase[a] - 32;
        }
        if (phrase[a] < 90, phrase > 65){
            phrase[a] = phrase[a] + 32;
        }
        a++;
    }
}
",0
yfan919,1696745798,6,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[a] > 96 && phrase[a] < 123){
            phrase[a] = phrase[a] - 32;
        }
        if (phrase[a] < 90 && phrase > 65){
            phrase[a] = phrase[a] + 32;
        }
        a++;
    }
}
",0
yfan919,1696745811,7,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[a] > 96 && phrase[a] < 123){
            phrase[a] = phrase[a] - 32;
        }
        if (phrase[a] < 90 && phrase[a] > 65){
            phrase[a] = phrase[a] + 32;
        }
        a++;
    }
}
",0
yfan919,1696746109,8,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        while(phrase[a] = ' '){
            if (phrase[a] < 90 && phrase[a] > 65){
                phrase[a] = phrase[a] + 32;
            }
        }
        a++;
    }
}
",0
yfan919,1696746205,9,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        while(phrase[a] = 32){
            if (phrase[a] < 90 && phrase[a] > 65){
                phrase[a] = phrase[a] + 32;
            }
        }
        a++;
    }
}
",0
yfan919,1696746275,10,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        while(phrase(a) = 32){
            if (phrase[a] < 90 && phrase[a] > 65){
                phrase[a] = phrase[a] + 32;
            }
        }
        a++;
    }
}
",0
yfan919,1696746287,11,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        while(phrase[a] = 32){
            if (phrase[a] < 90 && phrase[a] > 65){
                phrase[a] = phrase[a] + 32;
            }
        }
        a++;
    }
}
",0
yfan919,1696746317,12,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        while(phrase[a] == 32){
            if (phrase[a] < 90 && phrase[a] > 65){
                phrase[a] = phrase[a] + 32;
            }
        }
        a++;
    }
}
",0
yfan919,1696746351,13,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        while(phrase[a] == 32){
            if (phrase[a+1] < 90 && phrase[a+1] > 65){
                phrase[a+1] = phrase[a+1] + 32;
            }
        }
        a++;
    }
}
",0
yfan919,1696747323,14,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        while(phrase[a] = 32){
            if (phrase[a+1] < 90 && phrase[a+1] > 65){
                phrase[a+1] = phrase[a+1] + 32;
            }
        }
        a++;
    }
}
",0
yfan919,1696747335,15,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        while(phrase[a] == 32){
            if (phrase[a+1] < 90 && phrase[a+1] > 65){
                phrase[a+1] = phrase[a+1] + 32;
            }
        }
        a++;
    }
}
",0
yfan919,1696748235,16,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[a] == 32 && phrase[a+1] < 90 && phrase[a+1] > 65){
            phrase[a+1] = phrase[a+1] + 32;
            }
        a++;
    }
}
",0
yfan919,1696748353,17,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[1] < 90 && phrase[1] > 65){
            phrase[1] = phrase[1] +32;
        }
        if (phrase[a] == 32 && phrase[a+1] < 90 && phrase[a+1] > 65){
            phrase[a+1] = phrase[a+1] + 32;
            }
        a++;
    }
}
",0
yfan919,1696748456,18,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[0] < 90 && phrase[0] > 65){
            phrase[0] = phrase[0] +32;
        }
        if (phrase[a] == 32 && phrase[a+1] < 90 && phrase[a+1] > 65){
            phrase[a+1] = phrase[a+1] + 32;
            }
        a++;
    }
}
",0
yfan919,1696748511,19,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[0] < 96 && phrase[0] > 123){
            phrase[0] = phrase[0] - 32;
        }
        if (phrase[a] == 32 && phrase[a+1] > 96 && phrase[a+1] > 123){
            phrase[a+1] = phrase[a+1] - 32;
            }
        a++;
    }
}
",0
yfan919,1696748554,20,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len - 1;
    while (a < b){
        if (phrase[0] > 96 && phrase[0] < 123){
            phrase[0] = phrase[0] - 32;
        }
        if (phrase[a] == 32 && phrase[a+1] > 96 && phrase[a+1] < 123){
            phrase[a + 1] = phrase[a + 1] - 32;
            }
        a++;
    }
}
",0
yfan919,1696748788,21,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int a = 0;
    int b = len;
    while (a < b){
        if (phrase[0] > 96 && phrase[0] < 123){
            phrase[0] = phrase[0] - 32;
        }
        if (phrase[a] == 32 && phrase[a+1] > 96 && phrase[a+1] < 123){
            phrase[a + 1] = phrase[a + 1] - 32;
            }
        a++;
    }
}
",1
yfen481,1696391415,1,"void Capitalise(char *phrase)
{
    int spacePos,i;
    if (phrase[0]>='a' && phrase[0]<='z'){
        phrase[0]=phrase[0]+('A'-'a');
    }
    for (i=0;i<100;i++){
        if (phrase[i]==' '){
            if (phrase[i+1]>='a' && phrase[i+1]<='z') {
                phrase[i+1]=phrase[i+1]+('A'-'a');
            }
        }
    }
}",0
yfen481,1696391543,2,"void Capitalise(char *phrase)
{
    int length,i;
    length=strlen(phrase);
    if (phrase[0]>='a' && phrase[0]<='z'){
        phrase[0]=phrase[0]+('A'-'a');
    }
    for (i=0;i<length;i++){
        if (phrase[i]==' '){
            if (phrase[i+1]>='a' && phrase[i+1]<='z') {
                phrase[i+1]=phrase[i+1]+('A'-'a');
            }
        }
    }
}",1
yhaf839,1696224864,1,"#include <string.h>
#include <stdio.h>


void Capitalise(char *phrase)
{
   
   int i;
   int length=strlen(phrase);
   
   
   if (phrase[0]>='a' && phrase[0]<='z'){
       phrase[0]=(phrase[0]-32);
   }
    
    for(i=0;i<length-1;i++)
        if ((phrase[i]==' ') && (phrase[i+1]>='a' && phrase[i+1]<='z')){
            phrase[i+1]=(phrase[i+1]-32);
        }
        
}

",1
yilm466,1696847298,1,"void Capitalise(char *phrase) {
    int i = 0;
    int newWord = 1; 
    
    while (phrase[i] != '\0') {
        if (newWord && phrase[i] >= 'a' && phrase[i] <= 'z') {
           
            phrase[i] = phrase[i] - ('a' - 'A');
            
            newWord = 0;
        } else if (phrase[i]==' ')
        {
            newWord = 1;
        } else 
        {
            newWord = 0;
        }
        i++;
    }
}
",1
yjun129,1696231047,1,"void Capitalise(char *phrase)
{
    int len = strlen(phrase);

    for (int i = 0; i < len; i++) {
  
        if (i == 0 || phrase[i - 1] == ' ') {
            if ('a' <= phrase[i] && phrase[i] <= 'z') {
                phrase[i] = phrase[i] - 32;
        }
    }
}
}
",1
ykwa219,1696729258,1,"void Capitalise(char *phrase)
{
    	int i = 0;
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - 32;
	}
	while (phrase[i] != '\0') {
		if (phrase[i] == 32) {
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i+1] = phrase[i+1] - 32;
			}
		}
		i++;
	}
}
",1
ylee818,1696816186,1,"#include <string.h>

void Capitalise(char *phrase)
{
    

    int i = 0;
    if (phrase[i] <= 'z' && phrase[i] >= 'a'){
    phrase[i] = phrase[i] - 32;
    }
    
    while(phrase[i] !='\0'){
        if (phrase[i+1] <= 'z' && phrase[i+1] >= 'a' && phrase[i] == ' '){
        phrase[i+1] = phrase[i+1] - 32;
        }
        i++;
    }
    
}

",1
yrah128,1696447185,1,"# include <stdio.h>


int isLowercaseAlphabetic (char c) {
    return (c >= ""a"" && c <= ""z"");
}




void Capitalise(char *phrase){
    int shouldCapitalize = 1;
    
    for (int i = 0; phrase[i] != ""\O""; i++ ){
        if (isLowercaseAlphabetic(phrase [i]) && shouldCapitalize) {
            phrase [i] = phrase [i] - 32;
            shouldCapitalize = 0;
            
        } else if (phrase [i] == "" "") {
            shouldCapitalize = 1;
        }
    }
    
}
",0
yrah128,1696447369,2,"# include <stdio.h>


int isLowercaseAlphabetic (char c) {
    return (c >= 'a' && c <= 'z');
}




void Capitalise(char *phrase){
    int shouldCapitalize = 1;
    
    for (int i = 0; phrase[i] != '\O'; i++ ){
        if (isLowercaseAlphabetic(phrase [i]) && shouldCapitalize) {
            phrase [i] = phrase [i] - 32;
            shouldCapitalize = 0;
            
        } else if (phrase [i] == ' ') {
            shouldCapitalize = 1;
        }
    }
    
}
",0
yrah128,1696447608,3,"#include <stdio.h>

int isLowercaseAlphabetic(char c) {
    return (c >= 'a' && c <= 'z');
}

void Capitalise(char *phrase) {
    int shouldCapitalize = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowercaseAlphabetic(phrase[i]) && shouldCapitalize) {
            phrase[i] = phrase[i] - 32; // Convert to uppercase
            shouldCapitalize = 0;
        } else if (phrase[i] == ' ') {
            shouldCapitalize = 1; // Next character should be capitalized
        }
    }
}

",0
yrah128,1696447871,4,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            if (phrase[i] == ' ') {
                capitalizeNext = 1;
            }
        }
    }
}",0
yrah128,1696448120,5,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else {
            if (phrase[i] == ' ') {
                capitalizeNext = 1;
            }
        }
    }
}
",0
yrah128,1696448366,6,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == '(') {
            capitalizeNext = 1;
        } else if (isalpha(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = 0;
            } else {
                phrase[i] = tolower(phrase[i]);
            }
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        }
    }
}
",0
yrah128,1696448507,7,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == '(') {
            capitalizeNext = 1;
        } else if (phrase[i] == ' ') {
            capitalizeNext = 1;
        } else if (phrase[i] == ')') {
            // Reset capitalization flag after closing parenthesis
            capitalizeNext = 0;
        } else if (capitalizeNext && isalpha(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
            capitalizeNext = 0;
        }
    }
}",0
yrah128,1696448662,8,"#include <stdio.h>
#include <ctype.h>

void Capitalise(char *phrase) {
    int insideParentheses = 0;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (phrase[i] == '(') {
            insideParentheses = 1;
        } else if (phrase[i] == ')') {
            insideParentheses = 0;
        } else if (insideParentheses && isalpha(phrase[i])) {
            phrase[i] = toupper(phrase[i]);
        }
    }
}",0
yrah128,1696671345,9,"#include <stdio.h>


int isLowercase(char c) {
    return (c >= 'a' && c <= 'z');
}


char toUppercase(char c) {
    if (isLowercase(c)) {
        return c - 32;
    }
    return c; 
}


void Capitalise(char *phrase) {
    int i = 0;
    int capitalizeNext = 1; 

    while (phrase[i] != '\0') {
        if (isLowercase(phrase[i])) {
            if (capitalizeNext) {
                phrase[i] = toUppercase(phrase[i]);
                capitalizeNext = 0; 
            } else {
                capitalizeNext = 0; 
            }
        } else {
            capitalizeNext = 1; 
        }
        i++;
    }
}",0
ysun512,1696250168,1,"void Capitalise(char *phrase)
{
        int i;
    int capital2 = 1;

    for (i = 0; phrase[i] != '\0'; i++) {
        if (capital2 && isLowerCase(phrase[i])) {
            phrase[i] = toUpperCase(phrase[i]);
            capital2 = 0;
        }
        else if (phrase[i] == ' ') {
            capital2 = 1; 
        }
    }
}
",0
ysun512,1696307602,2,"void Capitalise(char *phrase)
{
    if (phrase[0] != '\0') {
        phrase[0] = toupper(phrase[0]);
    }

    for (int i = 1; phrase[i] != '\0'; ++i) {
        if (phrase[i - 1] == ' ') {
            phrase[i] = toupper(phrase[i]);
        }
    }
}
",1
ytho155,1696222983,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    	int i=0;
	while (i !='\0'){
		if phrase[i]=32;
		phrase[i+1]=phrase[i]-('a'-'A');
		i--;
	}
	
}",0
ytho155,1696223322,2,"#include <stdio.h>
//This code capitalizes the first letter of every word in an array

void Capitalise(char *phrase) {
    int i = 0;

//to make sure it is not going to go out of bounds and give us something unexpected. 
    if (phrase[i] >= 'a' && phrase[i] <= 'z') {
        phrase[i] = phrase[i] - ('a' - 'A');
    }


    while (phrase[i] != '\0') {
//check to see if its empty space. If so go one right of that empty space and make it a capital. 
        if (phrase[i] == ' ') {

            if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
                phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
            }
        }
        i++;
    }
}
",1
ytse120,1696238562,1,"int lengthFind(char *phrase) {
    int i=0;
    while (phrase[i]!='\0') {
        i++;
    }
    return i;
}

void Capitalise(char *phrase)
{
    int i, cap='a'-'A', space=1, length=lengthFind(phrase);
    for (i=0;i<length;i++) {
        if ((space == 1) && ((phrase[i] >= 97) && (phrase[i] <= 122))) {
            phrase[i] -= cap;
            space = 0;
        } else if (phrase[i] == 32) {
            space = 1;
        } else {
            space = 0;
        }
    }
}",1
yxie884,1696298342,1,"// Capitalise is a function which  takes a single string as input representing a phrase, and capitalises the first character in each word in the phrase.
// Author: Jessica Xie
#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    //initialising variables
    int i, length;
    length = strlen(phrase);
    char space;
    space = ' ';
    
    //defining where the first letter will be capitilised everytime
    phrase[0] = phrase[0]-32;

    //creating a for loop that would iterate through the string and as it detects a space, it will capitilise the next letter.
    for (i = 0; i < length; i++)
    {
        if (phrase[i] == space){
            phrase[i+1] = phrase[i+1]-32;
        }
    }
}",0
yxie884,1696298841,2,"// Capitalise is a function which  takes a single string as input representing a phrase, and capitalises the first character in each word in the phrase.
// Author: Jessica Xie
#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    //initialising variables
    int i, length;
    length = strlen(phrase);
    char space;
    space = ' ';
    
    //defining where the first letter will be capitilised everytime
    if ((phrase[0]>= 97 && phrase[0]<= 122)){
     phrase[0] = phrase[0]-32;   
    }

    //creating a for loop that would iterate through the string and as it detects a space, it will capitilise the next letter.
    for (i = 0; i < length; i++)
    {
        if ((phrase[i] == space)&&(phrase[i+1]>= 97 && phrase[i+1]<= 122)){
            phrase[i+1] = phrase[i+1]-32;
        }
    }
}",1
yyin299,1696426216,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0')
    {
        if (phrase[i - 1] == ' ' && phrase[i] <= 122 && phrase[i] >= 97)
        {
            phrase[i] = phrase[i] - 32;
        }
        i++;
    }
    phrase[0] = phrase[0] - 32;
}
",0
yyin299,1696426302,2,"#include <stdio.h>

void Capitalise(char *phrase)
{
    int i = 0;
    while (phrase[i] != '\0')
    {
        if (phrase[i - 1] == ' ' && phrase[i] <= 122 && phrase[i] >= 97)
        {
            phrase[i] = phrase[i] - 32;
        }
        i++;
    }
    if (phrase[0] <= 122 && phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    }
}",1
yyin440,1696310419,1,"#include <stdio.h>

void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase [0] -= ('a' - 'A');
    }

    for (int i = 0; phrase[i] != '\0'; i++){
        if (phrase[i - 1] == ' ' && phrase[i] >= 'a' && phrase[i] <= 'z') {
            phrase[i] -= ('a' - 'A');
        }
    }
}
",1
yzhe520,1696399612,1,"void Capitalise(char *phrase)
{//first capitalise the first character in the phrase
    int i, length;
    length = strlen(phrase);

    //check whether it is a lower-case character or not
    if ((phrase[0] >= 97) && (phrase[0] <= 122))
    {
        phrase[0] = phrase[0] - ('a' - 'A'); //yes, then capitalise it;
    }

    //look for spaces to indicate positions of words
    for (i = 0; i < length; i++) {
        if ((phrase[i+1] >= 97) && (phrase[i+1]<=122) && (phrase[i]==' ')){
           phrase[i+1]=phrase[i+1]-('a'-'A');
        }
    }
    
}
",1
zche975,1696838507,1,"void Capitalise(char *phrase) {
 int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && IsLowerCase(phrase[i])) {
            phrase[i] = ToUpperCase(phrase[i]);
        }

        capitalizeNext = (phrase[i] == ' ') ? 1 : 0;
    }
}
    
",0
zche975,1696838536,2,"void Capitalise(char *phrase) {
int IsLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}

char ToUpperCase(char c) {
    if (IsLowerCase(c)) {
        return c - ('a' - 'A');
    }
    return c;
}

void Capitalise(char *phrase) {
    int capitalizeNext = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (capitalizeNext && IsLowerCase(phrase[i])) {
            phrase[i] = ToUpperCase(phrase[i]);
        }

        capitalizeNext = (phrase[i] == ' ') ? 1 : 0;
    }
}",0
zche975,1696839052,3,"void Capitalise(char *phrase) {
    int i = 0;

    while (phrase[i] != '\0') {
        i++;
    }

    i = i - 1;

    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (int j = 0; j <= i; j++) {
        if (phrase[j] == ' ') {
            if (phrase[j + 1] >= 'a' && phrase[j + 1] <= 'z') {
                phrase[j + 1] = phrase[j + 1] - ('a' - 'A');
            }
        }
    }
}
",1
zcol623,1696329507,1,"//Author:zcol623
void Capitalise(char* phrase)
{
	//Find the length of the string 
	int length = strlen(phrase);

	//Capitalise first character of string
	phrase[0] = phrase[0] - ('a' - 'A');

	//Loop through the string starting at the second character
	for (int i = 1; i < length; i++) {
		if (phrase[i] == ' ') {
			// If the current character is a space, capitalize the next character
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
	}
}
",0
zcol623,1696329701,2,"//Author:zcol623
void Capitalise(char* phrase)
{
	//Find the length of the string 
	int length = strlen(phrase);

	//Capitalise first character of string if not already capitalised
	if (phrase[0] >= 'a' && phrase[0] <= 'z') {
		phrase[0] = phrase[0] - ('a' - 'A');
	}

	//Loop through the string starting at the second character
	for (int i = 1; i < length; i++) {
		if (phrase[i] == ' ') {
			// If the current character is a space, capitalize the next character
			if (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z') {
				phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
			}
		}
	}
}
",1
zcra120,1696733082,1,"  void Capitalise(char *phrase)
{
 int length;
  length =  strlen(phrase);
    int i ;
   if  (phrase[0] > 90 && phrase[0]<122){
       phrase[0] = phrase[0]-32;
   }
    for(i=0;i<length;i++){
        
        if ((phrase[i] == ' ') && phrase[i]>90 && phrase[i]<122)
        phrase[i+1] = phrase[i+1]-32;
          }

    
}",0
zcra120,1696733280,2," void Capitalise(char *phrase)
{
 int length;
  length =  strlen(phrase);
    int i ;
   if  (phrase[0] > 90 && phrase[0]<122){
       phrase[0] = phrase[0]-32;
   }
    for(i=0;i<length;i++){
        
        if (phrase[i] == ' '){
            if (phrase[i+1]>90 && phrase[i+1]<122){
          
        phrase[i+1] = phrase[i+1]-32;
          }
        }
    }

    
}",0
zcra120,1696733315,3," void Capitalise(char *phrase)
{
 int length;
  length =  strlen(phrase);
    int i ;
   if  (phrase[0] > 90 && phrase[0]<=122){
       phrase[0] = phrase[0]-32;
   }
    for(i=0;i<length;i++){
        
        if (phrase[i] == ' '){
            if (phrase[i+1]>90 && phrase[i+1]<=122){
          
        phrase[i+1] = phrase[i+1]-32;
          }
        }
    }

    
}",1
zfu276,1696647475,1,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] -= ('a' - 'A'); 
    }

    int i = 0;
    while (phrase[i] != '\0') {
        if( (phrase[i] == ' ') && (phrase[i+1] >= 'a') && (phrase[i+1] <= 'z') ) {
        phrase[i+1] -= ('a' - 'A');
        }
        i++;
    }
}",1
zgab423,1696828599,1,"void Capitalise(char *phrase)
{
    int word =1;
    
    int isLower(char C) {
    return (C >= 'a' && C <= 'z');
}

    for (int i=0; phrase[i] != '\0'; i++ ) {
        if (isLower(phrase[i])) {
            if (word){
                 phrase[i] -= 32;
                 word = 0;
            }
            
        } 
        
        else {
            word = 1;
        
        }
        
    }
}
",0
zgab423,1696831571,2,"void Capitalise(char *phrase) {
    
    int word = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        char normalChar = phrase[i];

        if ((normalChar >= 'a' && normalChar <= 'z') || (normalChar >= 'A' && normalChar <= 'Z')) {
            if (word) {
                if (normalChar >= 'a' && normalChar <= 'z') {
                    normalChar -= 32; 
                }
                
                phrase[i] = normalChar;
                word = 0;
                
            } else {
                if (normalChar >= 'A' && normalChar <= 'Z') {
                    normalChar += 32; 
                }
                phrase[i] = normalChar;
            }
            
        } 
            else {
            word = 1;
        }
    }
}
",0
zgab423,1696840655,3,"void Capitalise(char *phrase) {
    
    int word = 1;

    for (int i = 0; phrase[i] != '\0'; i++) {
        char normalChar = phrase[i];

        if ((normalChar >= 'a' && normalChar <= 'z') || (normalChar >= 'A' && normalChar <= 'Z')) {
            if (word) {
                if (normalChar >= 'a' && normalChar <= 'z') {
                    normalChar -= 32; 
                }
                
                phrase[i] = normalChar;
                word = 0;
                
            } else {
                if (normalChar >= 'A' && normalChar <= 'Z') {
                    normalChar += 32; 
                }
                phrase[i] = normalChar;
            }
            
        } 
            else {
            word = 1;
        }
        
        if (phrase[i] == '-') {
            word = 0;
        }
    }
}

",0
zgab423,1696841760,4,"void Capitalise(char *phrase) {
    
    int word = 1;
    
    int i =0;
    if (phrase[i] <= 'z' && phrase[i] >= 'a') {
        phrase[i] = phrase[i] - (32);
        
    }

    for (int i = 0; phrase[i] != '\0'; i++) {
        char normalChar = phrase[i];

        if ((phrase[i -1] == ' ') && (normalChar >= 'a' && normalChar <= 'z') || (normalChar >= 'A' && normalChar <= 'Z')) {
            if (word) {
                if (normalChar >= 'a' && normalChar <= 'z') {
                    normalChar -= 32; 
                }
                
                phrase[i] = normalChar;
                word = 0;
                
            } else {
                if (normalChar >= 'A' && normalChar <= 'Z') {
                    normalChar += 32; 
                }
                phrase[i] = normalChar;
            }
            
        } 
            else {
            word = 1;
        }
        
        if (phrase[i] == '-') {
            word = 0;
        }
    }
}


",0
zgab423,1696841894,5,"void Capitalise(char *phrase) {
    
    int word = 1;
    
    int i =0;
    if (phrase[i] <= 'z' && phrase[i] >= 'a') {
        phrase[i] = phrase[i] - (32);
        
    }

    for (int i = 0; phrase[i] != '\0'; i++) {
        char normalChar = phrase[i];

        if ((phrase[i -1] == ' ') && (phrase[i] >= 'a' && phrase[i] <= 'z')) {
            if (word) {
                if (normalChar >= 'a' && normalChar <= 'z') {
                    normalChar -= 32; 
                }
                
                phrase[i] = normalChar;
                word = 0;
                
            } else {
                if (normalChar >= 'A' && normalChar <= 'Z') {
                    normalChar += 32; 
                }
                phrase[i] = normalChar;
            }
            
        } 
            else {
            word = 1;
        }
        
        if (phrase[i] == '-') {
            word = 0;
        }
    }
}

",1
zgar110,1696818157,1,"bool isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}



 void Capitalise(char *phrase) {
    bool capitalizeNext = true;


    for (int i = 0; phrase[i] != '\0'; i++) 
    {
        if (isLowerCase(phrase[i])) 
        {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = false;
             }
         } else {
            capitalizeNext = true;
         }
    }
}",0
zgar110,1696818571,2,"
bool isLowerCase(char c) {
    return (c >= 'a' && c <= 'z');
}


void Capitalise(char *phrase) {
    
    bool capitalizeNext = true;

    for (int i = 0; phrase[i] != '\0'; i++) {
        if (isLowerCase(phrase[i]))
        {
            if (capitalizeNext) {
                phrase[i] = toupper(phrase[i]);
                capitalizeNext = false;
              }
           } else {
             capitalizeNext = (phrase[i] == ' ');
        }
    }
}
",1
zgas053,1696843184,1,"void Capitalise(char *phrase)
{
    int i;
    char x;
    
    for (i = 0; phrase[i] != 0; i++){
        x = phrase[i];
        if (i == 0 || phrase[i-1] == ' '){
         if (x >= 'a' && x <= 'z'){
             phrase[i] = x - 'a' + 'A';
         }
        }
    }
}
",1
zgin653,1696210483,1,"void Capitalise(char *phrase)
{
    //Adding a space in front of the array
    phrase[-1] = ' ';

    int i = -1;
    while (phrase[i] != '\0'){
        if (phrase[i] == 32 && phrase[i+1] >= 'a' && phrase[i+1] <= 'z'){
             phrase[i+1] = phrase[i+1] - 'a' + 'A';
        }
        i++;
    }
}
",0
zgin653,1696239638,2,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - 'a' + 'A';
    }
    int i = 1;
    while (phrase[i] != '\0'){
        if (phrase[i] >= 'a' && phrase[i] <= 'z'){
            if (!((phrase[i - 1] >= 'a' && phrase[i - 1] <= 'z') || (phrase[i - 1] >= 'A' && phrase[i - 1] <= 'Z'))){ 
                phrase[i] = phrase[i] - 'a' + 'A';
            }
        }
        i++;
    }
}
",0
zgin653,1696239842,3,"void Capitalise(char *phrase)
{
    if (phrase[0] >= 'a' && phrase[0] <= 'z'){
        phrase[0] = phrase[0] - 'a' + 'A';
    }
    int i = 1;
    while (phrase[i] != '\0'){
        if (phrase[i] >= 'a' && phrase[i] <= 'z'){
            if (phrase[i-1] == ' '){ 
                phrase[i] = phrase[i] - 'a' + 'A';
            }
        }
        i++;
    }
}
",1
zguo839,1696813402,1,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char *duanyu) {
    int size = strlen(duanyu);
    int use = 1; 

    for (int i = 0; i < size; i++) {
        if (isalpha(duanyu[i]) && use) {
            duanyu[i] = toupper(duanyu[i]); 
            use = 0; 
        } else if (!isalpha(duanyu[i])) {
            use = 1; 
        }
    }
}",0
zguo839,1696813728,2,"#include <stdio.h>
#include <string.h>
#include <ctype.h>

void Capitalise(char *duanyu) {
    int size = strlen(duanyu);
    int capitalizeNext = 1; 

    for (int i = 0; i < size; i++) {
        if (isspace(duanyu[i])) {
            capitalizeNext = 1; 
        } else if (isalpha(duanyu[i]) && capitalizeNext) {
            duanyu[i] = toupper(duanyu[i]); 
            capitalizeNext = 0; 
        }
    }
}",0
zguo839,1696814763,3,"#include <stdio.h>
#include <string.h>
void Capitalise(char *duanyu) {
    int length = strlen(duanyu);
    int use_Next = 1; 
    for (int i = 0; i < length; i++) {
        if (duanyu[i] == ' ' || duanyu[i] == '(' || duanyu[i] == '.' || (duanyu[i] >= '0' && duanyu[i] <= '9')) {
            use_Next = 1; 
        } else if (use_Next) {
            if (duanyu[i] >= 'a' && duanyu[i] <= 'z') {
                duanyu[i] = duanyu[i] - 'a' + 'A'; 
            }
            use_Next = 0; 
        }
    }
}",0
zguo839,1696815978,4,"void Capitalise(char *duanyu) {
    int use_Next = 1; 
    for (int i = 0; duanyu[i] != '\0'; i++) {
        if (duanyu[i] == ' ') {
            use_Next = 1; 
        } else if (use_Next && duanyu[i] >= 'a' && duanyu[i] <= 'z') {
            duanyu[i] = duanyu[i] - 'a' + 'A'; 
            use_Next = 0; 
        } else {
            use_Next = 0;
        }
    }
}",1
zhon780,1696305439,1,"void Capitalise(char *phrase)
{
    bool state = true;
    for (int i = 0; i < strlen(phrase); i++)
    {
        if (state && phrase[i] >= 97 && phrase[i] <= 122) {
            phrase[i] -= 32;
        }
        
        state = false;
        
        if (phrase[i] == 32) {
            state = true;
        }
    }
}",1
zliu381,1696683376,1,"void Capitalise(char* phrase)
{
	int i = 0;
	
	while (phrase[i] != '\0') {
		if ( ((phrase[i - 1] == ' ') | (i == 0)) & ((phrase[i] >= 97) & (phrase[i] <= 122)) ) {
			phrase[i] = phrase[i] - (32);

		}
		i++;
	}

}",1
zliu578,1696646880,1,"void Capitalise(char* phrase)
{
	if ((int)phrase[0] >= 97 && (int)phrase[0] <= 122) {
		phrase[0] = phrase[0] - 32;
	}
	int i = 0;
	while (phrase[i] != '\0') {
		if (phrase[i] == ' ' && (int)phrase[i + 1] >= 97 && (int)phrase[i + 1] <= 122) {
			phrase[i + 1] = phrase[i + 1] - 32;
		}
		i++;
	}
}
",1
zpen457,1696754032,1,"void Capitalise(char *phrase)
{
    int i = 1;
    while (phrase[i] != '\0'){
        if (phrase[i - 1] == ' ' && phrase[i] >= 97 && phrase[i] <= 122){
            phrase[i] -= 32;
        }
        i++;
    }
    
    if (phrase[0] >= 97 && phrase[0] <= 122){
        phrase[0] -= 32;
    }

}",1
zqia091,1696821877,1,"void Capitalise(char* phr) 
{
    int i;
    char pre=' ';

    for (i=0;phr[i]!='\0';i++) 
    {
        if (isLowerCase(phr[i])) 
        {
            if (pre==' ' || pre< 'a' || pre> 'z') 
            {
                phr[i]=toUpperCase(phr[i]); 
            }
        }
        pre=phr[i];
    }
}",0
zqia091,1696822094,2,"void Capitalise(char *phr) 
{
    bool capitaliseN=true;
    for (int i = 0; phr[i] != '\0'; i++) 
    {
        if (isLowerCase(phr[i]) && capitaliseN) 
        {
            phr[i]=phr[i] - 32;
            capitaliseN=false;
        } else 
        {
            if (phr[i]==' ' || phr[i]=='\t' || phr[i]== '\n') 
            {
                capitaliseN=true;
            }
        }
    }
}",0
zqia091,1696822186,3,"void Capitalise(char *phrase) 
{
    bool capitalizeN=true;
    for (int i=0; phrase[i]!='\0';i++) 
    {
        if (isLowerCase(phrase[i]) && capitalizeN) 
        {
            phrase[i] = phrase[i] - 32;
            capitalizeN=false;
        } else {
            if (phrase[i]== ' ' ||phrase[i]== '\t'||phrase[i]== '\n') 
            {
                capitalizeN=true;
            }
        }
    }
}",0
zqia091,1696838689,4,"void Capitalise(char *phr) 
{
    int capitalizeN=1;

    for (int i=0; phr[i] != '\0'; i++) 
    {
        if (phr[i] == ' ' || phr[i] == '\t' || phr[i]== '\n') 
        {
            capitalizeN= 1;
        } else 
        {
            if (capitalizeN&&(phr[i]>='a'&& phr[i]<='z')) 
            {
                phr[i]=toUpper(phr[i]);
            }
            capitalizeN= 0;
        }
    }
}",0
zqia091,1696838879,5,"void Capitalise(char *ph) 
{
    int capitalizeN =1;
    for (int i=0;ph[i]!='\0';i++) 
    {
        if (ph[i] == ' ' || ph[i] == '\t'||ph[i] == '\n') 
        {
            capitalizeN=1;
        } else 
        {
            if (capitalizeN && islower(ph[i])) 
            {
                ph[i]=toupper(ph[i]);
            }
            capitalizeN=0;
        }
    }
}",1
zshi453,1696215126,1,"#include <stdio.h>
#include <string.h>
 
void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int i;
    if (phrase[0] > 96)
    {
        phrase[0] = phrase[0]- 32;
    }
    for (i = 0; i<len; ++i)
    {
        if ((phrase[i] = ' ') && (phrase[i + 1] > 96))
        {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
    return;
}",0
zshi453,1696215366,2,"#include <stdio.h>
#include <string.h>
 
void Capitalise(char *phrase)
{
    int len = strlen(phrase);
    int i;
    if (phrase[0] > 96)
    {
        phrase[0] = phrase[0]- 32;
    }
    for (i = 0; i<len; ++i)
    {
        if ((phrase[i] == ' ') && (phrase[i + 1] > 96))
        {
            phrase[i + 1] = phrase[i + 1] - 32;
        }
    }
}",1
zvor566,1696740874,1,"void Capitalise(char *phrase)
{
  int i = 0;
int is_word = 0;

while (phrase[i] != '\0') {
	if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
		if (is_word == 0) {
			phrase[i] = phrase[i] - 32;
			is_word = 1;
		}
		
	}
	else {
		is_word = 0;
	}
	i++;
}  
}
",0
zvor566,1696741608,2,"void Capitalise(char *phrase)
{
	int i = 0;
	int is_word = 0;

	while (phrase[i] != '\0') {
		if (((phrase[i] >= 97) && (phrase[i] <= 122))||((phrase[i] >= 65) && (phrase[i] <= 90))){
			if (is_word == 0) {
				if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
					phrase[i] = phrase[i] - 32;
				}
				is_word = 1;
			}
			
		}

		else {
			is_word = 0;
		}
		i++;
	}
}
",0
zvor566,1696741915,3,"void Capitalise(char *phrase)
{
	int i = 0;
	int is_word = 0;

	while (phrase[i] != '\0') {
		if (((phrase[i] >= 97) && (phrase[i] <= 122))||((phrase[i] >= 65) && (phrase[i] <= 90))){
			if (is_word == 0) {
				if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
					phrase[i] = phrase[i] - 32;
				}
				is_word = 1;
			}
			
		}

		else if(phrase[i]==32){
			is_word = 0;
		}
		i++;
	}
}
",0
zvor566,1696742317,4,"void Capitalise(char *phrase)
{
	int i = 0;
int is_word = 0;

while (phrase[i] != '\0') {
	if (phrase[i] !=32){
		if (is_word == 0) {
			if ((phrase[i] >= 97) && (phrase[i] <= 122)) {
				phrase[i] = phrase[i] - 32;
			}
			is_word = 1;
		}
		
	}

	else {
		is_word = 0;
	}
	i++;
}
}
",1
zwan373,1696390818,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{   
    int i;
    if (phrase[0]<=122 && phrase[0]>=97)
    {
        phrase[0] = phrase[0]-32;
    }
    
    for (i=0;i<strlen(phrase)-1;i++)
    {
        if (phrase[i]==' ' && phrase[i+1]!='\0')
        {
            phrase[i+1]=phrase[i+1]-32;
        }
    }

}",0
zwan373,1696392037,2,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{   
    int i;
    if (phrase[0]<=122 && phrase[0]>=97)
    {
        phrase[0] = phrase[0]-32;
    }
    
    for (i=0;i<strlen(phrase)-1;i++)
    {
        if (phrase[i]==' ' && phrase[i+1]!='\0')
        {
            if (phrase[i+1]<=122 && phrase[i+1]>=97)
            {
                phrase[i+1]=phrase[i+1]-32;
            }
        }
    }
}",1
zwil198,1696642595,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase, int left, int right)
{
    int length = strlen(phrase);
    int i = 0;
    
    while(left < right) {
        
    
        if(phrase[i] <= ""z"" && phrase[i] >= ""a"") {
            
        if(i == 0 || phrase[i - 1] == "" "") {
            
        if(phrase[i+1] != "" "") {
            
            phrase[i] == phrase[i-32];
        } 
      }
    }
    
    left++;
   }
}
",0
zwon694,1696303929,1,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);

    if (phrase[0] >= 'a' && phrase[0] <= 'z') {
        phrase[0] = phrase[0] - ('a' - 'A');
    }

    for (i = 0; i < length - 1; i++) {
        if ((phrase[i] == 32) && (phrase[i + 1] >= 'a' && phrase[i + 1] <= 'z')) {
            phrase[i + 1] = phrase[i + 1] - ('a' - 'A');
        }
    }
}
",1
zwu591,1696662623,1,"void Capitalise(char *phrase)
{
    int i;
    int length = strlen(phrase);

    for (i = 1; i < length; i++) {
        if (phrase[i] == ' ' && phrase[i+1] >= 97 && phrase[i+1] <= 122) {
            phrase[i+1] = phrase[i+1] - ('a' - 'A');
        }
    }

    if (phrase[0] >= 97 && phrase[0] <= 122) {
        phrase[0] = phrase[0] - ('a' - 'A');
    }
}
",1
zyah987,1696563106,1,"void Capitalise(char *phrase) {
    char *ptr = phrase;
    while (*ptr) {
        if (isLowercase(*ptr) && (ptr == phrase || *(ptr - 1) == ' ')) {
            *ptr -= 32;  
        }
        ptr++;
    }
}
",0
zyah987,1696565456,2,"void Capitalise(char *phrase) 
{
    char *p = phrase;
    while (*p) {
        if (p == phrase || *(p - 1) == ' ') {
            char c = *p;
            if (c >= 'a' && c <= 'z') {
                *p = c - ('a' - 'A');
            }
        }
        p++;
    }
}
",1
zyao804,1696214171,1,"#include <stdio.h>
#include <string.h>

void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    
    if (phrase[0] >= 97)
    {
        phrase[0] = phrase[0] - 32;
    }
    
    for (int i=0;i<length;i++)
    {
        if (phrase[i]==' ')
        {
            if (phrase[i+1]>=97)
            {
                phrase[i+1] = phrase[i+1] -32;
            }
        }
        
    }
}",1
zyu100,1696391410,1,"void Capitalise(char *phrase)
{
    int length= strlen (phrase);
    if (phrase[0]>='a'&& phrase[0]<='z'){
        phrase[0]=phrase[0]-32;
    }
    
    for (int i=0;i<length;i++){
    if (phrase[i]==' '&&(phrase[i+1]>='a'&&phrase[i+1]<='z'))   {
        phrase[i+1]=phrase[i+1]-32;
    } 
    }
}
",1
zzho965,1696802457,1,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    for (int i = 0; i < length; i++) {
      
         else if (i==0){
            phrase[i]=phrase[i] - 32;
        }
        
        if (phrase[i] == ' ') {
            phrase[i+1]=phrase[i+1] - 32;
        } 
       
        else  {
            phrase[i] = phrase[i];
             // Reset flag after capitalizing
        }
    }
}


",0
zzho965,1696802501,2,"void Capitalise(char *phrase)
{
    int length = strlen(phrase);

    for (int i = 0; i < length; i++) {
      
        if (i==0){
            phrase[i]=phrase[i] - 32;
        }
        
        else if (phrase[i] == ' ') {
            phrase[i+1]=phrase[i+1] - 32;
        } 
       
        else  {
            phrase[i] = phrase[i];
             // Reset flag after capitalizing
        }
    }
}


",0
zzho965,1696803130,3,"void Capitalise(char *phrase)
{
char Capitallise(char letter) {
    if (letter >= 'a' && letter <= 'z') {
        letter = letter - 32;
    }
    return letter;
}
    int length = strlen(phrase);

    for (int i = 0; i < length; i++) {
        if (i==0){
            phrase[i]=Capitallise(phrase[i]);
        }
        
        else if (phrase[i] == ' ') {
            phrase[i+1]=Capitallise(phrase[i+1]);
        } else {
            phrase[i] = phrase[i];
          
        }
    }
}
",1
zzol692,1696741631,1,"// function which takes a single string as input representing a phrase, and capitalises the first character in each word in the phrase.  
//Author: Zara Zoll
void Capitalise(char* phrase) {
    int i = 0;
    int capitaliseNext = 1; //intialse to 1, determine whther next character should be capitalised

    while (phrase[i] != '\0') { //goes through phrase until end of string
        if (capitaliseNext && (phrase[i] >= 'a' && phrase[i] <= 'z')) { //if next charcter should be capitialised and the current letter is lowercase between a and z
            phrase[i] = ToUpperCase(phrase[i]);  //convert to upper case
            capitaliseNext = 0; //set to 0
        else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n') {
            capitaliseNext = 1; //checks if the current character is a space, tab, or newline character, which indicates the start of a new word. Than sets back to 1 if there is.
        }
        else {
            capitaliseNext = 0; //set to 0 as next haracter should not be capitalised
        }

        i++; //increment 
    }
} ",0
zzol692,1696743106,2,"//Author: Zara Zoll
// Function to capitalise the first character of each word in a phrase
void Capitalise(char* phrase) {
    int i = 0;
    int capitaliseNext = 1; // Initialize to 1, determine whether the next character should be capitalised

    while (phrase[i] != '\0') { // Iterate through the phrase until the end of the string
        if (capitaliseNext && phrase[i] >= 'a' && phrase[i] <= 'z') { // If the next character should be capitalised and the current letter is lowercase
            // Convert to uppercase by subtracting the ASCII offset
            phrase[i] = phrase[i] - ('a' - 'A');
            capitaliseNext = 0; // Set to 0
        }
        else if (phrase[i] == ' ' || phrase[i] == '\t' || phrase[i] == '\n') {
            capitaliseNext = 1; // Check if the current character is a space, tab, or newline character, which indicates the start of a new word. Then set back to 1.
        }
        else {
            capitaliseNext = 0; // Set to 0 as the next character should not be capitalised
        }

        i++; // Increment
    }
}",1
